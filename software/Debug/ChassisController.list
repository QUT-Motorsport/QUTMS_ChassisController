
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800b6f0  0800b6f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9ec  0800b9ec  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9ec  0800b9ec  0001b9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9f4  0800b9f4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9f4  0800b9f4  0001b9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800b9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  200000a4  0800baa0  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  0800baa0  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a8dc  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053b1  00000000  00000000  0004a9ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a30  00000000  00000000  0004fd60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017a8  00000000  00000000  00051790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d5a6  00000000  00000000  00052f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b28d  00000000  00000000  000804de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108523  00000000  00000000  0009b76b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a3c8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e10  00000000  00000000  001a3d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b6d8 	.word	0x0800b6d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800b6d8 	.word	0x0800b6d8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <Parse_AMS_HeartbeatResponse>:

	return p;
}

void Parse_AMS_HeartbeatResponse(uint8_t *data, bool *initialised, bool* HVAn, bool* HVBn, bool* precharge, bool* HVAp, bool* HVBp, uint16_t* averageVoltage, uint16_t* runtime)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
	*HVAn = (bool)(data[0] & 0x1);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	701a      	strb	r2, [r3, #0]
	*HVBn = (bool)(data[0] & 0x2);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	701a      	strb	r2, [r3, #0]
	*precharge = (bool)(data[0] & 0x4);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf14      	ite	ne
 8000636:	2301      	movne	r3, #1
 8000638:	2300      	moveq	r3, #0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	701a      	strb	r2, [r3, #0]

	*HVAp = (bool)(data[0] & 0x10);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2da      	uxtb	r2, r3
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	701a      	strb	r2, [r3, #0]
	*HVBp = (bool)(data[0] & 0x20);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2da      	uxtb	r2, r3
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	701a      	strb	r2, [r3, #0]

	*initialised = (bool)(data[0] & 0x80);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	09db      	lsrs	r3, r3, #7
 8000676:	b2da      	uxtb	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	701a      	strb	r2, [r3, #0]

	*averageVoltage = (uint16_t)((data[1] & 0x3F) << 6 | (data[0]));
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b21b      	sxth	r3, r3
 8000686:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800068a:	b21a      	sxth	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29a      	uxth	r2, r3
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	801a      	strh	r2, [r3, #0]
	*runtime = (uint16_t)(data[3] << 8 | data[2]);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3303      	adds	r3, #3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3302      	adds	r3, #2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b6:	801a      	strh	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2200      	movs	r2, #0
 80006d6:	2116      	movs	r1, #22
 80006d8:	2002      	movs	r0, #2
 80006da:	f000 fa01 	bl	8000ae0 <Compose_CANId>
 80006de:	4603      	mov	r3, r0
 80006e0:	607b      	str	r3, [r7, #4]
	return p;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x1, 0x0, 0x0);
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2300      	movs	r3, #0
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	2200      	movs	r2, #0
 80006fe:	2116      	movs	r1, #22
 8000700:	2002      	movs	r0, #2
 8000702:	f000 f9ed 	bl	8000ae0 <Compose_CANId>
 8000706:	4603      	mov	r3, r0
 8000708:	607b      	str	r3, [r7, #4]
	return p;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Compose_CC_SoftShutdown>:

CC_SoftShutdown_t Compose_CC_SoftShutdown(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af02      	add	r7, sp, #8
	CC_SoftShutdown_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x1, 0x1, 0x0);
 800071a:	2300      	movs	r3, #0
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	2200      	movs	r2, #0
 8000726:	2116      	movs	r1, #22
 8000728:	2002      	movs	r0, #2
 800072a:	f000 f9d9 	bl	8000ae0 <Compose_CANId>
 800072e:	4603      	mov	r3, r0
 8000730:	607b      	str	r3, [r7, #4]
	return p;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <Send_CC_FatalShutdown>:

bool Send_CC_FatalShutdown(char* errorCause, bool echo,
		uint32_t* CAN1_Mailbox, uint32_t* CAN2_Mailbox, uint32_t* CAN3_Mailbox,
		CAN_HandleTypeDef* CanHandle, CAN_HandleTypeDef* CanHandle2, CAN_HandleTypeDef* CanHandle3,
		UART_HandleTypeDef* huartHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	460b      	mov	r3, r1
 800074a:	72fb      	strb	r3, [r7, #11]
	if(echo)
 800074c:	7afb      	ldrb	r3, [r7, #11]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00a      	beq.n	8000768 <Send_CC_FatalShutdown+0x2c>
	{
		HAL_UART_Transmit(huartHandle, (uint8_t *)errorCause, (size_t)strlen(errorCause), HAL_MAX_DELAY);
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f7ff fd74 	bl	8000240 <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000760:	68f9      	ldr	r1, [r7, #12]
 8000762:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000764:	f006 f9a2 	bl	8006aac <HAL_UART_Transmit>
	}
	CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000768:	f7ff ffc0 	bl	80006ec <Compose_CC_FatalShutdown>
 800076c:	4603      	mov	r3, r0
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	615a      	str	r2, [r3, #20]
	{
			.ExtId = fatalShutdown.id,
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	2304      	movs	r3, #4
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	2301      	movs	r3, #1
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 800078e:	230f      	movs	r3, #15
 8000790:	743b      	strb	r3, [r7, #16]
	HAL_CAN_AddTxMessage(CanHandle, &header, data, CAN1_Mailbox);
 8000792:	f107 0210 	add.w	r2, r7, #16
 8000796:	f107 0114 	add.w	r1, r7, #20
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800079e:	f003 fdc3 	bl	8004328 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle2, &header, data, CAN2_Mailbox);
 80007a2:	f107 0210 	add.w	r2, r7, #16
 80007a6:	f107 0114 	add.w	r1, r7, #20
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007ae:	f003 fdbb 	bl	8004328 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle3, &header, data, CAN3_Mailbox);
 80007b2:	f107 0210 	add.w	r2, r7, #16
 80007b6:	f107 0114 	add.w	r1, r7, #20
 80007ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80007be:	f003 fdb3 	bl	8004328 <HAL_CAN_AddTxMessage>
	return true;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3730      	adds	r7, #48	; 0x30
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <fsm_new>:
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	2010      	movs	r0, #16
 80007d6:	f00a fb33 	bl	800ae40 <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	2210      	movs	r2, #16
 80007e0:	2100      	movs	r1, #0
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f00a fb3f 	bl	800ae66 <memset>
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	2103      	movs	r1, #3
 80007f2:	2003      	movs	r0, #3
 80007f4:	f006 ff3e 	bl	8007674 <osSemaphoreNew>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	2200      	movs	r2, #0
 8000800:	2103      	movs	r1, #3
 8000802:	2003      	movs	r0, #3
 8000804:	f006 ff36 	bl	8007674 <osSemaphoreNew>
 8000808:	4602      	mov	r2, r0
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	2120      	movs	r1, #32
 8000814:	4618      	mov	r0, r3
 8000816:	f006 ffcb 	bl	80077b0 <osSemaphoreAcquire>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d109      	bne.n	8000834 <fsm_new+0x68>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	4798      	blx	r3
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	4618      	mov	r0, r3
 8000830:	f007 f824 	bl	800787c <osSemaphoreRelease>
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <fsm_iterate>:
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	2120      	movs	r1, #32
 800084e:	4618      	mov	r0, r3
 8000850:	f006 ffae 	bl	80077b0 <osSemaphoreAcquire>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10a      	bne.n	8000870 <fsm_iterate+0x30>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	4798      	blx	r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4618      	mov	r0, r3
 800086a:	f007 f807 	bl	800787c <osSemaphoreRelease>
 800086e:	e004      	b.n	800087a <fsm_iterate+0x3a>
 8000870:	2225      	movs	r2, #37	; 0x25
 8000872:	4904      	ldr	r1, [pc, #16]	; (8000884 <fsm_iterate+0x44>)
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f8ab 	bl	80009d0 <fsm_log>
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	0800b6f0 	.word	0x0800b6f0

08000888 <fsm_changeState>:
 8000888:	b580      	push	{r7, lr}
 800088a:	b09c      	sub	sp, #112	; 0x70
 800088c:	af02      	add	r7, sp, #8
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	429a      	cmp	r2, r3
 800089c:	d036      	beq.n	800090c <fsm_changeState+0x84>
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	2120      	movs	r1, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f006 ff83 	bl	80077b0 <osSemaphoreAcquire>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d127      	bne.n	8000900 <fsm_changeState+0x78>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	68d9      	ldr	r1, [r3, #12]
 80008ba:	f107 0014 	add.w	r0, r7, #20
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	460b      	mov	r3, r1
 80008c4:	4913      	ldr	r1, [pc, #76]	; (8000914 <fsm_changeState+0x8c>)
 80008c6:	f00a fbc3 	bl	800b050 <siprintf>
 80008ca:	6678      	str	r0, [r7, #100]	; 0x64
 80008cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f000 f87b 	bl	80009d0 <fsm_log>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	4798      	blx	r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	4798      	blx	r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f006 ffbf 	bl	800787c <osSemaphoreRelease>
 80008fe:	e006      	b.n	800090e <fsm_changeState+0x86>
 8000900:	2220      	movs	r2, #32
 8000902:	4905      	ldr	r1, [pc, #20]	; (8000918 <fsm_changeState+0x90>)
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f000 f863 	bl	80009d0 <fsm_log>
 800090a:	e000      	b.n	800090e <fsm_changeState+0x86>
 800090c:	bf00      	nop
 800090e:	3768      	adds	r7, #104	; 0x68
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	0800b718 	.word	0x0800b718
 8000918:	0800b73c 	.word	0x0800b73c

0800091c <fsm_reset>:
 800091c:	b580      	push	{r7, lr}
 800091e:	b098      	sub	sp, #96	; 0x60
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4920      	ldr	r1, [pc, #128]	; (80009b0 <fsm_reset+0x94>)
 8000930:	4618      	mov	r0, r3
 8000932:	f00a fb8d 	bl	800b050 <siprintf>
 8000936:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000938:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4619      	mov	r1, r3
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 f845 	bl	80009d0 <fsm_log>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	65bb      	str	r3, [r7, #88]	; 0x58
 800094c:	2210      	movs	r2, #16
 800094e:	2100      	movs	r1, #0
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f00a fa88 	bl	800ae66 <memset>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	2103      	movs	r1, #3
 8000966:	2003      	movs	r0, #3
 8000968:	f006 fe84 	bl	8007674 <osSemaphoreNew>
 800096c:	4602      	mov	r2, r0
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	2200      	movs	r2, #0
 8000974:	2103      	movs	r1, #3
 8000976:	2003      	movs	r0, #3
 8000978:	f006 fe7c 	bl	8007674 <osSemaphoreNew>
 800097c:	4602      	mov	r2, r0
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	2120      	movs	r1, #32
 8000988:	4618      	mov	r0, r3
 800098a:	f006 ff11 	bl	80077b0 <osSemaphoreAcquire>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d109      	bne.n	80009a8 <fsm_reset+0x8c>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	4798      	blx	r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f006 ff6a 	bl	800787c <osSemaphoreRelease>
 80009a8:	bf00      	nop
 80009aa:	3760      	adds	r7, #96	; 0x60
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	0800b760 	.word	0x0800b760

080009b4 <fsm_setLogFunction>:
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <fsm_log>:
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	68b8      	ldr	r0, [r7, #8]
 80009e4:	4798      	blx	r3
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <Compose_PDM_InitiateStartup>:
#ifdef QUTMS_CAN_PDM

#include "PDM_CAN_Messages.h"

PDM_InitiateStartup_t Compose_PDM_InitiateStartup(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af02      	add	r7, sp, #8
	PDM_InitiateStartup_t p;
	p.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x00, 0x0);
 80009f4:	2300      	movs	r3, #0
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	2300      	movs	r3, #0
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2302      	movs	r3, #2
 80009fe:	2200      	movs	r2, #0
 8000a00:	2114      	movs	r1, #20
 8000a02:	2002      	movs	r0, #2
 8000a04:	f000 f86c 	bl	8000ae0 <Compose_CANId>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	607b      	str	r3, [r7, #4]
	return p;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <Parse_PDM_StartupOk>:

	return packet;
}

void Parse_PDM_StartupOk(PDM_StartupOk_t packet, uint32_t* powerChannels)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b085      	sub	sp, #20
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a24:	607a      	str	r2, [r7, #4]
	*powerChannels = (packet.data[0] << 24) + (packet.data[1] << 16) + (packet.data[2] << 8) + packet.data[3];
 8000a26:	7b3b      	ldrb	r3, [r7, #12]
 8000a28:	061a      	lsls	r2, r3, #24
 8000a2a:	7b7b      	ldrb	r3, [r7, #13]
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	441a      	add	r2, r3
 8000a30:	7bbb      	ldrb	r3, [r7, #14]
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	4413      	add	r3, r2
 8000a36:	7bfa      	ldrb	r2, [r7, #15]
 8000a38:	4413      	add	r3, r2
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <Compose_PDM_SelectStartup>:

PDM_SelectStartup_t Compose_PDM_SelectStartup(uint32_t powerChannels)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	PDM_SelectStartup_t packet;
	packet.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x01, 0x0);
 8000a56:	2300      	movs	r3, #0
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2302      	movs	r3, #2
 8000a60:	2200      	movs	r2, #0
 8000a62:	2114      	movs	r1, #20
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 f83b 	bl	8000ae0 <Compose_CANId>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	613b      	str	r3, [r7, #16]

	uint8_t d[4] = {0};
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<4 ;++i)
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
 8000a76:	e00f      	b.n	8000a98 <Compose_PDM_SelectStartup+0x4c>
		d[i] = ((uint8_t*)&powerChannels)[3-i];
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0303 	rsb	r3, r3, #3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	463b      	mov	r3, r7
 8000a82:	4413      	add	r3, r2
 8000a84:	7819      	ldrb	r1, [r3, #0]
 8000a86:	f107 020c 	add.w	r2, r7, #12
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	460a      	mov	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3301      	adds	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	ddec      	ble.n	8000a78 <Compose_PDM_SelectStartup+0x2c>

	for (int i=0; i<4 ;++i)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	e00d      	b.n	8000ac0 <Compose_PDM_SelectStartup+0x74>
		packet.data[i] = (uint8_t)(d[i] & 0xFF);
 8000aa4:	f107 020c 	add.w	r2, r7, #12
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	4413      	add	r3, r2
 8000aac:	7819      	ldrb	r1, [r3, #0]
 8000aae:	f107 0214 	add.w	r2, r7, #20
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	3301      	adds	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	ddee      	ble.n	8000aa4 <Compose_PDM_SelectStartup+0x58>

	return packet;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ad2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <Compose_CANId>:

/* USER CODE BEGIN 0 */

/* CANId */
uint32_t Compose_CANId(uint8_t priority, uint16_t sourceId, uint8_t autonomous, uint8_t type, uint16_t extra, uint8_t BMSId)
{
 8000ae0:	b490      	push	{r4, r7}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4608      	mov	r0, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	4623      	mov	r3, r4
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	4603      	mov	r3, r0
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	4613      	mov	r3, r2
 8000afc:	70fb      	strb	r3, [r7, #3]
	uint32_t id = (priority & 0x3) << 27
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	06db      	lsls	r3, r3, #27
 8000b02:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
				| (sourceId & 0x1FF) << 18
 8000b06:	88bb      	ldrh	r3, [r7, #4]
 8000b08:	0499      	lsls	r1, r3, #18
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <Compose_CANId+0x68>)
 8000b0c:	400b      	ands	r3, r1
 8000b0e:	431a      	orrs	r2, r3
				| (autonomous & 0x1) << 17
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	045b      	lsls	r3, r3, #17
 8000b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b18:	431a      	orrs	r2, r3
				| (type & 0x7) << 14
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	039b      	lsls	r3, r3, #14
 8000b1e:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000b22:	431a      	orrs	r2, r3
				| (extra & 0x3FF) << 4
 8000b24:	8b3b      	ldrh	r3, [r7, #24]
 8000b26:	0119      	lsls	r1, r3, #4
 8000b28:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	431a      	orrs	r2, r3
				| (BMSId & 0xF);
 8000b30:	7f3b      	ldrb	r3, [r7, #28]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	4313      	orrs	r3, r2
	uint32_t id = (priority & 0x3) << 27
 8000b38:	60fb      	str	r3, [r7, #12]
	return id;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc90      	pop	{r4, r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	07fc0000 	.word	0x07fc0000

08000b4c <Parse_SHDN_HeartbeatResponse>:
	p.data = segmentState;
	return p;
}

void Parse_SHDN_HeartbeatResponse(SHDN_HeartbeatResponse_t packet, uint8_t* segmentState)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b5a:	607a      	str	r2, [r7, #4]
	*segmentState = packet.data;
 8000b5c:	7b3a      	ldrb	r2, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	701a      	strb	r2, [r3, #0]
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <Parse_SHDN_IMD_HeartbeatResponse>:
	p.data = pwmState;
	return p;
}

void Parse_SHDN_IMD_HeartbeatResponse(SHDN_IMD_HeartbeatResponse_t packet, uint8_t* pwmState)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b7c:	607a      	str	r2, [r7, #4]
	*pwmState = packet.data;
 8000b7e:	7b3a      	ldrb	r2, [r7, #12]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	701a      	strb	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <map>:
#ifdef QUTMS_UTIL

#include "Util.h"

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (float)(in_max - in_min) + out_min;
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	69b9      	ldr	r1, [r7, #24]
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	1a8a      	subs	r2, r1, r2
 8000baa:	fb02 f303 	mul.w	r3, r2, r3
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	ee07 3a90 	vmov	s15, r3
 8000bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bda:	ee17 3a90 	vmov	r3, s15
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b08b      	sub	sp, #44	; 0x2c
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000bf4:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <state_start_enter+0x158>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d17a      	bne.n	8000cf2 <state_start_enter+0x106>
	{
		/* Assign memory and nullify Global State */
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000bfc:	f240 500c 	movw	r0, #1292	; 0x50c
 8000c00:	f00a f91e 	bl	800ae40 <malloc>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b4e      	ldr	r3, [pc, #312]	; (8000d44 <state_start_enter+0x158>)
 8000c0a:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000c0c:	4b4d      	ldr	r3, [pc, #308]	; (8000d44 <state_start_enter+0x158>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f240 520c 	movw	r2, #1292	; 0x50c
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f00a f925 	bl	800ae66 <memset>

		/* As CC_GlobalState is accessible across threads
		 * we need to use a semaphore to access and lock it
		 */
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000c1c:	4b49      	ldr	r3, [pc, #292]	; (8000d44 <state_start_enter+0x158>)
 8000c1e:	681c      	ldr	r4, [r3, #0]
 8000c20:	2200      	movs	r2, #0
 8000c22:	2103      	movs	r1, #3
 8000c24:	2003      	movs	r0, #3
 8000c26:	f006 fd25 	bl	8007674 <osSemaphoreNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc

		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000c30:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <state_start_enter+0x158>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000c38:	2120      	movs	r1, #32
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f006 fdb8 	bl	80077b0 <osSemaphoreAcquire>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d141      	bne.n	8000cca <state_start_enter+0xde>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000c46:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <state_start_enter+0x158>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->AMS_Debug = false;
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <state_start_enter+0x158>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->SHDN_Debug = false;
 8000c56:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <state_start_enter+0x158>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	775a      	strb	r2, [r3, #29]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000c5e:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <state_start_enter+0x158>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2201      	movs	r2, #1
 8000c64:	771a      	strb	r2, [r3, #28]
			CC_GlobalState->RTD_Debug = true;
 8000c66:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <state_start_enter+0x158>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	761a      	strb	r2, [r3, #24]
			CC_GlobalState->Inverter_Debug = true;
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <state_start_enter+0x158>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2201      	movs	r2, #1
 8000c74:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->tractiveActive = false;
 8000c76:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <state_start_enter+0x158>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
			CC_GlobalState->CAN1Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000c80:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <state_start_enter+0x158>)
 8000c82:	681c      	ldr	r4, [r3, #0]
 8000c84:	2200      	movs	r2, #0
 8000c86:	2128      	movs	r1, #40	; 0x28
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f006 fe4f 	bl	800792c <osMessageQueueNew>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
			CC_GlobalState->CAN2Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <state_start_enter+0x158>)
 8000c96:	681c      	ldr	r4, [r3, #0]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2128      	movs	r1, #40	; 0x28
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f006 fe45 	bl	800792c <osMessageQueueNew>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
			CC_GlobalState->CAN3Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <state_start_enter+0x158>)
 8000caa:	681c      	ldr	r4, [r3, #0]
 8000cac:	2200      	movs	r2, #0
 8000cae:	2128      	movs	r1, #40	; 0x28
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f006 fe3b 	bl	800792c <osMessageQueueNew>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
			osSemaphoreRelease(CC_GlobalState->sem);
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <state_start_enter+0x158>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f006 fdd9 	bl	800787c <osSemaphoreRelease>
		}

		/* Ensure CANQueue exists */
		if(CC_GlobalState->CAN1Queue == NULL || CC_GlobalState->CAN2Queue == NULL || CC_GlobalState->CAN3Queue == NULL)
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <state_start_enter+0x158>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00b      	beq.n	8000cee <state_start_enter+0x102>
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <state_start_enter+0x158>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <state_start_enter+0x102>
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <state_start_enter+0x158>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <state_start_enter+0x106>
		{
			Error_Handler();
 8000cee:	f002 fa11 	bl	8003114 <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <state_start_enter+0x15c>)
 8000cfa:	f004 fb45 	bl	8005388 <HAL_GPIO_WritePin>

	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t pdmStartup = Compose_PDM_InitiateStartup();
 8000cfe:	f7ff fe76 	bl	80009ee <Compose_PDM_InitiateStartup>
 8000d02:	4603      	mov	r3, r0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]
	{
			.ExtId = pdmStartup.id,
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	2301      	movs	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000d24:	230f      	movs	r3, #15
 8000d26:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <state_start_enter+0x158>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	f107 0208 	add.w	r2, r7, #8
 8000d32:	f107 010c 	add.w	r1, r7, #12
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <state_start_enter+0x160>)
 8000d38:	f003 faf6 	bl	8004328 <HAL_CAN_AddTxMessage>

	/* Debug Tracing */
	//CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
	return;
 8000d3c:	bf00      	nop
}
 8000d3e:	372c      	adds	r7, #44	; 0x2c
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd90      	pop	{r4, r7, pc}
 8000d44:	200049e0 	.word	0x200049e0
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	20004ba4 	.word	0x20004ba4

08000d50 <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b09b      	sub	sp, #108	; 0x6c
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000d58:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <state_start_iterate+0x154>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	7e5b      	ldrb	r3, [r3, #25]
 8000d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	657b      	str	r3, [r7, #84]	; 0x54
 8000d66:	2300      	movs	r3, #0
 8000d68:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000d6a:	e028      	b.n	8000dbe <state_start_iterate+0x6e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8000d6c:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <state_start_iterate+0x154>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 8000d74:	f107 010c 	add.w	r1, r7, #12
 8000d78:	2300      	movs	r3, #0
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f006 fed0 	bl	8007b20 <osMessageQueueGet>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d11b      	bne.n	8000dbe <state_start_iterate+0x6e>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(0x2, 0x14, 0x0, 0x3, 0x00, 0x0))
 8000d86:	693c      	ldr	r4, [r7, #16]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2303      	movs	r3, #3
 8000d92:	2200      	movs	r2, #0
 8000d94:	2114      	movs	r1, #20
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff fea2 	bl	8000ae0 <Compose_CANId>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	d10d      	bne.n	8000dbe <state_start_iterate+0x6e>
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(*((PDM_StartupOk_t*)&(msg.data)), &getPowerChannels);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	331c      	adds	r3, #28
 8000dac:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000db0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000db4:	f7ff fe2f 	bl	8000a16 <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <state_start_iterate+0x154>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f006 ff1c 	bl	8007c04 <osMessageQueueGetCount>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1cc      	bne.n	8000d6c <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d05f      	beq.n	8000e9a <state_start_iterate+0x14a>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ddc:	2201      	movs	r2, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000de6:	4313      	orrs	r3, r2
 8000de8:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000dea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe2b 	bl	8000a4c <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000df6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e10:	2304      	movs	r3, #4
 8000e12:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <state_start_iterate+0x154>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f103 0008 	add.w	r0, r3, #8
 8000e1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e20:	1d1a      	adds	r2, r3, #4
 8000e22:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000e26:	4603      	mov	r3, r0
 8000e28:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <state_start_iterate+0x158>)
 8000e2a:	f003 fa7d 	bl	8004328 <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <state_start_iterate+0x154>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000e36:	2120      	movs	r1, #32
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f006 fcb9 	bl	80077b0 <osSemaphoreAcquire>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d124      	bne.n	8000e8e <state_start_iterate+0x13e>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <state_start_iterate+0x154>)
 8000e46:	681c      	ldr	r4, [r3, #0]
 8000e48:	f002 fb52 	bl	80034f0 <HAL_GetTick>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	6223      	str	r3, [r4, #32]
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <state_start_iterate+0x154>)
 8000e52:	681c      	ldr	r4, [r3, #0]
 8000e54:	f002 fb4c 	bl	80034f0 <HAL_GetTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	62e3      	str	r3, [r4, #44]	; 0x2c
			CC_GlobalState->shutdownTicks = HAL_GetTick();
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <state_start_iterate+0x154>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f002 fb46 	bl	80034f0 <HAL_GetTick>
 8000e64:	4603      	mov	r3, r0
 8000e66:	6363      	str	r3, [r4, #52]	; 0x34
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <state_start_iterate+0x154>)
 8000e6a:	681c      	ldr	r4, [r3, #0]
 8000e6c:	f002 fb40 	bl	80034f0 <HAL_GetTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	63a3      	str	r3, [r4, #56]	; 0x38
			CC_GlobalState->inverterTicks = HAL_GetTick();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <state_start_iterate+0x154>)
 8000e76:	681c      	ldr	r4, [r3, #0]
 8000e78:	f002 fb3a 	bl	80034f0 <HAL_GetTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	6323      	str	r3, [r4, #48]	; 0x30
			osSemaphoreRelease(CC_GlobalState->sem);
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <state_start_iterate+0x154>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 fcf7 	bl	800787c <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <state_start_iterate+0x15c>)
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <state_start_iterate+0x160>)
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fcf8 	bl	8000888 <fsm_changeState>
	}
	return;
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
}
 8000e9c:	3764      	adds	r7, #100	; 0x64
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd90      	pop	{r4, r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200049e0 	.word	0x200049e0
 8000ea8:	20004ba4 	.word	0x20004ba4
 8000eac:	0800b7a4 	.word	0x0800b7a4
 8000eb0:	20000010 	.word	0x20000010

08000eb4 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	/* All CAN Wake or
	 * Confirmation to Idle
	 * Messages go here over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8000ebc:	bf00      	nop
}
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <state_idle_enter+0x80>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 fc65 	bl	80077b0 <osSemaphoreAcquire>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d121      	bne.n	8000f30 <state_idle_enter+0x68>
	{
		/* Assign Threshold to 20% of Brake Pressure */
		CC_GlobalState->brakePressureThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ef6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000f38 <state_idle_enter+0x70>
 8000efa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efe:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000f40 <state_idle_enter+0x78>
 8000f02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <state_idle_enter+0x80>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f0e:	ee17 2a90 	vmov	r2, s15
 8000f12:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428

		/* Init Chassis Controller On */
		CC_GlobalState->ccInit = true;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <state_idle_enter+0x80>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		osSemaphoreRelease(CC_GlobalState->sem);
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <state_idle_enter+0x80>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 fca7 	bl	800787c <osSemaphoreRelease>
	}
	return;
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
}
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	9999999a 	.word	0x9999999a
 8000f3c:	3fc99999 	.word	0x3fc99999
 8000f40:	00000000 	.word	0x00000000
 8000f44:	40790000 	.word	0x40790000
 8000f48:	200049e0 	.word	0x200049e0
 8000f4c:	00000000 	.word	0x00000000

08000f50 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b0ad      	sub	sp, #180	; 0xb4
 8000f54:	af06      	add	r7, sp, #24
 8000f56:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000f58:	4ba0      	ldr	r3, [pc, #640]	; (80011dc <state_idle_iterate+0x28c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000f60:	2120      	movs	r1, #32
 8000f62:	4618      	mov	r0, r3
 8000f64:	f006 fc24 	bl	80077b0 <osSemaphoreAcquire>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 81cf 	bne.w	800130e <state_idle_iterate+0x3be>
	{
		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8000f70:	f002 fabe 	bl	80034f0 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b99      	ldr	r3, [pc, #612]	; (80011dc <state_idle_iterate+0x28c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d925      	bls.n	8000fce <state_idle_iterate+0x7e>
 8000f82:	4b96      	ldr	r3, [pc, #600]	; (80011dc <state_idle_iterate+0x28c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	7e9b      	ldrb	r3, [r3, #26]
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01d      	beq.n	8000fce <state_idle_iterate+0x7e>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8000f92:	4b92      	ldr	r3, [pc, #584]	; (80011dc <state_idle_iterate+0x28c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8000f96:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8000f98:	4b90      	ldr	r3, [pc, #576]	; (80011dc <state_idle_iterate+0x28c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8000f9c:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8000fa0:	4b8e      	ldr	r3, [pc, #568]	; (80011dc <state_idle_iterate+0x28c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8000fa4:	3310      	adds	r3, #16
 8000fa6:	4a8d      	ldr	r2, [pc, #564]	; (80011dc <state_idle_iterate+0x28c>)
 8000fa8:	6814      	ldr	r4, [r2, #0]
 8000faa:	4a8d      	ldr	r2, [pc, #564]	; (80011e0 <state_idle_iterate+0x290>)
 8000fac:	9204      	str	r2, [sp, #16]
 8000fae:	4a8d      	ldr	r2, [pc, #564]	; (80011e4 <state_idle_iterate+0x294>)
 8000fb0:	9203      	str	r2, [sp, #12]
 8000fb2:	4a8d      	ldr	r2, [pc, #564]	; (80011e8 <state_idle_iterate+0x298>)
 8000fb4:	9202      	str	r2, [sp, #8]
 8000fb6:	4a8d      	ldr	r2, [pc, #564]	; (80011ec <state_idle_iterate+0x29c>)
 8000fb8:	9201      	str	r2, [sp, #4]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	488b      	ldr	r0, [pc, #556]	; (80011f0 <state_idle_iterate+0x2a0>)
 8000fc4:	f7ff fbba 	bl	800073c <Send_CC_FatalShutdown>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 8000fce:	f002 fa8f 	bl	80034f0 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4b81      	ldr	r3, [pc, #516]	; (80011dc <state_idle_iterate+0x28c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b64      	cmp	r3, #100	; 0x64
 8000fde:	d925      	bls.n	800102c <state_idle_iterate+0xdc>
 8000fe0:	4b7e      	ldr	r3, [pc, #504]	; (80011dc <state_idle_iterate+0x28c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	7f5b      	ldrb	r3, [r3, #29]
 8000fe6:	f083 0301 	eor.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d01d      	beq.n	800102c <state_idle_iterate+0xdc>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8000ff0:	4b7a      	ldr	r3, [pc, #488]	; (80011dc <state_idle_iterate+0x28c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8000ff4:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8000ff6:	4b79      	ldr	r3, [pc, #484]	; (80011dc <state_idle_iterate+0x28c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8000ffa:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8000ffe:	4b77      	ldr	r3, [pc, #476]	; (80011dc <state_idle_iterate+0x28c>)
 8001000:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8001002:	3310      	adds	r3, #16
 8001004:	4a75      	ldr	r2, [pc, #468]	; (80011dc <state_idle_iterate+0x28c>)
 8001006:	6814      	ldr	r4, [r2, #0]
 8001008:	4a75      	ldr	r2, [pc, #468]	; (80011e0 <state_idle_iterate+0x290>)
 800100a:	9204      	str	r2, [sp, #16]
 800100c:	4a75      	ldr	r2, [pc, #468]	; (80011e4 <state_idle_iterate+0x294>)
 800100e:	9203      	str	r2, [sp, #12]
 8001010:	4a75      	ldr	r2, [pc, #468]	; (80011e8 <state_idle_iterate+0x298>)
 8001012:	9202      	str	r2, [sp, #8]
 8001014:	4a75      	ldr	r2, [pc, #468]	; (80011ec <state_idle_iterate+0x29c>)
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	460b      	mov	r3, r1
 800101c:	4602      	mov	r2, r0
 800101e:	2101      	movs	r1, #1
 8001020:	4874      	ldr	r0, [pc, #464]	; (80011f4 <state_idle_iterate+0x2a4>)
 8001022:	f7ff fb8b 	bl	800073c <Send_CC_FatalShutdown>
 8001026:	4603      	mov	r3, r0
 8001028:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 800102c:	f002 fa60 	bl	80034f0 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <state_idle_iterate+0x28c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d925      	bls.n	800108a <state_idle_iterate+0x13a>
 800103e:	4b67      	ldr	r3, [pc, #412]	; (80011dc <state_idle_iterate+0x28c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	7f1b      	ldrb	r3, [r3, #28]
 8001044:	f083 0301 	eor.w	r3, r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d01d      	beq.n	800108a <state_idle_iterate+0x13a>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800104e:	4b63      	ldr	r3, [pc, #396]	; (80011dc <state_idle_iterate+0x28c>)
 8001050:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001052:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001054:	4b61      	ldr	r3, [pc, #388]	; (80011dc <state_idle_iterate+0x28c>)
 8001056:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001058:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 800105c:	4b5f      	ldr	r3, [pc, #380]	; (80011dc <state_idle_iterate+0x28c>)
 800105e:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001060:	3310      	adds	r3, #16
 8001062:	4a5e      	ldr	r2, [pc, #376]	; (80011dc <state_idle_iterate+0x28c>)
 8001064:	6814      	ldr	r4, [r2, #0]
 8001066:	4a5e      	ldr	r2, [pc, #376]	; (80011e0 <state_idle_iterate+0x290>)
 8001068:	9204      	str	r2, [sp, #16]
 800106a:	4a5e      	ldr	r2, [pc, #376]	; (80011e4 <state_idle_iterate+0x294>)
 800106c:	9203      	str	r2, [sp, #12]
 800106e:	4a5e      	ldr	r2, [pc, #376]	; (80011e8 <state_idle_iterate+0x298>)
 8001070:	9202      	str	r2, [sp, #8]
 8001072:	4a5e      	ldr	r2, [pc, #376]	; (80011ec <state_idle_iterate+0x29c>)
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	460b      	mov	r3, r1
 800107a:	4602      	mov	r2, r0
 800107c:	2101      	movs	r1, #1
 800107e:	485e      	ldr	r0, [pc, #376]	; (80011f8 <state_idle_iterate+0x2a8>)
 8001080:	f7ff fb5c 	bl	800073c <Send_CC_FatalShutdown>
 8001084:	4603      	mov	r3, r0
 8001086:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 800108a:	f002 fa31 	bl	80034f0 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	4b52      	ldr	r3, [pc, #328]	; (80011dc <state_idle_iterate+0x28c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b64      	cmp	r3, #100	; 0x64
 800109a:	d925      	bls.n	80010e8 <state_idle_iterate+0x198>
 800109c:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <state_idle_iterate+0x28c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	7edb      	ldrb	r3, [r3, #27]
 80010a2:	f083 0301 	eor.w	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d01d      	beq.n	80010e8 <state_idle_iterate+0x198>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80010ac:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <state_idle_iterate+0x28c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80010b0:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80010b2:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <state_idle_iterate+0x28c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80010b6:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80010ba:	4b48      	ldr	r3, [pc, #288]	; (80011dc <state_idle_iterate+0x28c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80010be:	3310      	adds	r3, #16
 80010c0:	4a46      	ldr	r2, [pc, #280]	; (80011dc <state_idle_iterate+0x28c>)
 80010c2:	6814      	ldr	r4, [r2, #0]
 80010c4:	4a46      	ldr	r2, [pc, #280]	; (80011e0 <state_idle_iterate+0x290>)
 80010c6:	9204      	str	r2, [sp, #16]
 80010c8:	4a46      	ldr	r2, [pc, #280]	; (80011e4 <state_idle_iterate+0x294>)
 80010ca:	9203      	str	r2, [sp, #12]
 80010cc:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <state_idle_iterate+0x298>)
 80010ce:	9202      	str	r2, [sp, #8]
 80010d0:	4a46      	ldr	r2, [pc, #280]	; (80011ec <state_idle_iterate+0x29c>)
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	460b      	mov	r3, r1
 80010d8:	4602      	mov	r2, r0
 80010da:	2101      	movs	r1, #1
 80010dc:	4847      	ldr	r0, [pc, #284]	; (80011fc <state_idle_iterate+0x2ac>)
 80010de:	f7ff fb2d 	bl	800073c <Send_CC_FatalShutdown>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <state_idle_iterate+0x28c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 fbc3 	bl	800787c <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 80010f6:	e10a      	b.n	800130e <state_idle_iterate+0x3be>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 80010f8:	4b38      	ldr	r3, [pc, #224]	; (80011dc <state_idle_iterate+0x28c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 8001100:	f107 0108 	add.w	r1, r7, #8
 8001104:	2300      	movs	r3, #0
 8001106:	2200      	movs	r2, #0
 8001108:	f006 fd0a 	bl	8007b20 <osMessageQueueGet>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 80fd 	bne.w	800130e <state_idle_iterate+0x3be>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.IDE == CAN_ID_EXT) {
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b04      	cmp	r3, #4
 8001118:	f040 80f9 	bne.w	800130e <state_idle_iterate+0x3be>
				if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800111c:	68fc      	ldr	r4, [r7, #12]
 800111e:	2300      	movs	r3, #0
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	2301      	movs	r3, #1
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	2200      	movs	r2, #0
 800112a:	2110      	movs	r1, #16
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff fcd7 	bl	8000ae0 <Compose_CANId>
 8001132:	4603      	mov	r3, r0
 8001134:	429c      	cmp	r4, r3
 8001136:	d165      	bne.n	8001204 <state_idle_iterate+0x2b4>
				{
	//				CC_LogInfo("Got AMS CAN\r\n", strlen("Got AMS CAN\r\n"));
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <state_idle_iterate+0x28c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001140:	2120      	movs	r1, #32
 8001142:	4618      	mov	r0, r3
 8001144:	f006 fb34 	bl	80077b0 <osSemaphoreAcquire>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 80df 	bne.w	800130e <state_idle_iterate+0x3be>
					{
						bool initialised = false; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
						Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8001156:	f107 0489 	add.w	r4, r7, #137	; 0x89
 800115a:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 800115e:	f107 018b 	add.w	r1, r7, #139	; 0x8b
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	f103 001c 	add.w	r0, r3, #28
 800116a:	f107 0382 	add.w	r3, r7, #130	; 0x82
 800116e:	9304      	str	r3, [sp, #16]
 8001170:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001174:	9303      	str	r3, [sp, #12]
 8001176:	f107 0386 	add.w	r3, r7, #134	; 0x86
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	f107 0387 	add.w	r3, r7, #135	; 0x87
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4623      	mov	r3, r4
 800118a:	f7ff fa31 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
						CC_GlobalState->amsTicks = HAL_GetTick();
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <state_idle_iterate+0x28c>)
 8001190:	681c      	ldr	r4, [r3, #0]
 8001192:	f002 f9ad 	bl	80034f0 <HAL_GetTick>
 8001196:	4603      	mov	r3, r0
 8001198:	62e3      	str	r3, [r4, #44]	; 0x2c
						CC_GlobalState->amsInit = initialised;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <state_idle_iterate+0x28c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 80011a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
						char x[80];
	//					int len = snprintf(x, 80, "AMSInit?: %i\r\n", CC_GlobalState->amsInit);
						int len = snprintf(x, 80, "0x%x\r\n", msg.data[0]);
 80011a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011aa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <state_idle_iterate+0x2b0>)
 80011b0:	2150      	movs	r1, #80	; 0x50
 80011b2:	f009 ff19 	bl	800afe8 <sniprintf>
 80011b6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						CC_LogInfo(x, len);
 80011ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80011be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 ff09 	bl	8002fdc <CC_LogInfo>
	//					CC_GlobalState->amsInit = true;
						osSemaphoreRelease(CC_GlobalState->sem);
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <state_idle_iterate+0x28c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 fb52 	bl	800787c <osSemaphoreRelease>
 80011d8:	e099      	b.n	800130e <state_idle_iterate+0x3be>
 80011da:	bf00      	nop
 80011dc:	200049e0 	.word	0x200049e0
 80011e0:	20004c38 	.word	0x20004c38
 80011e4:	20004b7c 	.word	0x20004b7c
 80011e8:	20004ba4 	.word	0x20004ba4
 80011ec:	20004bcc 	.word	0x20004bcc
 80011f0:	0800b7c0 	.word	0x0800b7c0
 80011f4:	0800b7d8 	.word	0x0800b7d8
 80011f8:	0800b7f0 	.word	0x0800b7f0
 80011fc:	0800b80c 	.word	0x0800b80c
 8001200:	0800b828 	.word	0x0800b828
					}
				}
				/* Shutdown Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 8001204:	68fc      	ldr	r4, [r7, #12]
 8001206:	2300      	movs	r3, #0
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	2301      	movs	r3, #1
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	2200      	movs	r2, #0
 8001212:	2106      	movs	r1, #6
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fc63 	bl	8000ae0 <Compose_CANId>
 800121a:	4603      	mov	r3, r0
 800121c:	429c      	cmp	r4, r3
 800121e:	d121      	bne.n	8001264 <state_idle_iterate+0x314>
				{
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001220:	4b81      	ldr	r3, [pc, #516]	; (8001428 <state_idle_iterate+0x4d8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001228:	2120      	movs	r1, #32
 800122a:	4618      	mov	r0, r3
 800122c:	f006 fac0 	bl	80077b0 <osSemaphoreAcquire>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d16b      	bne.n	800130e <state_idle_iterate+0x3be>
					{
						uint8_t segmentState;
						Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	331c      	adds	r3, #28
 800123c:	f107 0281 	add.w	r2, r7, #129	; 0x81
 8001240:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001244:	f7ff fc82 	bl	8000b4c <Parse_SHDN_HeartbeatResponse>
						CC_GlobalState->shutdownTicks = HAL_GetTick();
 8001248:	4b77      	ldr	r3, [pc, #476]	; (8001428 <state_idle_iterate+0x4d8>)
 800124a:	681c      	ldr	r4, [r3, #0]
 800124c:	f002 f950 	bl	80034f0 <HAL_GetTick>
 8001250:	4603      	mov	r3, r0
 8001252:	6363      	str	r3, [r4, #52]	; 0x34
						osSemaphoreRelease(CC_GlobalState->sem);
 8001254:	4b74      	ldr	r3, [pc, #464]	; (8001428 <state_idle_iterate+0x4d8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800125c:	4618      	mov	r0, r3
 800125e:	f006 fb0d 	bl	800787c <osSemaphoreRelease>
 8001262:	e054      	b.n	800130e <state_idle_iterate+0x3be>
					}
				}
				/* Shutdown IMD Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001264:	68fc      	ldr	r4, [r7, #12]
 8001266:	2300      	movs	r3, #0
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2301      	movs	r3, #1
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	2200      	movs	r2, #0
 8001272:	2110      	movs	r1, #16
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff fc33 	bl	8000ae0 <Compose_CANId>
 800127a:	4603      	mov	r3, r0
 800127c:	429c      	cmp	r4, r3
 800127e:	d10f      	bne.n	80012a0 <state_idle_iterate+0x350>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	331c      	adds	r3, #28
 8001286:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800128a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800128e:	f7ff fc6e 	bl	8000b6e <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001292:	4b65      	ldr	r3, [pc, #404]	; (8001428 <state_idle_iterate+0x4d8>)
 8001294:	681c      	ldr	r4, [r3, #0]
 8001296:	f002 f92b 	bl	80034f0 <HAL_GetTick>
 800129a:	4603      	mov	r3, r0
 800129c:	63a3      	str	r3, [r4, #56]	; 0x38
 800129e:	e036      	b.n	800130e <state_idle_iterate+0x3be>
				}
				/* Inverter Heartbeat */
				else if(msg.header.ExtId == 0xA5A5A5A5)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 80012a6:	d106      	bne.n	80012b6 <state_idle_iterate+0x366>
				{
	//				CC_LogInfo("GO BRRRRRRRR\r\n", strlen("GO BRRRRRRRR\r\n"));
					CC_GlobalState->inverterTicks = HAL_GetTick();
 80012a8:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <state_idle_iterate+0x4d8>)
 80012aa:	681c      	ldr	r4, [r3, #0]
 80012ac:	f002 f920 	bl	80034f0 <HAL_GetTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	6323      	str	r3, [r4, #48]	; 0x30
 80012b4:	e02b      	b.n	800130e <state_idle_iterate+0x3be>
				}
				/* Shutdown Triggered Fault */
				else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 80012b6:	68fc      	ldr	r4, [r7, #12]
 80012b8:	2300      	movs	r3, #0
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	2200      	movs	r2, #0
 80012c4:	2106      	movs	r1, #6
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fc0a 	bl	8000ae0 <Compose_CANId>
 80012cc:	4603      	mov	r3, r0
 80012ce:	429c      	cmp	r4, r3
 80012d0:	d11d      	bne.n	800130e <state_idle_iterate+0x3be>
				{
					// TODO DEAL WITH INVERTERS HERE WITH SOFT INVERTER SHUTDOWN
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80012d2:	4b55      	ldr	r3, [pc, #340]	; (8001428 <state_idle_iterate+0x4d8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 80012d6:	4618      	mov	r0, r3
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80012d8:	4b53      	ldr	r3, [pc, #332]	; (8001428 <state_idle_iterate+0x4d8>)
 80012da:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 80012dc:	f103 0108 	add.w	r1, r3, #8
							&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80012e0:	4b51      	ldr	r3, [pc, #324]	; (8001428 <state_idle_iterate+0x4d8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 80012e4:	3310      	adds	r3, #16
 80012e6:	4a50      	ldr	r2, [pc, #320]	; (8001428 <state_idle_iterate+0x4d8>)
 80012e8:	6814      	ldr	r4, [r2, #0]
 80012ea:	4a50      	ldr	r2, [pc, #320]	; (800142c <state_idle_iterate+0x4dc>)
 80012ec:	9204      	str	r2, [sp, #16]
 80012ee:	4a50      	ldr	r2, [pc, #320]	; (8001430 <state_idle_iterate+0x4e0>)
 80012f0:	9203      	str	r2, [sp, #12]
 80012f2:	4a50      	ldr	r2, [pc, #320]	; (8001434 <state_idle_iterate+0x4e4>)
 80012f4:	9202      	str	r2, [sp, #8]
 80012f6:	4a50      	ldr	r2, [pc, #320]	; (8001438 <state_idle_iterate+0x4e8>)
 80012f8:	9201      	str	r2, [sp, #4]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	460b      	mov	r3, r1
 80012fe:	4602      	mov	r2, r0
 8001300:	2101      	movs	r1, #1
 8001302:	484e      	ldr	r0, [pc, #312]	; (800143c <state_idle_iterate+0x4ec>)
 8001304:	f7ff fa1a 	bl	800073c <Send_CC_FatalShutdown>
 8001308:	4603      	mov	r3, r0
 800130a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <state_idle_iterate+0x4d8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001316:	4618      	mov	r0, r3
 8001318:	f006 fc74 	bl	8007c04 <osMessageQueueGetCount>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	f47f aeea 	bne.w	80010f8 <state_idle_iterate+0x1a8>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <state_idle_iterate+0x4d8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	7e1b      	ldrb	r3, [r3, #24]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d018      	beq.n	8001360 <state_idle_iterate+0x410>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 8001336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001342:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001418 <state_idle_iterate+0x4c8>
 8001346:	ee27 7b06 	vmul.f64	d7, d7, d6
 800134a:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001420 <state_idle_iterate+0x4d0>
 800134e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001352:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001356:	ee17 3a90 	vmov	r3, s15
 800135a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800135e:	e008      	b.n	8001372 <state_idle_iterate+0x422>
	}
	else
	{
		HAL_ADC_Start(&hadc3);
 8001360:	4837      	ldr	r0, [pc, #220]	; (8001440 <state_idle_iterate+0x4f0>)
 8001362:	f002 f915 	bl	8003590 <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc3);
 8001366:	4836      	ldr	r0, [pc, #216]	; (8001440 <state_idle_iterate+0x4f0>)
 8001368:	f002 fac0 	bl	80038ec <HAL_ADC_GetValue>
 800136c:	4603      	mov	r3, r0
 800136e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	}
	if(raw > CC_GlobalState->brakePressureThreshold && CC_GlobalState->amsInit && CC_GlobalState->ccInit)
 8001372:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <state_idle_iterate+0x4d8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800137e:	429a      	cmp	r2, r3
 8001380:	d93d      	bls.n	80013fe <state_idle_iterate+0x4ae>
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <state_idle_iterate+0x4d8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800138a:	2b00      	cmp	r3, #0
 800138c:	d037      	beq.n	80013fe <state_idle_iterate+0x4ae>
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <state_idle_iterate+0x4d8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001396:	2b00      	cmp	r3, #0
 8001398:	d031      	beq.n	80013fe <state_idle_iterate+0x4ae>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a0:	4828      	ldr	r0, [pc, #160]	; (8001444 <state_idle_iterate+0x4f4>)
 80013a2:	f003 fff1 	bl	8005388 <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <state_idle_iterate+0x4d8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80013ae:	2120      	movs	r1, #32
 80013b0:	4618      	mov	r0, r3
 80013b2:	f006 f9fd 	bl	80077b0 <osSemaphoreAcquire>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d126      	bne.n	800140a <state_idle_iterate+0x4ba>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 80013bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c0:	4820      	ldr	r0, [pc, #128]	; (8001444 <state_idle_iterate+0x4f4>)
 80013c2:	f003 ffc9 	bl	8005358 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d010      	beq.n	80013ee <state_idle_iterate+0x49e>
 80013cc:	f002 f890 	bl	80034f0 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <state_idle_iterate+0x4d8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3287 	movw	r2, #4999	; 0x1387
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d904      	bls.n	80013ee <state_idle_iterate+0x49e>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 80013e4:	4a18      	ldr	r2, [pc, #96]	; (8001448 <state_idle_iterate+0x4f8>)
 80013e6:	4919      	ldr	r1, [pc, #100]	; (800144c <state_idle_iterate+0x4fc>)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fa4d 	bl	8000888 <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <state_idle_iterate+0x4d8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80013f6:	4618      	mov	r0, r3
 80013f8:	f006 fa40 	bl	800787c <osSemaphoreRelease>
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80013fc:	e005      	b.n	800140a <state_idle_iterate+0x4ba>
		}
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001404:	480f      	ldr	r0, [pc, #60]	; (8001444 <state_idle_iterate+0x4f4>)
 8001406:	f003 ffbf 	bl	8005388 <HAL_GPIO_WritePin>
	}
}
 800140a:	bf00      	nop
 800140c:	379c      	adds	r7, #156	; 0x9c
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	33333333 	.word	0x33333333
 800141c:	3fd33333 	.word	0x3fd33333
 8001420:	00000000 	.word	0x00000000
 8001424:	40790000 	.word	0x40790000
 8001428:	200049e0 	.word	0x200049e0
 800142c:	20004c38 	.word	0x20004c38
 8001430:	20004b7c 	.word	0x20004b7c
 8001434:	20004ba4 	.word	0x20004ba4
 8001438:	20004bcc 	.word	0x20004bcc
 800143c:	0800b830 	.word	0x0800b830
 8001440:	20004a74 	.word	0x20004a74
 8001444:	40021000 	.word	0x40021000
 8001448:	0800b850 	.word	0x0800b850
 800144c:	20000020 	.word	0x20000020

08001450 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b08b      	sub	sp, #44	; 0x2c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 8001458:	f7ff f934 	bl	80006c4 <Compose_CC_ReadyToDrive>
 800145c:	4603      	mov	r3, r0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	2304      	movs	r3, #4
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	2301      	movs	r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 800147e:	230f      	movs	r3, #15
 8001480:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <state_idle_exit+0xa8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f107 0208 	add.w	r2, r7, #8
 800148a:	f107 010c 	add.w	r1, r7, #12
 800148e:	481b      	ldr	r0, [pc, #108]	; (80014fc <state_idle_exit+0xac>)
 8001490:	f002 ff4a 	bl	8004328 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <state_idle_exit+0xa8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3308      	adds	r3, #8
 800149a:	f107 0208 	add.w	r2, r7, #8
 800149e:	f107 010c 	add.w	r1, r7, #12
 80014a2:	4817      	ldr	r0, [pc, #92]	; (8001500 <state_idle_exit+0xb0>)
 80014a4:	f002 ff40 	bl	8004328 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <state_idle_exit+0xa8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3310      	adds	r3, #16
 80014ae:	f107 0208 	add.w	r2, r7, #8
 80014b2:	f107 010c 	add.w	r1, r7, #12
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <state_idle_exit+0xb4>)
 80014b8:	f002 ff36 	bl	8004328 <HAL_CAN_AddTxMessage>

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <state_idle_exit+0xa8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80014c4:	2120      	movs	r1, #32
 80014c6:	4618      	mov	r0, r3
 80014c8:	f006 f972 	bl	80077b0 <osSemaphoreAcquire>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10d      	bne.n	80014ee <state_idle_exit+0x9e>
	{
		CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <state_idle_exit+0xa8>)
 80014d4:	681c      	ldr	r4, [r3, #0]
 80014d6:	f002 f80b 	bl	80034f0 <HAL_GetTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	6263      	str	r3, [r4, #36]	; 0x24
		osSemaphoreRelease(CC_GlobalState->sem);
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <state_idle_exit+0xa8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80014e6:	4618      	mov	r0, r3
 80014e8:	f006 f9c8 	bl	800787c <osSemaphoreRelease>
	}
	return;
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
}
 80014f0:	372c      	adds	r7, #44	; 0x2c
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200049e0 	.word	0x200049e0
 80014fc:	20004bcc 	.word	0x20004bcc
 8001500:	20004ba4 	.word	0x20004ba4
 8001504:	20004b7c 	.word	0x20004b7c

08001508 <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	/* If AMS Contactors Closed & BMS' Healthy */

	/* Enable all channels on PDM */
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001510:	4b4e      	ldr	r3, [pc, #312]	; (800164c <state_driving_enter+0x144>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001518:	2120      	movs	r1, #32
 800151a:	4618      	mov	r0, r3
 800151c:	f006 f948 	bl	80077b0 <osSemaphoreAcquire>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d17d      	bne.n	8001622 <state_driving_enter+0x11a>
	{
		CC_GlobalState->tractiveActive = true;
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <state_driving_enter+0x144>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
		CC_GlobalState->faultDetected = false;
 8001530:	4b46      	ldr	r3, [pc, #280]	; (800164c <state_driving_enter+0x144>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
		CC_GlobalState->rtdLightActive = true;
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <state_driving_enter+0x144>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4

		memset(CC_GlobalState->rollingBrakeValues, 0, 10*sizeof(uint32_t));
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <state_driving_enter+0x144>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800154c:	2228      	movs	r2, #40	; 0x28
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f009 fc88 	bl	800ae66 <memset>
		memset(CC_GlobalState->secondaryRollingBrakeValues, 0, 10*sizeof(uint32_t));
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <state_driving_enter+0x144>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800155e:	2228      	movs	r2, #40	; 0x28
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f009 fc7f 	bl	800ae66 <memset>
		memset(CC_GlobalState->rollingAccelValues, 0, 10*sizeof(uint32_t));
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <state_driving_enter+0x144>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8001570:	2228      	movs	r2, #40	; 0x28
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f009 fc76 	bl	800ae66 <memset>
		memset(CC_GlobalState->secondaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <state_driving_enter+0x144>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8001582:	2228      	movs	r2, #40	; 0x28
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f009 fc6d 	bl	800ae66 <memset>
		memset(CC_GlobalState->tertiaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <state_driving_enter+0x144>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8001594:	2228      	movs	r2, #40	; 0x28
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f009 fc64 	bl	800ae66 <memset>

		CC_GlobalState->brakeMin[0] = BRAKE_PEDAL_ONE_MIN;
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <state_driving_enter+0x144>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015a6:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		CC_GlobalState->brakeMin[1] = BRAKE_PEDAL_TWO_MIN;
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <state_driving_enter+0x144>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	22f0      	movs	r2, #240	; 0xf0
 80015b0:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
		CC_GlobalState->brakeMax[0] = BRAKE_PEDAL_ONE_MAX;
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <state_driving_enter+0x144>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f640 5248 	movw	r2, #3400	; 0xd48
 80015bc:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		CC_GlobalState->brakeMax[1] = BRAKE_PEDAL_TWO_MAX;
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <state_driving_enter+0x144>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f640 42f8 	movw	r2, #3320	; 0xcf8
 80015c8:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a

		CC_GlobalState->accelMin[0] = ACCEL_PEDAL_ONE_MIN;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <state_driving_enter+0x144>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015d4:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
		CC_GlobalState->accelMax[0] = ACCEL_PEDAL_ONE_MAX;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <state_driving_enter+0x144>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f640 5216 	movw	r2, #3350	; 0xd16
 80015e0:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
		CC_GlobalState->accelMin[1] = ACCEL_PEDAL_TWO_MIN;
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <state_driving_enter+0x144>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015ec:	f8a3 245e 	strh.w	r2, [r3, #1118]	; 0x45e
		CC_GlobalState->accelMax[1] = ACCEL_PEDAL_TWO_MAX;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <state_driving_enter+0x144>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f640 5248 	movw	r2, #3400	; 0xd48
 80015f8:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
		CC_GlobalState->accelMin[2] = ACCEL_PEDAL_THREE_MIN;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <state_driving_enter+0x144>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001604:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
		CC_GlobalState->accelMax[2] = ACCEL_PEDAL_THREE_MAX;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <state_driving_enter+0x144>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f640 5234 	movw	r2, #3380	; 0xd34
 8001610:	f8a3 2466 	strh.w	r2, [r3, #1126]	; 0x466

		osSemaphoreRelease(CC_GlobalState->sem);
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <state_driving_enter+0x144>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800161c:	4618      	mov	r0, r3
 800161e:	f006 f92d 	bl	800787c <osSemaphoreRelease>
	}
	/* Start Polling ADC */
	HAL_ADC_Start_DMA(&hadc2, CC_GlobalState->brakeAdcValues, 100);
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <state_driving_enter+0x144>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3340      	adds	r3, #64	; 0x40
 8001628:	2264      	movs	r2, #100	; 0x64
 800162a:	4619      	mov	r1, r3
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <state_driving_enter+0x148>)
 800162e:	f002 f86f 	bl	8003710 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, CC_GlobalState->accelAdcValues, 150);
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <state_driving_enter+0x144>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800163a:	2296      	movs	r2, #150	; 0x96
 800163c:	4619      	mov	r1, r3
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <state_driving_enter+0x14c>)
 8001640:	f002 f866 	bl	8003710 <HAL_ADC_Start_DMA>
	/* Else */

	/* Hard Shutdown Power Off */
	return;
 8001644:	bf00      	nop
}
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200049e0 	.word	0x200049e0
 8001650:	200049e4 	.word	0x200049e4
 8001654:	20004a2c 	.word	0x20004a2c

08001658 <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b0c5      	sub	sp, #276	; 0x114
 800165c:	af06      	add	r7, sp, #24
 800165e:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001660:	4bac      	ldr	r3, [pc, #688]	; (8001914 <state_driving_iterate+0x2bc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001668:	2120      	movs	r1, #32
 800166a:	4618      	mov	r0, r3
 800166c:	f006 f8a0 	bl	80077b0 <osSemaphoreAcquire>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 81ff 	bne.w	8001a76 <state_driving_iterate+0x41e>
	{
		/* Flash RTD */
		if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) > 1000)
 8001678:	f001 ff3a 	bl	80034f0 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	4ba5      	ldr	r3, [pc, #660]	; (8001914 <state_driving_iterate+0x2bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800168a:	d926      	bls.n	80016da <state_driving_iterate+0x82>
		{
			HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, !CC_GlobalState->rtdLightActive);
 800168c:	4ba1      	ldr	r3, [pc, #644]	; (8001914 <state_driving_iterate+0x2bc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f893 34e4 	ldrb.w	r3, [r3, #1252]	; 0x4e4
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	489d      	ldr	r0, [pc, #628]	; (8001918 <state_driving_iterate+0x2c0>)
 80016a2:	f003 fe71 	bl	8005388 <HAL_GPIO_WritePin>
			CC_GlobalState->rtdLightActive = !CC_GlobalState->rtdLightActive;
 80016a6:	4b9b      	ldr	r3, [pc, #620]	; (8001914 <state_driving_iterate+0x2bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f893 34e4 	ldrb.w	r3, [r3, #1252]	; 0x4e4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf14      	ite	ne
 80016b2:	2301      	movne	r3, #1
 80016b4:	2300      	moveq	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	4b94      	ldr	r3, [pc, #592]	; (8001914 <state_driving_iterate+0x2bc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f002 0201 	and.w	r2, r2, #1
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
			CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 80016ce:	4b91      	ldr	r3, [pc, #580]	; (8001914 <state_driving_iterate+0x2bc>)
 80016d0:	681c      	ldr	r4, [r3, #0]
 80016d2:	f001 ff0d 	bl	80034f0 <HAL_GetTick>
 80016d6:	4603      	mov	r3, r0
 80016d8:	6263      	str	r3, [r4, #36]	; 0x24
		}

		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 80016da:	f001 ff09 	bl	80034f0 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <state_driving_iterate+0x2bc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d925      	bls.n	8001738 <state_driving_iterate+0xe0>
 80016ec:	4b89      	ldr	r3, [pc, #548]	; (8001914 <state_driving_iterate+0x2bc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	7e9b      	ldrb	r3, [r3, #26]
 80016f2:	f083 0301 	eor.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01d      	beq.n	8001738 <state_driving_iterate+0xe0>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80016fc:	4b85      	ldr	r3, [pc, #532]	; (8001914 <state_driving_iterate+0x2bc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8001700:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001702:	4b84      	ldr	r3, [pc, #528]	; (8001914 <state_driving_iterate+0x2bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8001706:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 800170a:	4b82      	ldr	r3, [pc, #520]	; (8001914 <state_driving_iterate+0x2bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 800170e:	3310      	adds	r3, #16
 8001710:	4a80      	ldr	r2, [pc, #512]	; (8001914 <state_driving_iterate+0x2bc>)
 8001712:	6814      	ldr	r4, [r2, #0]
 8001714:	4a81      	ldr	r2, [pc, #516]	; (800191c <state_driving_iterate+0x2c4>)
 8001716:	9204      	str	r2, [sp, #16]
 8001718:	4a81      	ldr	r2, [pc, #516]	; (8001920 <state_driving_iterate+0x2c8>)
 800171a:	9203      	str	r2, [sp, #12]
 800171c:	4a81      	ldr	r2, [pc, #516]	; (8001924 <state_driving_iterate+0x2cc>)
 800171e:	9202      	str	r2, [sp, #8]
 8001720:	4a81      	ldr	r2, [pc, #516]	; (8001928 <state_driving_iterate+0x2d0>)
 8001722:	9201      	str	r2, [sp, #4]
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	460b      	mov	r3, r1
 8001728:	4602      	mov	r2, r0
 800172a:	2101      	movs	r1, #1
 800172c:	487f      	ldr	r0, [pc, #508]	; (800192c <state_driving_iterate+0x2d4>)
 800172e:	f7ff f805 	bl	800073c <Send_CC_FatalShutdown>
 8001732:	4603      	mov	r3, r0
 8001734:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 8001738:	f001 feda 	bl	80034f0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	4b75      	ldr	r3, [pc, #468]	; (8001914 <state_driving_iterate+0x2bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d925      	bls.n	8001796 <state_driving_iterate+0x13e>
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <state_driving_iterate+0x2bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	7f5b      	ldrb	r3, [r3, #29]
 8001750:	f083 0301 	eor.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d01d      	beq.n	8001796 <state_driving_iterate+0x13e>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800175a:	4b6e      	ldr	r3, [pc, #440]	; (8001914 <state_driving_iterate+0x2bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800175e:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001760:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <state_driving_iterate+0x2bc>)
 8001762:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8001764:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001768:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <state_driving_iterate+0x2bc>)
 800176a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800176c:	3310      	adds	r3, #16
 800176e:	4a69      	ldr	r2, [pc, #420]	; (8001914 <state_driving_iterate+0x2bc>)
 8001770:	6814      	ldr	r4, [r2, #0]
 8001772:	4a6a      	ldr	r2, [pc, #424]	; (800191c <state_driving_iterate+0x2c4>)
 8001774:	9204      	str	r2, [sp, #16]
 8001776:	4a6a      	ldr	r2, [pc, #424]	; (8001920 <state_driving_iterate+0x2c8>)
 8001778:	9203      	str	r2, [sp, #12]
 800177a:	4a6a      	ldr	r2, [pc, #424]	; (8001924 <state_driving_iterate+0x2cc>)
 800177c:	9202      	str	r2, [sp, #8]
 800177e:	4a6a      	ldr	r2, [pc, #424]	; (8001928 <state_driving_iterate+0x2d0>)
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	460b      	mov	r3, r1
 8001786:	4602      	mov	r2, r0
 8001788:	2101      	movs	r1, #1
 800178a:	4869      	ldr	r0, [pc, #420]	; (8001930 <state_driving_iterate+0x2d8>)
 800178c:	f7fe ffd6 	bl	800073c <Send_CC_FatalShutdown>
 8001790:	4603      	mov	r3, r0
 8001792:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8001796:	f001 feab 	bl	80034f0 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <state_driving_iterate+0x2bc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b64      	cmp	r3, #100	; 0x64
 80017a6:	d925      	bls.n	80017f4 <state_driving_iterate+0x19c>
 80017a8:	4b5a      	ldr	r3, [pc, #360]	; (8001914 <state_driving_iterate+0x2bc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	7f1b      	ldrb	r3, [r3, #28]
 80017ae:	f083 0301 	eor.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01d      	beq.n	80017f4 <state_driving_iterate+0x19c>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80017b8:	4b56      	ldr	r3, [pc, #344]	; (8001914 <state_driving_iterate+0x2bc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80017bc:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80017be:	4b55      	ldr	r3, [pc, #340]	; (8001914 <state_driving_iterate+0x2bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80017c2:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <state_driving_iterate+0x2bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80017ca:	3310      	adds	r3, #16
 80017cc:	4a51      	ldr	r2, [pc, #324]	; (8001914 <state_driving_iterate+0x2bc>)
 80017ce:	6814      	ldr	r4, [r2, #0]
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <state_driving_iterate+0x2c4>)
 80017d2:	9204      	str	r2, [sp, #16]
 80017d4:	4a52      	ldr	r2, [pc, #328]	; (8001920 <state_driving_iterate+0x2c8>)
 80017d6:	9203      	str	r2, [sp, #12]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <state_driving_iterate+0x2cc>)
 80017da:	9202      	str	r2, [sp, #8]
 80017dc:	4a52      	ldr	r2, [pc, #328]	; (8001928 <state_driving_iterate+0x2d0>)
 80017de:	9201      	str	r2, [sp, #4]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	460b      	mov	r3, r1
 80017e4:	4602      	mov	r2, r0
 80017e6:	2101      	movs	r1, #1
 80017e8:	4852      	ldr	r0, [pc, #328]	; (8001934 <state_driving_iterate+0x2dc>)
 80017ea:	f7fe ffa7 	bl	800073c <Send_CC_FatalShutdown>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 80017f4:	f001 fe7c 	bl	80034f0 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b46      	ldr	r3, [pc, #280]	; (8001914 <state_driving_iterate+0x2bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d925      	bls.n	8001852 <state_driving_iterate+0x1fa>
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <state_driving_iterate+0x2bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	7edb      	ldrb	r3, [r3, #27]
 800180c:	f083 0301 	eor.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01d      	beq.n	8001852 <state_driving_iterate+0x1fa>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001816:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <state_driving_iterate+0x2bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 800181a:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800181c:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <state_driving_iterate+0x2bc>)
 800181e:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001820:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001824:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <state_driving_iterate+0x2bc>)
 8001826:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001828:	3310      	adds	r3, #16
 800182a:	4a3a      	ldr	r2, [pc, #232]	; (8001914 <state_driving_iterate+0x2bc>)
 800182c:	6814      	ldr	r4, [r2, #0]
 800182e:	4a3b      	ldr	r2, [pc, #236]	; (800191c <state_driving_iterate+0x2c4>)
 8001830:	9204      	str	r2, [sp, #16]
 8001832:	4a3b      	ldr	r2, [pc, #236]	; (8001920 <state_driving_iterate+0x2c8>)
 8001834:	9203      	str	r2, [sp, #12]
 8001836:	4a3b      	ldr	r2, [pc, #236]	; (8001924 <state_driving_iterate+0x2cc>)
 8001838:	9202      	str	r2, [sp, #8]
 800183a:	4a3b      	ldr	r2, [pc, #236]	; (8001928 <state_driving_iterate+0x2d0>)
 800183c:	9201      	str	r2, [sp, #4]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	460b      	mov	r3, r1
 8001842:	4602      	mov	r2, r0
 8001844:	2101      	movs	r1, #1
 8001846:	483c      	ldr	r0, [pc, #240]	; (8001938 <state_driving_iterate+0x2e0>)
 8001848:	f7fe ff78 	bl	800073c <Send_CC_FatalShutdown>
 800184c:	4603      	mov	r3, r0
 800184e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <state_driving_iterate+0x2bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800185a:	4618      	mov	r0, r3
 800185c:	f006 f80e 	bl	800787c <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001860:	e109      	b.n	8001a76 <state_driving_iterate+0x41e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <state_driving_iterate+0x2bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 800186a:	f107 010c 	add.w	r1, r7, #12
 800186e:	2300      	movs	r3, #0
 8001870:	2200      	movs	r2, #0
 8001872:	f006 f955 	bl	8007b20 <osMessageQueueGet>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 80fc 	bne.w	8001a76 <state_driving_iterate+0x41e>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800187e:	693c      	ldr	r4, [r7, #16]
 8001880:	2300      	movs	r3, #0
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	2301      	movs	r3, #1
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	2200      	movs	r2, #0
 800188c:	2110      	movs	r1, #16
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff f926 	bl	8000ae0 <Compose_CANId>
 8001894:	4603      	mov	r3, r0
 8001896:	429c      	cmp	r4, r3
 8001898:	d150      	bne.n	800193c <state_driving_iterate+0x2e4>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <state_driving_iterate+0x2bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80018a2:	2120      	movs	r1, #32
 80018a4:	4618      	mov	r0, r3
 80018a6:	f005 ff83 	bl	80077b0 <osSemaphoreAcquire>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 80e2 	bne.w	8001a76 <state_driving_iterate+0x41e>
				{
					bool initialised; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 80018b2:	f107 045d 	add.w	r4, r7, #93	; 0x5d
 80018b6:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 80018ba:	f107 015f 	add.w	r1, r7, #95	; 0x5f
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	f103 001c 	add.w	r0, r3, #28
 80018c6:	f107 0356 	add.w	r3, r7, #86	; 0x56
 80018ca:	9304      	str	r3, [sp, #16]
 80018cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018d0:	9303      	str	r3, [sp, #12]
 80018d2:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4623      	mov	r3, r4
 80018e6:	f7fe fe83 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <state_driving_iterate+0x2bc>)
 80018ec:	681c      	ldr	r4, [r3, #0]
 80018ee:	f001 fdff 	bl	80034f0 <HAL_GetTick>
 80018f2:	4603      	mov	r3, r0
 80018f4:	62e3      	str	r3, [r4, #44]	; 0x2c
					CC_GlobalState->amsInit = initialised;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <state_driving_iterate+0x2bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					osSemaphoreRelease(CC_GlobalState->sem);
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <state_driving_iterate+0x2bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800190a:	4618      	mov	r0, r3
 800190c:	f005 ffb6 	bl	800787c <osSemaphoreRelease>
 8001910:	e0b1      	b.n	8001a76 <state_driving_iterate+0x41e>
 8001912:	bf00      	nop
 8001914:	200049e0 	.word	0x200049e0
 8001918:	40021000 	.word	0x40021000
 800191c:	20004c38 	.word	0x20004c38
 8001920:	20004b7c 	.word	0x20004b7c
 8001924:	20004ba4 	.word	0x20004ba4
 8001928:	20004bcc 	.word	0x20004bcc
 800192c:	0800b7c0 	.word	0x0800b7c0
 8001930:	0800b7d8 	.word	0x0800b7d8
 8001934:	0800b7f0 	.word	0x0800b7f0
 8001938:	0800b80c 	.word	0x0800b80c
				}
			}
			/* Shutdown Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 800193c:	693c      	ldr	r4, [r7, #16]
 800193e:	2300      	movs	r3, #0
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2301      	movs	r3, #1
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2301      	movs	r3, #1
 8001948:	2200      	movs	r2, #0
 800194a:	2106      	movs	r1, #6
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff f8c7 	bl	8000ae0 <Compose_CANId>
 8001952:	4603      	mov	r3, r0
 8001954:	429c      	cmp	r4, r3
 8001956:	d122      	bne.n	800199e <state_driving_iterate+0x346>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001958:	4bbd      	ldr	r3, [pc, #756]	; (8001c50 <state_driving_iterate+0x5f8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001960:	2120      	movs	r1, #32
 8001962:	4618      	mov	r0, r3
 8001964:	f005 ff24 	bl	80077b0 <osSemaphoreAcquire>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 8083 	bne.w	8001a76 <state_driving_iterate+0x41e>
				{
					uint8_t segmentState;
					Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	331c      	adds	r3, #28
 8001976:	f107 0255 	add.w	r2, r7, #85	; 0x55
 800197a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800197e:	f7ff f8e5 	bl	8000b4c <Parse_SHDN_HeartbeatResponse>
					CC_GlobalState->shutdownTicks = HAL_GetTick();
 8001982:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001984:	681c      	ldr	r4, [r3, #0]
 8001986:	f001 fdb3 	bl	80034f0 <HAL_GetTick>
 800198a:	4603      	mov	r3, r0
 800198c:	6363      	str	r3, [r4, #52]	; 0x34
					osSemaphoreRelease(CC_GlobalState->sem);
 800198e:	4bb0      	ldr	r3, [pc, #704]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001996:	4618      	mov	r0, r3
 8001998:	f005 ff70 	bl	800787c <osSemaphoreRelease>
 800199c:	e06b      	b.n	8001a76 <state_driving_iterate+0x41e>
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800199e:	693c      	ldr	r4, [r7, #16]
 80019a0:	2300      	movs	r3, #0
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2301      	movs	r3, #1
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	2200      	movs	r2, #0
 80019ac:	2110      	movs	r1, #16
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7ff f896 	bl	8000ae0 <Compose_CANId>
 80019b4:	4603      	mov	r3, r0
 80019b6:	429c      	cmp	r4, r3
 80019b8:	d121      	bne.n	80019fe <state_driving_iterate+0x3a6>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80019ba:	4ba5      	ldr	r3, [pc, #660]	; (8001c50 <state_driving_iterate+0x5f8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019c2:	2120      	movs	r1, #32
 80019c4:	4618      	mov	r0, r3
 80019c6:	f005 fef3 	bl	80077b0 <osSemaphoreAcquire>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d152      	bne.n	8001a76 <state_driving_iterate+0x41e>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	331c      	adds	r3, #28
 80019d6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80019da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019de:	f7ff f8c6 	bl	8000b6e <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 80019e2:	4b9b      	ldr	r3, [pc, #620]	; (8001c50 <state_driving_iterate+0x5f8>)
 80019e4:	681c      	ldr	r4, [r3, #0]
 80019e6:	f001 fd83 	bl	80034f0 <HAL_GetTick>
 80019ea:	4603      	mov	r3, r0
 80019ec:	63a3      	str	r3, [r4, #56]	; 0x38
					osSemaphoreRelease(CC_GlobalState->sem);
 80019ee:	4b98      	ldr	r3, [pc, #608]	; (8001c50 <state_driving_iterate+0x5f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019f6:	4618      	mov	r0, r3
 80019f8:	f005 ff40 	bl	800787c <osSemaphoreRelease>
 80019fc:	e03b      	b.n	8001a76 <state_driving_iterate+0x41e>
				}
			}
			/* Inverter Heartbeat */
			else if(msg.header.ExtId == 0xA5A5A5A5)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8001a04:	d106      	bne.n	8001a14 <state_driving_iterate+0x3bc>
			{
				CC_GlobalState->inverterTicks = HAL_GetTick();
 8001a06:	4b92      	ldr	r3, [pc, #584]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001a08:	681c      	ldr	r4, [r3, #0]
 8001a0a:	f001 fd71 	bl	80034f0 <HAL_GetTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6323      	str	r3, [r4, #48]	; 0x30
 8001a12:	e030      	b.n	8001a76 <state_driving_iterate+0x41e>
			}
			/* Shutdown Triggered Fault */
			else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 8001a14:	693c      	ldr	r4, [r7, #16]
 8001a16:	2300      	movs	r3, #0
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2200      	movs	r2, #0
 8001a22:	2106      	movs	r1, #6
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff f85b 	bl	8000ae0 <Compose_CANId>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	429c      	cmp	r4, r3
 8001a2e:	d122      	bne.n	8001a76 <state_driving_iterate+0x41e>
			{
				// TODO DEAL WITH INVERTERS HERE WITH SOFT INVERTER SHUTDOWN
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001a30:	4b87      	ldr	r3, [pc, #540]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001a34:	4618      	mov	r0, r3
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001a36:	4b86      	ldr	r3, [pc, #536]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001a3a:	f103 0108 	add.w	r1, r3, #8
						&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001a3e:	4b84      	ldr	r3, [pc, #528]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001a42:	3310      	adds	r3, #16
 8001a44:	4a82      	ldr	r2, [pc, #520]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001a46:	6814      	ldr	r4, [r2, #0]
 8001a48:	4a82      	ldr	r2, [pc, #520]	; (8001c54 <state_driving_iterate+0x5fc>)
 8001a4a:	9204      	str	r2, [sp, #16]
 8001a4c:	4a82      	ldr	r2, [pc, #520]	; (8001c58 <state_driving_iterate+0x600>)
 8001a4e:	9203      	str	r2, [sp, #12]
 8001a50:	4a82      	ldr	r2, [pc, #520]	; (8001c5c <state_driving_iterate+0x604>)
 8001a52:	9202      	str	r2, [sp, #8]
 8001a54:	4a82      	ldr	r2, [pc, #520]	; (8001c60 <state_driving_iterate+0x608>)
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4880      	ldr	r0, [pc, #512]	; (8001c64 <state_driving_iterate+0x60c>)
 8001a62:	f7fe fe6b 	bl	800073c <Send_CC_FatalShutdown>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				fsm_changeState(fsm, &idleState, "Resetting to Idle to Clean");
 8001a6c:	4a7e      	ldr	r2, [pc, #504]	; (8001c68 <state_driving_iterate+0x610>)
 8001a6e:	497f      	ldr	r1, [pc, #508]	; (8001c6c <state_driving_iterate+0x614>)
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe ff09 	bl	8000888 <fsm_changeState>
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001a76:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f006 f8c0 	bl	8007c04 <osMessageQueueGetCount>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f47f aeeb 	bne.w	8001862 <state_driving_iterate+0x20a>
	uint16_t brake_travel_one; uint16_t brake_travel_two;
	uint16_t accel_travel_one; uint16_t accel_travel_two; uint16_t accel_travel_three;
	char x[80]; uint32_t len;

	/* Echo ADC Failure for Debugging */
	if(CC_GlobalState->faultDetected)
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <state_driving_iterate+0x448>
	{
		CC_LogInfo("ADC Fault Detected\r\n", strlen("ADC Fault Detected\r\n"));
 8001a98:	2114      	movs	r1, #20
 8001a9a:	4875      	ldr	r0, [pc, #468]	; (8001c70 <state_driving_iterate+0x618>)
 8001a9c:	f001 fa9e 	bl	8002fdc <CC_LogInfo>
	}
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001aa0:	4b6b      	ldr	r3, [pc, #428]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 fe80 	bl	80077b0 <osSemaphoreAcquire>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 8147 	bne.w	8001d46 <state_driving_iterate+0x6ee>
	{
		/* Check for non-expected ADC Values
		 * Trigger Fault outside expected range
		 * Power trip, surge to sensor etc.
		 */
		if(!CC_GlobalState->faultDetected)
 8001ab8:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001ac0:	f083 0301 	eor.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d07a      	beq.n	8001bc0 <state_driving_iterate+0x568>
		{
			for (int i = 0; i < 2; i++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001ad0:	e034      	b.n	8001b3c <state_driving_iterate+0x4e4>
				if (CC_GlobalState->brakeAdcValues[i] <= CC_GlobalState->brakeMin[i] - 100
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001ada:	3210      	adds	r2, #16
 8001adc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ae0:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ae8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	440b      	add	r3, r1
 8001af0:	889b      	ldrh	r3, [r3, #4]
 8001af2:	3b64      	subs	r3, #100	; 0x64
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d911      	bls.n	8001b1c <state_driving_iterate+0x4c4>
						|| CC_GlobalState->brakeAdcValues[i] >= CC_GlobalState->brakeMax[i] + 100)
 8001af8:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001b00:	3210      	adds	r2, #16
 8001b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b06:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001b0e:	f501 710b 	add.w	r1, r1, #556	; 0x22c
 8001b12:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001b16:	3264      	adds	r2, #100	; 0x64
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d30a      	bcc.n	8001b32 <state_driving_iterate+0x4da>
				{
					CC_GlobalState->faultDetected = true;
 8001b1c:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
					CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001b28:	681c      	ldr	r4, [r3, #0]
 8001b2a:	f001 fce1 	bl	80034f0 <HAL_GetTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	62a3      	str	r3, [r4, #40]	; 0x28
			for (int i = 0; i < 2; i++) {
 8001b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b36:	3301      	adds	r3, #1
 8001b38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	ddc6      	ble.n	8001ad2 <state_driving_iterate+0x47a>
				}
			}
			for (int i = 0; i < 3; i++) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001b4a:	e035      	b.n	8001bb8 <state_driving_iterate+0x560>
				if (CC_GlobalState->accelAdcValues[i] <= CC_GlobalState->accelMin[i] - 100
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001b54:	3274      	adds	r2, #116	; 0x74
 8001b56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001b62:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	440b      	add	r3, r1
 8001b6a:	889b      	ldrh	r3, [r3, #4]
 8001b6c:	3b64      	subs	r3, #100	; 0x64
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d912      	bls.n	8001b98 <state_driving_iterate+0x540>
						|| CC_GlobalState->accelAdcValues[i] >= CC_GlobalState->accelMax[i] + 100)
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001b7a:	3274      	adds	r2, #116	; 0x74
 8001b7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001b88:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	440b      	add	r3, r1
 8001b90:	885b      	ldrh	r3, [r3, #2]
 8001b92:	3364      	adds	r3, #100	; 0x64
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d30a      	bcc.n	8001bae <state_driving_iterate+0x556>
				{
					CC_GlobalState->faultDetected = true;
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
					CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001ba4:	681c      	ldr	r4, [r3, #0]
 8001ba6:	f001 fca3 	bl	80034f0 <HAL_GetTick>
 8001baa:	4603      	mov	r3, r0
 8001bac:	62a3      	str	r3, [r4, #40]	; 0x28
			for (int i = 0; i < 3; i++) {
 8001bae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001bb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	ddc5      	ble.n	8001b4c <state_driving_iterate+0x4f4>
				}
			}
		}

		/* Brake Travel Record & Sum 10 Values */
		for (int i=0; i < 10; i++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001bc6:	e0b2      	b.n	8001d2e <state_driving_iterate+0x6d6>
		{
			if (i == 9)
 8001bc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bcc:	2b09      	cmp	r3, #9
 8001bce:	d151      	bne.n	8001c74 <state_driving_iterate+0x61c>
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[0];
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	b289      	uxth	r1, r1
 8001bdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001be0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	460a      	mov	r2, r1
 8001bea:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[1];
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b291      	uxth	r1, r2
 8001bf8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001bfc:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001c00:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->accelAdcValues[0];
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d2 11d0 	ldr.w	r1, [r2, #464]	; 0x1d0
 8001c10:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c14:	f502 728d 	add.w	r2, r2, #282	; 0x11a
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[1];
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8d2 11d4 	ldr.w	r1, [r2, #468]	; 0x1d4
 8001c28:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c2c:	f502 7292 	add.w	r2, r2, #292	; 0x124
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[2];
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <state_driving_iterate+0x5f8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d2 11d8 	ldr.w	r1, [r2, #472]	; 0x1d8
 8001c40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c44:	f502 7297 	add.w	r2, r2, #302	; 0x12e
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001c4c:	e06a      	b.n	8001d24 <state_driving_iterate+0x6cc>
 8001c4e:	bf00      	nop
 8001c50:	200049e0 	.word	0x200049e0
 8001c54:	20004c38 	.word	0x20004c38
 8001c58:	20004b7c 	.word	0x20004b7c
 8001c5c:	20004ba4 	.word	0x20004ba4
 8001c60:	20004bcc 	.word	0x20004bcc
 8001c64:	0800b830 	.word	0x0800b830
 8001c68:	0800b85c 	.word	0x0800b85c
 8001c6c:	20000010 	.word	0x20000010
 8001c70:	0800b878 	.word	0x0800b878
			}
			else
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->rollingBrakeValues[i+1];
 8001c74:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <state_driving_iterate+0x734>)
 8001c76:	6819      	ldr	r1, [r3, #0]
 8001c78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	4a43      	ldr	r2, [pc, #268]	; (8001d8c <state_driving_iterate+0x734>)
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	440b      	add	r3, r1
 8001c8a:	8899      	ldrh	r1, [r3, #4]
 8001c8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c90:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	460a      	mov	r2, r1
 8001c9a:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->secondaryRollingBrakeValues[i+1];
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <state_driving_iterate+0x734>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ca4:	1c59      	adds	r1, r3, #1
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <state_driving_iterate+0x734>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f501 7108 	add.w	r1, r1, #544	; 0x220
 8001cae:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001cb2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cb6:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001cba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->rollingAccelValues[i+1];
 8001cbe:	4b33      	ldr	r3, [pc, #204]	; (8001d8c <state_driving_iterate+0x734>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001cc6:	1c59      	adds	r1, r3, #1
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <state_driving_iterate+0x734>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f501 718d 	add.w	r1, r1, #282	; 0x11a
 8001cd0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001cd4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cd8:	f502 728d 	add.w	r2, r2, #282	; 0x11a
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->secondaryRollingAccelValues[i+1];
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <state_driving_iterate+0x734>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ce8:	1c59      	adds	r1, r3, #1
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <state_driving_iterate+0x734>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f501 7192 	add.w	r1, r1, #292	; 0x124
 8001cf2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cfa:	f502 7292 	add.w	r2, r2, #292	; 0x124
 8001cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->tertiaryRollingAccelValues[i+1];
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <state_driving_iterate+0x734>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d0a:	1c59      	adds	r1, r3, #1
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <state_driving_iterate+0x734>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f501 7197 	add.w	r1, r1, #302	; 0x12e
 8001d14:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001d18:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d1c:	f502 7297 	add.w	r2, r2, #302	; 0x12e
 8001d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i=0; i < 10; i++)
 8001d24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001d2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d32:	2b09      	cmp	r3, #9
 8001d34:	f77f af48 	ble.w	8001bc8 <state_driving_iterate+0x570>
			}
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <state_driving_iterate+0x734>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d40:	4618      	mov	r0, r3
 8001d42:	f005 fd9b 	bl	800787c <osSemaphoreRelease>
	}

	uint32_t brake_one_sum = 0; uint32_t brake_one_avg = 0;uint32_t brake_two_sum = 0;uint32_t brake_two_avg = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	uint32_t accel_one_sum = 0; uint32_t accel_one_avg = 0; uint32_t accel_two_avg = 0; uint32_t accel_three_sum = 0; uint32_t accel_three_avg = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	uint32_t accel_two_sum = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	for (int i=0; i < 10; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001d88:	e04b      	b.n	8001e22 <state_driving_iterate+0x7ca>
 8001d8a:	bf00      	nop
 8001d8c:	200049e0 	.word	0x200049e0
	{
		brake_one_sum += CC_GlobalState->rollingBrakeValues[i];
 8001d90:	4bc1      	ldr	r3, [pc, #772]	; (8002098 <state_driving_iterate+0xa40>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d98:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	889b      	ldrh	r3, [r3, #4]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001da8:	4413      	add	r3, r2
 8001daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		brake_two_sum += CC_GlobalState->secondaryRollingBrakeValues[i];
 8001dae:	4bba      	ldr	r3, [pc, #744]	; (8002098 <state_driving_iterate+0xa40>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001db6:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001dba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		accel_one_sum += CC_GlobalState->rollingAccelValues[i];
 8001dca:	4bb3      	ldr	r3, [pc, #716]	; (8002098 <state_driving_iterate+0xa40>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001dd2:	f502 728d 	add.w	r2, r2, #282	; 0x11a
 8001dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001dde:	4413      	add	r3, r2
 8001de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		accel_two_sum += CC_GlobalState->secondaryRollingAccelValues[i];
 8001de4:	4bac      	ldr	r3, [pc, #688]	; (8002098 <state_driving_iterate+0xa40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001dec:	f502 7292 	add.w	r2, r2, #292	; 0x124
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001df8:	4413      	add	r3, r2
 8001dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		accel_three_sum += CC_GlobalState->tertiaryRollingAccelValues[i];
 8001dfe:	4ba6      	ldr	r3, [pc, #664]	; (8002098 <state_driving_iterate+0xa40>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e06:	f502 7297 	add.w	r2, r2, #302	; 0x12e
 8001e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001e12:	4413      	add	r3, r2
 8001e14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for (int i=0; i < 10; i++)
 8001e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e26:	2b09      	cmp	r3, #9
 8001e28:	ddb2      	ble.n	8001d90 <state_driving_iterate+0x738>
	}

	/* Average 10 Latest Brake Travel Values */
	brake_one_avg = brake_one_sum / 10;
 8001e2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e2e:	4a9b      	ldr	r2, [pc, #620]	; (800209c <state_driving_iterate+0xa44>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	brake_two_avg = brake_two_sum / 10;
 8001e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e3e:	4a97      	ldr	r2, [pc, #604]	; (800209c <state_driving_iterate+0xa44>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	accel_one_avg = accel_one_sum / 10;
 8001e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e4e:	4a93      	ldr	r2, [pc, #588]	; (800209c <state_driving_iterate+0xa44>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	accel_two_avg = accel_two_sum / 10;
 8001e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e5e:	4a8f      	ldr	r2, [pc, #572]	; (800209c <state_driving_iterate+0xa44>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	accel_three_avg = accel_three_sum / 10;
 8001e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e6e:	4a8b      	ldr	r2, [pc, #556]	; (800209c <state_driving_iterate+0xa44>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001e7a:	4b87      	ldr	r3, [pc, #540]	; (8002098 <state_driving_iterate+0xa40>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e82:	2120      	movs	r1, #32
 8001e84:	4618      	mov	r0, r3
 8001e86:	f005 fc93 	bl	80077b0 <osSemaphoreAcquire>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 8218 	bne.w	80022c2 <state_driving_iterate+0xc6a>
	{
		/* Check for New Min/Max Brake Values */
		if(CC_GlobalState->rollingBrakeValues[0] > 0 && CC_GlobalState->secondaryRollingBrakeValues[0] > 0)
 8001e92:	4b81      	ldr	r3, [pc, #516]	; (8002098 <state_driving_iterate+0xa40>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d069      	beq.n	8001f72 <state_driving_iterate+0x91a>
 8001e9e:	4b7e      	ldr	r3, [pc, #504]	; (8002098 <state_driving_iterate+0xa40>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	; 0x440
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d063      	beq.n	8001f72 <state_driving_iterate+0x91a>
		{
			if(brake_one_avg <= CC_GlobalState->brakeMin[0] && !CC_GlobalState->faultDetected)
 8001eaa:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <state_driving_iterate+0xa40>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d80f      	bhi.n	8001edc <state_driving_iterate+0x884>
 8001ebc:	4b76      	ldr	r3, [pc, #472]	; (8002098 <state_driving_iterate+0xa40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <state_driving_iterate+0x884>
			{
				CC_GlobalState->brakeMin[0] = brake_one_avg;
 8001ece:	4b72      	ldr	r3, [pc, #456]	; (8002098 <state_driving_iterate+0xa40>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
			}
			if(brake_one_avg >= CC_GlobalState->brakeMax[0] && !CC_GlobalState->faultDetected)
 8001edc:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <state_driving_iterate+0xa40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d30f      	bcc.n	8001f0e <state_driving_iterate+0x8b6>
 8001eee:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <state_driving_iterate+0xa40>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <state_driving_iterate+0x8b6>
			{
				CC_GlobalState->brakeMax[0] = brake_one_avg;
 8001f00:	4b65      	ldr	r3, [pc, #404]	; (8002098 <state_driving_iterate+0xa40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			}
			if(brake_two_avg <= CC_GlobalState->brakeMin[1] && !CC_GlobalState->faultDetected)
 8001f0e:	4b62      	ldr	r3, [pc, #392]	; (8002098 <state_driving_iterate+0xa40>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8001f16:	461a      	mov	r2, r3
 8001f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d80f      	bhi.n	8001f40 <state_driving_iterate+0x8e8>
 8001f20:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <state_driving_iterate+0xa40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001f28:	f083 0301 	eor.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <state_driving_iterate+0x8e8>
			{
				CC_GlobalState->brakeMin[1] = brake_two_avg;
 8001f32:	4b59      	ldr	r3, [pc, #356]	; (8002098 <state_driving_iterate+0xa40>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
			}
			if(brake_two_avg >= CC_GlobalState->brakeMax[1] && !CC_GlobalState->faultDetected)
 8001f40:	4b55      	ldr	r3, [pc, #340]	; (8002098 <state_driving_iterate+0xa40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d30f      	bcc.n	8001f72 <state_driving_iterate+0x91a>
 8001f52:	4b51      	ldr	r3, [pc, #324]	; (8002098 <state_driving_iterate+0xa40>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <state_driving_iterate+0x91a>
			{
				CC_GlobalState->brakeMax[1] = brake_two_avg;
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <state_driving_iterate+0xa40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
			}
		}
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->secondaryRollingAccelValues[0] > 0 && CC_GlobalState->tertiaryRollingAccelValues[0] > 0)
 8001f72:	4b49      	ldr	r3, [pc, #292]	; (8002098 <state_driving_iterate+0xa40>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80a9 	beq.w	80020d2 <state_driving_iterate+0xa7a>
 8001f80:	4b45      	ldr	r3, [pc, #276]	; (8002098 <state_driving_iterate+0xa40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a2 	beq.w	80020d2 <state_driving_iterate+0xa7a>
 8001f8e:	4b42      	ldr	r3, [pc, #264]	; (8002098 <state_driving_iterate+0xa40>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 809b 	beq.w	80020d2 <state_driving_iterate+0xa7a>
		{
			if(accel_one_avg <= CC_GlobalState->accelMin[0] && !CC_GlobalState->faultDetected)
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <state_driving_iterate+0xa40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8b3 345c 	ldrh.w	r3, [r3, #1116]	; 0x45c
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d80f      	bhi.n	8001fce <state_driving_iterate+0x976>
 8001fae:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <state_driving_iterate+0xa40>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001fb6:	f083 0301 	eor.w	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <state_driving_iterate+0x976>
			{
				CC_GlobalState->accelMin[0] = accel_one_avg;
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <state_driving_iterate+0xa40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
			}
			if(accel_one_avg >= CC_GlobalState->accelMax[0] && !CC_GlobalState->faultDetected)
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <state_driving_iterate+0xa40>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8b3 3462 	ldrh.w	r3, [r3, #1122]	; 0x462
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d30f      	bcc.n	8002000 <state_driving_iterate+0x9a8>
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <state_driving_iterate+0xa40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001fe8:	f083 0301 	eor.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <state_driving_iterate+0x9a8>
			{
				CC_GlobalState->accelMax[0] = accel_one_avg;
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <state_driving_iterate+0xa40>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
			}
			if(accel_two_avg <= CC_GlobalState->accelMin[1] && !CC_GlobalState->faultDetected)
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <state_driving_iterate+0xa40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 8002008:	461a      	mov	r2, r3
 800200a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800200e:	4293      	cmp	r3, r2
 8002010:	d80f      	bhi.n	8002032 <state_driving_iterate+0x9da>
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <state_driving_iterate+0xa40>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 800201a:	f083 0301 	eor.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <state_driving_iterate+0x9da>
			{
				CC_GlobalState->accelMin[1] = accel_two_avg;
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <state_driving_iterate+0xa40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800202c:	b292      	uxth	r2, r2
 800202e:	f8a3 245e 	strh.w	r2, [r3, #1118]	; 0x45e
			}
			if(accel_two_avg >= CC_GlobalState->accelMax[1] && !CC_GlobalState->faultDetected)
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <state_driving_iterate+0xa40>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 800203a:	461a      	mov	r2, r3
 800203c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002040:	4293      	cmp	r3, r2
 8002042:	d30f      	bcc.n	8002064 <state_driving_iterate+0xa0c>
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <state_driving_iterate+0xa40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <state_driving_iterate+0xa0c>
			{
				CC_GlobalState->accelMax[1] = accel_two_avg;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <state_driving_iterate+0xa40>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800205e:	b292      	uxth	r2, r2
 8002060:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
			}
			if(accel_three_avg <= CC_GlobalState->accelMin[2] && !CC_GlobalState->faultDetected)
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <state_driving_iterate+0xa40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8b3 3460 	ldrh.w	r3, [r3, #1120]	; 0x460
 800206c:	461a      	mov	r2, r3
 800206e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002072:	4293      	cmp	r3, r2
 8002074:	d814      	bhi.n	80020a0 <state_driving_iterate+0xa48>
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <state_driving_iterate+0xa40>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 800207e:	f083 0301 	eor.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00b      	beq.n	80020a0 <state_driving_iterate+0xa48>
			{
				CC_GlobalState->accelMin[2] = accel_three_avg;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <state_driving_iterate+0xa40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002090:	b292      	uxth	r2, r2
 8002092:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
 8002096:	e003      	b.n	80020a0 <state_driving_iterate+0xa48>
 8002098:	200049e0 	.word	0x200049e0
 800209c:	cccccccd 	.word	0xcccccccd
			}
			if(accel_three_avg >= CC_GlobalState->accelMax[2] && !CC_GlobalState->faultDetected)
 80020a0:	4bba      	ldr	r3, [pc, #744]	; (800238c <state_driving_iterate+0xd34>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8b3 3466 	ldrh.w	r3, [r3, #1126]	; 0x466
 80020a8:	461a      	mov	r2, r3
 80020aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d30f      	bcc.n	80020d2 <state_driving_iterate+0xa7a>
 80020b2:	4bb6      	ldr	r3, [pc, #728]	; (800238c <state_driving_iterate+0xd34>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <state_driving_iterate+0xa7a>
			{
				CC_GlobalState->accelMax[2] = accel_three_avg;
 80020c4:	4bb1      	ldr	r3, [pc, #708]	; (800238c <state_driving_iterate+0xd34>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80020cc:	b292      	uxth	r2, r2
 80020ce:	f8a3 2466 	strh.w	r2, [r3, #1126]	; 0x466
			}
		}

		/* Map Travel to Pedal Pos */
		brake_travel_one = map(brake_one_avg, CC_GlobalState->brakeMin[0]+2, CC_GlobalState->brakeMax[0]-5, 0, 100);
 80020d2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80020d6:	4bad      	ldr	r3, [pc, #692]	; (800238c <state_driving_iterate+0xd34>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80020de:	1c99      	adds	r1, r3, #2
 80020e0:	4baa      	ldr	r3, [pc, #680]	; (800238c <state_driving_iterate+0xd34>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80020e8:	1f5a      	subs	r2, r3, #5
 80020ea:	2364      	movs	r3, #100	; 0x64
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	f7fe fd4e 	bl	8000b90 <map>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
		brake_travel_two = map(brake_two_avg, CC_GlobalState->brakeMin[1]+2, CC_GlobalState->brakeMax[1]-5, 0, 100);
 80020fa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80020fe:	4ba3      	ldr	r3, [pc, #652]	; (800238c <state_driving_iterate+0xd34>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8002106:	1c99      	adds	r1, r3, #2
 8002108:	4ba0      	ldr	r3, [pc, #640]	; (800238c <state_driving_iterate+0xd34>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8002110:	1f5a      	subs	r2, r3, #5
 8002112:	2364      	movs	r3, #100	; 0x64
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2300      	movs	r3, #0
 8002118:	f7fe fd3a 	bl	8000b90 <map>
 800211c:	4603      	mov	r3, r0
 800211e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc

		accel_travel_one = map(accel_one_avg, CC_GlobalState->accelMin[0], CC_GlobalState->accelMax[0]-5, 0, 100);
 8002122:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8002126:	4b99      	ldr	r3, [pc, #612]	; (800238c <state_driving_iterate+0xd34>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8b3 345c 	ldrh.w	r3, [r3, #1116]	; 0x45c
 800212e:	4619      	mov	r1, r3
 8002130:	4b96      	ldr	r3, [pc, #600]	; (800238c <state_driving_iterate+0xd34>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3462 	ldrh.w	r3, [r3, #1122]	; 0x462
 8002138:	1f5a      	subs	r2, r3, #5
 800213a:	2364      	movs	r3, #100	; 0x64
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2300      	movs	r3, #0
 8002140:	f7fe fd26 	bl	8000b90 <map>
 8002144:	4603      	mov	r3, r0
 8002146:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
		accel_travel_two = map(accel_two_avg, CC_GlobalState->accelMin[1], CC_GlobalState->accelMax[1]-5, 0, 100);
 800214a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800214e:	4b8f      	ldr	r3, [pc, #572]	; (800238c <state_driving_iterate+0xd34>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 8002156:	4619      	mov	r1, r3
 8002158:	4b8c      	ldr	r3, [pc, #560]	; (800238c <state_driving_iterate+0xd34>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 8002160:	1f5a      	subs	r2, r3, #5
 8002162:	2364      	movs	r3, #100	; 0x64
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2300      	movs	r3, #0
 8002168:	f7fe fd12 	bl	8000b90 <map>
 800216c:	4603      	mov	r3, r0
 800216e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
		accel_travel_three = map(accel_three_avg, CC_GlobalState->accelMin[2], CC_GlobalState->accelMax[2]-5, 0, 100);
 8002172:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002176:	4b85      	ldr	r3, [pc, #532]	; (800238c <state_driving_iterate+0xd34>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8b3 3460 	ldrh.w	r3, [r3, #1120]	; 0x460
 800217e:	4619      	mov	r1, r3
 8002180:	4b82      	ldr	r3, [pc, #520]	; (800238c <state_driving_iterate+0xd34>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8b3 3466 	ldrh.w	r3, [r3, #1126]	; 0x466
 8002188:	1f5a      	subs	r2, r3, #5
 800218a:	2364      	movs	r3, #100	; 0x64
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	f7fe fcfe 	bl	8000b90 <map>
 8002194:	4603      	mov	r3, r0
 8002196:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

		/* Ensure Brake & Accel Pots Synced */
		if(!CC_GlobalState->faultDetected
 800219a:	4b7c      	ldr	r3, [pc, #496]	; (800238c <state_driving_iterate+0xd34>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 80021a2:	f083 0301 	eor.w	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d018      	beq.n	80021de <state_driving_iterate+0xb86>
				&& (brake_travel_one >= brake_travel_two+10
 80021ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021b0:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80021b4:	330a      	adds	r3, #10
 80021b6:	429a      	cmp	r2, r3
 80021b8:	da06      	bge.n	80021c8 <state_driving_iterate+0xb70>
						|| brake_travel_one <= brake_travel_two-10))
 80021ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021be:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80021c2:	3b0a      	subs	r3, #10
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dc0a      	bgt.n	80021de <state_driving_iterate+0xb86>
		{
			CC_GlobalState->faultDetected = true;
 80021c8:	4b70      	ldr	r3, [pc, #448]	; (800238c <state_driving_iterate+0xd34>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 80021d2:	4b6e      	ldr	r3, [pc, #440]	; (800238c <state_driving_iterate+0xd34>)
 80021d4:	681c      	ldr	r4, [r3, #0]
 80021d6:	f001 f98b 	bl	80034f0 <HAL_GetTick>
 80021da:	4603      	mov	r3, r0
 80021dc:	62a3      	str	r3, [r4, #40]	; 0x28
		}
		if(!CC_GlobalState->faultDetected
 80021de:	4b6b      	ldr	r3, [pc, #428]	; (800238c <state_driving_iterate+0xd34>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 80021e6:	f083 0301 	eor.w	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d034      	beq.n	800225a <state_driving_iterate+0xc02>
				&& (accel_travel_one >= accel_travel_two+10
 80021f0:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80021f4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80021f8:	330a      	adds	r3, #10
 80021fa:	429a      	cmp	r2, r3
 80021fc:	da22      	bge.n	8002244 <state_driving_iterate+0xbec>
						|| accel_travel_one <= accel_travel_two-10
 80021fe:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8002202:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002206:	3b0a      	subs	r3, #10
 8002208:	429a      	cmp	r2, r3
 800220a:	dd1b      	ble.n	8002244 <state_driving_iterate+0xbec>
						|| accel_travel_one >= accel_travel_three+10
 800220c:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8002210:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002214:	330a      	adds	r3, #10
 8002216:	429a      	cmp	r2, r3
 8002218:	da14      	bge.n	8002244 <state_driving_iterate+0xbec>
						|| accel_travel_one <= accel_travel_three-10
 800221a:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800221e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002222:	3b0a      	subs	r3, #10
 8002224:	429a      	cmp	r2, r3
 8002226:	dd0d      	ble.n	8002244 <state_driving_iterate+0xbec>
						|| accel_travel_two >= accel_travel_three+10
 8002228:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 800222c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002230:	330a      	adds	r3, #10
 8002232:	429a      	cmp	r2, r3
 8002234:	da06      	bge.n	8002244 <state_driving_iterate+0xbec>
						|| accel_travel_two <= accel_travel_three-10))
 8002236:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 800223a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800223e:	3b0a      	subs	r3, #10
 8002240:	429a      	cmp	r2, r3
 8002242:	dc0a      	bgt.n	800225a <state_driving_iterate+0xc02>
		{
			CC_GlobalState->faultDetected = true;
 8002244:	4b51      	ldr	r3, [pc, #324]	; (800238c <state_driving_iterate+0xd34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 800224e:	4b4f      	ldr	r3, [pc, #316]	; (800238c <state_driving_iterate+0xd34>)
 8002250:	681c      	ldr	r4, [r3, #0]
 8002252:	f001 f94d 	bl	80034f0 <HAL_GetTick>
 8002256:	4603      	mov	r3, r0
 8002258:	62a3      	str	r3, [r4, #40]	; 0x28
		}

		/* Average 2 Brake Travel Positions */
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 800225a:	4b4c      	ldr	r3, [pc, #304]	; (800238c <state_driving_iterate+0xd34>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8002262:	2b00      	cmp	r3, #0
 8002264:	d026      	beq.n	80022b4 <state_driving_iterate+0xc5c>
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <state_driving_iterate+0xd34>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d020      	beq.n	80022b4 <state_driving_iterate+0xc5c>
		{
			CC_GlobalState->brakeTravel = (brake_travel_one+brake_travel_two)/2;
 8002272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002276:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800227a:	4413      	add	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	da00      	bge.n	8002282 <state_driving_iterate+0xc2a>
 8002280:	3301      	adds	r3, #1
 8002282:	105b      	asrs	r3, r3, #1
 8002284:	461a      	mov	r2, r3
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <state_driving_iterate+0xd34>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
			CC_GlobalState->accelTravel = (accel_travel_one+accel_travel_two+accel_travel_three)/3;
 8002290:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8002294:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002298:	441a      	add	r2, r3
 800229a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800229e:	4413      	add	r3, r2
 80022a0:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <state_driving_iterate+0xd38>)
 80022a2:	fb82 1203 	smull	r1, r2, r2, r3
 80022a6:	17db      	asrs	r3, r3, #31
 80022a8:	1ad2      	subs	r2, r2, r3
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <state_driving_iterate+0xd34>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
		}

		osSemaphoreRelease(CC_GlobalState->sem);
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <state_driving_iterate+0xd34>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80022bc:	4618      	mov	r0, r3
 80022be:	f005 fadd 	bl	800787c <osSemaphoreRelease>
	}

	/* Echo Pedal Positions */
	if(!CC_GlobalState->faultDetected && CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 80022c2:	4b32      	ldr	r3, [pc, #200]	; (800238c <state_driving_iterate+0xd34>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <state_driving_iterate+0xcc4>
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <state_driving_iterate+0xd34>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01d      	beq.n	800231c <state_driving_iterate+0xcc4>
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <state_driving_iterate+0xd34>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <state_driving_iterate+0xcc4>
	{
		len = sprintf(x, "Pedal Positions: %i %i\r\n", CC_GlobalState->brakeTravel, CC_GlobalState->accelTravel);
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <state_driving_iterate+0xd34>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f893 34e1 	ldrb.w	r3, [r3, #1249]	; 0x4e1
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b25      	ldr	r3, [pc, #148]	; (800238c <state_driving_iterate+0xd34>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f893 34e0 	ldrb.w	r3, [r3, #1248]	; 0x4e0
 80022fe:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002302:	4924      	ldr	r1, [pc, #144]	; (8002394 <state_driving_iterate+0xd3c>)
 8002304:	f008 fea4 	bl	800b050 <siprintf>
 8002308:	4603      	mov	r3, r0
 800230a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		CC_LogInfo(x, len);
 800230e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002312:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fe60 	bl	8002fdc <CC_LogInfo>

	/*
	 * If Throttle and Brake Implausibility State Clock < 100ms
	 * Suspend Tractive System Operations
	 */
	if(CC_GlobalState->faultDetected && CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 100)
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <state_driving_iterate+0xd34>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <state_driving_iterate+0xd00>
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <state_driving_iterate+0xd34>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f893 34e2 	ldrb.w	r3, [r3, #1250]	; 0x4e2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d011      	beq.n	8002358 <state_driving_iterate+0xd00>
 8002334:	f001 f8dc 	bl	80034f0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <state_driving_iterate+0xd34>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b63      	cmp	r3, #99	; 0x63
 8002344:	d908      	bls.n	8002358 <state_driving_iterate+0xd00>
	{
		CC_GlobalState->tractiveActive = false;
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <state_driving_iterate+0xd34>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
		CC_LogInfo("Disabling Tractive Operations\r\n", strlen("Disabling Tractive Operations\r\n"));
 8002350:	211f      	movs	r1, #31
 8002352:	4811      	ldr	r0, [pc, #68]	; (8002398 <state_driving_iterate+0xd40>)
 8002354:	f000 fe42 	bl	8002fdc <CC_LogInfo>

	/*
	 * If Throttle or Brake Implausibility State Clock > 1000ms
	 * Engage Soft Shutdown (Reset to Idle)
	 */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 1000)
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <state_driving_iterate+0xd34>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d053      	beq.n	800240c <state_driving_iterate+0xdb4>
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <state_driving_iterate+0xd34>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f893 34e2 	ldrb.w	r3, [r3, #1250]	; 0x4e2
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d04a      	beq.n	800240c <state_driving_iterate+0xdb4>
 8002376:	f001 f8bb 	bl	80034f0 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <state_driving_iterate+0xd34>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002388:	d340      	bcc.n	800240c <state_driving_iterate+0xdb4>
 800238a:	e007      	b.n	800239c <state_driving_iterate+0xd44>
 800238c:	200049e0 	.word	0x200049e0
 8002390:	55555556 	.word	0x55555556
 8002394:	0800b890 	.word	0x0800b890
 8002398:	0800b8ac 	.word	0x0800b8ac
	{
		/* Broadcast Soft Shutdown on all CAN lines */
		CC_SoftShutdown_t softShutdown = Compose_CC_SoftShutdown();
 800239c:	f7fe f9ba 	bl	8000714 <Compose_CC_SoftShutdown>
 80023a0:	4603      	mov	r3, r0
 80023a2:	653b      	str	r3, [r7, #80]	; 0x50
		CAN_TxHeaderTypeDef header =
 80023a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
 80023b4:	615a      	str	r2, [r3, #20]
		{
				.ExtId = softShutdown.id,
 80023b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		CAN_TxHeaderTypeDef header =
 80023b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ba:	2304      	movs	r3, #4
 80023bc:	643b      	str	r3, [r7, #64]	; 0x40
 80023be:	2301      	movs	r3, #1
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 80023c2:	230f      	movs	r3, #15
 80023c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <state_driving_iterate+0xdbc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023d0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023d4:	4810      	ldr	r0, [pc, #64]	; (8002418 <state_driving_iterate+0xdc0>)
 80023d6:	f001 ffa7 	bl	8004328 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <state_driving_iterate+0xdbc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3308      	adds	r3, #8
 80023e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023e4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <state_driving_iterate+0xdc4>)
 80023ea:	f001 ff9d 	bl	8004328 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <state_driving_iterate+0xdbc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3310      	adds	r3, #16
 80023f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023f8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023fc:	4808      	ldr	r0, [pc, #32]	; (8002420 <state_driving_iterate+0xdc8>)
 80023fe:	f001 ff93 	bl	8004328 <HAL_CAN_AddTxMessage>
		fsm_changeState(fsm, &idleState, "Soft Shutdown Requested (CAN)");
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <state_driving_iterate+0xdcc>)
 8002404:	4908      	ldr	r1, [pc, #32]	; (8002428 <state_driving_iterate+0xdd0>)
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fa3e 	bl	8000888 <fsm_changeState>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 800240c:	bf00      	nop
 800240e:	37fc      	adds	r7, #252	; 0xfc
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}
 8002414:	200049e0 	.word	0x200049e0
 8002418:	20004bcc 	.word	0x20004bcc
 800241c:	20004ba4 	.word	0x20004ba4
 8002420:	20004b7c 	.word	0x20004b7c
 8002424:	0800b8cc 	.word	0x0800b8cc
 8002428:	20000010 	.word	0x20000010

0800242c <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 8002434:	bf00      	nop
}
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002446:	463b      	mov	r3, r7
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <MX_ADC1_Init+0xd0>)
 8002454:	4a2f      	ldr	r2, [pc, #188]	; (8002514 <MX_ADC1_Init+0xd4>)
 8002456:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <MX_ADC1_Init+0xd0>)
 800245a:	2200      	movs	r2, #0
 800245c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <MX_ADC1_Init+0xd0>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002464:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <MX_ADC1_Init+0xd0>)
 8002466:	2201      	movs	r2, #1
 8002468:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800246a:	4b29      	ldr	r3, [pc, #164]	; (8002510 <MX_ADC1_Init+0xd0>)
 800246c:	2201      	movs	r2, #1
 800246e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <MX_ADC1_Init+0xd0>)
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <MX_ADC1_Init+0xd0>)
 800247a:	2200      	movs	r2, #0
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <MX_ADC1_Init+0xd0>)
 8002480:	4a25      	ldr	r2, [pc, #148]	; (8002518 <MX_ADC1_Init+0xd8>)
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <MX_ADC1_Init+0xd0>)
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <MX_ADC1_Init+0xd0>)
 800248c:	2203      	movs	r2, #3
 800248e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <MX_ADC1_Init+0xd0>)
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <MX_ADC1_Init+0xd0>)
 800249a:	2201      	movs	r2, #1
 800249c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800249e:	481c      	ldr	r0, [pc, #112]	; (8002510 <MX_ADC1_Init+0xd0>)
 80024a0:	f001 f832 	bl	8003508 <HAL_ADC_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80024aa:	f000 fe33 	bl	8003114 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80024ae:	2304      	movs	r3, #4
 80024b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024b2:	2301      	movs	r3, #1
 80024b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80024b6:	2307      	movs	r3, #7
 80024b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ba:	463b      	mov	r3, r7
 80024bc:	4619      	mov	r1, r3
 80024be:	4814      	ldr	r0, [pc, #80]	; (8002510 <MX_ADC1_Init+0xd0>)
 80024c0:	f001 fa40 	bl	8003944 <HAL_ADC_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80024ca:	f000 fe23 	bl	8003114 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80024ce:	2306      	movs	r3, #6
 80024d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024d2:	2302      	movs	r3, #2
 80024d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d6:	463b      	mov	r3, r7
 80024d8:	4619      	mov	r1, r3
 80024da:	480d      	ldr	r0, [pc, #52]	; (8002510 <MX_ADC1_Init+0xd0>)
 80024dc:	f001 fa32 	bl	8003944 <HAL_ADC_ConfigChannel>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80024e6:	f000 fe15 	bl	8003114 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80024ea:	230e      	movs	r3, #14
 80024ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80024ee:	2303      	movs	r3, #3
 80024f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f2:	463b      	mov	r3, r7
 80024f4:	4619      	mov	r1, r3
 80024f6:	4806      	ldr	r0, [pc, #24]	; (8002510 <MX_ADC1_Init+0xd0>)
 80024f8:	f001 fa24 	bl	8003944 <HAL_ADC_ConfigChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002502:	f000 fe07 	bl	8003114 <Error_Handler>
  }

}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20004a2c 	.word	0x20004a2c
 8002514:	40012000 	.word	0x40012000
 8002518:	0f000001 	.word	0x0f000001

0800251c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002522:	463b      	mov	r3, r7
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <MX_ADC2_Init+0xb4>)
 8002530:	4a28      	ldr	r2, [pc, #160]	; (80025d4 <MX_ADC2_Init+0xb8>)
 8002532:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002534:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <MX_ADC2_Init+0xb4>)
 8002536:	2200      	movs	r2, #0
 8002538:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800253a:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <MX_ADC2_Init+0xb4>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <MX_ADC2_Init+0xb4>)
 8002542:	2201      	movs	r2, #1
 8002544:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <MX_ADC2_Init+0xb4>)
 8002548:	2201      	movs	r2, #1
 800254a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <MX_ADC2_Init+0xb4>)
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <MX_ADC2_Init+0xb4>)
 8002556:	2200      	movs	r2, #0
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <MX_ADC2_Init+0xb4>)
 800255c:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <MX_ADC2_Init+0xbc>)
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MX_ADC2_Init+0xb4>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <MX_ADC2_Init+0xb4>)
 8002568:	2202      	movs	r2, #2
 800256a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_ADC2_Init+0xb4>)
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <MX_ADC2_Init+0xb4>)
 8002576:	2201      	movs	r2, #1
 8002578:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800257a:	4815      	ldr	r0, [pc, #84]	; (80025d0 <MX_ADC2_Init+0xb4>)
 800257c:	f000 ffc4 	bl	8003508 <HAL_ADC_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8002586:	f000 fdc5 	bl	8003114 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800258a:	2303      	movs	r3, #3
 800258c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800258e:	2301      	movs	r3, #1
 8002590:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002592:	2307      	movs	r3, #7
 8002594:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002596:	463b      	mov	r3, r7
 8002598:	4619      	mov	r1, r3
 800259a:	480d      	ldr	r0, [pc, #52]	; (80025d0 <MX_ADC2_Init+0xb4>)
 800259c:	f001 f9d2 	bl	8003944 <HAL_ADC_ConfigChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80025a6:	f000 fdb5 	bl	8003114 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80025aa:	2305      	movs	r3, #5
 80025ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025ae:	2302      	movs	r3, #2
 80025b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80025b2:	463b      	mov	r3, r7
 80025b4:	4619      	mov	r1, r3
 80025b6:	4806      	ldr	r0, [pc, #24]	; (80025d0 <MX_ADC2_Init+0xb4>)
 80025b8:	f001 f9c4 	bl	8003944 <HAL_ADC_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80025c2:	f000 fda7 	bl	8003114 <Error_Handler>
  }

}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200049e4 	.word	0x200049e4
 80025d4:	40012100 	.word	0x40012100
 80025d8:	0f000001 	.word	0x0f000001

080025dc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80025e2:	463b      	mov	r3, r7
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <MX_ADC3_Init+0x98>)
 80025f0:	4a21      	ldr	r2, [pc, #132]	; (8002678 <MX_ADC3_Init+0x9c>)
 80025f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <MX_ADC3_Init+0x98>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <MX_ADC3_Init+0x98>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002600:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <MX_ADC3_Init+0x98>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <MX_ADC3_Init+0x98>)
 8002608:	2201      	movs	r2, #1
 800260a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <MX_ADC3_Init+0x98>)
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_ADC3_Init+0x98>)
 8002616:	2200      	movs	r2, #0
 8002618:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <MX_ADC3_Init+0x98>)
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <MX_ADC3_Init+0xa0>)
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MX_ADC3_Init+0x98>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <MX_ADC3_Init+0x98>)
 8002628:	2201      	movs	r2, #1
 800262a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_ADC3_Init+0x98>)
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <MX_ADC3_Init+0x98>)
 8002636:	2200      	movs	r2, #0
 8002638:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800263a:	480e      	ldr	r0, [pc, #56]	; (8002674 <MX_ADC3_Init+0x98>)
 800263c:	f000 ff64 	bl	8003508 <HAL_ADC_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002646:	f000 fd65 	bl	8003114 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800264a:	2302      	movs	r3, #2
 800264c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800264e:	2301      	movs	r3, #1
 8002650:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002656:	463b      	mov	r3, r7
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	; (8002674 <MX_ADC3_Init+0x98>)
 800265c:	f001 f972 	bl	8003944 <HAL_ADC_ConfigChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002666:	f000 fd55 	bl	8003114 <Error_Handler>
  }

}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20004a74 	.word	0x20004a74
 8002678:	40012200 	.word	0x40012200
 800267c:	0f000001 	.word	0x0f000001

08002680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	; 0x38
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a7b      	ldr	r2, [pc, #492]	; (800288c <HAL_ADC_MspInit+0x20c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d16c      	bne.n	800277c <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026a2:	4b7b      	ldr	r3, [pc, #492]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a7a      	ldr	r2, [pc, #488]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a74      	ldr	r2, [pc, #464]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b72      	ldr	r3, [pc, #456]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d2:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a6e      	ldr	r2, [pc, #440]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80026ea:	2350      	movs	r3, #80	; 0x50
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ee:	2303      	movs	r3, #3
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fa:	4619      	mov	r1, r3
 80026fc:	4865      	ldr	r0, [pc, #404]	; (8002894 <HAL_ADC_MspInit+0x214>)
 80026fe:	f002 fc81 	bl	8005004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002702:	2310      	movs	r3, #16
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002706:	2303      	movs	r3, #3
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002712:	4619      	mov	r1, r3
 8002714:	4860      	ldr	r0, [pc, #384]	; (8002898 <HAL_ADC_MspInit+0x218>)
 8002716:	f002 fc75 	bl	8005004 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <HAL_ADC_MspInit+0x21c>)
 800271c:	4a60      	ldr	r2, [pc, #384]	; (80028a0 <HAL_ADC_MspInit+0x220>)
 800271e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002720:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_ADC_MspInit+0x21c>)
 8002722:	2200      	movs	r2, #0
 8002724:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002726:	4b5d      	ldr	r3, [pc, #372]	; (800289c <HAL_ADC_MspInit+0x21c>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800272c:	4b5b      	ldr	r3, [pc, #364]	; (800289c <HAL_ADC_MspInit+0x21c>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002732:	4b5a      	ldr	r3, [pc, #360]	; (800289c <HAL_ADC_MspInit+0x21c>)
 8002734:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002738:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800273a:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_ADC_MspInit+0x21c>)
 800273c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002740:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002742:	4b56      	ldr	r3, [pc, #344]	; (800289c <HAL_ADC_MspInit+0x21c>)
 8002744:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002748:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800274a:	4b54      	ldr	r3, [pc, #336]	; (800289c <HAL_ADC_MspInit+0x21c>)
 800274c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002750:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002752:	4b52      	ldr	r3, [pc, #328]	; (800289c <HAL_ADC_MspInit+0x21c>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_ADC_MspInit+0x21c>)
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800275e:	484f      	ldr	r0, [pc, #316]	; (800289c <HAL_ADC_MspInit+0x21c>)
 8002760:	f002 f8da 	bl	8004918 <HAL_DMA_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800276a:	f000 fcd3 	bl	8003114 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4a      	ldr	r2, [pc, #296]	; (800289c <HAL_ADC_MspInit+0x21c>)
 8002772:	639a      	str	r2, [r3, #56]	; 0x38
 8002774:	4a49      	ldr	r2, [pc, #292]	; (800289c <HAL_ADC_MspInit+0x21c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800277a:	e083      	b.n	8002884 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a48      	ldr	r2, [pc, #288]	; (80028a4 <HAL_ADC_MspInit+0x224>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d155      	bne.n	8002832 <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002786:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_ADC_MspInit+0x210>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a41      	ldr	r2, [pc, #260]	; (8002890 <HAL_ADC_MspInit+0x210>)
 800278c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_ADC_MspInit+0x210>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a3b      	ldr	r2, [pc, #236]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_ADC_MspInit+0x210>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BRAKE_PEDAL_ONE_Pin|BRAKE_PEDAL_TWO_Pin;
 80027b6:	2328      	movs	r3, #40	; 0x28
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ba:	2303      	movs	r3, #3
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c6:	4619      	mov	r1, r3
 80027c8:	4832      	ldr	r0, [pc, #200]	; (8002894 <HAL_ADC_MspInit+0x214>)
 80027ca:	f002 fc1b 	bl	8005004 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80027ce:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 80027d0:	4a36      	ldr	r2, [pc, #216]	; (80028ac <HAL_ADC_MspInit+0x22c>)
 80027d2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80027d4:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 80027d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027da:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027e2:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 80027ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 80027f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027f6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027f8:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 80027fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027fe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 8002802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002806:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 800280a:	2200      	movs	r2, #0
 800280c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 8002810:	2200      	movs	r2, #0
 8002812:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002814:	4824      	ldr	r0, [pc, #144]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 8002816:	f002 f87f 	bl	8004918 <HAL_DMA_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8002820:	f000 fc78 	bl	8003114 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a20      	ldr	r2, [pc, #128]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
 800282a:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_ADC_MspInit+0x228>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002830:	e028      	b.n	8002884 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <HAL_ADC_MspInit+0x230>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d123      	bne.n	8002884 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_ADC_MspInit+0x210>)
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <HAL_ADC_MspInit+0x210>)
 8002842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002846:	6453      	str	r3, [r2, #68]	; 0x44
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_ADC_MspInit+0x210>)
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_ADC_MspInit+0x210>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <HAL_ADC_MspInit+0x210>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6313      	str	r3, [r2, #48]	; 0x30
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_ADC_MspInit+0x210>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BRAKE_PRESSURE_Pin;
 800286c:	2304      	movs	r3, #4
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002870:	2303      	movs	r3, #3
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BRAKE_PRESSURE_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287c:	4619      	mov	r1, r3
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <HAL_ADC_MspInit+0x214>)
 8002880:	f002 fbc0 	bl	8005004 <HAL_GPIO_Init>
}
 8002884:	bf00      	nop
 8002886:	3738      	adds	r7, #56	; 0x38
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40012000 	.word	0x40012000
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000
 8002898:	40020800 	.word	0x40020800
 800289c:	20004abc 	.word	0x20004abc
 80028a0:	40026410 	.word	0x40026410
 80028a4:	40012100 	.word	0x40012100
 80028a8:	20004b1c 	.word	0x20004b1c
 80028ac:	40026440 	.word	0x40026440
 80028b0:	40012200 	.word	0x40012200

080028b4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <MX_CAN1_Init+0x64>)
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <MX_CAN1_Init+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <MX_CAN1_Init+0x64>)
 80028c0:	2202      	movs	r2, #2
 80028c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <MX_CAN1_Init+0x64>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <MX_CAN1_Init+0x64>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <MX_CAN1_Init+0x64>)
 80028d2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80028d6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <MX_CAN1_Init+0x64>)
 80028da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028de:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80028e0:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <MX_CAN1_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <MX_CAN1_Init+0x64>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <MX_CAN1_Init+0x64>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <MX_CAN1_Init+0x64>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <MX_CAN1_Init+0x64>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <MX_CAN1_Init+0x64>)
 8002900:	2200      	movs	r2, #0
 8002902:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002904:	4804      	ldr	r0, [pc, #16]	; (8002918 <MX_CAN1_Init+0x64>)
 8002906:	f001 fae3 	bl	8003ed0 <HAL_CAN_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002910:	f000 fc00 	bl	8003114 <Error_Handler>
  }

}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20004bcc 	.word	0x20004bcc
 800291c:	40006400 	.word	0x40006400

08002920 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8002924:	4b17      	ldr	r3, [pc, #92]	; (8002984 <MX_CAN2_Init+0x64>)
 8002926:	4a18      	ldr	r2, [pc, #96]	; (8002988 <MX_CAN2_Init+0x68>)
 8002928:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800292a:	4b16      	ldr	r3, [pc, #88]	; (8002984 <MX_CAN2_Init+0x64>)
 800292c:	2202      	movs	r2, #2
 800292e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <MX_CAN2_Init+0x64>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <MX_CAN2_Init+0x64>)
 8002938:	2200      	movs	r2, #0
 800293a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_CAN2_Init+0x64>)
 800293e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002942:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <MX_CAN2_Init+0x64>)
 8002946:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800294a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <MX_CAN2_Init+0x64>)
 800294e:	2200      	movs	r2, #0
 8002950:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <MX_CAN2_Init+0x64>)
 8002954:	2200      	movs	r2, #0
 8002956:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <MX_CAN2_Init+0x64>)
 800295a:	2200      	movs	r2, #0
 800295c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <MX_CAN2_Init+0x64>)
 8002960:	2200      	movs	r2, #0
 8002962:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <MX_CAN2_Init+0x64>)
 8002966:	2200      	movs	r2, #0
 8002968:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <MX_CAN2_Init+0x64>)
 800296c:	2200      	movs	r2, #0
 800296e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002970:	4804      	ldr	r0, [pc, #16]	; (8002984 <MX_CAN2_Init+0x64>)
 8002972:	f001 faad 	bl	8003ed0 <HAL_CAN_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800297c:	f000 fbca 	bl	8003114 <Error_Handler>
  }

}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20004ba4 	.word	0x20004ba4
 8002988:	40006800 	.word	0x40006800

0800298c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <MX_CAN3_Init+0x64>)
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <MX_CAN3_Init+0x68>)
 8002994:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 2;
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <MX_CAN3_Init+0x64>)
 8002998:	2202      	movs	r2, #2
 800299a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <MX_CAN3_Init+0x64>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029aa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80029ae:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029b6:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80029b8:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029d8:	2200      	movs	r2, #0
 80029da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80029dc:	4804      	ldr	r0, [pc, #16]	; (80029f0 <MX_CAN3_Init+0x64>)
 80029de:	f001 fa77 	bl	8003ed0 <HAL_CAN_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80029e8:	f000 fb94 	bl	8003114 <Error_Handler>
  }

}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20004b7c 	.word	0x20004b7c
 80029f4:	40003400 	.word	0x40003400

080029f8 <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b092      	sub	sp, #72	; 0x48
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7e      	ldr	r2, [pc, #504]	; (8002c10 <HAL_CAN_MspInit+0x218>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d132      	bne.n	8002a80 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002a1a:	4b7e      	ldr	r3, [pc, #504]	; (8002c14 <HAL_CAN_MspInit+0x21c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	4a7c      	ldr	r2, [pc, #496]	; (8002c14 <HAL_CAN_MspInit+0x21c>)
 8002a22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002a24:	4b7b      	ldr	r3, [pc, #492]	; (8002c14 <HAL_CAN_MspInit+0x21c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10b      	bne.n	8002a44 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002a2c:	4b7a      	ldr	r3, [pc, #488]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	4a79      	ldr	r2, [pc, #484]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a36:	6413      	str	r3, [r2, #64]	; 0x40
 8002a38:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a44:	4b74      	ldr	r3, [pc, #464]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	4a73      	ldr	r2, [pc, #460]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a50:	4b71      	ldr	r3, [pc, #452]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a6e:	2309      	movs	r3, #9
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a76:	4619      	mov	r1, r3
 8002a78:	4868      	ldr	r0, [pc, #416]	; (8002c1c <HAL_CAN_MspInit+0x224>)
 8002a7a:	f002 fac3 	bl	8005004 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8002a7e:	e0c2      	b.n	8002c06 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a66      	ldr	r2, [pc, #408]	; (8002c20 <HAL_CAN_MspInit+0x228>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d15c      	bne.n	8002b44 <HAL_CAN_MspInit+0x14c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002a8a:	4b66      	ldr	r3, [pc, #408]	; (8002c24 <HAL_CAN_MspInit+0x22c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	4a64      	ldr	r2, [pc, #400]	; (8002c24 <HAL_CAN_MspInit+0x22c>)
 8002a92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8002a94:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <HAL_CAN_MspInit+0x22c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_CAN_MspInit+0xbc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002a9c:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4a5d      	ldr	r2, [pc, #372]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002aa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa8:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 8002ab4:	4b5c      	ldr	r3, [pc, #368]	; (8002c28 <HAL_CAN_MspInit+0x230>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	4a5b      	ldr	r2, [pc, #364]	; (8002c28 <HAL_CAN_MspInit+0x230>)
 8002abc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8002abe:	4b5a      	ldr	r3, [pc, #360]	; (8002c28 <HAL_CAN_MspInit+0x230>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d10b      	bne.n	8002ade <HAL_CAN_MspInit+0xe6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8002ac6:	4b54      	ldr	r3, [pc, #336]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a53      	ldr	r2, [pc, #332]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002acc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad2:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002ade:	4b4d      	ldr	r3, [pc, #308]	; (8002c14 <HAL_CAN_MspInit+0x21c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	4a4b      	ldr	r2, [pc, #300]	; (8002c14 <HAL_CAN_MspInit+0x21c>)
 8002ae6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_CAN_MspInit+0x21c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d10b      	bne.n	8002b08 <HAL_CAN_MspInit+0x110>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002af0:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	4a48      	ldr	r2, [pc, #288]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002afa:	6413      	str	r3, [r2, #64]	; 0x40
 8002afc:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	623b      	str	r3, [r7, #32]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b08:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a42      	ldr	r2, [pc, #264]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002b20:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	2302      	movs	r3, #2
 8002b28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002b32:	2309      	movs	r3, #9
 8002b34:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	483b      	ldr	r0, [pc, #236]	; (8002c2c <HAL_CAN_MspInit+0x234>)
 8002b3e:	f002 fa61 	bl	8005004 <HAL_GPIO_Init>
}
 8002b42:	e060      	b.n	8002c06 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN3)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <HAL_CAN_MspInit+0x238>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d15b      	bne.n	8002c06 <HAL_CAN_MspInit+0x20e>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002b4e:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_CAN_MspInit+0x22c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a33      	ldr	r2, [pc, #204]	; (8002c24 <HAL_CAN_MspInit+0x22c>)
 8002b56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_CAN_MspInit+0x22c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10b      	bne.n	8002b78 <HAL_CAN_MspInit+0x180>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002b60:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4a2c      	ldr	r2, [pc, #176]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002b66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_CAN_MspInit+0x230>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <HAL_CAN_MspInit+0x230>)
 8002b80:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8002b82:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <HAL_CAN_MspInit+0x230>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d10b      	bne.n	8002ba2 <HAL_CAN_MspInit+0x1aa>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002b90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_CAN_MspInit+0x21c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	4a1a      	ldr	r2, [pc, #104]	; (8002c14 <HAL_CAN_MspInit+0x21c>)
 8002baa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_CAN_MspInit+0x21c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10b      	bne.n	8002bcc <HAL_CAN_MspInit+0x1d4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002bb4:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002bba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc0:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_CAN_MspInit+0x220>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8002be4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8002bf6:	230b      	movs	r3, #11
 8002bf8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4806      	ldr	r0, [pc, #24]	; (8002c1c <HAL_CAN_MspInit+0x224>)
 8002c02:	f002 f9ff 	bl	8005004 <HAL_GPIO_Init>
}
 8002c06:	bf00      	nop
 8002c08:	3748      	adds	r7, #72	; 0x48
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40006400 	.word	0x40006400
 8002c14:	200000c0 	.word	0x200000c0
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000
 8002c20:	40006800 	.word	0x40006800
 8002c24:	200000c4 	.word	0x200000c4
 8002c28:	200000c8 	.word	0x200000c8
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40003400 	.word	0x40003400

08002c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <MX_DMA_Init+0x48>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <MX_DMA_Init+0x48>)
 8002c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <MX_DMA_Init+0x48>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2038      	movs	r0, #56	; 0x38
 8002c58:	f001 fe34 	bl	80048c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c5c:	2038      	movs	r0, #56	; 0x38
 8002c5e:	f001 fe4d 	bl	80048fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	203a      	movs	r0, #58	; 0x3a
 8002c68:	f001 fe2c 	bl	80048c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002c6c:	203a      	movs	r0, #58	; 0x3a
 8002c6e:	f001 fe45 	bl	80048fc <HAL_NVIC_EnableIRQ>

}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800

08002c80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <MX_FREERTOS_Init+0x18>)
 8002c86:	2100      	movs	r1, #0
 8002c88:	4804      	ldr	r0, [pc, #16]	; (8002c9c <MX_FREERTOS_Init+0x1c>)
 8002c8a:	f004 fc1f 	bl	80074cc <osThreadNew>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <MX_FREERTOS_Init+0x20>)
 8002c92:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	0800b950 	.word	0x0800b950
 8002c9c:	08002ca5 	.word	0x08002ca5
 8002ca0:	20004bf4 	.word	0x20004bf4

08002ca4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002cac:	2001      	movs	r0, #1
 8002cae:	f004 fcb3 	bl	8007618 <osDelay>
 8002cb2:	e7fb      	b.n	8002cac <StartDefaultTask+0x8>

08002cb4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cba:	f107 0314 	add.w	r3, r7, #20
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a2e      	ldr	r2, [pc, #184]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce2:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a28      	ldr	r2, [pc, #160]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cfa:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002d00:	f043 0310 	orr.w	r3, r3, #16
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <MX_GPIO_Init+0xd4>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d30:	4816      	ldr	r0, [pc, #88]	; (8002d8c <MX_GPIO_Init+0xd8>)
 8002d32:	f002 fb29 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HSOUT_RTD_LED_Pin;
 8002d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	2300      	movs	r3, #0
 8002d46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HSOUT_RTD_LED_GPIO_Port, &GPIO_InitStruct);
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	480f      	ldr	r0, [pc, #60]	; (8002d8c <MX_GPIO_Init+0xd8>)
 8002d50:	f002 f958 	bl	8005004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_INPUT_Pin;
 8002d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <MX_GPIO_Init+0xdc>)
 8002d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTD_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	4619      	mov	r1, r3
 8002d68:	4808      	ldr	r0, [pc, #32]	; (8002d8c <MX_GPIO_Init+0xd8>)
 8002d6a:	f002 f94b 	bl	8005004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2103      	movs	r1, #3
 8002d72:	2028      	movs	r0, #40	; 0x28
 8002d74:	f001 fda6 	bl	80048c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d78:	2028      	movs	r0, #40	; 0x28
 8002d7a:	f001 fdbf 	bl	80048fc <HAL_NVIC_EnableIRQ>

}
 8002d7e:	bf00      	nop
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	10110000 	.word	0x10110000

08002d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b0a0      	sub	sp, #128	; 0x80
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d9a:	f000 fb88 	bl	80034ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d9e:	f000 f8a3 	bl	8002ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002da2:	f7ff ff87 	bl	8002cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002da6:	f7ff ff45 	bl	8002c34 <MX_DMA_Init>
  MX_CAN1_Init();
 8002daa:	f7ff fd83 	bl	80028b4 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8002dae:	f000 fae1 	bl	8003374 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8002db2:	f7ff fdb5 	bl	8002920 <MX_CAN2_Init>
  MX_CAN3_Init();
 8002db6:	f7ff fde9 	bl	800298c <MX_CAN3_Init>
  MX_ADC2_Init();
 8002dba:	f7ff fbaf 	bl	800251c <MX_ADC2_Init>
  MX_ADC3_Init();
 8002dbe:	f7ff fc0d 	bl	80025dc <MX_ADC3_Init>
  MX_ADC1_Init();
 8002dc2:	f7ff fb3d 	bl	8002440 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8002dc6:	4842      	ldr	r0, [pc, #264]	; (8002ed0 <main+0x13c>)
 8002dc8:	f001 fa6a 	bl	80042a0 <HAL_CAN_Start>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <main+0x42>
	{
		Error_Handler();
 8002dd2:	f000 f99f 	bl	8003114 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8002dd6:	483f      	ldr	r0, [pc, #252]	; (8002ed4 <main+0x140>)
 8002dd8:	f001 fa62 	bl	80042a0 <HAL_CAN_Start>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <main+0x52>
	{
		Error_Handler();
 8002de2:	f000 f997 	bl	8003114 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan3) != HAL_OK)
 8002de6:	483c      	ldr	r0, [pc, #240]	; (8002ed8 <main+0x144>)
 8002de8:	f001 fa5a 	bl	80042a0 <HAL_CAN_Start>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <main+0x62>
	{
		Error_Handler();
 8002df2:	f000 f98f 	bl	8003114 <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 8002e02:	2300      	movs	r3, #0
 8002e04:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 8002e06:	2301      	movs	r3, #1
 8002e08:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 8002e1a:	230e      	movs	r3, #14
 8002e1c:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 8002e1e:	230e      	movs	r3, #14
 8002e20:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8002e26:	2301      	movs	r3, #1
 8002e28:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8002e32:	2300      	movs	r3, #0
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 8002e36:	2300      	movs	r3, #0
 8002e38:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 8002e42:	230e      	movs	r3, #14
 8002e44:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 28;
 8002e46:	231c      	movs	r3, #28
 8002e48:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 8002e56:	2301      	movs	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 8002e6a:	230e      	movs	r3, #14
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 8002e6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e72:	4619      	mov	r1, r3
 8002e74:	4816      	ldr	r0, [pc, #88]	; (8002ed0 <main+0x13c>)
 8002e76:	f001 f927 	bl	80040c8 <HAL_CAN_ConfigFilter>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <main+0xf0>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002e80:	f000 f948 	bl	8003114 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8002e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4812      	ldr	r0, [pc, #72]	; (8002ed4 <main+0x140>)
 8002e8c:	f001 f91c 	bl	80040c8 <HAL_CAN_ConfigFilter>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <main+0x106>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002e96:	f000 f93d 	bl	8003114 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	480e      	ldr	r0, [pc, #56]	; (8002ed8 <main+0x144>)
 8002ea0:	f001 f912 	bl	80040c8 <HAL_CAN_ConfigFilter>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <main+0x11a>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002eaa:	f000 f933 	bl	8003114 <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 8002eae:	480b      	ldr	r0, [pc, #44]	; (8002edc <main+0x148>)
 8002eb0:	f7fd fc8c 	bl	80007cc <fsm_new>
 8002eb4:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <main+0x14c>)
 8002eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002eba:	480a      	ldr	r0, [pc, #40]	; (8002ee4 <main+0x150>)
 8002ebc:	f004 fb06 	bl	80074cc <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002ec0:	f004 fa9a 	bl	80073f8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002ec4:	f7ff fedc 	bl	8002c80 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002ec8:	f004 faca 	bl	8007460 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002ecc:	e7fe      	b.n	8002ecc <main+0x138>
 8002ece:	bf00      	nop
 8002ed0:	20004bcc 	.word	0x20004bcc
 8002ed4:	20004ba4 	.word	0x20004ba4
 8002ed8:	20004b7c 	.word	0x20004b7c
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	0800b974 	.word	0x0800b974
 8002ee4:	08003005 	.word	0x08003005

08002ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b0b8      	sub	sp, #224	; 0xe0
 8002eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ef2:	2234      	movs	r2, #52	; 0x34
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f007 ffb5 	bl	800ae66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002efc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	2290      	movs	r2, #144	; 0x90
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f007 ffa6 	bl	800ae66 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <SystemClock_Config+0xec>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <SystemClock_Config+0xec>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <SystemClock_Config+0xec>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <SystemClock_Config+0xf0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f3a:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <SystemClock_Config+0xf0>)
 8002f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <SystemClock_Config+0xf0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 fa4a 	bl	8005404 <HAL_RCC_OscConfig>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002f76:	f000 f8cd 	bl	8003114 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f7a:	230f      	movs	r3, #15
 8002f7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fcde 	bl	8005960 <HAL_RCC_ClockConfig>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002faa:	f000 f8b3 	bl	8003114 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f002 fed3 	bl	8005d68 <HAL_RCCEx_PeriphCLKConfig>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002fc8:	f000 f8a4 	bl	8003114 <Error_Handler>
  }
}
 8002fcc:	bf00      	nop
 8002fce:	37e0      	adds	r7, #224	; 0xe0
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000

08002fdc <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4803      	ldr	r0, [pc, #12]	; (8003000 <CC_LogInfo+0x24>)
 8002ff2:	f003 fd5b 	bl	8006aac <HAL_UART_Transmit>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20004c38 	.word	0x20004c38

08003004 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08e      	sub	sp, #56	; 0x38
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 800300c:	2115      	movs	r1, #21
 800300e:	4831      	ldr	r0, [pc, #196]	; (80030d4 <fsm_thread_mainLoop+0xd0>)
 8003010:	f7ff ffe4 	bl	8002fdc <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 8003014:	4930      	ldr	r1, [pc, #192]	; (80030d8 <fsm_thread_mainLoop+0xd4>)
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fccc 	bl	80009b4 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 800301c:	492f      	ldr	r1, [pc, #188]	; (80030dc <fsm_thread_mainLoop+0xd8>)
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fc7c 	bl	800091c <fsm_reset>
	uint32_t threadTimer = HAL_GetTick();
 8003024:	f000 fa64 	bl	80034f0 <HAL_GetTick>
 8003028:	6378      	str	r0, [r7, #52]	; 0x34
//	fsm_changeState(fsm, &debugState, "Forcing debug state");
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 800302a:	e012      	b.n	8003052 <fsm_thread_mainLoop+0x4e>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	331c      	adds	r3, #28
 8003032:	f107 020c 	add.w	r2, r7, #12
 8003036:	2100      	movs	r1, #0
 8003038:	4829      	ldr	r0, [pc, #164]	; (80030e0 <fsm_thread_mainLoop+0xdc>)
 800303a:	f001 fa50 	bl	80044de <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN1Queue, &msg, 0U, 0U);
 800303e:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <fsm_thread_mainLoop+0xe0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
 8003046:	f107 010c 	add.w	r1, r7, #12
 800304a:	2300      	movs	r3, #0
 800304c:	2200      	movs	r2, #0
 800304e:	f004 fcf3 	bl	8007a38 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8003052:	2100      	movs	r1, #0
 8003054:	4822      	ldr	r0, [pc, #136]	; (80030e0 <fsm_thread_mainLoop+0xdc>)
 8003056:	f001 fb54 	bl	8004702 <HAL_CAN_GetRxFifoFillLevel>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e5      	bne.n	800302c <fsm_thread_mainLoop+0x28>
//			char x[80];
//			int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
//			CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8003060:	e012      	b.n	8003088 <fsm_thread_mainLoop+0x84>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	331c      	adds	r3, #28
 8003068:	f107 020c 	add.w	r2, r7, #12
 800306c:	2100      	movs	r1, #0
 800306e:	481e      	ldr	r0, [pc, #120]	; (80030e8 <fsm_thread_mainLoop+0xe4>)
 8003070:	f001 fa35 	bl	80044de <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN2Queue, &msg, 0U, 0U);
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <fsm_thread_mainLoop+0xe0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 800307c:	f107 010c 	add.w	r1, r7, #12
 8003080:	2300      	movs	r3, #0
 8003082:	2200      	movs	r2, #0
 8003084:	f004 fcd8 	bl	8007a38 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8003088:	2100      	movs	r1, #0
 800308a:	4817      	ldr	r0, [pc, #92]	; (80030e8 <fsm_thread_mainLoop+0xe4>)
 800308c:	f001 fb39 	bl	8004702 <HAL_CAN_GetRxFifoFillLevel>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e5      	bne.n	8003062 <fsm_thread_mainLoop+0x5e>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8003096:	e012      	b.n	80030be <fsm_thread_mainLoop+0xba>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 8003098:	f107 030c 	add.w	r3, r7, #12
 800309c:	331c      	adds	r3, #28
 800309e:	f107 020c 	add.w	r2, r7, #12
 80030a2:	2100      	movs	r1, #0
 80030a4:	4811      	ldr	r0, [pc, #68]	; (80030ec <fsm_thread_mainLoop+0xe8>)
 80030a6:	f001 fa1a 	bl	80044de <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN3Queue, &msg, 0U, 0U);
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <fsm_thread_mainLoop+0xe0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8d3 04f0 	ldr.w	r0, [r3, #1264]	; 0x4f0
 80030b2:	f107 010c 	add.w	r1, r7, #12
 80030b6:	2300      	movs	r3, #0
 80030b8:	2200      	movs	r2, #0
 80030ba:	f004 fcbd 	bl	8007a38 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 80030be:	2100      	movs	r1, #0
 80030c0:	480a      	ldr	r0, [pc, #40]	; (80030ec <fsm_thread_mainLoop+0xe8>)
 80030c2:	f001 fb1e 	bl	8004702 <HAL_CAN_GetRxFifoFillLevel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e5      	bne.n	8003098 <fsm_thread_mainLoop+0x94>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}
		fsm_iterate(fsm);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7fd fbb7 	bl	8000840 <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80030d2:	e7be      	b.n	8003052 <fsm_thread_mainLoop+0x4e>
 80030d4:	0800b920 	.word	0x0800b920
 80030d8:	08002fdd 	.word	0x08002fdd
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20004bcc 	.word	0x20004bcc
 80030e4:	200049e0 	.word	0x200049e0
 80030e8:	20004ba4 	.word	0x20004ba4
 80030ec:	20004b7c 	.word	0x20004b7c

080030f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003102:	f000 f9e1 	bl	80034c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40001400 	.word	0x40001400

08003114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_MspInit+0x44>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_MspInit+0x44>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_MspInit+0x44>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_MspInit+0x44>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4a08      	ldr	r2, [pc, #32]	; (8003168 <HAL_MspInit+0x44>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314c:	6453      	str	r3, [r2, #68]	; 0x44
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_MspInit+0x44>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_InitTick>:
 800316c:	b580      	push	{r7, lr}
 800316e:	b08c      	sub	sp, #48	; 0x30
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003178:	2300      	movs	r3, #0
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
 800317c:	2200      	movs	r2, #0
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	2037      	movs	r0, #55	; 0x37
 8003182:	f001 fb9f 	bl	80048c4 <HAL_NVIC_SetPriority>
 8003186:	2037      	movs	r0, #55	; 0x37
 8003188:	f001 fbb8 	bl	80048fc <HAL_NVIC_EnableIRQ>
 800318c:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <HAL_InitTick+0x9c>)
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <HAL_InitTick+0x9c>)
 8003192:	f043 0320 	orr.w	r3, r3, #32
 8003196:	6413      	str	r3, [r2, #64]	; 0x40
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_InitTick+0x9c>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f107 0210 	add.w	r2, r7, #16
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 fda8 	bl	8005d04 <HAL_RCC_GetClockConfig>
 80031b4:	f002 fd7e 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 80031b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	4a13      	ldr	r2, [pc, #76]	; (800320c <HAL_InitTick+0xa0>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0c9b      	lsrs	r3, r3, #18
 80031c4:	3b01      	subs	r3, #1
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_InitTick+0xa4>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <HAL_InitTick+0xa8>)
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_InitTick+0xa4>)
 80031d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <HAL_InitTick+0xa4>)
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	6053      	str	r3, [r2, #4]
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_InitTick+0xa4>)
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_InitTick+0xa4>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	4809      	ldr	r0, [pc, #36]	; (8003210 <HAL_InitTick+0xa4>)
 80031ea:	f003 f9ab 	bl	8006544 <HAL_TIM_Base_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_InitTick+0x92>
 80031f4:	4806      	ldr	r0, [pc, #24]	; (8003210 <HAL_InitTick+0xa4>)
 80031f6:	f003 f9db 	bl	80065b0 <HAL_TIM_Base_Start_IT>
 80031fa:	4603      	mov	r3, r0
 80031fc:	e000      	b.n	8003200 <HAL_InitTick+0x94>
 80031fe:	2301      	movs	r3, #1
 8003200:	4618      	mov	r0, r3
 8003202:	3730      	adds	r7, #48	; 0x30
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	431bde83 	.word	0x431bde83
 8003210:	20004bf8 	.word	0x20004bf8
 8003214:	40001400 	.word	0x40001400

08003218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800322a:	e7fe      	b.n	800322a <HardFault_Handler+0x4>

0800322c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003230:	e7fe      	b.n	8003230 <MemManage_Handler+0x4>

08003232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003236:	e7fe      	b.n	8003236 <BusFault_Handler+0x4>

08003238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800323c:	e7fe      	b.n	800323c <UsageFault_Handler+0x4>

0800323e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800324c:	b598      	push	{r3, r4, r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 8003250:	f000 f94e 	bl	80034f0 <HAL_GetTick>
 8003254:	4601      	mov	r1, r0
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <EXTI15_10_IRQHandler+0x50>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <EXTI15_10_IRQHandler+0x50>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1a8a      	subs	r2, r1, r2
 8003264:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	CC_GlobalState->rtdTicks = HAL_GetTick();
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <EXTI15_10_IRQHandler+0x50>)
 800326a:	681c      	ldr	r4, [r3, #0]
 800326c:	f000 f940 	bl	80034f0 <HAL_GetTick>
 8003270:	4603      	mov	r3, r0
 8003272:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if(CC_GlobalState->rtdTicksSpan > 10)
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <EXTI15_10_IRQHandler+0x50>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800327e:	2b0a      	cmp	r3, #10
 8003280:	d906      	bls.n	8003290 <EXTI15_10_IRQHandler+0x44>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <EXTI15_10_IRQHandler+0x50>)
 8003284:	681c      	ldr	r4, [r3, #0]
 8003286:	f000 f933 	bl	80034f0 <HAL_GetTick>
 800328a:	4603      	mov	r3, r0
 800328c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003290:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003294:	f002 f892 	bl	80053bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	bd98      	pop	{r3, r4, r7, pc}
 800329c:	200049e0 	.word	0x200049e0

080032a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <TIM7_IRQHandler+0x10>)
 80032a6:	f003 f9ad 	bl	8006604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20004bf8 	.word	0x20004bf8

080032b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <DMA2_Stream0_IRQHandler+0x10>)
 80032ba:	f001 fc3b 	bl	8004b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20004abc 	.word	0x20004abc

080032c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <DMA2_Stream2_IRQHandler+0x10>)
 80032ce:	f001 fc31 	bl	8004b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20004b1c 	.word	0x20004b1c

080032dc <_sbrk>:
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <_sbrk+0x5c>)
 80032e6:	4b15      	ldr	r3, [pc, #84]	; (800333c <_sbrk+0x60>)
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <_sbrk+0x64>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <_sbrk+0x22>
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <_sbrk+0x64>)
 80032fa:	4a12      	ldr	r2, [pc, #72]	; (8003344 <_sbrk+0x68>)
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <_sbrk+0x64>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	429a      	cmp	r2, r3
 800330a:	d207      	bcs.n	800331c <_sbrk+0x40>
 800330c:	f007 fd6e 	bl	800adec <__errno>
 8003310:	4602      	mov	r2, r0
 8003312:	230c      	movs	r3, #12
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800331a:	e009      	b.n	8003330 <_sbrk+0x54>
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <_sbrk+0x64>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <_sbrk+0x64>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <_sbrk+0x64>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20080000 	.word	0x20080000
 800333c:	00000400 	.word	0x00000400
 8003340:	200000cc 	.word	0x200000cc
 8003344:	20004d00 	.word	0x20004d00

08003348 <SystemInit>:
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <SystemInit+0x28>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	4a07      	ldr	r2, [pc, #28]	; (8003370 <SystemInit+0x28>)
 8003354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <SystemInit+0x28>)
 800335e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <MX_USART3_UART_Init+0x58>)
 800337a:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <MX_USART3_UART_Init+0x5c>)
 800337c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <MX_USART3_UART_Init+0x58>)
 8003380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003384:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <MX_USART3_UART_Init+0x58>)
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <MX_USART3_UART_Init+0x58>)
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <MX_USART3_UART_Init+0x58>)
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <MX_USART3_UART_Init+0x58>)
 800339a:	220c      	movs	r2, #12
 800339c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <MX_USART3_UART_Init+0x58>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <MX_USART3_UART_Init+0x58>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <MX_USART3_UART_Init+0x58>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <MX_USART3_UART_Init+0x58>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <MX_USART3_UART_Init+0x58>)
 80033b8:	f003 fb2a 	bl	8006a10 <HAL_UART_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80033c2:	f7ff fea7 	bl	8003114 <Error_Handler>
  }

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20004c38 	.word	0x20004c38
 80033d0:	40004800 	.word	0x40004800

080033d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_UART_MspInit+0x7c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d128      	bne.n	8003448 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <HAL_UART_MspInit+0x80>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a16      	ldr	r2, [pc, #88]	; (8003454 <HAL_UART_MspInit+0x80>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_UART_MspInit+0x80>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_UART_MspInit+0x80>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a10      	ldr	r2, [pc, #64]	; (8003454 <HAL_UART_MspInit+0x80>)
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <HAL_UART_MspInit+0x80>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003426:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800342a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003438:	2307      	movs	r3, #7
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4619      	mov	r1, r3
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <HAL_UART_MspInit+0x84>)
 8003444:	f001 fdde 	bl	8005004 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003448:	bf00      	nop
 800344a:	3728      	adds	r7, #40	; 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40004800 	.word	0x40004800
 8003454:	40023800 	.word	0x40023800
 8003458:	40020400 	.word	0x40020400

0800345c <Reset_Handler>:
 800345c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003494 <LoopFillZerobss+0x14>
 8003460:	2100      	movs	r1, #0
 8003462:	e003      	b.n	800346c <LoopCopyDataInit>

08003464 <CopyDataInit>:
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <LoopFillZerobss+0x18>)
 8003466:	585b      	ldr	r3, [r3, r1]
 8003468:	5043      	str	r3, [r0, r1]
 800346a:	3104      	adds	r1, #4

0800346c <LoopCopyDataInit>:
 800346c:	480b      	ldr	r0, [pc, #44]	; (800349c <LoopFillZerobss+0x1c>)
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <LoopFillZerobss+0x20>)
 8003470:	1842      	adds	r2, r0, r1
 8003472:	429a      	cmp	r2, r3
 8003474:	d3f6      	bcc.n	8003464 <CopyDataInit>
 8003476:	4a0b      	ldr	r2, [pc, #44]	; (80034a4 <LoopFillZerobss+0x24>)
 8003478:	e002      	b.n	8003480 <LoopFillZerobss>

0800347a <FillZerobss>:
 800347a:	2300      	movs	r3, #0
 800347c:	f842 3b04 	str.w	r3, [r2], #4

08003480 <LoopFillZerobss>:
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <LoopFillZerobss+0x28>)
 8003482:	429a      	cmp	r2, r3
 8003484:	d3f9      	bcc.n	800347a <FillZerobss>
 8003486:	f7ff ff5f 	bl	8003348 <SystemInit>
 800348a:	f007 fcb5 	bl	800adf8 <__libc_init_array>
 800348e:	f7ff fc81 	bl	8002d94 <main>
 8003492:	4770      	bx	lr
 8003494:	20080000 	.word	0x20080000
 8003498:	0800b9fc 	.word	0x0800b9fc
 800349c:	20000000 	.word	0x20000000
 80034a0:	200000a4 	.word	0x200000a4
 80034a4:	200000a4 	.word	0x200000a4
 80034a8:	20004d00 	.word	0x20004d00

080034ac <ADC_IRQHandler>:
 80034ac:	e7fe      	b.n	80034ac <ADC_IRQHandler>

080034ae <HAL_Init>:
 80034ae:	b580      	push	{r7, lr}
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	2003      	movs	r0, #3
 80034b4:	f001 f9fb 	bl	80048ae <HAL_NVIC_SetPriorityGrouping>
 80034b8:	2000      	movs	r0, #0
 80034ba:	f7ff fe57 	bl	800316c <HAL_InitTick>
 80034be:	f7ff fe31 	bl	8003124 <HAL_MspInit>
 80034c2:	2300      	movs	r3, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_IncTick>:
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_IncTick+0x20>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_IncTick+0x24>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_IncTick+0x24>)
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000038 	.word	0x20000038
 80034ec:	20004cb8 	.word	0x20004cb8

080034f0 <HAL_GetTick>:
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_GetTick+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20004cb8 	.word	0x20004cb8

08003508 <HAL_ADC_Init>:
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_ADC_Init+0x16>
 800351a:	2301      	movs	r3, #1
 800351c:	e031      	b.n	8003582 <HAL_ADC_Init+0x7a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_ADC_Init+0x32>
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff f8aa 	bl	8002680 <HAL_ADC_MspInit>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <HAL_ADC_Init+0x6c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_ADC_Init+0x84>)
 800354c:	4013      	ands	r3, r2
 800354e:	f043 0202 	orr.w	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fb3e 	bl	8003bd8 <ADC_Init>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f023 0303 	bic.w	r3, r3, #3
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
 8003572:	e001      	b.n	8003578 <HAL_ADC_Init+0x70>
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	ffffeefd 	.word	0xffffeefd

08003590 <HAL_ADC_Start>:
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_Start+0x1a>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e0a0      	b.n	80036ec <HAL_ADC_Start+0x15c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d018      	beq.n	80035f2 <HAL_ADC_Start+0x62>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <HAL_ADC_Start+0x168>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a49      	ldr	r2, [pc, #292]	; (80036fc <HAL_ADC_Start+0x16c>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0c9a      	lsrs	r2, r3, #18
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e002      	b.n	80035ec <HAL_ADC_Start+0x5c>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f9      	bne.n	80035e6 <HAL_ADC_Start+0x56>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d174      	bne.n	80036ea <HAL_ADC_Start+0x15a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003604:	4b3e      	ldr	r3, [pc, #248]	; (8003700 <HAL_ADC_Start+0x170>)
 8003606:	4013      	ands	r3, r2
 8003608:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_ADC_Start+0x9e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003626:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363a:	d106      	bne.n	800364a <HAL_ADC_Start+0xba>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	f023 0206 	bic.w	r2, r3, #6
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	645a      	str	r2, [r3, #68]	; 0x44
 8003648:	e002      	b.n	8003650 <HAL_ADC_Start+0xc0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	4b28      	ldr	r3, [pc, #160]	; (8003704 <HAL_ADC_Start+0x174>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <HAL_ADC_Start+0xfe>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d136      	bne.n	80036ea <HAL_ADC_Start+0x15a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	e02d      	b.n	80036ea <HAL_ADC_Start+0x15a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_ADC_Start+0x178>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d10e      	bne.n	80036b6 <HAL_ADC_Start+0x126>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d107      	bne.n	80036b6 <HAL_ADC_Start+0x126>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <HAL_ADC_Start+0x174>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d113      	bne.n	80036ea <HAL_ADC_Start+0x15a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a11      	ldr	r2, [pc, #68]	; (800370c <HAL_ADC_Start+0x17c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10e      	bne.n	80036ea <HAL_ADC_Start+0x15a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <HAL_ADC_Start+0x15a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036e8:	609a      	str	r2, [r3, #8]
 80036ea:	2300      	movs	r3, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	20000030 	.word	0x20000030
 80036fc:	431bde83 	.word	0x431bde83
 8003700:	fffff8fe 	.word	0xfffff8fe
 8003704:	40012300 	.word	0x40012300
 8003708:	40012000 	.word	0x40012000
 800370c:	40012200 	.word	0x40012200

08003710 <HAL_ADC_Start_DMA>:
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_ADC_Start_DMA+0x1e>
 800372a:	2302      	movs	r3, #2
 800372c:	e0c7      	b.n	80038be <HAL_ADC_Start_DMA+0x1ae>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d018      	beq.n	8003776 <HAL_ADC_Start_DMA+0x66>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	4b5c      	ldr	r3, [pc, #368]	; (80038c8 <HAL_ADC_Start_DMA+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5c      	ldr	r2, [pc, #368]	; (80038cc <HAL_ADC_Start_DMA+0x1bc>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0c9a      	lsrs	r2, r3, #18
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e002      	b.n	8003770 <HAL_ADC_Start_DMA+0x60>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	3b01      	subs	r3, #1
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f9      	bne.n	800376a <HAL_ADC_Start_DMA+0x5a>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	f040 809b 	bne.w	80038bc <HAL_ADC_Start_DMA+0x1ac>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378a:	4b51      	ldr	r3, [pc, #324]	; (80038d0 <HAL_ADC_Start_DMA+0x1c0>)
 800378c:	4013      	ands	r3, r2
 800378e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <HAL_ADC_Start_DMA+0xa4>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c0:	d106      	bne.n	80037d0 <HAL_ADC_Start_DMA+0xc0>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f023 0206 	bic.w	r2, r3, #6
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
 80037ce:	e002      	b.n	80037d6 <HAL_ADC_Start_DMA+0xc6>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	4a3c      	ldr	r2, [pc, #240]	; (80038d4 <HAL_ADC_Start_DMA+0x1c4>)
 80037e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	4a3b      	ldr	r2, [pc, #236]	; (80038d8 <HAL_ADC_Start_DMA+0x1c8>)
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4a3a      	ldr	r2, [pc, #232]	; (80038dc <HAL_ADC_Start_DMA+0x1cc>)
 80037f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	334c      	adds	r3, #76	; 0x4c
 800382a:	4619      	mov	r1, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f001 f920 	bl	8004a74 <HAL_DMA_Start_IT>
 8003834:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_ADC_Start_DMA+0x1d0>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10f      	bne.n	8003860 <HAL_ADC_Start_DMA+0x150>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d136      	bne.n	80038bc <HAL_ADC_Start_DMA+0x1ac>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	e02d      	b.n	80038bc <HAL_ADC_Start_DMA+0x1ac>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <HAL_ADC_Start_DMA+0x1d4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10e      	bne.n	8003888 <HAL_ADC_Start_DMA+0x178>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d107      	bne.n	8003888 <HAL_ADC_Start_DMA+0x178>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_ADC_Start_DMA+0x1d0>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d113      	bne.n	80038bc <HAL_ADC_Start_DMA+0x1ac>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <HAL_ADC_Start_DMA+0x1d8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10e      	bne.n	80038bc <HAL_ADC_Start_DMA+0x1ac>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <HAL_ADC_Start_DMA+0x1ac>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	2300      	movs	r3, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000030 	.word	0x20000030
 80038cc:	431bde83 	.word	0x431bde83
 80038d0:	fffff8fe 	.word	0xfffff8fe
 80038d4:	08003dcd 	.word	0x08003dcd
 80038d8:	08003e87 	.word	0x08003e87
 80038dc:	08003ea3 	.word	0x08003ea3
 80038e0:	40012300 	.word	0x40012300
 80038e4:	40012000 	.word	0x40012000
 80038e8:	40012200 	.word	0x40012200

080038ec <HAL_ADC_GetValue>:
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_ADC_ConvCpltCallback>:
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_ADC_ConvHalfCpltCallback>:
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_ADC_ErrorCallback>:
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <HAL_ADC_ConfigChannel>:
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x1c>
 800395c:	2302      	movs	r3, #2
 800395e:	e12a      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x272>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b09      	cmp	r3, #9
 800396e:	d93a      	bls.n	80039e6 <HAL_ADC_ConfigChannel+0xa2>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003978:	d035      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0xa2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68d9      	ldr	r1, [r3, #12]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	3b1e      	subs	r3, #30
 8003990:	2207      	movs	r2, #7
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	400a      	ands	r2, r1
 800399e:	60da      	str	r2, [r3, #12]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a87      	ldr	r2, [pc, #540]	; (8003bc4 <HAL_ADC_ConfigChannel+0x280>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d10a      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x7c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68d9      	ldr	r1, [r3, #12]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	061a      	lsls	r2, r3, #24
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	e035      	b.n	8003a2c <HAL_ADC_ConfigChannel+0xe8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	4618      	mov	r0, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4403      	add	r3, r0
 80039d8:	3b1e      	subs	r3, #30
 80039da:	409a      	lsls	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	e022      	b.n	8003a2c <HAL_ADC_ConfigChannel+0xe8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6919      	ldr	r1, [r3, #16]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	2207      	movs	r2, #7
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43da      	mvns	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	400a      	ands	r2, r1
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6919      	ldr	r1, [r3, #16]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4403      	add	r3, r0
 8003a22:	409a      	lsls	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	611a      	str	r2, [r3, #16]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d824      	bhi.n	8003a7e <HAL_ADC_ConfigChannel+0x13a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	3b05      	subs	r3, #5
 8003a46:	221f      	movs	r2, #31
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43da      	mvns	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	400a      	ands	r2, r1
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3b05      	subs	r3, #5
 8003a70:	fa00 f203 	lsl.w	r2, r0, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a7c:	e04c      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x1d4>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d824      	bhi.n	8003ad0 <HAL_ADC_ConfigChannel+0x18c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	3b23      	subs	r3, #35	; 0x23
 8003a98:	221f      	movs	r2, #31
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	3b23      	subs	r3, #35	; 0x23
 8003ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
 8003ace:	e023      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x1d4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	3b41      	subs	r3, #65	; 0x41
 8003ae2:	221f      	movs	r2, #31
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	400a      	ands	r2, r1
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4618      	mov	r0, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	3b41      	subs	r3, #65	; 0x41
 8003b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <HAL_ADC_ConfigChannel+0x284>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10a      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1f4>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2a:	d105      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1f4>
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <HAL_ADC_ConfigChannel+0x288>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <HAL_ADC_ConfigChannel+0x288>)
 8003b32:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b36:	6053      	str	r3, [r2, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <HAL_ADC_ConfigChannel+0x284>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d109      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x212>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b12      	cmp	r3, #18
 8003b48:	d105      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x212>
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_ADC_ConfigChannel+0x288>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_ADC_ConfigChannel+0x288>)
 8003b50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b54:	6053      	str	r3, [r2, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <HAL_ADC_ConfigChannel+0x284>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d125      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x268>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <HAL_ADC_ConfigChannel+0x280>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x22e>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b11      	cmp	r3, #17
 8003b70:	d11c      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x268>
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <HAL_ADC_ConfigChannel+0x288>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <HAL_ADC_ConfigChannel+0x288>)
 8003b78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b7c:	6053      	str	r3, [r2, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <HAL_ADC_ConfigChannel+0x280>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d111      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x268>
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <HAL_ADC_ConfigChannel+0x28c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a11      	ldr	r2, [pc, #68]	; (8003bd4 <HAL_ADC_ConfigChannel+0x290>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0c9a      	lsrs	r2, r3, #18
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x262>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f9      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x25c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	10000012 	.word	0x10000012
 8003bc8:	40012000 	.word	0x40012000
 8003bcc:	40012300 	.word	0x40012300
 8003bd0:	20000030 	.word	0x20000030
 8003bd4:	431bde83 	.word	0x431bde83

08003bd8 <ADC_Init>:
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	4b78      	ldr	r3, [pc, #480]	; (8003dc4 <ADC_Init+0x1ec>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a77      	ldr	r2, [pc, #476]	; (8003dc4 <ADC_Init+0x1ec>)
 8003be6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003bea:	6053      	str	r3, [r2, #4]
 8003bec:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <ADC_Init+0x1ec>)
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4973      	ldr	r1, [pc, #460]	; (8003dc4 <ADC_Init+0x1ec>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	021a      	lsls	r2, r3, #8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6899      	ldr	r1, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	4a58      	ldr	r2, [pc, #352]	; (8003dc8 <ADC_Init+0x1f0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <ADC_Init+0xda>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c9c:	609a      	str	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6899      	ldr	r1, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	e00f      	b.n	8003cd2 <ADC_Init+0xfa>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0202 	bic.w	r2, r2, #2
 8003ce0:	609a      	str	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6899      	ldr	r1, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	005a      	lsls	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	609a      	str	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01b      	beq.n	8003d38 <ADC_Init+0x160>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0e:	605a      	str	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d1e:	605a      	str	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	035a      	lsls	r2, r3, #13
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	e007      	b.n	8003d48 <ADC_Init+0x170>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	051a      	lsls	r2, r3, #20
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6899      	ldr	r1, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d8a:	025a      	lsls	r2, r3, #9
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	029a      	lsls	r2, r3, #10
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40012300 	.word	0x40012300
 8003dc8:	0f000001 	.word	0x0f000001

08003dcc <ADC_DMAConvCplt>:
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d13c      	bne.n	8003e60 <ADC_DMAConvCplt+0x94>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d12b      	bne.n	8003e58 <ADC_DMAConvCplt+0x8c>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d127      	bne.n	8003e58 <ADC_DMAConvCplt+0x8c>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d006      	beq.n	8003e24 <ADC_DMAConvCplt+0x58>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d119      	bne.n	8003e58 <ADC_DMAConvCplt+0x8c>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0220 	bic.w	r2, r2, #32
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <ADC_DMAConvCplt+0x8c>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff fd54 	bl	8003906 <HAL_ADC_ConvCpltCallback>
 8003e5e:	e00e      	b.n	8003e7e <ADC_DMAConvCplt+0xb2>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <ADC_DMAConvCplt+0xa8>
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff fd5e 	bl	800392e <HAL_ADC_ErrorCallback>
 8003e72:	e004      	b.n	8003e7e <ADC_DMAConvCplt+0xb2>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <ADC_DMAHalfConvCplt>:
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff fd40 	bl	800391a <HAL_ADC_ConvHalfCpltCallback>
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <ADC_DMAError>:
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2240      	movs	r2, #64	; 0x40
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f043 0204 	orr.w	r2, r3, #4
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff fd33 	bl	800392e <HAL_ADC_ErrorCallback>
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_CAN_Init>:
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_CAN_Init+0x12>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0ed      	b.n	80040be <HAL_CAN_Init+0x1ee>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <HAL_CAN_Init+0x24>
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe fd82 	bl	80029f8 <HAL_CAN_MspInit>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0202 	bic.w	r2, r2, #2
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	f7ff faf4 	bl	80034f0 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	e012      	b.n	8003f32 <HAL_CAN_Init+0x62>
 8003f0c:	f7ff faf0 	bl	80034f0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b0a      	cmp	r3, #10
 8003f18:	d90b      	bls.n	8003f32 <HAL_CAN_Init+0x62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2205      	movs	r2, #5
 8003f2a:	f883 2020 	strb.w	r2, [r3, #32]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0c5      	b.n	80040be <HAL_CAN_Init+0x1ee>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <HAL_CAN_Init+0x3c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f7ff face 	bl	80034f0 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	e012      	b.n	8003f7e <HAL_CAN_Init+0xae>
 8003f58:	f7ff faca 	bl	80034f0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	d90b      	bls.n	8003f7e <HAL_CAN_Init+0xae>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2205      	movs	r2, #5
 8003f76:	f883 2020 	strb.w	r2, [r3, #32]
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e09f      	b.n	80040be <HAL_CAN_Init+0x1ee>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0e5      	beq.n	8003f58 <HAL_CAN_Init+0x88>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	7e1b      	ldrb	r3, [r3, #24]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d108      	bne.n	8003fa6 <HAL_CAN_Init+0xd6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e007      	b.n	8003fb6 <HAL_CAN_Init+0xe6>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	7e5b      	ldrb	r3, [r3, #25]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_CAN_Init+0x100>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e007      	b.n	8003fe0 <HAL_CAN_Init+0x110>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7e9b      	ldrb	r3, [r3, #26]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d108      	bne.n	8003ffa <HAL_CAN_Init+0x12a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0220 	orr.w	r2, r2, #32
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e007      	b.n	800400a <HAL_CAN_Init+0x13a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0220 	bic.w	r2, r2, #32
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7edb      	ldrb	r3, [r3, #27]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d108      	bne.n	8004024 <HAL_CAN_Init+0x154>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0210 	bic.w	r2, r2, #16
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e007      	b.n	8004034 <HAL_CAN_Init+0x164>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0210 	orr.w	r2, r2, #16
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	7f1b      	ldrb	r3, [r3, #28]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d108      	bne.n	800404e <HAL_CAN_Init+0x17e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0208 	orr.w	r2, r2, #8
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e007      	b.n	800405e <HAL_CAN_Init+0x18e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0208 	bic.w	r2, r2, #8
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	7f5b      	ldrb	r3, [r3, #29]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d108      	bne.n	8004078 <HAL_CAN_Init+0x1a8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0204 	orr.w	r2, r2, #4
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e007      	b.n	8004088 <HAL_CAN_Init+0x1b8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	ea42 0103 	orr.w	r1, r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	1e5a      	subs	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	61da      	str	r2, [r3, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2020 	strb.w	r2, [r3, #32]
 80040bc:	2300      	movs	r3, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_CAN_ConfigFilter>:
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040de:	74fb      	strb	r3, [r7, #19]
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d003      	beq.n	80040ee <HAL_CAN_ConfigFilter+0x26>
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	f040 80c7 	bne.w	800427c <HAL_CAN_ConfigFilter+0x1b4>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a69      	ldr	r2, [pc, #420]	; (8004298 <HAL_CAN_ConfigFilter+0x1d0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d001      	beq.n	80040fc <HAL_CAN_ConfigFilter+0x34>
 80040f8:	4b68      	ldr	r3, [pc, #416]	; (800429c <HAL_CAN_ConfigFilter+0x1d4>)
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004102:	f043 0201 	orr.w	r2, r3, #1
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4a63      	ldr	r2, [pc, #396]	; (800429c <HAL_CAN_ConfigFilter+0x1d4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d111      	bne.n	8004138 <HAL_CAN_ConfigFilter+0x70>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800411a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	431a      	orrs	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2201      	movs	r2, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	401a      	ands	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d123      	bne.n	80041aa <HAL_CAN_ConfigFilter+0xe2>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	43db      	mvns	r3, r3
 800416c:	401a      	ands	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	0419      	lsls	r1, r3, #16
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b29b      	uxth	r3, r3
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	6952      	ldr	r2, [r2, #20]
 8004184:	4319      	orrs	r1, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	3248      	adds	r2, #72	; 0x48
 800418a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0419      	lsls	r1, r3, #16
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	b29a      	uxth	r2, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	430a      	orrs	r2, r1
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	3348      	adds	r3, #72	; 0x48
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	440b      	add	r3, r1
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d122      	bne.n	80041f8 <HAL_CAN_ConfigFilter+0x130>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0419      	lsls	r1, r3, #16
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	6952      	ldr	r2, [r2, #20]
 80041d2:	4319      	orrs	r1, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3248      	adds	r2, #72	; 0x48
 80041d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	0419      	lsls	r1, r3, #16
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	6979      	ldr	r1, [r7, #20]
 80041f0:	3348      	adds	r3, #72	; 0x48
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	440b      	add	r3, r1
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_CAN_ConfigFilter+0x14c>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	43db      	mvns	r3, r3
 800420a:	401a      	ands	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004212:	e007      	b.n	8004224 <HAL_CAN_ConfigFilter+0x15c>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	431a      	orrs	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_CAN_ConfigFilter+0x178>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	43db      	mvns	r3, r3
 8004236:	401a      	ands	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800423e:	e007      	b.n	8004250 <HAL_CAN_ConfigFilter+0x188>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	431a      	orrs	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <HAL_CAN_ConfigFilter+0x1a0>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	431a      	orrs	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800426e:	f023 0201 	bic.w	r2, r3, #1
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004278:	2300      	movs	r3, #0
 800427a:	e006      	b.n	800428a <HAL_CAN_ConfigFilter+0x1c2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24
 8004288:	2301      	movs	r3, #1
 800428a:	4618      	mov	r0, r3
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40003400 	.word	0x40003400
 800429c:	40006400 	.word	0x40006400

080042a0 <HAL_CAN_Start>:
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d12e      	bne.n	8004312 <HAL_CAN_Start+0x72>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2020 	strb.w	r2, [r3, #32]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f7ff f910 	bl	80034f0 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	e012      	b.n	80042fa <HAL_CAN_Start+0x5a>
 80042d4:	f7ff f90c 	bl	80034f0 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b0a      	cmp	r3, #10
 80042e0:	d90b      	bls.n	80042fa <HAL_CAN_Start+0x5a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2205      	movs	r2, #5
 80042f2:	f883 2020 	strb.w	r2, [r3, #32]
 80042f6:	2301      	movs	r3, #1
 80042f8:	e012      	b.n	8004320 <HAL_CAN_Start+0x80>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <HAL_CAN_Start+0x34>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	625a      	str	r2, [r3, #36]	; 0x24
 800430e:	2300      	movs	r3, #0
 8004310:	e006      	b.n	8004320 <HAL_CAN_Start+0x80>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24
 800431e:	2301      	movs	r3, #1
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_CAN_AddTxMessage>:
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	; 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	7ffb      	ldrb	r3, [r7, #31]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d003      	beq.n	8004354 <HAL_CAN_AddTxMessage+0x2c>
 800434c:	7ffb      	ldrb	r3, [r7, #31]
 800434e:	2b02      	cmp	r3, #2
 8004350:	f040 80b8 	bne.w	80044c4 <HAL_CAN_AddTxMessage+0x19c>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <HAL_CAN_AddTxMessage+0x4c>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_CAN_AddTxMessage+0x4c>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80a0 	beq.w	80044b4 <HAL_CAN_AddTxMessage+0x18c>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	0e1b      	lsrs	r3, r3, #24
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d907      	bls.n	8004394 <HAL_CAN_AddTxMessage+0x6c>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24
 8004390:	2301      	movs	r3, #1
 8004392:	e09e      	b.n	80044d2 <HAL_CAN_AddTxMessage+0x1aa>
 8004394:	2201      	movs	r2, #1
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	409a      	lsls	r2, r3
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10d      	bne.n	80043c2 <HAL_CAN_AddTxMessage+0x9a>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	055a      	lsls	r2, r3, #21
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68f9      	ldr	r1, [r7, #12]
 80043b2:	6809      	ldr	r1, [r1, #0]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	3318      	adds	r3, #24
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	440b      	add	r3, r1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e00f      	b.n	80043e2 <HAL_CAN_AddTxMessage+0xba>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	00da      	lsls	r2, r3, #3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68f9      	ldr	r1, [r7, #12]
 80043d4:	6809      	ldr	r1, [r1, #0]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3318      	adds	r3, #24
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	440b      	add	r3, r1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6819      	ldr	r1, [r3, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	3318      	adds	r3, #24
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	440b      	add	r3, r1
 80043f2:	3304      	adds	r3, #4
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	7d1b      	ldrb	r3, [r3, #20]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d111      	bne.n	8004422 <HAL_CAN_AddTxMessage+0xfa>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	3318      	adds	r3, #24
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	4413      	add	r3, r2
 800440a:	3304      	adds	r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	6811      	ldr	r1, [r2, #0]
 8004412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	3318      	adds	r3, #24
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	440b      	add	r3, r1
 800441e:	3304      	adds	r3, #4
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3307      	adds	r3, #7
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	061a      	lsls	r2, r3, #24
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3306      	adds	r3, #6
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3305      	adds	r3, #5
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	4313      	orrs	r3, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	3204      	adds	r2, #4
 8004442:	7812      	ldrb	r2, [r2, #0]
 8004444:	4610      	mov	r0, r2
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	6811      	ldr	r1, [r2, #0]
 800444a:	ea43 0200 	orr.w	r2, r3, r0
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	440b      	add	r3, r1
 8004454:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3303      	adds	r3, #3
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	061a      	lsls	r2, r3, #24
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3302      	adds	r3, #2
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3301      	adds	r3, #1
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	4313      	orrs	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	4610      	mov	r0, r2
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	6811      	ldr	r1, [r2, #0]
 8004480:	ea43 0200 	orr.w	r2, r3, r0
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	440b      	add	r3, r1
 800448a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3318      	adds	r3, #24
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	4413      	add	r3, r2
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	6811      	ldr	r1, [r2, #0]
 80044a2:	f043 0201 	orr.w	r2, r3, #1
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	3318      	adds	r3, #24
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	440b      	add	r3, r1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	2300      	movs	r3, #0
 80044b2:	e00e      	b.n	80044d2 <HAL_CAN_AddTxMessage+0x1aa>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
 80044c0:	2301      	movs	r3, #1
 80044c2:	e006      	b.n	80044d2 <HAL_CAN_AddTxMessage+0x1aa>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
 80044d0:	2301      	movs	r3, #1
 80044d2:	4618      	mov	r0, r3
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_CAN_GetRxMessage>:
 80044de:	b480      	push	{r7}
 80044e0:	b087      	sub	sp, #28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044f2:	75fb      	strb	r3, [r7, #23]
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d003      	beq.n	8004502 <HAL_CAN_GetRxMessage+0x24>
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f040 80f3 	bne.w	80046e8 <HAL_CAN_GetRxMessage+0x20a>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10e      	bne.n	8004526 <HAL_CAN_GetRxMessage+0x48>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d116      	bne.n	8004544 <HAL_CAN_GetRxMessage+0x66>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24
 8004522:	2301      	movs	r3, #1
 8004524:	e0e7      	b.n	80046f6 <HAL_CAN_GetRxMessage+0x218>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <HAL_CAN_GetRxMessage+0x66>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
 8004540:	2301      	movs	r3, #1
 8004542:	e0d8      	b.n	80046f6 <HAL_CAN_GetRxMessage+0x218>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	331b      	adds	r3, #27
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	4413      	add	r3, r2
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0204 	and.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10c      	bne.n	800457c <HAL_CAN_GetRxMessage+0x9e>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	331b      	adds	r3, #27
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	4413      	add	r3, r2
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0d5b      	lsrs	r3, r3, #21
 8004572:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	e00b      	b.n	8004594 <HAL_CAN_GetRxMessage+0xb6>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	331b      	adds	r3, #27
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	4413      	add	r3, r2
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	08db      	lsrs	r3, r3, #3
 800458c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	331b      	adds	r3, #27
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	4413      	add	r3, r2
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0202 	and.w	r2, r3, #2
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	331b      	adds	r3, #27
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	4413      	add	r3, r2
 80045b6:	3304      	adds	r3, #4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 020f 	and.w	r2, r3, #15
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	611a      	str	r2, [r3, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	331b      	adds	r3, #27
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	4413      	add	r3, r2
 80045ce:	3304      	adds	r3, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	619a      	str	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	331b      	adds	r3, #27
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	4413      	add	r3, r2
 80045e6:	3304      	adds	r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	615a      	str	r2, [r3, #20]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4413      	add	r3, r2
 8004612:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	0a1a      	lsrs	r2, r3, #8
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	4413      	add	r3, r2
 800462c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	0c1a      	lsrs	r2, r3, #16
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	3302      	adds	r3, #2
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	4413      	add	r3, r2
 8004646:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	0e1a      	lsrs	r2, r3, #24
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	3303      	adds	r3, #3
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	4413      	add	r3, r2
 8004660:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	3304      	adds	r3, #4
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	4413      	add	r3, r2
 8004678:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	0a1a      	lsrs	r2, r3, #8
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	3305      	adds	r3, #5
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	4413      	add	r3, r2
 8004692:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	0c1a      	lsrs	r2, r3, #16
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	3306      	adds	r3, #6
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	0e1a      	lsrs	r2, r3, #24
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	3307      	adds	r3, #7
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <HAL_CAN_GetRxMessage+0x1f6>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0220 	orr.w	r2, r2, #32
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e007      	b.n	80046e4 <HAL_CAN_GetRxMessage+0x206>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0220 	orr.w	r2, r2, #32
 80046e2:	611a      	str	r2, [r3, #16]
 80046e4:	2300      	movs	r3, #0
 80046e6:	e006      	b.n	80046f6 <HAL_CAN_GetRxMessage+0x218>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24
 80046f4:	2301      	movs	r3, #1
 80046f6:	4618      	mov	r0, r3
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_CAN_GetRxFifoFillLevel>:
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004716:	72fb      	strb	r3, [r7, #11]
 8004718:	7afb      	ldrb	r3, [r7, #11]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d002      	beq.n	8004724 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800471e:	7afb      	ldrb	r3, [r7, #11]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d10f      	bne.n	8004744 <HAL_CAN_GetRxFifoFillLevel+0x42>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_CAN_GetRxFifoFillLevel+0x36>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e005      	b.n	8004744 <HAL_CAN_GetRxFifoFillLevel+0x42>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <__NVIC_SetPriorityGrouping>:
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <__NVIC_SetPriorityGrouping+0x40>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004770:	4013      	ands	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	431a      	orrs	r2, r3
 800477c:	4b06      	ldr	r3, [pc, #24]	; (8004798 <__NVIC_SetPriorityGrouping+0x44>)
 800477e:	4313      	orrs	r3, r2
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	4a04      	ldr	r2, [pc, #16]	; (8004794 <__NVIC_SetPriorityGrouping+0x40>)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	60d3      	str	r3, [r2, #12]
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	e000ed00 	.word	0xe000ed00
 8004798:	05fa0000 	.word	0x05fa0000

0800479c <__NVIC_GetPriorityGrouping>:
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
 80047a0:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <__NVIC_GetPriorityGrouping+0x18>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	4618      	mov	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	e000ed00 	.word	0xe000ed00

080047b8 <__NVIC_EnableIRQ>:
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
 80047c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	db0b      	blt.n	80047e2 <__NVIC_EnableIRQ+0x2a>
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	f003 021f 	and.w	r2, r3, #31
 80047d0:	4907      	ldr	r1, [pc, #28]	; (80047f0 <__NVIC_EnableIRQ+0x38>)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	2001      	movs	r0, #1
 80047da:	fa00 f202 	lsl.w	r2, r0, r2
 80047de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000e100 	.word	0xe000e100

080047f4 <__NVIC_SetPriority>:
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	71fb      	strb	r3, [r7, #7]
 8004800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004804:	2b00      	cmp	r3, #0
 8004806:	db0a      	blt.n	800481e <__NVIC_SetPriority+0x2a>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	490c      	ldr	r1, [pc, #48]	; (8004840 <__NVIC_SetPriority+0x4c>)
 800480e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004812:	0112      	lsls	r2, r2, #4
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	440b      	add	r3, r1
 8004818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800481c:	e00a      	b.n	8004834 <__NVIC_SetPriority+0x40>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	4908      	ldr	r1, [pc, #32]	; (8004844 <__NVIC_SetPriority+0x50>)
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	3b04      	subs	r3, #4
 800482c:	0112      	lsls	r2, r2, #4
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	440b      	add	r3, r1
 8004832:	761a      	strb	r2, [r3, #24]
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000e100 	.word	0xe000e100
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <NVIC_EncodePriority>:
 8004848:	b480      	push	{r7}
 800484a:	b089      	sub	sp, #36	; 0x24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f1c3 0307 	rsb	r3, r3, #7
 8004862:	2b04      	cmp	r3, #4
 8004864:	bf28      	it	cs
 8004866:	2304      	movcs	r3, #4
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3304      	adds	r3, #4
 800486e:	2b06      	cmp	r3, #6
 8004870:	d902      	bls.n	8004878 <NVIC_EncodePriority+0x30>
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3b03      	subs	r3, #3
 8004876:	e000      	b.n	800487a <NVIC_EncodePriority+0x32>
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43da      	mvns	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	401a      	ands	r2, r3
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	409a      	lsls	r2, r3
 8004890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	fa01 f303 	lsl.w	r3, r1, r3
 800489a:	43d9      	mvns	r1, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	400b      	ands	r3, r1
 80048a0:	4313      	orrs	r3, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	3724      	adds	r7, #36	; 0x24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_NVIC_SetPriorityGrouping>:
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff4c 	bl	8004754 <__NVIC_SetPriorityGrouping>
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_NVIC_SetPriority>:
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	73fb      	strb	r3, [r7, #15]
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	f7ff ff61 	bl	800479c <__NVIC_GetPriorityGrouping>
 80048da:	6178      	str	r0, [r7, #20]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	6978      	ldr	r0, [r7, #20]
 80048e2:	f7ff ffb1 	bl	8004848 <NVIC_EncodePriority>
 80048e6:	4602      	mov	r2, r0
 80048e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ec:	4611      	mov	r1, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff ff80 	bl	80047f4 <__NVIC_SetPriority>
 80048f4:	bf00      	nop
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_NVIC_EnableIRQ>:
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ff54 	bl	80047b8 <__NVIC_EnableIRQ>
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_DMA_Init>:
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	f7fe fde4 	bl	80034f0 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_DMA_Init+0x1c>
 8004930:	2301      	movs	r3, #1
 8004932:	e099      	b.n	8004a68 <HAL_DMA_Init+0x150>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e00f      	b.n	8004976 <HAL_DMA_Init+0x5e>
 8004956:	f7fe fdcb 	bl	80034f0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b05      	cmp	r3, #5
 8004962:	d908      	bls.n	8004976 <HAL_DMA_Init+0x5e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2203      	movs	r2, #3
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004972:	2303      	movs	r3, #3
 8004974:	e078      	b.n	8004a68 <HAL_DMA_Init+0x150>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e8      	bne.n	8004956 <HAL_DMA_Init+0x3e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <HAL_DMA_Init+0x158>)
 8004990:	4013      	ands	r3, r2
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d107      	bne.n	80049e0 <HAL_DMA_Init+0xc8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	4313      	orrs	r3, r2
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d117      	bne.n	8004a3a <HAL_DMA_Init+0x122>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <HAL_DMA_Init+0x122>
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fa77 	bl	8004f10 <DMA_CheckFifoParam>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_DMA_Init+0x122>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2240      	movs	r2, #64	; 0x40
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a36:	2301      	movs	r3, #1
 8004a38:	e016      	b.n	8004a68 <HAL_DMA_Init+0x150>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	615a      	str	r2, [r3, #20]
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fa2e 	bl	8004ea4 <DMA_CalcBaseAndBitshift>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a50:	223f      	movs	r2, #63	; 0x3f
 8004a52:	409a      	lsls	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a66:	2300      	movs	r3, #0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	e010803f 	.word	0xe010803f

08004a74 <HAL_DMA_Start_IT>:
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	2300      	movs	r3, #0
 8004a84:	75fb      	strb	r3, [r7, #23]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_DMA_Start_IT+0x26>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e048      	b.n	8004b2c <HAL_DMA_Start_IT+0xb8>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d137      	bne.n	8004b1e <HAL_DMA_Start_IT+0xaa>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	655a      	str	r2, [r3, #84]	; 0x54
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f9c0 	bl	8004e48 <DMA_SetConfig>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	223f      	movs	r2, #63	; 0x3f
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0216 	orr.w	r2, r2, #22
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004af2:	615a      	str	r2, [r3, #20]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <HAL_DMA_Start_IT+0x98>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0208 	orr.w	r2, r2, #8
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e005      	b.n	8004b2a <HAL_DMA_Start_IT+0xb6>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004b26:	2302      	movs	r3, #2
 8004b28:	75fb      	strb	r3, [r7, #23]
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_DMA_IRQHandler>:
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	4b92      	ldr	r3, [pc, #584]	; (8004d8c <HAL_DMA_IRQHandler+0x258>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a92      	ldr	r2, [pc, #584]	; (8004d90 <HAL_DMA_IRQHandler+0x25c>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	0a9b      	lsrs	r3, r3, #10
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5e:	2208      	movs	r2, #8
 8004b60:	409a      	lsls	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01a      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x6c>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d013      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x6c>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0204 	bic.w	r2, r2, #4
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f043 0201 	orr.w	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d012      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xa2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xa2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	f043 0202 	orr.w	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	2204      	movs	r2, #4
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d012      	beq.n	8004c0c <HAL_DMA_IRQHandler+0xd8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <HAL_DMA_IRQHandler+0xd8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c04:	f043 0204 	orr.w	r2, r3, #4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	2210      	movs	r2, #16
 8004c12:	409a      	lsls	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d043      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x170>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d03c      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x170>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	2210      	movs	r2, #16
 8004c30:	409a      	lsls	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	609a      	str	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d018      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x142>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <HAL_DMA_IRQHandler+0x130>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d024      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x170>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	4798      	blx	r3
 8004c62:	e01f      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x170>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01b      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x170>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
 8004c74:	e016      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x170>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d107      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x160>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0208 	bic.w	r2, r2, #8
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x170>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca8:	2220      	movs	r2, #32
 8004caa:	409a      	lsls	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 808e 	beq.w	8004dd2 <HAL_DMA_IRQHandler+0x29e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8086 	beq.w	8004dd2 <HAL_DMA_IRQHandler+0x29e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cca:	2220      	movs	r2, #32
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	609a      	str	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d136      	bne.n	8004d4c <HAL_DMA_IRQHandler+0x218>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0216 	bic.w	r2, r2, #22
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cfc:	615a      	str	r2, [r3, #20]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <HAL_DMA_IRQHandler+0x1da>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x1ea>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0208 	bic.w	r2, r2, #8
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d22:	223f      	movs	r2, #63	; 0x3f
 8004d24:	409a      	lsls	r2, r3
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	609a      	str	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d07d      	beq.n	8004e3e <HAL_DMA_IRQHandler+0x30a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
 8004d4a:	e078      	b.n	8004e3e <HAL_DMA_IRQHandler+0x30a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d01c      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x260>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d108      	bne.n	8004d7a <HAL_DMA_IRQHandler+0x246>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d030      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x29e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
 8004d78:	e02b      	b.n	8004dd2 <HAL_DMA_IRQHandler+0x29e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d027      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x29e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
 8004d8a:	e022      	b.n	8004dd2 <HAL_DMA_IRQHandler+0x29e>
 8004d8c:	20000030 	.word	0x20000030
 8004d90:	1b4e81b5 	.word	0x1b4e81b5
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10f      	bne.n	8004dc2 <HAL_DMA_IRQHandler+0x28e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0210 	bic.w	r2, r2, #16
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x29e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d032      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x30c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d022      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x2f8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2205      	movs	r2, #5
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d307      	bcc.n	8004e1a <HAL_DMA_IRQHandler+0x2e6>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f2      	bne.n	8004dfe <HAL_DMA_IRQHandler+0x2ca>
 8004e18:	e000      	b.n	8004e1c <HAL_DMA_IRQHandler+0x2e8>
 8004e1a:	bf00      	nop
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x30c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
 8004e3c:	e000      	b.n	8004e40 <HAL_DMA_IRQHandler+0x30c>
 8004e3e:	bf00      	nop
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop

08004e48 <DMA_SetConfig>:
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d108      	bne.n	8004e88 <DMA_SetConfig+0x40>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	e007      	b.n	8004e98 <DMA_SetConfig+0x50>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <DMA_CalcBaseAndBitshift>:
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	3b10      	subs	r3, #16
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <DMA_CalcBaseAndBitshift+0x60>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	4a12      	ldr	r2, [pc, #72]	; (8004f08 <DMA_CalcBaseAndBitshift+0x64>)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d908      	bls.n	8004ee4 <DMA_CalcBaseAndBitshift+0x40>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <DMA_CalcBaseAndBitshift+0x68>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	1d1a      	adds	r2, r3, #4
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	659a      	str	r2, [r3, #88]	; 0x58
 8004ee2:	e006      	b.n	8004ef2 <DMA_CalcBaseAndBitshift+0x4e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <DMA_CalcBaseAndBitshift+0x68>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	aaaaaaab 	.word	0xaaaaaaab
 8004f08:	0800b9b0 	.word	0x0800b9b0
 8004f0c:	fffffc00 	.word	0xfffffc00

08004f10 <DMA_CheckFifoParam>:
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	73fb      	strb	r3, [r7, #15]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d11f      	bne.n	8004f6a <DMA_CheckFifoParam+0x5a>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d855      	bhi.n	8004fdc <DMA_CheckFifoParam+0xcc>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <DMA_CheckFifoParam+0x28>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f5b 	.word	0x08004f5b
 8004f40:	08004f49 	.word	0x08004f49
 8004f44:	08004fdd 	.word	0x08004fdd
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d045      	beq.n	8004fe0 <DMA_CheckFifoParam+0xd0>
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	e042      	b.n	8004fe0 <DMA_CheckFifoParam+0xd0>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f62:	d13f      	bne.n	8004fe4 <DMA_CheckFifoParam+0xd4>
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	e03c      	b.n	8004fe4 <DMA_CheckFifoParam+0xd4>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f72:	d121      	bne.n	8004fb8 <DMA_CheckFifoParam+0xa8>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d836      	bhi.n	8004fe8 <DMA_CheckFifoParam+0xd8>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <DMA_CheckFifoParam+0x70>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004f91 	.word	0x08004f91
 8004f84:	08004f97 	.word	0x08004f97
 8004f88:	08004f91 	.word	0x08004f91
 8004f8c:	08004fa9 	.word	0x08004fa9
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
 8004f94:	e02f      	b.n	8004ff6 <DMA_CheckFifoParam+0xe6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d024      	beq.n	8004fec <DMA_CheckFifoParam+0xdc>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	e021      	b.n	8004fec <DMA_CheckFifoParam+0xdc>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fb0:	d11e      	bne.n	8004ff0 <DMA_CheckFifoParam+0xe0>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
 8004fb6:	e01b      	b.n	8004ff0 <DMA_CheckFifoParam+0xe0>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d902      	bls.n	8004fc4 <DMA_CheckFifoParam+0xb4>
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d003      	beq.n	8004fca <DMA_CheckFifoParam+0xba>
 8004fc2:	e018      	b.n	8004ff6 <DMA_CheckFifoParam+0xe6>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
 8004fc8:	e015      	b.n	8004ff6 <DMA_CheckFifoParam+0xe6>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <DMA_CheckFifoParam+0xe4>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
 8004fda:	e00b      	b.n	8004ff4 <DMA_CheckFifoParam+0xe4>
 8004fdc:	bf00      	nop
 8004fde:	e00a      	b.n	8004ff6 <DMA_CheckFifoParam+0xe6>
 8004fe0:	bf00      	nop
 8004fe2:	e008      	b.n	8004ff6 <DMA_CheckFifoParam+0xe6>
 8004fe4:	bf00      	nop
 8004fe6:	e006      	b.n	8004ff6 <DMA_CheckFifoParam+0xe6>
 8004fe8:	bf00      	nop
 8004fea:	e004      	b.n	8004ff6 <DMA_CheckFifoParam+0xe6>
 8004fec:	bf00      	nop
 8004fee:	e002      	b.n	8004ff6 <DMA_CheckFifoParam+0xe6>
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <DMA_CheckFifoParam+0xe6>
 8004ff4:	bf00      	nop
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_GPIO_Init>:
 8005004:	b480      	push	{r7}
 8005006:	b089      	sub	sp, #36	; 0x24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e175      	b.n	8005310 <HAL_GPIO_Init+0x30c>
 8005024:	2201      	movs	r2, #1
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	429a      	cmp	r2, r3
 800503e:	f040 8164 	bne.w	800530a <HAL_GPIO_Init+0x306>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d00b      	beq.n	8005062 <HAL_GPIO_Init+0x5e>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d007      	beq.n	8005062 <HAL_GPIO_Init+0x5e>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b11      	cmp	r3, #17
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_Init+0x5e>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b12      	cmp	r3, #18
 8005060:	d130      	bne.n	80050c4 <HAL_GPIO_Init+0xc0>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	2203      	movs	r2, #3
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	43db      	mvns	r3, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4013      	ands	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4313      	orrs	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	2201      	movs	r2, #1
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f003 0201 	and.w	r2, r3, #1
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	605a      	str	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	2203      	movs	r2, #3
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4013      	ands	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	60da      	str	r2, [r3, #12]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d003      	beq.n	8005104 <HAL_GPIO_Init+0x100>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b12      	cmp	r3, #18
 8005102:	d123      	bne.n	800514c <HAL_GPIO_Init+0x148>
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	08da      	lsrs	r2, r3, #3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3208      	adds	r2, #8
 800510c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	220f      	movs	r2, #15
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	08da      	lsrs	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3208      	adds	r2, #8
 8005146:	69b9      	ldr	r1, [r7, #24]
 8005148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2203      	movs	r2, #3
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 0203 	and.w	r2, r3, #3
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80be 	beq.w	800530a <HAL_GPIO_Init+0x306>
 800518e:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_GPIO_Init+0x320>)
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	4a64      	ldr	r2, [pc, #400]	; (8005324 <HAL_GPIO_Init+0x320>)
 8005194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005198:	6453      	str	r3, [r2, #68]	; 0x44
 800519a:	4b62      	ldr	r3, [pc, #392]	; (8005324 <HAL_GPIO_Init+0x320>)
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a60      	ldr	r2, [pc, #384]	; (8005328 <HAL_GPIO_Init+0x324>)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	089b      	lsrs	r3, r3, #2
 80051ac:	3302      	adds	r3, #2
 80051ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	220f      	movs	r2, #15
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43db      	mvns	r3, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4013      	ands	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a57      	ldr	r2, [pc, #348]	; (800532c <HAL_GPIO_Init+0x328>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d037      	beq.n	8005242 <HAL_GPIO_Init+0x23e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a56      	ldr	r2, [pc, #344]	; (8005330 <HAL_GPIO_Init+0x32c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d031      	beq.n	800523e <HAL_GPIO_Init+0x23a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a55      	ldr	r2, [pc, #340]	; (8005334 <HAL_GPIO_Init+0x330>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d02b      	beq.n	800523a <HAL_GPIO_Init+0x236>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a54      	ldr	r2, [pc, #336]	; (8005338 <HAL_GPIO_Init+0x334>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d025      	beq.n	8005236 <HAL_GPIO_Init+0x232>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a53      	ldr	r2, [pc, #332]	; (800533c <HAL_GPIO_Init+0x338>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01f      	beq.n	8005232 <HAL_GPIO_Init+0x22e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_GPIO_Init+0x33c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d019      	beq.n	800522e <HAL_GPIO_Init+0x22a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a51      	ldr	r2, [pc, #324]	; (8005344 <HAL_GPIO_Init+0x340>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_GPIO_Init+0x226>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a50      	ldr	r2, [pc, #320]	; (8005348 <HAL_GPIO_Init+0x344>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00d      	beq.n	8005226 <HAL_GPIO_Init+0x222>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a4f      	ldr	r2, [pc, #316]	; (800534c <HAL_GPIO_Init+0x348>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <HAL_GPIO_Init+0x21e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a4e      	ldr	r2, [pc, #312]	; (8005350 <HAL_GPIO_Init+0x34c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <HAL_GPIO_Init+0x21a>
 800521a:	2309      	movs	r3, #9
 800521c:	e012      	b.n	8005244 <HAL_GPIO_Init+0x240>
 800521e:	230a      	movs	r3, #10
 8005220:	e010      	b.n	8005244 <HAL_GPIO_Init+0x240>
 8005222:	2308      	movs	r3, #8
 8005224:	e00e      	b.n	8005244 <HAL_GPIO_Init+0x240>
 8005226:	2307      	movs	r3, #7
 8005228:	e00c      	b.n	8005244 <HAL_GPIO_Init+0x240>
 800522a:	2306      	movs	r3, #6
 800522c:	e00a      	b.n	8005244 <HAL_GPIO_Init+0x240>
 800522e:	2305      	movs	r3, #5
 8005230:	e008      	b.n	8005244 <HAL_GPIO_Init+0x240>
 8005232:	2304      	movs	r3, #4
 8005234:	e006      	b.n	8005244 <HAL_GPIO_Init+0x240>
 8005236:	2303      	movs	r3, #3
 8005238:	e004      	b.n	8005244 <HAL_GPIO_Init+0x240>
 800523a:	2302      	movs	r3, #2
 800523c:	e002      	b.n	8005244 <HAL_GPIO_Init+0x240>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_GPIO_Init+0x240>
 8005242:	2300      	movs	r3, #0
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	f002 0203 	and.w	r2, r2, #3
 800524a:	0092      	lsls	r2, r2, #2
 800524c:	4093      	lsls	r3, r2
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	4934      	ldr	r1, [pc, #208]	; (8005328 <HAL_GPIO_Init+0x324>)
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	3302      	adds	r3, #2
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005262:	4b3c      	ldr	r3, [pc, #240]	; (8005354 <HAL_GPIO_Init+0x350>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_Init+0x282>
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	4a33      	ldr	r2, [pc, #204]	; (8005354 <HAL_GPIO_Init+0x350>)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	4b31      	ldr	r3, [pc, #196]	; (8005354 <HAL_GPIO_Init+0x350>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	43db      	mvns	r3, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_GPIO_Init+0x2ac>
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	4a28      	ldr	r2, [pc, #160]	; (8005354 <HAL_GPIO_Init+0x350>)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	6053      	str	r3, [r2, #4]
 80052b6:	4b27      	ldr	r3, [pc, #156]	; (8005354 <HAL_GPIO_Init+0x350>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	43db      	mvns	r3, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x2d6>
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <HAL_GPIO_Init+0x350>)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	6093      	str	r3, [r2, #8]
 80052e0:	4b1c      	ldr	r3, [pc, #112]	; (8005354 <HAL_GPIO_Init+0x350>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x300>
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	4a13      	ldr	r2, [pc, #76]	; (8005354 <HAL_GPIO_Init+0x350>)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	60d3      	str	r3, [r2, #12]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3301      	adds	r3, #1
 800530e:	61fb      	str	r3, [r7, #28]
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b0f      	cmp	r3, #15
 8005314:	f67f ae86 	bls.w	8005024 <HAL_GPIO_Init+0x20>
 8005318:	bf00      	nop
 800531a:	3724      	adds	r7, #36	; 0x24
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40023800 	.word	0x40023800
 8005328:	40013800 	.word	0x40013800
 800532c:	40020000 	.word	0x40020000
 8005330:	40020400 	.word	0x40020400
 8005334:	40020800 	.word	0x40020800
 8005338:	40020c00 	.word	0x40020c00
 800533c:	40021000 	.word	0x40021000
 8005340:	40021400 	.word	0x40021400
 8005344:	40021800 	.word	0x40021800
 8005348:	40021c00 	.word	0x40021c00
 800534c:	40022000 	.word	0x40022000
 8005350:	40022400 	.word	0x40022400
 8005354:	40013c00 	.word	0x40013c00

08005358 <HAL_GPIO_ReadPin>:
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	807b      	strh	r3, [r7, #2]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	887b      	ldrh	r3, [r7, #2]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_GPIO_ReadPin+0x1e>
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	e001      	b.n	800537a <HAL_GPIO_ReadPin+0x22>
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_GPIO_WritePin>:
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	807b      	strh	r3, [r7, #2]
 8005394:	4613      	mov	r3, r2
 8005396:	707b      	strb	r3, [r7, #1]
 8005398:	787b      	ldrb	r3, [r7, #1]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_WritePin+0x1e>
 800539e:	887a      	ldrh	r2, [r7, #2]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	619a      	str	r2, [r3, #24]
 80053a4:	e003      	b.n	80053ae <HAL_GPIO_WritePin+0x26>
 80053a6:	887b      	ldrh	r3, [r7, #2]
 80053a8:	041a      	lsls	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	619a      	str	r2, [r3, #24]
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_GPIO_EXTI_IRQHandler>:
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	80fb      	strh	r3, [r7, #6]
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80053d2:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	6153      	str	r3, [r2, #20]
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f806 	bl	80053ec <HAL_GPIO_EXTI_Callback>
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40013c00 	.word	0x40013c00

080053ec <HAL_GPIO_EXTI_Callback>:
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	80fb      	strh	r3, [r7, #6]
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_RCC_OscConfig>:
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	2300      	movs	r3, #0
 800540e:	75fb      	strb	r3, [r7, #23]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_OscConfig+0x16>
 8005416:	2301      	movs	r3, #1
 8005418:	e29b      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8087 	beq.w	8005536 <HAL_RCC_OscConfig+0x132>
 8005428:	4b96      	ldr	r3, [pc, #600]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b04      	cmp	r3, #4
 8005432:	d00c      	beq.n	800544e <HAL_RCC_OscConfig+0x4a>
 8005434:	4b93      	ldr	r3, [pc, #588]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	2b08      	cmp	r3, #8
 800543e:	d112      	bne.n	8005466 <HAL_RCC_OscConfig+0x62>
 8005440:	4b90      	ldr	r3, [pc, #576]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800544c:	d10b      	bne.n	8005466 <HAL_RCC_OscConfig+0x62>
 800544e:	4b8d      	ldr	r3, [pc, #564]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d06c      	beq.n	8005534 <HAL_RCC_OscConfig+0x130>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d168      	bne.n	8005534 <HAL_RCC_OscConfig+0x130>
 8005462:	2301      	movs	r3, #1
 8005464:	e275      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546e:	d106      	bne.n	800547e <HAL_RCC_OscConfig+0x7a>
 8005470:	4b84      	ldr	r3, [pc, #528]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a83      	ldr	r2, [pc, #524]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e02e      	b.n	80054dc <HAL_RCC_OscConfig+0xd8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x9c>
 8005486:	4b7f      	ldr	r3, [pc, #508]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a7e      	ldr	r2, [pc, #504]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800548c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	4b7c      	ldr	r3, [pc, #496]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a7b      	ldr	r2, [pc, #492]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e01d      	b.n	80054dc <HAL_RCC_OscConfig+0xd8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCC_OscConfig+0xc0>
 80054aa:	4b76      	ldr	r3, [pc, #472]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a75      	ldr	r2, [pc, #468]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4b73      	ldr	r3, [pc, #460]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a72      	ldr	r2, [pc, #456]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e00b      	b.n	80054dc <HAL_RCC_OscConfig+0xd8>
 80054c4:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a6e      	ldr	r2, [pc, #440]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	4b6c      	ldr	r3, [pc, #432]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a6b      	ldr	r2, [pc, #428]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d013      	beq.n	800550c <HAL_RCC_OscConfig+0x108>
 80054e4:	f7fe f804 	bl	80034f0 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0xfa>
 80054ec:	f7fe f800 	bl	80034f0 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	; 0x64
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0xfa>
 80054fa:	2303      	movs	r3, #3
 80054fc:	e229      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 80054fe:	4b61      	ldr	r3, [pc, #388]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0xe8>
 800550a:	e014      	b.n	8005536 <HAL_RCC_OscConfig+0x132>
 800550c:	f7fd fff0 	bl	80034f0 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x122>
 8005514:	f7fd ffec 	bl	80034f0 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x122>
 8005522:	2303      	movs	r3, #3
 8005524:	e215      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 8005526:	4b57      	ldr	r3, [pc, #348]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x110>
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x132>
 8005534:	bf00      	nop
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d069      	beq.n	8005616 <HAL_RCC_OscConfig+0x212>
 8005542:	4b50      	ldr	r3, [pc, #320]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <HAL_RCC_OscConfig+0x162>
 800554e:	4b4d      	ldr	r3, [pc, #308]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	2b08      	cmp	r3, #8
 8005558:	d11c      	bne.n	8005594 <HAL_RCC_OscConfig+0x190>
 800555a:	4b4a      	ldr	r3, [pc, #296]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d116      	bne.n	8005594 <HAL_RCC_OscConfig+0x190>
 8005566:	4b47      	ldr	r3, [pc, #284]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <HAL_RCC_OscConfig+0x17a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d001      	beq.n	800557e <HAL_RCC_OscConfig+0x17a>
 800557a:	2301      	movs	r3, #1
 800557c:	e1e9      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 800557e:	4b41      	ldr	r3, [pc, #260]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	493d      	ldr	r1, [pc, #244]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800558e:	4313      	orrs	r3, r2
 8005590:	600b      	str	r3, [r1, #0]
 8005592:	e040      	b.n	8005616 <HAL_RCC_OscConfig+0x212>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d023      	beq.n	80055e4 <HAL_RCC_OscConfig+0x1e0>
 800559c:	4b39      	ldr	r3, [pc, #228]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a38      	ldr	r2, [pc, #224]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	f7fd ffa2 	bl	80034f0 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1be>
 80055b0:	f7fd ff9e 	bl	80034f0 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1be>
 80055be:	2303      	movs	r3, #3
 80055c0:	e1c7      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 80055c2:	4b30      	ldr	r3, [pc, #192]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x1ac>
 80055ce:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4929      	ldr	r1, [pc, #164]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
 80055e2:	e018      	b.n	8005616 <HAL_RCC_OscConfig+0x212>
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a26      	ldr	r2, [pc, #152]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	f7fd ff7e 	bl	80034f0 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x206>
 80055f8:	f7fd ff7a 	bl	80034f0 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x206>
 8005606:	2303      	movs	r3, #3
 8005608:	e1a3      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 800560a:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x1f4>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d038      	beq.n	8005694 <HAL_RCC_OscConfig+0x290>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d019      	beq.n	800565e <HAL_RCC_OscConfig+0x25a>
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800562c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	6753      	str	r3, [r2, #116]	; 0x74
 8005636:	f7fd ff5b 	bl	80034f0 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x24c>
 800563e:	f7fd ff57 	bl	80034f0 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x24c>
 800564c:	2303      	movs	r3, #3
 800564e:	e180      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x23a>
 800565c:	e01a      	b.n	8005694 <HAL_RCC_OscConfig+0x290>
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005662:	4a08      	ldr	r2, [pc, #32]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6753      	str	r3, [r2, #116]	; 0x74
 800566a:	f7fd ff41 	bl	80034f0 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]
 8005670:	e00a      	b.n	8005688 <HAL_RCC_OscConfig+0x284>
 8005672:	f7fd ff3d 	bl	80034f0 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d903      	bls.n	8005688 <HAL_RCC_OscConfig+0x284>
 8005680:	2303      	movs	r3, #3
 8005682:	e166      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 8005684:	40023800 	.word	0x40023800
 8005688:	4b92      	ldr	r3, [pc, #584]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 800568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ee      	bne.n	8005672 <HAL_RCC_OscConfig+0x26e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80a4 	beq.w	80057ea <HAL_RCC_OscConfig+0x3e6>
 80056a2:	4b8c      	ldr	r3, [pc, #560]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10d      	bne.n	80056ca <HAL_RCC_OscConfig+0x2c6>
 80056ae:	4b89      	ldr	r3, [pc, #548]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	4a88      	ldr	r2, [pc, #544]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80056b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ba:	4b86      	ldr	r3, [pc, #536]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2301      	movs	r3, #1
 80056c8:	75fb      	strb	r3, [r7, #23]
 80056ca:	4b83      	ldr	r3, [pc, #524]	; (80058d8 <HAL_RCC_OscConfig+0x4d4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d118      	bne.n	8005708 <HAL_RCC_OscConfig+0x304>
 80056d6:	4b80      	ldr	r3, [pc, #512]	; (80058d8 <HAL_RCC_OscConfig+0x4d4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7f      	ldr	r2, [pc, #508]	; (80058d8 <HAL_RCC_OscConfig+0x4d4>)
 80056dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	f7fd ff05 	bl	80034f0 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x2f8>
 80056ea:	f7fd ff01 	bl	80034f0 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b64      	cmp	r3, #100	; 0x64
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x2f8>
 80056f8:	2303      	movs	r3, #3
 80056fa:	e12a      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 80056fc:	4b76      	ldr	r3, [pc, #472]	; (80058d8 <HAL_RCC_OscConfig+0x4d4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCC_OscConfig+0x2e6>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d106      	bne.n	800571e <HAL_RCC_OscConfig+0x31a>
 8005710:	4b70      	ldr	r3, [pc, #448]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	4a6f      	ldr	r2, [pc, #444]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6713      	str	r3, [r2, #112]	; 0x70
 800571c:	e02d      	b.n	800577a <HAL_RCC_OscConfig+0x376>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10c      	bne.n	8005740 <HAL_RCC_OscConfig+0x33c>
 8005726:	4b6b      	ldr	r3, [pc, #428]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	4a6a      	ldr	r2, [pc, #424]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	6713      	str	r3, [r2, #112]	; 0x70
 8005732:	4b68      	ldr	r3, [pc, #416]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	4a67      	ldr	r2, [pc, #412]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005738:	f023 0304 	bic.w	r3, r3, #4
 800573c:	6713      	str	r3, [r2, #112]	; 0x70
 800573e:	e01c      	b.n	800577a <HAL_RCC_OscConfig+0x376>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b05      	cmp	r3, #5
 8005746:	d10c      	bne.n	8005762 <HAL_RCC_OscConfig+0x35e>
 8005748:	4b62      	ldr	r3, [pc, #392]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	4a61      	ldr	r2, [pc, #388]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 800574e:	f043 0304 	orr.w	r3, r3, #4
 8005752:	6713      	str	r3, [r2, #112]	; 0x70
 8005754:	4b5f      	ldr	r3, [pc, #380]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	4a5e      	ldr	r2, [pc, #376]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	6713      	str	r3, [r2, #112]	; 0x70
 8005760:	e00b      	b.n	800577a <HAL_RCC_OscConfig+0x376>
 8005762:	4b5c      	ldr	r3, [pc, #368]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	4a5b      	ldr	r2, [pc, #364]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	6713      	str	r3, [r2, #112]	; 0x70
 800576e:	4b59      	ldr	r3, [pc, #356]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a58      	ldr	r2, [pc, #352]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005774:	f023 0304 	bic.w	r3, r3, #4
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d015      	beq.n	80057ae <HAL_RCC_OscConfig+0x3aa>
 8005782:	f7fd feb5 	bl	80034f0 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]
 8005788:	e00a      	b.n	80057a0 <HAL_RCC_OscConfig+0x39c>
 800578a:	f7fd feb1 	bl	80034f0 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	; 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x39c>
 800579c:	2303      	movs	r3, #3
 800579e:	e0d8      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 80057a0:	4b4c      	ldr	r3, [pc, #304]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ee      	beq.n	800578a <HAL_RCC_OscConfig+0x386>
 80057ac:	e014      	b.n	80057d8 <HAL_RCC_OscConfig+0x3d4>
 80057ae:	f7fd fe9f 	bl	80034f0 <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]
 80057b4:	e00a      	b.n	80057cc <HAL_RCC_OscConfig+0x3c8>
 80057b6:	f7fd fe9b 	bl	80034f0 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x3c8>
 80057c8:	2303      	movs	r3, #3
 80057ca:	e0c2      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 80057cc:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1ee      	bne.n	80057b6 <HAL_RCC_OscConfig+0x3b2>
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d105      	bne.n	80057ea <HAL_RCC_OscConfig+0x3e6>
 80057de:	4b3d      	ldr	r3, [pc, #244]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	4a3c      	ldr	r2, [pc, #240]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80057e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80ae 	beq.w	8005950 <HAL_RCC_OscConfig+0x54c>
 80057f4:	4b37      	ldr	r3, [pc, #220]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 030c 	and.w	r3, r3, #12
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d06d      	beq.n	80058dc <HAL_RCC_OscConfig+0x4d8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d14b      	bne.n	80058a0 <HAL_RCC_OscConfig+0x49c>
 8005808:	4b32      	ldr	r3, [pc, #200]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a31      	ldr	r2, [pc, #196]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 800580e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	f7fd fe6c 	bl	80034f0 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x42a>
 800581c:	f7fd fe68 	bl	80034f0 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x42a>
 800582a:	2303      	movs	r3, #3
 800582c:	e091      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 800582e:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x418>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	019b      	lsls	r3, r3, #6
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	041b      	lsls	r3, r3, #16
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	071b      	lsls	r3, r3, #28
 8005866:	491b      	ldr	r1, [pc, #108]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005868:	4313      	orrs	r3, r2
 800586a:	604b      	str	r3, [r1, #4]
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	f7fd fe3a 	bl	80034f0 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x48e>
 8005880:	f7fd fe36 	bl	80034f0 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x48e>
 800588e:	2303      	movs	r3, #3
 8005890:	e05f      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 8005892:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCC_OscConfig+0x47c>
 800589e:	e057      	b.n	8005950 <HAL_RCC_OscConfig+0x54c>
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a0b      	ldr	r2, [pc, #44]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80058a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	f7fd fe20 	bl	80034f0 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x4c2>
 80058b4:	f7fd fe1c 	bl	80034f0 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x4c2>
 80058c2:	2303      	movs	r3, #3
 80058c4:	e045      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 80058c6:	4b03      	ldr	r3, [pc, #12]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x4b0>
 80058d2:	e03d      	b.n	8005950 <HAL_RCC_OscConfig+0x54c>
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40007000 	.word	0x40007000
 80058dc:	4b1f      	ldr	r3, [pc, #124]	; (800595c <HAL_RCC_OscConfig+0x558>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d030      	beq.n	800594c <HAL_RCC_OscConfig+0x548>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d129      	bne.n	800594c <HAL_RCC_OscConfig+0x548>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	429a      	cmp	r2, r3
 8005904:	d122      	bne.n	800594c <HAL_RCC_OscConfig+0x548>
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800590c:	4013      	ands	r3, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005912:	0192      	lsls	r2, r2, #6
 8005914:	4293      	cmp	r3, r2
 8005916:	d119      	bne.n	800594c <HAL_RCC_OscConfig+0x548>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	3b01      	subs	r3, #1
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	429a      	cmp	r2, r3
 800592a:	d10f      	bne.n	800594c <HAL_RCC_OscConfig+0x548>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	061b      	lsls	r3, r3, #24
 8005938:	429a      	cmp	r2, r3
 800593a:	d107      	bne.n	800594c <HAL_RCC_OscConfig+0x548>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	071b      	lsls	r3, r3, #28
 8005948:	429a      	cmp	r2, r3
 800594a:	d001      	beq.n	8005950 <HAL_RCC_OscConfig+0x54c>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_RCC_OscConfig+0x54e>
 8005950:	2300      	movs	r3, #0
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40023800 	.word	0x40023800

08005960 <HAL_RCC_ClockConfig>:
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0x18>
 8005974:	2301      	movs	r3, #1
 8005976:	e0d0      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ba>
 8005978:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d910      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x48>
 8005986:	4b67      	ldr	r3, [pc, #412]	; (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 020f 	bic.w	r2, r3, #15
 800598e:	4965      	ldr	r1, [pc, #404]	; (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]
 8005996:	4b63      	ldr	r3, [pc, #396]	; (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x48>
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0b8      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ba>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d020      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x96>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_ClockConfig+0x6c>
 80059c0:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a58      	ldr	r2, [pc, #352]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 80059c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059ca:	6093      	str	r3, [r2, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x84>
 80059d8:	4b53      	ldr	r3, [pc, #332]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4a52      	ldr	r2, [pc, #328]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 80059de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059e2:	6093      	str	r3, [r2, #8]
 80059e4:	4b50      	ldr	r3, [pc, #320]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	494d      	ldr	r1, [pc, #308]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d040      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x124>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xba>
 8005a0a:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d115      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xe2>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e07f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ba>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d107      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xd2>
 8005a22:	4b41      	ldr	r3, [pc, #260]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xe2>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e073      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ba>
 8005a32:	4b3d      	ldr	r3, [pc, #244]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xe2>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e06b      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ba>
 8005a42:	4b39      	ldr	r3, [pc, #228]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f023 0203 	bic.w	r2, r3, #3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4936      	ldr	r1, [pc, #216]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]
 8005a54:	f7fd fd4c 	bl	80034f0 <HAL_GetTick>
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCC_ClockConfig+0x112>
 8005a5c:	f7fd fd48 	bl	80034f0 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_ClockConfig+0x112>
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e053      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ba>
 8005a72:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 020c 	and.w	r2, r3, #12
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d1eb      	bne.n	8005a5c <HAL_RCC_ClockConfig+0xfc>
 8005a84:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d210      	bcs.n	8005ab4 <HAL_RCC_ClockConfig+0x154>
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 020f 	bic.w	r2, r3, #15
 8005a9a:	4922      	ldr	r1, [pc, #136]	; (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]
 8005aa2:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x154>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e032      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ba>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x172>
 8005ac0:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4916      	ldr	r1, [pc, #88]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x192>
 8005ade:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	490e      	ldr	r1, [pc, #56]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
 8005af2:	f000 f821 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
 8005af6:	4601      	mov	r1, r0
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	4a0a      	ldr	r2, [pc, #40]	; (8005b2c <HAL_RCC_ClockConfig+0x1cc>)
 8005b04:	5cd3      	ldrb	r3, [r2, r3]
 8005b06:	fa21 f303 	lsr.w	r3, r1, r3
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <HAL_RCC_ClockConfig+0x1d0>)
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <HAL_RCC_ClockConfig+0x1d4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fd fb2a 	bl	800316c <HAL_InitTick>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40023c00 	.word	0x40023c00
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	0800b998 	.word	0x0800b998
 8005b30:	20000030 	.word	0x20000030
 8005b34:	20000034 	.word	0x20000034

08005b38 <HAL_RCC_GetSysClockFreq>:
 8005b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	2300      	movs	r3, #0
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	2300      	movs	r3, #0
 8005b48:	603b      	str	r3, [r7, #0]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	4b50      	ldr	r3, [pc, #320]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d007      	beq.n	8005b6a <HAL_RCC_GetSysClockFreq+0x32>
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d008      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x38>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 808d 	bne.w	8005c7e <HAL_RCC_GetSysClockFreq+0x146>
 8005b64:	4b4b      	ldr	r3, [pc, #300]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	e08c      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x14c>
 8005b6a:	4b4b      	ldr	r3, [pc, #300]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	e089      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x14c>
 8005b70:	4b47      	ldr	r3, [pc, #284]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	4b45      	ldr	r3, [pc, #276]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d023      	beq.n	8005bce <HAL_RCC_GetSysClockFreq+0x96>
 8005b86:	4b42      	ldr	r3, [pc, #264]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	099b      	lsrs	r3, r3, #6
 8005b8c:	f04f 0400 	mov.w	r4, #0
 8005b90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	ea03 0501 	and.w	r5, r3, r1
 8005b9c:	ea04 0602 	and.w	r6, r4, r2
 8005ba0:	4a3d      	ldr	r2, [pc, #244]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ba2:	fb02 f106 	mul.w	r1, r2, r6
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	fb02 f205 	mul.w	r2, r2, r5
 8005bac:	440a      	add	r2, r1
 8005bae:	493a      	ldr	r1, [pc, #232]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bb0:	fba5 0101 	umull	r0, r1, r5, r1
 8005bb4:	1853      	adds	r3, r2, r1
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f04f 0400 	mov.w	r4, #0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	f7fa fb95 	bl	80002f0 <__aeabi_uldivmod>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e049      	b.n	8005c62 <HAL_RCC_GetSysClockFreq+0x12a>
 8005bce:	4b30      	ldr	r3, [pc, #192]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	099b      	lsrs	r3, r3, #6
 8005bd4:	f04f 0400 	mov.w	r4, #0
 8005bd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	ea03 0501 	and.w	r5, r3, r1
 8005be4:	ea04 0602 	and.w	r6, r4, r2
 8005be8:	4629      	mov	r1, r5
 8005bea:	4632      	mov	r2, r6
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	f04f 0400 	mov.w	r4, #0
 8005bf4:	0154      	lsls	r4, r2, #5
 8005bf6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bfa:	014b      	lsls	r3, r1, #5
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4622      	mov	r2, r4
 8005c00:	1b49      	subs	r1, r1, r5
 8005c02:	eb62 0206 	sbc.w	r2, r2, r6
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	f04f 0400 	mov.w	r4, #0
 8005c0e:	0194      	lsls	r4, r2, #6
 8005c10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c14:	018b      	lsls	r3, r1, #6
 8005c16:	1a5b      	subs	r3, r3, r1
 8005c18:	eb64 0402 	sbc.w	r4, r4, r2
 8005c1c:	f04f 0100 	mov.w	r1, #0
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	00e2      	lsls	r2, r4, #3
 8005c26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c2a:	00d9      	lsls	r1, r3, #3
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4614      	mov	r4, r2
 8005c30:	195b      	adds	r3, r3, r5
 8005c32:	eb44 0406 	adc.w	r4, r4, r6
 8005c36:	f04f 0100 	mov.w	r1, #0
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	02a2      	lsls	r2, r4, #10
 8005c40:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c44:	0299      	lsls	r1, r3, #10
 8005c46:	460b      	mov	r3, r1
 8005c48:	4614      	mov	r4, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f04f 0400 	mov.w	r4, #0
 8005c54:	461a      	mov	r2, r3
 8005c56:	4623      	mov	r3, r4
 8005c58:	f7fa fb4a 	bl	80002f0 <__aeabi_uldivmod>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	0c1b      	lsrs	r3, r3, #16
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	e002      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x14c>
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005c80:	60bb      	str	r3, [r7, #8]
 8005c82:	bf00      	nop
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40023800 	.word	0x40023800
 8005c94:	00f42400 	.word	0x00f42400
 8005c98:	017d7840 	.word	0x017d7840

08005c9c <HAL_RCC_GetHCLKFreq>:
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000030 	.word	0x20000030

08005cb4 <HAL_RCC_GetPCLK1Freq>:
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	f7ff fff0 	bl	8005c9c <HAL_RCC_GetHCLKFreq>
 8005cbc:	4601      	mov	r1, r0
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	0a9b      	lsrs	r3, r3, #10
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	4a03      	ldr	r2, [pc, #12]	; (8005cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cca:	5cd3      	ldrb	r3, [r2, r3]
 8005ccc:	fa21 f303 	lsr.w	r3, r1, r3
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40023800 	.word	0x40023800
 8005cd8:	0800b9a8 	.word	0x0800b9a8

08005cdc <HAL_RCC_GetPCLK2Freq>:
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	f7ff ffdc 	bl	8005c9c <HAL_RCC_GetHCLKFreq>
 8005ce4:	4601      	mov	r1, r0
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	0b5b      	lsrs	r3, r3, #13
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4a03      	ldr	r2, [pc, #12]	; (8005d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cf2:	5cd3      	ldrb	r3, [r2, r3]
 8005cf4:	fa21 f303 	lsr.w	r3, r1, r3
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	0800b9a8 	.word	0x0800b9a8

08005d04 <HAL_RCC_GetClockConfig>:
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	220f      	movs	r2, #15
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <HAL_RCC_GetClockConfig+0x5c>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0203 	and.w	r2, r3, #3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	605a      	str	r2, [r3, #4]
 8005d20:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <HAL_RCC_GetClockConfig+0x5c>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <HAL_RCC_GetClockConfig+0x5c>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60da      	str	r2, [r3, #12]
 8005d38:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_RCC_GetClockConfig+0x5c>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	08db      	lsrs	r3, r3, #3
 8005d3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	611a      	str	r2, [r3, #16]
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <HAL_RCC_GetClockConfig+0x60>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 020f 	and.w	r2, r3, #15
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40023800 	.word	0x40023800
 8005d64:	40023c00 	.word	0x40023c00

08005d68 <HAL_RCCEx_PeriphCLKConfig>:
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	2300      	movs	r3, #0
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d012      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005d90:	4b69      	ldr	r3, [pc, #420]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4a68      	ldr	r2, [pc, #416]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d9a:	6093      	str	r3, [r2, #8]
 8005d9c:	4b66      	ldr	r3, [pc, #408]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	4964      	ldr	r1, [pc, #400]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	608b      	str	r3, [r1, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005db2:	2301      	movs	r3, #1
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d017      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8005dc2:	4b5d      	ldr	r3, [pc, #372]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	4959      	ldr	r1, [pc, #356]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de0:	d101      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005de2:	2301      	movs	r3, #1
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8005dee:	2301      	movs	r3, #1
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d017      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8005dfe:	4b4e      	ldr	r3, [pc, #312]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	494a      	ldr	r1, [pc, #296]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e1c:	d101      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xba>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 808b 	beq.w	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e4c:	4b3a      	ldr	r3, [pc, #232]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	4a39      	ldr	r2, [pc, #228]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e56:	6413      	str	r3, [r2, #64]	; 0x40
 8005e58:	4b37      	ldr	r3, [pc, #220]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4b35      	ldr	r3, [pc, #212]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a34      	ldr	r2, [pc, #208]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	f7fd fb3e 	bl	80034f0 <HAL_GetTick>
 8005e74:	6178      	str	r0, [r7, #20]
 8005e76:	e008      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8005e78:	f7fd fb3a 	bl	80034f0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8005e86:	2303      	movs	r3, #3
 8005e88:	e356      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8005e8a:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e96:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d035      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d02e      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005eb4:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	4b1e      	ldr	r3, [pc, #120]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eca:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ece:	4a1a      	ldr	r2, [pc, #104]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6713      	str	r3, [r2, #112]	; 0x70
 8005edc:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d114      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005ee8:	f7fd fb02 	bl	80034f0 <HAL_GetTick>
 8005eec:	6178      	str	r0, [r7, #20]
 8005eee:	e00a      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005ef0:	f7fd fafe 	bl	80034f0 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005f02:	2303      	movs	r3, #3
 8005f04:	e318      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8005f06:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0ee      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f1e:	d111      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f2e:	400b      	ands	r3, r1
 8005f30:	4901      	ldr	r1, [pc, #4]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	608b      	str	r3, [r1, #8]
 8005f36:	e00b      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005f38:	40023800 	.word	0x40023800
 8005f3c:	40007000 	.word	0x40007000
 8005f40:	0ffffcff 	.word	0x0ffffcff
 8005f44:	4bb1      	ldr	r3, [pc, #708]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4ab0      	ldr	r2, [pc, #704]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f4e:	6093      	str	r3, [r2, #8]
 8005f50:	4bae      	ldr	r3, [pc, #696]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f5c:	49ab      	ldr	r1, [pc, #684]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	670b      	str	r3, [r1, #112]	; 0x70
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d010      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005f6e:	4ba7      	ldr	r3, [pc, #668]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f74:	4aa5      	ldr	r2, [pc, #660]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f7e:	4ba3      	ldr	r3, [pc, #652]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	49a0      	ldr	r1, [pc, #640]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005f9c:	4b9b      	ldr	r3, [pc, #620]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005faa:	4998      	ldr	r1, [pc, #608]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005fbe:	4b93      	ldr	r3, [pc, #588]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fcc:	498f      	ldr	r1, [pc, #572]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005fe0:	4b8a      	ldr	r3, [pc, #552]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fee:	4987      	ldr	r1, [pc, #540]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006002:	4b82      	ldr	r3, [pc, #520]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006008:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006010:	497e      	ldr	r1, [pc, #504]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006024:	4b79      	ldr	r3, [pc, #484]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602a:	f023 0203 	bic.w	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006032:	4976      	ldr	r1, [pc, #472]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006046:	4b71      	ldr	r3, [pc, #452]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604c:	f023 020c 	bic.w	r2, r3, #12
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006054:	496d      	ldr	r1, [pc, #436]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8006068:	4b68      	ldr	r3, [pc, #416]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006076:	4965      	ldr	r1, [pc, #404]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006078:	4313      	orrs	r3, r2
 800607a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
 800608a:	4b60      	ldr	r3, [pc, #384]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006090:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006098:	495c      	ldr	r1, [pc, #368]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80060ac:	4b57      	ldr	r3, [pc, #348]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	4954      	ldr	r1, [pc, #336]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 80060ce:	4b4f      	ldr	r3, [pc, #316]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060dc:	494b      	ldr	r1, [pc, #300]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 80060f0:	4b46      	ldr	r3, [pc, #280]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fe:	4943      	ldr	r1, [pc, #268]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006112:	4b3e      	ldr	r3, [pc, #248]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006118:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006120:	493a      	ldr	r1, [pc, #232]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006134:	4b35      	ldr	r3, [pc, #212]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006142:	4932      	ldr	r1, [pc, #200]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006144:	4313      	orrs	r3, r2
 8006146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d011      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x412>
 8006156:	4b2d      	ldr	r3, [pc, #180]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006164:	4929      	ldr	r1, [pc, #164]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006174:	d101      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x412>
 8006176:	2301      	movs	r3, #1
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006186:	4b21      	ldr	r3, [pc, #132]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006194:	491d      	ldr	r1, [pc, #116]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00b      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80061a8:	4b18      	ldr	r3, [pc, #96]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b8:	4914      	ldr	r1, [pc, #80]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061dc:	490b      	ldr	r1, [pc, #44]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00f      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80061f0:	4b06      	ldr	r3, [pc, #24]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006200:	4902      	ldr	r1, [pc, #8]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8006208:	e002      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800620a:	bf00      	nop
 800620c:	40023800 	.word	0x40023800
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800621c:	4b80      	ldr	r3, [pc, #512]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800621e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006222:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800622c:	497c      	ldr	r1, [pc, #496]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d005      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006242:	f040 80d6 	bne.w	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8006246:	4b76      	ldr	r3, [pc, #472]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a75      	ldr	r2, [pc, #468]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800624c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	f7fd f94d 	bl	80034f0 <HAL_GetTick>
 8006256:	6178      	str	r0, [r7, #20]
 8006258:	e008      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800625a:	f7fd f949 	bl	80034f0 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b64      	cmp	r3, #100	; 0x64
 8006266:	d901      	bls.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006268:	2303      	movs	r3, #3
 800626a:	e165      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800626c:	4b6c      	ldr	r3, [pc, #432]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f0      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d021      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	d11d      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800628c:	4b64      	ldr	r3, [pc, #400]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800628e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	4b61      	ldr	r3, [pc, #388]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800629c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062a0:	0e1b      	lsrs	r3, r3, #24
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	019a      	lsls	r2, r3, #6
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	041b      	lsls	r3, r3, #16
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	061b      	lsls	r3, r3, #24
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	071b      	lsls	r3, r3, #28
 80062c0:	4957      	ldr	r1, [pc, #348]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x576>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062dc:	d00a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d02e      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f2:	d129      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 80062f4:	4b4a      	ldr	r3, [pc, #296]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80062f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062fa:	0c1b      	lsrs	r3, r3, #16
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	4b47      	ldr	r3, [pc, #284]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006308:	0f1b      	lsrs	r3, r3, #28
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	019a      	lsls	r2, r3, #6
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	041b      	lsls	r3, r3, #16
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	061b      	lsls	r3, r3, #24
 8006322:	431a      	orrs	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	071b      	lsls	r3, r3, #28
 8006328:	493d      	ldr	r1, [pc, #244]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8006330:	4b3b      	ldr	r3, [pc, #236]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006336:	f023 021f 	bic.w	r2, r3, #31
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	3b01      	subs	r3, #1
 8006340:	4937      	ldr	r1, [pc, #220]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01d      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x628>
 8006354:	4b32      	ldr	r3, [pc, #200]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635a:	0e1b      	lsrs	r3, r3, #24
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	4b2f      	ldr	r3, [pc, #188]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006368:	0f1b      	lsrs	r3, r3, #28
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	019a      	lsls	r2, r3, #6
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	431a      	orrs	r2, r3
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	061b      	lsls	r3, r3, #24
 8006382:	431a      	orrs	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	071b      	lsls	r3, r3, #28
 8006388:	4925      	ldr	r1, [pc, #148]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d011      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	019a      	lsls	r2, r3, #6
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	041b      	lsls	r3, r3, #16
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	061b      	lsls	r3, r3, #24
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	071b      	lsls	r3, r3, #28
 80063b8:	4919      	ldr	r1, [pc, #100]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80063c0:	4b17      	ldr	r3, [pc, #92]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a16      	ldr	r2, [pc, #88]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80063c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	f7fd f890 	bl	80034f0 <HAL_GetTick>
 80063d0:	6178      	str	r0, [r7, #20]
 80063d2:	e008      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80063d4:	f7fd f88c 	bl	80034f0 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b64      	cmp	r3, #100	; 0x64
 80063e0:	d901      	bls.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80063e2:	2303      	movs	r3, #3
 80063e4:	e0a8      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80063e6:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	f040 809e 	bne.w	8006536 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a08      	ldr	r2, [pc, #32]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	f7fd f873 	bl	80034f0 <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]
 800640c:	e00a      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800640e:	f7fd f86f 	bl	80034f0 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b64      	cmp	r3, #100	; 0x64
 800641a:	d903      	bls.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800641c:	2303      	movs	r3, #3
 800641e:	e08b      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8006420:	40023800 	.word	0x40023800
 8006424:	4b46      	ldr	r3, [pc, #280]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800642c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006430:	d0ed      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d02e      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d12a      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800645a:	4b39      	ldr	r3, [pc, #228]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	4b35      	ldr	r3, [pc, #212]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646e:	0f1b      	lsrs	r3, r3, #28
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	019a      	lsls	r2, r3, #6
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	071b      	lsls	r3, r3, #28
 800648e:	492c      	ldr	r1, [pc, #176]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006496:	4b2a      	ldr	r3, [pc, #168]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800649c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	3b01      	subs	r3, #1
 80064a6:	021b      	lsls	r3, r3, #8
 80064a8:	4925      	ldr	r1, [pc, #148]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d022      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c4:	d11d      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80064c6:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064cc:	0e1b      	lsrs	r3, r3, #24
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064da:	0f1b      	lsrs	r3, r3, #28
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	019a      	lsls	r2, r3, #6
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	431a      	orrs	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	061b      	lsls	r3, r3, #24
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	071b      	lsls	r3, r3, #28
 80064fa:	4911      	ldr	r1, [pc, #68]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006502:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a0e      	ldr	r2, [pc, #56]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	f7fc ffef 	bl	80034f0 <HAL_GetTick>
 8006512:	6178      	str	r0, [r7, #20]
 8006514:	e008      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006516:	f7fc ffeb 	bl	80034f0 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b64      	cmp	r3, #100	; 0x64
 8006522:	d901      	bls.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006524:	2303      	movs	r3, #3
 8006526:	e007      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8006528:	4b05      	ldr	r3, [pc, #20]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006534:	d1ef      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006536:	2300      	movs	r3, #0
 8006538:	4618      	mov	r0, r3
 800653a:	3720      	adds	r7, #32
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40023800 	.word	0x40023800

08006544 <HAL_TIM_Base_Init>:
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_TIM_Base_Init+0x12>
 8006552:	2301      	movs	r3, #1
 8006554:	e01d      	b.n	8006592 <HAL_TIM_Base_Init+0x4e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_TIM_Base_Init+0x2c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f815 	bl	800659a <HAL_TIM_Base_MspInit>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f000 f986 	bl	8006894 <TIM_Base_SetConfig>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006590:	2300      	movs	r3, #0
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_TIM_Base_MspInit>:
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <HAL_TIM_Base_Start_IT>:
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	60da      	str	r2, [r3, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <HAL_TIM_Base_Start_IT+0x50>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b06      	cmp	r3, #6
 80065d8:	d00b      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x42>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e0:	d007      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x42>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0201 	orr.w	r2, r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	2300      	movs	r3, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	00010007 	.word	0x00010007

08006604 <HAL_TIM_IRQHandler>:
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b02      	cmp	r3, #2
 8006618:	d122      	bne.n	8006660 <HAL_TIM_IRQHandler+0x5c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b02      	cmp	r3, #2
 8006626:	d11b      	bne.n	8006660 <HAL_TIM_IRQHandler+0x5c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0202 	mvn.w	r2, #2
 8006630:	611a      	str	r2, [r3, #16]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	771a      	strb	r2, [r3, #28]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0x4a>
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f905 	bl	8006856 <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0x56>
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f8f7 	bl	8006842 <HAL_TIM_OC_DelayElapsedCallback>
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f908 	bl	800686a <HAL_TIM_PWM_PulseFinishedCallback>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	2b04      	cmp	r3, #4
 800666c:	d122      	bne.n	80066b4 <HAL_TIM_IRQHandler+0xb0>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b04      	cmp	r3, #4
 800667a:	d11b      	bne.n	80066b4 <HAL_TIM_IRQHandler+0xb0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0204 	mvn.w	r2, #4
 8006684:	611a      	str	r2, [r3, #16]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	771a      	strb	r2, [r3, #28]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x9e>
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f8db 	bl	8006856 <HAL_TIM_IC_CaptureCallback>
 80066a0:	e005      	b.n	80066ae <HAL_TIM_IRQHandler+0xaa>
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8cd 	bl	8006842 <HAL_TIM_OC_DelayElapsedCallback>
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f8de 	bl	800686a <HAL_TIM_PWM_PulseFinishedCallback>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	771a      	strb	r2, [r3, #28]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d122      	bne.n	8006708 <HAL_TIM_IRQHandler+0x104>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d11b      	bne.n	8006708 <HAL_TIM_IRQHandler+0x104>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0208 	mvn.w	r2, #8
 80066d8:	611a      	str	r2, [r3, #16]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2204      	movs	r2, #4
 80066de:	771a      	strb	r2, [r3, #28]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0xf2>
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f8b1 	bl	8006856 <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0xfe>
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f8a3 	bl	8006842 <HAL_TIM_OC_DelayElapsedCallback>
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f8b4 	bl	800686a <HAL_TIM_PWM_PulseFinishedCallback>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b10      	cmp	r3, #16
 8006714:	d122      	bne.n	800675c <HAL_TIM_IRQHandler+0x158>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b10      	cmp	r3, #16
 8006722:	d11b      	bne.n	800675c <HAL_TIM_IRQHandler+0x158>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0210 	mvn.w	r2, #16
 800672c:	611a      	str	r2, [r3, #16]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2208      	movs	r2, #8
 8006732:	771a      	strb	r2, [r3, #28]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_TIM_IRQHandler+0x146>
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f887 	bl	8006856 <HAL_TIM_IC_CaptureCallback>
 8006748:	e005      	b.n	8006756 <HAL_TIM_IRQHandler+0x152>
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f879 	bl	8006842 <HAL_TIM_OC_DelayElapsedCallback>
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f88a 	bl	800686a <HAL_TIM_PWM_PulseFinishedCallback>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	771a      	strb	r2, [r3, #28]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	d10e      	bne.n	8006788 <HAL_TIM_IRQHandler+0x184>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	d107      	bne.n	8006788 <HAL_TIM_IRQHandler+0x184>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0201 	mvn.w	r2, #1
 8006780:	611a      	str	r2, [r3, #16]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fc fcb4 	bl	80030f0 <HAL_TIM_PeriodElapsedCallback>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d10e      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1b0>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a0:	2b80      	cmp	r3, #128	; 0x80
 80067a2:	d107      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1b0>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067ac:	611a      	str	r2, [r3, #16]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f91a 	bl	80069e8 <HAL_TIMEx_BreakCallback>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c2:	d10e      	bne.n	80067e2 <HAL_TIM_IRQHandler+0x1de>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ce:	2b80      	cmp	r3, #128	; 0x80
 80067d0:	d107      	bne.n	80067e2 <HAL_TIM_IRQHandler+0x1de>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067da:	611a      	str	r2, [r3, #16]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f90d 	bl	80069fc <HAL_TIMEx_Break2Callback>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b40      	cmp	r3, #64	; 0x40
 80067ee:	d10e      	bne.n	800680e <HAL_TIM_IRQHandler+0x20a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d107      	bne.n	800680e <HAL_TIM_IRQHandler+0x20a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006806:	611a      	str	r2, [r3, #16]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f838 	bl	800687e <HAL_TIM_TriggerCallback>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b20      	cmp	r3, #32
 800681a:	d10e      	bne.n	800683a <HAL_TIM_IRQHandler+0x236>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b20      	cmp	r3, #32
 8006828:	d107      	bne.n	800683a <HAL_TIM_IRQHandler+0x236>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f06f 0220 	mvn.w	r2, #32
 8006832:	611a      	str	r2, [r3, #16]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f8cd 	bl	80069d4 <HAL_TIMEx_CommutCallback>
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_TIM_OC_DelayElapsedCallback>:
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_TIM_IC_CaptureCallback>:
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_TIM_PWM_PulseFinishedCallback>:
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_TIM_TriggerCallback>:
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <TIM_Base_SetConfig>:
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a40      	ldr	r2, [pc, #256]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3d      	ldr	r2, [pc, #244]	; (80069ac <TIM_Base_SetConfig+0x118>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3c      	ldr	r2, [pc, #240]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3b      	ldr	r2, [pc, #236]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3a      	ldr	r2, [pc, #232]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d108      	bne.n	80068e6 <TIM_Base_SetConfig+0x52>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2f      	ldr	r2, [pc, #188]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d02b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f4:	d027      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2c      	ldr	r2, [pc, #176]	; (80069ac <TIM_Base_SetConfig+0x118>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d023      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2b      	ldr	r2, [pc, #172]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01f      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2a      	ldr	r2, [pc, #168]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a29      	ldr	r2, [pc, #164]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d017      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a28      	ldr	r2, [pc, #160]	; (80069bc <TIM_Base_SetConfig+0x128>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <TIM_Base_SetConfig+0x12c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00f      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a26      	ldr	r2, [pc, #152]	; (80069c4 <TIM_Base_SetConfig+0x130>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <TIM_Base_SetConfig+0x134>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d007      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a24      	ldr	r2, [pc, #144]	; (80069cc <TIM_Base_SetConfig+0x138>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <TIM_Base_SetConfig+0x13c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d108      	bne.n	8006958 <TIM_Base_SetConfig+0xc4>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	62da      	str	r2, [r3, #44]	; 0x2c
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	629a      	str	r2, [r3, #40]	; 0x28
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_Base_SetConfig+0xf8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a0c      	ldr	r2, [pc, #48]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d103      	bne.n	8006994 <TIM_Base_SetConfig+0x100>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	615a      	str	r2, [r3, #20]
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800
 80069b4:	40000c00 	.word	0x40000c00
 80069b8:	40010400 	.word	0x40010400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800
 80069c8:	40001800 	.word	0x40001800
 80069cc:	40001c00 	.word	0x40001c00
 80069d0:	40002000 	.word	0x40002000

080069d4 <HAL_TIMEx_CommutCallback>:
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIMEx_BreakCallback>:
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_TIMEx_Break2Callback>:
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_UART_Init>:
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Init+0x12>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e040      	b.n	8006aa4 <HAL_UART_Init+0x94>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d106      	bne.n	8006a38 <HAL_UART_Init+0x28>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fc fcce 	bl	80033d4 <HAL_UART_MspInit>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2224      	movs	r2, #36	; 0x24
 8006a3c:	675a      	str	r2, [r3, #116]	; 0x74
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0201 	bic.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8be 	bl	8006bd0 <UART_SetConfig>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Init+0x4e>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e022      	b.n	8006aa4 <HAL_UART_Init+0x94>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <HAL_UART_Init+0x5c>
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fb5c 	bl	8007124 <UART_AdvFeatureConfig>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a7a:	605a      	str	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0201 	orr.w	r2, r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fbe3 	bl	8007268 <UART_CheckIdleState>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_UART_Transmit>:
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08a      	sub	sp, #40	; 0x28
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	80fb      	strh	r3, [r7, #6]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	d17f      	bne.n	8006bc4 <HAL_UART_Transmit+0x118>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <HAL_UART_Transmit+0x24>
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_UART_Transmit+0x28>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e078      	b.n	8006bc6 <HAL_UART_Transmit+0x11a>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_UART_Transmit+0x36>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e071      	b.n	8006bc6 <HAL_UART_Transmit+0x11a>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	67da      	str	r2, [r3, #124]	; 0x7c
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2221      	movs	r2, #33	; 0x21
 8006af4:	675a      	str	r2, [r3, #116]	; 0x74
 8006af6:	f7fc fcfb 	bl	80034f0 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	88fa      	ldrh	r2, [r7, #6]
 8006b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b14:	d108      	bne.n	8006b28 <HAL_UART_Transmit+0x7c>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <HAL_UART_Transmit+0x7c>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	e003      	b.n	8006b30 <HAL_UART_Transmit+0x84>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	61fb      	str	r3, [r7, #28]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006b38:	e02c      	b.n	8006b94 <HAL_UART_Transmit+0xe8>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2180      	movs	r1, #128	; 0x80
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fbd4 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <HAL_UART_Transmit+0xa8>
 8006b50:	2303      	movs	r3, #3
 8006b52:	e038      	b.n	8006bc6 <HAL_UART_Transmit+0x11a>
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10b      	bne.n	8006b72 <HAL_UART_Transmit+0xc6>
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	e007      	b.n	8006b82 <HAL_UART_Transmit+0xd6>
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1cc      	bne.n	8006b3a <HAL_UART_Transmit+0x8e>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2140      	movs	r1, #64	; 0x40
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fba1 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_UART_Transmit+0x10e>
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e005      	b.n	8006bc6 <HAL_UART_Transmit+0x11a>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	675a      	str	r2, [r3, #116]	; 0x74
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <HAL_UART_Transmit+0x11a>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <UART_SetConfig>:
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61bb      	str	r3, [r7, #24]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	75fb      	strb	r3, [r7, #23]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4bb1      	ldr	r3, [pc, #708]	; (8006ec4 <UART_SetConfig+0x2f4>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	6939      	ldr	r1, [r7, #16]
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	609a      	str	r2, [r3, #8]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a9f      	ldr	r2, [pc, #636]	; (8006ec8 <UART_SetConfig+0x2f8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d121      	bne.n	8006c94 <UART_SetConfig+0xc4>
 8006c50:	4b9e      	ldr	r3, [pc, #632]	; (8006ecc <UART_SetConfig+0x2fc>)
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d816      	bhi.n	8006c8c <UART_SetConfig+0xbc>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UART_SetConfig+0x94>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c75 	.word	0x08006c75
 8006c68:	08006c81 	.word	0x08006c81
 8006c6c:	08006c7b 	.word	0x08006c7b
 8006c70:	08006c87 	.word	0x08006c87
 8006c74:	2301      	movs	r3, #1
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e151      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e14e      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006c80:	2304      	movs	r3, #4
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e14b      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006c86:	2308      	movs	r3, #8
 8006c88:	77fb      	strb	r3, [r7, #31]
 8006c8a:	e148      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006c8c:	2310      	movs	r3, #16
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	bf00      	nop
 8006c92:	e144      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a8d      	ldr	r2, [pc, #564]	; (8006ed0 <UART_SetConfig+0x300>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d134      	bne.n	8006d08 <UART_SetConfig+0x138>
 8006c9e:	4b8b      	ldr	r3, [pc, #556]	; (8006ecc <UART_SetConfig+0x2fc>)
 8006ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca4:	f003 030c 	and.w	r3, r3, #12
 8006ca8:	2b0c      	cmp	r3, #12
 8006caa:	d829      	bhi.n	8006d00 <UART_SetConfig+0x130>
 8006cac:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0xe4>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006ce9 	.word	0x08006ce9
 8006cb8:	08006d01 	.word	0x08006d01
 8006cbc:	08006d01 	.word	0x08006d01
 8006cc0:	08006d01 	.word	0x08006d01
 8006cc4:	08006cf5 	.word	0x08006cf5
 8006cc8:	08006d01 	.word	0x08006d01
 8006ccc:	08006d01 	.word	0x08006d01
 8006cd0:	08006d01 	.word	0x08006d01
 8006cd4:	08006cef 	.word	0x08006cef
 8006cd8:	08006d01 	.word	0x08006d01
 8006cdc:	08006d01 	.word	0x08006d01
 8006ce0:	08006d01 	.word	0x08006d01
 8006ce4:	08006cfb 	.word	0x08006cfb
 8006ce8:	2300      	movs	r3, #0
 8006cea:	77fb      	strb	r3, [r7, #31]
 8006cec:	e117      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	77fb      	strb	r3, [r7, #31]
 8006cf2:	e114      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e111      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006cfa:	2308      	movs	r3, #8
 8006cfc:	77fb      	strb	r3, [r7, #31]
 8006cfe:	e10e      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d00:	2310      	movs	r3, #16
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	bf00      	nop
 8006d06:	e10a      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a71      	ldr	r2, [pc, #452]	; (8006ed4 <UART_SetConfig+0x304>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d120      	bne.n	8006d54 <UART_SetConfig+0x184>
 8006d12:	4b6e      	ldr	r3, [pc, #440]	; (8006ecc <UART_SetConfig+0x2fc>)
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d00f      	beq.n	8006d40 <UART_SetConfig+0x170>
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d802      	bhi.n	8006d2a <UART_SetConfig+0x15a>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <UART_SetConfig+0x164>
 8006d28:	e010      	b.n	8006d4c <UART_SetConfig+0x17c>
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d005      	beq.n	8006d3a <UART_SetConfig+0x16a>
 8006d2e:	2b30      	cmp	r3, #48	; 0x30
 8006d30:	d009      	beq.n	8006d46 <UART_SetConfig+0x176>
 8006d32:	e00b      	b.n	8006d4c <UART_SetConfig+0x17c>
 8006d34:	2300      	movs	r3, #0
 8006d36:	77fb      	strb	r3, [r7, #31]
 8006d38:	e0f1      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	77fb      	strb	r3, [r7, #31]
 8006d3e:	e0ee      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d40:	2304      	movs	r3, #4
 8006d42:	77fb      	strb	r3, [r7, #31]
 8006d44:	e0eb      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d46:	2308      	movs	r3, #8
 8006d48:	77fb      	strb	r3, [r7, #31]
 8006d4a:	e0e8      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	bf00      	nop
 8006d52:	e0e4      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a5f      	ldr	r2, [pc, #380]	; (8006ed8 <UART_SetConfig+0x308>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d120      	bne.n	8006da0 <UART_SetConfig+0x1d0>
 8006d5e:	4b5b      	ldr	r3, [pc, #364]	; (8006ecc <UART_SetConfig+0x2fc>)
 8006d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d00f      	beq.n	8006d8c <UART_SetConfig+0x1bc>
 8006d6c:	2b40      	cmp	r3, #64	; 0x40
 8006d6e:	d802      	bhi.n	8006d76 <UART_SetConfig+0x1a6>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <UART_SetConfig+0x1b0>
 8006d74:	e010      	b.n	8006d98 <UART_SetConfig+0x1c8>
 8006d76:	2b80      	cmp	r3, #128	; 0x80
 8006d78:	d005      	beq.n	8006d86 <UART_SetConfig+0x1b6>
 8006d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d7c:	d009      	beq.n	8006d92 <UART_SetConfig+0x1c2>
 8006d7e:	e00b      	b.n	8006d98 <UART_SetConfig+0x1c8>
 8006d80:	2300      	movs	r3, #0
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e0cb      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d86:	2302      	movs	r3, #2
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e0c8      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e0c5      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d92:	2308      	movs	r3, #8
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e0c2      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	bf00      	nop
 8006d9e:	e0be      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a4d      	ldr	r2, [pc, #308]	; (8006edc <UART_SetConfig+0x30c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d124      	bne.n	8006df4 <UART_SetConfig+0x224>
 8006daa:	4b48      	ldr	r3, [pc, #288]	; (8006ecc <UART_SetConfig+0x2fc>)
 8006dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db8:	d012      	beq.n	8006de0 <UART_SetConfig+0x210>
 8006dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dbe:	d802      	bhi.n	8006dc6 <UART_SetConfig+0x1f6>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d007      	beq.n	8006dd4 <UART_SetConfig+0x204>
 8006dc4:	e012      	b.n	8006dec <UART_SetConfig+0x21c>
 8006dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dca:	d006      	beq.n	8006dda <UART_SetConfig+0x20a>
 8006dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dd0:	d009      	beq.n	8006de6 <UART_SetConfig+0x216>
 8006dd2:	e00b      	b.n	8006dec <UART_SetConfig+0x21c>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e0a1      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e09e      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006de0:	2304      	movs	r3, #4
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e09b      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006de6:	2308      	movs	r3, #8
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e098      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006dec:	2310      	movs	r3, #16
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	bf00      	nop
 8006df2:	e094      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a39      	ldr	r2, [pc, #228]	; (8006ee0 <UART_SetConfig+0x310>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d124      	bne.n	8006e48 <UART_SetConfig+0x278>
 8006dfe:	4b33      	ldr	r3, [pc, #204]	; (8006ecc <UART_SetConfig+0x2fc>)
 8006e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0c:	d012      	beq.n	8006e34 <UART_SetConfig+0x264>
 8006e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e12:	d802      	bhi.n	8006e1a <UART_SetConfig+0x24a>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d007      	beq.n	8006e28 <UART_SetConfig+0x258>
 8006e18:	e012      	b.n	8006e40 <UART_SetConfig+0x270>
 8006e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1e:	d006      	beq.n	8006e2e <UART_SetConfig+0x25e>
 8006e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e24:	d009      	beq.n	8006e3a <UART_SetConfig+0x26a>
 8006e26:	e00b      	b.n	8006e40 <UART_SetConfig+0x270>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e077      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e074      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e34:	2304      	movs	r3, #4
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e071      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e06e      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e40:	2310      	movs	r3, #16
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	bf00      	nop
 8006e46:	e06a      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a25      	ldr	r2, [pc, #148]	; (8006ee4 <UART_SetConfig+0x314>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d124      	bne.n	8006e9c <UART_SetConfig+0x2cc>
 8006e52:	4b1e      	ldr	r3, [pc, #120]	; (8006ecc <UART_SetConfig+0x2fc>)
 8006e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e60:	d012      	beq.n	8006e88 <UART_SetConfig+0x2b8>
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e66:	d802      	bhi.n	8006e6e <UART_SetConfig+0x29e>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <UART_SetConfig+0x2ac>
 8006e6c:	e012      	b.n	8006e94 <UART_SetConfig+0x2c4>
 8006e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e72:	d006      	beq.n	8006e82 <UART_SetConfig+0x2b2>
 8006e74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e78:	d009      	beq.n	8006e8e <UART_SetConfig+0x2be>
 8006e7a:	e00b      	b.n	8006e94 <UART_SetConfig+0x2c4>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e04d      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e82:	2302      	movs	r3, #2
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e04a      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e047      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e8e:	2308      	movs	r3, #8
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e044      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e94:	2310      	movs	r3, #16
 8006e96:	77fb      	strb	r3, [r7, #31]
 8006e98:	bf00      	nop
 8006e9a:	e040      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a11      	ldr	r2, [pc, #68]	; (8006ee8 <UART_SetConfig+0x318>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d139      	bne.n	8006f1a <UART_SetConfig+0x34a>
 8006ea6:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <UART_SetConfig+0x2fc>)
 8006ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb4:	d027      	beq.n	8006f06 <UART_SetConfig+0x336>
 8006eb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eba:	d817      	bhi.n	8006eec <UART_SetConfig+0x31c>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01c      	beq.n	8006efa <UART_SetConfig+0x32a>
 8006ec0:	e027      	b.n	8006f12 <UART_SetConfig+0x342>
 8006ec2:	bf00      	nop
 8006ec4:	efff69f3 	.word	0xefff69f3
 8006ec8:	40011000 	.word	0x40011000
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	40004400 	.word	0x40004400
 8006ed4:	40004800 	.word	0x40004800
 8006ed8:	40004c00 	.word	0x40004c00
 8006edc:	40005000 	.word	0x40005000
 8006ee0:	40011400 	.word	0x40011400
 8006ee4:	40007800 	.word	0x40007800
 8006ee8:	40007c00 	.word	0x40007c00
 8006eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef0:	d006      	beq.n	8006f00 <UART_SetConfig+0x330>
 8006ef2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ef6:	d009      	beq.n	8006f0c <UART_SetConfig+0x33c>
 8006ef8:	e00b      	b.n	8006f12 <UART_SetConfig+0x342>
 8006efa:	2300      	movs	r3, #0
 8006efc:	77fb      	strb	r3, [r7, #31]
 8006efe:	e00e      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006f00:	2302      	movs	r3, #2
 8006f02:	77fb      	strb	r3, [r7, #31]
 8006f04:	e00b      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006f06:	2304      	movs	r3, #4
 8006f08:	77fb      	strb	r3, [r7, #31]
 8006f0a:	e008      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	e005      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006f12:	2310      	movs	r3, #16
 8006f14:	77fb      	strb	r3, [r7, #31]
 8006f16:	bf00      	nop
 8006f18:	e001      	b.n	8006f1e <UART_SetConfig+0x34e>
 8006f1a:	2310      	movs	r3, #16
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f26:	d17f      	bne.n	8007028 <UART_SetConfig+0x458>
 8006f28:	7ffb      	ldrb	r3, [r7, #31]
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d85c      	bhi.n	8006fe8 <UART_SetConfig+0x418>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <UART_SetConfig+0x364>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f79 	.word	0x08006f79
 8006f3c:	08006f99 	.word	0x08006f99
 8006f40:	08006fe9 	.word	0x08006fe9
 8006f44:	08006fb1 	.word	0x08006fb1
 8006f48:	08006fe9 	.word	0x08006fe9
 8006f4c:	08006fe9 	.word	0x08006fe9
 8006f50:	08006fe9 	.word	0x08006fe9
 8006f54:	08006fd1 	.word	0x08006fd1
 8006f58:	f7fe feac 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	005a      	lsls	r2, r3, #1
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	441a      	add	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	e03a      	b.n	8006fee <UART_SetConfig+0x41e>
 8006f78:	f7fe feb0 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	005a      	lsls	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	441a      	add	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	e02a      	b.n	8006fee <UART_SetConfig+0x41e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	085a      	lsrs	r2, r3, #1
 8006f9e:	4b5f      	ldr	r3, [pc, #380]	; (800711c <UART_SetConfig+0x54c>)
 8006fa0:	4413      	add	r3, r2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6852      	ldr	r2, [r2, #4]
 8006fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	e01e      	b.n	8006fee <UART_SetConfig+0x41e>
 8006fb0:	f7fe fdc2 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	005a      	lsls	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	441a      	add	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	e00e      	b.n	8006fee <UART_SetConfig+0x41e>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	085b      	lsrs	r3, r3, #1
 8006fd6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	e002      	b.n	8006fee <UART_SetConfig+0x41e>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	75fb      	strb	r3, [r7, #23]
 8006fec:	bf00      	nop
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2b0f      	cmp	r3, #15
 8006ff2:	d916      	bls.n	8007022 <UART_SetConfig+0x452>
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffa:	d212      	bcs.n	8007022 <UART_SetConfig+0x452>
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f023 030f 	bic.w	r3, r3, #15
 8007004:	817b      	strh	r3, [r7, #10]
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	085b      	lsrs	r3, r3, #1
 800700a:	b29b      	uxth	r3, r3
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	b29a      	uxth	r2, r3
 8007012:	897b      	ldrh	r3, [r7, #10]
 8007014:	4313      	orrs	r3, r2
 8007016:	817b      	strh	r3, [r7, #10]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	897a      	ldrh	r2, [r7, #10]
 800701e:	60da      	str	r2, [r3, #12]
 8007020:	e070      	b.n	8007104 <UART_SetConfig+0x534>
 8007022:	2301      	movs	r3, #1
 8007024:	75fb      	strb	r3, [r7, #23]
 8007026:	e06d      	b.n	8007104 <UART_SetConfig+0x534>
 8007028:	7ffb      	ldrb	r3, [r7, #31]
 800702a:	2b08      	cmp	r3, #8
 800702c:	d859      	bhi.n	80070e2 <UART_SetConfig+0x512>
 800702e:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <UART_SetConfig+0x464>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	08007059 	.word	0x08007059
 8007038:	08007077 	.word	0x08007077
 800703c:	08007095 	.word	0x08007095
 8007040:	080070e3 	.word	0x080070e3
 8007044:	080070ad 	.word	0x080070ad
 8007048:	080070e3 	.word	0x080070e3
 800704c:	080070e3 	.word	0x080070e3
 8007050:	080070e3 	.word	0x080070e3
 8007054:	080070cb 	.word	0x080070cb
 8007058:	f7fe fe2c 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	085a      	lsrs	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	441a      	add	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007070:	b29b      	uxth	r3, r3
 8007072:	61bb      	str	r3, [r7, #24]
 8007074:	e038      	b.n	80070e8 <UART_SetConfig+0x518>
 8007076:	f7fe fe31 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	085a      	lsrs	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	441a      	add	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	fbb2 f3f3 	udiv	r3, r2, r3
 800708e:	b29b      	uxth	r3, r3
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e029      	b.n	80070e8 <UART_SetConfig+0x518>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	085a      	lsrs	r2, r3, #1
 800709a:	4b21      	ldr	r3, [pc, #132]	; (8007120 <UART_SetConfig+0x550>)
 800709c:	4413      	add	r3, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6852      	ldr	r2, [r2, #4]
 80070a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	e01d      	b.n	80070e8 <UART_SetConfig+0x518>
 80070ac:	f7fe fd44 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	085a      	lsrs	r2, r3, #1
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	441a      	add	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	e00e      	b.n	80070e8 <UART_SetConfig+0x518>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	b29b      	uxth	r3, r3
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	e002      	b.n	80070e8 <UART_SetConfig+0x518>
 80070e2:	2301      	movs	r3, #1
 80070e4:	75fb      	strb	r3, [r7, #23]
 80070e6:	bf00      	nop
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b0f      	cmp	r3, #15
 80070ec:	d908      	bls.n	8007100 <UART_SetConfig+0x530>
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f4:	d204      	bcs.n	8007100 <UART_SetConfig+0x530>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	60da      	str	r2, [r3, #12]
 80070fe:	e001      	b.n	8007104 <UART_SetConfig+0x534>
 8007100:	2301      	movs	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	661a      	str	r2, [r3, #96]	; 0x60
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	665a      	str	r2, [r3, #100]	; 0x64
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	4618      	mov	r0, r3
 8007114:	3720      	adds	r7, #32
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	01e84800 	.word	0x01e84800
 8007120:	00f42400 	.word	0x00f42400

08007124 <UART_AdvFeatureConfig>:
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <UART_AdvFeatureConfig+0x2a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0x4c>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <UART_AdvFeatureConfig+0x6e>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x90>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0xb2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	609a      	str	r2, [r3, #8]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0xd4>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01a      	beq.n	800723a <UART_AdvFeatureConfig+0x116>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007222:	d10a      	bne.n	800723a <UART_AdvFeatureConfig+0x116>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <UART_AdvFeatureConfig+0x138>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	605a      	str	r2, [r3, #4]
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_CheckIdleState>:
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	67da      	str	r2, [r3, #124]	; 0x7c
 8007276:	f7fc f93b 	bl	80034f0 <HAL_GetTick>
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b08      	cmp	r3, #8
 8007288:	d10e      	bne.n	80072a8 <UART_CheckIdleState+0x40>
 800728a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f82a 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <UART_CheckIdleState+0x40>
 80072a4:	2303      	movs	r3, #3
 80072a6:	e020      	b.n	80072ea <UART_CheckIdleState+0x82>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d10e      	bne.n	80072d4 <UART_CheckIdleState+0x6c>
 80072b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f814 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <UART_CheckIdleState+0x6c>
 80072d0:	2303      	movs	r3, #3
 80072d2:	e00a      	b.n	80072ea <UART_CheckIdleState+0x82>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	675a      	str	r2, [r3, #116]	; 0x74
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	679a      	str	r2, [r3, #120]	; 0x78
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80072e8:	2300      	movs	r3, #0
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <UART_WaitOnFlagUntilTimeout>:
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4613      	mov	r3, r2
 8007300:	71fb      	strb	r3, [r7, #7]
 8007302:	e05d      	b.n	80073c0 <UART_WaitOnFlagUntilTimeout+0xce>
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800730a:	d059      	beq.n	80073c0 <UART_WaitOnFlagUntilTimeout+0xce>
 800730c:	f7fc f8f0 	bl	80034f0 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	429a      	cmp	r2, r3
 800731a:	d302      	bcc.n	8007322 <UART_WaitOnFlagUntilTimeout+0x30>
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11b      	bne.n	800735a <UART_WaitOnFlagUntilTimeout+0x68>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	609a      	str	r2, [r3, #8]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	675a      	str	r2, [r3, #116]	; 0x74
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	679a      	str	r2, [r3, #120]	; 0x78
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8007356:	2303      	movs	r3, #3
 8007358:	e042      	b.n	80073e0 <UART_WaitOnFlagUntilTimeout+0xee>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d02b      	beq.n	80073c0 <UART_WaitOnFlagUntilTimeout+0xce>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007376:	d123      	bne.n	80073c0 <UART_WaitOnFlagUntilTimeout+0xce>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007380:	621a      	str	r2, [r3, #32]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	609a      	str	r2, [r3, #8]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	675a      	str	r2, [r3, #116]	; 0x74
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	679a      	str	r2, [r3, #120]	; 0x78
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	67da      	str	r2, [r3, #124]	; 0x7c
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80073bc:	2303      	movs	r3, #3
 80073be:	e00f      	b.n	80073e0 <UART_WaitOnFlagUntilTimeout+0xee>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69da      	ldr	r2, [r3, #28]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4013      	ands	r3, r2
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	bf0c      	ite	eq
 80073d0:	2301      	moveq	r3, #1
 80073d2:	2300      	movne	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d092      	beq.n	8007304 <UART_WaitOnFlagUntilTimeout+0x12>
 80073de:	2300      	movs	r3, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <SVC_Setup>:
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	bf00      	nop
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <osKernelInitialize>:
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	f3ef 8305 	mrs	r3, IPSR
 8007402:	60bb      	str	r3, [r7, #8]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10f      	bne.n	800742a <osKernelInitialize+0x32>
 800740a:	f3ef 8310 	mrs	r3, PRIMASK
 800740e:	607b      	str	r3, [r7, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d105      	bne.n	8007422 <osKernelInitialize+0x2a>
 8007416:	f3ef 8311 	mrs	r3, BASEPRI
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <osKernelInitialize+0x3a>
 8007422:	4b0e      	ldr	r3, [pc, #56]	; (800745c <osKernelInitialize+0x64>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d103      	bne.n	8007432 <osKernelInitialize+0x3a>
 800742a:	f06f 0305 	mvn.w	r3, #5
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	e00c      	b.n	800744c <osKernelInitialize+0x54>
 8007432:	4b0a      	ldr	r3, [pc, #40]	; (800745c <osKernelInitialize+0x64>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d105      	bne.n	8007446 <osKernelInitialize+0x4e>
 800743a:	4b08      	ldr	r3, [pc, #32]	; (800745c <osKernelInitialize+0x64>)
 800743c:	2201      	movs	r2, #1
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	e002      	b.n	800744c <osKernelInitialize+0x54>
 8007446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	200000d0 	.word	0x200000d0

08007460 <osKernelStart>:
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	f3ef 8305 	mrs	r3, IPSR
 800746a:	60bb      	str	r3, [r7, #8]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10f      	bne.n	8007492 <osKernelStart+0x32>
 8007472:	f3ef 8310 	mrs	r3, PRIMASK
 8007476:	607b      	str	r3, [r7, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <osKernelStart+0x2a>
 800747e:	f3ef 8311 	mrs	r3, BASEPRI
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d007      	beq.n	800749a <osKernelStart+0x3a>
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <osKernelStart+0x68>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d103      	bne.n	800749a <osKernelStart+0x3a>
 8007492:	f06f 0305 	mvn.w	r3, #5
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e010      	b.n	80074bc <osKernelStart+0x5c>
 800749a:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <osKernelStart+0x68>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d109      	bne.n	80074b6 <osKernelStart+0x56>
 80074a2:	f7ff ffa1 	bl	80073e8 <SVC_Setup>
 80074a6:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <osKernelStart+0x68>)
 80074a8:	2202      	movs	r2, #2
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	f001 ff10 	bl	80092d0 <vTaskStartScheduler>
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e002      	b.n	80074bc <osKernelStart+0x5c>
 80074b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200000d0 	.word	0x200000d0

080074cc <osThreadNew>:
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b090      	sub	sp, #64	; 0x40
 80074d0:	af04      	add	r7, sp, #16
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	2300      	movs	r3, #0
 80074da:	613b      	str	r3, [r7, #16]
 80074dc:	f3ef 8305 	mrs	r3, IPSR
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f040 808f 	bne.w	8007608 <osThreadNew+0x13c>
 80074ea:	f3ef 8310 	mrs	r3, PRIMASK
 80074ee:	61bb      	str	r3, [r7, #24]
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d105      	bne.n	8007502 <osThreadNew+0x36>
 80074f6:	f3ef 8311 	mrs	r3, BASEPRI
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <osThreadNew+0x3e>
 8007502:	4b44      	ldr	r3, [pc, #272]	; (8007614 <osThreadNew+0x148>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d07e      	beq.n	8007608 <osThreadNew+0x13c>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d07b      	beq.n	8007608 <osThreadNew+0x13c>
 8007510:	2380      	movs	r3, #128	; 0x80
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28
 8007514:	2318      	movs	r3, #24
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
 8007518:	2300      	movs	r3, #0
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800751c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d045      	beq.n	80075b4 <osThreadNew+0xe8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <osThreadNew+0x6a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <osThreadNew+0x78>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <osThreadNew+0x90>
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	2b38      	cmp	r3, #56	; 0x38
 800754e:	d805      	bhi.n	800755c <osThreadNew+0x90>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <osThreadNew+0x94>
 800755c:	2300      	movs	r3, #0
 800755e:	e054      	b.n	800760a <osThreadNew+0x13e>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <osThreadNew+0xa4>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	089b      	lsrs	r3, r3, #2
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00e      	beq.n	8007596 <osThreadNew+0xca>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b5b      	cmp	r3, #91	; 0x5b
 800757e:	d90a      	bls.n	8007596 <osThreadNew+0xca>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d006      	beq.n	8007596 <osThreadNew+0xca>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <osThreadNew+0xca>
 8007590:	2301      	movs	r3, #1
 8007592:	623b      	str	r3, [r7, #32]
 8007594:	e010      	b.n	80075b8 <osThreadNew+0xec>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <osThreadNew+0xec>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d108      	bne.n	80075b8 <osThreadNew+0xec>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d104      	bne.n	80075b8 <osThreadNew+0xec>
 80075ae:	2300      	movs	r3, #0
 80075b0:	623b      	str	r3, [r7, #32]
 80075b2:	e001      	b.n	80075b8 <osThreadNew+0xec>
 80075b4:	2300      	movs	r3, #0
 80075b6:	623b      	str	r3, [r7, #32]
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d110      	bne.n	80075e0 <osThreadNew+0x114>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6892      	ldr	r2, [r2, #8]
 80075c6:	9202      	str	r2, [sp, #8]
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f001 fc9f 	bl	8008f18 <xTaskCreateStatic>
 80075da:	4603      	mov	r3, r0
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	e013      	b.n	8007608 <osThreadNew+0x13c>
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d110      	bne.n	8007608 <osThreadNew+0x13c>
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	f107 0310 	add.w	r3, r7, #16
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 fced 	bl	8008fd8 <xTaskCreate>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b01      	cmp	r3, #1
 8007602:	d001      	beq.n	8007608 <osThreadNew+0x13c>
 8007604:	2300      	movs	r3, #0
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	4618      	mov	r0, r3
 800760c:	3730      	adds	r7, #48	; 0x30
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200000d0 	.word	0x200000d0

08007618 <osDelay>:
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	f3ef 8305 	mrs	r3, IPSR
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10f      	bne.n	800764c <osDelay+0x34>
 800762c:	f3ef 8310 	mrs	r3, PRIMASK
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d105      	bne.n	8007644 <osDelay+0x2c>
 8007638:	f3ef 8311 	mrs	r3, BASEPRI
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d007      	beq.n	8007654 <osDelay+0x3c>
 8007644:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <osDelay+0x58>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d103      	bne.n	8007654 <osDelay+0x3c>
 800764c:	f06f 0305 	mvn.w	r3, #5
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e007      	b.n	8007664 <osDelay+0x4c>
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <osDelay+0x4c>
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fe00 	bl	8009264 <vTaskDelay>
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	200000d0 	.word	0x200000d0

08007674 <osSemaphoreNew>:
 8007674:	b580      	push	{r7, lr}
 8007676:	b08c      	sub	sp, #48	; 0x30
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	2300      	movs	r3, #0
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
 8007684:	f3ef 8305 	mrs	r3, IPSR
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f040 8087 	bne.w	80077a0 <osSemaphoreNew+0x12c>
 8007692:	f3ef 8310 	mrs	r3, PRIMASK
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d105      	bne.n	80076aa <osSemaphoreNew+0x36>
 800769e:	f3ef 8311 	mrs	r3, BASEPRI
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <osSemaphoreNew+0x3e>
 80076aa:	4b40      	ldr	r3, [pc, #256]	; (80077ac <osSemaphoreNew+0x138>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d076      	beq.n	80077a0 <osSemaphoreNew+0x12c>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d073      	beq.n	80077a0 <osSemaphoreNew+0x12c>
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d86f      	bhi.n	80077a0 <osSemaphoreNew+0x12c>
 80076c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076c4:	623b      	str	r3, [r7, #32]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d015      	beq.n	80076f8 <osSemaphoreNew+0x84>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d006      	beq.n	80076e2 <osSemaphoreNew+0x6e>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	2b4f      	cmp	r3, #79	; 0x4f
 80076da:	d902      	bls.n	80076e2 <osSemaphoreNew+0x6e>
 80076dc:	2301      	movs	r3, #1
 80076de:	623b      	str	r3, [r7, #32]
 80076e0:	e00c      	b.n	80076fc <osSemaphoreNew+0x88>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d108      	bne.n	80076fc <osSemaphoreNew+0x88>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d104      	bne.n	80076fc <osSemaphoreNew+0x88>
 80076f2:	2300      	movs	r3, #0
 80076f4:	623b      	str	r3, [r7, #32]
 80076f6:	e001      	b.n	80076fc <osSemaphoreNew+0x88>
 80076f8:	2300      	movs	r3, #0
 80076fa:	623b      	str	r3, [r7, #32]
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007702:	d04d      	beq.n	80077a0 <osSemaphoreNew+0x12c>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d129      	bne.n	800775e <osSemaphoreNew+0xea>
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d10b      	bne.n	8007728 <osSemaphoreNew+0xb4>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	2303      	movs	r3, #3
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	4613      	mov	r3, r2
 800771a:	2200      	movs	r2, #0
 800771c:	2100      	movs	r1, #0
 800771e:	2001      	movs	r0, #1
 8007720:	f000 fbf4 	bl	8007f0c <xQueueGenericCreateStatic>
 8007724:	6278      	str	r0, [r7, #36]	; 0x24
 8007726:	e005      	b.n	8007734 <osSemaphoreNew+0xc0>
 8007728:	2203      	movs	r2, #3
 800772a:	2100      	movs	r1, #0
 800772c:	2001      	movs	r0, #1
 800772e:	f000 fc6a 	bl	8008006 <xQueueGenericCreate>
 8007732:	6278      	str	r0, [r7, #36]	; 0x24
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d022      	beq.n	8007780 <osSemaphoreNew+0x10c>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01f      	beq.n	8007780 <osSemaphoreNew+0x10c>
 8007740:	2300      	movs	r3, #0
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007748:	f000 fd30 	bl	80081ac <xQueueGenericSend>
 800774c:	4603      	mov	r3, r0
 800774e:	2b01      	cmp	r3, #1
 8007750:	d016      	beq.n	8007780 <osSemaphoreNew+0x10c>
 8007752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007754:	f001 fa0d 	bl	8008b72 <vQueueDelete>
 8007758:	2300      	movs	r3, #0
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
 800775c:	e010      	b.n	8007780 <osSemaphoreNew+0x10c>
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d108      	bne.n	8007776 <osSemaphoreNew+0x102>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	461a      	mov	r2, r3
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fcae 	bl	80080ce <xQueueCreateCountingSemaphoreStatic>
 8007772:	6278      	str	r0, [r7, #36]	; 0x24
 8007774:	e004      	b.n	8007780 <osSemaphoreNew+0x10c>
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 fce1 	bl	8008140 <xQueueCreateCountingSemaphore>
 800777e:	6278      	str	r0, [r7, #36]	; 0x24
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00c      	beq.n	80077a0 <osSemaphoreNew+0x12c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <osSemaphoreNew+0x120>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	e001      	b.n	8007798 <osSemaphoreNew+0x124>
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	69f9      	ldr	r1, [r7, #28]
 800779a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800779c:	f001 fb36 	bl	8008e0c <vQueueAddToRegistry>
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	4618      	mov	r0, r3
 80077a4:	3728      	adds	r7, #40	; 0x28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	200000d0 	.word	0x200000d0

080077b0 <osSemaphoreAcquire>:
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	2300      	movs	r3, #0
 80077c0:	61fb      	str	r3, [r7, #28]
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d103      	bne.n	80077d0 <osSemaphoreAcquire+0x20>
 80077c8:	f06f 0303 	mvn.w	r3, #3
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	e04b      	b.n	8007868 <osSemaphoreAcquire+0xb8>
 80077d0:	f3ef 8305 	mrs	r3, IPSR
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10f      	bne.n	80077fc <osSemaphoreAcquire+0x4c>
 80077dc:	f3ef 8310 	mrs	r3, PRIMASK
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d105      	bne.n	80077f4 <osSemaphoreAcquire+0x44>
 80077e8:	f3ef 8311 	mrs	r3, BASEPRI
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d026      	beq.n	8007842 <osSemaphoreAcquire+0x92>
 80077f4:	4b1f      	ldr	r3, [pc, #124]	; (8007874 <osSemaphoreAcquire+0xc4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d122      	bne.n	8007842 <osSemaphoreAcquire+0x92>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <osSemaphoreAcquire+0x5a>
 8007802:	f06f 0303 	mvn.w	r3, #3
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	e02d      	b.n	8007866 <osSemaphoreAcquire+0xb6>
 800780a:	2300      	movs	r3, #0
 800780c:	60bb      	str	r3, [r7, #8]
 800780e:	f107 0308 	add.w	r3, r7, #8
 8007812:	461a      	mov	r2, r3
 8007814:	2100      	movs	r1, #0
 8007816:	69b8      	ldr	r0, [r7, #24]
 8007818:	f001 f8ea 	bl	80089f0 <xQueueReceiveFromISR>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d003      	beq.n	800782a <osSemaphoreAcquire+0x7a>
 8007822:	f06f 0302 	mvn.w	r3, #2
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	e01d      	b.n	8007866 <osSemaphoreAcquire+0xb6>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01a      	beq.n	8007866 <osSemaphoreAcquire+0xb6>
 8007830:	4b11      	ldr	r3, [pc, #68]	; (8007878 <osSemaphoreAcquire+0xc8>)
 8007832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	e011      	b.n	8007866 <osSemaphoreAcquire+0xb6>
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	69b8      	ldr	r0, [r7, #24]
 8007846:	f000 ffc3 	bl	80087d0 <xQueueSemaphoreTake>
 800784a:	4603      	mov	r3, r0
 800784c:	2b01      	cmp	r3, #1
 800784e:	d00b      	beq.n	8007868 <osSemaphoreAcquire+0xb8>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <osSemaphoreAcquire+0xae>
 8007856:	f06f 0301 	mvn.w	r3, #1
 800785a:	61fb      	str	r3, [r7, #28]
 800785c:	e004      	b.n	8007868 <osSemaphoreAcquire+0xb8>
 800785e:	f06f 0302 	mvn.w	r3, #2
 8007862:	61fb      	str	r3, [r7, #28]
 8007864:	e000      	b.n	8007868 <osSemaphoreAcquire+0xb8>
 8007866:	bf00      	nop
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	200000d0 	.word	0x200000d0
 8007878:	e000ed04 	.word	0xe000ed04

0800787c <osSemaphoreRelease>:
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	2300      	movs	r3, #0
 800788a:	61fb      	str	r3, [r7, #28]
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d103      	bne.n	800789a <osSemaphoreRelease+0x1e>
 8007892:	f06f 0303 	mvn.w	r3, #3
 8007896:	61fb      	str	r3, [r7, #28]
 8007898:	e03e      	b.n	8007918 <osSemaphoreRelease+0x9c>
 800789a:	f3ef 8305 	mrs	r3, IPSR
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10f      	bne.n	80078c6 <osSemaphoreRelease+0x4a>
 80078a6:	f3ef 8310 	mrs	r3, PRIMASK
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <osSemaphoreRelease+0x42>
 80078b2:	f3ef 8311 	mrs	r3, BASEPRI
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01e      	beq.n	80078fc <osSemaphoreRelease+0x80>
 80078be:	4b19      	ldr	r3, [pc, #100]	; (8007924 <osSemaphoreRelease+0xa8>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d11a      	bne.n	80078fc <osSemaphoreRelease+0x80>
 80078c6:	2300      	movs	r3, #0
 80078c8:	60bb      	str	r3, [r7, #8]
 80078ca:	f107 0308 	add.w	r3, r7, #8
 80078ce:	4619      	mov	r1, r3
 80078d0:	69b8      	ldr	r0, [r7, #24]
 80078d2:	f000 fe09 	bl	80084e8 <xQueueGiveFromISR>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d003      	beq.n	80078e4 <osSemaphoreRelease+0x68>
 80078dc:	f06f 0302 	mvn.w	r3, #2
 80078e0:	61fb      	str	r3, [r7, #28]
 80078e2:	e018      	b.n	8007916 <osSemaphoreRelease+0x9a>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d015      	beq.n	8007916 <osSemaphoreRelease+0x9a>
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <osSemaphoreRelease+0xac>)
 80078ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	e00c      	b.n	8007916 <osSemaphoreRelease+0x9a>
 80078fc:	2300      	movs	r3, #0
 80078fe:	2200      	movs	r2, #0
 8007900:	2100      	movs	r1, #0
 8007902:	69b8      	ldr	r0, [r7, #24]
 8007904:	f000 fc52 	bl	80081ac <xQueueGenericSend>
 8007908:	4603      	mov	r3, r0
 800790a:	2b01      	cmp	r3, #1
 800790c:	d004      	beq.n	8007918 <osSemaphoreRelease+0x9c>
 800790e:	f06f 0302 	mvn.w	r3, #2
 8007912:	61fb      	str	r3, [r7, #28]
 8007914:	e000      	b.n	8007918 <osSemaphoreRelease+0x9c>
 8007916:	bf00      	nop
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	200000d0 	.word	0x200000d0
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <osMessageQueueNew>:
 800792c:	b580      	push	{r7, lr}
 800792e:	b08c      	sub	sp, #48	; 0x30
 8007930:	af02      	add	r7, sp, #8
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	2300      	movs	r3, #0
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
 800793c:	f3ef 8305 	mrs	r3, IPSR
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d170      	bne.n	8007a2a <osMessageQueueNew+0xfe>
 8007948:	f3ef 8310 	mrs	r3, PRIMASK
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <osMessageQueueNew+0x34>
 8007954:	f3ef 8311 	mrs	r3, BASEPRI
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <osMessageQueueNew+0x3c>
 8007960:	4b34      	ldr	r3, [pc, #208]	; (8007a34 <osMessageQueueNew+0x108>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b02      	cmp	r3, #2
 8007966:	d060      	beq.n	8007a2a <osMessageQueueNew+0xfe>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d05d      	beq.n	8007a2a <osMessageQueueNew+0xfe>
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d05a      	beq.n	8007a2a <osMessageQueueNew+0xfe>
 8007974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007978:	623b      	str	r3, [r7, #32]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d029      	beq.n	80079d4 <osMessageQueueNew+0xa8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d012      	beq.n	80079ae <osMessageQueueNew+0x82>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	2b4f      	cmp	r3, #79	; 0x4f
 800798e:	d90e      	bls.n	80079ae <osMessageQueueNew+0x82>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <osMessageQueueNew+0x82>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	695a      	ldr	r2, [r3, #20]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68b9      	ldr	r1, [r7, #8]
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d302      	bcc.n	80079ae <osMessageQueueNew+0x82>
 80079a8:	2301      	movs	r3, #1
 80079aa:	623b      	str	r3, [r7, #32]
 80079ac:	e014      	b.n	80079d8 <osMessageQueueNew+0xac>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d110      	bne.n	80079d8 <osMessageQueueNew+0xac>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10c      	bne.n	80079d8 <osMessageQueueNew+0xac>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d108      	bne.n	80079d8 <osMessageQueueNew+0xac>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <osMessageQueueNew+0xac>
 80079ce:	2300      	movs	r3, #0
 80079d0:	623b      	str	r3, [r7, #32]
 80079d2:	e001      	b.n	80079d8 <osMessageQueueNew+0xac>
 80079d4:	2300      	movs	r3, #0
 80079d6:	623b      	str	r3, [r7, #32]
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d10c      	bne.n	80079f8 <osMessageQueueNew+0xcc>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6899      	ldr	r1, [r3, #8]
 80079e6:	2300      	movs	r3, #0
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	460b      	mov	r3, r1
 80079ec:	68b9      	ldr	r1, [r7, #8]
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 fa8c 	bl	8007f0c <xQueueGenericCreateStatic>
 80079f4:	6278      	str	r0, [r7, #36]	; 0x24
 80079f6:	e008      	b.n	8007a0a <osMessageQueueNew+0xde>
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d105      	bne.n	8007a0a <osMessageQueueNew+0xde>
 80079fe:	2200      	movs	r2, #0
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 faff 	bl	8008006 <xQueueGenericCreate>
 8007a08:	6278      	str	r0, [r7, #36]	; 0x24
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00c      	beq.n	8007a2a <osMessageQueueNew+0xfe>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <osMessageQueueNew+0xf2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	e001      	b.n	8007a22 <osMessageQueueNew+0xf6>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
 8007a22:	69f9      	ldr	r1, [r7, #28]
 8007a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a26:	f001 f9f1 	bl	8008e0c <vQueueAddToRegistry>
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3728      	adds	r7, #40	; 0x28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	200000d0 	.word	0x200000d0

08007a38 <osMessageQueuePut>:
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	4613      	mov	r3, r2
 8007a46:	71fb      	strb	r3, [r7, #7]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	623b      	str	r3, [r7, #32]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a50:	f3ef 8305 	mrs	r3, IPSR
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10f      	bne.n	8007a7c <osMessageQueuePut+0x44>
 8007a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d105      	bne.n	8007a74 <osMessageQueuePut+0x3c>
 8007a68:	f3ef 8311 	mrs	r3, BASEPRI
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d02c      	beq.n	8007ace <osMessageQueuePut+0x96>
 8007a74:	4b28      	ldr	r3, [pc, #160]	; (8007b18 <osMessageQueuePut+0xe0>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d128      	bne.n	8007ace <osMessageQueuePut+0x96>
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <osMessageQueuePut+0x56>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <osMessageQueuePut+0x56>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <osMessageQueuePut+0x5e>
 8007a8e:	f06f 0303 	mvn.w	r3, #3
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
 8007a94:	e039      	b.n	8007b0a <osMessageQueuePut+0xd2>
 8007a96:	2300      	movs	r3, #0
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	f107 0210 	add.w	r2, r7, #16
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	6a38      	ldr	r0, [r7, #32]
 8007aa4:	f000 fc84 	bl	80083b0 <xQueueGenericSendFromISR>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d003      	beq.n	8007ab6 <osMessageQueuePut+0x7e>
 8007aae:	f06f 0302 	mvn.w	r3, #2
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab4:	e029      	b.n	8007b0a <osMessageQueuePut+0xd2>
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d026      	beq.n	8007b0a <osMessageQueuePut+0xd2>
 8007abc:	4b17      	ldr	r3, [pc, #92]	; (8007b1c <osMessageQueuePut+0xe4>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	e01d      	b.n	8007b0a <osMessageQueuePut+0xd2>
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <osMessageQueuePut+0xa2>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d103      	bne.n	8007ae2 <osMessageQueuePut+0xaa>
 8007ada:	f06f 0303 	mvn.w	r3, #3
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae0:	e014      	b.n	8007b0c <osMessageQueuePut+0xd4>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	6a38      	ldr	r0, [r7, #32]
 8007aea:	f000 fb5f 	bl	80081ac <xQueueGenericSend>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d00b      	beq.n	8007b0c <osMessageQueuePut+0xd4>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <osMessageQueuePut+0xca>
 8007afa:	f06f 0301 	mvn.w	r3, #1
 8007afe:	627b      	str	r3, [r7, #36]	; 0x24
 8007b00:	e004      	b.n	8007b0c <osMessageQueuePut+0xd4>
 8007b02:	f06f 0302 	mvn.w	r3, #2
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
 8007b08:	e000      	b.n	8007b0c <osMessageQueuePut+0xd4>
 8007b0a:	bf00      	nop
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3728      	adds	r7, #40	; 0x28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200000d0 	.word	0x200000d0
 8007b1c:	e000ed04 	.word	0xe000ed04

08007b20 <osMessageQueueGet>:
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08a      	sub	sp, #40	; 0x28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	623b      	str	r3, [r7, #32]
 8007b32:	2300      	movs	r3, #0
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
 8007b36:	f3ef 8305 	mrs	r3, IPSR
 8007b3a:	61fb      	str	r3, [r7, #28]
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10f      	bne.n	8007b62 <osMessageQueueGet+0x42>
 8007b42:	f3ef 8310 	mrs	r3, PRIMASK
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <osMessageQueueGet+0x3a>
 8007b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d02c      	beq.n	8007bb4 <osMessageQueueGet+0x94>
 8007b5a:	4b28      	ldr	r3, [pc, #160]	; (8007bfc <osMessageQueueGet+0xdc>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d128      	bne.n	8007bb4 <osMessageQueueGet+0x94>
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <osMessageQueueGet+0x54>
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <osMessageQueueGet+0x54>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <osMessageQueueGet+0x5c>
 8007b74:	f06f 0303 	mvn.w	r3, #3
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
 8007b7a:	e038      	b.n	8007bee <osMessageQueueGet+0xce>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	f107 0310 	add.w	r3, r7, #16
 8007b84:	461a      	mov	r2, r3
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	6a38      	ldr	r0, [r7, #32]
 8007b8a:	f000 ff31 	bl	80089f0 <xQueueReceiveFromISR>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d003      	beq.n	8007b9c <osMessageQueueGet+0x7c>
 8007b94:	f06f 0302 	mvn.w	r3, #2
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9a:	e028      	b.n	8007bee <osMessageQueueGet+0xce>
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d025      	beq.n	8007bee <osMessageQueueGet+0xce>
 8007ba2:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <osMessageQueueGet+0xe0>)
 8007ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	e01c      	b.n	8007bee <osMessageQueueGet+0xce>
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <osMessageQueueGet+0xa0>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <osMessageQueueGet+0xa8>
 8007bc0:	f06f 0303 	mvn.w	r3, #3
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc6:	e013      	b.n	8007bf0 <osMessageQueueGet+0xd0>
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	6a38      	ldr	r0, [r7, #32]
 8007bce:	f000 fd1d 	bl	800860c <xQueueReceive>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d00b      	beq.n	8007bf0 <osMessageQueueGet+0xd0>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <osMessageQueueGet+0xc6>
 8007bde:	f06f 0301 	mvn.w	r3, #1
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
 8007be4:	e004      	b.n	8007bf0 <osMessageQueueGet+0xd0>
 8007be6:	f06f 0302 	mvn.w	r3, #2
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
 8007bec:	e000      	b.n	8007bf0 <osMessageQueueGet+0xd0>
 8007bee:	bf00      	nop
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3728      	adds	r7, #40	; 0x28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200000d0 	.word	0x200000d0
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <osMessageQueueGetCount>:
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	61bb      	str	r3, [r7, #24]
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d102      	bne.n	8007c1c <osMessageQueueGetCount+0x18>
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	e01e      	b.n	8007c5a <osMessageQueueGetCount+0x56>
 8007c1c:	f3ef 8305 	mrs	r3, IPSR
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10f      	bne.n	8007c48 <osMessageQueueGetCount+0x44>
 8007c28:	f3ef 8310 	mrs	r3, PRIMASK
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d105      	bne.n	8007c40 <osMessageQueueGetCount+0x3c>
 8007c34:	f3ef 8311 	mrs	r3, BASEPRI
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d008      	beq.n	8007c52 <osMessageQueueGetCount+0x4e>
 8007c40:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <osMessageQueueGetCount+0x60>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d104      	bne.n	8007c52 <osMessageQueueGetCount+0x4e>
 8007c48:	69b8      	ldr	r0, [r7, #24]
 8007c4a:	f000 ff73 	bl	8008b34 <uxQueueMessagesWaitingFromISR>
 8007c4e:	61f8      	str	r0, [r7, #28]
 8007c50:	e003      	b.n	8007c5a <osMessageQueueGetCount+0x56>
 8007c52:	69b8      	ldr	r0, [r7, #24]
 8007c54:	f000 ff4f 	bl	8008af6 <uxQueueMessagesWaiting>
 8007c58:	61f8      	str	r0, [r7, #28]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	200000d0 	.word	0x200000d0

08007c68 <vApplicationGetIdleTaskMemory>:
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4a07      	ldr	r2, [pc, #28]	; (8007c94 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4a06      	ldr	r2, [pc, #24]	; (8007c98 <vApplicationGetIdleTaskMemory+0x30>)
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2280      	movs	r2, #128	; 0x80
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	200000d4 	.word	0x200000d4
 8007c98:	20000130 	.word	0x20000130

08007c9c <vApplicationGetTimerTaskMemory>:
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4a07      	ldr	r2, [pc, #28]	; (8007cc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	4a06      	ldr	r2, [pc, #24]	; (8007ccc <vApplicationGetTimerTaskMemory+0x30>)
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	bf00      	nop
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	20000330 	.word	0x20000330
 8007ccc:	2000038c 	.word	0x2000038c

08007cd0 <vListInitialise>:
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f103 0208 	add.w	r2, r3, #8
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	605a      	str	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ce8:	609a      	str	r2, [r3, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f103 0208 	add.w	r2, r3, #8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	60da      	str	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f103 0208 	add.w	r2, r3, #8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	611a      	str	r2, [r3, #16]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <vListInitialiseItem>:
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	611a      	str	r2, [r3, #16]
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <vListInsertEnd>:
 8007d2a:	b480      	push	{r7}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	605a      	str	r2, [r3, #4]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	609a      	str	r2, [r3, #8]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	605a      	str	r2, [r3, #4]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	609a      	str	r2, [r3, #8]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	611a      	str	r2, [r3, #16]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	bf00      	nop
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <vListInsert>:
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d88:	d103      	bne.n	8007d92 <vListInsert+0x20>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	e00c      	b.n	8007dac <vListInsert+0x3a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3308      	adds	r3, #8
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e002      	b.n	8007da0 <vListInsert+0x2e>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d2f6      	bcs.n	8007d9a <vListInsert+0x28>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	605a      	str	r2, [r3, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	609a      	str	r2, [r3, #8]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	609a      	str	r2, [r3, #8]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	605a      	str	r2, [r3, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	611a      	str	r2, [r3, #16]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <uxListRemove>:
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6892      	ldr	r2, [r2, #8]
 8007dfa:	609a      	str	r2, [r3, #8]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6852      	ldr	r2, [r2, #4]
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d103      	bne.n	8007e18 <uxListRemove+0x34>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	605a      	str	r2, [r3, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	611a      	str	r2, [r3, #16]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	1e5a      	subs	r2, r3, #1
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <xQueueGenericReset>:
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10b      	bne.n	8007e64 <xQueueGenericReset+0x2c>
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	b672      	cpsid	i
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	b662      	cpsie	i
 8007e60:	60bb      	str	r3, [r7, #8]
 8007e62:	e7fe      	b.n	8007e62 <xQueueGenericReset+0x2a>
 8007e64:	f002 fcc0 	bl	800a7e8 <vPortEnterCritical>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e70:	68f9      	ldr	r1, [r7, #12]
 8007e72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e74:	fb01 f303 	mul.w	r3, r1, r3
 8007e78:	441a      	add	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	609a      	str	r2, [r3, #8]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	605a      	str	r2, [r3, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e94:	3b01      	subs	r3, #1
 8007e96:	68f9      	ldr	r1, [r7, #12]
 8007e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e9a:	fb01 f303 	mul.w	r3, r1, r3
 8007e9e:	441a      	add	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	60da      	str	r2, [r3, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	22ff      	movs	r2, #255	; 0xff
 8007ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	22ff      	movs	r2, #255	; 0xff
 8007eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d114      	bne.n	8007ee4 <xQueueGenericReset+0xac>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d01a      	beq.n	8007ef8 <xQueueGenericReset+0xc0>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3310      	adds	r3, #16
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f001 fc90 	bl	80097ec <xTaskRemoveFromEventList>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d012      	beq.n	8007ef8 <xQueueGenericReset+0xc0>
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	; (8007f08 <xQueueGenericReset+0xd0>)
 8007ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	e009      	b.n	8007ef8 <xQueueGenericReset+0xc0>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3310      	adds	r3, #16
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff fef1 	bl	8007cd0 <vListInitialise>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3324      	adds	r3, #36	; 0x24
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff feec 	bl	8007cd0 <vListInitialise>
 8007ef8:	f002 fca8 	bl	800a84c <vPortExitCritical>
 8007efc:	2301      	movs	r3, #1
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <xQueueGenericCreateStatic>:
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08e      	sub	sp, #56	; 0x38
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xQueueGenericCreateStatic+0x2c>
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	b672      	cpsid	i
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	b662      	cpsie	i
 8007f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f36:	e7fe      	b.n	8007f36 <xQueueGenericCreateStatic+0x2a>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10b      	bne.n	8007f56 <xQueueGenericCreateStatic+0x4a>
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	b672      	cpsid	i
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	b662      	cpsie	i
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
 8007f54:	e7fe      	b.n	8007f54 <xQueueGenericCreateStatic+0x48>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <xQueueGenericCreateStatic+0x56>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <xQueueGenericCreateStatic+0x5a>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <xQueueGenericCreateStatic+0x5c>
 8007f66:	2300      	movs	r3, #0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10b      	bne.n	8007f84 <xQueueGenericCreateStatic+0x78>
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	b672      	cpsid	i
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	b662      	cpsie	i
 8007f80:	623b      	str	r3, [r7, #32]
 8007f82:	e7fe      	b.n	8007f82 <xQueueGenericCreateStatic+0x76>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d102      	bne.n	8007f90 <xQueueGenericCreateStatic+0x84>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <xQueueGenericCreateStatic+0x88>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <xQueueGenericCreateStatic+0x8a>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <xQueueGenericCreateStatic+0xa6>
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	b672      	cpsid	i
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	b662      	cpsie	i
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueGenericCreateStatic+0xa4>
 8007fb2:	2350      	movs	r3, #80	; 0x50
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b50      	cmp	r3, #80	; 0x50
 8007fba:	d00b      	beq.n	8007fd4 <xQueueGenericCreateStatic+0xc8>
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	b672      	cpsid	i
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	b662      	cpsie	i
 8007fd0:	61bb      	str	r3, [r7, #24]
 8007fd2:	e7fe      	b.n	8007fd2 <xQueueGenericCreateStatic+0xc6>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00d      	beq.n	8007ffc <xQueueGenericCreateStatic+0xf0>
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fe8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	68b9      	ldr	r1, [r7, #8]
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 f846 	bl	8008088 <prvInitialiseNewQueue>
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	4618      	mov	r0, r3
 8008000:	3730      	adds	r7, #48	; 0x30
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <xQueueGenericCreate>:
 8008006:	b580      	push	{r7, lr}
 8008008:	b08a      	sub	sp, #40	; 0x28
 800800a:	af02      	add	r7, sp, #8
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	4613      	mov	r3, r2
 8008012:	71fb      	strb	r3, [r7, #7]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10b      	bne.n	8008032 <xQueueGenericCreate+0x2c>
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	b672      	cpsid	i
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	b662      	cpsie	i
 800802e:	613b      	str	r3, [r7, #16]
 8008030:	e7fe      	b.n	8008030 <xQueueGenericCreate+0x2a>
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <xQueueGenericCreate+0x38>
 8008038:	2300      	movs	r3, #0
 800803a:	61fb      	str	r3, [r7, #28]
 800803c:	e004      	b.n	8008048 <xQueueGenericCreate+0x42>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	fb02 f303 	mul.w	r3, r2, r3
 8008046:	61fb      	str	r3, [r7, #28]
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	3350      	adds	r3, #80	; 0x50
 800804c:	4618      	mov	r0, r3
 800804e:	f002 fced 	bl	800aa2c <pvPortMalloc>
 8008052:	61b8      	str	r0, [r7, #24]
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d011      	beq.n	800807e <xQueueGenericCreate+0x78>
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	3350      	adds	r3, #80	; 0x50
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800806c:	79fa      	ldrb	r2, [r7, #7]
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4613      	mov	r3, r2
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f805 	bl	8008088 <prvInitialiseNewQueue>
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <prvInitialiseNewQueue>:
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	70fb      	strb	r3, [r7, #3]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d103      	bne.n	80080a4 <prvInitialiseNewQueue+0x1c>
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	e002      	b.n	80080aa <prvInitialiseNewQueue+0x22>
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	641a      	str	r2, [r3, #64]	; 0x40
 80080b6:	2101      	movs	r1, #1
 80080b8:	69b8      	ldr	r0, [r7, #24]
 80080ba:	f7ff febd 	bl	8007e38 <xQueueGenericReset>
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	78fa      	ldrb	r2, [r7, #3]
 80080c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <xQueueCreateCountingSemaphoreStatic>:
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b08a      	sub	sp, #40	; 0x28
 80080d2:	af02      	add	r7, sp, #8
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	607a      	str	r2, [r7, #4]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	b672      	cpsid	i
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	b662      	cpsie	i
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	e7fe      	b.n	80080f6 <xQueueCreateCountingSemaphoreStatic+0x28>
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d90b      	bls.n	8008118 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	b672      	cpsid	i
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	b662      	cpsie	i
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	e7fe      	b.n	8008116 <xQueueCreateCountingSemaphoreStatic+0x48>
 8008118:	2302      	movs	r3, #2
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	2100      	movs	r1, #0
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff fef2 	bl	8007f0c <xQueueGenericCreateStatic>
 8008128:	61f8      	str	r0, [r7, #28]
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <xQueueCreateCountingSemaphoreStatic+0x68>
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	639a      	str	r2, [r3, #56]	; 0x38
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4618      	mov	r0, r3
 800813a:	3720      	adds	r7, #32
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <xQueueCreateCountingSemaphore>:
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10b      	bne.n	8008168 <xQueueCreateCountingSemaphore+0x28>
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	b672      	cpsid	i
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	b662      	cpsie	i
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	e7fe      	b.n	8008166 <xQueueCreateCountingSemaphore+0x26>
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	429a      	cmp	r2, r3
 800816e:	d90b      	bls.n	8008188 <xQueueCreateCountingSemaphore+0x48>
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	b672      	cpsid	i
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	b662      	cpsie	i
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	e7fe      	b.n	8008186 <xQueueCreateCountingSemaphore+0x46>
 8008188:	2202      	movs	r2, #2
 800818a:	2100      	movs	r1, #0
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff ff3a 	bl	8008006 <xQueueGenericCreate>
 8008192:	6178      	str	r0, [r7, #20]
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <xQueueCreateCountingSemaphore+0x60>
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	639a      	str	r2, [r3, #56]	; 0x38
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <xQueueGenericSend>:
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08e      	sub	sp, #56	; 0x38
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
 80081ba:	2300      	movs	r3, #0
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	633b      	str	r3, [r7, #48]	; 0x30
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10b      	bne.n	80081e0 <xQueueGenericSend+0x34>
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	b672      	cpsid	i
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	b662      	cpsie	i
 80081dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80081de:	e7fe      	b.n	80081de <xQueueGenericSend+0x32>
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d103      	bne.n	80081ee <xQueueGenericSend+0x42>
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <xQueueGenericSend+0x46>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e000      	b.n	80081f4 <xQueueGenericSend+0x48>
 80081f2:	2300      	movs	r3, #0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10b      	bne.n	8008210 <xQueueGenericSend+0x64>
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	b672      	cpsid	i
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	b662      	cpsie	i
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
 800820e:	e7fe      	b.n	800820e <xQueueGenericSend+0x62>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d103      	bne.n	800821e <xQueueGenericSend+0x72>
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <xQueueGenericSend+0x76>
 800821e:	2301      	movs	r3, #1
 8008220:	e000      	b.n	8008224 <xQueueGenericSend+0x78>
 8008222:	2300      	movs	r3, #0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10b      	bne.n	8008240 <xQueueGenericSend+0x94>
 8008228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822c:	b672      	cpsid	i
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	b662      	cpsie	i
 800823c:	623b      	str	r3, [r7, #32]
 800823e:	e7fe      	b.n	800823e <xQueueGenericSend+0x92>
 8008240:	f001 fc92 	bl	8009b68 <xTaskGetSchedulerState>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <xQueueGenericSend+0xa4>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <xQueueGenericSend+0xa8>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <xQueueGenericSend+0xaa>
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10b      	bne.n	8008272 <xQueueGenericSend+0xc6>
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	b672      	cpsid	i
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	b662      	cpsie	i
 800826e:	61fb      	str	r3, [r7, #28]
 8008270:	e7fe      	b.n	8008270 <xQueueGenericSend+0xc4>
 8008272:	f002 fab9 	bl	800a7e8 <vPortEnterCritical>
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827e:	429a      	cmp	r2, r3
 8008280:	d302      	bcc.n	8008288 <xQueueGenericSend+0xdc>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d129      	bne.n	80082dc <xQueueGenericSend+0x130>
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	68b9      	ldr	r1, [r7, #8]
 800828c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800828e:	f000 fcac 	bl	8008bea <prvCopyDataToQueue>
 8008292:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	d010      	beq.n	80082be <xQueueGenericSend+0x112>
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	3324      	adds	r3, #36	; 0x24
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 faa3 	bl	80097ec <xTaskRemoveFromEventList>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d013      	beq.n	80082d4 <xQueueGenericSend+0x128>
 80082ac:	4b3f      	ldr	r3, [pc, #252]	; (80083ac <xQueueGenericSend+0x200>)
 80082ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	e00a      	b.n	80082d4 <xQueueGenericSend+0x128>
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <xQueueGenericSend+0x128>
 80082c4:	4b39      	ldr	r3, [pc, #228]	; (80083ac <xQueueGenericSend+0x200>)
 80082c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f002 faba 	bl	800a84c <vPortExitCritical>
 80082d8:	2301      	movs	r3, #1
 80082da:	e063      	b.n	80083a4 <xQueueGenericSend+0x1f8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <xQueueGenericSend+0x13e>
 80082e2:	f002 fab3 	bl	800a84c <vPortExitCritical>
 80082e6:	2300      	movs	r3, #0
 80082e8:	e05c      	b.n	80083a4 <xQueueGenericSend+0x1f8>
 80082ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d106      	bne.n	80082fe <xQueueGenericSend+0x152>
 80082f0:	f107 0314 	add.w	r3, r7, #20
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 fadd 	bl	80098b4 <vTaskInternalSetTimeOutState>
 80082fa:	2301      	movs	r3, #1
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34
 80082fe:	f002 faa5 	bl	800a84c <vPortExitCritical>
 8008302:	f001 f84d 	bl	80093a0 <vTaskSuspendAll>
 8008306:	f002 fa6f 	bl	800a7e8 <vPortEnterCritical>
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008310:	b25b      	sxtb	r3, r3
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008316:	d103      	bne.n	8008320 <xQueueGenericSend+0x174>
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008326:	b25b      	sxtb	r3, r3
 8008328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800832c:	d103      	bne.n	8008336 <xQueueGenericSend+0x18a>
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008336:	f002 fa89 	bl	800a84c <vPortExitCritical>
 800833a:	1d3a      	adds	r2, r7, #4
 800833c:	f107 0314 	add.w	r3, r7, #20
 8008340:	4611      	mov	r1, r2
 8008342:	4618      	mov	r0, r3
 8008344:	f001 facc 	bl	80098e0 <xTaskCheckForTimeOut>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d124      	bne.n	8008398 <xQueueGenericSend+0x1ec>
 800834e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008350:	f000 fd43 	bl	8008dda <prvIsQueueFull>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d018      	beq.n	800838c <xQueueGenericSend+0x1e0>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	3310      	adds	r3, #16
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	4611      	mov	r1, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f001 f9f0 	bl	8009748 <vTaskPlaceOnEventList>
 8008368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800836a:	f000 fcce 	bl	8008d0a <prvUnlockQueue>
 800836e:	f001 f825 	bl	80093bc <xTaskResumeAll>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	f47f af7c 	bne.w	8008272 <xQueueGenericSend+0xc6>
 800837a:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <xQueueGenericSend+0x200>)
 800837c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	e772      	b.n	8008272 <xQueueGenericSend+0xc6>
 800838c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800838e:	f000 fcbc 	bl	8008d0a <prvUnlockQueue>
 8008392:	f001 f813 	bl	80093bc <xTaskResumeAll>
 8008396:	e76c      	b.n	8008272 <xQueueGenericSend+0xc6>
 8008398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839a:	f000 fcb6 	bl	8008d0a <prvUnlockQueue>
 800839e:	f001 f80d 	bl	80093bc <xTaskResumeAll>
 80083a2:	2300      	movs	r3, #0
 80083a4:	4618      	mov	r0, r3
 80083a6:	3738      	adds	r7, #56	; 0x38
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <xQueueGenericSendFromISR>:
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08e      	sub	sp, #56	; 0x38
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	633b      	str	r3, [r7, #48]	; 0x30
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10b      	bne.n	80083e0 <xQueueGenericSendFromISR+0x30>
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	b672      	cpsid	i
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	b662      	cpsie	i
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
 80083de:	e7fe      	b.n	80083de <xQueueGenericSendFromISR+0x2e>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d103      	bne.n	80083ee <xQueueGenericSendFromISR+0x3e>
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <xQueueGenericSendFromISR+0x42>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e000      	b.n	80083f4 <xQueueGenericSendFromISR+0x44>
 80083f2:	2300      	movs	r3, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10b      	bne.n	8008410 <xQueueGenericSendFromISR+0x60>
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	b672      	cpsid	i
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	b662      	cpsie	i
 800840c:	623b      	str	r3, [r7, #32]
 800840e:	e7fe      	b.n	800840e <xQueueGenericSendFromISR+0x5e>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b02      	cmp	r3, #2
 8008414:	d103      	bne.n	800841e <xQueueGenericSendFromISR+0x6e>
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <xQueueGenericSendFromISR+0x72>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <xQueueGenericSendFromISR+0x74>
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10b      	bne.n	8008440 <xQueueGenericSendFromISR+0x90>
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	b672      	cpsid	i
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	b662      	cpsie	i
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	e7fe      	b.n	800843e <xQueueGenericSendFromISR+0x8e>
 8008440:	f002 fab2 	bl	800a9a8 <vPortValidateInterruptPriority>
 8008444:	f3ef 8211 	mrs	r2, BASEPRI
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	b672      	cpsid	i
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	b662      	cpsie	i
 800845c:	61ba      	str	r2, [r7, #24]
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846c:	429a      	cmp	r2, r3
 800846e:	d302      	bcc.n	8008476 <xQueueGenericSendFromISR+0xc6>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b02      	cmp	r3, #2
 8008474:	d12c      	bne.n	80084d0 <xQueueGenericSendFromISR+0x120>
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800847c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008486:	f000 fbb0 	bl	8008bea <prvCopyDataToQueue>
 800848a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800848e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008492:	d112      	bne.n	80084ba <xQueueGenericSendFromISR+0x10a>
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	2b00      	cmp	r3, #0
 800849a:	d016      	beq.n	80084ca <xQueueGenericSendFromISR+0x11a>
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	3324      	adds	r3, #36	; 0x24
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 f9a3 	bl	80097ec <xTaskRemoveFromEventList>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00e      	beq.n	80084ca <xQueueGenericSendFromISR+0x11a>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00b      	beq.n	80084ca <xQueueGenericSendFromISR+0x11a>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	e007      	b.n	80084ca <xQueueGenericSendFromISR+0x11a>
 80084ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084be:	3301      	adds	r3, #1
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	b25a      	sxtb	r2, r3
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084ca:	2301      	movs	r3, #1
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
 80084ce:	e001      	b.n	80084d4 <xQueueGenericSendFromISR+0x124>
 80084d0:	2300      	movs	r3, #0
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	613b      	str	r3, [r7, #16]
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e0:	4618      	mov	r0, r3
 80084e2:	3738      	adds	r7, #56	; 0x38
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <xQueueGiveFromISR>:
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08e      	sub	sp, #56	; 0x38
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	633b      	str	r3, [r7, #48]	; 0x30
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10b      	bne.n	8008514 <xQueueGiveFromISR+0x2c>
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	b672      	cpsid	i
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	b662      	cpsie	i
 8008510:	623b      	str	r3, [r7, #32]
 8008512:	e7fe      	b.n	8008512 <xQueueGiveFromISR+0x2a>
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00b      	beq.n	8008534 <xQueueGiveFromISR+0x4c>
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	b672      	cpsid	i
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	b662      	cpsie	i
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	e7fe      	b.n	8008532 <xQueueGiveFromISR+0x4a>
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d103      	bne.n	8008544 <xQueueGiveFromISR+0x5c>
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <xQueueGiveFromISR+0x60>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <xQueueGiveFromISR+0x62>
 8008548:	2300      	movs	r3, #0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10b      	bne.n	8008566 <xQueueGiveFromISR+0x7e>
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	b672      	cpsid	i
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	b662      	cpsie	i
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	e7fe      	b.n	8008564 <xQueueGiveFromISR+0x7c>
 8008566:	f002 fa1f 	bl	800a9a8 <vPortValidateInterruptPriority>
 800856a:	f3ef 8211 	mrs	r2, BASEPRI
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	b672      	cpsid	i
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	b662      	cpsie	i
 8008582:	617a      	str	r2, [r7, #20]
 8008584:	613b      	str	r3, [r7, #16]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008596:	429a      	cmp	r2, r3
 8008598:	d22b      	bcs.n	80085f2 <xQueueGiveFromISR+0x10a>
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
 80085ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085b4:	d112      	bne.n	80085dc <xQueueGiveFromISR+0xf4>
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d016      	beq.n	80085ec <xQueueGiveFromISR+0x104>
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	3324      	adds	r3, #36	; 0x24
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 f912 	bl	80097ec <xTaskRemoveFromEventList>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00e      	beq.n	80085ec <xQueueGiveFromISR+0x104>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <xQueueGiveFromISR+0x104>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2201      	movs	r2, #1
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e007      	b.n	80085ec <xQueueGiveFromISR+0x104>
 80085dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085e0:	3301      	adds	r3, #1
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	b25a      	sxtb	r2, r3
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ec:	2301      	movs	r3, #1
 80085ee:	637b      	str	r3, [r7, #52]	; 0x34
 80085f0:	e001      	b.n	80085f6 <xQueueGiveFromISR+0x10e>
 80085f2:	2300      	movs	r3, #0
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008602:	4618      	mov	r0, r3
 8008604:	3738      	adds	r7, #56	; 0x38
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
	...

0800860c <xQueueReceive>:
 800860c:	b580      	push	{r7, lr}
 800860e:	b08c      	sub	sp, #48	; 0x30
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	2300      	movs	r3, #0
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10b      	bne.n	800863e <xQueueReceive+0x32>
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	b672      	cpsid	i
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	b662      	cpsie	i
 800863a:	623b      	str	r3, [r7, #32]
 800863c:	e7fe      	b.n	800863c <xQueueReceive+0x30>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d103      	bne.n	800864c <xQueueReceive+0x40>
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <xQueueReceive+0x44>
 800864c:	2301      	movs	r3, #1
 800864e:	e000      	b.n	8008652 <xQueueReceive+0x46>
 8008650:	2300      	movs	r3, #0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10b      	bne.n	800866e <xQueueReceive+0x62>
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	b672      	cpsid	i
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	b662      	cpsie	i
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	e7fe      	b.n	800866c <xQueueReceive+0x60>
 800866e:	f001 fa7b 	bl	8009b68 <xTaskGetSchedulerState>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <xQueueReceive+0x72>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <xQueueReceive+0x76>
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <xQueueReceive+0x78>
 8008682:	2300      	movs	r3, #0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10b      	bne.n	80086a0 <xQueueReceive+0x94>
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	b672      	cpsid	i
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	b662      	cpsie	i
 800869c:	61bb      	str	r3, [r7, #24]
 800869e:	e7fe      	b.n	800869e <xQueueReceive+0x92>
 80086a0:	f002 f8a2 	bl	800a7e8 <vPortEnterCritical>
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01f      	beq.n	80086f0 <xQueueReceive+0xe4>
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b4:	f000 fb03 	bl	8008cbe <prvCopyDataFromQueue>
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	1e5a      	subs	r2, r3, #1
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	639a      	str	r2, [r3, #56]	; 0x38
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00f      	beq.n	80086e8 <xQueueReceive+0xdc>
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	3310      	adds	r3, #16
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 f88d 	bl	80097ec <xTaskRemoveFromEventList>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <xQueueReceive+0xdc>
 80086d8:	4b3c      	ldr	r3, [pc, #240]	; (80087cc <xQueueReceive+0x1c0>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f002 f8b0 	bl	800a84c <vPortExitCritical>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e069      	b.n	80087c4 <xQueueReceive+0x1b8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <xQueueReceive+0xf2>
 80086f6:	f002 f8a9 	bl	800a84c <vPortExitCritical>
 80086fa:	2300      	movs	r3, #0
 80086fc:	e062      	b.n	80087c4 <xQueueReceive+0x1b8>
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <xQueueReceive+0x106>
 8008704:	f107 0310 	add.w	r3, r7, #16
 8008708:	4618      	mov	r0, r3
 800870a:	f001 f8d3 	bl	80098b4 <vTaskInternalSetTimeOutState>
 800870e:	2301      	movs	r3, #1
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008712:	f002 f89b 	bl	800a84c <vPortExitCritical>
 8008716:	f000 fe43 	bl	80093a0 <vTaskSuspendAll>
 800871a:	f002 f865 	bl	800a7e8 <vPortEnterCritical>
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008724:	b25b      	sxtb	r3, r3
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800872a:	d103      	bne.n	8008734 <xQueueReceive+0x128>
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800873a:	b25b      	sxtb	r3, r3
 800873c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008740:	d103      	bne.n	800874a <xQueueReceive+0x13e>
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800874a:	f002 f87f 	bl	800a84c <vPortExitCritical>
 800874e:	1d3a      	adds	r2, r7, #4
 8008750:	f107 0310 	add.w	r3, r7, #16
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f8c2 	bl	80098e0 <xTaskCheckForTimeOut>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d123      	bne.n	80087aa <xQueueReceive+0x19e>
 8008762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008764:	f000 fb23 	bl	8008dae <prvIsQueueEmpty>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d017      	beq.n	800879e <xQueueReceive+0x192>
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	3324      	adds	r3, #36	; 0x24
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f000 ffe6 	bl	8009748 <vTaskPlaceOnEventList>
 800877c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800877e:	f000 fac4 	bl	8008d0a <prvUnlockQueue>
 8008782:	f000 fe1b 	bl	80093bc <xTaskResumeAll>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d189      	bne.n	80086a0 <xQueueReceive+0x94>
 800878c:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <xQueueReceive+0x1c0>)
 800878e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	e780      	b.n	80086a0 <xQueueReceive+0x94>
 800879e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a0:	f000 fab3 	bl	8008d0a <prvUnlockQueue>
 80087a4:	f000 fe0a 	bl	80093bc <xTaskResumeAll>
 80087a8:	e77a      	b.n	80086a0 <xQueueReceive+0x94>
 80087aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ac:	f000 faad 	bl	8008d0a <prvUnlockQueue>
 80087b0:	f000 fe04 	bl	80093bc <xTaskResumeAll>
 80087b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b6:	f000 fafa 	bl	8008dae <prvIsQueueEmpty>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f43f af6f 	beq.w	80086a0 <xQueueReceive+0x94>
 80087c2:	2300      	movs	r3, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	3730      	adds	r7, #48	; 0x30
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <xQueueSemaphoreTake>:
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	; 0x38
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
 80087da:	2300      	movs	r3, #0
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087e2:	2300      	movs	r3, #0
 80087e4:	633b      	str	r3, [r7, #48]	; 0x30
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10b      	bne.n	8008804 <xQueueSemaphoreTake+0x34>
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	b672      	cpsid	i
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	b662      	cpsie	i
 8008800:	623b      	str	r3, [r7, #32]
 8008802:	e7fe      	b.n	8008802 <xQueueSemaphoreTake+0x32>
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00b      	beq.n	8008824 <xQueueSemaphoreTake+0x54>
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	b672      	cpsid	i
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	b662      	cpsie	i
 8008820:	61fb      	str	r3, [r7, #28]
 8008822:	e7fe      	b.n	8008822 <xQueueSemaphoreTake+0x52>
 8008824:	f001 f9a0 	bl	8009b68 <xTaskGetSchedulerState>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <xQueueSemaphoreTake+0x64>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <xQueueSemaphoreTake+0x68>
 8008834:	2301      	movs	r3, #1
 8008836:	e000      	b.n	800883a <xQueueSemaphoreTake+0x6a>
 8008838:	2300      	movs	r3, #0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10b      	bne.n	8008856 <xQueueSemaphoreTake+0x86>
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	b672      	cpsid	i
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	b662      	cpsie	i
 8008852:	61bb      	str	r3, [r7, #24]
 8008854:	e7fe      	b.n	8008854 <xQueueSemaphoreTake+0x84>
 8008856:	f001 ffc7 	bl	800a7e8 <vPortEnterCritical>
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	2b00      	cmp	r3, #0
 8008864:	d024      	beq.n	80088b0 <xQueueSemaphoreTake+0xe0>
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	1e5a      	subs	r2, r3, #1
 800886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886c:	639a      	str	r2, [r3, #56]	; 0x38
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <xQueueSemaphoreTake+0xb0>
 8008876:	f001 faf1 	bl	8009e5c <pvTaskIncrementMutexHeldCount>
 800887a:	4602      	mov	r2, r0
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	609a      	str	r2, [r3, #8]
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00f      	beq.n	80088a8 <xQueueSemaphoreTake+0xd8>
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	3310      	adds	r3, #16
 800888c:	4618      	mov	r0, r3
 800888e:	f000 ffad 	bl	80097ec <xTaskRemoveFromEventList>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d007      	beq.n	80088a8 <xQueueSemaphoreTake+0xd8>
 8008898:	4b54      	ldr	r3, [pc, #336]	; (80089ec <xQueueSemaphoreTake+0x21c>)
 800889a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f001 ffd0 	bl	800a84c <vPortExitCritical>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e098      	b.n	80089e2 <xQueueSemaphoreTake+0x212>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d112      	bne.n	80088dc <xQueueSemaphoreTake+0x10c>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <xQueueSemaphoreTake+0x104>
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	b672      	cpsid	i
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	b662      	cpsie	i
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	e7fe      	b.n	80088d2 <xQueueSemaphoreTake+0x102>
 80088d4:	f001 ffba 	bl	800a84c <vPortExitCritical>
 80088d8:	2300      	movs	r3, #0
 80088da:	e082      	b.n	80089e2 <xQueueSemaphoreTake+0x212>
 80088dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <xQueueSemaphoreTake+0x120>
 80088e2:	f107 030c 	add.w	r3, r7, #12
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 ffe4 	bl	80098b4 <vTaskInternalSetTimeOutState>
 80088ec:	2301      	movs	r3, #1
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
 80088f0:	f001 ffac 	bl	800a84c <vPortExitCritical>
 80088f4:	f000 fd54 	bl	80093a0 <vTaskSuspendAll>
 80088f8:	f001 ff76 	bl	800a7e8 <vPortEnterCritical>
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008902:	b25b      	sxtb	r3, r3
 8008904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008908:	d103      	bne.n	8008912 <xQueueSemaphoreTake+0x142>
 800890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008918:	b25b      	sxtb	r3, r3
 800891a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800891e:	d103      	bne.n	8008928 <xQueueSemaphoreTake+0x158>
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008928:	f001 ff90 	bl	800a84c <vPortExitCritical>
 800892c:	463a      	mov	r2, r7
 800892e:	f107 030c 	add.w	r3, r7, #12
 8008932:	4611      	mov	r1, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f000 ffd3 	bl	80098e0 <xTaskCheckForTimeOut>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d132      	bne.n	80089a6 <xQueueSemaphoreTake+0x1d6>
 8008940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008942:	f000 fa34 	bl	8008dae <prvIsQueueEmpty>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d026      	beq.n	800899a <xQueueSemaphoreTake+0x1ca>
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <xQueueSemaphoreTake+0x198>
 8008954:	f001 ff48 	bl	800a7e8 <vPortEnterCritical>
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	4618      	mov	r0, r3
 800895e:	f001 f921 	bl	8009ba4 <xTaskPriorityInherit>
 8008962:	6338      	str	r0, [r7, #48]	; 0x30
 8008964:	f001 ff72 	bl	800a84c <vPortExitCritical>
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896a:	3324      	adds	r3, #36	; 0x24
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f000 fee9 	bl	8009748 <vTaskPlaceOnEventList>
 8008976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008978:	f000 f9c7 	bl	8008d0a <prvUnlockQueue>
 800897c:	f000 fd1e 	bl	80093bc <xTaskResumeAll>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	f47f af67 	bne.w	8008856 <xQueueSemaphoreTake+0x86>
 8008988:	4b18      	ldr	r3, [pc, #96]	; (80089ec <xQueueSemaphoreTake+0x21c>)
 800898a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	e75d      	b.n	8008856 <xQueueSemaphoreTake+0x86>
 800899a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800899c:	f000 f9b5 	bl	8008d0a <prvUnlockQueue>
 80089a0:	f000 fd0c 	bl	80093bc <xTaskResumeAll>
 80089a4:	e757      	b.n	8008856 <xQueueSemaphoreTake+0x86>
 80089a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089a8:	f000 f9af 	bl	8008d0a <prvUnlockQueue>
 80089ac:	f000 fd06 	bl	80093bc <xTaskResumeAll>
 80089b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089b2:	f000 f9fc 	bl	8008dae <prvIsQueueEmpty>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f43f af4c 	beq.w	8008856 <xQueueSemaphoreTake+0x86>
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00d      	beq.n	80089e0 <xQueueSemaphoreTake+0x210>
 80089c4:	f001 ff10 	bl	800a7e8 <vPortEnterCritical>
 80089c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089ca:	f000 f8f6 	bl	8008bba <prvGetDisinheritPriorityAfterTimeout>
 80089ce:	6278      	str	r0, [r7, #36]	; 0x24
 80089d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 f9bc 	bl	8009d54 <vTaskPriorityDisinheritAfterTimeout>
 80089dc:	f001 ff36 	bl	800a84c <vPortExitCritical>
 80089e0:	2300      	movs	r3, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	3738      	adds	r7, #56	; 0x38
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	e000ed04 	.word	0xe000ed04

080089f0 <xQueueReceiveFromISR>:
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08e      	sub	sp, #56	; 0x38
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <xQueueReceiveFromISR+0x2e>
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	b672      	cpsid	i
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	b662      	cpsie	i
 8008a1a:	623b      	str	r3, [r7, #32]
 8008a1c:	e7fe      	b.n	8008a1c <xQueueReceiveFromISR+0x2c>
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d103      	bne.n	8008a2c <xQueueReceiveFromISR+0x3c>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <xQueueReceiveFromISR+0x40>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e000      	b.n	8008a32 <xQueueReceiveFromISR+0x42>
 8008a30:	2300      	movs	r3, #0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10b      	bne.n	8008a4e <xQueueReceiveFromISR+0x5e>
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	b672      	cpsid	i
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	b662      	cpsie	i
 8008a4a:	61fb      	str	r3, [r7, #28]
 8008a4c:	e7fe      	b.n	8008a4c <xQueueReceiveFromISR+0x5c>
 8008a4e:	f001 ffab 	bl	800a9a8 <vPortValidateInterruptPriority>
 8008a52:	f3ef 8211 	mrs	r2, BASEPRI
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	b672      	cpsid	i
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	b662      	cpsie	i
 8008a6a:	61ba      	str	r2, [r7, #24]
 8008a6c:	617b      	str	r3, [r7, #20]
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d02f      	beq.n	8008ade <xQueueReceiveFromISR+0xee>
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a8c:	f000 f917 	bl	8008cbe <prvCopyDataFromQueue>
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	1e5a      	subs	r2, r3, #1
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
 8008a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aa0:	d112      	bne.n	8008ac8 <xQueueReceiveFromISR+0xd8>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d016      	beq.n	8008ad8 <xQueueReceiveFromISR+0xe8>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	3310      	adds	r3, #16
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 fe9c 	bl	80097ec <xTaskRemoveFromEventList>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00e      	beq.n	8008ad8 <xQueueReceiveFromISR+0xe8>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <xQueueReceiveFromISR+0xe8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	e007      	b.n	8008ad8 <xQueueReceiveFromISR+0xe8>
 8008ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008acc:	3301      	adds	r3, #1
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	b25a      	sxtb	r2, r3
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ad8:	2301      	movs	r3, #1
 8008ada:	637b      	str	r3, [r7, #52]	; 0x34
 8008adc:	e001      	b.n	8008ae2 <xQueueReceiveFromISR+0xf2>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aee:	4618      	mov	r0, r3
 8008af0:	3738      	adds	r7, #56	; 0x38
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <uxQueueMessagesWaiting>:
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10b      	bne.n	8008b1c <uxQueueMessagesWaiting+0x26>
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	b672      	cpsid	i
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	b662      	cpsie	i
 8008b18:	60bb      	str	r3, [r7, #8]
 8008b1a:	e7fe      	b.n	8008b1a <uxQueueMessagesWaiting+0x24>
 8008b1c:	f001 fe64 	bl	800a7e8 <vPortEnterCritical>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	f001 fe91 	bl	800a84c <vPortExitCritical>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <uxQueueMessagesWaitingFromISR>:
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10b      	bne.n	8008b5e <uxQueueMessagesWaitingFromISR+0x2a>
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	b672      	cpsid	i
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	b662      	cpsie	i
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	e7fe      	b.n	8008b5c <uxQueueMessagesWaitingFromISR+0x28>
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	613b      	str	r3, [r7, #16]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	4618      	mov	r0, r3
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <vQueueDelete>:
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10b      	bne.n	8008b9c <vQueueDelete+0x2a>
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	b672      	cpsid	i
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	b662      	cpsie	i
 8008b98:	60bb      	str	r3, [r7, #8]
 8008b9a:	e7fe      	b.n	8008b9a <vQueueDelete+0x28>
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f95d 	bl	8008e5c <vQueueUnregisterQueue>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <vQueueDelete+0x40>
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f002 f805 	bl	800abbc <vPortFree>
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <prvGetDisinheritPriorityAfterTimeout>:
 8008bba:	b480      	push	{r7}
 8008bbc:	b085      	sub	sp, #20
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d006      	beq.n	8008bd8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	e001      	b.n	8008bdc <prvGetDisinheritPriorityAfterTimeout+0x22>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <prvCopyDataToQueue>:
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	607a      	str	r2, [r7, #4]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	613b      	str	r3, [r7, #16]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10d      	bne.n	8008c24 <prvCopyDataToQueue+0x3a>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d14d      	bne.n	8008cac <prvCopyDataToQueue+0xc2>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 f82d 	bl	8009c74 <xTaskPriorityDisinherit>
 8008c1a:	6178      	str	r0, [r7, #20]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	609a      	str	r2, [r3, #8]
 8008c22:	e043      	b.n	8008cac <prvCopyDataToQueue+0xc2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d119      	bne.n	8008c5e <prvCopyDataToQueue+0x74>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6858      	ldr	r0, [r3, #4]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	461a      	mov	r2, r3
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	f002 f90b 	bl	800ae50 <memcpy>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	441a      	add	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	605a      	str	r2, [r3, #4]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d32b      	bcc.n	8008cac <prvCopyDataToQueue+0xc2>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	605a      	str	r2, [r3, #4]
 8008c5c:	e026      	b.n	8008cac <prvCopyDataToQueue+0xc2>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	68d8      	ldr	r0, [r3, #12]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	461a      	mov	r2, r3
 8008c68:	68b9      	ldr	r1, [r7, #8]
 8008c6a:	f002 f8f1 	bl	800ae50 <memcpy>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	425b      	negs	r3, r3
 8008c78:	441a      	add	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	60da      	str	r2, [r3, #12]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d207      	bcs.n	8008c9a <prvCopyDataToQueue+0xb0>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	425b      	negs	r3, r3
 8008c94:	441a      	add	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	60da      	str	r2, [r3, #12]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d105      	bne.n	8008cac <prvCopyDataToQueue+0xc2>
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <prvCopyDataToQueue+0xc2>
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <prvCopyDataFromQueue>:
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d018      	beq.n	8008d02 <prvCopyDataFromQueue+0x44>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68da      	ldr	r2, [r3, #12]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd8:	441a      	add	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60da      	str	r2, [r3, #12]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d303      	bcc.n	8008cf2 <prvCopyDataFromQueue+0x34>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	60da      	str	r2, [r3, #12]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68d9      	ldr	r1, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6838      	ldr	r0, [r7, #0]
 8008cfe:	f002 f8a7 	bl	800ae50 <memcpy>
 8008d02:	bf00      	nop
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <prvUnlockQueue>:
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	f001 fd69 	bl	800a7e8 <vPortEnterCritical>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d1c:	73fb      	strb	r3, [r7, #15]
 8008d1e:	e011      	b.n	8008d44 <prvUnlockQueue+0x3a>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d012      	beq.n	8008d4e <prvUnlockQueue+0x44>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 fd5d 	bl	80097ec <xTaskRemoveFromEventList>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <prvUnlockQueue+0x32>
 8008d38:	f000 fe36 	bl	80099a8 <vTaskMissedYield>
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dce9      	bgt.n	8008d20 <prvUnlockQueue+0x16>
 8008d4c:	e000      	b.n	8008d50 <prvUnlockQueue+0x46>
 8008d4e:	bf00      	nop
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	22ff      	movs	r2, #255	; 0xff
 8008d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d58:	f001 fd78 	bl	800a84c <vPortExitCritical>
 8008d5c:	f001 fd44 	bl	800a7e8 <vPortEnterCritical>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d66:	73bb      	strb	r3, [r7, #14]
 8008d68:	e011      	b.n	8008d8e <prvUnlockQueue+0x84>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d012      	beq.n	8008d98 <prvUnlockQueue+0x8e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	3310      	adds	r3, #16
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fd38 	bl	80097ec <xTaskRemoveFromEventList>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <prvUnlockQueue+0x7c>
 8008d82:	f000 fe11 	bl	80099a8 <vTaskMissedYield>
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	73bb      	strb	r3, [r7, #14]
 8008d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	dce9      	bgt.n	8008d6a <prvUnlockQueue+0x60>
 8008d96:	e000      	b.n	8008d9a <prvUnlockQueue+0x90>
 8008d98:	bf00      	nop
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	22ff      	movs	r2, #255	; 0xff
 8008d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008da2:	f001 fd53 	bl	800a84c <vPortExitCritical>
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <prvIsQueueEmpty>:
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	f001 fd17 	bl	800a7e8 <vPortEnterCritical>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d102      	bne.n	8008dc8 <prvIsQueueEmpty+0x1a>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	e001      	b.n	8008dcc <prvIsQueueEmpty+0x1e>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	f001 fd3e 	bl	800a84c <vPortExitCritical>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <prvIsQueueFull>:
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	f001 fd01 	bl	800a7e8 <vPortEnterCritical>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d102      	bne.n	8008df8 <prvIsQueueFull+0x1e>
 8008df2:	2301      	movs	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	e001      	b.n	8008dfc <prvIsQueueFull+0x22>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	f001 fd26 	bl	800a84c <vPortExitCritical>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <vQueueAddToRegistry>:
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	e014      	b.n	8008e46 <vQueueAddToRegistry+0x3a>
 8008e1c:	4a0e      	ldr	r2, [pc, #56]	; (8008e58 <vQueueAddToRegistry+0x4c>)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10b      	bne.n	8008e40 <vQueueAddToRegistry+0x34>
 8008e28:	490b      	ldr	r1, [pc, #44]	; (8008e58 <vQueueAddToRegistry+0x4c>)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008e32:	4a09      	ldr	r2, [pc, #36]	; (8008e58 <vQueueAddToRegistry+0x4c>)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	4413      	add	r3, r2
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	605a      	str	r2, [r3, #4]
 8008e3e:	e005      	b.n	8008e4c <vQueueAddToRegistry+0x40>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b07      	cmp	r3, #7
 8008e4a:	d9e7      	bls.n	8008e1c <vQueueAddToRegistry+0x10>
 8008e4c:	bf00      	nop
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	20004cbc 	.word	0x20004cbc

08008e5c <vQueueUnregisterQueue>:
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	e016      	b.n	8008e98 <vQueueUnregisterQueue+0x3c>
 8008e6a:	4a10      	ldr	r2, [pc, #64]	; (8008eac <vQueueUnregisterQueue+0x50>)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	4413      	add	r3, r2
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d10b      	bne.n	8008e92 <vQueueUnregisterQueue+0x36>
 8008e7a:	4a0c      	ldr	r2, [pc, #48]	; (8008eac <vQueueUnregisterQueue+0x50>)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2100      	movs	r1, #0
 8008e80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8008e84:	4a09      	ldr	r2, [pc, #36]	; (8008eac <vQueueUnregisterQueue+0x50>)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	00db      	lsls	r3, r3, #3
 8008e8a:	4413      	add	r3, r2
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	605a      	str	r2, [r3, #4]
 8008e90:	e005      	b.n	8008e9e <vQueueUnregisterQueue+0x42>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b07      	cmp	r3, #7
 8008e9c:	d9e5      	bls.n	8008e6a <vQueueUnregisterQueue+0xe>
 8008e9e:	bf00      	nop
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	20004cbc 	.word	0x20004cbc

08008eb0 <vQueueWaitForMessageRestricted>:
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	f001 fc92 	bl	800a7e8 <vPortEnterCritical>
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eca:	b25b      	sxtb	r3, r3
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed0:	d103      	bne.n	8008eda <vQueueWaitForMessageRestricted+0x2a>
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ee0:	b25b      	sxtb	r3, r3
 8008ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ee6:	d103      	bne.n	8008ef0 <vQueueWaitForMessageRestricted+0x40>
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ef0:	f001 fcac 	bl	800a84c <vPortExitCritical>
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d106      	bne.n	8008f0a <vQueueWaitForMessageRestricted+0x5a>
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	3324      	adds	r3, #36	; 0x24
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fc45 	bl	8009794 <vTaskPlaceOnEventListRestricted>
 8008f0a:	6978      	ldr	r0, [r7, #20]
 8008f0c:	f7ff fefd 	bl	8008d0a <prvUnlockQueue>
 8008f10:	bf00      	nop
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <xTaskCreateStatic>:
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08e      	sub	sp, #56	; 0x38
 8008f1c:	af04      	add	r7, sp, #16
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
 8008f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10b      	bne.n	8008f44 <xTaskCreateStatic+0x2c>
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	b672      	cpsid	i
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	b662      	cpsie	i
 8008f40:	623b      	str	r3, [r7, #32]
 8008f42:	e7fe      	b.n	8008f42 <xTaskCreateStatic+0x2a>
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10b      	bne.n	8008f62 <xTaskCreateStatic+0x4a>
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	b672      	cpsid	i
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	b662      	cpsie	i
 8008f5e:	61fb      	str	r3, [r7, #28]
 8008f60:	e7fe      	b.n	8008f60 <xTaskCreateStatic+0x48>
 8008f62:	235c      	movs	r3, #92	; 0x5c
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b5c      	cmp	r3, #92	; 0x5c
 8008f6a:	d00b      	beq.n	8008f84 <xTaskCreateStatic+0x6c>
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	b672      	cpsid	i
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	b662      	cpsie	i
 8008f80:	61bb      	str	r3, [r7, #24]
 8008f82:	e7fe      	b.n	8008f82 <xTaskCreateStatic+0x6a>
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01e      	beq.n	8008fca <xTaskCreateStatic+0xb2>
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01b      	beq.n	8008fca <xTaskCreateStatic+0xb2>
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	627b      	str	r3, [r7, #36]	; 0x24
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9303      	str	r3, [sp, #12]
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	9302      	str	r3, [sp, #8]
 8008fac:	f107 0314 	add.w	r3, r7, #20
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f850 	bl	8009062 <prvInitialiseNewTask>
 8008fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fc4:	f000 f8de 	bl	8009184 <prvAddNewTaskToReadyList>
 8008fc8:	e001      	b.n	8008fce <xTaskCreateStatic+0xb6>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3728      	adds	r7, #40	; 0x28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <xTaskCreate>:
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08c      	sub	sp, #48	; 0x30
 8008fdc:	af04      	add	r7, sp, #16
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	80fb      	strh	r3, [r7, #6]
 8008fe8:	88fb      	ldrh	r3, [r7, #6]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f001 fd1d 	bl	800aa2c <pvPortMalloc>
 8008ff2:	6178      	str	r0, [r7, #20]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00e      	beq.n	8009018 <xTaskCreate+0x40>
 8008ffa:	205c      	movs	r0, #92	; 0x5c
 8008ffc:	f001 fd16 	bl	800aa2c <pvPortMalloc>
 8009000:	61f8      	str	r0, [r7, #28]
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <xTaskCreate+0x38>
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	631a      	str	r2, [r3, #48]	; 0x30
 800900e:	e005      	b.n	800901c <xTaskCreate+0x44>
 8009010:	6978      	ldr	r0, [r7, #20]
 8009012:	f001 fdd3 	bl	800abbc <vPortFree>
 8009016:	e001      	b.n	800901c <xTaskCreate+0x44>
 8009018:	2300      	movs	r3, #0
 800901a:	61fb      	str	r3, [r7, #28]
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d017      	beq.n	8009052 <xTaskCreate+0x7a>
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800902a:	88fa      	ldrh	r2, [r7, #6]
 800902c:	2300      	movs	r3, #0
 800902e:	9303      	str	r3, [sp, #12]
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	9302      	str	r3, [sp, #8]
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f80e 	bl	8009062 <prvInitialiseNewTask>
 8009046:	69f8      	ldr	r0, [r7, #28]
 8009048:	f000 f89c 	bl	8009184 <prvAddNewTaskToReadyList>
 800904c:	2301      	movs	r3, #1
 800904e:	61bb      	str	r3, [r7, #24]
 8009050:	e002      	b.n	8009058 <xTaskCreate+0x80>
 8009052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	4618      	mov	r0, r3
 800905c:	3720      	adds	r7, #32
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <prvInitialiseNewTask>:
 8009062:	b580      	push	{r7, lr}
 8009064:	b088      	sub	sp, #32
 8009066:	af00      	add	r7, sp, #0
 8009068:	60f8      	str	r0, [r7, #12]
 800906a:	60b9      	str	r1, [r7, #8]
 800906c:	607a      	str	r2, [r7, #4]
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	461a      	mov	r2, r3
 800907a:	21a5      	movs	r1, #165	; 0xa5
 800907c:	f001 fef3 	bl	800ae66 <memset>
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009084:	6879      	ldr	r1, [r7, #4]
 8009086:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800908a:	440b      	add	r3, r1
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4413      	add	r3, r2
 8009090:	61bb      	str	r3, [r7, #24]
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	f023 0307 	bic.w	r3, r3, #7
 8009098:	61bb      	str	r3, [r7, #24]
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	f003 0307 	and.w	r3, r3, #7
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <prvInitialiseNewTask+0x5a>
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	b672      	cpsid	i
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	b662      	cpsie	i
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	e7fe      	b.n	80090ba <prvInitialiseNewTask+0x58>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d01f      	beq.n	8009102 <prvInitialiseNewTask+0xa0>
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	e012      	b.n	80090ee <prvInitialiseNewTask+0x8c>
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	4413      	add	r3, r2
 80090ce:	7819      	ldrb	r1, [r3, #0]
 80090d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	4413      	add	r3, r2
 80090d6:	3334      	adds	r3, #52	; 0x34
 80090d8:	460a      	mov	r2, r1
 80090da:	701a      	strb	r2, [r3, #0]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d006      	beq.n	80090f6 <prvInitialiseNewTask+0x94>
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	3301      	adds	r3, #1
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	2b0f      	cmp	r3, #15
 80090f2:	d9e9      	bls.n	80090c8 <prvInitialiseNewTask+0x66>
 80090f4:	e000      	b.n	80090f8 <prvInitialiseNewTask+0x96>
 80090f6:	bf00      	nop
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009100:	e003      	b.n	800910a <prvInitialiseNewTask+0xa8>
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910c:	2b37      	cmp	r3, #55	; 0x37
 800910e:	d901      	bls.n	8009114 <prvInitialiseNewTask+0xb2>
 8009110:	2337      	movs	r3, #55	; 0x37
 8009112:	62bb      	str	r3, [r7, #40]	; 0x28
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009118:	62da      	str	r2, [r3, #44]	; 0x2c
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800911e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	2200      	movs	r2, #0
 8009124:	651a      	str	r2, [r3, #80]	; 0x50
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	3304      	adds	r3, #4
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fdf0 	bl	8007d10 <vListInitialiseItem>
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	3318      	adds	r3, #24
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fdeb 	bl	8007d10 <vListInitialiseItem>
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913e:	611a      	str	r2, [r3, #16]
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	619a      	str	r2, [r3, #24]
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914e:	625a      	str	r2, [r3, #36]	; 0x24
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	2200      	movs	r2, #0
 8009154:	655a      	str	r2, [r3, #84]	; 0x54
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	68f9      	ldr	r1, [r7, #12]
 8009162:	69b8      	ldr	r0, [r7, #24]
 8009164:	f001 fa36 	bl	800a5d4 <pxPortInitialiseStack>
 8009168:	4602      	mov	r2, r0
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <prvInitialiseNewTask+0x118>
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	bf00      	nop
 800917c:	3720      	adds	r7, #32
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <prvAddNewTaskToReadyList>:
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	f001 fb2c 	bl	800a7e8 <vPortEnterCritical>
 8009190:	4b2d      	ldr	r3, [pc, #180]	; (8009248 <prvAddNewTaskToReadyList+0xc4>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3301      	adds	r3, #1
 8009196:	4a2c      	ldr	r2, [pc, #176]	; (8009248 <prvAddNewTaskToReadyList+0xc4>)
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	4b2c      	ldr	r3, [pc, #176]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <prvAddNewTaskToReadyList+0x32>
 80091a2:	4a2a      	ldr	r2, [pc, #168]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	4b27      	ldr	r3, [pc, #156]	; (8009248 <prvAddNewTaskToReadyList+0xc4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d110      	bne.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
 80091b0:	f000 fc1e 	bl	80099f0 <prvInitialiseTaskLists>
 80091b4:	e00d      	b.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
 80091b6:	4b26      	ldr	r3, [pc, #152]	; (8009250 <prvAddNewTaskToReadyList+0xcc>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
 80091be:	4b23      	ldr	r3, [pc, #140]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d802      	bhi.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
 80091cc:	4a1f      	ldr	r2, [pc, #124]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	4b20      	ldr	r3, [pc, #128]	; (8009254 <prvAddNewTaskToReadyList+0xd0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3301      	adds	r3, #1
 80091d8:	4a1e      	ldr	r2, [pc, #120]	; (8009254 <prvAddNewTaskToReadyList+0xd0>)
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	4b1d      	ldr	r3, [pc, #116]	; (8009254 <prvAddNewTaskToReadyList+0xd0>)
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	645a      	str	r2, [r3, #68]	; 0x44
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e8:	4b1b      	ldr	r3, [pc, #108]	; (8009258 <prvAddNewTaskToReadyList+0xd4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d903      	bls.n	80091f8 <prvAddNewTaskToReadyList+0x74>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	4a18      	ldr	r2, [pc, #96]	; (8009258 <prvAddNewTaskToReadyList+0xd4>)
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fc:	4613      	mov	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4a15      	ldr	r2, [pc, #84]	; (800925c <prvAddNewTaskToReadyList+0xd8>)
 8009206:	441a      	add	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3304      	adds	r3, #4
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f7fe fd8b 	bl	8007d2a <vListInsertEnd>
 8009214:	f001 fb1a 	bl	800a84c <vPortExitCritical>
 8009218:	4b0d      	ldr	r3, [pc, #52]	; (8009250 <prvAddNewTaskToReadyList+0xcc>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00e      	beq.n	800923e <prvAddNewTaskToReadyList+0xba>
 8009220:	4b0a      	ldr	r3, [pc, #40]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	429a      	cmp	r2, r3
 800922c:	d207      	bcs.n	800923e <prvAddNewTaskToReadyList+0xba>
 800922e:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <prvAddNewTaskToReadyList+0xdc>)
 8009230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000c60 	.word	0x20000c60
 800924c:	2000078c 	.word	0x2000078c
 8009250:	20000c6c 	.word	0x20000c6c
 8009254:	20000c7c 	.word	0x20000c7c
 8009258:	20000c68 	.word	0x20000c68
 800925c:	20000790 	.word	0x20000790
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <vTaskDelay>:
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d018      	beq.n	80092a8 <vTaskDelay+0x44>
 8009276:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <vTaskDelay+0x64>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <vTaskDelay+0x32>
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	b672      	cpsid	i
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	b662      	cpsie	i
 8009292:	60bb      	str	r3, [r7, #8]
 8009294:	e7fe      	b.n	8009294 <vTaskDelay+0x30>
 8009296:	f000 f883 	bl	80093a0 <vTaskSuspendAll>
 800929a:	2100      	movs	r1, #0
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fdf1 	bl	8009e84 <prvAddCurrentTaskToDelayedList>
 80092a2:	f000 f88b 	bl	80093bc <xTaskResumeAll>
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d107      	bne.n	80092be <vTaskDelay+0x5a>
 80092ae:	4b07      	ldr	r3, [pc, #28]	; (80092cc <vTaskDelay+0x68>)
 80092b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20000c88 	.word	0x20000c88
 80092cc:	e000ed04 	.word	0xe000ed04

080092d0 <vTaskStartScheduler>:
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08a      	sub	sp, #40	; 0x28
 80092d4:	af04      	add	r7, sp, #16
 80092d6:	2300      	movs	r3, #0
 80092d8:	60bb      	str	r3, [r7, #8]
 80092da:	2300      	movs	r3, #0
 80092dc:	607b      	str	r3, [r7, #4]
 80092de:	463a      	mov	r2, r7
 80092e0:	1d39      	adds	r1, r7, #4
 80092e2:	f107 0308 	add.w	r3, r7, #8
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fcbe 	bl	8007c68 <vApplicationGetIdleTaskMemory>
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	9202      	str	r2, [sp, #8]
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	2300      	movs	r3, #0
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	2300      	movs	r3, #0
 80092fc:	460a      	mov	r2, r1
 80092fe:	4922      	ldr	r1, [pc, #136]	; (8009388 <vTaskStartScheduler+0xb8>)
 8009300:	4822      	ldr	r0, [pc, #136]	; (800938c <vTaskStartScheduler+0xbc>)
 8009302:	f7ff fe09 	bl	8008f18 <xTaskCreateStatic>
 8009306:	4602      	mov	r2, r0
 8009308:	4b21      	ldr	r3, [pc, #132]	; (8009390 <vTaskStartScheduler+0xc0>)
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	4b20      	ldr	r3, [pc, #128]	; (8009390 <vTaskStartScheduler+0xc0>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <vTaskStartScheduler+0x4a>
 8009314:	2301      	movs	r3, #1
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e001      	b.n	800931e <vTaskStartScheduler+0x4e>
 800931a:	2300      	movs	r3, #0
 800931c:	617b      	str	r3, [r7, #20]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d102      	bne.n	800932a <vTaskStartScheduler+0x5a>
 8009324:	f000 fe02 	bl	8009f2c <xTimerCreateTimerTask>
 8009328:	6178      	str	r0, [r7, #20]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d117      	bne.n	8009360 <vTaskStartScheduler+0x90>
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	b672      	cpsid	i
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	b662      	cpsie	i
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	4b13      	ldr	r3, [pc, #76]	; (8009394 <vTaskStartScheduler+0xc4>)
 8009348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	4b12      	ldr	r3, [pc, #72]	; (8009398 <vTaskStartScheduler+0xc8>)
 8009350:	2201      	movs	r2, #1
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	4b11      	ldr	r3, [pc, #68]	; (800939c <vTaskStartScheduler+0xcc>)
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f001 f9c9 	bl	800a6f0 <xPortStartScheduler>
 800935e:	e00f      	b.n	8009380 <vTaskStartScheduler+0xb0>
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009366:	d10b      	bne.n	8009380 <vTaskStartScheduler+0xb0>
 8009368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936c:	b672      	cpsid	i
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	b662      	cpsie	i
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e7fe      	b.n	800937e <vTaskStartScheduler+0xae>
 8009380:	bf00      	nop
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	0800b938 	.word	0x0800b938
 800938c:	080099c1 	.word	0x080099c1
 8009390:	20000c84 	.word	0x20000c84
 8009394:	20000c80 	.word	0x20000c80
 8009398:	20000c6c 	.word	0x20000c6c
 800939c:	20000c64 	.word	0x20000c64

080093a0 <vTaskSuspendAll>:
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <vTaskSuspendAll+0x18>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3301      	adds	r3, #1
 80093aa:	4a03      	ldr	r2, [pc, #12]	; (80093b8 <vTaskSuspendAll+0x18>)
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	bf00      	nop
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20000c88 	.word	0x20000c88

080093bc <xTaskResumeAll>:
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	2300      	movs	r3, #0
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	2300      	movs	r3, #0
 80093c8:	60bb      	str	r3, [r7, #8]
 80093ca:	4b42      	ldr	r3, [pc, #264]	; (80094d4 <xTaskResumeAll+0x118>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10b      	bne.n	80093ea <xTaskResumeAll+0x2e>
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	b672      	cpsid	i
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	b662      	cpsie	i
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	e7fe      	b.n	80093e8 <xTaskResumeAll+0x2c>
 80093ea:	f001 f9fd 	bl	800a7e8 <vPortEnterCritical>
 80093ee:	4b39      	ldr	r3, [pc, #228]	; (80094d4 <xTaskResumeAll+0x118>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	4a37      	ldr	r2, [pc, #220]	; (80094d4 <xTaskResumeAll+0x118>)
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	4b36      	ldr	r3, [pc, #216]	; (80094d4 <xTaskResumeAll+0x118>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d162      	bne.n	80094c6 <xTaskResumeAll+0x10a>
 8009400:	4b35      	ldr	r3, [pc, #212]	; (80094d8 <xTaskResumeAll+0x11c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d05e      	beq.n	80094c6 <xTaskResumeAll+0x10a>
 8009408:	e02f      	b.n	800946a <xTaskResumeAll+0xae>
 800940a:	4b34      	ldr	r3, [pc, #208]	; (80094dc <xTaskResumeAll+0x120>)
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3318      	adds	r3, #24
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fce4 	bl	8007de4 <uxListRemove>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3304      	adds	r3, #4
 8009420:	4618      	mov	r0, r3
 8009422:	f7fe fcdf 	bl	8007de4 <uxListRemove>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942a:	4b2d      	ldr	r3, [pc, #180]	; (80094e0 <xTaskResumeAll+0x124>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d903      	bls.n	800943a <xTaskResumeAll+0x7e>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009436:	4a2a      	ldr	r2, [pc, #168]	; (80094e0 <xTaskResumeAll+0x124>)
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4a27      	ldr	r2, [pc, #156]	; (80094e4 <xTaskResumeAll+0x128>)
 8009448:	441a      	add	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3304      	adds	r3, #4
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f7fe fc6a 	bl	8007d2a <vListInsertEnd>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945a:	4b23      	ldr	r3, [pc, #140]	; (80094e8 <xTaskResumeAll+0x12c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009460:	429a      	cmp	r2, r3
 8009462:	d302      	bcc.n	800946a <xTaskResumeAll+0xae>
 8009464:	4b21      	ldr	r3, [pc, #132]	; (80094ec <xTaskResumeAll+0x130>)
 8009466:	2201      	movs	r2, #1
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <xTaskResumeAll+0x120>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1cb      	bne.n	800940a <xTaskResumeAll+0x4e>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <xTaskResumeAll+0xc0>
 8009478:	f000 fb56 	bl	8009b28 <prvResetNextTaskUnblockTime>
 800947c:	4b1c      	ldr	r3, [pc, #112]	; (80094f0 <xTaskResumeAll+0x134>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	607b      	str	r3, [r7, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d010      	beq.n	80094aa <xTaskResumeAll+0xee>
 8009488:	f000 f846 	bl	8009518 <xTaskIncrementTick>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <xTaskResumeAll+0xdc>
 8009492:	4b16      	ldr	r3, [pc, #88]	; (80094ec <xTaskResumeAll+0x130>)
 8009494:	2201      	movs	r2, #1
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3b01      	subs	r3, #1
 800949c:	607b      	str	r3, [r7, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1f1      	bne.n	8009488 <xTaskResumeAll+0xcc>
 80094a4:	4b12      	ldr	r3, [pc, #72]	; (80094f0 <xTaskResumeAll+0x134>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <xTaskResumeAll+0x130>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <xTaskResumeAll+0x10a>
 80094b2:	2301      	movs	r3, #1
 80094b4:	60bb      	str	r3, [r7, #8]
 80094b6:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <xTaskResumeAll+0x138>)
 80094b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f001 f9c1 	bl	800a84c <vPortExitCritical>
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20000c88 	.word	0x20000c88
 80094d8:	20000c60 	.word	0x20000c60
 80094dc:	20000c20 	.word	0x20000c20
 80094e0:	20000c68 	.word	0x20000c68
 80094e4:	20000790 	.word	0x20000790
 80094e8:	2000078c 	.word	0x2000078c
 80094ec:	20000c74 	.word	0x20000c74
 80094f0:	20000c70 	.word	0x20000c70
 80094f4:	e000ed04 	.word	0xe000ed04

080094f8 <xTaskGetTickCount>:
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <xTaskGetTickCount+0x1c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	607b      	str	r3, [r7, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4618      	mov	r0, r3
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20000c64 	.word	0x20000c64

08009518 <xTaskIncrementTick>:
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]
 8009522:	4b4f      	ldr	r3, [pc, #316]	; (8009660 <xTaskIncrementTick+0x148>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	f040 808a 	bne.w	8009640 <xTaskIncrementTick+0x128>
 800952c:	4b4d      	ldr	r3, [pc, #308]	; (8009664 <xTaskIncrementTick+0x14c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3301      	adds	r3, #1
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	4a4b      	ldr	r2, [pc, #300]	; (8009664 <xTaskIncrementTick+0x14c>)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d121      	bne.n	8009584 <xTaskIncrementTick+0x6c>
 8009540:	4b49      	ldr	r3, [pc, #292]	; (8009668 <xTaskIncrementTick+0x150>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00b      	beq.n	8009562 <xTaskIncrementTick+0x4a>
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	b672      	cpsid	i
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	b662      	cpsie	i
 800955e:	603b      	str	r3, [r7, #0]
 8009560:	e7fe      	b.n	8009560 <xTaskIncrementTick+0x48>
 8009562:	4b41      	ldr	r3, [pc, #260]	; (8009668 <xTaskIncrementTick+0x150>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	4b40      	ldr	r3, [pc, #256]	; (800966c <xTaskIncrementTick+0x154>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a3e      	ldr	r2, [pc, #248]	; (8009668 <xTaskIncrementTick+0x150>)
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	4a3e      	ldr	r2, [pc, #248]	; (800966c <xTaskIncrementTick+0x154>)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	4b3e      	ldr	r3, [pc, #248]	; (8009670 <xTaskIncrementTick+0x158>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3301      	adds	r3, #1
 800957c:	4a3c      	ldr	r2, [pc, #240]	; (8009670 <xTaskIncrementTick+0x158>)
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	f000 fad2 	bl	8009b28 <prvResetNextTaskUnblockTime>
 8009584:	4b3b      	ldr	r3, [pc, #236]	; (8009674 <xTaskIncrementTick+0x15c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	429a      	cmp	r2, r3
 800958c:	d349      	bcc.n	8009622 <xTaskIncrementTick+0x10a>
 800958e:	4b36      	ldr	r3, [pc, #216]	; (8009668 <xTaskIncrementTick+0x150>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d104      	bne.n	80095a2 <xTaskIncrementTick+0x8a>
 8009598:	4b36      	ldr	r3, [pc, #216]	; (8009674 <xTaskIncrementTick+0x15c>)
 800959a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	e03f      	b.n	8009622 <xTaskIncrementTick+0x10a>
 80095a2:	4b31      	ldr	r3, [pc, #196]	; (8009668 <xTaskIncrementTick+0x150>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	60bb      	str	r3, [r7, #8]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	607b      	str	r3, [r7, #4]
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d203      	bcs.n	80095c2 <xTaskIncrementTick+0xaa>
 80095ba:	4a2e      	ldr	r2, [pc, #184]	; (8009674 <xTaskIncrementTick+0x15c>)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	e02f      	b.n	8009622 <xTaskIncrementTick+0x10a>
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	3304      	adds	r3, #4
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fc0c 	bl	8007de4 <uxListRemove>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d004      	beq.n	80095de <xTaskIncrementTick+0xc6>
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	3318      	adds	r3, #24
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe fc03 	bl	8007de4 <uxListRemove>
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e2:	4b25      	ldr	r3, [pc, #148]	; (8009678 <xTaskIncrementTick+0x160>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d903      	bls.n	80095f2 <xTaskIncrementTick+0xda>
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	4a22      	ldr	r2, [pc, #136]	; (8009678 <xTaskIncrementTick+0x160>)
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4a1f      	ldr	r2, [pc, #124]	; (800967c <xTaskIncrementTick+0x164>)
 8009600:	441a      	add	r2, r3
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	3304      	adds	r3, #4
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f7fe fb8e 	bl	8007d2a <vListInsertEnd>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009612:	4b1b      	ldr	r3, [pc, #108]	; (8009680 <xTaskIncrementTick+0x168>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	429a      	cmp	r2, r3
 800961a:	d3b8      	bcc.n	800958e <xTaskIncrementTick+0x76>
 800961c:	2301      	movs	r3, #1
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e7b5      	b.n	800958e <xTaskIncrementTick+0x76>
 8009622:	4b17      	ldr	r3, [pc, #92]	; (8009680 <xTaskIncrementTick+0x168>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009628:	4914      	ldr	r1, [pc, #80]	; (800967c <xTaskIncrementTick+0x164>)
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d907      	bls.n	800964a <xTaskIncrementTick+0x132>
 800963a:	2301      	movs	r3, #1
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	e004      	b.n	800964a <xTaskIncrementTick+0x132>
 8009640:	4b10      	ldr	r3, [pc, #64]	; (8009684 <xTaskIncrementTick+0x16c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3301      	adds	r3, #1
 8009646:	4a0f      	ldr	r2, [pc, #60]	; (8009684 <xTaskIncrementTick+0x16c>)
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	4b0f      	ldr	r3, [pc, #60]	; (8009688 <xTaskIncrementTick+0x170>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <xTaskIncrementTick+0x13e>
 8009652:	2301      	movs	r3, #1
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20000c88 	.word	0x20000c88
 8009664:	20000c64 	.word	0x20000c64
 8009668:	20000c18 	.word	0x20000c18
 800966c:	20000c1c 	.word	0x20000c1c
 8009670:	20000c78 	.word	0x20000c78
 8009674:	20000c80 	.word	0x20000c80
 8009678:	20000c68 	.word	0x20000c68
 800967c:	20000790 	.word	0x20000790
 8009680:	2000078c 	.word	0x2000078c
 8009684:	20000c70 	.word	0x20000c70
 8009688:	20000c74 	.word	0x20000c74

0800968c <vTaskSwitchContext>:
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	4b28      	ldr	r3, [pc, #160]	; (8009734 <vTaskSwitchContext+0xa8>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <vTaskSwitchContext+0x16>
 800969a:	4b27      	ldr	r3, [pc, #156]	; (8009738 <vTaskSwitchContext+0xac>)
 800969c:	2201      	movs	r2, #1
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	e042      	b.n	8009728 <vTaskSwitchContext+0x9c>
 80096a2:	4b25      	ldr	r3, [pc, #148]	; (8009738 <vTaskSwitchContext+0xac>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	4b24      	ldr	r3, [pc, #144]	; (800973c <vTaskSwitchContext+0xb0>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	60fb      	str	r3, [r7, #12]
 80096ae:	e011      	b.n	80096d4 <vTaskSwitchContext+0x48>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <vTaskSwitchContext+0x42>
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	b672      	cpsid	i
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	b662      	cpsie	i
 80096ca:	607b      	str	r3, [r7, #4]
 80096cc:	e7fe      	b.n	80096cc <vTaskSwitchContext+0x40>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	491a      	ldr	r1, [pc, #104]	; (8009740 <vTaskSwitchContext+0xb4>)
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	4613      	mov	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	440b      	add	r3, r1
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d0e3      	beq.n	80096b0 <vTaskSwitchContext+0x24>
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4613      	mov	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4a13      	ldr	r2, [pc, #76]	; (8009740 <vTaskSwitchContext+0xb4>)
 80096f4:	4413      	add	r3, r2
 80096f6:	60bb      	str	r3, [r7, #8]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	605a      	str	r2, [r3, #4]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	3308      	adds	r3, #8
 800970a:	429a      	cmp	r2, r3
 800970c:	d104      	bne.n	8009718 <vTaskSwitchContext+0x8c>
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	605a      	str	r2, [r3, #4]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	4a09      	ldr	r2, [pc, #36]	; (8009744 <vTaskSwitchContext+0xb8>)
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	4a06      	ldr	r2, [pc, #24]	; (800973c <vTaskSwitchContext+0xb0>)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	bf00      	nop
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	20000c88 	.word	0x20000c88
 8009738:	20000c74 	.word	0x20000c74
 800973c:	20000c68 	.word	0x20000c68
 8009740:	20000790 	.word	0x20000790
 8009744:	2000078c 	.word	0x2000078c

08009748 <vTaskPlaceOnEventList>:
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10b      	bne.n	8009770 <vTaskPlaceOnEventList+0x28>
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	b672      	cpsid	i
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	b662      	cpsie	i
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	e7fe      	b.n	800976e <vTaskPlaceOnEventList+0x26>
 8009770:	4b07      	ldr	r3, [pc, #28]	; (8009790 <vTaskPlaceOnEventList+0x48>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3318      	adds	r3, #24
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7fe fafa 	bl	8007d72 <vListInsert>
 800977e:	2101      	movs	r1, #1
 8009780:	6838      	ldr	r0, [r7, #0]
 8009782:	f000 fb7f 	bl	8009e84 <prvAddCurrentTaskToDelayedList>
 8009786:	bf00      	nop
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	2000078c 	.word	0x2000078c

08009794 <vTaskPlaceOnEventListRestricted>:
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10b      	bne.n	80097be <vTaskPlaceOnEventListRestricted+0x2a>
 80097a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097aa:	b672      	cpsid	i
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	b662      	cpsie	i
 80097ba:	617b      	str	r3, [r7, #20]
 80097bc:	e7fe      	b.n	80097bc <vTaskPlaceOnEventListRestricted+0x28>
 80097be:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3318      	adds	r3, #24
 80097c4:	4619      	mov	r1, r3
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7fe faaf 	bl	8007d2a <vListInsertEnd>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <vTaskPlaceOnEventListRestricted+0x44>
 80097d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097d6:	60bb      	str	r3, [r7, #8]
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	68b8      	ldr	r0, [r7, #8]
 80097dc:	f000 fb52 	bl	8009e84 <prvAddCurrentTaskToDelayedList>
 80097e0:	bf00      	nop
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	2000078c 	.word	0x2000078c

080097ec <xTaskRemoveFromEventList>:
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	613b      	str	r3, [r7, #16]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10b      	bne.n	800981a <xTaskRemoveFromEventList+0x2e>
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	b672      	cpsid	i
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	b662      	cpsie	i
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	e7fe      	b.n	8009818 <xTaskRemoveFromEventList+0x2c>
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	3318      	adds	r3, #24
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe fae0 	bl	8007de4 <uxListRemove>
 8009824:	4b1d      	ldr	r3, [pc, #116]	; (800989c <xTaskRemoveFromEventList+0xb0>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d11d      	bne.n	8009868 <xTaskRemoveFromEventList+0x7c>
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	3304      	adds	r3, #4
 8009830:	4618      	mov	r0, r3
 8009832:	f7fe fad7 	bl	8007de4 <uxListRemove>
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983a:	4b19      	ldr	r3, [pc, #100]	; (80098a0 <xTaskRemoveFromEventList+0xb4>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	429a      	cmp	r2, r3
 8009840:	d903      	bls.n	800984a <xTaskRemoveFromEventList+0x5e>
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <xTaskRemoveFromEventList+0xb4>)
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984e:	4613      	mov	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <xTaskRemoveFromEventList+0xb8>)
 8009858:	441a      	add	r2, r3
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3304      	adds	r3, #4
 800985e:	4619      	mov	r1, r3
 8009860:	4610      	mov	r0, r2
 8009862:	f7fe fa62 	bl	8007d2a <vListInsertEnd>
 8009866:	e005      	b.n	8009874 <xTaskRemoveFromEventList+0x88>
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	3318      	adds	r3, #24
 800986c:	4619      	mov	r1, r3
 800986e:	480e      	ldr	r0, [pc, #56]	; (80098a8 <xTaskRemoveFromEventList+0xbc>)
 8009870:	f7fe fa5b 	bl	8007d2a <vListInsertEnd>
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <xTaskRemoveFromEventList+0xc0>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	429a      	cmp	r2, r3
 8009880:	d905      	bls.n	800988e <xTaskRemoveFromEventList+0xa2>
 8009882:	2301      	movs	r3, #1
 8009884:	617b      	str	r3, [r7, #20]
 8009886:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <xTaskRemoveFromEventList+0xc4>)
 8009888:	2201      	movs	r2, #1
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	e001      	b.n	8009892 <xTaskRemoveFromEventList+0xa6>
 800988e:	2300      	movs	r3, #0
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20000c88 	.word	0x20000c88
 80098a0:	20000c68 	.word	0x20000c68
 80098a4:	20000790 	.word	0x20000790
 80098a8:	20000c20 	.word	0x20000c20
 80098ac:	2000078c 	.word	0x2000078c
 80098b0:	20000c74 	.word	0x20000c74

080098b4 <vTaskInternalSetTimeOutState>:
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <vTaskInternalSetTimeOutState+0x24>)
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <vTaskInternalSetTimeOutState+0x28>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	605a      	str	r2, [r3, #4]
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	20000c78 	.word	0x20000c78
 80098dc:	20000c64 	.word	0x20000c64

080098e0 <xTaskCheckForTimeOut>:
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b088      	sub	sp, #32
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10b      	bne.n	8009908 <xTaskCheckForTimeOut+0x28>
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	b672      	cpsid	i
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	b662      	cpsie	i
 8009904:	613b      	str	r3, [r7, #16]
 8009906:	e7fe      	b.n	8009906 <xTaskCheckForTimeOut+0x26>
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10b      	bne.n	8009926 <xTaskCheckForTimeOut+0x46>
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	b672      	cpsid	i
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	b662      	cpsie	i
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	e7fe      	b.n	8009924 <xTaskCheckForTimeOut+0x44>
 8009926:	f000 ff5f 	bl	800a7e8 <vPortEnterCritical>
 800992a:	4b1d      	ldr	r3, [pc, #116]	; (80099a0 <xTaskCheckForTimeOut+0xc0>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009942:	d102      	bne.n	800994a <xTaskCheckForTimeOut+0x6a>
 8009944:	2300      	movs	r3, #0
 8009946:	61fb      	str	r3, [r7, #28]
 8009948:	e023      	b.n	8009992 <xTaskCheckForTimeOut+0xb2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	4b15      	ldr	r3, [pc, #84]	; (80099a4 <xTaskCheckForTimeOut+0xc4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d007      	beq.n	8009966 <xTaskCheckForTimeOut+0x86>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	429a      	cmp	r2, r3
 800995e:	d302      	bcc.n	8009966 <xTaskCheckForTimeOut+0x86>
 8009960:	2301      	movs	r3, #1
 8009962:	61fb      	str	r3, [r7, #28]
 8009964:	e015      	b.n	8009992 <xTaskCheckForTimeOut+0xb2>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	429a      	cmp	r2, r3
 800996e:	d20b      	bcs.n	8009988 <xTaskCheckForTimeOut+0xa8>
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	1ad2      	subs	r2, r2, r3
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff ff99 	bl	80098b4 <vTaskInternalSetTimeOutState>
 8009982:	2300      	movs	r3, #0
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	e004      	b.n	8009992 <xTaskCheckForTimeOut+0xb2>
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	2301      	movs	r3, #1
 8009990:	61fb      	str	r3, [r7, #28]
 8009992:	f000 ff5b 	bl	800a84c <vPortExitCritical>
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	4618      	mov	r0, r3
 800999a:	3720      	adds	r7, #32
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20000c64 	.word	0x20000c64
 80099a4:	20000c78 	.word	0x20000c78

080099a8 <vTaskMissedYield>:
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	4b03      	ldr	r3, [pc, #12]	; (80099bc <vTaskMissedYield+0x14>)
 80099ae:	2201      	movs	r2, #1
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	bf00      	nop
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20000c74 	.word	0x20000c74

080099c0 <prvIdleTask>:
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	f000 f852 	bl	8009a70 <prvCheckTasksWaitingTermination>
 80099cc:	4b06      	ldr	r3, [pc, #24]	; (80099e8 <prvIdleTask+0x28>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d9f9      	bls.n	80099c8 <prvIdleTask+0x8>
 80099d4:	4b05      	ldr	r3, [pc, #20]	; (80099ec <prvIdleTask+0x2c>)
 80099d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	e7f0      	b.n	80099c8 <prvIdleTask+0x8>
 80099e6:	bf00      	nop
 80099e8:	20000790 	.word	0x20000790
 80099ec:	e000ed04 	.word	0xe000ed04

080099f0 <prvInitialiseTaskLists>:
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	2300      	movs	r3, #0
 80099f8:	607b      	str	r3, [r7, #4]
 80099fa:	e00c      	b.n	8009a16 <prvInitialiseTaskLists+0x26>
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4a12      	ldr	r2, [pc, #72]	; (8009a50 <prvInitialiseTaskLists+0x60>)
 8009a08:	4413      	add	r3, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fe f960 	bl	8007cd0 <vListInitialise>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3301      	adds	r3, #1
 8009a14:	607b      	str	r3, [r7, #4]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b37      	cmp	r3, #55	; 0x37
 8009a1a:	d9ef      	bls.n	80099fc <prvInitialiseTaskLists+0xc>
 8009a1c:	480d      	ldr	r0, [pc, #52]	; (8009a54 <prvInitialiseTaskLists+0x64>)
 8009a1e:	f7fe f957 	bl	8007cd0 <vListInitialise>
 8009a22:	480d      	ldr	r0, [pc, #52]	; (8009a58 <prvInitialiseTaskLists+0x68>)
 8009a24:	f7fe f954 	bl	8007cd0 <vListInitialise>
 8009a28:	480c      	ldr	r0, [pc, #48]	; (8009a5c <prvInitialiseTaskLists+0x6c>)
 8009a2a:	f7fe f951 	bl	8007cd0 <vListInitialise>
 8009a2e:	480c      	ldr	r0, [pc, #48]	; (8009a60 <prvInitialiseTaskLists+0x70>)
 8009a30:	f7fe f94e 	bl	8007cd0 <vListInitialise>
 8009a34:	480b      	ldr	r0, [pc, #44]	; (8009a64 <prvInitialiseTaskLists+0x74>)
 8009a36:	f7fe f94b 	bl	8007cd0 <vListInitialise>
 8009a3a:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <prvInitialiseTaskLists+0x78>)
 8009a3c:	4a05      	ldr	r2, [pc, #20]	; (8009a54 <prvInitialiseTaskLists+0x64>)
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <prvInitialiseTaskLists+0x7c>)
 8009a42:	4a05      	ldr	r2, [pc, #20]	; (8009a58 <prvInitialiseTaskLists+0x68>)
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	bf00      	nop
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000790 	.word	0x20000790
 8009a54:	20000bf0 	.word	0x20000bf0
 8009a58:	20000c04 	.word	0x20000c04
 8009a5c:	20000c20 	.word	0x20000c20
 8009a60:	20000c34 	.word	0x20000c34
 8009a64:	20000c4c 	.word	0x20000c4c
 8009a68:	20000c18 	.word	0x20000c18
 8009a6c:	20000c1c 	.word	0x20000c1c

08009a70 <prvCheckTasksWaitingTermination>:
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	e019      	b.n	8009aac <prvCheckTasksWaitingTermination+0x3c>
 8009a78:	f000 feb6 	bl	800a7e8 <vPortEnterCritical>
 8009a7c:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <prvCheckTasksWaitingTermination+0x4c>)
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	607b      	str	r3, [r7, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3304      	adds	r3, #4
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fe f9ab 	bl	8007de4 <uxListRemove>
 8009a8e:	4b0c      	ldr	r3, [pc, #48]	; (8009ac0 <prvCheckTasksWaitingTermination+0x50>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3b01      	subs	r3, #1
 8009a94:	4a0a      	ldr	r2, [pc, #40]	; (8009ac0 <prvCheckTasksWaitingTermination+0x50>)
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <prvCheckTasksWaitingTermination+0x54>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	4a09      	ldr	r2, [pc, #36]	; (8009ac4 <prvCheckTasksWaitingTermination+0x54>)
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	f000 fed3 	bl	800a84c <vPortExitCritical>
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f80e 	bl	8009ac8 <prvDeleteTCB>
 8009aac:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <prvCheckTasksWaitingTermination+0x54>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e1      	bne.n	8009a78 <prvCheckTasksWaitingTermination+0x8>
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000c34 	.word	0x20000c34
 8009ac0:	20000c60 	.word	0x20000c60
 8009ac4:	20000c48 	.word	0x20000c48

08009ac8 <prvDeleteTCB>:
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d108      	bne.n	8009aec <prvDeleteTCB+0x24>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 f86c 	bl	800abbc <vPortFree>
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 f869 	bl	800abbc <vPortFree>
 8009aea:	e019      	b.n	8009b20 <prvDeleteTCB+0x58>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d103      	bne.n	8009afe <prvDeleteTCB+0x36>
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 f860 	bl	800abbc <vPortFree>
 8009afc:	e010      	b.n	8009b20 <prvDeleteTCB+0x58>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d00b      	beq.n	8009b20 <prvDeleteTCB+0x58>
 8009b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0c:	b672      	cpsid	i
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	b662      	cpsie	i
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	e7fe      	b.n	8009b1e <prvDeleteTCB+0x56>
 8009b20:	bf00      	nop
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <prvResetNextTaskUnblockTime>:
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4b0c      	ldr	r3, [pc, #48]	; (8009b60 <prvResetNextTaskUnblockTime+0x38>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d104      	bne.n	8009b42 <prvResetNextTaskUnblockTime+0x1a>
 8009b38:	4b0a      	ldr	r3, [pc, #40]	; (8009b64 <prvResetNextTaskUnblockTime+0x3c>)
 8009b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	e008      	b.n	8009b54 <prvResetNextTaskUnblockTime+0x2c>
 8009b42:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <prvResetNextTaskUnblockTime+0x38>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	607b      	str	r3, [r7, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <prvResetNextTaskUnblockTime+0x3c>)
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	20000c18 	.word	0x20000c18
 8009b64:	20000c80 	.word	0x20000c80

08009b68 <xTaskGetSchedulerState>:
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <xTaskGetSchedulerState+0x34>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <xTaskGetSchedulerState+0x14>
 8009b76:	2301      	movs	r3, #1
 8009b78:	607b      	str	r3, [r7, #4]
 8009b7a:	e008      	b.n	8009b8e <xTaskGetSchedulerState+0x26>
 8009b7c:	4b08      	ldr	r3, [pc, #32]	; (8009ba0 <xTaskGetSchedulerState+0x38>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d102      	bne.n	8009b8a <xTaskGetSchedulerState+0x22>
 8009b84:	2302      	movs	r3, #2
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	e001      	b.n	8009b8e <xTaskGetSchedulerState+0x26>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	607b      	str	r3, [r7, #4]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	20000c6c 	.word	0x20000c6c
 8009ba0:	20000c88 	.word	0x20000c88

08009ba4 <xTaskPriorityInherit>:
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	60bb      	str	r3, [r7, #8]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d051      	beq.n	8009c5e <xTaskPriorityInherit+0xba>
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbe:	4b2a      	ldr	r3, [pc, #168]	; (8009c68 <xTaskPriorityInherit+0xc4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d241      	bcs.n	8009c4c <xTaskPriorityInherit+0xa8>
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	db06      	blt.n	8009bde <xTaskPriorityInherit+0x3a>
 8009bd0:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <xTaskPriorityInherit+0xc4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	619a      	str	r2, [r3, #24]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	6959      	ldr	r1, [r3, #20]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4a1f      	ldr	r2, [pc, #124]	; (8009c6c <xTaskPriorityInherit+0xc8>)
 8009bf0:	4413      	add	r3, r2
 8009bf2:	4299      	cmp	r1, r3
 8009bf4:	d122      	bne.n	8009c3c <xTaskPriorityInherit+0x98>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fe f8f2 	bl	8007de4 <uxListRemove>
 8009c00:	4b19      	ldr	r3, [pc, #100]	; (8009c68 <xTaskPriorityInherit+0xc4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0e:	4b18      	ldr	r3, [pc, #96]	; (8009c70 <xTaskPriorityInherit+0xcc>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d903      	bls.n	8009c1e <xTaskPriorityInherit+0x7a>
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	4a15      	ldr	r2, [pc, #84]	; (8009c70 <xTaskPriorityInherit+0xcc>)
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4a10      	ldr	r2, [pc, #64]	; (8009c6c <xTaskPriorityInherit+0xc8>)
 8009c2c:	441a      	add	r2, r3
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	3304      	adds	r3, #4
 8009c32:	4619      	mov	r1, r3
 8009c34:	4610      	mov	r0, r2
 8009c36:	f7fe f878 	bl	8007d2a <vListInsertEnd>
 8009c3a:	e004      	b.n	8009c46 <xTaskPriorityInherit+0xa2>
 8009c3c:	4b0a      	ldr	r3, [pc, #40]	; (8009c68 <xTaskPriorityInherit+0xc4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c46:	2301      	movs	r3, #1
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	e008      	b.n	8009c5e <xTaskPriorityInherit+0xba>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c50:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <xTaskPriorityInherit+0xc4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d201      	bcs.n	8009c5e <xTaskPriorityInherit+0xba>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	2000078c 	.word	0x2000078c
 8009c6c:	20000790 	.word	0x20000790
 8009c70:	20000c68 	.word	0x20000c68

08009c74 <xTaskPriorityDisinherit>:
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	613b      	str	r3, [r7, #16]
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d058      	beq.n	8009d3c <xTaskPriorityDisinherit+0xc8>
 8009c8a:	4b2f      	ldr	r3, [pc, #188]	; (8009d48 <xTaskPriorityDisinherit+0xd4>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d00b      	beq.n	8009cac <xTaskPriorityDisinherit+0x38>
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	b672      	cpsid	i
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	b662      	cpsie	i
 8009ca8:	60fb      	str	r3, [r7, #12]
 8009caa:	e7fe      	b.n	8009caa <xTaskPriorityDisinherit+0x36>
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10b      	bne.n	8009ccc <xTaskPriorityDisinherit+0x58>
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	b672      	cpsid	i
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	b662      	cpsie	i
 8009cc8:	60bb      	str	r3, [r7, #8]
 8009cca:	e7fe      	b.n	8009cca <xTaskPriorityDisinherit+0x56>
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd0:	1e5a      	subs	r2, r3, #1
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	651a      	str	r2, [r3, #80]	; 0x50
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d02c      	beq.n	8009d3c <xTaskPriorityDisinherit+0xc8>
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d128      	bne.n	8009d3c <xTaskPriorityDisinherit+0xc8>
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe f878 	bl	8007de4 <uxListRemove>
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	619a      	str	r2, [r3, #24]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0c:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <xTaskPriorityDisinherit+0xd8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d903      	bls.n	8009d1c <xTaskPriorityDisinherit+0xa8>
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d18:	4a0c      	ldr	r2, [pc, #48]	; (8009d4c <xTaskPriorityDisinherit+0xd8>)
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4a09      	ldr	r2, [pc, #36]	; (8009d50 <xTaskPriorityDisinherit+0xdc>)
 8009d2a:	441a      	add	r2, r3
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4619      	mov	r1, r3
 8009d32:	4610      	mov	r0, r2
 8009d34:	f7fd fff9 	bl	8007d2a <vListInsertEnd>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	2000078c 	.word	0x2000078c
 8009d4c:	20000c68 	.word	0x20000c68
 8009d50:	20000790 	.word	0x20000790

08009d54 <vTaskPriorityDisinheritAfterTimeout>:
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b088      	sub	sp, #32
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	2301      	movs	r3, #1
 8009d64:	617b      	str	r3, [r7, #20]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d06c      	beq.n	8009e46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10b      	bne.n	8009d8c <vTaskPriorityDisinheritAfterTimeout+0x38>
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	b672      	cpsid	i
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	b662      	cpsie	i
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	e7fe      	b.n	8009d8a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d902      	bls.n	8009d9c <vTaskPriorityDisinheritAfterTimeout+0x48>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	61fb      	str	r3, [r7, #28]
 8009d9a:	e002      	b.n	8009da2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009da0:	61fb      	str	r3, [r7, #28]
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da6:	69fa      	ldr	r2, [r7, #28]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d04c      	beq.n	8009e46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d147      	bne.n	8009e46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8009db6:	4b26      	ldr	r3, [pc, #152]	; (8009e50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69ba      	ldr	r2, [r7, #24]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d10b      	bne.n	8009dd8 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	b672      	cpsid	i
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	b662      	cpsie	i
 8009dd4:	60bb      	str	r3, [r7, #8]
 8009dd6:	e7fe      	b.n	8009dd6 <vTaskPriorityDisinheritAfterTimeout+0x82>
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	613b      	str	r3, [r7, #16]
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	69fa      	ldr	r2, [r7, #28]
 8009de2:	62da      	str	r2, [r3, #44]	; 0x2c
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	db04      	blt.n	8009df6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	619a      	str	r2, [r3, #24]
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	6959      	ldr	r1, [r3, #20]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4a13      	ldr	r2, [pc, #76]	; (8009e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009e06:	4413      	add	r3, r2
 8009e08:	4299      	cmp	r1, r3
 8009e0a:	d11c      	bne.n	8009e46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	3304      	adds	r3, #4
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fd ffe7 	bl	8007de4 <uxListRemove>
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e1a:	4b0f      	ldr	r3, [pc, #60]	; (8009e58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d903      	bls.n	8009e2a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	4a0c      	ldr	r2, [pc, #48]	; (8009e58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4a07      	ldr	r2, [pc, #28]	; (8009e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009e38:	441a      	add	r2, r3
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	4619      	mov	r1, r3
 8009e40:	4610      	mov	r0, r2
 8009e42:	f7fd ff72 	bl	8007d2a <vListInsertEnd>
 8009e46:	bf00      	nop
 8009e48:	3720      	adds	r7, #32
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	2000078c 	.word	0x2000078c
 8009e54:	20000790 	.word	0x20000790
 8009e58:	20000c68 	.word	0x20000c68

08009e5c <pvTaskIncrementMutexHeldCount>:
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d004      	beq.n	8009e72 <pvTaskIncrementMutexHeldCount+0x16>
 8009e68:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e6e:	3201      	adds	r2, #1
 8009e70:	651a      	str	r2, [r3, #80]	; 0x50
 8009e72:	4b03      	ldr	r3, [pc, #12]	; (8009e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4618      	mov	r0, r3
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	2000078c 	.word	0x2000078c

08009e84 <prvAddCurrentTaskToDelayedList>:
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	4b21      	ldr	r3, [pc, #132]	; (8009f14 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	4b20      	ldr	r3, [pc, #128]	; (8009f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fd ffa2 	bl	8007de4 <uxListRemove>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ea6:	d10a      	bne.n	8009ebe <prvAddCurrentTaskToDelayedList+0x3a>
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d007      	beq.n	8009ebe <prvAddCurrentTaskToDelayedList+0x3a>
 8009eae:	4b1a      	ldr	r3, [pc, #104]	; (8009f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4819      	ldr	r0, [pc, #100]	; (8009f1c <prvAddCurrentTaskToDelayedList+0x98>)
 8009eb8:	f7fd ff37 	bl	8007d2a <vListInsertEnd>
 8009ebc:	e026      	b.n	8009f0c <prvAddCurrentTaskToDelayedList+0x88>
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	60bb      	str	r3, [r7, #8]
 8009ec6:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	605a      	str	r2, [r3, #4]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d209      	bcs.n	8009eea <prvAddCurrentTaskToDelayedList+0x66>
 8009ed6:	4b12      	ldr	r3, [pc, #72]	; (8009f20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	4b0f      	ldr	r3, [pc, #60]	; (8009f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f7fd ff45 	bl	8007d72 <vListInsert>
 8009ee8:	e010      	b.n	8009f0c <prvAddCurrentTaskToDelayedList+0x88>
 8009eea:	4b0e      	ldr	r3, [pc, #56]	; (8009f24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	f7fd ff3b 	bl	8007d72 <vListInsert>
 8009efc:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d202      	bcs.n	8009f0c <prvAddCurrentTaskToDelayedList+0x88>
 8009f06:	4a08      	ldr	r2, [pc, #32]	; (8009f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	bf00      	nop
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20000c64 	.word	0x20000c64
 8009f18:	2000078c 	.word	0x2000078c
 8009f1c:	20000c4c 	.word	0x20000c4c
 8009f20:	20000c1c 	.word	0x20000c1c
 8009f24:	20000c18 	.word	0x20000c18
 8009f28:	20000c80 	.word	0x20000c80

08009f2c <xTimerCreateTimerTask>:
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b08a      	sub	sp, #40	; 0x28
 8009f30:	af04      	add	r7, sp, #16
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	f000 fb0d 	bl	800a554 <prvCheckForValidListAndQueue>
 8009f3a:	4b1d      	ldr	r3, [pc, #116]	; (8009fb0 <xTimerCreateTimerTask+0x84>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d021      	beq.n	8009f86 <xTimerCreateTimerTask+0x5a>
 8009f42:	2300      	movs	r3, #0
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	2300      	movs	r3, #0
 8009f48:	60bb      	str	r3, [r7, #8]
 8009f4a:	1d3a      	adds	r2, r7, #4
 8009f4c:	f107 0108 	add.w	r1, r7, #8
 8009f50:	f107 030c 	add.w	r3, r7, #12
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fd fea1 	bl	8007c9c <vApplicationGetTimerTaskMemory>
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	9202      	str	r2, [sp, #8]
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	2332      	movs	r3, #50	; 0x32
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	460a      	mov	r2, r1
 8009f6c:	4911      	ldr	r1, [pc, #68]	; (8009fb4 <xTimerCreateTimerTask+0x88>)
 8009f6e:	4812      	ldr	r0, [pc, #72]	; (8009fb8 <xTimerCreateTimerTask+0x8c>)
 8009f70:	f7fe ffd2 	bl	8008f18 <xTaskCreateStatic>
 8009f74:	4602      	mov	r2, r0
 8009f76:	4b11      	ldr	r3, [pc, #68]	; (8009fbc <xTimerCreateTimerTask+0x90>)
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <xTimerCreateTimerTask+0x90>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <xTimerCreateTimerTask+0x5a>
 8009f82:	2301      	movs	r3, #1
 8009f84:	617b      	str	r3, [r7, #20]
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10b      	bne.n	8009fa4 <xTimerCreateTimerTask+0x78>
 8009f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f90:	b672      	cpsid	i
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	b662      	cpsie	i
 8009fa0:	613b      	str	r3, [r7, #16]
 8009fa2:	e7fe      	b.n	8009fa2 <xTimerCreateTimerTask+0x76>
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000cbc 	.word	0x20000cbc
 8009fb4:	0800b940 	.word	0x0800b940
 8009fb8:	0800a0f9 	.word	0x0800a0f9
 8009fbc:	20000cc0 	.word	0x20000cc0

08009fc0 <xTimerGenericCommand>:
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08a      	sub	sp, #40	; 0x28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10b      	bne.n	8009ff0 <xTimerGenericCommand+0x30>
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	b672      	cpsid	i
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	b662      	cpsie	i
 8009fec:	623b      	str	r3, [r7, #32]
 8009fee:	e7fe      	b.n	8009fee <xTimerGenericCommand+0x2e>
 8009ff0:	4b19      	ldr	r3, [pc, #100]	; (800a058 <xTimerGenericCommand+0x98>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d02a      	beq.n	800a04e <xTimerGenericCommand+0x8e>
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	613b      	str	r3, [r7, #16]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	61bb      	str	r3, [r7, #24]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2b05      	cmp	r3, #5
 800a008:	dc18      	bgt.n	800a03c <xTimerGenericCommand+0x7c>
 800a00a:	f7ff fdad 	bl	8009b68 <xTaskGetSchedulerState>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b02      	cmp	r3, #2
 800a012:	d109      	bne.n	800a028 <xTimerGenericCommand+0x68>
 800a014:	4b10      	ldr	r3, [pc, #64]	; (800a058 <xTimerGenericCommand+0x98>)
 800a016:	6818      	ldr	r0, [r3, #0]
 800a018:	f107 0110 	add.w	r1, r7, #16
 800a01c:	2300      	movs	r3, #0
 800a01e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a020:	f7fe f8c4 	bl	80081ac <xQueueGenericSend>
 800a024:	6278      	str	r0, [r7, #36]	; 0x24
 800a026:	e012      	b.n	800a04e <xTimerGenericCommand+0x8e>
 800a028:	4b0b      	ldr	r3, [pc, #44]	; (800a058 <xTimerGenericCommand+0x98>)
 800a02a:	6818      	ldr	r0, [r3, #0]
 800a02c:	f107 0110 	add.w	r1, r7, #16
 800a030:	2300      	movs	r3, #0
 800a032:	2200      	movs	r2, #0
 800a034:	f7fe f8ba 	bl	80081ac <xQueueGenericSend>
 800a038:	6278      	str	r0, [r7, #36]	; 0x24
 800a03a:	e008      	b.n	800a04e <xTimerGenericCommand+0x8e>
 800a03c:	4b06      	ldr	r3, [pc, #24]	; (800a058 <xTimerGenericCommand+0x98>)
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	f107 0110 	add.w	r1, r7, #16
 800a044:	2300      	movs	r3, #0
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	f7fe f9b2 	bl	80083b0 <xQueueGenericSendFromISR>
 800a04c:	6278      	str	r0, [r7, #36]	; 0x24
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	4618      	mov	r0, r3
 800a052:	3728      	adds	r7, #40	; 0x28
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	20000cbc 	.word	0x20000cbc

0800a05c <prvProcessExpiredTimer>:
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af02      	add	r7, sp, #8
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
 800a066:	4b23      	ldr	r3, [pc, #140]	; (800a0f4 <prvProcessExpiredTimer+0x98>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	3304      	adds	r3, #4
 800a074:	4618      	mov	r0, r3
 800a076:	f7fd feb5 	bl	8007de4 <uxListRemove>
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d023      	beq.n	800a0d0 <prvProcessExpiredTimer+0x74>
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	699a      	ldr	r2, [r3, #24]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	18d1      	adds	r1, r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	6978      	ldr	r0, [r7, #20]
 800a096:	f000 f8d3 	bl	800a240 <prvInsertTimerInActiveList>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d020      	beq.n	800a0e2 <prvProcessExpiredTimer+0x86>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	6978      	ldr	r0, [r7, #20]
 800a0ac:	f7ff ff88 	bl	8009fc0 <xTimerGenericCommand>
 800a0b0:	6138      	str	r0, [r7, #16]
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d114      	bne.n	800a0e2 <prvProcessExpiredTimer+0x86>
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	b672      	cpsid	i
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	b662      	cpsie	i
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	e7fe      	b.n	800a0ce <prvProcessExpiredTimer+0x72>
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0d6:	f023 0301 	bic.w	r3, r3, #1
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	6978      	ldr	r0, [r7, #20]
 800a0e8:	4798      	blx	r3
 800a0ea:	bf00      	nop
 800a0ec:	3718      	adds	r7, #24
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20000cb4 	.word	0x20000cb4

0800a0f8 <prvTimerTask>:
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	f107 0308 	add.w	r3, r7, #8
 800a104:	4618      	mov	r0, r3
 800a106:	f000 f857 	bl	800a1b8 <prvGetNextExpireTime>
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4619      	mov	r1, r3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 f803 	bl	800a11c <prvProcessTimerOrBlockTask>
 800a116:	f000 f8d5 	bl	800a2c4 <prvProcessReceivedCommands>
 800a11a:	e7f1      	b.n	800a100 <prvTimerTask+0x8>

0800a11c <prvProcessTimerOrBlockTask>:
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	f7ff f93b 	bl	80093a0 <vTaskSuspendAll>
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 f866 	bl	800a200 <prvSampleTimeNow>
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d130      	bne.n	800a19e <prvProcessTimerOrBlockTask+0x82>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10a      	bne.n	800a158 <prvProcessTimerOrBlockTask+0x3c>
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	429a      	cmp	r2, r3
 800a148:	d806      	bhi.n	800a158 <prvProcessTimerOrBlockTask+0x3c>
 800a14a:	f7ff f937 	bl	80093bc <xTaskResumeAll>
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff ff83 	bl	800a05c <prvProcessExpiredTimer>
 800a156:	e024      	b.n	800a1a2 <prvProcessTimerOrBlockTask+0x86>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d008      	beq.n	800a170 <prvProcessTimerOrBlockTask+0x54>
 800a15e:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <prvProcessTimerOrBlockTask+0x90>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d101      	bne.n	800a16c <prvProcessTimerOrBlockTask+0x50>
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <prvProcessTimerOrBlockTask+0x52>
 800a16c:	2300      	movs	r3, #0
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <prvProcessTimerOrBlockTask+0x94>)
 800a172:	6818      	ldr	r0, [r3, #0]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	4619      	mov	r1, r3
 800a17e:	f7fe fe97 	bl	8008eb0 <vQueueWaitForMessageRestricted>
 800a182:	f7ff f91b 	bl	80093bc <xTaskResumeAll>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <prvProcessTimerOrBlockTask+0x86>
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <prvProcessTimerOrBlockTask+0x98>)
 800a18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	e001      	b.n	800a1a2 <prvProcessTimerOrBlockTask+0x86>
 800a19e:	f7ff f90d 	bl	80093bc <xTaskResumeAll>
 800a1a2:	bf00      	nop
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20000cb8 	.word	0x20000cb8
 800a1b0:	20000cbc 	.word	0x20000cbc
 800a1b4:	e000ed04 	.word	0xe000ed04

0800a1b8 <prvGetNextExpireTime>:
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <prvGetNextExpireTime+0x44>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <prvGetNextExpireTime+0x16>
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	e000      	b.n	800a1d0 <prvGetNextExpireTime+0x18>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d105      	bne.n	800a1e8 <prvGetNextExpireTime+0x30>
 800a1dc:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <prvGetNextExpireTime+0x44>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	60fb      	str	r3, [r7, #12]
 800a1e6:	e001      	b.n	800a1ec <prvGetNextExpireTime+0x34>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	20000cb4 	.word	0x20000cb4

0800a200 <prvSampleTimeNow>:
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	f7ff f976 	bl	80094f8 <xTaskGetTickCount>
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	4b0b      	ldr	r3, [pc, #44]	; (800a23c <prvSampleTimeNow+0x3c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	429a      	cmp	r2, r3
 800a216:	d205      	bcs.n	800a224 <prvSampleTimeNow+0x24>
 800a218:	f000 f936 	bl	800a488 <prvSwitchTimerLists>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e002      	b.n	800a22a <prvSampleTimeNow+0x2a>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	4a04      	ldr	r2, [pc, #16]	; (800a23c <prvSampleTimeNow+0x3c>)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000cc4 	.word	0x20000cc4

0800a240 <prvInsertTimerInActiveList>:
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	605a      	str	r2, [r3, #4]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	611a      	str	r2, [r3, #16]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	429a      	cmp	r2, r3
 800a264:	d812      	bhi.n	800a28c <prvInsertTimerInActiveList+0x4c>
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	1ad2      	subs	r2, r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	429a      	cmp	r2, r3
 800a272:	d302      	bcc.n	800a27a <prvInsertTimerInActiveList+0x3a>
 800a274:	2301      	movs	r3, #1
 800a276:	617b      	str	r3, [r7, #20]
 800a278:	e01b      	b.n	800a2b2 <prvInsertTimerInActiveList+0x72>
 800a27a:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <prvInsertTimerInActiveList+0x7c>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3304      	adds	r3, #4
 800a282:	4619      	mov	r1, r3
 800a284:	4610      	mov	r0, r2
 800a286:	f7fd fd74 	bl	8007d72 <vListInsert>
 800a28a:	e012      	b.n	800a2b2 <prvInsertTimerInActiveList+0x72>
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	429a      	cmp	r2, r3
 800a292:	d206      	bcs.n	800a2a2 <prvInsertTimerInActiveList+0x62>
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d302      	bcc.n	800a2a2 <prvInsertTimerInActiveList+0x62>
 800a29c:	2301      	movs	r3, #1
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	e007      	b.n	800a2b2 <prvInsertTimerInActiveList+0x72>
 800a2a2:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <prvInsertTimerInActiveList+0x80>)
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	f7fd fd60 	bl	8007d72 <vListInsert>
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20000cb8 	.word	0x20000cb8
 800a2c0:	20000cb4 	.word	0x20000cb4

0800a2c4 <prvProcessReceivedCommands>:
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08e      	sub	sp, #56	; 0x38
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	e0cc      	b.n	800a466 <prvProcessReceivedCommands+0x1a2>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	da19      	bge.n	800a306 <prvProcessReceivedCommands+0x42>
 800a2d2:	1d3b      	adds	r3, r7, #4
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10b      	bne.n	800a2f6 <prvProcessReceivedCommands+0x32>
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	b672      	cpsid	i
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	b662      	cpsie	i
 800a2f2:	61fb      	str	r3, [r7, #28]
 800a2f4:	e7fe      	b.n	800a2f4 <prvProcessReceivedCommands+0x30>
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2fc:	6850      	ldr	r0, [r2, #4]
 800a2fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a300:	6892      	ldr	r2, [r2, #8]
 800a302:	4611      	mov	r1, r2
 800a304:	4798      	blx	r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f2c0 80ab 	blt.w	800a464 <prvProcessReceivedCommands+0x1a0>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	62bb      	str	r3, [r7, #40]	; 0x28
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <prvProcessReceivedCommands+0x60>
 800a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31c:	3304      	adds	r3, #4
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fd fd60 	bl	8007de4 <uxListRemove>
 800a324:	463b      	mov	r3, r7
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff ff6a 	bl	800a200 <prvSampleTimeNow>
 800a32c:	6278      	str	r0, [r7, #36]	; 0x24
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b09      	cmp	r3, #9
 800a332:	f200 8098 	bhi.w	800a466 <prvProcessReceivedCommands+0x1a2>
 800a336:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <prvProcessReceivedCommands+0x78>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a365 	.word	0x0800a365
 800a340:	0800a365 	.word	0x0800a365
 800a344:	0800a365 	.word	0x0800a365
 800a348:	0800a3db 	.word	0x0800a3db
 800a34c:	0800a3ef 	.word	0x0800a3ef
 800a350:	0800a43b 	.word	0x0800a43b
 800a354:	0800a365 	.word	0x0800a365
 800a358:	0800a365 	.word	0x0800a365
 800a35c:	0800a3db 	.word	0x0800a3db
 800a360:	0800a3ef 	.word	0x0800a3ef
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a36a:	f043 0301 	orr.w	r3, r3, #1
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	18d1      	adds	r1, r2, r3
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a384:	f7ff ff5c 	bl	800a240 <prvInsertTimerInActiveList>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d06b      	beq.n	800a466 <prvProcessReceivedCommands+0x1a2>
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a394:	4798      	blx	r3
 800a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d060      	beq.n	800a466 <prvProcessReceivedCommands+0x1a2>
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	441a      	add	r2, r3
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3b6:	f7ff fe03 	bl	8009fc0 <xTimerGenericCommand>
 800a3ba:	6238      	str	r0, [r7, #32]
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d151      	bne.n	800a466 <prvProcessReceivedCommands+0x1a2>
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	b672      	cpsid	i
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	b662      	cpsie	i
 800a3d6:	61bb      	str	r3, [r7, #24]
 800a3d8:	e7fe      	b.n	800a3d8 <prvProcessReceivedCommands+0x114>
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3e0:	f023 0301 	bic.w	r3, r3, #1
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a3ec:	e03b      	b.n	800a466 <prvProcessReceivedCommands+0x1a2>
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f4:	f043 0301 	orr.w	r3, r3, #1
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	619a      	str	r2, [r3, #24]
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10b      	bne.n	800a426 <prvProcessReceivedCommands+0x162>
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	b672      	cpsid	i
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	b662      	cpsie	i
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	e7fe      	b.n	800a424 <prvProcessReceivedCommands+0x160>
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	699a      	ldr	r2, [r3, #24]
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	18d1      	adds	r1, r2, r3
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a434:	f7ff ff04 	bl	800a240 <prvInsertTimerInActiveList>
 800a438:	e015      	b.n	800a466 <prvProcessReceivedCommands+0x1a2>
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a440:	f003 0302 	and.w	r3, r3, #2
 800a444:	2b00      	cmp	r3, #0
 800a446:	d103      	bne.n	800a450 <prvProcessReceivedCommands+0x18c>
 800a448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44a:	f000 fbb7 	bl	800abbc <vPortFree>
 800a44e:	e00a      	b.n	800a466 <prvProcessReceivedCommands+0x1a2>
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a462:	e000      	b.n	800a466 <prvProcessReceivedCommands+0x1a2>
 800a464:	bf00      	nop
 800a466:	4b07      	ldr	r3, [pc, #28]	; (800a484 <prvProcessReceivedCommands+0x1c0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	1d39      	adds	r1, r7, #4
 800a46c:	2200      	movs	r2, #0
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe f8cc 	bl	800860c <xQueueReceive>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	f47f af28 	bne.w	800a2cc <prvProcessReceivedCommands+0x8>
 800a47c:	bf00      	nop
 800a47e:	3730      	adds	r7, #48	; 0x30
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20000cbc 	.word	0x20000cbc

0800a488 <prvSwitchTimerLists>:
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af02      	add	r7, sp, #8
 800a48e:	e049      	b.n	800a524 <prvSwitchTimerLists+0x9c>
 800a490:	4b2e      	ldr	r3, [pc, #184]	; (800a54c <prvSwitchTimerLists+0xc4>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	613b      	str	r3, [r7, #16]
 800a49a:	4b2c      	ldr	r3, [pc, #176]	; (800a54c <prvSwitchTimerLists+0xc4>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fd fc9b 	bl	8007de4 <uxListRemove>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	4798      	blx	r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d02f      	beq.n	800a524 <prvSwitchTimerLists+0x9c>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	60bb      	str	r3, [r7, #8]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d90e      	bls.n	800a4f4 <prvSwitchTimerLists+0x6c>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	605a      	str	r2, [r3, #4]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	611a      	str	r2, [r3, #16]
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	; (800a54c <prvSwitchTimerLists+0xc4>)
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	f7fd fc40 	bl	8007d72 <vListInsert>
 800a4f2:	e017      	b.n	800a524 <prvSwitchTimerLists+0x9c>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff fd5e 	bl	8009fc0 <xTimerGenericCommand>
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10b      	bne.n	800a524 <prvSwitchTimerLists+0x9c>
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	b672      	cpsid	i
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	b662      	cpsie	i
 800a520:	603b      	str	r3, [r7, #0]
 800a522:	e7fe      	b.n	800a522 <prvSwitchTimerLists+0x9a>
 800a524:	4b09      	ldr	r3, [pc, #36]	; (800a54c <prvSwitchTimerLists+0xc4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1b0      	bne.n	800a490 <prvSwitchTimerLists+0x8>
 800a52e:	4b07      	ldr	r3, [pc, #28]	; (800a54c <prvSwitchTimerLists+0xc4>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	4b06      	ldr	r3, [pc, #24]	; (800a550 <prvSwitchTimerLists+0xc8>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a04      	ldr	r2, [pc, #16]	; (800a54c <prvSwitchTimerLists+0xc4>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	4a04      	ldr	r2, [pc, #16]	; (800a550 <prvSwitchTimerLists+0xc8>)
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	bf00      	nop
 800a544:	3718      	adds	r7, #24
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000cb4 	.word	0x20000cb4
 800a550:	20000cb8 	.word	0x20000cb8

0800a554 <prvCheckForValidListAndQueue>:
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af02      	add	r7, sp, #8
 800a55a:	f000 f945 	bl	800a7e8 <vPortEnterCritical>
 800a55e:	4b15      	ldr	r3, [pc, #84]	; (800a5b4 <prvCheckForValidListAndQueue+0x60>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d120      	bne.n	800a5a8 <prvCheckForValidListAndQueue+0x54>
 800a566:	4814      	ldr	r0, [pc, #80]	; (800a5b8 <prvCheckForValidListAndQueue+0x64>)
 800a568:	f7fd fbb2 	bl	8007cd0 <vListInitialise>
 800a56c:	4813      	ldr	r0, [pc, #76]	; (800a5bc <prvCheckForValidListAndQueue+0x68>)
 800a56e:	f7fd fbaf 	bl	8007cd0 <vListInitialise>
 800a572:	4b13      	ldr	r3, [pc, #76]	; (800a5c0 <prvCheckForValidListAndQueue+0x6c>)
 800a574:	4a10      	ldr	r2, [pc, #64]	; (800a5b8 <prvCheckForValidListAndQueue+0x64>)
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	4b12      	ldr	r3, [pc, #72]	; (800a5c4 <prvCheckForValidListAndQueue+0x70>)
 800a57a:	4a10      	ldr	r2, [pc, #64]	; (800a5bc <prvCheckForValidListAndQueue+0x68>)
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	2300      	movs	r3, #0
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	4b11      	ldr	r3, [pc, #68]	; (800a5c8 <prvCheckForValidListAndQueue+0x74>)
 800a584:	4a11      	ldr	r2, [pc, #68]	; (800a5cc <prvCheckForValidListAndQueue+0x78>)
 800a586:	2110      	movs	r1, #16
 800a588:	200a      	movs	r0, #10
 800a58a:	f7fd fcbf 	bl	8007f0c <xQueueGenericCreateStatic>
 800a58e:	4602      	mov	r2, r0
 800a590:	4b08      	ldr	r3, [pc, #32]	; (800a5b4 <prvCheckForValidListAndQueue+0x60>)
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	4b07      	ldr	r3, [pc, #28]	; (800a5b4 <prvCheckForValidListAndQueue+0x60>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <prvCheckForValidListAndQueue+0x54>
 800a59c:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <prvCheckForValidListAndQueue+0x60>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	490b      	ldr	r1, [pc, #44]	; (800a5d0 <prvCheckForValidListAndQueue+0x7c>)
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe fc32 	bl	8008e0c <vQueueAddToRegistry>
 800a5a8:	f000 f950 	bl	800a84c <vPortExitCritical>
 800a5ac:	bf00      	nop
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20000cbc 	.word	0x20000cbc
 800a5b8:	20000c8c 	.word	0x20000c8c
 800a5bc:	20000ca0 	.word	0x20000ca0
 800a5c0:	20000cb4 	.word	0x20000cb4
 800a5c4:	20000cb8 	.word	0x20000cb8
 800a5c8:	20000d68 	.word	0x20000d68
 800a5cc:	20000cc8 	.word	0x20000cc8
 800a5d0:	0800b948 	.word	0x0800b948

0800a5d4 <pxPortInitialiseStack>:
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3b04      	subs	r3, #4
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f023 0201 	bic.w	r2, r3, #1
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3b04      	subs	r3, #4
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	4a0c      	ldr	r2, [pc, #48]	; (800a638 <pxPortInitialiseStack+0x64>)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3b14      	subs	r3, #20
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3b04      	subs	r3, #4
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f06f 0202 	mvn.w	r2, #2
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3b20      	subs	r3, #32
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	0800a63d 	.word	0x0800a63d

0800a63c <prvTaskExitError>:
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	2300      	movs	r3, #0
 800a644:	607b      	str	r3, [r7, #4]
 800a646:	4b13      	ldr	r3, [pc, #76]	; (800a694 <prvTaskExitError+0x58>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a64e:	d00b      	beq.n	800a668 <prvTaskExitError+0x2c>
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	b672      	cpsid	i
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	b662      	cpsie	i
 800a664:	60fb      	str	r3, [r7, #12]
 800a666:	e7fe      	b.n	800a666 <prvTaskExitError+0x2a>
 800a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66c:	b672      	cpsid	i
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	b662      	cpsie	i
 800a67c:	60bb      	str	r3, [r7, #8]
 800a67e:	bf00      	nop
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d0fc      	beq.n	800a680 <prvTaskExitError+0x44>
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	2000003c 	.word	0x2000003c
	...

0800a6a0 <SVC_Handler>:
 800a6a0:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <pxCurrentTCBConst2>)
 800a6a2:	6819      	ldr	r1, [r3, #0]
 800a6a4:	6808      	ldr	r0, [r1, #0]
 800a6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6aa:	f380 8809 	msr	PSP, r0
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f04f 0000 	mov.w	r0, #0
 800a6b6:	f380 8811 	msr	BASEPRI, r0
 800a6ba:	4770      	bx	lr
 800a6bc:	f3af 8000 	nop.w

0800a6c0 <pxCurrentTCBConst2>:
 800a6c0:	2000078c 	.word	0x2000078c
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop

0800a6c8 <prvPortStartFirstTask>:
 800a6c8:	4808      	ldr	r0, [pc, #32]	; (800a6ec <prvPortStartFirstTask+0x24>)
 800a6ca:	6800      	ldr	r0, [r0, #0]
 800a6cc:	6800      	ldr	r0, [r0, #0]
 800a6ce:	f380 8808 	msr	MSP, r0
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f380 8814 	msr	CONTROL, r0
 800a6da:	b662      	cpsie	i
 800a6dc:	b661      	cpsie	f
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	df00      	svc	0
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e000ed08 	.word	0xe000ed08

0800a6f0 <xPortStartScheduler>:
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4b36      	ldr	r3, [pc, #216]	; (800a7d0 <xPortStartScheduler+0xe0>)
 800a6f8:	60fb      	str	r3, [r7, #12]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	607b      	str	r3, [r7, #4]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	22ff      	movs	r2, #255	; 0xff
 800a706:	701a      	strb	r2, [r3, #0]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	70fb      	strb	r3, [r7, #3]
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	4b2e      	ldr	r3, [pc, #184]	; (800a7d4 <xPortStartScheduler+0xe4>)
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	4b2e      	ldr	r3, [pc, #184]	; (800a7d8 <xPortStartScheduler+0xe8>)
 800a720:	2207      	movs	r2, #7
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	e009      	b.n	800a73a <xPortStartScheduler+0x4a>
 800a726:	4b2c      	ldr	r3, [pc, #176]	; (800a7d8 <xPortStartScheduler+0xe8>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	4a2a      	ldr	r2, [pc, #168]	; (800a7d8 <xPortStartScheduler+0xe8>)
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	b2db      	uxtb	r3, r3
 800a738:	70fb      	strb	r3, [r7, #3]
 800a73a:	78fb      	ldrb	r3, [r7, #3]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a742:	2b80      	cmp	r3, #128	; 0x80
 800a744:	d0ef      	beq.n	800a726 <xPortStartScheduler+0x36>
 800a746:	4b24      	ldr	r3, [pc, #144]	; (800a7d8 <xPortStartScheduler+0xe8>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f1c3 0307 	rsb	r3, r3, #7
 800a74e:	2b04      	cmp	r3, #4
 800a750:	d00b      	beq.n	800a76a <xPortStartScheduler+0x7a>
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	b672      	cpsid	i
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	b662      	cpsie	i
 800a766:	60bb      	str	r3, [r7, #8]
 800a768:	e7fe      	b.n	800a768 <xPortStartScheduler+0x78>
 800a76a:	4b1b      	ldr	r3, [pc, #108]	; (800a7d8 <xPortStartScheduler+0xe8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	021b      	lsls	r3, r3, #8
 800a770:	4a19      	ldr	r2, [pc, #100]	; (800a7d8 <xPortStartScheduler+0xe8>)
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	4b18      	ldr	r3, [pc, #96]	; (800a7d8 <xPortStartScheduler+0xe8>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a77c:	4a16      	ldr	r2, [pc, #88]	; (800a7d8 <xPortStartScheduler+0xe8>)
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	b2da      	uxtb	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	701a      	strb	r2, [r3, #0]
 800a788:	4b14      	ldr	r3, [pc, #80]	; (800a7dc <xPortStartScheduler+0xec>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a13      	ldr	r2, [pc, #76]	; (800a7dc <xPortStartScheduler+0xec>)
 800a78e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	4b11      	ldr	r3, [pc, #68]	; (800a7dc <xPortStartScheduler+0xec>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a10      	ldr	r2, [pc, #64]	; (800a7dc <xPortStartScheduler+0xec>)
 800a79a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	f000 f8d4 	bl	800a94c <vPortSetupTimerInterrupt>
 800a7a4:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <xPortStartScheduler+0xf0>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]
 800a7aa:	f000 f8f3 	bl	800a994 <vPortEnableVFP>
 800a7ae:	4b0d      	ldr	r3, [pc, #52]	; (800a7e4 <xPortStartScheduler+0xf4>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a0c      	ldr	r2, [pc, #48]	; (800a7e4 <xPortStartScheduler+0xf4>)
 800a7b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	f7ff ff85 	bl	800a6c8 <prvPortStartFirstTask>
 800a7be:	f7fe ff65 	bl	800968c <vTaskSwitchContext>
 800a7c2:	f7ff ff3b 	bl	800a63c <prvTaskExitError>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	e000e400 	.word	0xe000e400
 800a7d4:	20000db8 	.word	0x20000db8
 800a7d8:	20000dbc 	.word	0x20000dbc
 800a7dc:	e000ed20 	.word	0xe000ed20
 800a7e0:	2000003c 	.word	0x2000003c
 800a7e4:	e000ef34 	.word	0xe000ef34

0800a7e8 <vPortEnterCritical>:
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	b672      	cpsid	i
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	b662      	cpsie	i
 800a802:	607b      	str	r3, [r7, #4]
 800a804:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <vPortEnterCritical+0x5c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3301      	adds	r3, #1
 800a80a:	4a0e      	ldr	r2, [pc, #56]	; (800a844 <vPortEnterCritical+0x5c>)
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	4b0d      	ldr	r3, [pc, #52]	; (800a844 <vPortEnterCritical+0x5c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d110      	bne.n	800a838 <vPortEnterCritical+0x50>
 800a816:	4b0c      	ldr	r3, [pc, #48]	; (800a848 <vPortEnterCritical+0x60>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <vPortEnterCritical+0x50>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	b672      	cpsid	i
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	b662      	cpsie	i
 800a834:	603b      	str	r3, [r7, #0]
 800a836:	e7fe      	b.n	800a836 <vPortEnterCritical+0x4e>
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	2000003c 	.word	0x2000003c
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <vPortExitCritical>:
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	4b12      	ldr	r3, [pc, #72]	; (800a89c <vPortExitCritical+0x50>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10b      	bne.n	800a872 <vPortExitCritical+0x26>
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	b672      	cpsid	i
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	b662      	cpsie	i
 800a86e:	607b      	str	r3, [r7, #4]
 800a870:	e7fe      	b.n	800a870 <vPortExitCritical+0x24>
 800a872:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <vPortExitCritical+0x50>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3b01      	subs	r3, #1
 800a878:	4a08      	ldr	r2, [pc, #32]	; (800a89c <vPortExitCritical+0x50>)
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	4b07      	ldr	r3, [pc, #28]	; (800a89c <vPortExitCritical+0x50>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <vPortExitCritical+0x42>
 800a884:	2300      	movs	r3, #0
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	2000003c 	.word	0x2000003c

0800a8a0 <PendSV_Handler>:
 800a8a0:	f3ef 8009 	mrs	r0, PSP
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4b15      	ldr	r3, [pc, #84]	; (800a900 <pxCurrentTCBConst>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	f01e 0f10 	tst.w	lr, #16
 800a8b0:	bf08      	it	eq
 800a8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	6010      	str	r0, [r2, #0]
 800a8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8c4:	b672      	cpsid	i
 800a8c6:	f380 8811 	msr	BASEPRI, r0
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	b662      	cpsie	i
 800a8d4:	f7fe feda 	bl	800968c <vTaskSwitchContext>
 800a8d8:	f04f 0000 	mov.w	r0, #0
 800a8dc:	f380 8811 	msr	BASEPRI, r0
 800a8e0:	bc09      	pop	{r0, r3}
 800a8e2:	6819      	ldr	r1, [r3, #0]
 800a8e4:	6808      	ldr	r0, [r1, #0]
 800a8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ea:	f01e 0f10 	tst.w	lr, #16
 800a8ee:	bf08      	it	eq
 800a8f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8f4:	f380 8809 	msr	PSP, r0
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop

0800a900 <pxCurrentTCBConst>:
 800a900:	2000078c 	.word	0x2000078c
 800a904:	bf00      	nop
 800a906:	bf00      	nop

0800a908 <SysTick_Handler>:
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	b672      	cpsid	i
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	b662      	cpsie	i
 800a922:	607b      	str	r3, [r7, #4]
 800a924:	f7fe fdf8 	bl	8009518 <xTaskIncrementTick>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <SysTick_Handler+0x2e>
 800a92e:	4b06      	ldr	r3, [pc, #24]	; (800a948 <SysTick_Handler+0x40>)
 800a930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	2300      	movs	r3, #0
 800a938:	603b      	str	r3, [r7, #0]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	e000ed04 	.word	0xe000ed04

0800a94c <vPortSetupTimerInterrupt>:
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
 800a950:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <vPortSetupTimerInterrupt+0x34>)
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	4b0b      	ldr	r3, [pc, #44]	; (800a984 <vPortSetupTimerInterrupt+0x38>)
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <vPortSetupTimerInterrupt+0x3c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <vPortSetupTimerInterrupt+0x40>)
 800a962:	fba2 2303 	umull	r2, r3, r2, r3
 800a966:	099b      	lsrs	r3, r3, #6
 800a968:	4a09      	ldr	r2, [pc, #36]	; (800a990 <vPortSetupTimerInterrupt+0x44>)
 800a96a:	3b01      	subs	r3, #1
 800a96c:	6013      	str	r3, [r2, #0]
 800a96e:	4b04      	ldr	r3, [pc, #16]	; (800a980 <vPortSetupTimerInterrupt+0x34>)
 800a970:	2207      	movs	r2, #7
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	bf00      	nop
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	e000e010 	.word	0xe000e010
 800a984:	e000e018 	.word	0xe000e018
 800a988:	20000030 	.word	0x20000030
 800a98c:	10624dd3 	.word	0x10624dd3
 800a990:	e000e014 	.word	0xe000e014

0800a994 <vPortEnableVFP>:
 800a994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9a4 <vPortEnableVFP+0x10>
 800a998:	6801      	ldr	r1, [r0, #0]
 800a99a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a99e:	6001      	str	r1, [r0, #0]
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	e000ed88 	.word	0xe000ed88

0800a9a8 <vPortValidateInterruptPriority>:
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	f3ef 8305 	mrs	r3, IPSR
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b0f      	cmp	r3, #15
 800a9b8:	d915      	bls.n	800a9e6 <vPortValidateInterruptPriority+0x3e>
 800a9ba:	4a18      	ldr	r2, [pc, #96]	; (800aa1c <vPortValidateInterruptPriority+0x74>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	72fb      	strb	r3, [r7, #11]
 800a9c4:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <vPortValidateInterruptPriority+0x78>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	7afa      	ldrb	r2, [r7, #11]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d20b      	bcs.n	800a9e6 <vPortValidateInterruptPriority+0x3e>
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	b672      	cpsid	i
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	b662      	cpsie	i
 800a9e2:	607b      	str	r3, [r7, #4]
 800a9e4:	e7fe      	b.n	800a9e4 <vPortValidateInterruptPriority+0x3c>
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <vPortValidateInterruptPriority+0x7c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9ee:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <vPortValidateInterruptPriority+0x80>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d90b      	bls.n	800aa0e <vPortValidateInterruptPriority+0x66>
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	b672      	cpsid	i
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	b662      	cpsie	i
 800aa0a:	603b      	str	r3, [r7, #0]
 800aa0c:	e7fe      	b.n	800aa0c <vPortValidateInterruptPriority+0x64>
 800aa0e:	bf00      	nop
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	e000e3f0 	.word	0xe000e3f0
 800aa20:	20000db8 	.word	0x20000db8
 800aa24:	e000ed0c 	.word	0xe000ed0c
 800aa28:	20000dbc 	.word	0x20000dbc

0800aa2c <pvPortMalloc>:
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08a      	sub	sp, #40	; 0x28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	2300      	movs	r3, #0
 800aa36:	61fb      	str	r3, [r7, #28]
 800aa38:	f7fe fcb2 	bl	80093a0 <vTaskSuspendAll>
 800aa3c:	4b5a      	ldr	r3, [pc, #360]	; (800aba8 <pvPortMalloc+0x17c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <pvPortMalloc+0x1c>
 800aa44:	f000 f916 	bl	800ac74 <prvHeapInit>
 800aa48:	4b58      	ldr	r3, [pc, #352]	; (800abac <pvPortMalloc+0x180>)
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4013      	ands	r3, r2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f040 8090 	bne.w	800ab76 <pvPortMalloc+0x14a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01e      	beq.n	800aa9a <pvPortMalloc+0x6e>
 800aa5c:	2208      	movs	r2, #8
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4413      	add	r3, r2
 800aa62:	607b      	str	r3, [r7, #4]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f003 0307 	and.w	r3, r3, #7
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d015      	beq.n	800aa9a <pvPortMalloc+0x6e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f023 0307 	bic.w	r3, r3, #7
 800aa74:	3308      	adds	r3, #8
 800aa76:	607b      	str	r3, [r7, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f003 0307 	and.w	r3, r3, #7
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00b      	beq.n	800aa9a <pvPortMalloc+0x6e>
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	b672      	cpsid	i
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	b662      	cpsie	i
 800aa96:	617b      	str	r3, [r7, #20]
 800aa98:	e7fe      	b.n	800aa98 <pvPortMalloc+0x6c>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d06a      	beq.n	800ab76 <pvPortMalloc+0x14a>
 800aaa0:	4b43      	ldr	r3, [pc, #268]	; (800abb0 <pvPortMalloc+0x184>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d865      	bhi.n	800ab76 <pvPortMalloc+0x14a>
 800aaaa:	4b42      	ldr	r3, [pc, #264]	; (800abb4 <pvPortMalloc+0x188>)
 800aaac:	623b      	str	r3, [r7, #32]
 800aaae:	4b41      	ldr	r3, [pc, #260]	; (800abb4 <pvPortMalloc+0x188>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	627b      	str	r3, [r7, #36]	; 0x24
 800aab4:	e004      	b.n	800aac0 <pvPortMalloc+0x94>
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	623b      	str	r3, [r7, #32]
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	627b      	str	r3, [r7, #36]	; 0x24
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d903      	bls.n	800aad2 <pvPortMalloc+0xa6>
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1f1      	bne.n	800aab6 <pvPortMalloc+0x8a>
 800aad2:	4b35      	ldr	r3, [pc, #212]	; (800aba8 <pvPortMalloc+0x17c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad8:	429a      	cmp	r2, r3
 800aada:	d04c      	beq.n	800ab76 <pvPortMalloc+0x14a>
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2208      	movs	r2, #8
 800aae2:	4413      	add	r3, r2
 800aae4:	61fb      	str	r3, [r7, #28]
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	1ad2      	subs	r2, r2, r3
 800aaf6:	2308      	movs	r3, #8
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d920      	bls.n	800ab40 <pvPortMalloc+0x114>
 800aafe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4413      	add	r3, r2
 800ab04:	61bb      	str	r3, [r7, #24]
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <pvPortMalloc+0xfc>
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	b672      	cpsid	i
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	b662      	cpsie	i
 800ab24:	613b      	str	r3, [r7, #16]
 800ab26:	e7fe      	b.n	800ab26 <pvPortMalloc+0xfa>
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	1ad2      	subs	r2, r2, r3
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	605a      	str	r2, [r3, #4]
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	605a      	str	r2, [r3, #4]
 800ab3a:	69b8      	ldr	r0, [r7, #24]
 800ab3c:	f000 f8fc 	bl	800ad38 <prvInsertBlockIntoFreeList>
 800ab40:	4b1b      	ldr	r3, [pc, #108]	; (800abb0 <pvPortMalloc+0x184>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	4a19      	ldr	r2, [pc, #100]	; (800abb0 <pvPortMalloc+0x184>)
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	4b18      	ldr	r3, [pc, #96]	; (800abb0 <pvPortMalloc+0x184>)
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	4b19      	ldr	r3, [pc, #100]	; (800abb8 <pvPortMalloc+0x18c>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d203      	bcs.n	800ab62 <pvPortMalloc+0x136>
 800ab5a:	4b15      	ldr	r3, [pc, #84]	; (800abb0 <pvPortMalloc+0x184>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a16      	ldr	r2, [pc, #88]	; (800abb8 <pvPortMalloc+0x18c>)
 800ab60:	6013      	str	r3, [r2, #0]
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	4b11      	ldr	r3, [pc, #68]	; (800abac <pvPortMalloc+0x180>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	605a      	str	r2, [r3, #4]
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	f7fe fc21 	bl	80093bc <xTaskResumeAll>
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	f003 0307 	and.w	r3, r3, #7
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00b      	beq.n	800ab9c <pvPortMalloc+0x170>
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	b672      	cpsid	i
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	b662      	cpsie	i
 800ab98:	60fb      	str	r3, [r7, #12]
 800ab9a:	e7fe      	b.n	800ab9a <pvPortMalloc+0x16e>
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3728      	adds	r7, #40	; 0x28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	200049c8 	.word	0x200049c8
 800abac:	200049d4 	.word	0x200049d4
 800abb0:	200049cc 	.word	0x200049cc
 800abb4:	200049c0 	.word	0x200049c0
 800abb8:	200049d0 	.word	0x200049d0

0800abbc <vPortFree>:
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	617b      	str	r3, [r7, #20]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d04a      	beq.n	800ac64 <vPortFree+0xa8>
 800abce:	2308      	movs	r3, #8
 800abd0:	425b      	negs	r3, r3
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	4413      	add	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	613b      	str	r3, [r7, #16]
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	4b22      	ldr	r3, [pc, #136]	; (800ac6c <vPortFree+0xb0>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4013      	ands	r3, r2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10b      	bne.n	800ac02 <vPortFree+0x46>
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	b672      	cpsid	i
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	b662      	cpsie	i
 800abfe:	60fb      	str	r3, [r7, #12]
 800ac00:	e7fe      	b.n	800ac00 <vPortFree+0x44>
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00b      	beq.n	800ac22 <vPortFree+0x66>
 800ac0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0e:	b672      	cpsid	i
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	b662      	cpsie	i
 800ac1e:	60bb      	str	r3, [r7, #8]
 800ac20:	e7fe      	b.n	800ac20 <vPortFree+0x64>
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	4b11      	ldr	r3, [pc, #68]	; (800ac6c <vPortFree+0xb0>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d019      	beq.n	800ac64 <vPortFree+0xa8>
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d115      	bne.n	800ac64 <vPortFree+0xa8>
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <vPortFree+0xb0>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	43db      	mvns	r3, r3
 800ac42:	401a      	ands	r2, r3
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	605a      	str	r2, [r3, #4]
 800ac48:	f7fe fbaa 	bl	80093a0 <vTaskSuspendAll>
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <vPortFree+0xb4>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4413      	add	r3, r2
 800ac56:	4a06      	ldr	r2, [pc, #24]	; (800ac70 <vPortFree+0xb4>)
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	6938      	ldr	r0, [r7, #16]
 800ac5c:	f000 f86c 	bl	800ad38 <prvInsertBlockIntoFreeList>
 800ac60:	f7fe fbac 	bl	80093bc <xTaskResumeAll>
 800ac64:	bf00      	nop
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	200049d4 	.word	0x200049d4
 800ac70:	200049cc 	.word	0x200049cc

0800ac74 <prvHeapInit>:
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ac7e:	60bb      	str	r3, [r7, #8]
 800ac80:	4b27      	ldr	r3, [pc, #156]	; (800ad20 <prvHeapInit+0xac>)
 800ac82:	60fb      	str	r3, [r7, #12]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f003 0307 	and.w	r3, r3, #7
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00c      	beq.n	800aca8 <prvHeapInit+0x34>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3307      	adds	r3, #7
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f023 0307 	bic.w	r3, r3, #7
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	4a1f      	ldr	r2, [pc, #124]	; (800ad20 <prvHeapInit+0xac>)
 800aca4:	4413      	add	r3, r2
 800aca6:	60bb      	str	r3, [r7, #8]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	607b      	str	r3, [r7, #4]
 800acac:	4a1d      	ldr	r2, [pc, #116]	; (800ad24 <prvHeapInit+0xb0>)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	4b1c      	ldr	r3, [pc, #112]	; (800ad24 <prvHeapInit+0xb0>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	605a      	str	r2, [r3, #4]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	4413      	add	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	2208      	movs	r2, #8
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	1a9b      	subs	r3, r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f023 0307 	bic.w	r3, r3, #7
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	4a15      	ldr	r2, [pc, #84]	; (800ad28 <prvHeapInit+0xb4>)
 800acd4:	6013      	str	r3, [r2, #0]
 800acd6:	4b14      	ldr	r3, [pc, #80]	; (800ad28 <prvHeapInit+0xb4>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2200      	movs	r2, #0
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	4b12      	ldr	r3, [pc, #72]	; (800ad28 <prvHeapInit+0xb4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	603b      	str	r3, [r7, #0]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	1ad2      	subs	r2, r2, r3
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	605a      	str	r2, [r3, #4]
 800acf4:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <prvHeapInit+0xb4>)
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4a0a      	ldr	r2, [pc, #40]	; (800ad2c <prvHeapInit+0xb8>)
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <prvHeapInit+0xbc>)
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	4b09      	ldr	r3, [pc, #36]	; (800ad34 <prvHeapInit+0xc0>)
 800ad0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	bf00      	nop
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	20000dc0 	.word	0x20000dc0
 800ad24:	200049c0 	.word	0x200049c0
 800ad28:	200049c8 	.word	0x200049c8
 800ad2c:	200049d0 	.word	0x200049d0
 800ad30:	200049cc 	.word	0x200049cc
 800ad34:	200049d4 	.word	0x200049d4

0800ad38 <prvInsertBlockIntoFreeList>:
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	4b28      	ldr	r3, [pc, #160]	; (800ade4 <prvInsertBlockIntoFreeList+0xac>)
 800ad42:	60fb      	str	r3, [r7, #12]
 800ad44:	e002      	b.n	800ad4c <prvInsertBlockIntoFreeList+0x14>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d8f7      	bhi.n	800ad46 <prvInsertBlockIntoFreeList+0xe>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	60bb      	str	r3, [r7, #8]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	4413      	add	r3, r2
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d108      	bne.n	800ad7a <prvInsertBlockIntoFreeList+0x42>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	441a      	add	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	605a      	str	r2, [r3, #4]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	607b      	str	r3, [r7, #4]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	60bb      	str	r3, [r7, #8]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	441a      	add	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d118      	bne.n	800adc0 <prvInsertBlockIntoFreeList+0x88>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4b15      	ldr	r3, [pc, #84]	; (800ade8 <prvInsertBlockIntoFreeList+0xb0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d00d      	beq.n	800adb6 <prvInsertBlockIntoFreeList+0x7e>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685a      	ldr	r2, [r3, #4]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	441a      	add	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	605a      	str	r2, [r3, #4]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	e008      	b.n	800adc8 <prvInsertBlockIntoFreeList+0x90>
 800adb6:	4b0c      	ldr	r3, [pc, #48]	; (800ade8 <prvInsertBlockIntoFreeList+0xb0>)
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	601a      	str	r2, [r3, #0]
 800adbe:	e003      	b.n	800adc8 <prvInsertBlockIntoFreeList+0x90>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d002      	beq.n	800add6 <prvInsertBlockIntoFreeList+0x9e>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	bf00      	nop
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	200049c0 	.word	0x200049c0
 800ade8:	200049c8 	.word	0x200049c8

0800adec <__errno>:
 800adec:	4b01      	ldr	r3, [pc, #4]	; (800adf4 <__errno+0x8>)
 800adee:	6818      	ldr	r0, [r3, #0]
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20000040 	.word	0x20000040

0800adf8 <__libc_init_array>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	4e0d      	ldr	r6, [pc, #52]	; (800ae30 <__libc_init_array+0x38>)
 800adfc:	4c0d      	ldr	r4, [pc, #52]	; (800ae34 <__libc_init_array+0x3c>)
 800adfe:	1ba4      	subs	r4, r4, r6
 800ae00:	10a4      	asrs	r4, r4, #2
 800ae02:	2500      	movs	r5, #0
 800ae04:	42a5      	cmp	r5, r4
 800ae06:	d109      	bne.n	800ae1c <__libc_init_array+0x24>
 800ae08:	4e0b      	ldr	r6, [pc, #44]	; (800ae38 <__libc_init_array+0x40>)
 800ae0a:	4c0c      	ldr	r4, [pc, #48]	; (800ae3c <__libc_init_array+0x44>)
 800ae0c:	f000 fc64 	bl	800b6d8 <_init>
 800ae10:	1ba4      	subs	r4, r4, r6
 800ae12:	10a4      	asrs	r4, r4, #2
 800ae14:	2500      	movs	r5, #0
 800ae16:	42a5      	cmp	r5, r4
 800ae18:	d105      	bne.n	800ae26 <__libc_init_array+0x2e>
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae20:	4798      	blx	r3
 800ae22:	3501      	adds	r5, #1
 800ae24:	e7ee      	b.n	800ae04 <__libc_init_array+0xc>
 800ae26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae2a:	4798      	blx	r3
 800ae2c:	3501      	adds	r5, #1
 800ae2e:	e7f2      	b.n	800ae16 <__libc_init_array+0x1e>
 800ae30:	0800b9f4 	.word	0x0800b9f4
 800ae34:	0800b9f4 	.word	0x0800b9f4
 800ae38:	0800b9f4 	.word	0x0800b9f4
 800ae3c:	0800b9f8 	.word	0x0800b9f8

0800ae40 <malloc>:
 800ae40:	4b02      	ldr	r3, [pc, #8]	; (800ae4c <malloc+0xc>)
 800ae42:	4601      	mov	r1, r0
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	f000 b865 	b.w	800af14 <_malloc_r>
 800ae4a:	bf00      	nop
 800ae4c:	20000040 	.word	0x20000040

0800ae50 <memcpy>:
 800ae50:	b510      	push	{r4, lr}
 800ae52:	1e43      	subs	r3, r0, #1
 800ae54:	440a      	add	r2, r1
 800ae56:	4291      	cmp	r1, r2
 800ae58:	d100      	bne.n	800ae5c <memcpy+0xc>
 800ae5a:	bd10      	pop	{r4, pc}
 800ae5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae64:	e7f7      	b.n	800ae56 <memcpy+0x6>

0800ae66 <memset>:
 800ae66:	4402      	add	r2, r0
 800ae68:	4603      	mov	r3, r0
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d100      	bne.n	800ae70 <memset+0xa>
 800ae6e:	4770      	bx	lr
 800ae70:	f803 1b01 	strb.w	r1, [r3], #1
 800ae74:	e7f9      	b.n	800ae6a <memset+0x4>
	...

0800ae78 <_free_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	2900      	cmp	r1, #0
 800ae7e:	d045      	beq.n	800af0c <_free_r+0x94>
 800ae80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae84:	1f0c      	subs	r4, r1, #4
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bfb8      	it	lt
 800ae8a:	18e4      	addlt	r4, r4, r3
 800ae8c:	f000 f900 	bl	800b090 <__malloc_lock>
 800ae90:	4a1f      	ldr	r2, [pc, #124]	; (800af10 <_free_r+0x98>)
 800ae92:	6813      	ldr	r3, [r2, #0]
 800ae94:	4610      	mov	r0, r2
 800ae96:	b933      	cbnz	r3, 800aea6 <_free_r+0x2e>
 800ae98:	6063      	str	r3, [r4, #4]
 800ae9a:	6014      	str	r4, [r2, #0]
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aea2:	f000 b8f6 	b.w	800b092 <__malloc_unlock>
 800aea6:	42a3      	cmp	r3, r4
 800aea8:	d90c      	bls.n	800aec4 <_free_r+0x4c>
 800aeaa:	6821      	ldr	r1, [r4, #0]
 800aeac:	1862      	adds	r2, r4, r1
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	bf04      	itt	eq
 800aeb2:	681a      	ldreq	r2, [r3, #0]
 800aeb4:	685b      	ldreq	r3, [r3, #4]
 800aeb6:	6063      	str	r3, [r4, #4]
 800aeb8:	bf04      	itt	eq
 800aeba:	1852      	addeq	r2, r2, r1
 800aebc:	6022      	streq	r2, [r4, #0]
 800aebe:	6004      	str	r4, [r0, #0]
 800aec0:	e7ec      	b.n	800ae9c <_free_r+0x24>
 800aec2:	4613      	mov	r3, r2
 800aec4:	685a      	ldr	r2, [r3, #4]
 800aec6:	b10a      	cbz	r2, 800aecc <_free_r+0x54>
 800aec8:	42a2      	cmp	r2, r4
 800aeca:	d9fa      	bls.n	800aec2 <_free_r+0x4a>
 800aecc:	6819      	ldr	r1, [r3, #0]
 800aece:	1858      	adds	r0, r3, r1
 800aed0:	42a0      	cmp	r0, r4
 800aed2:	d10b      	bne.n	800aeec <_free_r+0x74>
 800aed4:	6820      	ldr	r0, [r4, #0]
 800aed6:	4401      	add	r1, r0
 800aed8:	1858      	adds	r0, r3, r1
 800aeda:	4282      	cmp	r2, r0
 800aedc:	6019      	str	r1, [r3, #0]
 800aede:	d1dd      	bne.n	800ae9c <_free_r+0x24>
 800aee0:	6810      	ldr	r0, [r2, #0]
 800aee2:	6852      	ldr	r2, [r2, #4]
 800aee4:	605a      	str	r2, [r3, #4]
 800aee6:	4401      	add	r1, r0
 800aee8:	6019      	str	r1, [r3, #0]
 800aeea:	e7d7      	b.n	800ae9c <_free_r+0x24>
 800aeec:	d902      	bls.n	800aef4 <_free_r+0x7c>
 800aeee:	230c      	movs	r3, #12
 800aef0:	602b      	str	r3, [r5, #0]
 800aef2:	e7d3      	b.n	800ae9c <_free_r+0x24>
 800aef4:	6820      	ldr	r0, [r4, #0]
 800aef6:	1821      	adds	r1, r4, r0
 800aef8:	428a      	cmp	r2, r1
 800aefa:	bf04      	itt	eq
 800aefc:	6811      	ldreq	r1, [r2, #0]
 800aefe:	6852      	ldreq	r2, [r2, #4]
 800af00:	6062      	str	r2, [r4, #4]
 800af02:	bf04      	itt	eq
 800af04:	1809      	addeq	r1, r1, r0
 800af06:	6021      	streq	r1, [r4, #0]
 800af08:	605c      	str	r4, [r3, #4]
 800af0a:	e7c7      	b.n	800ae9c <_free_r+0x24>
 800af0c:	bd38      	pop	{r3, r4, r5, pc}
 800af0e:	bf00      	nop
 800af10:	200049d8 	.word	0x200049d8

0800af14 <_malloc_r>:
 800af14:	b570      	push	{r4, r5, r6, lr}
 800af16:	1ccd      	adds	r5, r1, #3
 800af18:	f025 0503 	bic.w	r5, r5, #3
 800af1c:	3508      	adds	r5, #8
 800af1e:	2d0c      	cmp	r5, #12
 800af20:	bf38      	it	cc
 800af22:	250c      	movcc	r5, #12
 800af24:	2d00      	cmp	r5, #0
 800af26:	4606      	mov	r6, r0
 800af28:	db01      	blt.n	800af2e <_malloc_r+0x1a>
 800af2a:	42a9      	cmp	r1, r5
 800af2c:	d903      	bls.n	800af36 <_malloc_r+0x22>
 800af2e:	230c      	movs	r3, #12
 800af30:	6033      	str	r3, [r6, #0]
 800af32:	2000      	movs	r0, #0
 800af34:	bd70      	pop	{r4, r5, r6, pc}
 800af36:	f000 f8ab 	bl	800b090 <__malloc_lock>
 800af3a:	4a21      	ldr	r2, [pc, #132]	; (800afc0 <_malloc_r+0xac>)
 800af3c:	6814      	ldr	r4, [r2, #0]
 800af3e:	4621      	mov	r1, r4
 800af40:	b991      	cbnz	r1, 800af68 <_malloc_r+0x54>
 800af42:	4c20      	ldr	r4, [pc, #128]	; (800afc4 <_malloc_r+0xb0>)
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	b91b      	cbnz	r3, 800af50 <_malloc_r+0x3c>
 800af48:	4630      	mov	r0, r6
 800af4a:	f000 f83d 	bl	800afc8 <_sbrk_r>
 800af4e:	6020      	str	r0, [r4, #0]
 800af50:	4629      	mov	r1, r5
 800af52:	4630      	mov	r0, r6
 800af54:	f000 f838 	bl	800afc8 <_sbrk_r>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d124      	bne.n	800afa6 <_malloc_r+0x92>
 800af5c:	230c      	movs	r3, #12
 800af5e:	6033      	str	r3, [r6, #0]
 800af60:	4630      	mov	r0, r6
 800af62:	f000 f896 	bl	800b092 <__malloc_unlock>
 800af66:	e7e4      	b.n	800af32 <_malloc_r+0x1e>
 800af68:	680b      	ldr	r3, [r1, #0]
 800af6a:	1b5b      	subs	r3, r3, r5
 800af6c:	d418      	bmi.n	800afa0 <_malloc_r+0x8c>
 800af6e:	2b0b      	cmp	r3, #11
 800af70:	d90f      	bls.n	800af92 <_malloc_r+0x7e>
 800af72:	600b      	str	r3, [r1, #0]
 800af74:	50cd      	str	r5, [r1, r3]
 800af76:	18cc      	adds	r4, r1, r3
 800af78:	4630      	mov	r0, r6
 800af7a:	f000 f88a 	bl	800b092 <__malloc_unlock>
 800af7e:	f104 000b 	add.w	r0, r4, #11
 800af82:	1d23      	adds	r3, r4, #4
 800af84:	f020 0007 	bic.w	r0, r0, #7
 800af88:	1ac3      	subs	r3, r0, r3
 800af8a:	d0d3      	beq.n	800af34 <_malloc_r+0x20>
 800af8c:	425a      	negs	r2, r3
 800af8e:	50e2      	str	r2, [r4, r3]
 800af90:	e7d0      	b.n	800af34 <_malloc_r+0x20>
 800af92:	428c      	cmp	r4, r1
 800af94:	684b      	ldr	r3, [r1, #4]
 800af96:	bf16      	itet	ne
 800af98:	6063      	strne	r3, [r4, #4]
 800af9a:	6013      	streq	r3, [r2, #0]
 800af9c:	460c      	movne	r4, r1
 800af9e:	e7eb      	b.n	800af78 <_malloc_r+0x64>
 800afa0:	460c      	mov	r4, r1
 800afa2:	6849      	ldr	r1, [r1, #4]
 800afa4:	e7cc      	b.n	800af40 <_malloc_r+0x2c>
 800afa6:	1cc4      	adds	r4, r0, #3
 800afa8:	f024 0403 	bic.w	r4, r4, #3
 800afac:	42a0      	cmp	r0, r4
 800afae:	d005      	beq.n	800afbc <_malloc_r+0xa8>
 800afb0:	1a21      	subs	r1, r4, r0
 800afb2:	4630      	mov	r0, r6
 800afb4:	f000 f808 	bl	800afc8 <_sbrk_r>
 800afb8:	3001      	adds	r0, #1
 800afba:	d0cf      	beq.n	800af5c <_malloc_r+0x48>
 800afbc:	6025      	str	r5, [r4, #0]
 800afbe:	e7db      	b.n	800af78 <_malloc_r+0x64>
 800afc0:	200049d8 	.word	0x200049d8
 800afc4:	200049dc 	.word	0x200049dc

0800afc8 <_sbrk_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4c06      	ldr	r4, [pc, #24]	; (800afe4 <_sbrk_r+0x1c>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4605      	mov	r5, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	f7f8 f982 	bl	80032dc <_sbrk>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_sbrk_r+0x1a>
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_sbrk_r+0x1a>
 800afe0:	602b      	str	r3, [r5, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	20004cfc 	.word	0x20004cfc

0800afe8 <sniprintf>:
 800afe8:	b40c      	push	{r2, r3}
 800afea:	b530      	push	{r4, r5, lr}
 800afec:	4b17      	ldr	r3, [pc, #92]	; (800b04c <sniprintf+0x64>)
 800afee:	1e0c      	subs	r4, r1, #0
 800aff0:	b09d      	sub	sp, #116	; 0x74
 800aff2:	681d      	ldr	r5, [r3, #0]
 800aff4:	da08      	bge.n	800b008 <sniprintf+0x20>
 800aff6:	238b      	movs	r3, #139	; 0x8b
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800affe:	b01d      	add	sp, #116	; 0x74
 800b000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b004:	b002      	add	sp, #8
 800b006:	4770      	bx	lr
 800b008:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b00c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b010:	bf14      	ite	ne
 800b012:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b016:	4623      	moveq	r3, r4
 800b018:	9304      	str	r3, [sp, #16]
 800b01a:	9307      	str	r3, [sp, #28]
 800b01c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b020:	9002      	str	r0, [sp, #8]
 800b022:	9006      	str	r0, [sp, #24]
 800b024:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b02a:	ab21      	add	r3, sp, #132	; 0x84
 800b02c:	a902      	add	r1, sp, #8
 800b02e:	4628      	mov	r0, r5
 800b030:	9301      	str	r3, [sp, #4]
 800b032:	f000 f889 	bl	800b148 <_svfiprintf_r>
 800b036:	1c43      	adds	r3, r0, #1
 800b038:	bfbc      	itt	lt
 800b03a:	238b      	movlt	r3, #139	; 0x8b
 800b03c:	602b      	strlt	r3, [r5, #0]
 800b03e:	2c00      	cmp	r4, #0
 800b040:	d0dd      	beq.n	800affe <sniprintf+0x16>
 800b042:	9b02      	ldr	r3, [sp, #8]
 800b044:	2200      	movs	r2, #0
 800b046:	701a      	strb	r2, [r3, #0]
 800b048:	e7d9      	b.n	800affe <sniprintf+0x16>
 800b04a:	bf00      	nop
 800b04c:	20000040 	.word	0x20000040

0800b050 <siprintf>:
 800b050:	b40e      	push	{r1, r2, r3}
 800b052:	b500      	push	{lr}
 800b054:	b09c      	sub	sp, #112	; 0x70
 800b056:	ab1d      	add	r3, sp, #116	; 0x74
 800b058:	9002      	str	r0, [sp, #8]
 800b05a:	9006      	str	r0, [sp, #24]
 800b05c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b060:	4809      	ldr	r0, [pc, #36]	; (800b088 <siprintf+0x38>)
 800b062:	9107      	str	r1, [sp, #28]
 800b064:	9104      	str	r1, [sp, #16]
 800b066:	4909      	ldr	r1, [pc, #36]	; (800b08c <siprintf+0x3c>)
 800b068:	f853 2b04 	ldr.w	r2, [r3], #4
 800b06c:	9105      	str	r1, [sp, #20]
 800b06e:	6800      	ldr	r0, [r0, #0]
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	a902      	add	r1, sp, #8
 800b074:	f000 f868 	bl	800b148 <_svfiprintf_r>
 800b078:	9b02      	ldr	r3, [sp, #8]
 800b07a:	2200      	movs	r2, #0
 800b07c:	701a      	strb	r2, [r3, #0]
 800b07e:	b01c      	add	sp, #112	; 0x70
 800b080:	f85d eb04 	ldr.w	lr, [sp], #4
 800b084:	b003      	add	sp, #12
 800b086:	4770      	bx	lr
 800b088:	20000040 	.word	0x20000040
 800b08c:	ffff0208 	.word	0xffff0208

0800b090 <__malloc_lock>:
 800b090:	4770      	bx	lr

0800b092 <__malloc_unlock>:
 800b092:	4770      	bx	lr

0800b094 <__ssputs_r>:
 800b094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b098:	688e      	ldr	r6, [r1, #8]
 800b09a:	429e      	cmp	r6, r3
 800b09c:	4682      	mov	sl, r0
 800b09e:	460c      	mov	r4, r1
 800b0a0:	4690      	mov	r8, r2
 800b0a2:	4699      	mov	r9, r3
 800b0a4:	d837      	bhi.n	800b116 <__ssputs_r+0x82>
 800b0a6:	898a      	ldrh	r2, [r1, #12]
 800b0a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0ac:	d031      	beq.n	800b112 <__ssputs_r+0x7e>
 800b0ae:	6825      	ldr	r5, [r4, #0]
 800b0b0:	6909      	ldr	r1, [r1, #16]
 800b0b2:	1a6f      	subs	r7, r5, r1
 800b0b4:	6965      	ldr	r5, [r4, #20]
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0bc:	fb95 f5f3 	sdiv	r5, r5, r3
 800b0c0:	f109 0301 	add.w	r3, r9, #1
 800b0c4:	443b      	add	r3, r7
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	bf38      	it	cc
 800b0ca:	461d      	movcc	r5, r3
 800b0cc:	0553      	lsls	r3, r2, #21
 800b0ce:	d530      	bpl.n	800b132 <__ssputs_r+0x9e>
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	f7ff ff1f 	bl	800af14 <_malloc_r>
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	b950      	cbnz	r0, 800b0f0 <__ssputs_r+0x5c>
 800b0da:	230c      	movs	r3, #12
 800b0dc:	f8ca 3000 	str.w	r3, [sl]
 800b0e0:	89a3      	ldrh	r3, [r4, #12]
 800b0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0f0:	463a      	mov	r2, r7
 800b0f2:	6921      	ldr	r1, [r4, #16]
 800b0f4:	f7ff feac 	bl	800ae50 <memcpy>
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b102:	81a3      	strh	r3, [r4, #12]
 800b104:	6126      	str	r6, [r4, #16]
 800b106:	6165      	str	r5, [r4, #20]
 800b108:	443e      	add	r6, r7
 800b10a:	1bed      	subs	r5, r5, r7
 800b10c:	6026      	str	r6, [r4, #0]
 800b10e:	60a5      	str	r5, [r4, #8]
 800b110:	464e      	mov	r6, r9
 800b112:	454e      	cmp	r6, r9
 800b114:	d900      	bls.n	800b118 <__ssputs_r+0x84>
 800b116:	464e      	mov	r6, r9
 800b118:	4632      	mov	r2, r6
 800b11a:	4641      	mov	r1, r8
 800b11c:	6820      	ldr	r0, [r4, #0]
 800b11e:	f000 fa93 	bl	800b648 <memmove>
 800b122:	68a3      	ldr	r3, [r4, #8]
 800b124:	1b9b      	subs	r3, r3, r6
 800b126:	60a3      	str	r3, [r4, #8]
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	441e      	add	r6, r3
 800b12c:	6026      	str	r6, [r4, #0]
 800b12e:	2000      	movs	r0, #0
 800b130:	e7dc      	b.n	800b0ec <__ssputs_r+0x58>
 800b132:	462a      	mov	r2, r5
 800b134:	f000 faa1 	bl	800b67a <_realloc_r>
 800b138:	4606      	mov	r6, r0
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d1e2      	bne.n	800b104 <__ssputs_r+0x70>
 800b13e:	6921      	ldr	r1, [r4, #16]
 800b140:	4650      	mov	r0, sl
 800b142:	f7ff fe99 	bl	800ae78 <_free_r>
 800b146:	e7c8      	b.n	800b0da <__ssputs_r+0x46>

0800b148 <_svfiprintf_r>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	461d      	mov	r5, r3
 800b14e:	898b      	ldrh	r3, [r1, #12]
 800b150:	061f      	lsls	r7, r3, #24
 800b152:	b09d      	sub	sp, #116	; 0x74
 800b154:	4680      	mov	r8, r0
 800b156:	460c      	mov	r4, r1
 800b158:	4616      	mov	r6, r2
 800b15a:	d50f      	bpl.n	800b17c <_svfiprintf_r+0x34>
 800b15c:	690b      	ldr	r3, [r1, #16]
 800b15e:	b96b      	cbnz	r3, 800b17c <_svfiprintf_r+0x34>
 800b160:	2140      	movs	r1, #64	; 0x40
 800b162:	f7ff fed7 	bl	800af14 <_malloc_r>
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	6120      	str	r0, [r4, #16]
 800b16a:	b928      	cbnz	r0, 800b178 <_svfiprintf_r+0x30>
 800b16c:	230c      	movs	r3, #12
 800b16e:	f8c8 3000 	str.w	r3, [r8]
 800b172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b176:	e0c8      	b.n	800b30a <_svfiprintf_r+0x1c2>
 800b178:	2340      	movs	r3, #64	; 0x40
 800b17a:	6163      	str	r3, [r4, #20]
 800b17c:	2300      	movs	r3, #0
 800b17e:	9309      	str	r3, [sp, #36]	; 0x24
 800b180:	2320      	movs	r3, #32
 800b182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b186:	2330      	movs	r3, #48	; 0x30
 800b188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b18c:	9503      	str	r5, [sp, #12]
 800b18e:	f04f 0b01 	mov.w	fp, #1
 800b192:	4637      	mov	r7, r6
 800b194:	463d      	mov	r5, r7
 800b196:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b19a:	b10b      	cbz	r3, 800b1a0 <_svfiprintf_r+0x58>
 800b19c:	2b25      	cmp	r3, #37	; 0x25
 800b19e:	d13e      	bne.n	800b21e <_svfiprintf_r+0xd6>
 800b1a0:	ebb7 0a06 	subs.w	sl, r7, r6
 800b1a4:	d00b      	beq.n	800b1be <_svfiprintf_r+0x76>
 800b1a6:	4653      	mov	r3, sl
 800b1a8:	4632      	mov	r2, r6
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4640      	mov	r0, r8
 800b1ae:	f7ff ff71 	bl	800b094 <__ssputs_r>
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	f000 80a4 	beq.w	800b300 <_svfiprintf_r+0x1b8>
 800b1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ba:	4453      	add	r3, sl
 800b1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1be:	783b      	ldrb	r3, [r7, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 809d 	beq.w	800b300 <_svfiprintf_r+0x1b8>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	9307      	str	r3, [sp, #28]
 800b1d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1d8:	931a      	str	r3, [sp, #104]	; 0x68
 800b1da:	462f      	mov	r7, r5
 800b1dc:	2205      	movs	r2, #5
 800b1de:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b1e2:	4850      	ldr	r0, [pc, #320]	; (800b324 <_svfiprintf_r+0x1dc>)
 800b1e4:	f7f5 f834 	bl	8000250 <memchr>
 800b1e8:	9b04      	ldr	r3, [sp, #16]
 800b1ea:	b9d0      	cbnz	r0, 800b222 <_svfiprintf_r+0xda>
 800b1ec:	06d9      	lsls	r1, r3, #27
 800b1ee:	bf44      	itt	mi
 800b1f0:	2220      	movmi	r2, #32
 800b1f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b1f6:	071a      	lsls	r2, r3, #28
 800b1f8:	bf44      	itt	mi
 800b1fa:	222b      	movmi	r2, #43	; 0x2b
 800b1fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b200:	782a      	ldrb	r2, [r5, #0]
 800b202:	2a2a      	cmp	r2, #42	; 0x2a
 800b204:	d015      	beq.n	800b232 <_svfiprintf_r+0xea>
 800b206:	9a07      	ldr	r2, [sp, #28]
 800b208:	462f      	mov	r7, r5
 800b20a:	2000      	movs	r0, #0
 800b20c:	250a      	movs	r5, #10
 800b20e:	4639      	mov	r1, r7
 800b210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b214:	3b30      	subs	r3, #48	; 0x30
 800b216:	2b09      	cmp	r3, #9
 800b218:	d94d      	bls.n	800b2b6 <_svfiprintf_r+0x16e>
 800b21a:	b1b8      	cbz	r0, 800b24c <_svfiprintf_r+0x104>
 800b21c:	e00f      	b.n	800b23e <_svfiprintf_r+0xf6>
 800b21e:	462f      	mov	r7, r5
 800b220:	e7b8      	b.n	800b194 <_svfiprintf_r+0x4c>
 800b222:	4a40      	ldr	r2, [pc, #256]	; (800b324 <_svfiprintf_r+0x1dc>)
 800b224:	1a80      	subs	r0, r0, r2
 800b226:	fa0b f000 	lsl.w	r0, fp, r0
 800b22a:	4318      	orrs	r0, r3
 800b22c:	9004      	str	r0, [sp, #16]
 800b22e:	463d      	mov	r5, r7
 800b230:	e7d3      	b.n	800b1da <_svfiprintf_r+0x92>
 800b232:	9a03      	ldr	r2, [sp, #12]
 800b234:	1d11      	adds	r1, r2, #4
 800b236:	6812      	ldr	r2, [r2, #0]
 800b238:	9103      	str	r1, [sp, #12]
 800b23a:	2a00      	cmp	r2, #0
 800b23c:	db01      	blt.n	800b242 <_svfiprintf_r+0xfa>
 800b23e:	9207      	str	r2, [sp, #28]
 800b240:	e004      	b.n	800b24c <_svfiprintf_r+0x104>
 800b242:	4252      	negs	r2, r2
 800b244:	f043 0302 	orr.w	r3, r3, #2
 800b248:	9207      	str	r2, [sp, #28]
 800b24a:	9304      	str	r3, [sp, #16]
 800b24c:	783b      	ldrb	r3, [r7, #0]
 800b24e:	2b2e      	cmp	r3, #46	; 0x2e
 800b250:	d10c      	bne.n	800b26c <_svfiprintf_r+0x124>
 800b252:	787b      	ldrb	r3, [r7, #1]
 800b254:	2b2a      	cmp	r3, #42	; 0x2a
 800b256:	d133      	bne.n	800b2c0 <_svfiprintf_r+0x178>
 800b258:	9b03      	ldr	r3, [sp, #12]
 800b25a:	1d1a      	adds	r2, r3, #4
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	9203      	str	r2, [sp, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfb8      	it	lt
 800b264:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b268:	3702      	adds	r7, #2
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	4d2e      	ldr	r5, [pc, #184]	; (800b328 <_svfiprintf_r+0x1e0>)
 800b26e:	7839      	ldrb	r1, [r7, #0]
 800b270:	2203      	movs	r2, #3
 800b272:	4628      	mov	r0, r5
 800b274:	f7f4 ffec 	bl	8000250 <memchr>
 800b278:	b138      	cbz	r0, 800b28a <_svfiprintf_r+0x142>
 800b27a:	2340      	movs	r3, #64	; 0x40
 800b27c:	1b40      	subs	r0, r0, r5
 800b27e:	fa03 f000 	lsl.w	r0, r3, r0
 800b282:	9b04      	ldr	r3, [sp, #16]
 800b284:	4303      	orrs	r3, r0
 800b286:	3701      	adds	r7, #1
 800b288:	9304      	str	r3, [sp, #16]
 800b28a:	7839      	ldrb	r1, [r7, #0]
 800b28c:	4827      	ldr	r0, [pc, #156]	; (800b32c <_svfiprintf_r+0x1e4>)
 800b28e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b292:	2206      	movs	r2, #6
 800b294:	1c7e      	adds	r6, r7, #1
 800b296:	f7f4 ffdb 	bl	8000250 <memchr>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d038      	beq.n	800b310 <_svfiprintf_r+0x1c8>
 800b29e:	4b24      	ldr	r3, [pc, #144]	; (800b330 <_svfiprintf_r+0x1e8>)
 800b2a0:	bb13      	cbnz	r3, 800b2e8 <_svfiprintf_r+0x1a0>
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	3307      	adds	r3, #7
 800b2a6:	f023 0307 	bic.w	r3, r3, #7
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	9303      	str	r3, [sp, #12]
 800b2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b0:	444b      	add	r3, r9
 800b2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b4:	e76d      	b.n	800b192 <_svfiprintf_r+0x4a>
 800b2b6:	fb05 3202 	mla	r2, r5, r2, r3
 800b2ba:	2001      	movs	r0, #1
 800b2bc:	460f      	mov	r7, r1
 800b2be:	e7a6      	b.n	800b20e <_svfiprintf_r+0xc6>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	3701      	adds	r7, #1
 800b2c4:	9305      	str	r3, [sp, #20]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	250a      	movs	r5, #10
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d0:	3a30      	subs	r2, #48	; 0x30
 800b2d2:	2a09      	cmp	r2, #9
 800b2d4:	d903      	bls.n	800b2de <_svfiprintf_r+0x196>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0c8      	beq.n	800b26c <_svfiprintf_r+0x124>
 800b2da:	9105      	str	r1, [sp, #20]
 800b2dc:	e7c6      	b.n	800b26c <_svfiprintf_r+0x124>
 800b2de:	fb05 2101 	mla	r1, r5, r1, r2
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	e7f0      	b.n	800b2ca <_svfiprintf_r+0x182>
 800b2e8:	ab03      	add	r3, sp, #12
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	4622      	mov	r2, r4
 800b2ee:	4b11      	ldr	r3, [pc, #68]	; (800b334 <_svfiprintf_r+0x1ec>)
 800b2f0:	a904      	add	r1, sp, #16
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	f3af 8000 	nop.w
 800b2f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b2fc:	4681      	mov	r9, r0
 800b2fe:	d1d6      	bne.n	800b2ae <_svfiprintf_r+0x166>
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	065b      	lsls	r3, r3, #25
 800b304:	f53f af35 	bmi.w	800b172 <_svfiprintf_r+0x2a>
 800b308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b30a:	b01d      	add	sp, #116	; 0x74
 800b30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b310:	ab03      	add	r3, sp, #12
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	4622      	mov	r2, r4
 800b316:	4b07      	ldr	r3, [pc, #28]	; (800b334 <_svfiprintf_r+0x1ec>)
 800b318:	a904      	add	r1, sp, #16
 800b31a:	4640      	mov	r0, r8
 800b31c:	f000 f882 	bl	800b424 <_printf_i>
 800b320:	e7ea      	b.n	800b2f8 <_svfiprintf_r+0x1b0>
 800b322:	bf00      	nop
 800b324:	0800b9b8 	.word	0x0800b9b8
 800b328:	0800b9be 	.word	0x0800b9be
 800b32c:	0800b9c2 	.word	0x0800b9c2
 800b330:	00000000 	.word	0x00000000
 800b334:	0800b095 	.word	0x0800b095

0800b338 <_printf_common>:
 800b338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33c:	4691      	mov	r9, r2
 800b33e:	461f      	mov	r7, r3
 800b340:	688a      	ldr	r2, [r1, #8]
 800b342:	690b      	ldr	r3, [r1, #16]
 800b344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b348:	4293      	cmp	r3, r2
 800b34a:	bfb8      	it	lt
 800b34c:	4613      	movlt	r3, r2
 800b34e:	f8c9 3000 	str.w	r3, [r9]
 800b352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b356:	4606      	mov	r6, r0
 800b358:	460c      	mov	r4, r1
 800b35a:	b112      	cbz	r2, 800b362 <_printf_common+0x2a>
 800b35c:	3301      	adds	r3, #1
 800b35e:	f8c9 3000 	str.w	r3, [r9]
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	0699      	lsls	r1, r3, #26
 800b366:	bf42      	ittt	mi
 800b368:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b36c:	3302      	addmi	r3, #2
 800b36e:	f8c9 3000 	strmi.w	r3, [r9]
 800b372:	6825      	ldr	r5, [r4, #0]
 800b374:	f015 0506 	ands.w	r5, r5, #6
 800b378:	d107      	bne.n	800b38a <_printf_common+0x52>
 800b37a:	f104 0a19 	add.w	sl, r4, #25
 800b37e:	68e3      	ldr	r3, [r4, #12]
 800b380:	f8d9 2000 	ldr.w	r2, [r9]
 800b384:	1a9b      	subs	r3, r3, r2
 800b386:	42ab      	cmp	r3, r5
 800b388:	dc28      	bgt.n	800b3dc <_printf_common+0xa4>
 800b38a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b38e:	6822      	ldr	r2, [r4, #0]
 800b390:	3300      	adds	r3, #0
 800b392:	bf18      	it	ne
 800b394:	2301      	movne	r3, #1
 800b396:	0692      	lsls	r2, r2, #26
 800b398:	d42d      	bmi.n	800b3f6 <_printf_common+0xbe>
 800b39a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b39e:	4639      	mov	r1, r7
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	47c0      	blx	r8
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d020      	beq.n	800b3ea <_printf_common+0xb2>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	68e5      	ldr	r5, [r4, #12]
 800b3ac:	f8d9 2000 	ldr.w	r2, [r9]
 800b3b0:	f003 0306 	and.w	r3, r3, #6
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	bf08      	it	eq
 800b3b8:	1aad      	subeq	r5, r5, r2
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	6922      	ldr	r2, [r4, #16]
 800b3be:	bf0c      	ite	eq
 800b3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3c4:	2500      	movne	r5, #0
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	bfc4      	itt	gt
 800b3ca:	1a9b      	subgt	r3, r3, r2
 800b3cc:	18ed      	addgt	r5, r5, r3
 800b3ce:	f04f 0900 	mov.w	r9, #0
 800b3d2:	341a      	adds	r4, #26
 800b3d4:	454d      	cmp	r5, r9
 800b3d6:	d11a      	bne.n	800b40e <_printf_common+0xd6>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	e008      	b.n	800b3ee <_printf_common+0xb6>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	4652      	mov	r2, sl
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	47c0      	blx	r8
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	d103      	bne.n	800b3f2 <_printf_common+0xba>
 800b3ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f2:	3501      	adds	r5, #1
 800b3f4:	e7c3      	b.n	800b37e <_printf_common+0x46>
 800b3f6:	18e1      	adds	r1, r4, r3
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	2030      	movs	r0, #48	; 0x30
 800b3fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b400:	4422      	add	r2, r4
 800b402:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b406:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b40a:	3302      	adds	r3, #2
 800b40c:	e7c5      	b.n	800b39a <_printf_common+0x62>
 800b40e:	2301      	movs	r3, #1
 800b410:	4622      	mov	r2, r4
 800b412:	4639      	mov	r1, r7
 800b414:	4630      	mov	r0, r6
 800b416:	47c0      	blx	r8
 800b418:	3001      	adds	r0, #1
 800b41a:	d0e6      	beq.n	800b3ea <_printf_common+0xb2>
 800b41c:	f109 0901 	add.w	r9, r9, #1
 800b420:	e7d8      	b.n	800b3d4 <_printf_common+0x9c>
	...

0800b424 <_printf_i>:
 800b424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b428:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b42c:	460c      	mov	r4, r1
 800b42e:	7e09      	ldrb	r1, [r1, #24]
 800b430:	b085      	sub	sp, #20
 800b432:	296e      	cmp	r1, #110	; 0x6e
 800b434:	4617      	mov	r7, r2
 800b436:	4606      	mov	r6, r0
 800b438:	4698      	mov	r8, r3
 800b43a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b43c:	f000 80b3 	beq.w	800b5a6 <_printf_i+0x182>
 800b440:	d822      	bhi.n	800b488 <_printf_i+0x64>
 800b442:	2963      	cmp	r1, #99	; 0x63
 800b444:	d036      	beq.n	800b4b4 <_printf_i+0x90>
 800b446:	d80a      	bhi.n	800b45e <_printf_i+0x3a>
 800b448:	2900      	cmp	r1, #0
 800b44a:	f000 80b9 	beq.w	800b5c0 <_printf_i+0x19c>
 800b44e:	2958      	cmp	r1, #88	; 0x58
 800b450:	f000 8083 	beq.w	800b55a <_printf_i+0x136>
 800b454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b458:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b45c:	e032      	b.n	800b4c4 <_printf_i+0xa0>
 800b45e:	2964      	cmp	r1, #100	; 0x64
 800b460:	d001      	beq.n	800b466 <_printf_i+0x42>
 800b462:	2969      	cmp	r1, #105	; 0x69
 800b464:	d1f6      	bne.n	800b454 <_printf_i+0x30>
 800b466:	6820      	ldr	r0, [r4, #0]
 800b468:	6813      	ldr	r3, [r2, #0]
 800b46a:	0605      	lsls	r5, r0, #24
 800b46c:	f103 0104 	add.w	r1, r3, #4
 800b470:	d52a      	bpl.n	800b4c8 <_printf_i+0xa4>
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6011      	str	r1, [r2, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	da03      	bge.n	800b482 <_printf_i+0x5e>
 800b47a:	222d      	movs	r2, #45	; 0x2d
 800b47c:	425b      	negs	r3, r3
 800b47e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b482:	486f      	ldr	r0, [pc, #444]	; (800b640 <_printf_i+0x21c>)
 800b484:	220a      	movs	r2, #10
 800b486:	e039      	b.n	800b4fc <_printf_i+0xd8>
 800b488:	2973      	cmp	r1, #115	; 0x73
 800b48a:	f000 809d 	beq.w	800b5c8 <_printf_i+0x1a4>
 800b48e:	d808      	bhi.n	800b4a2 <_printf_i+0x7e>
 800b490:	296f      	cmp	r1, #111	; 0x6f
 800b492:	d020      	beq.n	800b4d6 <_printf_i+0xb2>
 800b494:	2970      	cmp	r1, #112	; 0x70
 800b496:	d1dd      	bne.n	800b454 <_printf_i+0x30>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	f043 0320 	orr.w	r3, r3, #32
 800b49e:	6023      	str	r3, [r4, #0]
 800b4a0:	e003      	b.n	800b4aa <_printf_i+0x86>
 800b4a2:	2975      	cmp	r1, #117	; 0x75
 800b4a4:	d017      	beq.n	800b4d6 <_printf_i+0xb2>
 800b4a6:	2978      	cmp	r1, #120	; 0x78
 800b4a8:	d1d4      	bne.n	800b454 <_printf_i+0x30>
 800b4aa:	2378      	movs	r3, #120	; 0x78
 800b4ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4b0:	4864      	ldr	r0, [pc, #400]	; (800b644 <_printf_i+0x220>)
 800b4b2:	e055      	b.n	800b560 <_printf_i+0x13c>
 800b4b4:	6813      	ldr	r3, [r2, #0]
 800b4b6:	1d19      	adds	r1, r3, #4
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	6011      	str	r1, [r2, #0]
 800b4bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e08c      	b.n	800b5e2 <_printf_i+0x1be>
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	6011      	str	r1, [r2, #0]
 800b4cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4d0:	bf18      	it	ne
 800b4d2:	b21b      	sxthne	r3, r3
 800b4d4:	e7cf      	b.n	800b476 <_printf_i+0x52>
 800b4d6:	6813      	ldr	r3, [r2, #0]
 800b4d8:	6825      	ldr	r5, [r4, #0]
 800b4da:	1d18      	adds	r0, r3, #4
 800b4dc:	6010      	str	r0, [r2, #0]
 800b4de:	0628      	lsls	r0, r5, #24
 800b4e0:	d501      	bpl.n	800b4e6 <_printf_i+0xc2>
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	e002      	b.n	800b4ec <_printf_i+0xc8>
 800b4e6:	0668      	lsls	r0, r5, #25
 800b4e8:	d5fb      	bpl.n	800b4e2 <_printf_i+0xbe>
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	4854      	ldr	r0, [pc, #336]	; (800b640 <_printf_i+0x21c>)
 800b4ee:	296f      	cmp	r1, #111	; 0x6f
 800b4f0:	bf14      	ite	ne
 800b4f2:	220a      	movne	r2, #10
 800b4f4:	2208      	moveq	r2, #8
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4fc:	6865      	ldr	r5, [r4, #4]
 800b4fe:	60a5      	str	r5, [r4, #8]
 800b500:	2d00      	cmp	r5, #0
 800b502:	f2c0 8095 	blt.w	800b630 <_printf_i+0x20c>
 800b506:	6821      	ldr	r1, [r4, #0]
 800b508:	f021 0104 	bic.w	r1, r1, #4
 800b50c:	6021      	str	r1, [r4, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d13d      	bne.n	800b58e <_printf_i+0x16a>
 800b512:	2d00      	cmp	r5, #0
 800b514:	f040 808e 	bne.w	800b634 <_printf_i+0x210>
 800b518:	4665      	mov	r5, ip
 800b51a:	2a08      	cmp	r2, #8
 800b51c:	d10b      	bne.n	800b536 <_printf_i+0x112>
 800b51e:	6823      	ldr	r3, [r4, #0]
 800b520:	07db      	lsls	r3, r3, #31
 800b522:	d508      	bpl.n	800b536 <_printf_i+0x112>
 800b524:	6923      	ldr	r3, [r4, #16]
 800b526:	6862      	ldr	r2, [r4, #4]
 800b528:	429a      	cmp	r2, r3
 800b52a:	bfde      	ittt	le
 800b52c:	2330      	movle	r3, #48	; 0x30
 800b52e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b532:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b536:	ebac 0305 	sub.w	r3, ip, r5
 800b53a:	6123      	str	r3, [r4, #16]
 800b53c:	f8cd 8000 	str.w	r8, [sp]
 800b540:	463b      	mov	r3, r7
 800b542:	aa03      	add	r2, sp, #12
 800b544:	4621      	mov	r1, r4
 800b546:	4630      	mov	r0, r6
 800b548:	f7ff fef6 	bl	800b338 <_printf_common>
 800b54c:	3001      	adds	r0, #1
 800b54e:	d14d      	bne.n	800b5ec <_printf_i+0x1c8>
 800b550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b554:	b005      	add	sp, #20
 800b556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b55a:	4839      	ldr	r0, [pc, #228]	; (800b640 <_printf_i+0x21c>)
 800b55c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b560:	6813      	ldr	r3, [r2, #0]
 800b562:	6821      	ldr	r1, [r4, #0]
 800b564:	1d1d      	adds	r5, r3, #4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6015      	str	r5, [r2, #0]
 800b56a:	060a      	lsls	r2, r1, #24
 800b56c:	d50b      	bpl.n	800b586 <_printf_i+0x162>
 800b56e:	07ca      	lsls	r2, r1, #31
 800b570:	bf44      	itt	mi
 800b572:	f041 0120 	orrmi.w	r1, r1, #32
 800b576:	6021      	strmi	r1, [r4, #0]
 800b578:	b91b      	cbnz	r3, 800b582 <_printf_i+0x15e>
 800b57a:	6822      	ldr	r2, [r4, #0]
 800b57c:	f022 0220 	bic.w	r2, r2, #32
 800b580:	6022      	str	r2, [r4, #0]
 800b582:	2210      	movs	r2, #16
 800b584:	e7b7      	b.n	800b4f6 <_printf_i+0xd2>
 800b586:	064d      	lsls	r5, r1, #25
 800b588:	bf48      	it	mi
 800b58a:	b29b      	uxthmi	r3, r3
 800b58c:	e7ef      	b.n	800b56e <_printf_i+0x14a>
 800b58e:	4665      	mov	r5, ip
 800b590:	fbb3 f1f2 	udiv	r1, r3, r2
 800b594:	fb02 3311 	mls	r3, r2, r1, r3
 800b598:	5cc3      	ldrb	r3, [r0, r3]
 800b59a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b59e:	460b      	mov	r3, r1
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	d1f5      	bne.n	800b590 <_printf_i+0x16c>
 800b5a4:	e7b9      	b.n	800b51a <_printf_i+0xf6>
 800b5a6:	6813      	ldr	r3, [r2, #0]
 800b5a8:	6825      	ldr	r5, [r4, #0]
 800b5aa:	6961      	ldr	r1, [r4, #20]
 800b5ac:	1d18      	adds	r0, r3, #4
 800b5ae:	6010      	str	r0, [r2, #0]
 800b5b0:	0628      	lsls	r0, r5, #24
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	d501      	bpl.n	800b5ba <_printf_i+0x196>
 800b5b6:	6019      	str	r1, [r3, #0]
 800b5b8:	e002      	b.n	800b5c0 <_printf_i+0x19c>
 800b5ba:	066a      	lsls	r2, r5, #25
 800b5bc:	d5fb      	bpl.n	800b5b6 <_printf_i+0x192>
 800b5be:	8019      	strh	r1, [r3, #0]
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	4665      	mov	r5, ip
 800b5c6:	e7b9      	b.n	800b53c <_printf_i+0x118>
 800b5c8:	6813      	ldr	r3, [r2, #0]
 800b5ca:	1d19      	adds	r1, r3, #4
 800b5cc:	6011      	str	r1, [r2, #0]
 800b5ce:	681d      	ldr	r5, [r3, #0]
 800b5d0:	6862      	ldr	r2, [r4, #4]
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7f4 fe3b 	bl	8000250 <memchr>
 800b5da:	b108      	cbz	r0, 800b5e0 <_printf_i+0x1bc>
 800b5dc:	1b40      	subs	r0, r0, r5
 800b5de:	6060      	str	r0, [r4, #4]
 800b5e0:	6863      	ldr	r3, [r4, #4]
 800b5e2:	6123      	str	r3, [r4, #16]
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ea:	e7a7      	b.n	800b53c <_printf_i+0x118>
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	47c0      	blx	r8
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	d0aa      	beq.n	800b550 <_printf_i+0x12c>
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	079b      	lsls	r3, r3, #30
 800b5fe:	d413      	bmi.n	800b628 <_printf_i+0x204>
 800b600:	68e0      	ldr	r0, [r4, #12]
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	4298      	cmp	r0, r3
 800b606:	bfb8      	it	lt
 800b608:	4618      	movlt	r0, r3
 800b60a:	e7a3      	b.n	800b554 <_printf_i+0x130>
 800b60c:	2301      	movs	r3, #1
 800b60e:	464a      	mov	r2, r9
 800b610:	4639      	mov	r1, r7
 800b612:	4630      	mov	r0, r6
 800b614:	47c0      	blx	r8
 800b616:	3001      	adds	r0, #1
 800b618:	d09a      	beq.n	800b550 <_printf_i+0x12c>
 800b61a:	3501      	adds	r5, #1
 800b61c:	68e3      	ldr	r3, [r4, #12]
 800b61e:	9a03      	ldr	r2, [sp, #12]
 800b620:	1a9b      	subs	r3, r3, r2
 800b622:	42ab      	cmp	r3, r5
 800b624:	dcf2      	bgt.n	800b60c <_printf_i+0x1e8>
 800b626:	e7eb      	b.n	800b600 <_printf_i+0x1dc>
 800b628:	2500      	movs	r5, #0
 800b62a:	f104 0919 	add.w	r9, r4, #25
 800b62e:	e7f5      	b.n	800b61c <_printf_i+0x1f8>
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1ac      	bne.n	800b58e <_printf_i+0x16a>
 800b634:	7803      	ldrb	r3, [r0, #0]
 800b636:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b63a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b63e:	e76c      	b.n	800b51a <_printf_i+0xf6>
 800b640:	0800b9c9 	.word	0x0800b9c9
 800b644:	0800b9da 	.word	0x0800b9da

0800b648 <memmove>:
 800b648:	4288      	cmp	r0, r1
 800b64a:	b510      	push	{r4, lr}
 800b64c:	eb01 0302 	add.w	r3, r1, r2
 800b650:	d807      	bhi.n	800b662 <memmove+0x1a>
 800b652:	1e42      	subs	r2, r0, #1
 800b654:	4299      	cmp	r1, r3
 800b656:	d00a      	beq.n	800b66e <memmove+0x26>
 800b658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b65c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b660:	e7f8      	b.n	800b654 <memmove+0xc>
 800b662:	4283      	cmp	r3, r0
 800b664:	d9f5      	bls.n	800b652 <memmove+0xa>
 800b666:	1881      	adds	r1, r0, r2
 800b668:	1ad2      	subs	r2, r2, r3
 800b66a:	42d3      	cmn	r3, r2
 800b66c:	d100      	bne.n	800b670 <memmove+0x28>
 800b66e:	bd10      	pop	{r4, pc}
 800b670:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b674:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b678:	e7f7      	b.n	800b66a <memmove+0x22>

0800b67a <_realloc_r>:
 800b67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67c:	4607      	mov	r7, r0
 800b67e:	4614      	mov	r4, r2
 800b680:	460e      	mov	r6, r1
 800b682:	b921      	cbnz	r1, 800b68e <_realloc_r+0x14>
 800b684:	4611      	mov	r1, r2
 800b686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b68a:	f7ff bc43 	b.w	800af14 <_malloc_r>
 800b68e:	b922      	cbnz	r2, 800b69a <_realloc_r+0x20>
 800b690:	f7ff fbf2 	bl	800ae78 <_free_r>
 800b694:	4625      	mov	r5, r4
 800b696:	4628      	mov	r0, r5
 800b698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b69a:	f000 f814 	bl	800b6c6 <_malloc_usable_size_r>
 800b69e:	42a0      	cmp	r0, r4
 800b6a0:	d20f      	bcs.n	800b6c2 <_realloc_r+0x48>
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f7ff fc35 	bl	800af14 <_malloc_r>
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d0f2      	beq.n	800b696 <_realloc_r+0x1c>
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4622      	mov	r2, r4
 800b6b4:	f7ff fbcc 	bl	800ae50 <memcpy>
 800b6b8:	4631      	mov	r1, r6
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	f7ff fbdc 	bl	800ae78 <_free_r>
 800b6c0:	e7e9      	b.n	800b696 <_realloc_r+0x1c>
 800b6c2:	4635      	mov	r5, r6
 800b6c4:	e7e7      	b.n	800b696 <_realloc_r+0x1c>

0800b6c6 <_malloc_usable_size_r>:
 800b6c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ca:	1f18      	subs	r0, r3, #4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	bfbc      	itt	lt
 800b6d0:	580b      	ldrlt	r3, [r1, r0]
 800b6d2:	18c0      	addlt	r0, r0, r3
 800b6d4:	4770      	bx	lr
	...

0800b6d8 <_init>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	bf00      	nop
 800b6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6de:	bc08      	pop	{r3}
 800b6e0:	469e      	mov	lr, r3
 800b6e2:	4770      	bx	lr

0800b6e4 <_fini>:
 800b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e6:	bf00      	nop
 800b6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ea:	bc08      	pop	{r3}
 800b6ec:	469e      	mov	lr, r3
 800b6ee:	4770      	bx	lr
