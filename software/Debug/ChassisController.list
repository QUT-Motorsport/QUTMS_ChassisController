
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800b7f8  0800b7f8  0001b7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb10  0800bb10  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb10  0800bb10  0001bb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb18  0800bb18  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb18  0800bb18  0001bb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb1c  0800bb1c  0001bb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800bb20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  200000a4  0800bbc4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  0800bbc4  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa61  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053f6  00000000  00000000  0004ab33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a40  00000000  00000000  0004ff30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  00051970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d604  00000000  00000000  00053128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b19c  00000000  00000000  0008072c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001085b1  00000000  00000000  0009b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a3e79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de8  00000000  00000000  001a3ef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b7e0 	.word	0x0800b7e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800b7e0 	.word	0x0800b7e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <Parse_AMS_HeartbeatResponse>:
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf14      	ite	ne
 8000636:	2301      	movne	r3, #1
 8000638:	2300      	moveq	r3, #0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2da      	uxtb	r2, r3
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2da      	uxtb	r2, r3
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	09db      	lsrs	r3, r3, #7
 8000676:	b2da      	uxtb	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b21b      	sxth	r3, r3
 8000686:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800068a:	b21a      	sxth	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29a      	uxth	r2, r3
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	801a      	strh	r2, [r3, #0]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3303      	adds	r3, #3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3302      	adds	r3, #2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b6:	801a      	strh	r2, [r3, #0]
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2200      	movs	r2, #0
 80006d6:	2116      	movs	r1, #22
 80006d8:	2002      	movs	r0, #2
 80006da:	f000 fa47 	bl	8000b6c <Compose_CANId>
 80006de:	4603      	mov	r3, r0
 80006e0:	607b      	str	r3, [r7, #4]
	return p;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x1, 0x0, 0x0);
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2300      	movs	r3, #0
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	2200      	movs	r2, #0
 80006fe:	2116      	movs	r1, #22
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fa33 	bl	8000b6c <Compose_CANId>
 8000706:	4603      	mov	r3, r0
 8000708:	607b      	str	r3, [r7, #4]
	return p;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Compose_CC_SoftShutdown>:

CC_SoftShutdown_t Compose_CC_SoftShutdown(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af02      	add	r7, sp, #8
	CC_SoftShutdown_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x1, 0x1, 0x0);
 800071a:	2300      	movs	r3, #0
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	2200      	movs	r2, #0
 8000726:	2116      	movs	r1, #22
 8000728:	2002      	movs	r0, #2
 800072a:	f000 fa1f 	bl	8000b6c <Compose_CANId>
 800072e:	4603      	mov	r3, r0
 8000730:	607b      	str	r3, [r7, #4]
	return p;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <Compose_CC_RequestRPM>:

CC_RequestRPM_t Compose_CC_RequestRPM(uint16_t nodeId)
{
 800073c:	b490      	push	{r4, r7}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
	CC_RequestRPM_t p;
	uint16_t index = 0x210A;
 8000748:	f242 130a 	movw	r3, #8458	; 0x210a
 800074c:	82fb      	strh	r3, [r7, #22]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 800074e:	887b      	ldrh	r3, [r7, #2]
 8000750:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000754:	60bb      	str	r3, [r7, #8]
	p.data[0] = 0b01001100; // Client Command Specifier + Number of Bytes + xx
 8000756:	234c      	movs	r3, #76	; 0x4c
 8000758:	733b      	strb	r3, [r7, #12]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 800075a:	8afb      	ldrh	r3, [r7, #22]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	737b      	strb	r3, [r7, #13]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 8000760:	8afb      	ldrh	r3, [r7, #22]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	73bb      	strb	r3, [r7, #14]
	p.data[3] = 0x01; // Subindex
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
	p.data[4] = 0x00; // Data
 800076e:	2300      	movs	r3, #0
 8000770:	743b      	strb	r3, [r7, #16]
	p.data[5] = 0x00; // Data
 8000772:	2300      	movs	r3, #0
 8000774:	747b      	strb	r3, [r7, #17]
	p.data[6] = 0x00; // Data
 8000776:	2300      	movs	r3, #0
 8000778:	74bb      	strb	r3, [r7, #18]
	p.data[7] = 0x00; // Data
 800077a:	2300      	movs	r3, #0
 800077c:	74fb      	strb	r3, [r7, #19]
	return p;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	461c      	mov	r4, r3
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800078a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bc90      	pop	{r4, r7}
 8000796:	4770      	bx	lr

08000798 <Parse_CC_RequestRPM>:

void Parse_CC_RequestRPM(uint8_t* data, int16_t* motorRPM)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	*motorRPM = data[5] << 8 | data[4];
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3305      	adds	r3, #5
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3304      	adds	r3, #4
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	801a      	strh	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <Send_CC_FatalShutdown>:

bool Send_CC_FatalShutdown(char* errorCause, bool echo,
		uint32_t* CAN1_Mailbox, uint32_t* CAN2_Mailbox, uint32_t* CAN3_Mailbox,
		CAN_HandleTypeDef* CanHandle, CAN_HandleTypeDef* CanHandle2, CAN_HandleTypeDef* CanHandle3,
		UART_HandleTypeDef* huartHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	460b      	mov	r3, r1
 80007d6:	72fb      	strb	r3, [r7, #11]
	if(echo)
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00a      	beq.n	80007f4 <Send_CC_FatalShutdown+0x2c>
	{
		HAL_UART_Transmit(huartHandle, (uint8_t *)errorCause, (size_t)strlen(errorCause), HAL_MAX_DELAY);
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f7ff fd2e 	bl	8000240 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ec:	68f9      	ldr	r1, [r7, #12]
 80007ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007f0:	f006 fa16 	bl	8006c20 <HAL_UART_Transmit>
	}
	CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 80007f4:	f7ff ff7a 	bl	80006ec <Compose_CC_FatalShutdown>
 80007f8:	4603      	mov	r3, r0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
 800080c:	615a      	str	r2, [r3, #20]
	{
			.ExtId = fatalShutdown.id,
 800080e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	2304      	movs	r3, #4
 8000814:	61fb      	str	r3, [r7, #28]
 8000816:	2301      	movs	r3, #1
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 800081a:	230f      	movs	r3, #15
 800081c:	743b      	strb	r3, [r7, #16]
	HAL_CAN_AddTxMessage(CanHandle, &header, data, CAN1_Mailbox);
 800081e:	f107 0210 	add.w	r2, r7, #16
 8000822:	f107 0114 	add.w	r1, r7, #20
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800082a:	f003 fe37 	bl	800449c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle2, &header, data, CAN2_Mailbox);
 800082e:	f107 0210 	add.w	r2, r7, #16
 8000832:	f107 0114 	add.w	r1, r7, #20
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800083a:	f003 fe2f 	bl	800449c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle3, &header, data, CAN3_Mailbox);
 800083e:	f107 0210 	add.w	r2, r7, #16
 8000842:	f107 0114 	add.w	r1, r7, #20
 8000846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000848:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800084a:	f003 fe27 	bl	800449c <HAL_CAN_AddTxMessage>
	return true;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3730      	adds	r7, #48	; 0x30
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <fsm_new>:
#ifdef QUTMS_FSM

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 8000860:	2010      	movs	r0, #16
 8000862:	f00a fba5 	bl	800afb0 <malloc>
 8000866:	4603      	mov	r3, r0
 8000868:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 800086a:	2210      	movs	r2, #16
 800086c:	2100      	movs	r1, #0
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f00a fbb1 	bl	800afd6 <memset>
	fsm->currentState = beginState;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 800087a:	2200      	movs	r2, #0
 800087c:	2103      	movs	r1, #3
 800087e:	2003      	movs	r0, #3
 8000880:	f006 ffb2 	bl	80077e8 <osSemaphoreNew>
 8000884:	4602      	mov	r2, r0
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 800088a:	2200      	movs	r2, #0
 800088c:	2103      	movs	r1, #3
 800088e:	2003      	movs	r0, #3
 8000890:	f006 ffaa 	bl	80077e8 <osSemaphoreNew>
 8000894:	4602      	mov	r2, r0
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	2120      	movs	r1, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f007 f83f 	bl	8007924 <osSemaphoreAcquire>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d109      	bne.n	80008c0 <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f007 f898 	bl	80079f0 <osSemaphoreRelease>
	}

	return fsm;
 80008c0:	68fb      	ldr	r3, [r7, #12]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	2120      	movs	r1, #32
 80008da:	4618      	mov	r0, r3
 80008dc:	f007 f822 	bl	8007924 <osSemaphoreAcquire>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10a      	bne.n	80008fc <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f007 f87b 	bl	80079f0 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 80008fa:	e004      	b.n	8000906 <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 80008fc:	2225      	movs	r2, #37	; 0x25
 80008fe:	4904      	ldr	r1, [pc, #16]	; (8000910 <fsm_iterate+0x44>)
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f000 f8ab 	bl	8000a5c <fsm_log>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	0800b7f8 	.word	0x0800b7f8

08000914 <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	; 0x70
 8000918:	af02      	add	r7, sp, #8
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	429a      	cmp	r2, r3
 8000928:	d036      	beq.n	8000998 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2120      	movs	r1, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f006 fff7 	bl	8007924 <osSemaphoreAcquire>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d127      	bne.n	800098c <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68da      	ldr	r2, [r3, #12]
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	68d9      	ldr	r1, [r3, #12]
 8000946:	f107 0014 	add.w	r0, r7, #20
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	460b      	mov	r3, r1
 8000950:	4913      	ldr	r1, [pc, #76]	; (80009a0 <fsm_changeState+0x8c>)
 8000952:	f00a fc01 	bl	800b158 <siprintf>
 8000956:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 8000958:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f000 f87b 	bl	8000a5c <fsm_log>
		fsm->currentState->exit(fsm);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	68f8      	ldr	r0, [r7, #12]
 800096e:	4798      	blx	r3

		fsm->currentState = newState;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	4618      	mov	r0, r3
 8000986:	f007 f833 	bl	80079f0 <osSemaphoreRelease>
 800098a:	e006      	b.n	800099a <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 800098c:	2220      	movs	r2, #32
 800098e:	4905      	ldr	r1, [pc, #20]	; (80009a4 <fsm_changeState+0x90>)
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f000 f863 	bl	8000a5c <fsm_log>
 8000996:	e000      	b.n	800099a <fsm_changeState+0x86>
		return;
 8000998:	bf00      	nop
	}
}
 800099a:	3768      	adds	r7, #104	; 0x68
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800b820 	.word	0x0800b820
 80009a4:	0800b844 	.word	0x0800b844

080009a8 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b098      	sub	sp, #96	; 0x60
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	68da      	ldr	r2, [r3, #12]
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4920      	ldr	r1, [pc, #128]	; (8000a3c <fsm_reset+0x94>)
 80009bc:	4618      	mov	r0, r3
 80009be:	f00a fbcb 	bl	800b158 <siprintf>
 80009c2:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 80009c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4619      	mov	r1, r3
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f845 	bl	8000a5c <fsm_log>
	fsm_log_function f = fsm->log;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 80009d8:	2210      	movs	r2, #16
 80009da:	2100      	movs	r1, #0
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f00a fafa 	bl	800afd6 <memset>
	fsm->log = f;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009e6:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2103      	movs	r1, #3
 80009f2:	2003      	movs	r0, #3
 80009f4:	f006 fef8 	bl	80077e8 <osSemaphoreNew>
 80009f8:	4602      	mov	r2, r0
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2103      	movs	r1, #3
 8000a02:	2003      	movs	r0, #3
 8000a04:	f006 fef0 	bl	80077e8 <osSemaphoreNew>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2120      	movs	r1, #32
 8000a14:	4618      	mov	r0, r3
 8000a16:	f006 ff85 	bl	8007924 <osSemaphoreAcquire>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d109      	bne.n	8000a34 <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f006 ffde 	bl	80079f0 <osSemaphoreRelease>
	}
}
 8000a34:	bf00      	nop
 8000a36:	3760      	adds	r7, #96	; 0x60
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	0800b868 	.word	0x0800b868

08000a40 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	68b8      	ldr	r0, [r7, #8]
 8000a70:	4798      	blx	r3
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <Compose_PDM_InitiateStartup>:
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af02      	add	r7, sp, #8
 8000a80:	2300      	movs	r3, #0
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	2300      	movs	r3, #0
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2302      	movs	r3, #2
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2114      	movs	r1, #20
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f000 f86c 	bl	8000b6c <Compose_CANId>
 8000a94:	4603      	mov	r3, r0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <Parse_PDM_StartupOk>:
 8000aa2:	b480      	push	{r7}
 8000aa4:	b085      	sub	sp, #20
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	7b3b      	ldrb	r3, [r7, #12]
 8000ab4:	061a      	lsls	r2, r3, #24
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
 8000ab8:	041b      	lsls	r3, r3, #16
 8000aba:	441a      	add	r2, r3
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	4413      	add	r3, r2
 8000ac2:	7bfa      	ldrb	r2, [r7, #15]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <Compose_PDM_SelectStartup>:
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2302      	movs	r3, #2
 8000aec:	2200      	movs	r2, #0
 8000aee:	2114      	movs	r1, #20
 8000af0:	2002      	movs	r0, #2
 8000af2:	f000 f83b 	bl	8000b6c <Compose_CANId>
 8000af6:	4603      	mov	r3, r0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
 8000b02:	e00f      	b.n	8000b24 <Compose_PDM_SelectStartup+0x4c>
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0303 	rsb	r3, r3, #3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4413      	add	r3, r2
 8000b10:	7819      	ldrb	r1, [r3, #0]
 8000b12:	f107 020c 	add.w	r2, r7, #12
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	4413      	add	r3, r2
 8000b1a:	460a      	mov	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	ddec      	ble.n	8000b04 <Compose_PDM_SelectStartup+0x2c>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	e00d      	b.n	8000b4c <Compose_PDM_SelectStartup+0x74>
 8000b30:	f107 020c 	add.w	r2, r7, #12
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	4413      	add	r3, r2
 8000b38:	7819      	ldrb	r1, [r3, #0]
 8000b3a:	f107 0214 	add.w	r2, r7, #20
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	460a      	mov	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	ddee      	ble.n	8000b30 <Compose_PDM_SelectStartup+0x58>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	461a      	mov	r2, r3
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b5e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <Compose_CANId>:
 8000b6c:	b490      	push	{r4, r7}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4604      	mov	r4, r0
 8000b74:	4608      	mov	r0, r1
 8000b76:	4611      	mov	r1, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	71bb      	strb	r3, [r7, #6]
 8000b86:	4613      	mov	r3, r2
 8000b88:	70fb      	strb	r3, [r7, #3]
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	06db      	lsls	r3, r3, #27
 8000b8e:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	0499      	lsls	r1, r3, #18
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <Compose_CANId+0x68>)
 8000b98:	400b      	ands	r3, r1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	045b      	lsls	r3, r3, #17
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	039b      	lsls	r3, r3, #14
 8000baa:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	8b3b      	ldrh	r3, [r7, #24]
 8000bb2:	0119      	lsls	r1, r3, #4
 8000bb4:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000bb8:	400b      	ands	r3, r1
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	7f3b      	ldrb	r3, [r7, #28]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc90      	pop	{r4, r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	07fc0000 	.word	0x07fc0000

08000bd8 <Parse_SHDN_HeartbeatResponse>:
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	7b3a      	ldrb	r2, [r7, #12]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <Parse_SHDN_IMD_HeartbeatResponse>:
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	7b3a      	ldrb	r2, [r7, #12]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <map>:
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	69b9      	ldr	r1, [r7, #24]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	1a8a      	subs	r2, r1, r2
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	ee07 3a90 	vmov	s15, r3
 8000c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	ee07 3a90 	vmov	s15, r3
 8000c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c66:	ee17 3a90 	vmov	r3, s15
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b08b      	sub	sp, #44	; 0x2c
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000c80:	4b55      	ldr	r3, [pc, #340]	; (8000dd8 <state_start_enter+0x160>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d17e      	bne.n	8000d86 <state_start_enter+0x10e>
	{
		/* Assign memory and nullify Global State */
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000c88:	f240 500c 	movw	r0, #1292	; 0x50c
 8000c8c:	f00a f990 	bl	800afb0 <malloc>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <state_start_enter+0x160>)
 8000c96:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000c98:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <state_start_enter+0x160>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f240 520c 	movw	r2, #1292	; 0x50c
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00a f997 	bl	800afd6 <memset>

		/* As CC_GlobalState is accessible across threads
		 * we need to use a semaphore to access and lock it
		 */
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000ca8:	4b4b      	ldr	r3, [pc, #300]	; (8000dd8 <state_start_enter+0x160>)
 8000caa:	681c      	ldr	r4, [r3, #0]
 8000cac:	2200      	movs	r2, #0
 8000cae:	2103      	movs	r1, #3
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f006 fd99 	bl	80077e8 <osSemaphoreNew>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc

		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000cbc:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <state_start_enter+0x160>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f006 fe2c 	bl	8007924 <osSemaphoreAcquire>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d145      	bne.n	8000d5e <state_start_enter+0xe6>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000cd2:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <state_start_enter+0x160>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->AMS_Debug = true;
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <state_start_enter+0x160>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->ADC_Debug = true;
 8000ce2:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <state_start_enter+0x160>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->SHDN_Debug = true;
 8000cea:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <state_start_enter+0x160>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	779a      	strb	r2, [r3, #30]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <state_start_enter+0x160>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	775a      	strb	r2, [r3, #29]
			CC_GlobalState->RTD_Debug = true;
 8000cfa:	4b37      	ldr	r3, [pc, #220]	; (8000dd8 <state_start_enter+0x160>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	761a      	strb	r2, [r3, #24]
			CC_GlobalState->Inverter_Debug = true;
 8000d02:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <state_start_enter+0x160>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2201      	movs	r2, #1
 8000d08:	771a      	strb	r2, [r3, #28]
			CC_GlobalState->tractiveActive = false;
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <state_start_enter+0x160>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
			CC_GlobalState->CAN1Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <state_start_enter+0x160>)
 8000d16:	681c      	ldr	r4, [r3, #0]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2128      	movs	r1, #40	; 0x28
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f006 febf 	bl	8007aa0 <osMessageQueueNew>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
			CC_GlobalState->CAN2Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <state_start_enter+0x160>)
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2128      	movs	r1, #40	; 0x28
 8000d30:	200a      	movs	r0, #10
 8000d32:	f006 feb5 	bl	8007aa0 <osMessageQueueNew>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
			CC_GlobalState->CAN3Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <state_start_enter+0x160>)
 8000d3e:	681c      	ldr	r4, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	2128      	movs	r1, #40	; 0x28
 8000d44:	200a      	movs	r0, #10
 8000d46:	f006 feab 	bl	8007aa0 <osMessageQueueNew>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
			osSemaphoreRelease(CC_GlobalState->sem);
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <state_start_enter+0x160>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f006 fe49 	bl	80079f0 <osSemaphoreRelease>
		}

		/* Ensure CANQueue exists */
		if(CC_GlobalState->CAN1Queue == NULL || CC_GlobalState->CAN2Queue == NULL || CC_GlobalState->CAN3Queue == NULL)
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <state_start_enter+0x160>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00b      	beq.n	8000d82 <state_start_enter+0x10a>
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <state_start_enter+0x160>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <state_start_enter+0x10a>
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <state_start_enter+0x160>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <state_start_enter+0x10e>
		{
			Error_Handler();
 8000d82:	f002 fa81 	bl	8003288 <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <state_start_enter+0x164>)
 8000d8e:	f004 fbb5 	bl	80054fc <HAL_GPIO_WritePin>

	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t pdmStartup = Compose_PDM_InitiateStartup();
 8000d92:	f7ff fe72 	bl	8000a7a <Compose_PDM_InitiateStartup>
 8000d96:	4603      	mov	r3, r0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	615a      	str	r2, [r3, #20]
	{
			.ExtId = pdmStartup.id,
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	2304      	movs	r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	2301      	movs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000db8:	230f      	movs	r3, #15
 8000dba:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <state_start_enter+0x160>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3308      	adds	r3, #8
 8000dc2:	f107 0208 	add.w	r2, r7, #8
 8000dc6:	f107 010c 	add.w	r1, r7, #12
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <state_start_enter+0x168>)
 8000dcc:	f003 fb66 	bl	800449c <HAL_CAN_AddTxMessage>

	/* Debug Tracing */
	//CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
	return;
 8000dd0:	bf00      	nop
}
 8000dd2:	372c      	adds	r7, #44	; 0x2c
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	200049e0 	.word	0x200049e0
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	20004ba4 	.word	0x20004ba4

08000de4 <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b09b      	sub	sp, #108	; 0x6c
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000dec:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <state_start_iterate+0x154>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	7e9b      	ldrb	r3, [r3, #26]
 8000df2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	657b      	str	r3, [r7, #84]	; 0x54
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000dfe:	e028      	b.n	8000e52 <state_start_iterate+0x6e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8000e00:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <state_start_iterate+0x154>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 8000e08:	f107 010c 	add.w	r1, r7, #12
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f006 ff40 	bl	8007c94 <osMessageQueueGet>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d11b      	bne.n	8000e52 <state_start_iterate+0x6e>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(0x2, 0x14, 0x0, 0x3, 0x00, 0x0))
 8000e1a:	693c      	ldr	r4, [r7, #16]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	2300      	movs	r3, #0
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2303      	movs	r3, #3
 8000e26:	2200      	movs	r2, #0
 8000e28:	2114      	movs	r1, #20
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff fe9e 	bl	8000b6c <Compose_CANId>
 8000e30:	4603      	mov	r3, r0
 8000e32:	429c      	cmp	r4, r3
 8000e34:	d10d      	bne.n	8000e52 <state_start_iterate+0x6e>
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(msg.data, &getPowerChannels);
 8000e3a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	331c      	adds	r3, #28
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe2b 	bl	8000aa2 <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <state_start_iterate+0x154>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f006 ff8c 	bl	8007d78 <osMessageQueueGetCount>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1cc      	bne.n	8000e00 <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d05f      	beq.n	8000f2e <state_start_iterate+0x14a>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e70:	2201      	movs	r2, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000e7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe27 	bl	8000ad8 <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000e8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <state_start_iterate+0x154>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f103 0008 	add.w	r0, r3, #8
 8000eb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eb4:	1d1a      	adds	r2, r3, #4
 8000eb6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000eba:	4603      	mov	r3, r0
 8000ebc:	481f      	ldr	r0, [pc, #124]	; (8000f3c <state_start_iterate+0x158>)
 8000ebe:	f003 faed 	bl	800449c <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <state_start_iterate+0x154>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000eca:	2120      	movs	r1, #32
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 fd29 	bl	8007924 <osSemaphoreAcquire>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d124      	bne.n	8000f22 <state_start_iterate+0x13e>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <state_start_iterate+0x154>)
 8000eda:	681c      	ldr	r4, [r3, #0]
 8000edc:	f002 fbc2 	bl	8003664 <HAL_GetTick>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	6223      	str	r3, [r4, #32]
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <state_start_iterate+0x154>)
 8000ee6:	681c      	ldr	r4, [r3, #0]
 8000ee8:	f002 fbbc 	bl	8003664 <HAL_GetTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	62e3      	str	r3, [r4, #44]	; 0x2c
			CC_GlobalState->shutdownTicks = HAL_GetTick();
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <state_start_iterate+0x154>)
 8000ef2:	681c      	ldr	r4, [r3, #0]
 8000ef4:	f002 fbb6 	bl	8003664 <HAL_GetTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	6363      	str	r3, [r4, #52]	; 0x34
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <state_start_iterate+0x154>)
 8000efe:	681c      	ldr	r4, [r3, #0]
 8000f00:	f002 fbb0 	bl	8003664 <HAL_GetTick>
 8000f04:	4603      	mov	r3, r0
 8000f06:	63a3      	str	r3, [r4, #56]	; 0x38
			CC_GlobalState->inverterTicks = HAL_GetTick();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <state_start_iterate+0x154>)
 8000f0a:	681c      	ldr	r4, [r3, #0]
 8000f0c:	f002 fbaa 	bl	8003664 <HAL_GetTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	6323      	str	r3, [r4, #48]	; 0x30
			osSemaphoreRelease(CC_GlobalState->sem);
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <state_start_iterate+0x154>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f006 fd67 	bl	80079f0 <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <state_start_iterate+0x15c>)
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <state_start_iterate+0x160>)
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fcf4 	bl	8000914 <fsm_changeState>
	}
	return;
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
}
 8000f30:	3764      	adds	r7, #100	; 0x64
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200049e0 	.word	0x200049e0
 8000f3c:	20004ba4 	.word	0x20004ba4
 8000f40:	0800b8ac 	.word	0x0800b8ac
 8000f44:	20000010 	.word	0x20000010

08000f48 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	/* All CAN Wake or
	 * Confirmation to Idle
	 * Messages go here over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8000f50:	bf00      	nop
}
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	0000      	movs	r0, r0
	...

08000f60 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8000f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6c:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <state_idle_enter+0x80>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000f76:	2120      	movs	r1, #32
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fcd3 	bl	8007924 <osSemaphoreAcquire>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d121      	bne.n	8000fc8 <state_idle_enter+0x68>
	{
		/* Assign Threshold to 20% of Brake Pressure */
		CC_GlobalState->brakePressureThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f8e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000fd0 <state_idle_enter+0x70>
 8000f92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f96:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000fd8 <state_idle_enter+0x78>
 8000f9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <state_idle_enter+0x80>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fa6:	ee17 2a90 	vmov	r2, s15
 8000faa:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428

		/* Init Chassis Controller On */
		CC_GlobalState->ccInit = true;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <state_idle_enter+0x80>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		osSemaphoreRelease(CC_GlobalState->sem);
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <state_idle_enter+0x80>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 fd15 	bl	80079f0 <osSemaphoreRelease>
	}
	return;
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
}
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	9999999a 	.word	0x9999999a
 8000fd4:	3fc99999 	.word	0x3fc99999
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40790000 	.word	0x40790000
 8000fe0:	200049e0 	.word	0x200049e0
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b0a3      	sub	sp, #140	; 0x8c
 8000fec:	af06      	add	r7, sp, #24
 8000fee:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000ff0:	4baa      	ldr	r3, [pc, #680]	; (800129c <state_idle_iterate+0x2b4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 fc92 	bl	8007924 <osSemaphoreAcquire>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 80df 	bne.w	80011c6 <state_idle_iterate+0x1de>
	{
		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8001008:	f002 fb2c 	bl	8003664 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	4ba3      	ldr	r3, [pc, #652]	; (800129c <state_idle_iterate+0x2b4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d925      	bls.n	8001066 <state_idle_iterate+0x7e>
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <state_idle_iterate+0x2b4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	7edb      	ldrb	r3, [r3, #27]
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d01d      	beq.n	8001066 <state_idle_iterate+0x7e>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800102a:	4b9c      	ldr	r3, [pc, #624]	; (800129c <state_idle_iterate+0x2b4>)
 800102c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 800102e:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001030:	4b9a      	ldr	r3, [pc, #616]	; (800129c <state_idle_iterate+0x2b4>)
 8001032:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8001034:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001038:	4b98      	ldr	r3, [pc, #608]	; (800129c <state_idle_iterate+0x2b4>)
 800103a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 800103c:	3310      	adds	r3, #16
 800103e:	4a97      	ldr	r2, [pc, #604]	; (800129c <state_idle_iterate+0x2b4>)
 8001040:	6814      	ldr	r4, [r2, #0]
 8001042:	4a97      	ldr	r2, [pc, #604]	; (80012a0 <state_idle_iterate+0x2b8>)
 8001044:	9204      	str	r2, [sp, #16]
 8001046:	4a97      	ldr	r2, [pc, #604]	; (80012a4 <state_idle_iterate+0x2bc>)
 8001048:	9203      	str	r2, [sp, #12]
 800104a:	4a97      	ldr	r2, [pc, #604]	; (80012a8 <state_idle_iterate+0x2c0>)
 800104c:	9202      	str	r2, [sp, #8]
 800104e:	4a97      	ldr	r2, [pc, #604]	; (80012ac <state_idle_iterate+0x2c4>)
 8001050:	9201      	str	r2, [sp, #4]
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	460b      	mov	r3, r1
 8001056:	4602      	mov	r2, r0
 8001058:	2101      	movs	r1, #1
 800105a:	4895      	ldr	r0, [pc, #596]	; (80012b0 <state_idle_iterate+0x2c8>)
 800105c:	f7ff fbb4 	bl	80007c8 <Send_CC_FatalShutdown>
 8001060:	4603      	mov	r3, r0
 8001062:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 8001066:	f002 fafd 	bl	8003664 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	4b8b      	ldr	r3, [pc, #556]	; (800129c <state_idle_iterate+0x2b4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	; 0x64
 8001076:	d925      	bls.n	80010c4 <state_idle_iterate+0xdc>
 8001078:	4b88      	ldr	r3, [pc, #544]	; (800129c <state_idle_iterate+0x2b4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	7f9b      	ldrb	r3, [r3, #30]
 800107e:	f083 0301 	eor.w	r3, r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01d      	beq.n	80010c4 <state_idle_iterate+0xdc>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001088:	4b84      	ldr	r3, [pc, #528]	; (800129c <state_idle_iterate+0x2b4>)
 800108a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800108c:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800108e:	4b83      	ldr	r3, [pc, #524]	; (800129c <state_idle_iterate+0x2b4>)
 8001090:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8001092:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001096:	4b81      	ldr	r3, [pc, #516]	; (800129c <state_idle_iterate+0x2b4>)
 8001098:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800109a:	3310      	adds	r3, #16
 800109c:	4a7f      	ldr	r2, [pc, #508]	; (800129c <state_idle_iterate+0x2b4>)
 800109e:	6814      	ldr	r4, [r2, #0]
 80010a0:	4a7f      	ldr	r2, [pc, #508]	; (80012a0 <state_idle_iterate+0x2b8>)
 80010a2:	9204      	str	r2, [sp, #16]
 80010a4:	4a7f      	ldr	r2, [pc, #508]	; (80012a4 <state_idle_iterate+0x2bc>)
 80010a6:	9203      	str	r2, [sp, #12]
 80010a8:	4a7f      	ldr	r2, [pc, #508]	; (80012a8 <state_idle_iterate+0x2c0>)
 80010aa:	9202      	str	r2, [sp, #8]
 80010ac:	4a7f      	ldr	r2, [pc, #508]	; (80012ac <state_idle_iterate+0x2c4>)
 80010ae:	9201      	str	r2, [sp, #4]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	460b      	mov	r3, r1
 80010b4:	4602      	mov	r2, r0
 80010b6:	2101      	movs	r1, #1
 80010b8:	487e      	ldr	r0, [pc, #504]	; (80012b4 <state_idle_iterate+0x2cc>)
 80010ba:	f7ff fb85 	bl	80007c8 <Send_CC_FatalShutdown>
 80010be:	4603      	mov	r3, r0
 80010c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 80010c4:	f002 face 	bl	8003664 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b74      	ldr	r3, [pc, #464]	; (800129c <state_idle_iterate+0x2b4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d925      	bls.n	8001122 <state_idle_iterate+0x13a>
 80010d6:	4b71      	ldr	r3, [pc, #452]	; (800129c <state_idle_iterate+0x2b4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	7f5b      	ldrb	r3, [r3, #29]
 80010dc:	f083 0301 	eor.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d01d      	beq.n	8001122 <state_idle_iterate+0x13a>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80010e6:	4b6d      	ldr	r3, [pc, #436]	; (800129c <state_idle_iterate+0x2b4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80010ea:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80010ec:	4b6b      	ldr	r3, [pc, #428]	; (800129c <state_idle_iterate+0x2b4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80010f0:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80010f4:	4b69      	ldr	r3, [pc, #420]	; (800129c <state_idle_iterate+0x2b4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80010f8:	3310      	adds	r3, #16
 80010fa:	4a68      	ldr	r2, [pc, #416]	; (800129c <state_idle_iterate+0x2b4>)
 80010fc:	6814      	ldr	r4, [r2, #0]
 80010fe:	4a68      	ldr	r2, [pc, #416]	; (80012a0 <state_idle_iterate+0x2b8>)
 8001100:	9204      	str	r2, [sp, #16]
 8001102:	4a68      	ldr	r2, [pc, #416]	; (80012a4 <state_idle_iterate+0x2bc>)
 8001104:	9203      	str	r2, [sp, #12]
 8001106:	4a68      	ldr	r2, [pc, #416]	; (80012a8 <state_idle_iterate+0x2c0>)
 8001108:	9202      	str	r2, [sp, #8]
 800110a:	4a68      	ldr	r2, [pc, #416]	; (80012ac <state_idle_iterate+0x2c4>)
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	460b      	mov	r3, r1
 8001112:	4602      	mov	r2, r0
 8001114:	2101      	movs	r1, #1
 8001116:	4868      	ldr	r0, [pc, #416]	; (80012b8 <state_idle_iterate+0x2d0>)
 8001118:	f7ff fb56 	bl	80007c8 <Send_CC_FatalShutdown>
 800111c:	4603      	mov	r3, r0
 800111e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 8001122:	f002 fa9f 	bl	8003664 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	4b5c      	ldr	r3, [pc, #368]	; (800129c <state_idle_iterate+0x2b4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d925      	bls.n	8001180 <state_idle_iterate+0x198>
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <state_idle_iterate+0x2b4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	7f1b      	ldrb	r3, [r3, #28]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d01d      	beq.n	8001180 <state_idle_iterate+0x198>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001144:	4b55      	ldr	r3, [pc, #340]	; (800129c <state_idle_iterate+0x2b4>)
 8001146:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001148:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800114a:	4b54      	ldr	r3, [pc, #336]	; (800129c <state_idle_iterate+0x2b4>)
 800114c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 800114e:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <state_idle_iterate+0x2b4>)
 8001154:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001156:	3310      	adds	r3, #16
 8001158:	4a50      	ldr	r2, [pc, #320]	; (800129c <state_idle_iterate+0x2b4>)
 800115a:	6814      	ldr	r4, [r2, #0]
 800115c:	4a50      	ldr	r2, [pc, #320]	; (80012a0 <state_idle_iterate+0x2b8>)
 800115e:	9204      	str	r2, [sp, #16]
 8001160:	4a50      	ldr	r2, [pc, #320]	; (80012a4 <state_idle_iterate+0x2bc>)
 8001162:	9203      	str	r2, [sp, #12]
 8001164:	4a50      	ldr	r2, [pc, #320]	; (80012a8 <state_idle_iterate+0x2c0>)
 8001166:	9202      	str	r2, [sp, #8]
 8001168:	4a50      	ldr	r2, [pc, #320]	; (80012ac <state_idle_iterate+0x2c4>)
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	460b      	mov	r3, r1
 8001170:	4602      	mov	r2, r0
 8001172:	2101      	movs	r1, #1
 8001174:	4851      	ldr	r0, [pc, #324]	; (80012bc <state_idle_iterate+0x2d4>)
 8001176:	f7ff fb27 	bl	80007c8 <Send_CC_FatalShutdown>
 800117a:	4603      	mov	r3, r0
 800117c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <state_idle_iterate+0x2b4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001188:	4618      	mov	r0, r3
 800118a:	f006 fc31 	bl	80079f0 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets on CAN1 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 800118e:	e01a      	b.n	80011c6 <state_idle_iterate+0x1de>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN1Queue, &msg, 0U, 0U) == osOK)
 8001190:	4b42      	ldr	r3, [pc, #264]	; (800129c <state_idle_iterate+0x2b4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
 8001198:	f107 010c 	add.w	r1, r7, #12
 800119c:	2300      	movs	r3, #0
 800119e:	2200      	movs	r2, #0
 80011a0:	f006 fd78 	bl	8007c94 <osMessageQueueGet>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10d      	bne.n	80011c6 <state_idle_iterate+0x1de>
		{
			if(msg.header.IDE == CAN_ID_STD) {
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <state_idle_iterate+0x1de>
				/* Inverter Heartbeat */
				if(msg.header.StdId == 0x764)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f240 7264 	movw	r2, #1892	; 0x764
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d105      	bne.n	80011c6 <state_idle_iterate+0x1de>
				{
					CC_GlobalState->inverterTicks = HAL_GetTick();
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <state_idle_iterate+0x2b4>)
 80011bc:	681c      	ldr	r4, [r3, #0]
 80011be:	f002 fa51 	bl	8003664 <HAL_GetTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	6323      	str	r3, [r4, #48]	; 0x30
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <state_idle_iterate+0x2b4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 fdd2 	bl	8007d78 <osMessageQueueGetCount>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1da      	bne.n	8001190 <state_idle_iterate+0x1a8>
			}
		}
	}

	/* Check for Queued CAN Packets on CAN2 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 80011da:	e0eb      	b.n	80013b4 <state_idle_iterate+0x3cc>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <state_idle_iterate+0x2b4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 80011e4:	f107 010c 	add.w	r1, r7, #12
 80011e8:	2300      	movs	r3, #0
 80011ea:	2200      	movs	r2, #0
 80011ec:	f006 fd52 	bl	8007c94 <osMessageQueueGet>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 80de 	bne.w	80013b4 <state_idle_iterate+0x3cc>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.IDE == CAN_ID_EXT) {
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	f040 80da 	bne.w	80013b4 <state_idle_iterate+0x3cc>
				if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001200:	693c      	ldr	r4, [r7, #16]
 8001202:	2300      	movs	r3, #0
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	2301      	movs	r3, #1
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2200      	movs	r2, #0
 800120e:	2110      	movs	r1, #16
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff fcab 	bl	8000b6c <Compose_CANId>
 8001216:	4603      	mov	r3, r0
 8001218:	429c      	cmp	r4, r3
 800121a:	d151      	bne.n	80012c0 <state_idle_iterate+0x2d8>
				{
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <state_idle_iterate+0x2b4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001224:	2120      	movs	r1, #32
 8001226:	4618      	mov	r0, r3
 8001228:	f006 fb7c 	bl	8007924 <osSemaphoreAcquire>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80c0 	bne.w	80013b4 <state_idle_iterate+0x3cc>
					{
						bool initialised = false; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
 8001234:	2300      	movs	r3, #0
 8001236:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 800123a:	f107 0465 	add.w	r4, r7, #101	; 0x65
 800123e:	f107 0266 	add.w	r2, r7, #102	; 0x66
 8001242:	f107 0167 	add.w	r1, r7, #103	; 0x67
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	f103 001c 	add.w	r0, r3, #28
 800124e:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8001252:	9304      	str	r3, [sp, #16]
 8001254:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001258:	9303      	str	r3, [sp, #12]
 800125a:	f107 0362 	add.w	r3, r7, #98	; 0x62
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	4623      	mov	r3, r4
 800126e:	f7ff f9bf 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
						CC_GlobalState->amsTicks = HAL_GetTick();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <state_idle_iterate+0x2b4>)
 8001274:	681c      	ldr	r4, [r3, #0]
 8001276:	f002 f9f5 	bl	8003664 <HAL_GetTick>
 800127a:	4603      	mov	r3, r0
 800127c:	62e3      	str	r3, [r4, #44]	; 0x2c
						CC_GlobalState->amsInit = initialised;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <state_idle_iterate+0x2b4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
						char x[80];
						osSemaphoreRelease(CC_GlobalState->sem);
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <state_idle_iterate+0x2b4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001292:	4618      	mov	r0, r3
 8001294:	f006 fbac 	bl	80079f0 <osSemaphoreRelease>
 8001298:	e08c      	b.n	80013b4 <state_idle_iterate+0x3cc>
 800129a:	bf00      	nop
 800129c:	200049e0 	.word	0x200049e0
 80012a0:	20004c38 	.word	0x20004c38
 80012a4:	20004b7c 	.word	0x20004b7c
 80012a8:	20004ba4 	.word	0x20004ba4
 80012ac:	20004bcc 	.word	0x20004bcc
 80012b0:	0800b8c8 	.word	0x0800b8c8
 80012b4:	0800b8e0 	.word	0x0800b8e0
 80012b8:	0800b8f8 	.word	0x0800b8f8
 80012bc:	0800b914 	.word	0x0800b914
					}
				}
				/* Shutdown Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 80012c0:	693c      	ldr	r4, [r7, #16]
 80012c2:	2300      	movs	r3, #0
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	2200      	movs	r2, #0
 80012ce:	2106      	movs	r1, #6
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff fc4b 	bl	8000b6c <Compose_CANId>
 80012d6:	4603      	mov	r3, r0
 80012d8:	429c      	cmp	r4, r3
 80012da:	d121      	bne.n	8001320 <state_idle_iterate+0x338>
				{
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80012dc:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <state_idle_iterate+0x4e0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80012e4:	2120      	movs	r1, #32
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 fb1c 	bl	8007924 <osSemaphoreAcquire>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d160      	bne.n	80013b4 <state_idle_iterate+0x3cc>
					{
						uint8_t segmentState;
						Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	331c      	adds	r3, #28
 80012f8:	f107 025d 	add.w	r2, r7, #93	; 0x5d
 80012fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001300:	f7ff fc6a 	bl	8000bd8 <Parse_SHDN_HeartbeatResponse>
						CC_GlobalState->shutdownTicks = HAL_GetTick();
 8001304:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <state_idle_iterate+0x4e0>)
 8001306:	681c      	ldr	r4, [r3, #0]
 8001308:	f002 f9ac 	bl	8003664 <HAL_GetTick>
 800130c:	4603      	mov	r3, r0
 800130e:	6363      	str	r3, [r4, #52]	; 0x34
						osSemaphoreRelease(CC_GlobalState->sem);
 8001310:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <state_idle_iterate+0x4e0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001318:	4618      	mov	r0, r3
 800131a:	f006 fb69 	bl	80079f0 <osSemaphoreRelease>
 800131e:	e049      	b.n	80013b4 <state_idle_iterate+0x3cc>
					}
				}
				/* Shutdown IMD Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001320:	693c      	ldr	r4, [r7, #16]
 8001322:	2300      	movs	r3, #0
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	2301      	movs	r3, #1
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	2200      	movs	r2, #0
 800132e:	2110      	movs	r1, #16
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff fc1b 	bl	8000b6c <Compose_CANId>
 8001336:	4603      	mov	r3, r0
 8001338:	429c      	cmp	r4, r3
 800133a:	d10f      	bne.n	800135c <state_idle_iterate+0x374>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	331c      	adds	r3, #28
 8001342:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001346:	e893 0003 	ldmia.w	r3, {r0, r1}
 800134a:	f7ff fc56 	bl	8000bfa <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 800134e:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <state_idle_iterate+0x4e0>)
 8001350:	681c      	ldr	r4, [r3, #0]
 8001352:	f002 f987 	bl	8003664 <HAL_GetTick>
 8001356:	4603      	mov	r3, r0
 8001358:	63a3      	str	r3, [r4, #56]	; 0x38
 800135a:	e02b      	b.n	80013b4 <state_idle_iterate+0x3cc>
				}
				/* Shutdown Triggered Fault */
				else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 800135c:	693c      	ldr	r4, [r7, #16]
 800135e:	2300      	movs	r3, #0
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	2300      	movs	r3, #0
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	2200      	movs	r2, #0
 800136a:	2106      	movs	r1, #6
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fbfd 	bl	8000b6c <Compose_CANId>
 8001372:	4603      	mov	r3, r0
 8001374:	429c      	cmp	r4, r3
 8001376:	d11d      	bne.n	80013b4 <state_idle_iterate+0x3cc>
				{
					// TODO DEAL WITH INVERTERS HERE WITH SOFT INVERTER SHUTDOWN
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001378:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <state_idle_iterate+0x4e0>)
 800137a:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 800137c:	4618      	mov	r0, r3
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <state_idle_iterate+0x4e0>)
 8001380:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001382:	f103 0108 	add.w	r1, r3, #8
							&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001386:	4b50      	ldr	r3, [pc, #320]	; (80014c8 <state_idle_iterate+0x4e0>)
 8001388:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 800138a:	3310      	adds	r3, #16
 800138c:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <state_idle_iterate+0x4e0>)
 800138e:	6814      	ldr	r4, [r2, #0]
 8001390:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <state_idle_iterate+0x4e4>)
 8001392:	9204      	str	r2, [sp, #16]
 8001394:	4a4e      	ldr	r2, [pc, #312]	; (80014d0 <state_idle_iterate+0x4e8>)
 8001396:	9203      	str	r2, [sp, #12]
 8001398:	4a4e      	ldr	r2, [pc, #312]	; (80014d4 <state_idle_iterate+0x4ec>)
 800139a:	9202      	str	r2, [sp, #8]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <state_idle_iterate+0x4f0>)
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	460b      	mov	r3, r1
 80013a4:	4602      	mov	r2, r0
 80013a6:	2101      	movs	r1, #1
 80013a8:	484c      	ldr	r0, [pc, #304]	; (80014dc <state_idle_iterate+0x4f4>)
 80013aa:	f7ff fa0d 	bl	80007c8 <Send_CC_FatalShutdown>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <state_idle_iterate+0x4e0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 fcdb 	bl	8007d78 <osMessageQueueGetCount>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f47f af09 	bne.w	80011dc <state_idle_iterate+0x1f4>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <state_idle_iterate+0x4e0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	7e1b      	ldrb	r3, [r3, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d016      	beq.n	8001402 <state_idle_iterate+0x41a>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 80013d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d8:	66bb      	str	r3, [r7, #104]	; 0x68
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 80013da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013e4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80014b8 <state_idle_iterate+0x4d0>
 80013e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013ec:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80014c0 <state_idle_iterate+0x4d8>
 80013f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001400:	e008      	b.n	8001414 <state_idle_iterate+0x42c>
	}
	else
	{
		HAL_ADC_Start(&hadc3);
 8001402:	4837      	ldr	r0, [pc, #220]	; (80014e0 <state_idle_iterate+0x4f8>)
 8001404:	f002 f97e 	bl	8003704 <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc3);
 8001408:	4835      	ldr	r0, [pc, #212]	; (80014e0 <state_idle_iterate+0x4f8>)
 800140a:	f002 fb29 	bl	8003a60 <HAL_ADC_GetValue>
 800140e:	4603      	mov	r3, r0
 8001410:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	if(raw > CC_GlobalState->brakePressureThreshold && CC_GlobalState->amsInit && CC_GlobalState->ccInit)
 8001414:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <state_idle_iterate+0x4e0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8001420:	429a      	cmp	r2, r3
 8001422:	d93d      	bls.n	80014a0 <state_idle_iterate+0x4b8>
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <state_idle_iterate+0x4e0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142c:	2b00      	cmp	r3, #0
 800142e:	d037      	beq.n	80014a0 <state_idle_iterate+0x4b8>
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <state_idle_iterate+0x4e0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001438:	2b00      	cmp	r3, #0
 800143a:	d031      	beq.n	80014a0 <state_idle_iterate+0x4b8>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001442:	4828      	ldr	r0, [pc, #160]	; (80014e4 <state_idle_iterate+0x4fc>)
 8001444:	f004 f85a 	bl	80054fc <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <state_idle_iterate+0x4e0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001450:	2120      	movs	r1, #32
 8001452:	4618      	mov	r0, r3
 8001454:	f006 fa66 	bl	8007924 <osSemaphoreAcquire>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d126      	bne.n	80014ac <state_idle_iterate+0x4c4>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 800145e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001462:	4820      	ldr	r0, [pc, #128]	; (80014e4 <state_idle_iterate+0x4fc>)
 8001464:	f004 f832 	bl	80054cc <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d010      	beq.n	8001490 <state_idle_iterate+0x4a8>
 800146e:	f002 f8f9 	bl	8003664 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <state_idle_iterate+0x4e0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001482:	4293      	cmp	r3, r2
 8001484:	d904      	bls.n	8001490 <state_idle_iterate+0x4a8>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <state_idle_iterate+0x500>)
 8001488:	4918      	ldr	r1, [pc, #96]	; (80014ec <state_idle_iterate+0x504>)
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fa42 	bl	8000914 <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <state_idle_iterate+0x4e0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001498:	4618      	mov	r0, r3
 800149a:	f006 faa9 	bl	80079f0 <osSemaphoreRelease>
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800149e:	e005      	b.n	80014ac <state_idle_iterate+0x4c4>
		}
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a6:	480f      	ldr	r0, [pc, #60]	; (80014e4 <state_idle_iterate+0x4fc>)
 80014a8:	f004 f828 	bl	80054fc <HAL_GPIO_WritePin>
	}
}
 80014ac:	bf00      	nop
 80014ae:	3774      	adds	r7, #116	; 0x74
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd90      	pop	{r4, r7, pc}
 80014b4:	f3af 8000 	nop.w
 80014b8:	33333333 	.word	0x33333333
 80014bc:	3fd33333 	.word	0x3fd33333
 80014c0:	00000000 	.word	0x00000000
 80014c4:	40790000 	.word	0x40790000
 80014c8:	200049e0 	.word	0x200049e0
 80014cc:	20004c38 	.word	0x20004c38
 80014d0:	20004b7c 	.word	0x20004b7c
 80014d4:	20004ba4 	.word	0x20004ba4
 80014d8:	20004bcc 	.word	0x20004bcc
 80014dc:	0800b930 	.word	0x0800b930
 80014e0:	20004a74 	.word	0x20004a74
 80014e4:	40021000 	.word	0x40021000
 80014e8:	0800b950 	.word	0x0800b950
 80014ec:	20000020 	.word	0x20000020

080014f0 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 80014f8:	f7ff f8e4 	bl	80006c4 <Compose_CC_ReadyToDrive>
 80014fc:	4603      	mov	r3, r0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	2304      	movs	r3, #4
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	2301      	movs	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 800151e:	230f      	movs	r3, #15
 8001520:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <state_idle_exit+0xa8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f107 0208 	add.w	r2, r7, #8
 800152a:	f107 010c 	add.w	r1, r7, #12
 800152e:	481b      	ldr	r0, [pc, #108]	; (800159c <state_idle_exit+0xac>)
 8001530:	f002 ffb4 	bl	800449c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <state_idle_exit+0xa8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3308      	adds	r3, #8
 800153a:	f107 0208 	add.w	r2, r7, #8
 800153e:	f107 010c 	add.w	r1, r7, #12
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <state_idle_exit+0xb0>)
 8001544:	f002 ffaa 	bl	800449c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <state_idle_exit+0xa8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3310      	adds	r3, #16
 800154e:	f107 0208 	add.w	r2, r7, #8
 8001552:	f107 010c 	add.w	r1, r7, #12
 8001556:	4813      	ldr	r0, [pc, #76]	; (80015a4 <state_idle_exit+0xb4>)
 8001558:	f002 ffa0 	bl	800449c <HAL_CAN_AddTxMessage>

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <state_idle_exit+0xa8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001564:	2120      	movs	r1, #32
 8001566:	4618      	mov	r0, r3
 8001568:	f006 f9dc 	bl	8007924 <osSemaphoreAcquire>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10d      	bne.n	800158e <state_idle_exit+0x9e>
	{
		CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <state_idle_exit+0xa8>)
 8001574:	681c      	ldr	r4, [r3, #0]
 8001576:	f002 f875 	bl	8003664 <HAL_GetTick>
 800157a:	4603      	mov	r3, r0
 800157c:	6263      	str	r3, [r4, #36]	; 0x24
		osSemaphoreRelease(CC_GlobalState->sem);
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <state_idle_exit+0xa8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001586:	4618      	mov	r0, r3
 8001588:	f006 fa32 	bl	80079f0 <osSemaphoreRelease>
	}
	return;
 800158c:	bf00      	nop
 800158e:	bf00      	nop
}
 8001590:	372c      	adds	r7, #44	; 0x2c
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	200049e0 	.word	0x200049e0
 800159c:	20004bcc 	.word	0x20004bcc
 80015a0:	20004ba4 	.word	0x20004ba4
 80015a4:	20004b7c 	.word	0x20004b7c

080015a8 <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	/* If AMS Contactors Closed & BMS' Healthy */

	/* Enable all channels on PDM */
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80015b0:	4b4e      	ldr	r3, [pc, #312]	; (80016ec <state_driving_enter+0x144>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80015b8:	2120      	movs	r1, #32
 80015ba:	4618      	mov	r0, r3
 80015bc:	f006 f9b2 	bl	8007924 <osSemaphoreAcquire>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d17d      	bne.n	80016c2 <state_driving_enter+0x11a>
	{
		CC_GlobalState->tractiveActive = true;
 80015c6:	4b49      	ldr	r3, [pc, #292]	; (80016ec <state_driving_enter+0x144>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
		CC_GlobalState->faultDetected = false;
 80015d0:	4b46      	ldr	r3, [pc, #280]	; (80016ec <state_driving_enter+0x144>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
		CC_GlobalState->rtdLightActive = true;
 80015da:	4b44      	ldr	r3, [pc, #272]	; (80016ec <state_driving_enter+0x144>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4

		memset(CC_GlobalState->rollingBrakeValues, 0, 10*sizeof(uint32_t));
 80015e4:	4b41      	ldr	r3, [pc, #260]	; (80016ec <state_driving_enter+0x144>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 80015ec:	2228      	movs	r2, #40	; 0x28
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f009 fcf0 	bl	800afd6 <memset>
		memset(CC_GlobalState->secondaryRollingBrakeValues, 0, 10*sizeof(uint32_t));
 80015f6:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <state_driving_enter+0x144>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80015fe:	2228      	movs	r2, #40	; 0x28
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f009 fce7 	bl	800afd6 <memset>
		memset(CC_GlobalState->rollingAccelValues, 0, 10*sizeof(uint32_t));
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <state_driving_enter+0x144>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8001610:	2228      	movs	r2, #40	; 0x28
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f009 fcde 	bl	800afd6 <memset>
		memset(CC_GlobalState->secondaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <state_driving_enter+0x144>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8001622:	2228      	movs	r2, #40	; 0x28
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f009 fcd5 	bl	800afd6 <memset>
		memset(CC_GlobalState->tertiaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 800162c:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <state_driving_enter+0x144>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8001634:	2228      	movs	r2, #40	; 0x28
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f009 fccc 	bl	800afd6 <memset>

		CC_GlobalState->brakeMin[0] = BRAKE_PEDAL_ONE_MIN;
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <state_driving_enter+0x144>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001646:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		CC_GlobalState->brakeMin[1] = BRAKE_PEDAL_TWO_MIN;
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <state_driving_enter+0x144>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	22f0      	movs	r2, #240	; 0xf0
 8001650:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
		CC_GlobalState->brakeMax[0] = BRAKE_PEDAL_ONE_MAX;
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <state_driving_enter+0x144>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f640 5248 	movw	r2, #3400	; 0xd48
 800165c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		CC_GlobalState->brakeMax[1] = BRAKE_PEDAL_TWO_MAX;
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <state_driving_enter+0x144>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f640 42f8 	movw	r2, #3320	; 0xcf8
 8001668:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a

		CC_GlobalState->accelMin[0] = ACCEL_PEDAL_ONE_MIN;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <state_driving_enter+0x144>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001674:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
		CC_GlobalState->accelMax[0] = ACCEL_PEDAL_ONE_MAX;
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <state_driving_enter+0x144>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f640 5216 	movw	r2, #3350	; 0xd16
 8001680:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
		CC_GlobalState->accelMin[1] = ACCEL_PEDAL_TWO_MIN;
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <state_driving_enter+0x144>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800168c:	f8a3 245e 	strh.w	r2, [r3, #1118]	; 0x45e
		CC_GlobalState->accelMax[1] = ACCEL_PEDAL_TWO_MAX;
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <state_driving_enter+0x144>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f640 5248 	movw	r2, #3400	; 0xd48
 8001698:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
		CC_GlobalState->accelMin[2] = ACCEL_PEDAL_THREE_MIN;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <state_driving_enter+0x144>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016a4:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
		CC_GlobalState->accelMax[2] = ACCEL_PEDAL_THREE_MAX;
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <state_driving_enter+0x144>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f640 5234 	movw	r2, #3380	; 0xd34
 80016b0:	f8a3 2466 	strh.w	r2, [r3, #1126]	; 0x466

		osSemaphoreRelease(CC_GlobalState->sem);
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <state_driving_enter+0x144>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80016bc:	4618      	mov	r0, r3
 80016be:	f006 f997 	bl	80079f0 <osSemaphoreRelease>
	}
	/* Start Polling ADC */
	HAL_ADC_Start_DMA(&hadc2, CC_GlobalState->brakeAdcValues, 100);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <state_driving_enter+0x144>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3340      	adds	r3, #64	; 0x40
 80016c8:	2264      	movs	r2, #100	; 0x64
 80016ca:	4619      	mov	r1, r3
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <state_driving_enter+0x148>)
 80016ce:	f002 f8d9 	bl	8003884 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, CC_GlobalState->accelAdcValues, 150);
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <state_driving_enter+0x144>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80016da:	2296      	movs	r2, #150	; 0x96
 80016dc:	4619      	mov	r1, r3
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <state_driving_enter+0x14c>)
 80016e0:	f002 f8d0 	bl	8003884 <HAL_ADC_Start_DMA>
	/* Else */

	/* Hard Shutdown Power Off */
	return;
 80016e4:	bf00      	nop
}
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200049e0 	.word	0x200049e0
 80016f0:	200049e4 	.word	0x200049e4
 80016f4:	20004a2c 	.word	0x20004a2c

080016f8 <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b0e3      	sub	sp, #396	; 0x18c
 80016fc:	af06      	add	r7, sp, #24
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	6018      	str	r0, [r3, #0]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001702:	4bad      	ldr	r3, [pc, #692]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800170a:	2120      	movs	r1, #32
 800170c:	4618      	mov	r0, r3
 800170e:	f006 f909 	bl	8007924 <osSemaphoreAcquire>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 8144 	bne.w	80019a2 <state_driving_iterate+0x2aa>
	{
		/* Flash RTD */
		if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) > 1000)
 800171a:	f001 ffa3 	bl	8003664 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	4ba5      	ldr	r3, [pc, #660]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800172c:	d926      	bls.n	800177c <state_driving_iterate+0x84>
		{
			HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, !CC_GlobalState->rtdLightActive);
 800172e:	4ba2      	ldr	r3, [pc, #648]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f893 34e4 	ldrb.w	r3, [r3, #1252]	; 0x4e4
 8001736:	f083 0301 	eor.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001742:	489e      	ldr	r0, [pc, #632]	; (80019bc <state_driving_iterate+0x2c4>)
 8001744:	f003 feda 	bl	80054fc <HAL_GPIO_WritePin>
			CC_GlobalState->rtdLightActive = !CC_GlobalState->rtdLightActive;
 8001748:	4b9b      	ldr	r3, [pc, #620]	; (80019b8 <state_driving_iterate+0x2c0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f893 34e4 	ldrb.w	r3, [r3, #1252]	; 0x4e4
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf14      	ite	ne
 8001754:	2301      	movne	r3, #1
 8001756:	2300      	moveq	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4b95      	ldr	r3, [pc, #596]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f002 0201 	and.w	r2, r2, #1
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
			CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 8001770:	4b91      	ldr	r3, [pc, #580]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001772:	681c      	ldr	r4, [r3, #0]
 8001774:	f001 ff76 	bl	8003664 <HAL_GetTick>
 8001778:	4603      	mov	r3, r0
 800177a:	6263      	str	r3, [r4, #36]	; 0x24
		}

		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 800177c:	f001 ff72 	bl	8003664 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	4b8d      	ldr	r3, [pc, #564]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d925      	bls.n	80017da <state_driving_iterate+0xe2>
 800178e:	4b8a      	ldr	r3, [pc, #552]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	7edb      	ldrb	r3, [r3, #27]
 8001794:	f083 0301 	eor.w	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d01d      	beq.n	80017da <state_driving_iterate+0xe2>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800179e:	4b86      	ldr	r3, [pc, #536]	; (80019b8 <state_driving_iterate+0x2c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80017a2:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80017a4:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <state_driving_iterate+0x2c0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80017a8:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80017ac:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <state_driving_iterate+0x2c0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80017b0:	3310      	adds	r3, #16
 80017b2:	4a81      	ldr	r2, [pc, #516]	; (80019b8 <state_driving_iterate+0x2c0>)
 80017b4:	6814      	ldr	r4, [r2, #0]
 80017b6:	4a82      	ldr	r2, [pc, #520]	; (80019c0 <state_driving_iterate+0x2c8>)
 80017b8:	9204      	str	r2, [sp, #16]
 80017ba:	4a82      	ldr	r2, [pc, #520]	; (80019c4 <state_driving_iterate+0x2cc>)
 80017bc:	9203      	str	r2, [sp, #12]
 80017be:	4a82      	ldr	r2, [pc, #520]	; (80019c8 <state_driving_iterate+0x2d0>)
 80017c0:	9202      	str	r2, [sp, #8]
 80017c2:	4a82      	ldr	r2, [pc, #520]	; (80019cc <state_driving_iterate+0x2d4>)
 80017c4:	9201      	str	r2, [sp, #4]
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	460b      	mov	r3, r1
 80017ca:	4602      	mov	r2, r0
 80017cc:	2101      	movs	r1, #1
 80017ce:	4880      	ldr	r0, [pc, #512]	; (80019d0 <state_driving_iterate+0x2d8>)
 80017d0:	f7fe fffa 	bl	80007c8 <Send_CC_FatalShutdown>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 80017da:	f001 ff43 	bl	8003664 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <state_driving_iterate+0x2c0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b64      	cmp	r3, #100	; 0x64
 80017ea:	d925      	bls.n	8001838 <state_driving_iterate+0x140>
 80017ec:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <state_driving_iterate+0x2c0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	7f9b      	ldrb	r3, [r3, #30]
 80017f2:	f083 0301 	eor.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01d      	beq.n	8001838 <state_driving_iterate+0x140>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80017fc:	4b6e      	ldr	r3, [pc, #440]	; (80019b8 <state_driving_iterate+0x2c0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8001800:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001802:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8001806:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 800180a:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <state_driving_iterate+0x2c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800180e:	3310      	adds	r3, #16
 8001810:	4a69      	ldr	r2, [pc, #420]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001812:	6814      	ldr	r4, [r2, #0]
 8001814:	4a6a      	ldr	r2, [pc, #424]	; (80019c0 <state_driving_iterate+0x2c8>)
 8001816:	9204      	str	r2, [sp, #16]
 8001818:	4a6a      	ldr	r2, [pc, #424]	; (80019c4 <state_driving_iterate+0x2cc>)
 800181a:	9203      	str	r2, [sp, #12]
 800181c:	4a6a      	ldr	r2, [pc, #424]	; (80019c8 <state_driving_iterate+0x2d0>)
 800181e:	9202      	str	r2, [sp, #8]
 8001820:	4a6a      	ldr	r2, [pc, #424]	; (80019cc <state_driving_iterate+0x2d4>)
 8001822:	9201      	str	r2, [sp, #4]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	460b      	mov	r3, r1
 8001828:	4602      	mov	r2, r0
 800182a:	2101      	movs	r1, #1
 800182c:	4869      	ldr	r0, [pc, #420]	; (80019d4 <state_driving_iterate+0x2dc>)
 800182e:	f7fe ffcb 	bl	80007c8 <Send_CC_FatalShutdown>
 8001832:	4603      	mov	r3, r0
 8001834:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8001838:	f001 ff14 	bl	8003664 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	4b5e      	ldr	r3, [pc, #376]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	d925      	bls.n	8001896 <state_driving_iterate+0x19e>
 800184a:	4b5b      	ldr	r3, [pc, #364]	; (80019b8 <state_driving_iterate+0x2c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	7f5b      	ldrb	r3, [r3, #29]
 8001850:	f083 0301 	eor.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d01d      	beq.n	8001896 <state_driving_iterate+0x19e>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800185a:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <state_driving_iterate+0x2c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 800185e:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001860:	4b55      	ldr	r3, [pc, #340]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001862:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001864:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001868:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <state_driving_iterate+0x2c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 800186c:	3310      	adds	r3, #16
 800186e:	4a52      	ldr	r2, [pc, #328]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001870:	6814      	ldr	r4, [r2, #0]
 8001872:	4a53      	ldr	r2, [pc, #332]	; (80019c0 <state_driving_iterate+0x2c8>)
 8001874:	9204      	str	r2, [sp, #16]
 8001876:	4a53      	ldr	r2, [pc, #332]	; (80019c4 <state_driving_iterate+0x2cc>)
 8001878:	9203      	str	r2, [sp, #12]
 800187a:	4a53      	ldr	r2, [pc, #332]	; (80019c8 <state_driving_iterate+0x2d0>)
 800187c:	9202      	str	r2, [sp, #8]
 800187e:	4a53      	ldr	r2, [pc, #332]	; (80019cc <state_driving_iterate+0x2d4>)
 8001880:	9201      	str	r2, [sp, #4]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	460b      	mov	r3, r1
 8001886:	4602      	mov	r2, r0
 8001888:	2101      	movs	r1, #1
 800188a:	4853      	ldr	r0, [pc, #332]	; (80019d8 <state_driving_iterate+0x2e0>)
 800188c:	f7fe ff9c 	bl	80007c8 <Send_CC_FatalShutdown>
 8001890:	4603      	mov	r3, r0
 8001892:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 8001896:	f001 fee5 	bl	8003664 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <state_driving_iterate+0x2c0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	; 0x64
 80018a6:	d925      	bls.n	80018f4 <state_driving_iterate+0x1fc>
 80018a8:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <state_driving_iterate+0x2c0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	7f1b      	ldrb	r3, [r3, #28]
 80018ae:	f083 0301 	eor.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01d      	beq.n	80018f4 <state_driving_iterate+0x1fc>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80018b8:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <state_driving_iterate+0x2c0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80018bc:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80018be:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <state_driving_iterate+0x2c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80018c2:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80018c6:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <state_driving_iterate+0x2c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80018ca:	3310      	adds	r3, #16
 80018cc:	4a3a      	ldr	r2, [pc, #232]	; (80019b8 <state_driving_iterate+0x2c0>)
 80018ce:	6814      	ldr	r4, [r2, #0]
 80018d0:	4a3b      	ldr	r2, [pc, #236]	; (80019c0 <state_driving_iterate+0x2c8>)
 80018d2:	9204      	str	r2, [sp, #16]
 80018d4:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <state_driving_iterate+0x2cc>)
 80018d6:	9203      	str	r2, [sp, #12]
 80018d8:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <state_driving_iterate+0x2d0>)
 80018da:	9202      	str	r2, [sp, #8]
 80018dc:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <state_driving_iterate+0x2d4>)
 80018de:	9201      	str	r2, [sp, #4]
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	460b      	mov	r3, r1
 80018e4:	4602      	mov	r2, r0
 80018e6:	2101      	movs	r1, #1
 80018e8:	483c      	ldr	r0, [pc, #240]	; (80019dc <state_driving_iterate+0x2e4>)
 80018ea:	f7fe ff6d 	bl	80007c8 <Send_CC_FatalShutdown>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <state_driving_iterate+0x2c0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 f877 	bl	80079f0 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets on CAN1 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 8001902:	e04e      	b.n	80019a2 <state_driving_iterate+0x2aa>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN1Queue, &msg, 0U, 0U) == osOK)
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
 800190c:	f107 0108 	add.w	r1, r7, #8
 8001910:	2300      	movs	r3, #0
 8001912:	2200      	movs	r2, #0
 8001914:	f006 f9be 	bl	8007c94 <osMessageQueueGet>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d141      	bne.n	80019a2 <state_driving_iterate+0x2aa>
		{
			if(msg.header.IDE == CAN_ID_STD) {
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d13c      	bne.n	80019a2 <state_driving_iterate+0x2aa>
				/* Inverter Heartbeat */
				if(msg.header.StdId == 0x764)
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f240 7264 	movw	r2, #1892	; 0x764
 8001932:	4293      	cmp	r3, r2
 8001934:	d106      	bne.n	8001944 <state_driving_iterate+0x24c>
				{
					CC_GlobalState->inverterTicks = HAL_GetTick();
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001938:	681c      	ldr	r4, [r3, #0]
 800193a:	f001 fe93 	bl	8003664 <HAL_GetTick>
 800193e:	4603      	mov	r3, r0
 8001940:	6323      	str	r3, [r4, #48]	; 0x30
 8001942:	e02e      	b.n	80019a2 <state_driving_iterate+0x2aa>
				}
				else if(msg.header.StdId == 0x580+INVERTER_1_NODE_ID)
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800194e:	4293      	cmp	r3, r2
 8001950:	d127      	bne.n	80019a2 <state_driving_iterate+0x2aa>
				{
					int16_t motorRPM = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
					Parse_CC_RequestRPM(msg.data, &motorRPM);
 8001958:	f107 02d2 	add.w	r2, r7, #210	; 0xd2
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	331c      	adds	r3, #28
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe ff17 	bl	8000798 <Parse_CC_RequestRPM>
					char x[80];
					int len = sprintf(x, "[%li] Got CAN msg from CAN1: %i\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, motorRPM);
 800196a:	f001 fe7b 	bl	8003664 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <state_driving_iterate+0x2c0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <state_driving_iterate+0x2e8>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	099a      	lsrs	r2, r3, #6
 8001980:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8001984:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001988:	4916      	ldr	r1, [pc, #88]	; (80019e4 <state_driving_iterate+0x2ec>)
 800198a:	f009 fbe5 	bl	800b158 <siprintf>
 800198e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
					CC_LogInfo(x, len);
 8001992:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fbd9 	bl	8003154 <CC_LogInfo>
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <state_driving_iterate+0x2c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 f9e4 	bl	8007d78 <osMessageQueueGetCount>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1a6      	bne.n	8001904 <state_driving_iterate+0x20c>
			}
		}
	}

	/* Check for Queued CAN Packets on CAN2 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 80019b6:	e109      	b.n	8001bcc <state_driving_iterate+0x4d4>
 80019b8:	200049e0 	.word	0x200049e0
 80019bc:	40021000 	.word	0x40021000
 80019c0:	20004c38 	.word	0x20004c38
 80019c4:	20004b7c 	.word	0x20004b7c
 80019c8:	20004ba4 	.word	0x20004ba4
 80019cc:	20004bcc 	.word	0x20004bcc
 80019d0:	0800b8c8 	.word	0x0800b8c8
 80019d4:	0800b8e0 	.word	0x0800b8e0
 80019d8:	0800b8f8 	.word	0x0800b8f8
 80019dc:	0800b914 	.word	0x0800b914
 80019e0:	10624dd3 	.word	0x10624dd3
 80019e4:	0800b95c 	.word	0x0800b95c
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 80019e8:	4bb2      	ldr	r3, [pc, #712]	; (8001cb4 <state_driving_iterate+0x5bc>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 80019f0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80019f4:	2300      	movs	r3, #0
 80019f6:	2200      	movs	r2, #0
 80019f8:	f006 f94c 	bl	8007c94 <osMessageQueueGet>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 80e4 	bne.w	8001bcc <state_driving_iterate+0x4d4>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a08:	685c      	ldr	r4, [r3, #4]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	2200      	movs	r2, #0
 8001a16:	2110      	movs	r1, #16
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f7ff f8a7 	bl	8000b6c <Compose_CANId>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	429c      	cmp	r4, r3
 8001a22:	d13b      	bne.n	8001a9c <state_driving_iterate+0x3a4>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001a24:	4ba3      	ldr	r3, [pc, #652]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 ff78 	bl	8007924 <osSemaphoreAcquire>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 80c8 	bne.w	8001bcc <state_driving_iterate+0x4d4>
				{
					bool initialised; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8001a3c:	f107 04cf 	add.w	r4, r7, #207	; 0xcf
 8001a40:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001a44:	f107 01d1 	add.w	r1, r7, #209	; 0xd1
 8001a48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4c:	f103 001c 	add.w	r0, r3, #28
 8001a50:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a54:	9304      	str	r3, [sp, #16]
 8001a56:	f107 03ca 	add.w	r3, r7, #202	; 0xca
 8001a5a:	9303      	str	r3, [sp, #12]
 8001a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	f107 03cd 	add.w	r3, r7, #205	; 0xcd
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	f107 03ce 	add.w	r3, r7, #206	; 0xce
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4623      	mov	r3, r4
 8001a70:	f7fe fdbe 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 8001a74:	4b8f      	ldr	r3, [pc, #572]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001a76:	681c      	ldr	r4, [r3, #0]
 8001a78:	f001 fdf4 	bl	8003664 <HAL_GetTick>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	62e3      	str	r3, [r4, #44]	; 0x2c
					CC_GlobalState->amsInit = initialised;
 8001a80:	4b8c      	ldr	r3, [pc, #560]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f897 20d1 	ldrb.w	r2, [r7, #209]	; 0xd1
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					osSemaphoreRelease(CC_GlobalState->sem);
 8001a8c:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a94:	4618      	mov	r0, r3
 8001a96:	f005 ffab 	bl	80079f0 <osSemaphoreRelease>
 8001a9a:	e097      	b.n	8001bcc <state_driving_iterate+0x4d4>
				}
			}
			/* Shutdown Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 8001a9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa0:	685c      	ldr	r4, [r3, #4]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2200      	movs	r2, #0
 8001aae:	2106      	movs	r1, #6
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff f85b 	bl	8000b6c <Compose_CANId>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	429c      	cmp	r4, r3
 8001aba:	d121      	bne.n	8001b00 <state_driving_iterate+0x408>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001abc:	4b7d      	ldr	r3, [pc, #500]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f005 ff2c 	bl	8007924 <osSemaphoreAcquire>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d17c      	bne.n	8001bcc <state_driving_iterate+0x4d4>
				{
					uint8_t segmentState;
					Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 8001ad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad6:	331c      	adds	r3, #28
 8001ad8:	f107 02c7 	add.w	r2, r7, #199	; 0xc7
 8001adc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ae0:	f7ff f87a 	bl	8000bd8 <Parse_SHDN_HeartbeatResponse>
					CC_GlobalState->shutdownTicks = HAL_GetTick();
 8001ae4:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001ae6:	681c      	ldr	r4, [r3, #0]
 8001ae8:	f001 fdbc 	bl	8003664 <HAL_GetTick>
 8001aec:	4603      	mov	r3, r0
 8001aee:	6363      	str	r3, [r4, #52]	; 0x34
					osSemaphoreRelease(CC_GlobalState->sem);
 8001af0:	4b70      	ldr	r3, [pc, #448]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 ff79 	bl	80079f0 <osSemaphoreRelease>
 8001afe:	e065      	b.n	8001bcc <state_driving_iterate+0x4d4>
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001b00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b04:	685c      	ldr	r4, [r3, #4]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2200      	movs	r2, #0
 8001b12:	2110      	movs	r1, #16
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff f829 	bl	8000b6c <Compose_CANId>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	d121      	bne.n	8001b64 <state_driving_iterate+0x46c>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001b20:	4b64      	ldr	r3, [pc, #400]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b28:	2120      	movs	r1, #32
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 fefa 	bl	8007924 <osSemaphoreAcquire>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d14a      	bne.n	8001bcc <state_driving_iterate+0x4d4>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b3a:	331c      	adds	r3, #28
 8001b3c:	f107 02c6 	add.w	r2, r7, #198	; 0xc6
 8001b40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b44:	f7ff f859 	bl	8000bfa <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001b48:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001b4a:	681c      	ldr	r4, [r3, #0]
 8001b4c:	f001 fd8a 	bl	8003664 <HAL_GetTick>
 8001b50:	4603      	mov	r3, r0
 8001b52:	63a3      	str	r3, [r4, #56]	; 0x38
					osSemaphoreRelease(CC_GlobalState->sem);
 8001b54:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f005 ff47 	bl	80079f0 <osSemaphoreRelease>
 8001b62:	e033      	b.n	8001bcc <state_driving_iterate+0x4d4>
				}
			}
			/* Shutdown Triggered Fault */
			else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 8001b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b68:	685c      	ldr	r4, [r3, #4]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2300      	movs	r3, #0
 8001b74:	2200      	movs	r2, #0
 8001b76:	2106      	movs	r1, #6
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7fe fff7 	bl	8000b6c <Compose_CANId>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	429c      	cmp	r4, r3
 8001b82:	d123      	bne.n	8001bcc <state_driving_iterate+0x4d4>
			{
				// TODO DEAL WITH INVERTERS HERE WITH SOFT INVERTER SHUTDOWN
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001b88:	4618      	mov	r0, r3
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001b8e:	f103 0108 	add.w	r1, r3, #8
						&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001b92:	4b48      	ldr	r3, [pc, #288]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001b96:	3310      	adds	r3, #16
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001b9a:	6814      	ldr	r4, [r2, #0]
 8001b9c:	4a46      	ldr	r2, [pc, #280]	; (8001cb8 <state_driving_iterate+0x5c0>)
 8001b9e:	9204      	str	r2, [sp, #16]
 8001ba0:	4a46      	ldr	r2, [pc, #280]	; (8001cbc <state_driving_iterate+0x5c4>)
 8001ba2:	9203      	str	r2, [sp, #12]
 8001ba4:	4a46      	ldr	r2, [pc, #280]	; (8001cc0 <state_driving_iterate+0x5c8>)
 8001ba6:	9202      	str	r2, [sp, #8]
 8001ba8:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <state_driving_iterate+0x5cc>)
 8001baa:	9201      	str	r2, [sp, #4]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	4844      	ldr	r0, [pc, #272]	; (8001cc8 <state_driving_iterate+0x5d0>)
 8001bb6:	f7fe fe07 	bl	80007c8 <Send_CC_FatalShutdown>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				fsm_changeState(fsm, &idleState, "Resetting to Idle to Clean");
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	4a42      	ldr	r2, [pc, #264]	; (8001ccc <state_driving_iterate+0x5d4>)
 8001bc4:	4942      	ldr	r1, [pc, #264]	; (8001cd0 <state_driving_iterate+0x5d8>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	f7fe fea4 	bl	8000914 <fsm_changeState>
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001bcc:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 f8cf 	bl	8007d78 <osMessageQueueGetCount>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f af03 	bne.w	80019e8 <state_driving_iterate+0x2f0>
	uint16_t brake_travel_one; uint16_t brake_travel_two;
	uint16_t accel_travel_one; uint16_t accel_travel_two; uint16_t accel_travel_three;
	char x[80]; uint32_t len;

	/* Echo ADC Failure for Debugging */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug)
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <state_driving_iterate+0x50e>
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	7e5b      	ldrb	r3, [r3, #25]
 8001bf4:	f083 0301 	eor.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <state_driving_iterate+0x50e>
	{
		CC_LogInfo("ADC Fault Detected\r\n", strlen("ADC Fault Detected\r\n"));
 8001bfe:	2114      	movs	r1, #20
 8001c00:	4834      	ldr	r0, [pc, #208]	; (8001cd4 <state_driving_iterate+0x5dc>)
 8001c02:	f001 faa7 	bl	8003154 <CC_LogInfo>
	}
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c0e:	2120      	movs	r1, #32
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 fe87 	bl	8007924 <osSemaphoreAcquire>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f040 8147 	bne.w	8001eac <state_driving_iterate+0x7b4>
	{
		/* Check for non-expected ADC Values
		 * Trigger Fault outside expected range
		 * Power trip, surge to sensor etc.
		 */
		if(!CC_GlobalState->faultDetected)
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001c26:	f083 0301 	eor.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 808d 	beq.w	8001d4c <state_driving_iterate+0x654>
		{
			for (int i = 0; i < 2; i++) {
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001c38:	e034      	b.n	8001ca4 <state_driving_iterate+0x5ac>
				if (CC_GlobalState->brakeAdcValues[i] <= CC_GlobalState->brakeMin[i] - 100
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001c42:	3210      	adds	r2, #16
 8001c44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c50:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	440b      	add	r3, r1
 8001c58:	889b      	ldrh	r3, [r3, #4]
 8001c5a:	3b64      	subs	r3, #100	; 0x64
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d911      	bls.n	8001c84 <state_driving_iterate+0x58c>
						|| CC_GlobalState->brakeAdcValues[i] >= CC_GlobalState->brakeMax[i] + 100)
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001c68:	3210      	adds	r2, #16
 8001c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6e:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c76:	f501 710b 	add.w	r1, r1, #556	; 0x22c
 8001c7a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001c7e:	3264      	adds	r2, #100	; 0x64
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d30a      	bcc.n	8001c9a <state_driving_iterate+0x5a2>
				{
					CC_GlobalState->faultDetected = true;
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
					CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <state_driving_iterate+0x5bc>)
 8001c90:	681c      	ldr	r4, [r3, #0]
 8001c92:	f001 fce7 	bl	8003664 <HAL_GetTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	62a3      	str	r3, [r4, #40]	; 0x28
			for (int i = 0; i < 2; i++) {
 8001c9a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001ca4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	ddc6      	ble.n	8001c3a <state_driving_iterate+0x542>
				}
			}
			for (int i = 0; i < 3; i++) {
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001cb2:	e047      	b.n	8001d44 <state_driving_iterate+0x64c>
 8001cb4:	200049e0 	.word	0x200049e0
 8001cb8:	20004c38 	.word	0x20004c38
 8001cbc:	20004b7c 	.word	0x20004b7c
 8001cc0:	20004ba4 	.word	0x20004ba4
 8001cc4:	20004bcc 	.word	0x20004bcc
 8001cc8:	0800b930 	.word	0x0800b930
 8001ccc:	0800b980 	.word	0x0800b980
 8001cd0:	20000010 	.word	0x20000010
 8001cd4:	0800b99c 	.word	0x0800b99c
				if (CC_GlobalState->accelAdcValues[i] <= CC_GlobalState->accelMin[i] - 100
 8001cd8:	4b85      	ldr	r3, [pc, #532]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8001ce0:	3274      	adds	r2, #116	; 0x74
 8001ce2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ce6:	4b82      	ldr	r3, [pc, #520]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cee:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	440b      	add	r3, r1
 8001cf6:	889b      	ldrh	r3, [r3, #4]
 8001cf8:	3b64      	subs	r3, #100	; 0x64
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d912      	bls.n	8001d24 <state_driving_iterate+0x62c>
						|| CC_GlobalState->accelAdcValues[i] >= CC_GlobalState->accelMax[i] + 100)
 8001cfe:	4b7c      	ldr	r3, [pc, #496]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8001d06:	3274      	adds	r2, #116	; 0x74
 8001d08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d0c:	4b78      	ldr	r3, [pc, #480]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d14:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	440b      	add	r3, r1
 8001d1c:	885b      	ldrh	r3, [r3, #2]
 8001d1e:	3364      	adds	r3, #100	; 0x64
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d30a      	bcc.n	8001d3a <state_driving_iterate+0x642>
				{
					CC_GlobalState->faultDetected = true;
 8001d24:	4b72      	ldr	r3, [pc, #456]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
					CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001d2e:	4b70      	ldr	r3, [pc, #448]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d30:	681c      	ldr	r4, [r3, #0]
 8001d32:	f001 fc97 	bl	8003664 <HAL_GetTick>
 8001d36:	4603      	mov	r3, r0
 8001d38:	62a3      	str	r3, [r4, #40]	; 0x28
			for (int i = 0; i < 3; i++) {
 8001d3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001d44:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	ddc5      	ble.n	8001cd8 <state_driving_iterate+0x5e0>
				}
			}
		}

		/* Brake Travel Record & Sum 10 Values */
		for (int i=0; i < 10; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001d52:	e09f      	b.n	8001e94 <state_driving_iterate+0x79c>
		{
			if (i == 9)
 8001d54:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	d13e      	bne.n	8001dda <state_driving_iterate+0x6e2>
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[0];
 8001d5c:	4b64      	ldr	r3, [pc, #400]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	b289      	uxth	r1, r1
 8001d68:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d6c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	460a      	mov	r2, r1
 8001d76:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[1];
 8001d78:	4b5d      	ldr	r3, [pc, #372]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b291      	uxth	r1, r2
 8001d84:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001d88:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001d8c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->accelAdcValues[0];
 8001d90:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b56      	ldr	r3, [pc, #344]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d2 11d0 	ldr.w	r1, [r2, #464]	; 0x1d0
 8001d9c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001da0:	f502 728d 	add.w	r2, r2, #282	; 0x11a
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[1];
 8001da8:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d2 11d4 	ldr.w	r1, [r2, #468]	; 0x1d4
 8001db4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001db8:	f502 7292 	add.w	r2, r2, #292	; 0x124
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[2];
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8d2 11d8 	ldr.w	r1, [r2, #472]	; 0x1d8
 8001dcc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001dd0:	f502 7297 	add.w	r2, r2, #302	; 0x12e
 8001dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001dd8:	e057      	b.n	8001e8a <state_driving_iterate+0x792>
			}
			else
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->rollingBrakeValues[i+1];
 8001dda:	4b45      	ldr	r3, [pc, #276]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001ddc:	6819      	ldr	r1, [r3, #0]
 8001dde:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	440b      	add	r3, r1
 8001df0:	8899      	ldrh	r1, [r3, #4]
 8001df2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001df6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	460a      	mov	r2, r1
 8001e00:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->secondaryRollingBrakeValues[i+1];
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f501 7108 	add.w	r1, r1, #544	; 0x220
 8001e14:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001e18:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001e1c:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001e20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->rollingAccelValues[i+1];
 8001e24:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001e2c:	1c59      	adds	r1, r3, #1
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f501 718d 	add.w	r1, r1, #282	; 0x11a
 8001e36:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001e3a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001e3e:	f502 728d 	add.w	r2, r2, #282	; 0x11a
 8001e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->secondaryRollingAccelValues[i+1];
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001e4e:	1c59      	adds	r1, r3, #1
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f501 7192 	add.w	r1, r1, #292	; 0x124
 8001e58:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001e5c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001e60:	f502 7292 	add.w	r2, r2, #292	; 0x124
 8001e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->tertiaryRollingAccelValues[i+1];
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001e70:	1c59      	adds	r1, r3, #1
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f501 7197 	add.w	r1, r1, #302	; 0x12e
 8001e7a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001e7e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001e82:	f502 7297 	add.w	r2, r2, #302	; 0x12e
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i=0; i < 10; i++)
 8001e8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001e94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	f77f af5b 	ble.w	8001d54 <state_driving_iterate+0x65c>
			}
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <state_driving_iterate+0x7f8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 fda2 	bl	80079f0 <osSemaphoreRelease>
	}

	uint32_t brake_one_sum = 0; uint32_t brake_one_avg = 0;uint32_t brake_two_sum = 0;uint32_t brake_two_avg = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	uint32_t accel_one_sum = 0; uint32_t accel_one_avg = 0; uint32_t accel_two_avg = 0; uint32_t accel_three_sum = 0; uint32_t accel_three_avg = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint32_t accel_two_sum = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	for (int i=0; i < 10; i++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001eee:	e04a      	b.n	8001f86 <state_driving_iterate+0x88e>
 8001ef0:	200049e0 	.word	0x200049e0
	{
		brake_one_sum += CC_GlobalState->rollingBrakeValues[i];
 8001ef4:	4bc4      	ldr	r3, [pc, #784]	; (8002208 <state_driving_iterate+0xb10>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001efc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	889b      	ldrh	r3, [r3, #4]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		brake_two_sum += CC_GlobalState->secondaryRollingBrakeValues[i];
 8001f12:	4bbd      	ldr	r3, [pc, #756]	; (8002208 <state_driving_iterate+0xb10>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f1a:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001f1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f22:	461a      	mov	r2, r3
 8001f24:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f28:	4413      	add	r3, r2
 8001f2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
		accel_one_sum += CC_GlobalState->rollingAccelValues[i];
 8001f2e:	4bb6      	ldr	r3, [pc, #728]	; (8002208 <state_driving_iterate+0xb10>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f36:	f502 728d 	add.w	r2, r2, #282	; 0x11a
 8001f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001f42:	4413      	add	r3, r2
 8001f44:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		accel_two_sum += CC_GlobalState->secondaryRollingAccelValues[i];
 8001f48:	4baf      	ldr	r3, [pc, #700]	; (8002208 <state_driving_iterate+0xb10>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f50:	f502 7292 	add.w	r2, r2, #292	; 0x124
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		accel_three_sum += CC_GlobalState->tertiaryRollingAccelValues[i];
 8001f62:	4ba9      	ldr	r3, [pc, #676]	; (8002208 <state_driving_iterate+0xb10>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f6a:	f502 7297 	add.w	r2, r2, #302	; 0x12e
 8001f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f72:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001f76:	4413      	add	r3, r2
 8001f78:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	for (int i=0; i < 10; i++)
 8001f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f80:	3301      	adds	r3, #1
 8001f82:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f8a:	2b09      	cmp	r3, #9
 8001f8c:	ddb2      	ble.n	8001ef4 <state_driving_iterate+0x7fc>
	}

	/* Average 10 Latest Brake Travel Values */
	brake_one_avg = brake_one_sum / 10;
 8001f8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f92:	4a9e      	ldr	r2, [pc, #632]	; (800220c <state_driving_iterate+0xb14>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	brake_two_avg = brake_two_sum / 10;
 8001f9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001fa2:	4a9a      	ldr	r2, [pc, #616]	; (800220c <state_driving_iterate+0xb14>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	accel_one_avg = accel_one_sum / 10;
 8001fae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001fb2:	4a96      	ldr	r2, [pc, #600]	; (800220c <state_driving_iterate+0xb14>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	accel_two_avg = accel_two_sum / 10;
 8001fbe:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fc2:	4a92      	ldr	r2, [pc, #584]	; (800220c <state_driving_iterate+0xb14>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	08db      	lsrs	r3, r3, #3
 8001fca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	accel_three_avg = accel_three_sum / 10;
 8001fce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001fd2:	4a8e      	ldr	r2, [pc, #568]	; (800220c <state_driving_iterate+0xb14>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001fde:	4b8a      	ldr	r3, [pc, #552]	; (8002208 <state_driving_iterate+0xb10>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f005 fc9b 	bl	8007924 <osSemaphoreAcquire>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 81c5 	bne.w	8002380 <state_driving_iterate+0xc88>
	{
		if(!CC_GlobalState->faultDetected)
 8001ff6:	4b84      	ldr	r3, [pc, #528]	; (8002208 <state_driving_iterate+0xb10>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80be 	beq.w	8002186 <state_driving_iterate+0xa8e>
		{
			/* Check for New Min/Max Brake Values */
			if(CC_GlobalState->rollingBrakeValues[0] > 0 && CC_GlobalState->secondaryRollingBrakeValues[0] > 0)
 800200a:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <state_driving_iterate+0xb10>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d045      	beq.n	80020a2 <state_driving_iterate+0x9aa>
 8002016:	4b7c      	ldr	r3, [pc, #496]	; (8002208 <state_driving_iterate+0xb10>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	; 0x440
 800201e:	2b00      	cmp	r3, #0
 8002020:	d03f      	beq.n	80020a2 <state_driving_iterate+0x9aa>
			{
				if(brake_one_avg <= CC_GlobalState->brakeMin[0])
 8002022:	4b79      	ldr	r3, [pc, #484]	; (8002208 <state_driving_iterate+0xb10>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800202a:	461a      	mov	r2, r3
 800202c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002030:	4293      	cmp	r3, r2
 8002032:	d806      	bhi.n	8002042 <state_driving_iterate+0x94a>
				{
					CC_GlobalState->brakeMin[0] = brake_one_avg;
 8002034:	4b74      	ldr	r3, [pc, #464]	; (8002208 <state_driving_iterate+0xb10>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800203c:	b292      	uxth	r2, r2
 800203e:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
				}
				if(brake_one_avg >= CC_GlobalState->brakeMax[0])
 8002042:	4b71      	ldr	r3, [pc, #452]	; (8002208 <state_driving_iterate+0xb10>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800204a:	461a      	mov	r2, r3
 800204c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002050:	4293      	cmp	r3, r2
 8002052:	d306      	bcc.n	8002062 <state_driving_iterate+0x96a>
				{
					CC_GlobalState->brakeMax[0] = brake_one_avg;
 8002054:	4b6c      	ldr	r3, [pc, #432]	; (8002208 <state_driving_iterate+0xb10>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800205c:	b292      	uxth	r2, r2
 800205e:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
				}
				if(brake_two_avg <= CC_GlobalState->brakeMin[1])
 8002062:	4b69      	ldr	r3, [pc, #420]	; (8002208 <state_driving_iterate+0xb10>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 800206a:	461a      	mov	r2, r3
 800206c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002070:	4293      	cmp	r3, r2
 8002072:	d806      	bhi.n	8002082 <state_driving_iterate+0x98a>
				{
					CC_GlobalState->brakeMin[1] = brake_two_avg;
 8002074:	4b64      	ldr	r3, [pc, #400]	; (8002208 <state_driving_iterate+0xb10>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800207c:	b292      	uxth	r2, r2
 800207e:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
				}
				if(brake_two_avg >= CC_GlobalState->brakeMax[1])
 8002082:	4b61      	ldr	r3, [pc, #388]	; (8002208 <state_driving_iterate+0xb10>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800208a:	461a      	mov	r2, r3
 800208c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002090:	4293      	cmp	r3, r2
 8002092:	d306      	bcc.n	80020a2 <state_driving_iterate+0x9aa>
				{
					CC_GlobalState->brakeMax[1] = brake_two_avg;
 8002094:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <state_driving_iterate+0xb10>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800209c:	b292      	uxth	r2, r2
 800209e:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
				}
			}
			if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->secondaryRollingAccelValues[0] > 0 && CC_GlobalState->tertiaryRollingAccelValues[0] > 0)
 80020a2:	4b59      	ldr	r3, [pc, #356]	; (8002208 <state_driving_iterate+0xb10>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06b      	beq.n	8002186 <state_driving_iterate+0xa8e>
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <state_driving_iterate+0xb10>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d065      	beq.n	8002186 <state_driving_iterate+0xa8e>
 80020ba:	4b53      	ldr	r3, [pc, #332]	; (8002208 <state_driving_iterate+0xb10>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d05f      	beq.n	8002186 <state_driving_iterate+0xa8e>
			{
				if(accel_one_avg <= CC_GlobalState->accelMin[0])
 80020c6:	4b50      	ldr	r3, [pc, #320]	; (8002208 <state_driving_iterate+0xb10>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8b3 345c 	ldrh.w	r3, [r3, #1116]	; 0x45c
 80020ce:	461a      	mov	r2, r3
 80020d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d806      	bhi.n	80020e6 <state_driving_iterate+0x9ee>
				{
					CC_GlobalState->accelMin[0] = accel_one_avg;
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <state_driving_iterate+0xb10>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80020e0:	b292      	uxth	r2, r2
 80020e2:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
				}
				if(accel_one_avg >= CC_GlobalState->accelMax[0])
 80020e6:	4b48      	ldr	r3, [pc, #288]	; (8002208 <state_driving_iterate+0xb10>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3462 	ldrh.w	r3, [r3, #1122]	; 0x462
 80020ee:	461a      	mov	r2, r3
 80020f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d306      	bcc.n	8002106 <state_driving_iterate+0xa0e>
				{
					CC_GlobalState->accelMax[0] = accel_one_avg;
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <state_driving_iterate+0xb10>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002100:	b292      	uxth	r2, r2
 8002102:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
				}
				if(accel_two_avg <= CC_GlobalState->accelMin[1])
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <state_driving_iterate+0xb10>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 800210e:	461a      	mov	r2, r3
 8002110:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002114:	4293      	cmp	r3, r2
 8002116:	d806      	bhi.n	8002126 <state_driving_iterate+0xa2e>
				{
					CC_GlobalState->accelMin[1] = accel_two_avg;
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <state_driving_iterate+0xb10>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002120:	b292      	uxth	r2, r2
 8002122:	f8a3 245e 	strh.w	r2, [r3, #1118]	; 0x45e
				}
				if(accel_two_avg >= CC_GlobalState->accelMax[1])
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <state_driving_iterate+0xb10>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 800212e:	461a      	mov	r2, r3
 8002130:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002134:	4293      	cmp	r3, r2
 8002136:	d306      	bcc.n	8002146 <state_driving_iterate+0xa4e>
				{
					CC_GlobalState->accelMax[1] = accel_two_avg;
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <state_driving_iterate+0xb10>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002140:	b292      	uxth	r2, r2
 8002142:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
				}
				if(accel_three_avg <= CC_GlobalState->accelMin[2])
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <state_driving_iterate+0xb10>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3460 	ldrh.w	r3, [r3, #1120]	; 0x460
 800214e:	461a      	mov	r2, r3
 8002150:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002154:	4293      	cmp	r3, r2
 8002156:	d806      	bhi.n	8002166 <state_driving_iterate+0xa6e>
				{
					CC_GlobalState->accelMin[2] = accel_three_avg;
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <state_driving_iterate+0xb10>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8002160:	b292      	uxth	r2, r2
 8002162:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
				}
				if(accel_three_avg >= CC_GlobalState->accelMax[2])
 8002166:	4b28      	ldr	r3, [pc, #160]	; (8002208 <state_driving_iterate+0xb10>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3466 	ldrh.w	r3, [r3, #1126]	; 0x466
 800216e:	461a      	mov	r2, r3
 8002170:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002174:	4293      	cmp	r3, r2
 8002176:	d306      	bcc.n	8002186 <state_driving_iterate+0xa8e>
				{
					CC_GlobalState->accelMax[2] = accel_three_avg;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <state_driving_iterate+0xb10>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8002180:	b292      	uxth	r2, r2
 8002182:	f8a3 2466 	strh.w	r2, [r3, #1126]	; 0x466
				}
			}
		}

		/* Map Travel to Pedal Pos */
		brake_travel_one = map(brake_one_avg, CC_GlobalState->brakeMin[0]+2, CC_GlobalState->brakeMax[0]-5, 0, 100);
 8002186:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <state_driving_iterate+0xb10>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8002192:	1c99      	adds	r1, r3, #2
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <state_driving_iterate+0xb10>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800219c:	1f5a      	subs	r2, r3, #5
 800219e:	2364      	movs	r3, #100	; 0x64
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2300      	movs	r3, #0
 80021a4:	f7fe fd3a 	bl	8000c1c <map>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		brake_travel_two = map(brake_two_avg, CC_GlobalState->brakeMin[1]+2, CC_GlobalState->brakeMax[1]-5, 0, 100);
 80021ae:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <state_driving_iterate+0xb10>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 80021ba:	1c99      	adds	r1, r3, #2
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <state_driving_iterate+0xb10>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80021c4:	1f5a      	subs	r2, r3, #5
 80021c6:	2364      	movs	r3, #100	; 0x64
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2300      	movs	r3, #0
 80021cc:	f7fe fd26 	bl	8000c1c <map>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134

		accel_travel_one = map(accel_one_avg, CC_GlobalState->accelMin[0], CC_GlobalState->accelMax[0]-5, 0, 100);
 80021d6:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <state_driving_iterate+0xb10>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 345c 	ldrh.w	r3, [r3, #1116]	; 0x45c
 80021e2:	4619      	mov	r1, r3
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <state_driving_iterate+0xb10>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8b3 3462 	ldrh.w	r3, [r3, #1122]	; 0x462
 80021ec:	1f5a      	subs	r2, r3, #5
 80021ee:	2364      	movs	r3, #100	; 0x64
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	f7fe fd12 	bl	8000c1c <map>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
		accel_travel_two = map(accel_two_avg, CC_GlobalState->accelMin[1], CC_GlobalState->accelMax[1]-5, 0, 100);
 80021fe:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002202:	4b01      	ldr	r3, [pc, #4]	; (8002208 <state_driving_iterate+0xb10>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	e003      	b.n	8002210 <state_driving_iterate+0xb18>
 8002208:	200049e0 	.word	0x200049e0
 800220c:	cccccccd 	.word	0xcccccccd
 8002210:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 8002214:	4619      	mov	r1, r3
 8002216:	4bb5      	ldr	r3, [pc, #724]	; (80024ec <state_driving_iterate+0xdf4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 800221e:	1f5a      	subs	r2, r3, #5
 8002220:	2364      	movs	r3, #100	; 0x64
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2300      	movs	r3, #0
 8002226:	f7fe fcf9 	bl	8000c1c <map>
 800222a:	4603      	mov	r3, r0
 800222c:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
		accel_travel_three = map(accel_three_avg, CC_GlobalState->accelMin[2], CC_GlobalState->accelMax[2]-5, 0, 100);
 8002230:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002234:	4bad      	ldr	r3, [pc, #692]	; (80024ec <state_driving_iterate+0xdf4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3460 	ldrh.w	r3, [r3, #1120]	; 0x460
 800223c:	4619      	mov	r1, r3
 800223e:	4bab      	ldr	r3, [pc, #684]	; (80024ec <state_driving_iterate+0xdf4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b3 3466 	ldrh.w	r3, [r3, #1126]	; 0x466
 8002246:	1f5a      	subs	r2, r3, #5
 8002248:	2364      	movs	r3, #100	; 0x64
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2300      	movs	r3, #0
 800224e:	f7fe fce5 	bl	8000c1c <map>
 8002252:	4603      	mov	r3, r0
 8002254:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e

		/* Ensure Brake & Accel Pots Synced */
		if(!CC_GlobalState->faultDetected
 8002258:	4ba4      	ldr	r3, [pc, #656]	; (80024ec <state_driving_iterate+0xdf4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8002260:	f083 0301 	eor.w	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d018      	beq.n	800229c <state_driving_iterate+0xba4>
				&& (brake_travel_one >= brake_travel_two+10
 800226a:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800226e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002272:	330a      	adds	r3, #10
 8002274:	429a      	cmp	r2, r3
 8002276:	da06      	bge.n	8002286 <state_driving_iterate+0xb8e>
						|| brake_travel_one <= brake_travel_two-10))
 8002278:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800227c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002280:	3b0a      	subs	r3, #10
 8002282:	429a      	cmp	r2, r3
 8002284:	dc0a      	bgt.n	800229c <state_driving_iterate+0xba4>
		{
			CC_GlobalState->faultDetected = true;
 8002286:	4b99      	ldr	r3, [pc, #612]	; (80024ec <state_driving_iterate+0xdf4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 8002290:	4b96      	ldr	r3, [pc, #600]	; (80024ec <state_driving_iterate+0xdf4>)
 8002292:	681c      	ldr	r4, [r3, #0]
 8002294:	f001 f9e6 	bl	8003664 <HAL_GetTick>
 8002298:	4603      	mov	r3, r0
 800229a:	62a3      	str	r3, [r4, #40]	; 0x28
		}
		if(!CC_GlobalState->faultDetected
 800229c:	4b93      	ldr	r3, [pc, #588]	; (80024ec <state_driving_iterate+0xdf4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 80022a4:	f083 0301 	eor.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d034      	beq.n	8002318 <state_driving_iterate+0xc20>
				&& (accel_travel_one >= accel_travel_two+10
 80022ae:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80022b2:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80022b6:	330a      	adds	r3, #10
 80022b8:	429a      	cmp	r2, r3
 80022ba:	da22      	bge.n	8002302 <state_driving_iterate+0xc0a>
						|| accel_travel_one <= accel_travel_two-10
 80022bc:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80022c0:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80022c4:	3b0a      	subs	r3, #10
 80022c6:	429a      	cmp	r2, r3
 80022c8:	dd1b      	ble.n	8002302 <state_driving_iterate+0xc0a>
						|| accel_travel_one >= accel_travel_three+10
 80022ca:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80022ce:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80022d2:	330a      	adds	r3, #10
 80022d4:	429a      	cmp	r2, r3
 80022d6:	da14      	bge.n	8002302 <state_driving_iterate+0xc0a>
						|| accel_travel_one <= accel_travel_three-10
 80022d8:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80022dc:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80022e0:	3b0a      	subs	r3, #10
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dd0d      	ble.n	8002302 <state_driving_iterate+0xc0a>
						|| accel_travel_two >= accel_travel_three+10
 80022e6:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 80022ea:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80022ee:	330a      	adds	r3, #10
 80022f0:	429a      	cmp	r2, r3
 80022f2:	da06      	bge.n	8002302 <state_driving_iterate+0xc0a>
						|| accel_travel_two <= accel_travel_three-10))
 80022f4:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 80022f8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80022fc:	3b0a      	subs	r3, #10
 80022fe:	429a      	cmp	r2, r3
 8002300:	dc0a      	bgt.n	8002318 <state_driving_iterate+0xc20>
		{
			CC_GlobalState->faultDetected = true;
 8002302:	4b7a      	ldr	r3, [pc, #488]	; (80024ec <state_driving_iterate+0xdf4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 800230c:	4b77      	ldr	r3, [pc, #476]	; (80024ec <state_driving_iterate+0xdf4>)
 800230e:	681c      	ldr	r4, [r3, #0]
 8002310:	f001 f9a8 	bl	8003664 <HAL_GetTick>
 8002314:	4603      	mov	r3, r0
 8002316:	62a3      	str	r3, [r4, #40]	; 0x28
		}

		/* Average 2 Brake Travel Positions */
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8002318:	4b74      	ldr	r3, [pc, #464]	; (80024ec <state_driving_iterate+0xdf4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8002320:	2b00      	cmp	r3, #0
 8002322:	d026      	beq.n	8002372 <state_driving_iterate+0xc7a>
 8002324:	4b71      	ldr	r3, [pc, #452]	; (80024ec <state_driving_iterate+0xdf4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <state_driving_iterate+0xc7a>
		{
			CC_GlobalState->brakeTravel = (brake_travel_one+brake_travel_two)/2;
 8002330:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8002334:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002338:	4413      	add	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	da00      	bge.n	8002340 <state_driving_iterate+0xc48>
 800233e:	3301      	adds	r3, #1
 8002340:	105b      	asrs	r3, r3, #1
 8002342:	461a      	mov	r2, r3
 8002344:	4b69      	ldr	r3, [pc, #420]	; (80024ec <state_driving_iterate+0xdf4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
			CC_GlobalState->accelTravel = (accel_travel_one+accel_travel_two+accel_travel_three)/3;
 800234e:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8002352:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8002356:	441a      	add	r2, r3
 8002358:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800235c:	4413      	add	r3, r2
 800235e:	4a64      	ldr	r2, [pc, #400]	; (80024f0 <state_driving_iterate+0xdf8>)
 8002360:	fb82 1203 	smull	r1, r2, r2, r3
 8002364:	17db      	asrs	r3, r3, #31
 8002366:	1ad2      	subs	r2, r2, r3
 8002368:	4b60      	ldr	r3, [pc, #384]	; (80024ec <state_driving_iterate+0xdf4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
		}

		osSemaphoreRelease(CC_GlobalState->sem);
 8002372:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <state_driving_iterate+0xdf4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800237a:	4618      	mov	r0, r3
 800237c:	f005 fb38 	bl	80079f0 <osSemaphoreRelease>
	}

	/* Echo Pedal Positions */
	if(!CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug && CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8002380:	4b5a      	ldr	r3, [pc, #360]	; (80024ec <state_driving_iterate+0xdf4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8002388:	f083 0301 	eor.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02b      	beq.n	80023ea <state_driving_iterate+0xcf2>
 8002392:	4b56      	ldr	r3, [pc, #344]	; (80024ec <state_driving_iterate+0xdf4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	7e5b      	ldrb	r3, [r3, #25]
 8002398:	f083 0301 	eor.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d023      	beq.n	80023ea <state_driving_iterate+0xcf2>
 80023a2:	4b52      	ldr	r3, [pc, #328]	; (80024ec <state_driving_iterate+0xdf4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01d      	beq.n	80023ea <state_driving_iterate+0xcf2>
 80023ae:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <state_driving_iterate+0xdf4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d017      	beq.n	80023ea <state_driving_iterate+0xcf2>
	{
		len = sprintf(x, "Pedal Positions: %i %i\r\n", CC_GlobalState->brakeTravel, CC_GlobalState->accelTravel);
 80023ba:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <state_driving_iterate+0xdf4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f893 34e1 	ldrb.w	r3, [r3, #1249]	; 0x4e1
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b49      	ldr	r3, [pc, #292]	; (80024ec <state_driving_iterate+0xdf4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f893 34e0 	ldrb.w	r3, [r3, #1248]	; 0x4e0
 80023cc:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 80023d0:	4948      	ldr	r1, [pc, #288]	; (80024f4 <state_driving_iterate+0xdfc>)
 80023d2:	f008 fec1 	bl	800b158 <siprintf>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		CC_LogInfo(x, len);
 80023dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023e0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 feb5 	bl	8003154 <CC_LogInfo>

	/*
	 * If Throttle and Brake Implausibility State Clock < 100ms
	 * Suspend Tractive System Operations
	 */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug && CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 100)
 80023ea:	4b40      	ldr	r3, [pc, #256]	; (80024ec <state_driving_iterate+0xdf4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01f      	beq.n	8002436 <state_driving_iterate+0xd3e>
 80023f6:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <state_driving_iterate+0xdf4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	7e5b      	ldrb	r3, [r3, #25]
 80023fc:	f083 0301 	eor.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d017      	beq.n	8002436 <state_driving_iterate+0xd3e>
 8002406:	4b39      	ldr	r3, [pc, #228]	; (80024ec <state_driving_iterate+0xdf4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f893 34e2 	ldrb.w	r3, [r3, #1250]	; 0x4e2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d011      	beq.n	8002436 <state_driving_iterate+0xd3e>
 8002412:	f001 f927 	bl	8003664 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	4b34      	ldr	r3, [pc, #208]	; (80024ec <state_driving_iterate+0xdf4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b63      	cmp	r3, #99	; 0x63
 8002422:	d908      	bls.n	8002436 <state_driving_iterate+0xd3e>
	{
		CC_GlobalState->tractiveActive = false;
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <state_driving_iterate+0xdf4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
		CC_LogInfo("Disabling Tractive Operations\r\n", strlen("Disabling Tractive Operations\r\n"));
 800242e:	211f      	movs	r1, #31
 8002430:	4831      	ldr	r0, [pc, #196]	; (80024f8 <state_driving_iterate+0xe00>)
 8002432:	f000 fe8f 	bl	8003154 <CC_LogInfo>
	 */

	/*
	 * Send Desired Accel to Inverters
	 */
	if(CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->readyToDriveTicks) % 100 == 0)
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <state_driving_iterate+0xdf4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f893 34e2 	ldrb.w	r3, [r3, #1250]	; 0x4e2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d032      	beq.n	80024a8 <state_driving_iterate+0xdb0>
 8002442:	f001 f90f 	bl	8003664 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <state_driving_iterate+0xdf4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	1ad2      	subs	r2, r2, r3
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <state_driving_iterate+0xe04>)
 8002452:	fba3 1302 	umull	r1, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2164      	movs	r1, #100	; 0x64
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d121      	bne.n	80024a8 <state_driving_iterate+0xdb0>
	{
		/* Broadcast Motor RPM Request on CAN1 */
		CC_RequestRPM_t requestRPM = Compose_CC_RequestRPM(INVERTER_1_NODE_ID);
 8002464:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002468:	2164      	movs	r1, #100	; 0x64
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f966 	bl	800073c <Compose_CC_RequestRPM>
		CAN_TxHeaderTypeDef header =
 8002470:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	615a      	str	r2, [r3, #20]
		{
				.StdId = requestRPM.id,
 8002482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
		CAN_TxHeaderTypeDef header =
 8002486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800248a:	2308      	movs	r3, #8
 800248c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				.IDE = CAN_ID_STD,
				.RTR = CAN_RTR_DATA,
				.DLC = 8,
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&CAN_1, &header, requestRPM.data, &CC_GlobalState->CAN1_TxMailbox);
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <state_driving_iterate+0xdf4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024a0:	4603      	mov	r3, r0
 80024a2:	4817      	ldr	r0, [pc, #92]	; (8002500 <state_driving_iterate+0xe08>)
 80024a4:	f001 fffa 	bl	800449c <HAL_CAN_AddTxMessage>

	/*
	 * If Throttle or Brake Implausibility State Clock > 1000ms
	 * Engage Soft Shutdown (Reset to Idle)
	 */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug && !CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 1000)
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <state_driving_iterate+0xdf4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d065      	beq.n	8002580 <state_driving_iterate+0xe88>
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <state_driving_iterate+0xdf4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	7e5b      	ldrb	r3, [r3, #25]
 80024ba:	f083 0301 	eor.w	r3, r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05d      	beq.n	8002580 <state_driving_iterate+0xe88>
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <state_driving_iterate+0xdf4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f893 34e2 	ldrb.w	r3, [r3, #1250]	; 0x4e2
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d054      	beq.n	8002580 <state_driving_iterate+0xe88>
 80024d6:	f001 f8c5 	bl	8003664 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <state_driving_iterate+0xdf4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e8:	d34a      	bcc.n	8002580 <state_driving_iterate+0xe88>
 80024ea:	e00b      	b.n	8002504 <state_driving_iterate+0xe0c>
 80024ec:	200049e0 	.word	0x200049e0
 80024f0:	55555556 	.word	0x55555556
 80024f4:	0800b9b4 	.word	0x0800b9b4
 80024f8:	0800b9d0 	.word	0x0800b9d0
 80024fc:	51eb851f 	.word	0x51eb851f
 8002500:	20004bcc 	.word	0x20004bcc
	{
		/* Broadcast Soft Shutdown on all CAN lines */
		CC_SoftShutdown_t softShutdown = Compose_CC_SoftShutdown();
 8002504:	f7fe f906 	bl	8000714 <Compose_CC_SoftShutdown>
 8002508:	4603      	mov	r3, r0
 800250a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		CAN_TxHeaderTypeDef header =
 800250e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	615a      	str	r2, [r3, #20]
		{
				.ExtId = softShutdown.id,
 8002520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
		CAN_TxHeaderTypeDef header =
 8002524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002528:	2304      	movs	r3, #4
 800252a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800252e:	2301      	movs	r3, #1
 8002530:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8002534:	230f      	movs	r3, #15
 8002536:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <state_driving_iterate+0xe94>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002542:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8002546:	4812      	ldr	r0, [pc, #72]	; (8002590 <state_driving_iterate+0xe98>)
 8002548:	f001 ffa8 	bl	800449c <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <state_driving_iterate+0xe94>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3308      	adds	r3, #8
 8002552:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002556:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800255a:	480e      	ldr	r0, [pc, #56]	; (8002594 <state_driving_iterate+0xe9c>)
 800255c:	f001 ff9e 	bl	800449c <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <state_driving_iterate+0xe94>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3310      	adds	r3, #16
 8002566:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800256a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800256e:	480a      	ldr	r0, [pc, #40]	; (8002598 <state_driving_iterate+0xea0>)
 8002570:	f001 ff94 	bl	800449c <HAL_CAN_AddTxMessage>
		fsm_changeState(fsm, &idleState, "Soft Shutdown Requested (CAN)");
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <state_driving_iterate+0xea4>)
 8002578:	4909      	ldr	r1, [pc, #36]	; (80025a0 <state_driving_iterate+0xea8>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	f7fe f9ca 	bl	8000914 <fsm_changeState>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 8002580:	bf00      	nop
 8002582:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8002586:	46bd      	mov	sp, r7
 8002588:	bd90      	pop	{r4, r7, pc}
 800258a:	bf00      	nop
 800258c:	200049e0 	.word	0x200049e0
 8002590:	20004bcc 	.word	0x20004bcc
 8002594:	20004ba4 	.word	0x20004ba4
 8002598:	20004b7c 	.word	0x20004b7c
 800259c:	0800b9f0 	.word	0x0800b9f0
 80025a0:	20000010 	.word	0x20000010

080025a4 <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 80025ac:	bf00      	nop
}
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <MX_ADC1_Init>:
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	463b      	mov	r3, r7
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025cc:	4a2f      	ldr	r2, [pc, #188]	; (800268c <MX_ADC1_Init+0xd4>)
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025de:	2201      	movs	r2, #1
 80025e0:	611a      	str	r2, [r3, #16]
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	619a      	str	r2, [r3, #24]
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025f8:	4a25      	ldr	r2, [pc, #148]	; (8002690 <MX_ADC1_Init+0xd8>)
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <MX_ADC1_Init+0xd0>)
 8002604:	2203      	movs	r2, #3
 8002606:	61da      	str	r2, [r3, #28]
 8002608:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <MX_ADC1_Init+0xd0>)
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <MX_ADC1_Init+0xd0>)
 8002612:	2201      	movs	r2, #1
 8002614:	615a      	str	r2, [r3, #20]
 8002616:	481c      	ldr	r0, [pc, #112]	; (8002688 <MX_ADC1_Init+0xd0>)
 8002618:	f001 f830 	bl	800367c <HAL_ADC_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_ADC1_Init+0x6e>
 8002622:	f000 fe31 	bl	8003288 <Error_Handler>
 8002626:	2304      	movs	r3, #4
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	2301      	movs	r3, #1
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	2307      	movs	r3, #7
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	463b      	mov	r3, r7
 8002634:	4619      	mov	r1, r3
 8002636:	4814      	ldr	r0, [pc, #80]	; (8002688 <MX_ADC1_Init+0xd0>)
 8002638:	f001 fa3e 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_ADC1_Init+0x8e>
 8002642:	f000 fe21 	bl	8003288 <Error_Handler>
 8002646:	2306      	movs	r3, #6
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	2302      	movs	r3, #2
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	463b      	mov	r3, r7
 8002650:	4619      	mov	r1, r3
 8002652:	480d      	ldr	r0, [pc, #52]	; (8002688 <MX_ADC1_Init+0xd0>)
 8002654:	f001 fa30 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_ADC1_Init+0xaa>
 800265e:	f000 fe13 	bl	8003288 <Error_Handler>
 8002662:	230e      	movs	r3, #14
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	2303      	movs	r3, #3
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	463b      	mov	r3, r7
 800266c:	4619      	mov	r1, r3
 800266e:	4806      	ldr	r0, [pc, #24]	; (8002688 <MX_ADC1_Init+0xd0>)
 8002670:	f001 fa22 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_ADC1_Init+0xc6>
 800267a:	f000 fe05 	bl	8003288 <Error_Handler>
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20004a2c 	.word	0x20004a2c
 800268c:	40012000 	.word	0x40012000
 8002690:	0f000001 	.word	0x0f000001

08002694 <MX_ADC2_Init>:
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	463b      	mov	r3, r7
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	4b28      	ldr	r3, [pc, #160]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026a8:	4a28      	ldr	r2, [pc, #160]	; (800274c <MX_ADC2_Init+0xb8>)
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	4b26      	ldr	r3, [pc, #152]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	4b25      	ldr	r3, [pc, #148]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	619a      	str	r2, [r3, #24]
 80026c4:	4b20      	ldr	r3, [pc, #128]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2020 	strb.w	r2, [r3, #32]
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026d4:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <MX_ADC2_Init+0xbc>)
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026e0:	2202      	movs	r2, #2
 80026e2:	61da      	str	r2, [r3, #28]
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	615a      	str	r2, [r3, #20]
 80026f2:	4815      	ldr	r0, [pc, #84]	; (8002748 <MX_ADC2_Init+0xb4>)
 80026f4:	f000 ffc2 	bl	800367c <HAL_ADC_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_ADC2_Init+0x6e>
 80026fe:	f000 fdc3 	bl	8003288 <Error_Handler>
 8002702:	2303      	movs	r3, #3
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	2301      	movs	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	2307      	movs	r3, #7
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	463b      	mov	r3, r7
 8002710:	4619      	mov	r1, r3
 8002712:	480d      	ldr	r0, [pc, #52]	; (8002748 <MX_ADC2_Init+0xb4>)
 8002714:	f001 f9d0 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_ADC2_Init+0x8e>
 800271e:	f000 fdb3 	bl	8003288 <Error_Handler>
 8002722:	2305      	movs	r3, #5
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	2302      	movs	r3, #2
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	463b      	mov	r3, r7
 800272c:	4619      	mov	r1, r3
 800272e:	4806      	ldr	r0, [pc, #24]	; (8002748 <MX_ADC2_Init+0xb4>)
 8002730:	f001 f9c2 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_ADC2_Init+0xaa>
 800273a:	f000 fda5 	bl	8003288 <Error_Handler>
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200049e4 	.word	0x200049e4
 800274c:	40012100 	.word	0x40012100
 8002750:	0f000001 	.word	0x0f000001

08002754 <MX_ADC3_Init>:
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	463b      	mov	r3, r7
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <MX_ADC3_Init+0x98>)
 8002768:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <MX_ADC3_Init+0x9c>)
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <MX_ADC3_Init+0x98>)
 800276e:	2200      	movs	r2, #0
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <MX_ADC3_Init+0x98>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <MX_ADC3_Init+0x98>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <MX_ADC3_Init+0x98>)
 8002780:	2201      	movs	r2, #1
 8002782:	619a      	str	r2, [r3, #24]
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <MX_ADC3_Init+0x98>)
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2020 	strb.w	r2, [r3, #32]
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_ADC3_Init+0x98>)
 800278e:	2200      	movs	r2, #0
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MX_ADC3_Init+0x98>)
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <MX_ADC3_Init+0xa0>)
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_ADC3_Init+0x98>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <MX_ADC3_Init+0x98>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	61da      	str	r2, [r3, #28]
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_ADC3_Init+0x98>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_ADC3_Init+0x98>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
 80027b2:	480e      	ldr	r0, [pc, #56]	; (80027ec <MX_ADC3_Init+0x98>)
 80027b4:	f000 ff62 	bl	800367c <HAL_ADC_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_ADC3_Init+0x6e>
 80027be:	f000 fd63 	bl	8003288 <Error_Handler>
 80027c2:	2302      	movs	r3, #2
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	463b      	mov	r3, r7
 80027d0:	4619      	mov	r1, r3
 80027d2:	4806      	ldr	r0, [pc, #24]	; (80027ec <MX_ADC3_Init+0x98>)
 80027d4:	f001 f970 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_ADC3_Init+0x8e>
 80027de:	f000 fd53 	bl	8003288 <Error_Handler>
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20004a74 	.word	0x20004a74
 80027f0:	40012200 	.word	0x40012200
 80027f4:	0f000001 	.word	0x0f000001

080027f8 <HAL_ADC_MspInit>:
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	; 0x38
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a7b      	ldr	r2, [pc, #492]	; (8002a04 <HAL_ADC_MspInit+0x20c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d16c      	bne.n	80028f4 <HAL_ADC_MspInit+0xfc>
 800281a:	4b7b      	ldr	r3, [pc, #492]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4a7a      	ldr	r2, [pc, #488]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002824:	6453      	str	r3, [r2, #68]	; 0x44
 8002826:	4b78      	ldr	r3, [pc, #480]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	623b      	str	r3, [r7, #32]
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a74      	ldr	r2, [pc, #464]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b72      	ldr	r3, [pc, #456]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4b6f      	ldr	r3, [pc, #444]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a6e      	ldr	r2, [pc, #440]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2350      	movs	r3, #80	; 0x50
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
 8002866:	2303      	movs	r3, #3
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
 800286a:	2300      	movs	r3, #0
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002872:	4619      	mov	r1, r3
 8002874:	4865      	ldr	r0, [pc, #404]	; (8002a0c <HAL_ADC_MspInit+0x214>)
 8002876:	f002 fc7f 	bl	8005178 <HAL_GPIO_Init>
 800287a:	2310      	movs	r3, #16
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	2303      	movs	r3, #3
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288a:	4619      	mov	r1, r3
 800288c:	4860      	ldr	r0, [pc, #384]	; (8002a10 <HAL_ADC_MspInit+0x218>)
 800288e:	f002 fc73 	bl	8005178 <HAL_GPIO_Init>
 8002892:	4b60      	ldr	r3, [pc, #384]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 8002894:	4a60      	ldr	r2, [pc, #384]	; (8002a18 <HAL_ADC_MspInit+0x220>)
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	4b5e      	ldr	r3, [pc, #376]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 800289a:	2200      	movs	r2, #0
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	4b5b      	ldr	r3, [pc, #364]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	4b5a      	ldr	r3, [pc, #360]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b0:	611a      	str	r2, [r3, #16]
 80028b2:	4b58      	ldr	r3, [pc, #352]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028b8:	615a      	str	r2, [r3, #20]
 80028ba:	4b56      	ldr	r3, [pc, #344]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028c0:	619a      	str	r2, [r3, #24]
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c8:	61da      	str	r2, [r3, #28]
 80028ca:	4b52      	ldr	r3, [pc, #328]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24
 80028d6:	484f      	ldr	r0, [pc, #316]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028d8:	f002 f8d8 	bl	8004a8c <HAL_DMA_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_ADC_MspInit+0xee>
 80028e2:	f000 fcd1 	bl	8003288 <Error_Handler>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
 80028ec:	4a49      	ldr	r2, [pc, #292]	; (8002a14 <HAL_ADC_MspInit+0x21c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6393      	str	r3, [r2, #56]	; 0x38
 80028f2:	e083      	b.n	80029fc <HAL_ADC_MspInit+0x204>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a48      	ldr	r2, [pc, #288]	; (8002a1c <HAL_ADC_MspInit+0x224>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d155      	bne.n	80029aa <HAL_ADC_MspInit+0x1b2>
 80028fe:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	4a41      	ldr	r2, [pc, #260]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002908:	6453      	str	r3, [r2, #68]	; 0x44
 800290a:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	4b3c      	ldr	r3, [pc, #240]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a3b      	ldr	r2, [pc, #236]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2328      	movs	r3, #40	; 0x28
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	2303      	movs	r3, #3
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
 8002936:	2300      	movs	r3, #0
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293e:	4619      	mov	r1, r3
 8002940:	4832      	ldr	r0, [pc, #200]	; (8002a0c <HAL_ADC_MspInit+0x214>)
 8002942:	f002 fc19 	bl	8005178 <HAL_GPIO_Init>
 8002946:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 8002948:	4a36      	ldr	r2, [pc, #216]	; (8002a24 <HAL_ADC_MspInit+0x22c>)
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 800294e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 8002962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002966:	611a      	str	r2, [r3, #16]
 8002968:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 800296a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800296e:	615a      	str	r2, [r3, #20]
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 8002972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002976:	619a      	str	r2, [r3, #24]
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 800297a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800297e:	61da      	str	r2, [r3, #28]
 8002980:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 8002982:	2200      	movs	r2, #0
 8002984:	621a      	str	r2, [r3, #32]
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 8002988:	2200      	movs	r2, #0
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
 800298c:	4824      	ldr	r0, [pc, #144]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 800298e:	f002 f87d 	bl	8004a8c <HAL_DMA_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_ADC_MspInit+0x1a4>
 8002998:	f000 fc76 	bl	8003288 <Error_Handler>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a20      	ldr	r2, [pc, #128]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38
 80029a2:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <HAL_ADC_MspInit+0x228>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6393      	str	r3, [r2, #56]	; 0x38
 80029a8:	e028      	b.n	80029fc <HAL_ADC_MspInit+0x204>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_ADC_MspInit+0x230>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d123      	bne.n	80029fc <HAL_ADC_MspInit+0x204>
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 80029ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029be:	6453      	str	r3, [r2, #68]	; 0x44
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6313      	str	r3, [r2, #48]	; 0x30
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_ADC_MspInit+0x210>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2304      	movs	r3, #4
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
 80029e8:	2303      	movs	r3, #3
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ec:	2300      	movs	r3, #0
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	4619      	mov	r1, r3
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <HAL_ADC_MspInit+0x214>)
 80029f8:	f002 fbbe 	bl	8005178 <HAL_GPIO_Init>
 80029fc:	bf00      	nop
 80029fe:	3738      	adds	r7, #56	; 0x38
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40012000 	.word	0x40012000
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020800 	.word	0x40020800
 8002a14:	20004abc 	.word	0x20004abc
 8002a18:	40026410 	.word	0x40026410
 8002a1c:	40012100 	.word	0x40012100
 8002a20:	20004b1c 	.word	0x20004b1c
 8002a24:	40026440 	.word	0x40026440
 8002a28:	40012200 	.word	0x40012200

08002a2c <MX_CAN1_Init>:
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a32:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <MX_CAN1_Init+0x68>)
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a38:	2202      	movs	r2, #2
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a4a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002a4e:	611a      	str	r2, [r3, #16]
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a56:	615a      	str	r2, [r3, #20]
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	761a      	strb	r2, [r3, #24]
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	765a      	strb	r2, [r3, #25]
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	769a      	strb	r2, [r3, #26]
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	76da      	strb	r2, [r3, #27]
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	771a      	strb	r2, [r3, #28]
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	775a      	strb	r2, [r3, #29]
 8002a7c:	4804      	ldr	r0, [pc, #16]	; (8002a90 <MX_CAN1_Init+0x64>)
 8002a7e:	f001 fae1 	bl	8004044 <HAL_CAN_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_CAN1_Init+0x60>
 8002a88:	f000 fbfe 	bl	8003288 <Error_Handler>
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20004bcc 	.word	0x20004bcc
 8002a94:	40006400 	.word	0x40006400

08002a98 <MX_CAN2_Init>:
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <MX_CAN2_Init+0x64>)
 8002a9e:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <MX_CAN2_Init+0x68>)
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <MX_CAN2_Init+0x64>)
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <MX_CAN2_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <MX_CAN2_Init+0x64>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_CAN2_Init+0x64>)
 8002ab6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002aba:	611a      	str	r2, [r3, #16]
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <MX_CAN2_Init+0x64>)
 8002abe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ac2:	615a      	str	r2, [r3, #20]
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <MX_CAN2_Init+0x64>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	761a      	strb	r2, [r3, #24]
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <MX_CAN2_Init+0x64>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	765a      	strb	r2, [r3, #25]
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <MX_CAN2_Init+0x64>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	769a      	strb	r2, [r3, #26]
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <MX_CAN2_Init+0x64>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	76da      	strb	r2, [r3, #27]
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <MX_CAN2_Init+0x64>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	771a      	strb	r2, [r3, #28]
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <MX_CAN2_Init+0x64>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	775a      	strb	r2, [r3, #29]
 8002ae8:	4804      	ldr	r0, [pc, #16]	; (8002afc <MX_CAN2_Init+0x64>)
 8002aea:	f001 faab 	bl	8004044 <HAL_CAN_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_CAN2_Init+0x60>
 8002af4:	f000 fbc8 	bl	8003288 <Error_Handler>
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20004ba4 	.word	0x20004ba4
 8002b00:	40006800 	.word	0x40006800

08002b04 <MX_CAN3_Init>:
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b0a:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <MX_CAN3_Init+0x68>)
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b10:	2202      	movs	r2, #2
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b22:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002b26:	611a      	str	r2, [r3, #16]
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b2e:	615a      	str	r2, [r3, #20]
 8002b30:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	761a      	strb	r2, [r3, #24]
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	765a      	strb	r2, [r3, #25]
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	769a      	strb	r2, [r3, #26]
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	76da      	strb	r2, [r3, #27]
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	771a      	strb	r2, [r3, #28]
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	775a      	strb	r2, [r3, #29]
 8002b54:	4804      	ldr	r0, [pc, #16]	; (8002b68 <MX_CAN3_Init+0x64>)
 8002b56:	f001 fa75 	bl	8004044 <HAL_CAN_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_CAN3_Init+0x60>
 8002b60:	f000 fb92 	bl	8003288 <Error_Handler>
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20004b7c 	.word	0x20004b7c
 8002b6c:	40003400 	.word	0x40003400

08002b70 <HAL_CAN_MspInit>:
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b092      	sub	sp, #72	; 0x48
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7e      	ldr	r2, [pc, #504]	; (8002d88 <HAL_CAN_MspInit+0x218>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d132      	bne.n	8002bf8 <HAL_CAN_MspInit+0x88>
 8002b92:	4b7e      	ldr	r3, [pc, #504]	; (8002d8c <HAL_CAN_MspInit+0x21c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	4a7c      	ldr	r2, [pc, #496]	; (8002d8c <HAL_CAN_MspInit+0x21c>)
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_CAN_MspInit+0x21c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10b      	bne.n	8002bbc <HAL_CAN_MspInit+0x4c>
 8002ba4:	4b7a      	ldr	r3, [pc, #488]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	4a79      	ldr	r2, [pc, #484]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bae:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb0:	4b77      	ldr	r3, [pc, #476]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	4b74      	ldr	r3, [pc, #464]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	4a73      	ldr	r2, [pc, #460]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc8:	4b71      	ldr	r3, [pc, #452]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bda:	2302      	movs	r3, #2
 8002bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bde:	2300      	movs	r3, #0
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be2:	2303      	movs	r3, #3
 8002be4:	643b      	str	r3, [r7, #64]	; 0x40
 8002be6:	2309      	movs	r3, #9
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4868      	ldr	r0, [pc, #416]	; (8002d94 <HAL_CAN_MspInit+0x224>)
 8002bf2:	f002 fac1 	bl	8005178 <HAL_GPIO_Init>
 8002bf6:	e0c2      	b.n	8002d7e <HAL_CAN_MspInit+0x20e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a66      	ldr	r2, [pc, #408]	; (8002d98 <HAL_CAN_MspInit+0x228>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d15c      	bne.n	8002cbc <HAL_CAN_MspInit+0x14c>
 8002c02:	4b66      	ldr	r3, [pc, #408]	; (8002d9c <HAL_CAN_MspInit+0x22c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a64      	ldr	r2, [pc, #400]	; (8002d9c <HAL_CAN_MspInit+0x22c>)
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <HAL_CAN_MspInit+0x22c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10b      	bne.n	8002c2c <HAL_CAN_MspInit+0xbc>
 8002c14:	4b5e      	ldr	r3, [pc, #376]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	4a5d      	ldr	r2, [pc, #372]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c20:	4b5b      	ldr	r3, [pc, #364]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	4b5c      	ldr	r3, [pc, #368]	; (8002da0 <HAL_CAN_MspInit+0x230>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	4a5b      	ldr	r2, [pc, #364]	; (8002da0 <HAL_CAN_MspInit+0x230>)
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <HAL_CAN_MspInit+0x230>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d10b      	bne.n	8002c56 <HAL_CAN_MspInit+0xe6>
 8002c3e:	4b54      	ldr	r3, [pc, #336]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a53      	ldr	r2, [pc, #332]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	4b51      	ldr	r3, [pc, #324]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <HAL_CAN_MspInit+0x21c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <HAL_CAN_MspInit+0x21c>)
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_CAN_MspInit+0x21c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10b      	bne.n	8002c80 <HAL_CAN_MspInit+0x110>
 8002c68:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a48      	ldr	r2, [pc, #288]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c72:	6413      	str	r3, [r2, #64]	; 0x40
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c86:	f043 0302 	orr.w	r3, r3, #2
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8002caa:	2309      	movs	r3, #9
 8002cac:	647b      	str	r3, [r7, #68]	; 0x44
 8002cae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	483b      	ldr	r0, [pc, #236]	; (8002da4 <HAL_CAN_MspInit+0x234>)
 8002cb6:	f002 fa5f 	bl	8005178 <HAL_GPIO_Init>
 8002cba:	e060      	b.n	8002d7e <HAL_CAN_MspInit+0x20e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a39      	ldr	r2, [pc, #228]	; (8002da8 <HAL_CAN_MspInit+0x238>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d15b      	bne.n	8002d7e <HAL_CAN_MspInit+0x20e>
 8002cc6:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <HAL_CAN_MspInit+0x22c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	4a33      	ldr	r2, [pc, #204]	; (8002d9c <HAL_CAN_MspInit+0x22c>)
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <HAL_CAN_MspInit+0x22c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_CAN_MspInit+0x180>
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002cde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_CAN_MspInit+0x230>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <HAL_CAN_MspInit+0x230>)
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_CAN_MspInit+0x230>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10b      	bne.n	8002d1a <HAL_CAN_MspInit+0x1aa>
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002d08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <HAL_CAN_MspInit+0x21c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <HAL_CAN_MspInit+0x21c>)
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_CAN_MspInit+0x21c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10b      	bne.n	8002d44 <HAL_CAN_MspInit+0x1d4>
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d36:	6413      	str	r3, [r2, #64]	; 0x40
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_CAN_MspInit+0x220>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
 8002d62:	2302      	movs	r3, #2
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d66:	2300      	movs	r3, #0
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d6e:	230b      	movs	r3, #11
 8002d70:	647b      	str	r3, [r7, #68]	; 0x44
 8002d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d76:	4619      	mov	r1, r3
 8002d78:	4806      	ldr	r0, [pc, #24]	; (8002d94 <HAL_CAN_MspInit+0x224>)
 8002d7a:	f002 f9fd 	bl	8005178 <HAL_GPIO_Init>
 8002d7e:	bf00      	nop
 8002d80:	3748      	adds	r7, #72	; 0x48
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40006400 	.word	0x40006400
 8002d8c:	200000c0 	.word	0x200000c0
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40006800 	.word	0x40006800
 8002d9c:	200000c4 	.word	0x200000c4
 8002da0:	200000c8 	.word	0x200000c8
 8002da4:	40020400 	.word	0x40020400
 8002da8:	40003400 	.word	0x40003400

08002dac <MX_DMA_Init>:
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <MX_DMA_Init+0x48>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <MX_DMA_Init+0x48>)
 8002db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <MX_DMA_Init+0x48>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	2038      	movs	r0, #56	; 0x38
 8002dd0:	f001 fe32 	bl	8004a38 <HAL_NVIC_SetPriority>
 8002dd4:	2038      	movs	r0, #56	; 0x38
 8002dd6:	f001 fe4b 	bl	8004a70 <HAL_NVIC_EnableIRQ>
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	203a      	movs	r0, #58	; 0x3a
 8002de0:	f001 fe2a 	bl	8004a38 <HAL_NVIC_SetPriority>
 8002de4:	203a      	movs	r0, #58	; 0x3a
 8002de6:	f001 fe43 	bl	8004a70 <HAL_NVIC_EnableIRQ>
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <MX_FREERTOS_Init>:
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <MX_FREERTOS_Init+0x18>)
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4804      	ldr	r0, [pc, #16]	; (8002e14 <MX_FREERTOS_Init+0x1c>)
 8002e02:	f004 fc1d 	bl	8007640 <osThreadNew>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <MX_FREERTOS_Init+0x20>)
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	0800ba74 	.word	0x0800ba74
 8002e14:	08002e1d 	.word	0x08002e1d
 8002e18:	20004bf4 	.word	0x20004bf4

08002e1c <StartDefaultTask>:
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	2001      	movs	r0, #1
 8002e26:	f004 fcb1 	bl	800778c <osDelay>
 8002e2a:	e7fb      	b.n	8002e24 <StartDefaultTask+0x8>

08002e2c <MX_GPIO_Init>:
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a2e      	ldr	r2, [pc, #184]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e78:	f043 0310 	orr.w	r3, r3, #16
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <MX_GPIO_Init+0xd4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ea8:	4816      	ldr	r0, [pc, #88]	; (8002f04 <MX_GPIO_Init+0xd8>)
 8002eaa:	f002 fb27 	bl	80054fc <HAL_GPIO_WritePin>
 8002eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	480f      	ldr	r0, [pc, #60]	; (8002f04 <MX_GPIO_Init+0xd8>)
 8002ec8:	f002 f956 	bl	8005178 <HAL_GPIO_Init>
 8002ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <MX_GPIO_Init+0xdc>)
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4808      	ldr	r0, [pc, #32]	; (8002f04 <MX_GPIO_Init+0xd8>)
 8002ee2:	f002 f949 	bl	8005178 <HAL_GPIO_Init>
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2103      	movs	r1, #3
 8002eea:	2028      	movs	r0, #40	; 0x28
 8002eec:	f001 fda4 	bl	8004a38 <HAL_NVIC_SetPriority>
 8002ef0:	2028      	movs	r0, #40	; 0x28
 8002ef2:	f001 fdbd 	bl	8004a70 <HAL_NVIC_EnableIRQ>
 8002ef6:	bf00      	nop
 8002ef8:	3728      	adds	r7, #40	; 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40021000 	.word	0x40021000
 8002f08:	10110000 	.word	0x10110000

08002f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b0a0      	sub	sp, #128	; 0x80
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f12:	f000 fb86 	bl	8003622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f16:	f000 f8a3 	bl	8003060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f1a:	f7ff ff87 	bl	8002e2c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f1e:	f7ff ff45 	bl	8002dac <MX_DMA_Init>
  MX_CAN1_Init();
 8002f22:	f7ff fd83 	bl	8002a2c <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8002f26:	f000 fadf 	bl	80034e8 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8002f2a:	f7ff fdb5 	bl	8002a98 <MX_CAN2_Init>
  MX_CAN3_Init();
 8002f2e:	f7ff fde9 	bl	8002b04 <MX_CAN3_Init>
  MX_ADC2_Init();
 8002f32:	f7ff fbaf 	bl	8002694 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002f36:	f7ff fc0d 	bl	8002754 <MX_ADC3_Init>
  MX_ADC1_Init();
 8002f3a:	f7ff fb3d 	bl	80025b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8002f3e:	4842      	ldr	r0, [pc, #264]	; (8003048 <main+0x13c>)
 8002f40:	f001 fa68 	bl	8004414 <HAL_CAN_Start>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <main+0x42>
	{
		Error_Handler();
 8002f4a:	f000 f99d 	bl	8003288 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8002f4e:	483f      	ldr	r0, [pc, #252]	; (800304c <main+0x140>)
 8002f50:	f001 fa60 	bl	8004414 <HAL_CAN_Start>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <main+0x52>
	{
		Error_Handler();
 8002f5a:	f000 f995 	bl	8003288 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan3) != HAL_OK)
 8002f5e:	483c      	ldr	r0, [pc, #240]	; (8003050 <main+0x144>)
 8002f60:	f001 fa58 	bl	8004414 <HAL_CAN_Start>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <main+0x62>
	{
		Error_Handler();
 8002f6a:	f000 f98d 	bl	8003288 <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8002f76:	2301      	movs	r3, #1
 8002f78:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 8002f82:	2300      	movs	r3, #0
 8002f84:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 8002f86:	2300      	movs	r3, #0
 8002f88:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 8002f92:	230e      	movs	r3, #14
 8002f94:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 8002f96:	230e      	movs	r3, #14
 8002f98:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 8002fba:	230e      	movs	r3, #14
 8002fbc:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 28;
 8002fbe:	231c      	movs	r3, #28
 8002fc0:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 8002fe2:	230e      	movs	r3, #14
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 8002fe6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fea:	4619      	mov	r1, r3
 8002fec:	4816      	ldr	r0, [pc, #88]	; (8003048 <main+0x13c>)
 8002fee:	f001 f925 	bl	800423c <HAL_CAN_ConfigFilter>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <main+0xf0>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002ff8:	f000 f946 	bl	8003288 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8002ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003000:	4619      	mov	r1, r3
 8003002:	4812      	ldr	r0, [pc, #72]	; (800304c <main+0x140>)
 8003004:	f001 f91a 	bl	800423c <HAL_CAN_ConfigFilter>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <main+0x106>
	{
		/* Filter configuration Error */
		Error_Handler();
 800300e:	f000 f93b 	bl	8003288 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	4619      	mov	r1, r3
 8003016:	480e      	ldr	r0, [pc, #56]	; (8003050 <main+0x144>)
 8003018:	f001 f910 	bl	800423c <HAL_CAN_ConfigFilter>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <main+0x11a>
	{
		/* Filter configuration Error */
		Error_Handler();
 8003022:	f000 f931 	bl	8003288 <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 8003026:	480b      	ldr	r0, [pc, #44]	; (8003054 <main+0x148>)
 8003028:	f7fd fc16 	bl	8000858 <fsm_new>
 800302c:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <main+0x14c>)
 8003030:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003032:	480a      	ldr	r0, [pc, #40]	; (800305c <main+0x150>)
 8003034:	f004 fb04 	bl	8007640 <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003038:	f004 fa98 	bl	800756c <osKernelInitialize>
  MX_FREERTOS_Init();
 800303c:	f7ff fedc 	bl	8002df8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003040:	f004 fac8 	bl	80075d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003044:	e7fe      	b.n	8003044 <main+0x138>
 8003046:	bf00      	nop
 8003048:	20004bcc 	.word	0x20004bcc
 800304c:	20004ba4 	.word	0x20004ba4
 8003050:	20004b7c 	.word	0x20004b7c
 8003054:	20000000 	.word	0x20000000
 8003058:	0800ba98 	.word	0x0800ba98
 800305c:	0800317d 	.word	0x0800317d

08003060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b0b8      	sub	sp, #224	; 0xe0
 8003064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003066:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800306a:	2234      	movs	r2, #52	; 0x34
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f007 ffb1 	bl	800afd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003074:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003084:	f107 0308 	add.w	r3, r7, #8
 8003088:	2290      	movs	r2, #144	; 0x90
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f007 ffa2 	bl	800afd6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <SystemClock_Config+0xec>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	4a2d      	ldr	r2, [pc, #180]	; (800314c <SystemClock_Config+0xec>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	6413      	str	r3, [r2, #64]	; 0x40
 800309e:	4b2b      	ldr	r3, [pc, #172]	; (800314c <SystemClock_Config+0xec>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <SystemClock_Config+0xf0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030b2:	4a27      	ldr	r2, [pc, #156]	; (8003150 <SystemClock_Config+0xf0>)
 80030b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b25      	ldr	r3, [pc, #148]	; (8003150 <SystemClock_Config+0xf0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030c6:	2302      	movs	r3, #2
 80030c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030d2:	2310      	movs	r3, #16
 80030d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 fa48 	bl	8005578 <HAL_RCC_OscConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80030ee:	f000 f8cb 	bl	8003288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f2:	230f      	movs	r3, #15
 80030f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003110:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f002 fcdc 	bl	8005ad4 <HAL_RCC_ClockConfig>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003122:	f000 f8b1 	bl	8003288 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800312a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800312c:	2300      	movs	r3, #0
 800312e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003130:	f107 0308 	add.w	r3, r7, #8
 8003134:	4618      	mov	r0, r3
 8003136:	f002 fed1 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8003140:	f000 f8a2 	bl	8003288 <Error_Handler>
  }
}
 8003144:	bf00      	nop
 8003146:	37e0      	adds	r7, #224	; 0xe0
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40023800 	.word	0x40023800
 8003150:	40007000 	.word	0x40007000

08003154 <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b29a      	uxth	r2, r3
 8003162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4803      	ldr	r0, [pc, #12]	; (8003178 <CC_LogInfo+0x24>)
 800316a:	f003 fd59 	bl	8006c20 <HAL_UART_Transmit>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20004c38 	.word	0x20004c38

0800317c <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08c      	sub	sp, #48	; 0x30
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 8003184:	2115      	movs	r1, #21
 8003186:	4830      	ldr	r0, [pc, #192]	; (8003248 <fsm_thread_mainLoop+0xcc>)
 8003188:	f7ff ffe4 	bl	8003154 <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 800318c:	492f      	ldr	r1, [pc, #188]	; (800324c <fsm_thread_mainLoop+0xd0>)
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd fc56 	bl	8000a40 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 8003194:	492e      	ldr	r1, [pc, #184]	; (8003250 <fsm_thread_mainLoop+0xd4>)
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fc06 	bl	80009a8 <fsm_reset>
	//fsm_changeState(fsm, &debugState, "Forcing debug state");
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 800319c:	e012      	b.n	80031c4 <fsm_thread_mainLoop+0x48>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	331c      	adds	r3, #28
 80031a4:	f107 0208 	add.w	r2, r7, #8
 80031a8:	2100      	movs	r1, #0
 80031aa:	482a      	ldr	r0, [pc, #168]	; (8003254 <fsm_thread_mainLoop+0xd8>)
 80031ac:	f001 fa51 	bl	8004652 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN1Queue, &msg, 0U, 0U);
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <fsm_thread_mainLoop+0xdc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
 80031b8:	f107 0108 	add.w	r1, r7, #8
 80031bc:	2300      	movs	r3, #0
 80031be:	2200      	movs	r2, #0
 80031c0:	f004 fcf4 	bl	8007bac <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80031c4:	2100      	movs	r1, #0
 80031c6:	4823      	ldr	r0, [pc, #140]	; (8003254 <fsm_thread_mainLoop+0xd8>)
 80031c8:	f001 fb55 	bl	8004876 <HAL_CAN_GetRxFifoFillLevel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e5      	bne.n	800319e <fsm_thread_mainLoop+0x22>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.StdId);
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 80031d2:	e012      	b.n	80031fa <fsm_thread_mainLoop+0x7e>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 80031d4:	f107 0308 	add.w	r3, r7, #8
 80031d8:	331c      	adds	r3, #28
 80031da:	f107 0208 	add.w	r2, r7, #8
 80031de:	2100      	movs	r1, #0
 80031e0:	481e      	ldr	r0, [pc, #120]	; (800325c <fsm_thread_mainLoop+0xe0>)
 80031e2:	f001 fa36 	bl	8004652 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN2Queue, &msg, 0U, 0U);
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <fsm_thread_mainLoop+0xdc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 80031ee:	f107 0108 	add.w	r1, r7, #8
 80031f2:	2300      	movs	r3, #0
 80031f4:	2200      	movs	r2, #0
 80031f6:	f004 fcd9 	bl	8007bac <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 80031fa:	2100      	movs	r1, #0
 80031fc:	4817      	ldr	r0, [pc, #92]	; (800325c <fsm_thread_mainLoop+0xe0>)
 80031fe:	f001 fb3a 	bl	8004876 <HAL_CAN_GetRxFifoFillLevel>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e5      	bne.n	80031d4 <fsm_thread_mainLoop+0x58>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8003208:	e012      	b.n	8003230 <fsm_thread_mainLoop+0xb4>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 800320a:	f107 0308 	add.w	r3, r7, #8
 800320e:	331c      	adds	r3, #28
 8003210:	f107 0208 	add.w	r2, r7, #8
 8003214:	2100      	movs	r1, #0
 8003216:	4812      	ldr	r0, [pc, #72]	; (8003260 <fsm_thread_mainLoop+0xe4>)
 8003218:	f001 fa1b 	bl	8004652 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN3Queue, &msg, 0U, 0U);
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <fsm_thread_mainLoop+0xdc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 04f0 	ldr.w	r0, [r3, #1264]	; 0x4f0
 8003224:	f107 0108 	add.w	r1, r7, #8
 8003228:	2300      	movs	r3, #0
 800322a:	2200      	movs	r2, #0
 800322c:	f004 fcbe 	bl	8007bac <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8003230:	2100      	movs	r1, #0
 8003232:	480b      	ldr	r0, [pc, #44]	; (8003260 <fsm_thread_mainLoop+0xe4>)
 8003234:	f001 fb1f 	bl	8004876 <HAL_CAN_GetRxFifoFillLevel>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e5      	bne.n	800320a <fsm_thread_mainLoop+0x8e>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}
		fsm_iterate(fsm);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fb44 	bl	80008cc <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8003244:	e7be      	b.n	80031c4 <fsm_thread_mainLoop+0x48>
 8003246:	bf00      	nop
 8003248:	0800ba44 	.word	0x0800ba44
 800324c:	08003155 	.word	0x08003155
 8003250:	20000000 	.word	0x20000000
 8003254:	20004bcc 	.word	0x20004bcc
 8003258:	200049e0 	.word	0x200049e0
 800325c:	20004ba4 	.word	0x20004ba4
 8003260:	20004b7c 	.word	0x20004b7c

08003264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003276:	f000 f9e1 	bl	800363c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40001400 	.word	0x40001400

08003288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_MspInit>:
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_MspInit+0x44>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <HAL_MspInit+0x44>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_MspInit+0x44>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_MspInit+0x44>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	4a08      	ldr	r2, [pc, #32]	; (80032dc <HAL_MspInit+0x44>)
 80032bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c0:	6453      	str	r3, [r2, #68]	; 0x44
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_MspInit+0x44>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800

080032e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	; 0x30
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	2037      	movs	r0, #55	; 0x37
 80032f6:	f001 fb9f 	bl	8004a38 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80032fa:	2037      	movs	r0, #55	; 0x37
 80032fc:	f001 fbb8 	bl	8004a70 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003300:	4b1e      	ldr	r3, [pc, #120]	; (800337c <HAL_InitTick+0x9c>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_InitTick+0x9c>)
 8003306:	f043 0320 	orr.w	r3, r3, #32
 800330a:	6413      	str	r3, [r2, #64]	; 0x40
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <HAL_InitTick+0x9c>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003318:	f107 0210 	add.w	r2, r7, #16
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f002 fda8 	bl	8005e78 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003328:	f002 fd7e 	bl	8005e28 <HAL_RCC_GetPCLK1Freq>
 800332c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <HAL_InitTick+0xa0>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0c9b      	lsrs	r3, r3, #18
 8003338:	3b01      	subs	r3, #1
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <HAL_InitTick+0xa4>)
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <HAL_InitTick+0xa8>)
 8003340:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_InitTick+0xa4>)
 8003344:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003348:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800334a:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <HAL_InitTick+0xa4>)
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_InitTick+0xa4>)
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_InitTick+0xa4>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800335c:	4809      	ldr	r0, [pc, #36]	; (8003384 <HAL_InitTick+0xa4>)
 800335e:	f003 f9ab 	bl	80066b8 <HAL_TIM_Base_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003368:	4806      	ldr	r0, [pc, #24]	; (8003384 <HAL_InitTick+0xa4>)
 800336a:	f003 f9db 	bl	8006724 <HAL_TIM_Base_Start_IT>
 800336e:	4603      	mov	r3, r0
 8003370:	e000      	b.n	8003374 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
}
 8003374:	4618      	mov	r0, r3
 8003376:	3730      	adds	r7, #48	; 0x30
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	431bde83 	.word	0x431bde83
 8003384:	20004bf8 	.word	0x20004bf8
 8003388:	40001400 	.word	0x40001400

0800338c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <HardFault_Handler+0x4>

080033a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <MemManage_Handler+0x4>

080033a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033aa:	e7fe      	b.n	80033aa <BusFault_Handler+0x4>

080033ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <UsageFault_Handler+0x4>

080033b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033c0:	b598      	push	{r3, r4, r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 80033c4:	f000 f94e 	bl	8003664 <HAL_GetTick>
 80033c8:	4601      	mov	r1, r0
 80033ca:	4b11      	ldr	r3, [pc, #68]	; (8003410 <EXTI15_10_IRQHandler+0x50>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <EXTI15_10_IRQHandler+0x50>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1a8a      	subs	r2, r1, r2
 80033d8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	CC_GlobalState->rtdTicks = HAL_GetTick();
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <EXTI15_10_IRQHandler+0x50>)
 80033de:	681c      	ldr	r4, [r3, #0]
 80033e0:	f000 f940 	bl	8003664 <HAL_GetTick>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if(CC_GlobalState->rtdTicksSpan > 10)
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <EXTI15_10_IRQHandler+0x50>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80033f2:	2b0a      	cmp	r3, #10
 80033f4:	d906      	bls.n	8003404 <EXTI15_10_IRQHandler+0x44>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <EXTI15_10_IRQHandler+0x50>)
 80033f8:	681c      	ldr	r4, [r3, #0]
 80033fa:	f000 f933 	bl	8003664 <HAL_GetTick>
 80033fe:	4603      	mov	r3, r0
 8003400:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003404:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003408:	f002 f892 	bl	8005530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800340c:	bf00      	nop
 800340e:	bd98      	pop	{r3, r4, r7, pc}
 8003410:	200049e0 	.word	0x200049e0

08003414 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <TIM7_IRQHandler+0x10>)
 800341a:	f003 f9ad 	bl	8006778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20004bf8 	.word	0x20004bf8

08003428 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800342c:	4802      	ldr	r0, [pc, #8]	; (8003438 <DMA2_Stream0_IRQHandler+0x10>)
 800342e:	f001 fc3b 	bl	8004ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20004abc 	.word	0x20004abc

0800343c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <DMA2_Stream2_IRQHandler+0x10>)
 8003442:	f001 fc31 	bl	8004ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20004b1c 	.word	0x20004b1c

08003450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <_sbrk+0x5c>)
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <_sbrk+0x60>)
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <_sbrk+0x64>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <_sbrk+0x64>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <_sbrk+0x68>)
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <_sbrk+0x64>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	429a      	cmp	r2, r3
 800347e:	d207      	bcs.n	8003490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003480:	f007 fd6c 	bl	800af5c <__errno>
 8003484:	4602      	mov	r2, r0
 8003486:	230c      	movs	r3, #12
 8003488:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800348e:	e009      	b.n	80034a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <_sbrk+0x64>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <_sbrk+0x64>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <_sbrk+0x64>)
 80034a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034a2:	68fb      	ldr	r3, [r7, #12]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20080000 	.word	0x20080000
 80034b0:	00000400 	.word	0x00000400
 80034b4:	200000cc 	.word	0x200000cc
 80034b8:	20004d00 	.word	0x20004d00

080034bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <SystemInit+0x28>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <SystemInit+0x28>)
 80034c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <SystemInit+0x28>)
 80034d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034d6:	609a      	str	r2, [r3, #8]
#endif
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <MX_USART3_UART_Init>:
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <MX_USART3_UART_Init+0x58>)
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <MX_USART3_UART_Init+0x5c>)
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <MX_USART3_UART_Init+0x58>)
 80034f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <MX_USART3_UART_Init+0x58>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <MX_USART3_UART_Init+0x58>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <MX_USART3_UART_Init+0x58>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <MX_USART3_UART_Init+0x58>)
 800350e:	220c      	movs	r2, #12
 8003510:	615a      	str	r2, [r3, #20]
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <MX_USART3_UART_Init+0x58>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <MX_USART3_UART_Init+0x58>)
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <MX_USART3_UART_Init+0x58>)
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <MX_USART3_UART_Init+0x58>)
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
 800352a:	4805      	ldr	r0, [pc, #20]	; (8003540 <MX_USART3_UART_Init+0x58>)
 800352c:	f003 fb2a 	bl	8006b84 <HAL_UART_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_USART3_UART_Init+0x52>
 8003536:	f7ff fea7 	bl	8003288 <Error_Handler>
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20004c38 	.word	0x20004c38
 8003544:	40004800 	.word	0x40004800

08003548 <HAL_UART_MspInit>:
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a17      	ldr	r2, [pc, #92]	; (80035c4 <HAL_UART_MspInit+0x7c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d128      	bne.n	80035bc <HAL_UART_MspInit+0x74>
 800356a:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_UART_MspInit+0x80>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a16      	ldr	r2, [pc, #88]	; (80035c8 <HAL_UART_MspInit+0x80>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <HAL_UART_MspInit+0x80>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <HAL_UART_MspInit+0x80>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <HAL_UART_MspInit+0x80>)
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_UART_MspInit+0x80>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	2302      	movs	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	2303      	movs	r3, #3
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	2307      	movs	r3, #7
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4619      	mov	r1, r3
 80035b6:	4805      	ldr	r0, [pc, #20]	; (80035cc <HAL_UART_MspInit+0x84>)
 80035b8:	f001 fdde 	bl	8005178 <HAL_GPIO_Init>
 80035bc:	bf00      	nop
 80035be:	3728      	adds	r7, #40	; 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40004800 	.word	0x40004800
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40020400 	.word	0x40020400

080035d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003608 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035d6:	e003      	b.n	80035e0 <LoopCopyDataInit>

080035d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035de:	3104      	adds	r1, #4

080035e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035e0:	480b      	ldr	r0, [pc, #44]	; (8003610 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035e8:	d3f6      	bcc.n	80035d8 <CopyDataInit>
  ldr  r2, =_sbss
 80035ea:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035ec:	e002      	b.n	80035f4 <LoopFillZerobss>

080035ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035f0:	f842 3b04 	str.w	r3, [r2], #4

080035f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035f8:	d3f9      	bcc.n	80035ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035fa:	f7ff ff5f 	bl	80034bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035fe:	f007 fcb3 	bl	800af68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003602:	f7ff fc83 	bl	8002f0c <main>
  bx  lr    
 8003606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003608:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800360c:	0800bb20 	.word	0x0800bb20
  ldr  r0, =_sdata
 8003610:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003614:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8003618:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 800361c:	20004d00 	.word	0x20004d00

08003620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003620:	e7fe      	b.n	8003620 <ADC_IRQHandler>

08003622 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003626:	2003      	movs	r0, #3
 8003628:	f001 f9fb 	bl	8004a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800362c:	2000      	movs	r0, #0
 800362e:	f7ff fe57 	bl	80032e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003632:	f7ff fe31 	bl	8003298 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x20>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_IncTick+0x24>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4413      	add	r3, r2
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <HAL_IncTick+0x24>)
 800364e:	6013      	str	r3, [r2, #0]
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000038 	.word	0x20000038
 8003660:	20004cb8 	.word	0x20004cb8

08003664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return uwTick;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <HAL_GetTick+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20004cb8 	.word	0x20004cb8

0800367c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e031      	b.n	80036f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff f8ac 	bl	80027f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_ADC_Init+0x84>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fb3e 	bl	8003d4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
 80036e6:	e001      	b.n	80036ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	ffffeefd 	.word	0xffffeefd

08003704 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_ADC_Start+0x1a>
 800371a:	2302      	movs	r3, #2
 800371c:	e0a0      	b.n	8003860 <HAL_ADC_Start+0x15c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d018      	beq.n	8003766 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003744:	4b49      	ldr	r3, [pc, #292]	; (800386c <HAL_ADC_Start+0x168>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a49      	ldr	r2, [pc, #292]	; (8003870 <HAL_ADC_Start+0x16c>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0c9a      	lsrs	r2, r3, #18
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003758:	e002      	b.n	8003760 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3b01      	subs	r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f9      	bne.n	800375a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d174      	bne.n	800385e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_ADC_Start+0x170>)
 800377a:	4013      	ands	r3, r2
 800377c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800379a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ae:	d106      	bne.n	80037be <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	f023 0206 	bic.w	r2, r3, #6
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
 80037bc:	e002      	b.n	80037c4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80037d6:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_ADC_Start+0x174>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d136      	bne.n	800385e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	e02d      	b.n	800385e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <HAL_ADC_Start+0x178>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d10e      	bne.n	800382a <HAL_ADC_Start+0x126>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003828:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_ADC_Start+0x174>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d113      	bne.n	800385e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a11      	ldr	r2, [pc, #68]	; (8003880 <HAL_ADC_Start+0x17c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d10e      	bne.n	800385e <HAL_ADC_Start+0x15a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d107      	bne.n	800385e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800385c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	20000030 	.word	0x20000030
 8003870:	431bde83 	.word	0x431bde83
 8003874:	fffff8fe 	.word	0xfffff8fe
 8003878:	40012300 	.word	0x40012300
 800387c:	40012000 	.word	0x40012000
 8003880:	40012200 	.word	0x40012200

08003884 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_Start_DMA+0x1e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0c7      	b.n	8003a32 <HAL_ADC_Start_DMA+0x1ae>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d018      	beq.n	80038ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80038c8:	4b5c      	ldr	r3, [pc, #368]	; (8003a3c <HAL_ADC_Start_DMA+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5c      	ldr	r2, [pc, #368]	; (8003a40 <HAL_ADC_Start_DMA+0x1bc>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0c9a      	lsrs	r2, r3, #18
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80038dc:	e002      	b.n	80038e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f9      	bne.n	80038de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	f040 809b 	bne.w	8003a30 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038fe:	4b51      	ldr	r3, [pc, #324]	; (8003a44 <HAL_ADC_Start_DMA+0x1c0>)
 8003900:	4013      	ands	r3, r2
 8003902:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003920:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003934:	d106      	bne.n	8003944 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f023 0206 	bic.w	r2, r3, #6
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
 8003942:	e002      	b.n	800394a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <HAL_ADC_Start_DMA+0x1c4>)
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	4a3b      	ldr	r2, [pc, #236]	; (8003a4c <HAL_ADC_Start_DMA+0x1c8>)
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	4a3a      	ldr	r2, [pc, #232]	; (8003a50 <HAL_ADC_Start_DMA+0x1cc>)
 8003968:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003972:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003982:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003992:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	334c      	adds	r3, #76	; 0x4c
 800399e:	4619      	mov	r1, r3
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f001 f920 	bl	8004be8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80039a8:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <HAL_ADC_Start_DMA+0x1d0>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10f      	bne.n	80039d4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d136      	bne.n	8003a30 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	e02d      	b.n	8003a30 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <HAL_ADC_Start_DMA+0x1d4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10e      	bne.n	80039fc <HAL_ADC_Start_DMA+0x178>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d107      	bne.n	80039fc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039fa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80039fc:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_ADC_Start_DMA+0x1d0>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d113      	bne.n	8003a30 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <HAL_ADC_Start_DMA+0x1d8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10e      	bne.n	8003a30 <HAL_ADC_Start_DMA+0x1ac>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d107      	bne.n	8003a30 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a2e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000030 	.word	0x20000030
 8003a40:	431bde83 	.word	0x431bde83
 8003a44:	fffff8fe 	.word	0xfffff8fe
 8003a48:	08003f41 	.word	0x08003f41
 8003a4c:	08003ffb 	.word	0x08003ffb
 8003a50:	08004017 	.word	0x08004017
 8003a54:	40012300 	.word	0x40012300
 8003a58:	40012000 	.word	0x40012000
 8003a5c:	40012200 	.word	0x40012200

08003a60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x1c>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e12a      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x272>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b09      	cmp	r3, #9
 8003ae2:	d93a      	bls.n	8003b5a <HAL_ADC_ConfigChannel+0xa2>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aec:	d035      	beq.n	8003b5a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68d9      	ldr	r1, [r3, #12]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	3b1e      	subs	r3, #30
 8003b04:	2207      	movs	r2, #7
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	400a      	ands	r2, r1
 8003b12:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a87      	ldr	r2, [pc, #540]	; (8003d38 <HAL_ADC_ConfigChannel+0x280>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10a      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68d9      	ldr	r1, [r3, #12]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	061a      	lsls	r2, r3, #24
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b32:	e035      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68d9      	ldr	r1, [r3, #12]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	4618      	mov	r0, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4403      	add	r3, r0
 8003b4c:	3b1e      	subs	r3, #30
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b58:	e022      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6919      	ldr	r1, [r3, #16]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	2207      	movs	r2, #7
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43da      	mvns	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6919      	ldr	r1, [r3, #16]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	4603      	mov	r3, r0
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4403      	add	r3, r0
 8003b96:	409a      	lsls	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b06      	cmp	r3, #6
 8003ba6:	d824      	bhi.n	8003bf2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3b05      	subs	r3, #5
 8003bba:	221f      	movs	r2, #31
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	3b05      	subs	r3, #5
 8003be4:	fa00 f203 	lsl.w	r2, r0, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	635a      	str	r2, [r3, #52]	; 0x34
 8003bf0:	e04c      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d824      	bhi.n	8003c44 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	3b23      	subs	r3, #35	; 0x23
 8003c0c:	221f      	movs	r2, #31
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43da      	mvns	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	400a      	ands	r2, r1
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	4618      	mov	r0, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	3b23      	subs	r3, #35	; 0x23
 8003c36:	fa00 f203 	lsl.w	r2, r0, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
 8003c42:	e023      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	3b41      	subs	r3, #65	; 0x41
 8003c56:	221f      	movs	r2, #31
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	400a      	ands	r2, r1
 8003c64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	4618      	mov	r0, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3b41      	subs	r3, #65	; 0x41
 8003c80:	fa00 f203 	lsl.w	r2, r0, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a2a      	ldr	r2, [pc, #168]	; (8003d3c <HAL_ADC_ConfigChannel+0x284>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10a      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x1f4>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c9e:	d105      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_ADC_ConfigChannel+0x288>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <HAL_ADC_ConfigChannel+0x288>)
 8003ca6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003caa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	; (8003d3c <HAL_ADC_ConfigChannel+0x284>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d109      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x212>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b12      	cmp	r3, #18
 8003cbc:	d105      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_ADC_ConfigChannel+0x288>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <HAL_ADC_ConfigChannel+0x288>)
 8003cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cc8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_ADC_ConfigChannel+0x284>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d125      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x268>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a17      	ldr	r2, [pc, #92]	; (8003d38 <HAL_ADC_ConfigChannel+0x280>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <HAL_ADC_ConfigChannel+0x22e>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b11      	cmp	r3, #17
 8003ce4:	d11c      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_ADC_ConfigChannel+0x288>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <HAL_ADC_ConfigChannel+0x288>)
 8003cec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cf0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a10      	ldr	r2, [pc, #64]	; (8003d38 <HAL_ADC_ConfigChannel+0x280>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d111      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_ADC_ConfigChannel+0x28c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a11      	ldr	r2, [pc, #68]	; (8003d48 <HAL_ADC_ConfigChannel+0x290>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0c9a      	lsrs	r2, r3, #18
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d12:	e002      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f9      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	10000012 	.word	0x10000012
 8003d3c:	40012000 	.word	0x40012000
 8003d40:	40012300 	.word	0x40012300
 8003d44:	20000030 	.word	0x20000030
 8003d48:	431bde83 	.word	0x431bde83

08003d4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003d54:	4b78      	ldr	r3, [pc, #480]	; (8003f38 <ADC_Init+0x1ec>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a77      	ldr	r2, [pc, #476]	; (8003f38 <ADC_Init+0x1ec>)
 8003d5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d5e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003d60:	4b75      	ldr	r3, [pc, #468]	; (8003f38 <ADC_Init+0x1ec>)
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4973      	ldr	r1, [pc, #460]	; (8003f38 <ADC_Init+0x1ec>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	021a      	lsls	r2, r3, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6899      	ldr	r1, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <ADC_Init+0x1f0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d022      	beq.n	8003e26 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6899      	ldr	r1, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6899      	ldr	r1, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	e00f      	b.n	8003e46 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0202 	bic.w	r2, r2, #2
 8003e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6899      	ldr	r1, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	005a      	lsls	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01b      	beq.n	8003eac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	035a      	lsls	r2, r3, #13
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	e007      	b.n	8003ebc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	051a      	lsls	r2, r3, #20
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6899      	ldr	r1, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003efe:	025a      	lsls	r2, r3, #9
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6899      	ldr	r1, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	029a      	lsls	r2, r3, #10
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40012300 	.word	0x40012300
 8003f3c:	0f000001 	.word	0x0f000001

08003f40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d13c      	bne.n	8003fd4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d12b      	bne.n	8003fcc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d127      	bne.n	8003fcc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d006      	beq.n	8003f98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d119      	bne.n	8003fcc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0220 	bic.w	r2, r2, #32
 8003fa6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	f043 0201 	orr.w	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff fd54 	bl	8003a7a <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fd2:	e00e      	b.n	8003ff2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f7ff fd5e 	bl	8003aa2 <HAL_ADC_ErrorCallback>
}
 8003fe6:	e004      	b.n	8003ff2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff fd40 	bl	8003a8e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2240      	movs	r2, #64	; 0x40
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f043 0204 	orr.w	r2, r3, #4
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff fd33 	bl	8003aa2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e0ed      	b.n	8004232 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe fd84 	bl	8002b70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0202 	bic.w	r2, r2, #2
 8004076:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004078:	f7ff faf4 	bl	8003664 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800407e:	e012      	b.n	80040a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004080:	f7ff faf0 	bl	8003664 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b0a      	cmp	r3, #10
 800408c:	d90b      	bls.n	80040a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2205      	movs	r2, #5
 800409e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0c5      	b.n	8004232 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e5      	bne.n	8004080 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040c4:	f7ff face 	bl	8003664 <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040ca:	e012      	b.n	80040f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040cc:	f7ff faca 	bl	8003664 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b0a      	cmp	r3, #10
 80040d8:	d90b      	bls.n	80040f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2205      	movs	r2, #5
 80040ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e09f      	b.n	8004232 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0e5      	beq.n	80040cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7e1b      	ldrb	r3, [r3, #24]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d108      	bne.n	800411a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e007      	b.n	800412a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004128:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7e5b      	ldrb	r3, [r3, #25]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d108      	bne.n	8004144 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e007      	b.n	8004154 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	7e9b      	ldrb	r3, [r3, #26]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d108      	bne.n	800416e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0220 	orr.w	r2, r2, #32
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e007      	b.n	800417e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0220 	bic.w	r2, r2, #32
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7edb      	ldrb	r3, [r3, #27]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d108      	bne.n	8004198 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0210 	bic.w	r2, r2, #16
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e007      	b.n	80041a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0210 	orr.w	r2, r2, #16
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	7f1b      	ldrb	r3, [r3, #28]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d108      	bne.n	80041c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0208 	orr.w	r2, r2, #8
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e007      	b.n	80041d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0208 	bic.w	r2, r2, #8
 80041d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7f5b      	ldrb	r3, [r3, #29]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d108      	bne.n	80041ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0204 	orr.w	r2, r2, #4
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e007      	b.n	80041fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0204 	bic.w	r2, r2, #4
 80041fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	ea42 0103 	orr.w	r1, r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	1e5a      	subs	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004252:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d003      	beq.n	8004262 <HAL_CAN_ConfigFilter+0x26>
 800425a:	7cfb      	ldrb	r3, [r7, #19]
 800425c:	2b02      	cmp	r3, #2
 800425e:	f040 80c7 	bne.w	80043f0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a69      	ldr	r2, [pc, #420]	; (800440c <HAL_CAN_ConfigFilter+0x1d0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d001      	beq.n	8004270 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800426c:	4b68      	ldr	r3, [pc, #416]	; (8004410 <HAL_CAN_ConfigFilter+0x1d4>)
 800426e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	4a63      	ldr	r2, [pc, #396]	; (8004410 <HAL_CAN_ConfigFilter+0x1d4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d111      	bne.n	80042ac <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800428e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	431a      	orrs	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2201      	movs	r2, #1
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	401a      	ands	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d123      	bne.n	800431e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	43db      	mvns	r3, r3
 80042e0:	401a      	ands	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	3248      	adds	r2, #72	; 0x48
 80042fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004312:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004314:	6979      	ldr	r1, [r7, #20]
 8004316:	3348      	adds	r3, #72	; 0x48
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	440b      	add	r3, r1
 800431c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d122      	bne.n	800436c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	431a      	orrs	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004346:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3248      	adds	r2, #72	; 0x48
 800434c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004360:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	3348      	adds	r3, #72	; 0x48
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	440b      	add	r3, r1
 800436a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004386:	e007      	b.n	8004398 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	431a      	orrs	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	401a      	ands	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80043b2:	e007      	b.n	80043c4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	431a      	orrs	r2, r3
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d107      	bne.n	80043dc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043e2:	f023 0201 	bic.w	r2, r3, #1
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e006      	b.n	80043fe <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40003400 	.word	0x40003400
 8004410:	40006400 	.word	0x40006400

08004414 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d12e      	bne.n	8004486 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004440:	f7ff f910 	bl	8003664 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004446:	e012      	b.n	800446e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004448:	f7ff f90c 	bl	8003664 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b0a      	cmp	r3, #10
 8004454:	d90b      	bls.n	800446e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2205      	movs	r2, #5
 8004466:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e012      	b.n	8004494 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e006      	b.n	8004494 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d003      	beq.n	80044c8 <HAL_CAN_AddTxMessage+0x2c>
 80044c0:	7ffb      	ldrb	r3, [r7, #31]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	f040 80b8 	bne.w	8004638 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80a0 	beq.w	8004628 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	0e1b      	lsrs	r3, r3, #24
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d907      	bls.n	8004508 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e09e      	b.n	8004646 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004508:	2201      	movs	r2, #1
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	409a      	lsls	r2, r3
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004524:	68f9      	ldr	r1, [r7, #12]
 8004526:	6809      	ldr	r1, [r1, #0]
 8004528:	431a      	orrs	r2, r3
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	3318      	adds	r3, #24
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	440b      	add	r3, r1
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e00f      	b.n	8004556 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004540:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004546:	68f9      	ldr	r1, [r7, #12]
 8004548:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800454a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3318      	adds	r3, #24
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	440b      	add	r3, r1
 8004554:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6819      	ldr	r1, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	3318      	adds	r3, #24
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	440b      	add	r3, r1
 8004566:	3304      	adds	r3, #4
 8004568:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	7d1b      	ldrb	r3, [r3, #20]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d111      	bne.n	8004596 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	3318      	adds	r3, #24
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	4413      	add	r3, r2
 800457e:	3304      	adds	r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	6811      	ldr	r1, [r2, #0]
 8004586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	3318      	adds	r3, #24
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	440b      	add	r3, r1
 8004592:	3304      	adds	r3, #4
 8004594:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3307      	adds	r3, #7
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	061a      	lsls	r2, r3, #24
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3306      	adds	r3, #6
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3305      	adds	r3, #5
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	4313      	orrs	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	3204      	adds	r2, #4
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	4610      	mov	r0, r2
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	6811      	ldr	r1, [r2, #0]
 80045be:	ea43 0200 	orr.w	r2, r3, r0
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	440b      	add	r3, r1
 80045c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80045cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3303      	adds	r3, #3
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	061a      	lsls	r2, r3, #24
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3302      	adds	r3, #2
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3301      	adds	r3, #1
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	4313      	orrs	r3, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	7812      	ldrb	r2, [r2, #0]
 80045ee:	4610      	mov	r0, r2
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	6811      	ldr	r1, [r2, #0]
 80045f4:	ea43 0200 	orr.w	r2, r3, r0
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	440b      	add	r3, r1
 80045fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004602:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	3318      	adds	r3, #24
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	4413      	add	r3, r2
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	6811      	ldr	r1, [r2, #0]
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	3318      	adds	r3, #24
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	440b      	add	r3, r1
 8004622:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	e00e      	b.n	8004646 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e006      	b.n	8004646 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3724      	adds	r7, #36	; 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004652:	b480      	push	{r7}
 8004654:	b087      	sub	sp, #28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004666:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d003      	beq.n	8004676 <HAL_CAN_GetRxMessage+0x24>
 800466e:	7dfb      	ldrb	r3, [r7, #23]
 8004670:	2b02      	cmp	r3, #2
 8004672:	f040 80f3 	bne.w	800485c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10e      	bne.n	800469a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d116      	bne.n	80046b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0e7      	b.n	800486a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d107      	bne.n	80046b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0d8      	b.n	800486a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	331b      	adds	r3, #27
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	4413      	add	r3, r2
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0204 	and.w	r2, r3, #4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	331b      	adds	r3, #27
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	4413      	add	r3, r2
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	0d5b      	lsrs	r3, r3, #21
 80046e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e00b      	b.n	8004708 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	331b      	adds	r3, #27
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	4413      	add	r3, r2
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	08db      	lsrs	r3, r3, #3
 8004700:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	331b      	adds	r3, #27
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	4413      	add	r3, r2
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0202 	and.w	r2, r3, #2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	331b      	adds	r3, #27
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	4413      	add	r3, r2
 800472a:	3304      	adds	r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 020f 	and.w	r2, r3, #15
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	331b      	adds	r3, #27
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	4413      	add	r3, r2
 8004742:	3304      	adds	r3, #4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	b2da      	uxtb	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	331b      	adds	r3, #27
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	4413      	add	r3, r2
 800475a:	3304      	adds	r3, #4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	4413      	add	r3, r2
 8004770:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	b2da      	uxtb	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	4413      	add	r3, r2
 8004786:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0a1a      	lsrs	r2, r3, #8
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	3301      	adds	r3, #1
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	4413      	add	r3, r2
 80047a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	0c1a      	lsrs	r2, r3, #16
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	3302      	adds	r3, #2
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	0e1a      	lsrs	r2, r3, #24
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	3303      	adds	r3, #3
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	3304      	adds	r3, #4
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	0a1a      	lsrs	r2, r3, #8
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	3305      	adds	r3, #5
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	4413      	add	r3, r2
 8004806:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	0c1a      	lsrs	r2, r3, #16
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	3306      	adds	r3, #6
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	4413      	add	r3, r2
 8004820:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	0e1a      	lsrs	r2, r3, #24
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	3307      	adds	r3, #7
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d108      	bne.n	8004848 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0220 	orr.w	r2, r2, #32
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	e007      	b.n	8004858 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0220 	orr.w	r2, r2, #32
 8004856:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	e006      	b.n	800486a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
  }
}
 800486a:	4618      	mov	r0, r3
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800488a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800488c:	7afb      	ldrb	r3, [r7, #11]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d002      	beq.n	8004898 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004892:	7afb      	ldrb	r3, [r7, #11]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d10f      	bne.n	80048b8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e005      	b.n	80048b8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80048b8:	68fb      	ldr	r3, [r7, #12]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <__NVIC_SetPriorityGrouping+0x40>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048e4:	4013      	ands	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <__NVIC_SetPriorityGrouping+0x44>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048f6:	4a04      	ldr	r2, [pc, #16]	; (8004908 <__NVIC_SetPriorityGrouping+0x40>)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	60d3      	str	r3, [r2, #12]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000ed00 	.word	0xe000ed00
 800490c:	05fa0000 	.word	0x05fa0000

08004910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <__NVIC_GetPriorityGrouping+0x18>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 0307 	and.w	r3, r3, #7
}
 800491e:	4618      	mov	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db0b      	blt.n	8004956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	4907      	ldr	r1, [pc, #28]	; (8004964 <__NVIC_EnableIRQ+0x38>)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	2001      	movs	r0, #1
 800494e:	fa00 f202 	lsl.w	r2, r0, r2
 8004952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	e000e100 	.word	0xe000e100

08004968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db0a      	blt.n	8004992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	490c      	ldr	r1, [pc, #48]	; (80049b4 <__NVIC_SetPriority+0x4c>)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	0112      	lsls	r2, r2, #4
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	440b      	add	r3, r1
 800498c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004990:	e00a      	b.n	80049a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	4908      	ldr	r1, [pc, #32]	; (80049b8 <__NVIC_SetPriority+0x50>)
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3b04      	subs	r3, #4
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	440b      	add	r3, r1
 80049a6:	761a      	strb	r2, [r3, #24]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000e100 	.word	0xe000e100
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f1c3 0307 	rsb	r3, r3, #7
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	bf28      	it	cs
 80049da:	2304      	movcs	r3, #4
 80049dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d902      	bls.n	80049ec <NVIC_EncodePriority+0x30>
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3b03      	subs	r3, #3
 80049ea:	e000      	b.n	80049ee <NVIC_EncodePriority+0x32>
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43da      	mvns	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	401a      	ands	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	43d9      	mvns	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a14:	4313      	orrs	r3, r2
         );
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3724      	adds	r7, #36	; 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff ff4c 	bl	80048c8 <__NVIC_SetPriorityGrouping>
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a4a:	f7ff ff61 	bl	8004910 <__NVIC_GetPriorityGrouping>
 8004a4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	6978      	ldr	r0, [r7, #20]
 8004a56:	f7ff ffb1 	bl	80049bc <NVIC_EncodePriority>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ff80 	bl	8004968 <__NVIC_SetPriority>
}
 8004a68:	bf00      	nop
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ff54 	bl	800492c <__NVIC_EnableIRQ>
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a98:	f7fe fde4 	bl	8003664 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e099      	b.n	8004bdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ac8:	e00f      	b.n	8004aea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004aca:	f7fe fdcb 	bl	8003664 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d908      	bls.n	8004aea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e078      	b.n	8004bdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e8      	bne.n	8004aca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4b38      	ldr	r3, [pc, #224]	; (8004be4 <HAL_DMA_Init+0x158>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d107      	bne.n	8004b54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f023 0307 	bic.w	r3, r3, #7
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d117      	bne.n	8004bae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00e      	beq.n	8004bae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fa77 	bl	8005084 <DMA_CheckFifoParam>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004baa:	2301      	movs	r3, #1
 8004bac:	e016      	b.n	8004bdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa2e 	bl	8005018 <DMA_CalcBaseAndBitshift>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	223f      	movs	r2, #63	; 0x3f
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	e010803f 	.word	0xe010803f

08004be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_DMA_Start_IT+0x26>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e048      	b.n	8004ca0 <HAL_DMA_Start_IT+0xb8>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d137      	bne.n	8004c92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f9c0 	bl	8004fbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c40:	223f      	movs	r2, #63	; 0x3f
 8004c42:	409a      	lsls	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0216 	orr.w	r2, r2, #22
 8004c56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c66:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e005      	b.n	8004c9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004cb4:	4b92      	ldr	r3, [pc, #584]	; (8004f00 <HAL_DMA_IRQHandler+0x258>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a92      	ldr	r2, [pc, #584]	; (8004f04 <HAL_DMA_IRQHandler+0x25c>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	0a9b      	lsrs	r3, r3, #10
 8004cc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01a      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0204 	bic.w	r2, r2, #4
 8004cfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	2208      	movs	r2, #8
 8004d02:	409a      	lsls	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	2201      	movs	r2, #1
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d012      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	2201      	movs	r2, #1
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d42:	f043 0202 	orr.w	r2, r3, #2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	2204      	movs	r2, #4
 8004d50:	409a      	lsls	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d012      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	f043 0204 	orr.w	r2, r3, #4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	2210      	movs	r2, #16
 8004d86:	409a      	lsls	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d043      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d03c      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da2:	2210      	movs	r2, #16
 8004da4:	409a      	lsls	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d018      	beq.n	8004dea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d108      	bne.n	8004dd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d024      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	4798      	blx	r3
 8004dd6:	e01f      	b.n	8004e18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01b      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	4798      	blx	r3
 8004de8:	e016      	b.n	8004e18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0208 	bic.w	r2, r2, #8
 8004e06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 808e 	beq.w	8004f46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8086 	beq.w	8004f46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3e:	2220      	movs	r2, #32
 8004e40:	409a      	lsls	r2, r3
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d136      	bne.n	8004ec0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0216 	bic.w	r2, r2, #22
 8004e60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d103      	bne.n	8004e82 <HAL_DMA_IRQHandler+0x1da>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0208 	bic.w	r2, r2, #8
 8004e90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e96:	223f      	movs	r2, #63	; 0x3f
 8004e98:	409a      	lsls	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d07d      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
        }
        return;
 8004ebe:	e078      	b.n	8004fb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01c      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d108      	bne.n	8004eee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d030      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
 8004eec:	e02b      	b.n	8004f46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d027      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
 8004efe:	e022      	b.n	8004f46 <HAL_DMA_IRQHandler+0x29e>
 8004f00:	20000030 	.word	0x20000030
 8004f04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0210 	bic.w	r2, r2, #16
 8004f24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d032      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d022      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2205      	movs	r2, #5
 8004f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3301      	adds	r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d307      	bcc.n	8004f8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f2      	bne.n	8004f72 <HAL_DMA_IRQHandler+0x2ca>
 8004f8c:	e000      	b.n	8004f90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004f8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
 8004fb0:	e000      	b.n	8004fb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004fb2:	bf00      	nop
    }
  }
}
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop

08004fbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d108      	bne.n	8004ffc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ffa:	e007      	b.n	800500c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	3b10      	subs	r3, #16
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <DMA_CalcBaseAndBitshift+0x60>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005032:	4a12      	ldr	r2, [pc, #72]	; (800507c <DMA_CalcBaseAndBitshift+0x64>)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d908      	bls.n	8005058 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <DMA_CalcBaseAndBitshift+0x68>)
 800504e:	4013      	ands	r3, r2
 8005050:	1d1a      	adds	r2, r3, #4
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	659a      	str	r2, [r3, #88]	; 0x58
 8005056:	e006      	b.n	8005066 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <DMA_CalcBaseAndBitshift+0x68>)
 8005060:	4013      	ands	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	aaaaaaab 	.word	0xaaaaaaab
 800507c:	0800bad4 	.word	0x0800bad4
 8005080:	fffffc00 	.word	0xfffffc00

08005084 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11f      	bne.n	80050de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d855      	bhi.n	8005150 <DMA_CheckFifoParam+0xcc>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <DMA_CheckFifoParam+0x28>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050bd 	.word	0x080050bd
 80050b0:	080050cf 	.word	0x080050cf
 80050b4:	080050bd 	.word	0x080050bd
 80050b8:	08005151 	.word	0x08005151
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d045      	beq.n	8005154 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050cc:	e042      	b.n	8005154 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050d6:	d13f      	bne.n	8005158 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050dc:	e03c      	b.n	8005158 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e6:	d121      	bne.n	800512c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d836      	bhi.n	800515c <DMA_CheckFifoParam+0xd8>
 80050ee:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <DMA_CheckFifoParam+0x70>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	08005105 	.word	0x08005105
 80050f8:	0800510b 	.word	0x0800510b
 80050fc:	08005105 	.word	0x08005105
 8005100:	0800511d 	.word	0x0800511d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
      break;
 8005108:	e02f      	b.n	800516a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d024      	beq.n	8005160 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800511a:	e021      	b.n	8005160 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005124:	d11e      	bne.n	8005164 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800512a:	e01b      	b.n	8005164 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d902      	bls.n	8005138 <DMA_CheckFifoParam+0xb4>
 8005132:	2b03      	cmp	r3, #3
 8005134:	d003      	beq.n	800513e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005136:	e018      	b.n	800516a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
      break;
 800513c:	e015      	b.n	800516a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00e      	beq.n	8005168 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
      break;
 800514e:	e00b      	b.n	8005168 <DMA_CheckFifoParam+0xe4>
      break;
 8005150:	bf00      	nop
 8005152:	e00a      	b.n	800516a <DMA_CheckFifoParam+0xe6>
      break;
 8005154:	bf00      	nop
 8005156:	e008      	b.n	800516a <DMA_CheckFifoParam+0xe6>
      break;
 8005158:	bf00      	nop
 800515a:	e006      	b.n	800516a <DMA_CheckFifoParam+0xe6>
      break;
 800515c:	bf00      	nop
 800515e:	e004      	b.n	800516a <DMA_CheckFifoParam+0xe6>
      break;
 8005160:	bf00      	nop
 8005162:	e002      	b.n	800516a <DMA_CheckFifoParam+0xe6>
      break;   
 8005164:	bf00      	nop
 8005166:	e000      	b.n	800516a <DMA_CheckFifoParam+0xe6>
      break;
 8005168:	bf00      	nop
    }
  } 
  
  return status; 
 800516a:	7bfb      	ldrb	r3, [r7, #15]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005178:	b480      	push	{r7}
 800517a:	b089      	sub	sp, #36	; 0x24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800518a:	2300      	movs	r3, #0
 800518c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	e175      	b.n	8005484 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005198:	2201      	movs	r2, #1
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4013      	ands	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	f040 8164 	bne.w	800547e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d00b      	beq.n	80051d6 <HAL_GPIO_Init+0x5e>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d007      	beq.n	80051d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ca:	2b11      	cmp	r3, #17
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b12      	cmp	r3, #18
 80051d4:	d130      	bne.n	8005238 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	2203      	movs	r2, #3
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800520c:	2201      	movs	r2, #1
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 0201 	and.w	r2, r3, #1
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4313      	orrs	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	2203      	movs	r2, #3
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x100>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b12      	cmp	r3, #18
 8005276:	d123      	bne.n	80052c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	08da      	lsrs	r2, r3, #3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3208      	adds	r2, #8
 8005280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	220f      	movs	r2, #15
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	43db      	mvns	r3, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	08da      	lsrs	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3208      	adds	r2, #8
 80052ba:	69b9      	ldr	r1, [r7, #24]
 80052bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	2203      	movs	r2, #3
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 0203 	and.w	r2, r3, #3
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 80be 	beq.w	800547e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005302:	4b65      	ldr	r3, [pc, #404]	; (8005498 <HAL_GPIO_Init+0x320>)
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	4a64      	ldr	r2, [pc, #400]	; (8005498 <HAL_GPIO_Init+0x320>)
 8005308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800530c:	6453      	str	r3, [r2, #68]	; 0x44
 800530e:	4b62      	ldr	r3, [pc, #392]	; (8005498 <HAL_GPIO_Init+0x320>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800531a:	4a60      	ldr	r2, [pc, #384]	; (800549c <HAL_GPIO_Init+0x324>)
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	089b      	lsrs	r3, r3, #2
 8005320:	3302      	adds	r3, #2
 8005322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	220f      	movs	r2, #15
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43db      	mvns	r3, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4013      	ands	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a57      	ldr	r2, [pc, #348]	; (80054a0 <HAL_GPIO_Init+0x328>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d037      	beq.n	80053b6 <HAL_GPIO_Init+0x23e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a56      	ldr	r2, [pc, #344]	; (80054a4 <HAL_GPIO_Init+0x32c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d031      	beq.n	80053b2 <HAL_GPIO_Init+0x23a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a55      	ldr	r2, [pc, #340]	; (80054a8 <HAL_GPIO_Init+0x330>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d02b      	beq.n	80053ae <HAL_GPIO_Init+0x236>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a54      	ldr	r2, [pc, #336]	; (80054ac <HAL_GPIO_Init+0x334>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d025      	beq.n	80053aa <HAL_GPIO_Init+0x232>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a53      	ldr	r2, [pc, #332]	; (80054b0 <HAL_GPIO_Init+0x338>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01f      	beq.n	80053a6 <HAL_GPIO_Init+0x22e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a52      	ldr	r2, [pc, #328]	; (80054b4 <HAL_GPIO_Init+0x33c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d019      	beq.n	80053a2 <HAL_GPIO_Init+0x22a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a51      	ldr	r2, [pc, #324]	; (80054b8 <HAL_GPIO_Init+0x340>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <HAL_GPIO_Init+0x226>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a50      	ldr	r2, [pc, #320]	; (80054bc <HAL_GPIO_Init+0x344>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00d      	beq.n	800539a <HAL_GPIO_Init+0x222>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a4f      	ldr	r2, [pc, #316]	; (80054c0 <HAL_GPIO_Init+0x348>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <HAL_GPIO_Init+0x21e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a4e      	ldr	r2, [pc, #312]	; (80054c4 <HAL_GPIO_Init+0x34c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_GPIO_Init+0x21a>
 800538e:	2309      	movs	r3, #9
 8005390:	e012      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 8005392:	230a      	movs	r3, #10
 8005394:	e010      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 8005396:	2308      	movs	r3, #8
 8005398:	e00e      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 800539a:	2307      	movs	r3, #7
 800539c:	e00c      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 800539e:	2306      	movs	r3, #6
 80053a0:	e00a      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 80053a2:	2305      	movs	r3, #5
 80053a4:	e008      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 80053a6:	2304      	movs	r3, #4
 80053a8:	e006      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 80053aa:	2303      	movs	r3, #3
 80053ac:	e004      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e002      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <HAL_GPIO_Init+0x240>
 80053b6:	2300      	movs	r3, #0
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	f002 0203 	and.w	r2, r2, #3
 80053be:	0092      	lsls	r2, r2, #2
 80053c0:	4093      	lsls	r3, r2
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80053c8:	4934      	ldr	r1, [pc, #208]	; (800549c <HAL_GPIO_Init+0x324>)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	089b      	lsrs	r3, r3, #2
 80053ce:	3302      	adds	r3, #2
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053d6:	4b3c      	ldr	r3, [pc, #240]	; (80054c8 <HAL_GPIO_Init+0x350>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053fa:	4a33      	ldr	r2, [pc, #204]	; (80054c8 <HAL_GPIO_Init+0x350>)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005400:	4b31      	ldr	r3, [pc, #196]	; (80054c8 <HAL_GPIO_Init+0x350>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005424:	4a28      	ldr	r2, [pc, #160]	; (80054c8 <HAL_GPIO_Init+0x350>)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800542a:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <HAL_GPIO_Init+0x350>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	43db      	mvns	r3, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	4013      	ands	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800544e:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <HAL_GPIO_Init+0x350>)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005454:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <HAL_GPIO_Init+0x350>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	43db      	mvns	r3, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <HAL_GPIO_Init+0x350>)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	3301      	adds	r3, #1
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	2b0f      	cmp	r3, #15
 8005488:	f67f ae86 	bls.w	8005198 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800548c:	bf00      	nop
 800548e:	3724      	adds	r7, #36	; 0x24
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40023800 	.word	0x40023800
 800549c:	40013800 	.word	0x40013800
 80054a0:	40020000 	.word	0x40020000
 80054a4:	40020400 	.word	0x40020400
 80054a8:	40020800 	.word	0x40020800
 80054ac:	40020c00 	.word	0x40020c00
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40021400 	.word	0x40021400
 80054b8:	40021800 	.word	0x40021800
 80054bc:	40021c00 	.word	0x40021c00
 80054c0:	40022000 	.word	0x40022000
 80054c4:	40022400 	.word	0x40022400
 80054c8:	40013c00 	.word	0x40013c00

080054cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	887b      	ldrh	r3, [r7, #2]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054e4:	2301      	movs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
 80054e8:	e001      	b.n	80054ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	807b      	strh	r3, [r7, #2]
 8005508:	4613      	mov	r3, r2
 800550a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800550c:	787b      	ldrb	r3, [r7, #1]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005512:	887a      	ldrh	r2, [r7, #2]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005518:	e003      	b.n	8005522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800551a:	887b      	ldrh	r3, [r7, #2]
 800551c:	041a      	lsls	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	619a      	str	r2, [r3, #24]
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d006      	beq.n	8005554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005546:	4a05      	ldr	r2, [pc, #20]	; (800555c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f806 	bl	8005560 <HAL_GPIO_EXTI_Callback>
  }
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40013c00 	.word	0x40013c00

08005560 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005580:	2300      	movs	r3, #0
 8005582:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e29b      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8087 	beq.w	80056aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800559c:	4b96      	ldr	r3, [pc, #600]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d00c      	beq.n	80055c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055a8:	4b93      	ldr	r3, [pc, #588]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030c 	and.w	r3, r3, #12
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d112      	bne.n	80055da <HAL_RCC_OscConfig+0x62>
 80055b4:	4b90      	ldr	r3, [pc, #576]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c0:	d10b      	bne.n	80055da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c2:	4b8d      	ldr	r3, [pc, #564]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d06c      	beq.n	80056a8 <HAL_RCC_OscConfig+0x130>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d168      	bne.n	80056a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e275      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e2:	d106      	bne.n	80055f2 <HAL_RCC_OscConfig+0x7a>
 80055e4:	4b84      	ldr	r3, [pc, #528]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a83      	ldr	r2, [pc, #524]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e02e      	b.n	8005650 <HAL_RCC_OscConfig+0xd8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10c      	bne.n	8005614 <HAL_RCC_OscConfig+0x9c>
 80055fa:	4b7f      	ldr	r3, [pc, #508]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7e      	ldr	r2, [pc, #504]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b7c      	ldr	r3, [pc, #496]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a7b      	ldr	r2, [pc, #492]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 800560c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e01d      	b.n	8005650 <HAL_RCC_OscConfig+0xd8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0xc0>
 800561e:	4b76      	ldr	r3, [pc, #472]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a75      	ldr	r2, [pc, #468]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4b73      	ldr	r3, [pc, #460]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a72      	ldr	r2, [pc, #456]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e00b      	b.n	8005650 <HAL_RCC_OscConfig+0xd8>
 8005638:	4b6f      	ldr	r3, [pc, #444]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a6e      	ldr	r2, [pc, #440]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 800563e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	4b6c      	ldr	r3, [pc, #432]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a6b      	ldr	r2, [pc, #428]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 800564a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d013      	beq.n	8005680 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005658:	f7fe f804 	bl	8003664 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005660:	f7fe f800 	bl	8003664 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b64      	cmp	r3, #100	; 0x64
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e229      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005672:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0xe8>
 800567e:	e014      	b.n	80056aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fd fff0 	bl	8003664 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005688:	f7fd ffec 	bl	8003664 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	; 0x64
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e215      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569a:	4b57      	ldr	r3, [pc, #348]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x110>
 80056a6:	e000      	b.n	80056aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d069      	beq.n	800578a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056b6:	4b50      	ldr	r3, [pc, #320]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 030c 	and.w	r3, r3, #12
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056c2:	4b4d      	ldr	r3, [pc, #308]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 030c 	and.w	r3, r3, #12
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d11c      	bne.n	8005708 <HAL_RCC_OscConfig+0x190>
 80056ce:	4b4a      	ldr	r3, [pc, #296]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d116      	bne.n	8005708 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056da:	4b47      	ldr	r3, [pc, #284]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d005      	beq.n	80056f2 <HAL_RCC_OscConfig+0x17a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d001      	beq.n	80056f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e1e9      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f2:	4b41      	ldr	r3, [pc, #260]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	493d      	ldr	r1, [pc, #244]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005702:	4313      	orrs	r3, r2
 8005704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005706:	e040      	b.n	800578a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d023      	beq.n	8005758 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005710:	4b39      	ldr	r3, [pc, #228]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a38      	ldr	r2, [pc, #224]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fd ffa2 	bl	8003664 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005724:	f7fd ff9e 	bl	8003664 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e1c7      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005736:	4b30      	ldr	r3, [pc, #192]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	4b2d      	ldr	r3, [pc, #180]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4929      	ldr	r1, [pc, #164]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005752:	4313      	orrs	r3, r2
 8005754:	600b      	str	r3, [r1, #0]
 8005756:	e018      	b.n	800578a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005758:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fd ff7e 	bl	8003664 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576c:	f7fd ff7a 	bl	8003664 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e1a3      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577e:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d038      	beq.n	8005808 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d019      	beq.n	80057d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800579e:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80057a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a2:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057aa:	f7fd ff5b 	bl	8003664 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b2:	f7fd ff57 	bl	8003664 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e180      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80057c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x23a>
 80057d0:	e01a      	b.n	8005808 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80057d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d6:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <HAL_RCC_OscConfig+0x280>)
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057de:	f7fd ff41 	bl	8003664 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e4:	e00a      	b.n	80057fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e6:	f7fd ff3d 	bl	8003664 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d903      	bls.n	80057fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e166      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
 80057f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057fc:	4b92      	ldr	r3, [pc, #584]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80057fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1ee      	bne.n	80057e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80a4 	beq.w	800595e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005816:	4b8c      	ldr	r3, [pc, #560]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10d      	bne.n	800583e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005822:	4b89      	ldr	r3, [pc, #548]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	4a88      	ldr	r2, [pc, #544]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582c:	6413      	str	r3, [r2, #64]	; 0x40
 800582e:	4b86      	ldr	r3, [pc, #536]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800583e:	4b83      	ldr	r3, [pc, #524]	; (8005a4c <HAL_RCC_OscConfig+0x4d4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d118      	bne.n	800587c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800584a:	4b80      	ldr	r3, [pc, #512]	; (8005a4c <HAL_RCC_OscConfig+0x4d4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a7f      	ldr	r2, [pc, #508]	; (8005a4c <HAL_RCC_OscConfig+0x4d4>)
 8005850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005856:	f7fd ff05 	bl	8003664 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585e:	f7fd ff01 	bl	8003664 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b64      	cmp	r3, #100	; 0x64
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e12a      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005870:	4b76      	ldr	r3, [pc, #472]	; (8005a4c <HAL_RCC_OscConfig+0x4d4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d106      	bne.n	8005892 <HAL_RCC_OscConfig+0x31a>
 8005884:	4b70      	ldr	r3, [pc, #448]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	4a6f      	ldr	r2, [pc, #444]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6713      	str	r3, [r2, #112]	; 0x70
 8005890:	e02d      	b.n	80058ee <HAL_RCC_OscConfig+0x376>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x33c>
 800589a:	4b6b      	ldr	r3, [pc, #428]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	4a6a      	ldr	r2, [pc, #424]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	6713      	str	r3, [r2, #112]	; 0x70
 80058a6:	4b68      	ldr	r3, [pc, #416]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	4a67      	ldr	r2, [pc, #412]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058ac:	f023 0304 	bic.w	r3, r3, #4
 80058b0:	6713      	str	r3, [r2, #112]	; 0x70
 80058b2:	e01c      	b.n	80058ee <HAL_RCC_OscConfig+0x376>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b05      	cmp	r3, #5
 80058ba:	d10c      	bne.n	80058d6 <HAL_RCC_OscConfig+0x35e>
 80058bc:	4b62      	ldr	r3, [pc, #392]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c0:	4a61      	ldr	r2, [pc, #388]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058c2:	f043 0304 	orr.w	r3, r3, #4
 80058c6:	6713      	str	r3, [r2, #112]	; 0x70
 80058c8:	4b5f      	ldr	r3, [pc, #380]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	4a5e      	ldr	r2, [pc, #376]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	6713      	str	r3, [r2, #112]	; 0x70
 80058d4:	e00b      	b.n	80058ee <HAL_RCC_OscConfig+0x376>
 80058d6:	4b5c      	ldr	r3, [pc, #368]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	4a5b      	ldr	r2, [pc, #364]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	6713      	str	r3, [r2, #112]	; 0x70
 80058e2:	4b59      	ldr	r3, [pc, #356]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	4a58      	ldr	r2, [pc, #352]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80058e8:	f023 0304 	bic.w	r3, r3, #4
 80058ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d015      	beq.n	8005922 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f6:	f7fd feb5 	bl	8003664 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fc:	e00a      	b.n	8005914 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fe:	f7fd feb1 	bl	8003664 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	f241 3288 	movw	r2, #5000	; 0x1388
 800590c:	4293      	cmp	r3, r2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e0d8      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005914:	4b4c      	ldr	r3, [pc, #304]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ee      	beq.n	80058fe <HAL_RCC_OscConfig+0x386>
 8005920:	e014      	b.n	800594c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fd fe9f 	bl	8003664 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005928:	e00a      	b.n	8005940 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fd fe9b 	bl	8003664 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	; 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e0c2      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005940:	4b41      	ldr	r3, [pc, #260]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1ee      	bne.n	800592a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d105      	bne.n	800595e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005952:	4b3d      	ldr	r3, [pc, #244]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	4a3c      	ldr	r2, [pc, #240]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80ae 	beq.w	8005ac4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005968:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 030c 	and.w	r3, r3, #12
 8005970:	2b08      	cmp	r3, #8
 8005972:	d06d      	beq.n	8005a50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d14b      	bne.n	8005a14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597c:	4b32      	ldr	r3, [pc, #200]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a31      	ldr	r2, [pc, #196]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fd fe6c 	bl	8003664 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005990:	f7fd fe68 	bl	8003664 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e091      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a2:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69da      	ldr	r2, [r3, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	019b      	lsls	r3, r3, #6
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	3b01      	subs	r3, #1
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	071b      	lsls	r3, r3, #28
 80059da:	491b      	ldr	r1, [pc, #108]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e0:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 80059e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fd fe3a 	bl	8003664 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f4:	f7fd fe36 	bl	8003664 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e05f      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x47c>
 8005a12:	e057      	b.n	8005ac4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fd fe20 	bl	8003664 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a28:	f7fd fe1c 	bl	8003664 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e045      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a3a:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <HAL_RCC_OscConfig+0x4d0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f0      	bne.n	8005a28 <HAL_RCC_OscConfig+0x4b0>
 8005a46:	e03d      	b.n	8005ac4 <HAL_RCC_OscConfig+0x54c>
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a50:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <HAL_RCC_OscConfig+0x558>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d030      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d129      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d122      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a80:	4013      	ands	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d119      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d10f      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d107      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40023800 	.word	0x40023800

08005ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0d0      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aec:	4b6a      	ldr	r3, [pc, #424]	; (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d910      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b67      	ldr	r3, [pc, #412]	; (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 020f 	bic.w	r2, r3, #15
 8005b02:	4965      	ldr	r1, [pc, #404]	; (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b63      	ldr	r3, [pc, #396]	; (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0b8      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d020      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b34:	4b59      	ldr	r3, [pc, #356]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4a58      	ldr	r2, [pc, #352]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b4c:	4b53      	ldr	r3, [pc, #332]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a52      	ldr	r2, [pc, #328]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b58:	4b50      	ldr	r3, [pc, #320]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	494d      	ldr	r1, [pc, #308]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d040      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7e:	4b47      	ldr	r3, [pc, #284]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d115      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b96:	4b41      	ldr	r3, [pc, #260]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e073      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba6:	4b3d      	ldr	r3, [pc, #244]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e06b      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bb6:	4b39      	ldr	r3, [pc, #228]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f023 0203 	bic.w	r2, r3, #3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	4936      	ldr	r1, [pc, #216]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc8:	f7fd fd4c 	bl	8003664 <HAL_GetTick>
 8005bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bce:	e00a      	b.n	8005be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd0:	f7fd fd48 	bl	8003664 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e053      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be6:	4b2d      	ldr	r3, [pc, #180]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 020c 	and.w	r2, r3, #12
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d1eb      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d210      	bcs.n	8005c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f023 020f 	bic.w	r2, r3, #15
 8005c0e:	4922      	ldr	r1, [pc, #136]	; (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c16:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e032      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c34:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4916      	ldr	r1, [pc, #88]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c52:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	490e      	ldr	r1, [pc, #56]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c66:	f000 f821 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005c6a:	4601      	mov	r1, r0
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8005c78:	5cd3      	ldrb	r3, [r2, r3]
 8005c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8005c7e:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8005c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c82:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fd fb2a 	bl	80032e0 <HAL_InitTick>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40023c00 	.word	0x40023c00
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	0800babc 	.word	0x0800babc
 8005ca4:	20000030 	.word	0x20000030
 8005ca8:	20000034 	.word	0x20000034

08005cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc2:	4b50      	ldr	r3, [pc, #320]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d007      	beq.n	8005cde <HAL_RCC_GetSysClockFreq+0x32>
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d008      	beq.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f040 808d 	bne.w	8005df2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cd8:	4b4b      	ldr	r3, [pc, #300]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005cda:	60bb      	str	r3, [r7, #8]
      break;
 8005cdc:	e08c      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cde:	4b4b      	ldr	r3, [pc, #300]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8005ce0:	60bb      	str	r3, [r7, #8]
      break;
 8005ce2:	e089      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ce4:	4b47      	ldr	r3, [pc, #284]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005cee:	4b45      	ldr	r3, [pc, #276]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d023      	beq.n	8005d42 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cfa:	4b42      	ldr	r3, [pc, #264]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	099b      	lsrs	r3, r3, #6
 8005d00:	f04f 0400 	mov.w	r4, #0
 8005d04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	ea03 0501 	and.w	r5, r3, r1
 8005d10:	ea04 0602 	and.w	r6, r4, r2
 8005d14:	4a3d      	ldr	r2, [pc, #244]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d16:	fb02 f106 	mul.w	r1, r2, r6
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	fb02 f205 	mul.w	r2, r2, r5
 8005d20:	440a      	add	r2, r1
 8005d22:	493a      	ldr	r1, [pc, #232]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d24:	fba5 0101 	umull	r0, r1, r5, r1
 8005d28:	1853      	adds	r3, r2, r1
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f04f 0400 	mov.w	r4, #0
 8005d32:	461a      	mov	r2, r3
 8005d34:	4623      	mov	r3, r4
 8005d36:	f7fa fadb 	bl	80002f0 <__aeabi_uldivmod>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e049      	b.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d42:	4b30      	ldr	r3, [pc, #192]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	099b      	lsrs	r3, r3, #6
 8005d48:	f04f 0400 	mov.w	r4, #0
 8005d4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	ea03 0501 	and.w	r5, r3, r1
 8005d58:	ea04 0602 	and.w	r6, r4, r2
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	4632      	mov	r2, r6
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	f04f 0400 	mov.w	r4, #0
 8005d68:	0154      	lsls	r4, r2, #5
 8005d6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d6e:	014b      	lsls	r3, r1, #5
 8005d70:	4619      	mov	r1, r3
 8005d72:	4622      	mov	r2, r4
 8005d74:	1b49      	subs	r1, r1, r5
 8005d76:	eb62 0206 	sbc.w	r2, r2, r6
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	f04f 0400 	mov.w	r4, #0
 8005d82:	0194      	lsls	r4, r2, #6
 8005d84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d88:	018b      	lsls	r3, r1, #6
 8005d8a:	1a5b      	subs	r3, r3, r1
 8005d8c:	eb64 0402 	sbc.w	r4, r4, r2
 8005d90:	f04f 0100 	mov.w	r1, #0
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	00e2      	lsls	r2, r4, #3
 8005d9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d9e:	00d9      	lsls	r1, r3, #3
 8005da0:	460b      	mov	r3, r1
 8005da2:	4614      	mov	r4, r2
 8005da4:	195b      	adds	r3, r3, r5
 8005da6:	eb44 0406 	adc.w	r4, r4, r6
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	02a2      	lsls	r2, r4, #10
 8005db4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005db8:	0299      	lsls	r1, r3, #10
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f04f 0400 	mov.w	r4, #0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4623      	mov	r3, r4
 8005dcc:	f7fa fa90 	bl	80002f0 <__aeabi_uldivmod>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	0c1b      	lsrs	r3, r3, #16
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	3301      	adds	r3, #1
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	60bb      	str	r3, [r7, #8]
      break;
 8005df0:	e002      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005df2:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005df4:	60bb      	str	r3, [r7, #8]
      break;
 8005df6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005df8:	68bb      	ldr	r3, [r7, #8]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800
 8005e08:	00f42400 	.word	0x00f42400
 8005e0c:	017d7840 	.word	0x017d7840

08005e10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e14:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e16:	681b      	ldr	r3, [r3, #0]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000030 	.word	0x20000030

08005e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e2c:	f7ff fff0 	bl	8005e10 <HAL_RCC_GetHCLKFreq>
 8005e30:	4601      	mov	r1, r0
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	0a9b      	lsrs	r3, r3, #10
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	4a03      	ldr	r2, [pc, #12]	; (8005e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e3e:	5cd3      	ldrb	r3, [r2, r3]
 8005e40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	0800bacc 	.word	0x0800bacc

08005e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e54:	f7ff ffdc 	bl	8005e10 <HAL_RCC_GetHCLKFreq>
 8005e58:	4601      	mov	r1, r0
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0b5b      	lsrs	r3, r3, #13
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	4a03      	ldr	r2, [pc, #12]	; (8005e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e66:	5cd3      	ldrb	r3, [r2, r3]
 8005e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40023800 	.word	0x40023800
 8005e74:	0800bacc 	.word	0x0800bacc

08005e78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	220f      	movs	r2, #15
 8005e86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e88:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0203 	and.w	r2, r3, #3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	08db      	lsrs	r3, r3, #3
 8005eb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <HAL_RCC_GetClockConfig+0x60>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	601a      	str	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	40023c00 	.word	0x40023c00

08005edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d012      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f04:	4b69      	ldr	r3, [pc, #420]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	4a68      	ldr	r2, [pc, #416]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f0e:	6093      	str	r3, [r2, #8]
 8005f10:	4b66      	ldr	r3, [pc, #408]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	4964      	ldr	r1, [pc, #400]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f26:	2301      	movs	r3, #1
 8005f28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d017      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f36:	4b5d      	ldr	r3, [pc, #372]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	4959      	ldr	r1, [pc, #356]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f54:	d101      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f56:	2301      	movs	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f62:	2301      	movs	r3, #1
 8005f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f72:	4b4e      	ldr	r3, [pc, #312]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	494a      	ldr	r1, [pc, #296]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f90:	d101      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f92:	2301      	movs	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 808b 	beq.w	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fc0:	4b3a      	ldr	r3, [pc, #232]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	4a39      	ldr	r2, [pc, #228]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fca:	6413      	str	r3, [r2, #64]	; 0x40
 8005fcc:	4b37      	ldr	r3, [pc, #220]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	60bb      	str	r3, [r7, #8]
 8005fd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fd8:	4b35      	ldr	r3, [pc, #212]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a34      	ldr	r2, [pc, #208]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe4:	f7fd fb3e 	bl	8003664 <HAL_GetTick>
 8005fe8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fec:	f7fd fb3a 	bl	8003664 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b64      	cmp	r3, #100	; 0x64
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e356      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ffe:	4b2c      	ldr	r3, [pc, #176]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0f0      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800600a:	4b28      	ldr	r3, [pc, #160]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006012:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d035      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	429a      	cmp	r2, r3
 8006026:	d02e      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006028:	4b20      	ldr	r3, [pc, #128]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006030:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006032:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800603c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800603e:	4b1b      	ldr	r3, [pc, #108]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	4a1a      	ldr	r2, [pc, #104]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006048:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800604a:	4a18      	ldr	r2, [pc, #96]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006050:	4b16      	ldr	r3, [pc, #88]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d114      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fd fb02 	bl	8003664 <HAL_GetTick>
 8006060:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006062:	e00a      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006064:	f7fd fafe 	bl	8003664 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e318      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607a:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0ee      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006092:	d111      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060a2:	400b      	ands	r3, r1
 80060a4:	4901      	ldr	r1, [pc, #4]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
 80060aa:	e00b      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060ac:	40023800 	.word	0x40023800
 80060b0:	40007000 	.word	0x40007000
 80060b4:	0ffffcff 	.word	0x0ffffcff
 80060b8:	4bb1      	ldr	r3, [pc, #708]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4ab0      	ldr	r2, [pc, #704]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060c2:	6093      	str	r3, [r2, #8]
 80060c4:	4bae      	ldr	r3, [pc, #696]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d0:	49ab      	ldr	r1, [pc, #684]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d010      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060e2:	4ba7      	ldr	r3, [pc, #668]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e8:	4aa5      	ldr	r2, [pc, #660]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060f2:	4ba3      	ldr	r3, [pc, #652]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	49a0      	ldr	r1, [pc, #640]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006110:	4b9b      	ldr	r3, [pc, #620]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006116:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611e:	4998      	ldr	r1, [pc, #608]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006132:	4b93      	ldr	r3, [pc, #588]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006138:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006140:	498f      	ldr	r1, [pc, #572]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006154:	4b8a      	ldr	r3, [pc, #552]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006162:	4987      	ldr	r1, [pc, #540]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006176:	4b82      	ldr	r3, [pc, #520]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006184:	497e      	ldr	r1, [pc, #504]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006198:	4b79      	ldr	r3, [pc, #484]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f023 0203 	bic.w	r2, r3, #3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	4976      	ldr	r1, [pc, #472]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061ba:	4b71      	ldr	r3, [pc, #452]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c0:	f023 020c 	bic.w	r2, r3, #12
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c8:	496d      	ldr	r1, [pc, #436]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061dc:	4b68      	ldr	r3, [pc, #416]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ea:	4965      	ldr	r1, [pc, #404]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061fe:	4b60      	ldr	r3, [pc, #384]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006204:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620c:	495c      	ldr	r1, [pc, #368]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006220:	4b57      	ldr	r3, [pc, #348]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006226:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	4954      	ldr	r1, [pc, #336]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006242:	4b4f      	ldr	r3, [pc, #316]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006248:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006250:	494b      	ldr	r1, [pc, #300]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006264:	4b46      	ldr	r3, [pc, #280]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006272:	4943      	ldr	r1, [pc, #268]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006286:	4b3e      	ldr	r3, [pc, #248]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006294:	493a      	ldr	r1, [pc, #232]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062a8:	4b35      	ldr	r3, [pc, #212]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062b6:	4932      	ldr	r1, [pc, #200]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d011      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062ca:	4b2d      	ldr	r3, [pc, #180]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d8:	4929      	ldr	r1, [pc, #164]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062e8:	d101      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062ea:	2301      	movs	r3, #1
 80062ec:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062fa:	4b21      	ldr	r3, [pc, #132]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006300:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006308:	491d      	ldr	r1, [pc, #116]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00b      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006322:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800632c:	4914      	ldr	r1, [pc, #80]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006340:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006350:	490b      	ldr	r1, [pc, #44]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00f      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006364:	4b06      	ldr	r3, [pc, #24]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800636a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006374:	4902      	ldr	r1, [pc, #8]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800637c:	e002      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800637e:	bf00      	nop
 8006380:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006390:	4b80      	ldr	r3, [pc, #512]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006396:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a0:	497c      	ldr	r1, [pc, #496]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d005      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063b6:	f040 80d6 	bne.w	8006566 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063ba:	4b76      	ldr	r3, [pc, #472]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a75      	ldr	r2, [pc, #468]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80063c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063c6:	f7fd f94d 	bl	8003664 <HAL_GetTick>
 80063ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063cc:	e008      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063ce:	f7fd f949 	bl	8003664 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b64      	cmp	r3, #100	; 0x64
 80063da:	d901      	bls.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e165      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063e0:	4b6c      	ldr	r3, [pc, #432]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f0      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d021      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x560>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d11d      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006400:	4b64      	ldr	r3, [pc, #400]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006406:	0c1b      	lsrs	r3, r3, #16
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800640e:	4b61      	ldr	r3, [pc, #388]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006414:	0e1b      	lsrs	r3, r3, #24
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	019a      	lsls	r2, r3, #6
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	041b      	lsls	r3, r3, #16
 8006426:	431a      	orrs	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	061b      	lsls	r3, r3, #24
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	071b      	lsls	r3, r3, #28
 8006434:	4957      	ldr	r1, [pc, #348]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006450:	d00a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800645a:	2b00      	cmp	r3, #0
 800645c:	d02e      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006466:	d129      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006468:	4b4a      	ldr	r3, [pc, #296]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800646a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	f003 0303 	and.w	r3, r3, #3
 8006474:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006476:	4b47      	ldr	r3, [pc, #284]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800647c:	0f1b      	lsrs	r3, r3, #28
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	019a      	lsls	r2, r3, #6
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	041b      	lsls	r3, r3, #16
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	061b      	lsls	r3, r3, #24
 8006496:	431a      	orrs	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	071b      	lsls	r3, r3, #28
 800649c:	493d      	ldr	r1, [pc, #244]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80064a4:	4b3b      	ldr	r3, [pc, #236]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80064a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064aa:	f023 021f 	bic.w	r2, r3, #31
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	3b01      	subs	r3, #1
 80064b4:	4937      	ldr	r1, [pc, #220]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01d      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064c8:	4b32      	ldr	r3, [pc, #200]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80064ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ce:	0e1b      	lsrs	r3, r3, #24
 80064d0:	f003 030f 	and.w	r3, r3, #15
 80064d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064d6:	4b2f      	ldr	r3, [pc, #188]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80064d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064dc:	0f1b      	lsrs	r3, r3, #28
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	019a      	lsls	r2, r3, #6
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	431a      	orrs	r2, r3
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	061b      	lsls	r3, r3, #24
 80064f6:	431a      	orrs	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	071b      	lsls	r3, r3, #28
 80064fc:	4925      	ldr	r1, [pc, #148]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d011      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	019a      	lsls	r2, r3, #6
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	061b      	lsls	r3, r3, #24
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	071b      	lsls	r3, r3, #28
 800652c:	4919      	ldr	r1, [pc, #100]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006534:	4b17      	ldr	r3, [pc, #92]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a16      	ldr	r2, [pc, #88]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800653a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800653e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006540:	f7fd f890 	bl	8003664 <HAL_GetTick>
 8006544:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006546:	e008      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006548:	f7fd f88c 	bl	8003664 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b64      	cmp	r3, #100	; 0x64
 8006554:	d901      	bls.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e0a8      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800655a:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0f0      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b01      	cmp	r3, #1
 800656a:	f040 809e 	bne.w	80066aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a08      	ldr	r2, [pc, #32]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657a:	f7fd f873 	bl	8003664 <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006580:	e00a      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006582:	f7fd f86f 	bl	8003664 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b64      	cmp	r3, #100	; 0x64
 800658e:	d903      	bls.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e08b      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8006594:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006598:	4b46      	ldr	r3, [pc, #280]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065a4:	d0ed      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d02e      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d12a      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065ce:	4b39      	ldr	r3, [pc, #228]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	0c1b      	lsrs	r3, r3, #16
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065dc:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	0f1b      	lsrs	r3, r3, #28
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	019a      	lsls	r2, r3, #6
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	041b      	lsls	r3, r3, #16
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	061b      	lsls	r3, r3, #24
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	071b      	lsls	r3, r3, #28
 8006602:	492c      	ldr	r1, [pc, #176]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006604:	4313      	orrs	r3, r2
 8006606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800660a:	4b2a      	ldr	r3, [pc, #168]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800660c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006610:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	3b01      	subs	r3, #1
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	4925      	ldr	r1, [pc, #148]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d022      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006638:	d11d      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800663a:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006640:	0e1b      	lsrs	r3, r3, #24
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664e:	0f1b      	lsrs	r3, r3, #28
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	019a      	lsls	r2, r3, #6
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	431a      	orrs	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	061b      	lsls	r3, r3, #24
 8006668:	431a      	orrs	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	071b      	lsls	r3, r3, #28
 800666e:	4911      	ldr	r1, [pc, #68]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006676:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a0e      	ldr	r2, [pc, #56]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800667c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006682:	f7fc ffef 	bl	8003664 <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006688:	e008      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800668a:	f7fc ffeb 	bl	8003664 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b64      	cmp	r3, #100	; 0x64
 8006696:	d901      	bls.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e007      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a8:	d1ef      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40023800 	.word	0x40023800

080066b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e01d      	b.n	8006706 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f815 	bl	800670e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f000 f986 	bl	8006a08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
	...

08006724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <HAL_TIM_Base_Start_IT+0x50>)
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b06      	cmp	r3, #6
 800674c:	d00b      	beq.n	8006766 <HAL_TIM_Base_Start_IT+0x42>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d007      	beq.n	8006766 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	00010007 	.word	0x00010007

08006778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d122      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b02      	cmp	r3, #2
 800679a:	d11b      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0202 	mvn.w	r2, #2
 80067a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f905 	bl	80069ca <HAL_TIM_IC_CaptureCallback>
 80067c0:	e005      	b.n	80067ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8f7 	bl	80069b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f908 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d122      	bne.n	8006828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d11b      	bne.n	8006828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0204 	mvn.w	r2, #4
 80067f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f8db 	bl	80069ca <HAL_TIM_IC_CaptureCallback>
 8006814:	e005      	b.n	8006822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8cd 	bl	80069b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f8de 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b08      	cmp	r3, #8
 8006834:	d122      	bne.n	800687c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b08      	cmp	r3, #8
 8006842:	d11b      	bne.n	800687c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0208 	mvn.w	r2, #8
 800684c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2204      	movs	r2, #4
 8006852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f8b1 	bl	80069ca <HAL_TIM_IC_CaptureCallback>
 8006868:	e005      	b.n	8006876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f8a3 	bl	80069b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f8b4 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b10      	cmp	r3, #16
 8006888:	d122      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b10      	cmp	r3, #16
 8006896:	d11b      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0210 	mvn.w	r2, #16
 80068a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2208      	movs	r2, #8
 80068a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f887 	bl	80069ca <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f879 	bl	80069b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f88a 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10e      	bne.n	80068fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d107      	bne.n	80068fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0201 	mvn.w	r2, #1
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fc fcb4 	bl	8003264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b80      	cmp	r3, #128	; 0x80
 8006908:	d10e      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b80      	cmp	r3, #128	; 0x80
 8006916:	d107      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f91a 	bl	8006b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006936:	d10e      	bne.n	8006956 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d107      	bne.n	8006956 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800694e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f90d 	bl	8006b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d10e      	bne.n	8006982 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d107      	bne.n	8006982 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800697a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f838 	bl	80069f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b20      	cmp	r3, #32
 800698e:	d10e      	bne.n	80069ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b20      	cmp	r3, #32
 800699c:	d107      	bne.n	80069ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f06f 0220 	mvn.w	r2, #32
 80069a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8cd 	bl	8006b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
	...

08006a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a40      	ldr	r2, [pc, #256]	; (8006b1c <TIM_Base_SetConfig+0x114>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d013      	beq.n	8006a48 <TIM_Base_SetConfig+0x40>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a26:	d00f      	beq.n	8006a48 <TIM_Base_SetConfig+0x40>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a3d      	ldr	r2, [pc, #244]	; (8006b20 <TIM_Base_SetConfig+0x118>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00b      	beq.n	8006a48 <TIM_Base_SetConfig+0x40>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a3c      	ldr	r2, [pc, #240]	; (8006b24 <TIM_Base_SetConfig+0x11c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d007      	beq.n	8006a48 <TIM_Base_SetConfig+0x40>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a3b      	ldr	r2, [pc, #236]	; (8006b28 <TIM_Base_SetConfig+0x120>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d003      	beq.n	8006a48 <TIM_Base_SetConfig+0x40>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a3a      	ldr	r2, [pc, #232]	; (8006b2c <TIM_Base_SetConfig+0x124>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d108      	bne.n	8006a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a2f      	ldr	r2, [pc, #188]	; (8006b1c <TIM_Base_SetConfig+0x114>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d02b      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a68:	d027      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a2c      	ldr	r2, [pc, #176]	; (8006b20 <TIM_Base_SetConfig+0x118>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d023      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a2b      	ldr	r2, [pc, #172]	; (8006b24 <TIM_Base_SetConfig+0x11c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01f      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a2a      	ldr	r2, [pc, #168]	; (8006b28 <TIM_Base_SetConfig+0x120>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01b      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a29      	ldr	r2, [pc, #164]	; (8006b2c <TIM_Base_SetConfig+0x124>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d017      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <TIM_Base_SetConfig+0x128>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a27      	ldr	r2, [pc, #156]	; (8006b34 <TIM_Base_SetConfig+0x12c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00f      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a26      	ldr	r2, [pc, #152]	; (8006b38 <TIM_Base_SetConfig+0x130>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00b      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a25      	ldr	r2, [pc, #148]	; (8006b3c <TIM_Base_SetConfig+0x134>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d007      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a24      	ldr	r2, [pc, #144]	; (8006b40 <TIM_Base_SetConfig+0x138>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a23      	ldr	r2, [pc, #140]	; (8006b44 <TIM_Base_SetConfig+0x13c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d108      	bne.n	8006acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <TIM_Base_SetConfig+0x114>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_Base_SetConfig+0xf8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a0c      	ldr	r2, [pc, #48]	; (8006b2c <TIM_Base_SetConfig+0x124>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d103      	bne.n	8006b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	615a      	str	r2, [r3, #20]
}
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00
 8006b2c:	40010400 	.word	0x40010400
 8006b30:	40014000 	.word	0x40014000
 8006b34:	40014400 	.word	0x40014400
 8006b38:	40014800 	.word	0x40014800
 8006b3c:	40001800 	.word	0x40001800
 8006b40:	40001c00 	.word	0x40001c00
 8006b44:	40002000 	.word	0x40002000

08006b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e040      	b.n	8006c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fc fcce 	bl	8003548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2224      	movs	r2, #36	; 0x24
 8006bb0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f8be 	bl	8006d44 <UART_SetConfig>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e022      	b.n	8006c18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fb5c 	bl	8007298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fbe3 	bl	80073dc <UART_CheckIdleState>
 8006c16:	4603      	mov	r3, r0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d17f      	bne.n	8006d38 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_UART_Transmit+0x24>
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e078      	b.n	8006d3a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_UART_Transmit+0x36>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e071      	b.n	8006d3a <HAL_UART_Transmit+0x11a>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2221      	movs	r2, #33	; 0x21
 8006c68:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006c6a:	f7fc fcfb 	bl	8003664 <HAL_GetTick>
 8006c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	88fa      	ldrh	r2, [r7, #6]
 8006c74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c88:	d108      	bne.n	8006c9c <HAL_UART_Transmit+0x7c>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d104      	bne.n	8006c9c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	e003      	b.n	8006ca4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006cac:	e02c      	b.n	8006d08 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2180      	movs	r1, #128	; 0x80
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fbd4 	bl	8007466 <UART_WaitOnFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e038      	b.n	8006d3a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10b      	bne.n	8006ce6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	e007      	b.n	8006cf6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1cc      	bne.n	8006cae <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2140      	movs	r1, #64	; 0x40
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 fba1 	bl	8007466 <UART_WaitOnFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e005      	b.n	8006d3a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2220      	movs	r2, #32
 8006d32:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e000      	b.n	8006d3a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006d38:	2302      	movs	r3, #2
  }
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3720      	adds	r7, #32
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4bb1      	ldr	r3, [pc, #708]	; (8007038 <UART_SetConfig+0x2f4>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	6939      	ldr	r1, [r7, #16]
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a9f      	ldr	r2, [pc, #636]	; (800703c <UART_SetConfig+0x2f8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d121      	bne.n	8006e08 <UART_SetConfig+0xc4>
 8006dc4:	4b9e      	ldr	r3, [pc, #632]	; (8007040 <UART_SetConfig+0x2fc>)
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d816      	bhi.n	8006e00 <UART_SetConfig+0xbc>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <UART_SetConfig+0x94>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006de9 	.word	0x08006de9
 8006ddc:	08006df5 	.word	0x08006df5
 8006de0:	08006def 	.word	0x08006def
 8006de4:	08006dfb 	.word	0x08006dfb
 8006de8:	2301      	movs	r3, #1
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e151      	b.n	8007092 <UART_SetConfig+0x34e>
 8006dee:	2302      	movs	r3, #2
 8006df0:	77fb      	strb	r3, [r7, #31]
 8006df2:	e14e      	b.n	8007092 <UART_SetConfig+0x34e>
 8006df4:	2304      	movs	r3, #4
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e14b      	b.n	8007092 <UART_SetConfig+0x34e>
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e148      	b.n	8007092 <UART_SetConfig+0x34e>
 8006e00:	2310      	movs	r3, #16
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	bf00      	nop
 8006e06:	e144      	b.n	8007092 <UART_SetConfig+0x34e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a8d      	ldr	r2, [pc, #564]	; (8007044 <UART_SetConfig+0x300>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d134      	bne.n	8006e7c <UART_SetConfig+0x138>
 8006e12:	4b8b      	ldr	r3, [pc, #556]	; (8007040 <UART_SetConfig+0x2fc>)
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e18:	f003 030c 	and.w	r3, r3, #12
 8006e1c:	2b0c      	cmp	r3, #12
 8006e1e:	d829      	bhi.n	8006e74 <UART_SetConfig+0x130>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <UART_SetConfig+0xe4>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e5d 	.word	0x08006e5d
 8006e2c:	08006e75 	.word	0x08006e75
 8006e30:	08006e75 	.word	0x08006e75
 8006e34:	08006e75 	.word	0x08006e75
 8006e38:	08006e69 	.word	0x08006e69
 8006e3c:	08006e75 	.word	0x08006e75
 8006e40:	08006e75 	.word	0x08006e75
 8006e44:	08006e75 	.word	0x08006e75
 8006e48:	08006e63 	.word	0x08006e63
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e75 	.word	0x08006e75
 8006e58:	08006e6f 	.word	0x08006e6f
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e117      	b.n	8007092 <UART_SetConfig+0x34e>
 8006e62:	2302      	movs	r3, #2
 8006e64:	77fb      	strb	r3, [r7, #31]
 8006e66:	e114      	b.n	8007092 <UART_SetConfig+0x34e>
 8006e68:	2304      	movs	r3, #4
 8006e6a:	77fb      	strb	r3, [r7, #31]
 8006e6c:	e111      	b.n	8007092 <UART_SetConfig+0x34e>
 8006e6e:	2308      	movs	r3, #8
 8006e70:	77fb      	strb	r3, [r7, #31]
 8006e72:	e10e      	b.n	8007092 <UART_SetConfig+0x34e>
 8006e74:	2310      	movs	r3, #16
 8006e76:	77fb      	strb	r3, [r7, #31]
 8006e78:	bf00      	nop
 8006e7a:	e10a      	b.n	8007092 <UART_SetConfig+0x34e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a71      	ldr	r2, [pc, #452]	; (8007048 <UART_SetConfig+0x304>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d120      	bne.n	8006ec8 <UART_SetConfig+0x184>
 8006e86:	4b6e      	ldr	r3, [pc, #440]	; (8007040 <UART_SetConfig+0x2fc>)
 8006e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d00f      	beq.n	8006eb4 <UART_SetConfig+0x170>
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d802      	bhi.n	8006e9e <UART_SetConfig+0x15a>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <UART_SetConfig+0x164>
 8006e9c:	e010      	b.n	8006ec0 <UART_SetConfig+0x17c>
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d005      	beq.n	8006eae <UART_SetConfig+0x16a>
 8006ea2:	2b30      	cmp	r3, #48	; 0x30
 8006ea4:	d009      	beq.n	8006eba <UART_SetConfig+0x176>
 8006ea6:	e00b      	b.n	8006ec0 <UART_SetConfig+0x17c>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e0f1      	b.n	8007092 <UART_SetConfig+0x34e>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e0ee      	b.n	8007092 <UART_SetConfig+0x34e>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e0eb      	b.n	8007092 <UART_SetConfig+0x34e>
 8006eba:	2308      	movs	r3, #8
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e0e8      	b.n	8007092 <UART_SetConfig+0x34e>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	77fb      	strb	r3, [r7, #31]
 8006ec4:	bf00      	nop
 8006ec6:	e0e4      	b.n	8007092 <UART_SetConfig+0x34e>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a5f      	ldr	r2, [pc, #380]	; (800704c <UART_SetConfig+0x308>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d120      	bne.n	8006f14 <UART_SetConfig+0x1d0>
 8006ed2:	4b5b      	ldr	r3, [pc, #364]	; (8007040 <UART_SetConfig+0x2fc>)
 8006ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d00f      	beq.n	8006f00 <UART_SetConfig+0x1bc>
 8006ee0:	2b40      	cmp	r3, #64	; 0x40
 8006ee2:	d802      	bhi.n	8006eea <UART_SetConfig+0x1a6>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <UART_SetConfig+0x1b0>
 8006ee8:	e010      	b.n	8006f0c <UART_SetConfig+0x1c8>
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d005      	beq.n	8006efa <UART_SetConfig+0x1b6>
 8006eee:	2bc0      	cmp	r3, #192	; 0xc0
 8006ef0:	d009      	beq.n	8006f06 <UART_SetConfig+0x1c2>
 8006ef2:	e00b      	b.n	8006f0c <UART_SetConfig+0x1c8>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	77fb      	strb	r3, [r7, #31]
 8006ef8:	e0cb      	b.n	8007092 <UART_SetConfig+0x34e>
 8006efa:	2302      	movs	r3, #2
 8006efc:	77fb      	strb	r3, [r7, #31]
 8006efe:	e0c8      	b.n	8007092 <UART_SetConfig+0x34e>
 8006f00:	2304      	movs	r3, #4
 8006f02:	77fb      	strb	r3, [r7, #31]
 8006f04:	e0c5      	b.n	8007092 <UART_SetConfig+0x34e>
 8006f06:	2308      	movs	r3, #8
 8006f08:	77fb      	strb	r3, [r7, #31]
 8006f0a:	e0c2      	b.n	8007092 <UART_SetConfig+0x34e>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	bf00      	nop
 8006f12:	e0be      	b.n	8007092 <UART_SetConfig+0x34e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a4d      	ldr	r2, [pc, #308]	; (8007050 <UART_SetConfig+0x30c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d124      	bne.n	8006f68 <UART_SetConfig+0x224>
 8006f1e:	4b48      	ldr	r3, [pc, #288]	; (8007040 <UART_SetConfig+0x2fc>)
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2c:	d012      	beq.n	8006f54 <UART_SetConfig+0x210>
 8006f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f32:	d802      	bhi.n	8006f3a <UART_SetConfig+0x1f6>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <UART_SetConfig+0x204>
 8006f38:	e012      	b.n	8006f60 <UART_SetConfig+0x21c>
 8006f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f3e:	d006      	beq.n	8006f4e <UART_SetConfig+0x20a>
 8006f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f44:	d009      	beq.n	8006f5a <UART_SetConfig+0x216>
 8006f46:	e00b      	b.n	8006f60 <UART_SetConfig+0x21c>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e0a1      	b.n	8007092 <UART_SetConfig+0x34e>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e09e      	b.n	8007092 <UART_SetConfig+0x34e>
 8006f54:	2304      	movs	r3, #4
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e09b      	b.n	8007092 <UART_SetConfig+0x34e>
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e098      	b.n	8007092 <UART_SetConfig+0x34e>
 8006f60:	2310      	movs	r3, #16
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	bf00      	nop
 8006f66:	e094      	b.n	8007092 <UART_SetConfig+0x34e>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a39      	ldr	r2, [pc, #228]	; (8007054 <UART_SetConfig+0x310>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d124      	bne.n	8006fbc <UART_SetConfig+0x278>
 8006f72:	4b33      	ldr	r3, [pc, #204]	; (8007040 <UART_SetConfig+0x2fc>)
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f80:	d012      	beq.n	8006fa8 <UART_SetConfig+0x264>
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f86:	d802      	bhi.n	8006f8e <UART_SetConfig+0x24a>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <UART_SetConfig+0x258>
 8006f8c:	e012      	b.n	8006fb4 <UART_SetConfig+0x270>
 8006f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f92:	d006      	beq.n	8006fa2 <UART_SetConfig+0x25e>
 8006f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f98:	d009      	beq.n	8006fae <UART_SetConfig+0x26a>
 8006f9a:	e00b      	b.n	8006fb4 <UART_SetConfig+0x270>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e077      	b.n	8007092 <UART_SetConfig+0x34e>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	77fb      	strb	r3, [r7, #31]
 8006fa6:	e074      	b.n	8007092 <UART_SetConfig+0x34e>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	77fb      	strb	r3, [r7, #31]
 8006fac:	e071      	b.n	8007092 <UART_SetConfig+0x34e>
 8006fae:	2308      	movs	r3, #8
 8006fb0:	77fb      	strb	r3, [r7, #31]
 8006fb2:	e06e      	b.n	8007092 <UART_SetConfig+0x34e>
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	bf00      	nop
 8006fba:	e06a      	b.n	8007092 <UART_SetConfig+0x34e>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a25      	ldr	r2, [pc, #148]	; (8007058 <UART_SetConfig+0x314>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d124      	bne.n	8007010 <UART_SetConfig+0x2cc>
 8006fc6:	4b1e      	ldr	r3, [pc, #120]	; (8007040 <UART_SetConfig+0x2fc>)
 8006fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fcc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd4:	d012      	beq.n	8006ffc <UART_SetConfig+0x2b8>
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fda:	d802      	bhi.n	8006fe2 <UART_SetConfig+0x29e>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <UART_SetConfig+0x2ac>
 8006fe0:	e012      	b.n	8007008 <UART_SetConfig+0x2c4>
 8006fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fe6:	d006      	beq.n	8006ff6 <UART_SetConfig+0x2b2>
 8006fe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fec:	d009      	beq.n	8007002 <UART_SetConfig+0x2be>
 8006fee:	e00b      	b.n	8007008 <UART_SetConfig+0x2c4>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	77fb      	strb	r3, [r7, #31]
 8006ff4:	e04d      	b.n	8007092 <UART_SetConfig+0x34e>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	77fb      	strb	r3, [r7, #31]
 8006ffa:	e04a      	b.n	8007092 <UART_SetConfig+0x34e>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e047      	b.n	8007092 <UART_SetConfig+0x34e>
 8007002:	2308      	movs	r3, #8
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	e044      	b.n	8007092 <UART_SetConfig+0x34e>
 8007008:	2310      	movs	r3, #16
 800700a:	77fb      	strb	r3, [r7, #31]
 800700c:	bf00      	nop
 800700e:	e040      	b.n	8007092 <UART_SetConfig+0x34e>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a11      	ldr	r2, [pc, #68]	; (800705c <UART_SetConfig+0x318>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d139      	bne.n	800708e <UART_SetConfig+0x34a>
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <UART_SetConfig+0x2fc>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007028:	d027      	beq.n	800707a <UART_SetConfig+0x336>
 800702a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800702e:	d817      	bhi.n	8007060 <UART_SetConfig+0x31c>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01c      	beq.n	800706e <UART_SetConfig+0x32a>
 8007034:	e027      	b.n	8007086 <UART_SetConfig+0x342>
 8007036:	bf00      	nop
 8007038:	efff69f3 	.word	0xefff69f3
 800703c:	40011000 	.word	0x40011000
 8007040:	40023800 	.word	0x40023800
 8007044:	40004400 	.word	0x40004400
 8007048:	40004800 	.word	0x40004800
 800704c:	40004c00 	.word	0x40004c00
 8007050:	40005000 	.word	0x40005000
 8007054:	40011400 	.word	0x40011400
 8007058:	40007800 	.word	0x40007800
 800705c:	40007c00 	.word	0x40007c00
 8007060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007064:	d006      	beq.n	8007074 <UART_SetConfig+0x330>
 8007066:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800706a:	d009      	beq.n	8007080 <UART_SetConfig+0x33c>
 800706c:	e00b      	b.n	8007086 <UART_SetConfig+0x342>
 800706e:	2300      	movs	r3, #0
 8007070:	77fb      	strb	r3, [r7, #31]
 8007072:	e00e      	b.n	8007092 <UART_SetConfig+0x34e>
 8007074:	2302      	movs	r3, #2
 8007076:	77fb      	strb	r3, [r7, #31]
 8007078:	e00b      	b.n	8007092 <UART_SetConfig+0x34e>
 800707a:	2304      	movs	r3, #4
 800707c:	77fb      	strb	r3, [r7, #31]
 800707e:	e008      	b.n	8007092 <UART_SetConfig+0x34e>
 8007080:	2308      	movs	r3, #8
 8007082:	77fb      	strb	r3, [r7, #31]
 8007084:	e005      	b.n	8007092 <UART_SetConfig+0x34e>
 8007086:	2310      	movs	r3, #16
 8007088:	77fb      	strb	r3, [r7, #31]
 800708a:	bf00      	nop
 800708c:	e001      	b.n	8007092 <UART_SetConfig+0x34e>
 800708e:	2310      	movs	r3, #16
 8007090:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800709a:	d17f      	bne.n	800719c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800709c:	7ffb      	ldrb	r3, [r7, #31]
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d85c      	bhi.n	800715c <UART_SetConfig+0x418>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <UART_SetConfig+0x364>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070ed 	.word	0x080070ed
 80070b0:	0800710d 	.word	0x0800710d
 80070b4:	0800715d 	.word	0x0800715d
 80070b8:	08007125 	.word	0x08007125
 80070bc:	0800715d 	.word	0x0800715d
 80070c0:	0800715d 	.word	0x0800715d
 80070c4:	0800715d 	.word	0x0800715d
 80070c8:	08007145 	.word	0x08007145
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070cc:	f7fe feac 	bl	8005e28 <HAL_RCC_GetPCLK1Freq>
 80070d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	005a      	lsls	r2, r3, #1
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	085b      	lsrs	r3, r3, #1
 80070dc:	441a      	add	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	61bb      	str	r3, [r7, #24]
        break;
 80070ea:	e03a      	b.n	8007162 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070ec:	f7fe feb0 	bl	8005e50 <HAL_RCC_GetPCLK2Freq>
 80070f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	005a      	lsls	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	441a      	add	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	fbb2 f3f3 	udiv	r3, r2, r3
 8007106:	b29b      	uxth	r3, r3
 8007108:	61bb      	str	r3, [r7, #24]
        break;
 800710a:	e02a      	b.n	8007162 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	085a      	lsrs	r2, r3, #1
 8007112:	4b5f      	ldr	r3, [pc, #380]	; (8007290 <UART_SetConfig+0x54c>)
 8007114:	4413      	add	r3, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6852      	ldr	r2, [r2, #4]
 800711a:	fbb3 f3f2 	udiv	r3, r3, r2
 800711e:	b29b      	uxth	r3, r3
 8007120:	61bb      	str	r3, [r7, #24]
        break;
 8007122:	e01e      	b.n	8007162 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007124:	f7fe fdc2 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8007128:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	005a      	lsls	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	441a      	add	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	fbb2 f3f3 	udiv	r3, r2, r3
 800713e:	b29b      	uxth	r3, r3
 8007140:	61bb      	str	r3, [r7, #24]
        break;
 8007142:	e00e      	b.n	8007162 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	085b      	lsrs	r3, r3, #1
 800714a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	fbb2 f3f3 	udiv	r3, r2, r3
 8007156:	b29b      	uxth	r3, r3
 8007158:	61bb      	str	r3, [r7, #24]
        break;
 800715a:	e002      	b.n	8007162 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	75fb      	strb	r3, [r7, #23]
        break;
 8007160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b0f      	cmp	r3, #15
 8007166:	d916      	bls.n	8007196 <UART_SetConfig+0x452>
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800716e:	d212      	bcs.n	8007196 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f023 030f 	bic.w	r3, r3, #15
 8007178:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	b29b      	uxth	r3, r3
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	b29a      	uxth	r2, r3
 8007186:	897b      	ldrh	r3, [r7, #10]
 8007188:	4313      	orrs	r3, r2
 800718a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	897a      	ldrh	r2, [r7, #10]
 8007192:	60da      	str	r2, [r3, #12]
 8007194:	e070      	b.n	8007278 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	75fb      	strb	r3, [r7, #23]
 800719a:	e06d      	b.n	8007278 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800719c:	7ffb      	ldrb	r3, [r7, #31]
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d859      	bhi.n	8007256 <UART_SetConfig+0x512>
 80071a2:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <UART_SetConfig+0x464>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080071cd 	.word	0x080071cd
 80071ac:	080071eb 	.word	0x080071eb
 80071b0:	08007209 	.word	0x08007209
 80071b4:	08007257 	.word	0x08007257
 80071b8:	08007221 	.word	0x08007221
 80071bc:	08007257 	.word	0x08007257
 80071c0:	08007257 	.word	0x08007257
 80071c4:	08007257 	.word	0x08007257
 80071c8:	0800723f 	.word	0x0800723f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071cc:	f7fe fe2c 	bl	8005e28 <HAL_RCC_GetPCLK1Freq>
 80071d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	085a      	lsrs	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	441a      	add	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	61bb      	str	r3, [r7, #24]
        break;
 80071e8:	e038      	b.n	800725c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ea:	f7fe fe31 	bl	8005e50 <HAL_RCC_GetPCLK2Freq>
 80071ee:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	085a      	lsrs	r2, r3, #1
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	441a      	add	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007202:	b29b      	uxth	r3, r3
 8007204:	61bb      	str	r3, [r7, #24]
        break;
 8007206:	e029      	b.n	800725c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	085a      	lsrs	r2, r3, #1
 800720e:	4b21      	ldr	r3, [pc, #132]	; (8007294 <UART_SetConfig+0x550>)
 8007210:	4413      	add	r3, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6852      	ldr	r2, [r2, #4]
 8007216:	fbb3 f3f2 	udiv	r3, r3, r2
 800721a:	b29b      	uxth	r3, r3
 800721c:	61bb      	str	r3, [r7, #24]
        break;
 800721e:	e01d      	b.n	800725c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007220:	f7fe fd44 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8007224:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	085a      	lsrs	r2, r3, #1
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	441a      	add	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	fbb2 f3f3 	udiv	r3, r2, r3
 8007238:	b29b      	uxth	r3, r3
 800723a:	61bb      	str	r3, [r7, #24]
        break;
 800723c:	e00e      	b.n	800725c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	085b      	lsrs	r3, r3, #1
 8007244:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007250:	b29b      	uxth	r3, r3
 8007252:	61bb      	str	r3, [r7, #24]
        break;
 8007254:	e002      	b.n	800725c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]
        break;
 800725a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	2b0f      	cmp	r3, #15
 8007260:	d908      	bls.n	8007274 <UART_SetConfig+0x530>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007268:	d204      	bcs.n	8007274 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	e001      	b.n	8007278 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3720      	adds	r7, #32
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	01e84800 	.word	0x01e84800
 8007294:	00f42400 	.word	0x00f42400

08007298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01a      	beq.n	80073ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007396:	d10a      	bne.n	80073ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]
  }
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80073ea:	f7fc f93b 	bl	8003664 <HAL_GetTick>
 80073ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d10e      	bne.n	800741c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f82a 	bl	8007466 <UART_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e020      	b.n	800745e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b04      	cmp	r3, #4
 8007428:	d10e      	bne.n	8007448 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800742a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f814 	bl	8007466 <UART_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e00a      	b.n	800745e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2220      	movs	r2, #32
 800744c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	603b      	str	r3, [r7, #0]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007476:	e05d      	b.n	8007534 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800747e:	d059      	beq.n	8007534 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007480:	f7fc f8f0 	bl	8003664 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	429a      	cmp	r2, r3
 800748e:	d302      	bcc.n	8007496 <UART_WaitOnFlagUntilTimeout+0x30>
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d11b      	bne.n	80074ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2220      	movs	r2, #32
 80074ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e042      	b.n	8007554 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d02b      	beq.n	8007534 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ea:	d123      	bne.n	8007534 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074f4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007504:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2220      	movs	r2, #32
 800751a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2220      	movs	r2, #32
 8007520:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e00f      	b.n	8007554 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4013      	ands	r3, r2
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	429a      	cmp	r2, r3
 8007542:	bf0c      	ite	eq
 8007544:	2301      	moveq	r3, #1
 8007546:	2300      	movne	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	429a      	cmp	r2, r3
 8007550:	d092      	beq.n	8007478 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007560:	bf00      	nop
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007572:	f3ef 8305 	mrs	r3, IPSR
 8007576:	60bb      	str	r3, [r7, #8]
  return(result);
 8007578:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10f      	bne.n	800759e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800757e:	f3ef 8310 	mrs	r3, PRIMASK
 8007582:	607b      	str	r3, [r7, #4]
  return(result);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800758a:	f3ef 8311 	mrs	r3, BASEPRI
 800758e:	603b      	str	r3, [r7, #0]
  return(result);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <osKernelInitialize+0x3a>
 8007596:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <osKernelInitialize+0x64>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d103      	bne.n	80075a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800759e:	f06f 0305 	mvn.w	r3, #5
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	e00c      	b.n	80075c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <osKernelInitialize+0x64>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d105      	bne.n	80075ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80075ae:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <osKernelInitialize+0x64>)
 80075b0:	2201      	movs	r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e002      	b.n	80075c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80075c0:	68fb      	ldr	r3, [r7, #12]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	200000d0 	.word	0x200000d0

080075d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075da:	f3ef 8305 	mrs	r3, IPSR
 80075de:	60bb      	str	r3, [r7, #8]
  return(result);
 80075e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10f      	bne.n	8007606 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ea:	607b      	str	r3, [r7, #4]
  return(result);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d105      	bne.n	80075fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075f2:	f3ef 8311 	mrs	r3, BASEPRI
 80075f6:	603b      	str	r3, [r7, #0]
  return(result);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <osKernelStart+0x3a>
 80075fe:	4b0f      	ldr	r3, [pc, #60]	; (800763c <osKernelStart+0x68>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b02      	cmp	r3, #2
 8007604:	d103      	bne.n	800760e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007606:	f06f 0305 	mvn.w	r3, #5
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	e010      	b.n	8007630 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800760e:	4b0b      	ldr	r3, [pc, #44]	; (800763c <osKernelStart+0x68>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d109      	bne.n	800762a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007616:	f7ff ffa1 	bl	800755c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800761a:	4b08      	ldr	r3, [pc, #32]	; (800763c <osKernelStart+0x68>)
 800761c:	2202      	movs	r2, #2
 800761e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007620:	f001 ff10 	bl	8009444 <vTaskStartScheduler>
      stat = osOK;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	e002      	b.n	8007630 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800762a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800762e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007630:	68fb      	ldr	r3, [r7, #12]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	200000d0 	.word	0x200000d0

08007640 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007640:	b580      	push	{r7, lr}
 8007642:	b090      	sub	sp, #64	; 0x40
 8007644:	af04      	add	r7, sp, #16
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007650:	f3ef 8305 	mrs	r3, IPSR
 8007654:	61fb      	str	r3, [r7, #28]
  return(result);
 8007656:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007658:	2b00      	cmp	r3, #0
 800765a:	f040 808f 	bne.w	800777c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800765e:	f3ef 8310 	mrs	r3, PRIMASK
 8007662:	61bb      	str	r3, [r7, #24]
  return(result);
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d105      	bne.n	8007676 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800766a:	f3ef 8311 	mrs	r3, BASEPRI
 800766e:	617b      	str	r3, [r7, #20]
  return(result);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <osThreadNew+0x3e>
 8007676:	4b44      	ldr	r3, [pc, #272]	; (8007788 <osThreadNew+0x148>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d07e      	beq.n	800777c <osThreadNew+0x13c>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d07b      	beq.n	800777c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007684:	2380      	movs	r3, #128	; 0x80
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007688:	2318      	movs	r3, #24
 800768a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800768c:	2300      	movs	r3, #0
 800768e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007694:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d045      	beq.n	8007728 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <osThreadNew+0x6a>
        name = attr->name;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <osThreadNew+0x90>
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	2b38      	cmp	r3, #56	; 0x38
 80076c2:	d805      	bhi.n	80076d0 <osThreadNew+0x90>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <osThreadNew+0x94>
        return (NULL);
 80076d0:	2300      	movs	r3, #0
 80076d2:	e054      	b.n	800777e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	089b      	lsrs	r3, r3, #2
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00e      	beq.n	800770a <osThreadNew+0xca>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	2b5b      	cmp	r3, #91	; 0x5b
 80076f2:	d90a      	bls.n	800770a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d006      	beq.n	800770a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <osThreadNew+0xca>
        mem = 1;
 8007704:	2301      	movs	r3, #1
 8007706:	623b      	str	r3, [r7, #32]
 8007708:	e010      	b.n	800772c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10c      	bne.n	800772c <osThreadNew+0xec>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d108      	bne.n	800772c <osThreadNew+0xec>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <osThreadNew+0xec>
          mem = 0;
 8007722:	2300      	movs	r3, #0
 8007724:	623b      	str	r3, [r7, #32]
 8007726:	e001      	b.n	800772c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d110      	bne.n	8007754 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800773a:	9202      	str	r2, [sp, #8]
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f001 fc9f 	bl	800908c <xTaskCreateStatic>
 800774e:	4603      	mov	r3, r0
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	e013      	b.n	800777c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d110      	bne.n	800777c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	b29a      	uxth	r2, r3
 800775e:	f107 0310 	add.w	r3, r7, #16
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f001 fced 	bl	800914c <xTaskCreate>
 8007772:	4603      	mov	r3, r0
 8007774:	2b01      	cmp	r3, #1
 8007776:	d001      	beq.n	800777c <osThreadNew+0x13c>
          hTask = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800777c:	693b      	ldr	r3, [r7, #16]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3730      	adds	r7, #48	; 0x30
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200000d0 	.word	0x200000d0

0800778c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007794:	f3ef 8305 	mrs	r3, IPSR
 8007798:	613b      	str	r3, [r7, #16]
  return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10f      	bne.n	80077c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a0:	f3ef 8310 	mrs	r3, PRIMASK
 80077a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077ac:	f3ef 8311 	mrs	r3, BASEPRI
 80077b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d007      	beq.n	80077c8 <osDelay+0x3c>
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <osDelay+0x58>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d103      	bne.n	80077c8 <osDelay+0x3c>
    stat = osErrorISR;
 80077c0:	f06f 0305 	mvn.w	r3, #5
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	e007      	b.n	80077d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 fe00 	bl	80093d8 <vTaskDelay>
    }
  }

  return (stat);
 80077d8:	697b      	ldr	r3, [r7, #20]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	200000d0 	.word	0x200000d0

080077e8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08c      	sub	sp, #48	; 0x30
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077f8:	f3ef 8305 	mrs	r3, IPSR
 80077fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80077fe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007800:	2b00      	cmp	r3, #0
 8007802:	f040 8087 	bne.w	8007914 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007806:	f3ef 8310 	mrs	r3, PRIMASK
 800780a:	617b      	str	r3, [r7, #20]
  return(result);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d105      	bne.n	800781e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007812:	f3ef 8311 	mrs	r3, BASEPRI
 8007816:	613b      	str	r3, [r7, #16]
  return(result);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <osSemaphoreNew+0x3e>
 800781e:	4b40      	ldr	r3, [pc, #256]	; (8007920 <osSemaphoreNew+0x138>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d076      	beq.n	8007914 <osSemaphoreNew+0x12c>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d073      	beq.n	8007914 <osSemaphoreNew+0x12c>
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	429a      	cmp	r2, r3
 8007832:	d86f      	bhi.n	8007914 <osSemaphoreNew+0x12c>
    mem = -1;
 8007834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007838:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d015      	beq.n	800786c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d006      	beq.n	8007856 <osSemaphoreNew+0x6e>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	2b4f      	cmp	r3, #79	; 0x4f
 800784e:	d902      	bls.n	8007856 <osSemaphoreNew+0x6e>
        mem = 1;
 8007850:	2301      	movs	r3, #1
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	e00c      	b.n	8007870 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d108      	bne.n	8007870 <osSemaphoreNew+0x88>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d104      	bne.n	8007870 <osSemaphoreNew+0x88>
          mem = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	623b      	str	r3, [r7, #32]
 800786a:	e001      	b.n	8007870 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007876:	d04d      	beq.n	8007914 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d129      	bne.n	80078d2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d10b      	bne.n	800789c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	2303      	movs	r3, #3
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	2200      	movs	r2, #0
 8007890:	2100      	movs	r1, #0
 8007892:	2001      	movs	r0, #1
 8007894:	f000 fbf4 	bl	8008080 <xQueueGenericCreateStatic>
 8007898:	6278      	str	r0, [r7, #36]	; 0x24
 800789a:	e005      	b.n	80078a8 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800789c:	2203      	movs	r2, #3
 800789e:	2100      	movs	r1, #0
 80078a0:	2001      	movs	r0, #1
 80078a2:	f000 fc6a 	bl	800817a <xQueueGenericCreate>
 80078a6:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d022      	beq.n	80078f4 <osSemaphoreNew+0x10c>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01f      	beq.n	80078f4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078b4:	2300      	movs	r3, #0
 80078b6:	2200      	movs	r2, #0
 80078b8:	2100      	movs	r1, #0
 80078ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078bc:	f000 fd30 	bl	8008320 <xQueueGenericSend>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d016      	beq.n	80078f4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80078c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078c8:	f001 fa0d 	bl	8008ce6 <vQueueDelete>
            hSemaphore = NULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
 80078d0:	e010      	b.n	80078f4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d108      	bne.n	80078ea <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	461a      	mov	r2, r3
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fcae 	bl	8008242 <xQueueCreateCountingSemaphoreStatic>
 80078e6:	6278      	str	r0, [r7, #36]	; 0x24
 80078e8:	e004      	b.n	80078f4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fce1 	bl	80082b4 <xQueueCreateCountingSemaphore>
 80078f2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00c      	beq.n	8007914 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <osSemaphoreNew+0x120>
          name = attr->name;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	61fb      	str	r3, [r7, #28]
 8007906:	e001      	b.n	800790c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800790c:	69f9      	ldr	r1, [r7, #28]
 800790e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007910:	f001 fb36 	bl	8008f80 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007916:	4618      	mov	r0, r3
 8007918:	3728      	adds	r7, #40	; 0x28
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	200000d0 	.word	0x200000d0

08007924 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d103      	bne.n	8007944 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800793c:	f06f 0303 	mvn.w	r3, #3
 8007940:	61fb      	str	r3, [r7, #28]
 8007942:	e04b      	b.n	80079dc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007944:	f3ef 8305 	mrs	r3, IPSR
 8007948:	617b      	str	r3, [r7, #20]
  return(result);
 800794a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10f      	bne.n	8007970 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007950:	f3ef 8310 	mrs	r3, PRIMASK
 8007954:	613b      	str	r3, [r7, #16]
  return(result);
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800795c:	f3ef 8311 	mrs	r3, BASEPRI
 8007960:	60fb      	str	r3, [r7, #12]
  return(result);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d026      	beq.n	80079b6 <osSemaphoreAcquire+0x92>
 8007968:	4b1f      	ldr	r3, [pc, #124]	; (80079e8 <osSemaphoreAcquire+0xc4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d122      	bne.n	80079b6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007976:	f06f 0303 	mvn.w	r3, #3
 800797a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800797c:	e02d      	b.n	80079da <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007982:	f107 0308 	add.w	r3, r7, #8
 8007986:	461a      	mov	r2, r3
 8007988:	2100      	movs	r1, #0
 800798a:	69b8      	ldr	r0, [r7, #24]
 800798c:	f001 f8ea 	bl	8008b64 <xQueueReceiveFromISR>
 8007990:	4603      	mov	r3, r0
 8007992:	2b01      	cmp	r3, #1
 8007994:	d003      	beq.n	800799e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007996:	f06f 0302 	mvn.w	r3, #2
 800799a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800799c:	e01d      	b.n	80079da <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01a      	beq.n	80079da <osSemaphoreAcquire+0xb6>
 80079a4:	4b11      	ldr	r3, [pc, #68]	; (80079ec <osSemaphoreAcquire+0xc8>)
 80079a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80079b4:	e011      	b.n	80079da <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	69b8      	ldr	r0, [r7, #24]
 80079ba:	f000 ffc3 	bl	8008944 <xQueueSemaphoreTake>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d00b      	beq.n	80079dc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80079ca:	f06f 0301 	mvn.w	r3, #1
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	e004      	b.n	80079dc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80079d2:	f06f 0302 	mvn.w	r3, #2
 80079d6:	61fb      	str	r3, [r7, #28]
 80079d8:	e000      	b.n	80079dc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80079da:	bf00      	nop
      }
    }
  }

  return (stat);
 80079dc:	69fb      	ldr	r3, [r7, #28]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	200000d0 	.word	0x200000d0
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007a06:	f06f 0303 	mvn.w	r3, #3
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	e03e      	b.n	8007a8c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a0e:	f3ef 8305 	mrs	r3, IPSR
 8007a12:	617b      	str	r3, [r7, #20]
  return(result);
 8007a14:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10f      	bne.n	8007a3a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a1e:	613b      	str	r3, [r7, #16]
  return(result);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a26:	f3ef 8311 	mrs	r3, BASEPRI
 8007a2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01e      	beq.n	8007a70 <osSemaphoreRelease+0x80>
 8007a32:	4b19      	ldr	r3, [pc, #100]	; (8007a98 <osSemaphoreRelease+0xa8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d11a      	bne.n	8007a70 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	4619      	mov	r1, r3
 8007a44:	69b8      	ldr	r0, [r7, #24]
 8007a46:	f000 fe09 	bl	800865c <xQueueGiveFromISR>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d003      	beq.n	8007a58 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007a50:	f06f 0302 	mvn.w	r3, #2
 8007a54:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a56:	e018      	b.n	8007a8a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d015      	beq.n	8007a8a <osSemaphoreRelease+0x9a>
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <osSemaphoreRelease+0xac>)
 8007a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a6e:	e00c      	b.n	8007a8a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007a70:	2300      	movs	r3, #0
 8007a72:	2200      	movs	r2, #0
 8007a74:	2100      	movs	r1, #0
 8007a76:	69b8      	ldr	r0, [r7, #24]
 8007a78:	f000 fc52 	bl	8008320 <xQueueGenericSend>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d004      	beq.n	8007a8c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007a82:	f06f 0302 	mvn.w	r3, #2
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	e000      	b.n	8007a8c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a8a:	bf00      	nop
    }
  }

  return (stat);
 8007a8c:	69fb      	ldr	r3, [r7, #28]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3720      	adds	r7, #32
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	200000d0 	.word	0x200000d0
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	; 0x30
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab0:	f3ef 8305 	mrs	r3, IPSR
 8007ab4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ab6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d170      	bne.n	8007b9e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007abc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d105      	bne.n	8007ad4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8007acc:	613b      	str	r3, [r7, #16]
  return(result);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <osMessageQueueNew+0x3c>
 8007ad4:	4b34      	ldr	r3, [pc, #208]	; (8007ba8 <osMessageQueueNew+0x108>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d060      	beq.n	8007b9e <osMessageQueueNew+0xfe>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d05d      	beq.n	8007b9e <osMessageQueueNew+0xfe>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d05a      	beq.n	8007b9e <osMessageQueueNew+0xfe>
    mem = -1;
 8007ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d029      	beq.n	8007b48 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d012      	beq.n	8007b22 <osMessageQueueNew+0x82>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b4f      	cmp	r3, #79	; 0x4f
 8007b02:	d90e      	bls.n	8007b22 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695a      	ldr	r2, [r3, #20]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	fb01 f303 	mul.w	r3, r1, r3
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d302      	bcc.n	8007b22 <osMessageQueueNew+0x82>
        mem = 1;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	623b      	str	r3, [r7, #32]
 8007b20:	e014      	b.n	8007b4c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d110      	bne.n	8007b4c <osMessageQueueNew+0xac>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10c      	bne.n	8007b4c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d108      	bne.n	8007b4c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <osMessageQueueNew+0xac>
          mem = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	623b      	str	r3, [r7, #32]
 8007b46:	e001      	b.n	8007b4c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d10c      	bne.n	8007b6c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6899      	ldr	r1, [r3, #8]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	68b9      	ldr	r1, [r7, #8]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 fa8c 	bl	8008080 <xQueueGenericCreateStatic>
 8007b68:	6278      	str	r0, [r7, #36]	; 0x24
 8007b6a:	e008      	b.n	8007b7e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d105      	bne.n	8007b7e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007b72:	2200      	movs	r2, #0
 8007b74:	68b9      	ldr	r1, [r7, #8]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 faff 	bl	800817a <xQueueGenericCreate>
 8007b7c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00c      	beq.n	8007b9e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <osMessageQueueNew+0xf2>
        name = attr->name;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	e001      	b.n	8007b96 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007b96:	69f9      	ldr	r1, [r7, #28]
 8007b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b9a:	f001 f9f1 	bl	8008f80 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3728      	adds	r7, #40	; 0x28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	200000d0 	.word	0x200000d0

08007bac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	; 0x28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bc4:	f3ef 8305 	mrs	r3, IPSR
 8007bc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bca:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10f      	bne.n	8007bf0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8007be0:	617b      	str	r3, [r7, #20]
  return(result);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d02c      	beq.n	8007c42 <osMessageQueuePut+0x96>
 8007be8:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <osMessageQueuePut+0xe0>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d128      	bne.n	8007c42 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <osMessageQueuePut+0x56>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <osMessageQueuePut+0x56>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007c02:	f06f 0303 	mvn.w	r3, #3
 8007c06:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c08:	e039      	b.n	8007c7e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007c0e:	f107 0210 	add.w	r2, r7, #16
 8007c12:	2300      	movs	r3, #0
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	6a38      	ldr	r0, [r7, #32]
 8007c18:	f000 fc84 	bl	8008524 <xQueueGenericSendFromISR>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d003      	beq.n	8007c2a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007c22:	f06f 0302 	mvn.w	r3, #2
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c28:	e029      	b.n	8007c7e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d026      	beq.n	8007c7e <osMessageQueuePut+0xd2>
 8007c30:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <osMessageQueuePut+0xe4>)
 8007c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c40:	e01d      	b.n	8007c7e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <osMessageQueuePut+0xa2>
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d103      	bne.n	8007c56 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007c4e:	f06f 0303 	mvn.w	r3, #3
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
 8007c54:	e014      	b.n	8007c80 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c56:	2300      	movs	r3, #0
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	6a38      	ldr	r0, [r7, #32]
 8007c5e:	f000 fb5f 	bl	8008320 <xQueueGenericSend>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d00b      	beq.n	8007c80 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007c6e:	f06f 0301 	mvn.w	r3, #1
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
 8007c74:	e004      	b.n	8007c80 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007c76:	f06f 0302 	mvn.w	r3, #2
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7c:	e000      	b.n	8007c80 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c7e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3728      	adds	r7, #40	; 0x28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200000d0 	.word	0x200000d0
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007caa:	f3ef 8305 	mrs	r3, IPSR
 8007cae:	61fb      	str	r3, [r7, #28]
  return(result);
 8007cb0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10f      	bne.n	8007cd6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cba:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d105      	bne.n	8007cce <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8007cc6:	617b      	str	r3, [r7, #20]
  return(result);
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d02c      	beq.n	8007d28 <osMessageQueueGet+0x94>
 8007cce:	4b28      	ldr	r3, [pc, #160]	; (8007d70 <osMessageQueueGet+0xdc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d128      	bne.n	8007d28 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <osMessageQueueGet+0x54>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <osMessageQueueGet+0x54>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007ce8:	f06f 0303 	mvn.w	r3, #3
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cee:	e038      	b.n	8007d62 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007cf4:	f107 0310 	add.w	r3, r7, #16
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	6a38      	ldr	r0, [r7, #32]
 8007cfe:	f000 ff31 	bl	8008b64 <xQueueReceiveFromISR>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d003      	beq.n	8007d10 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007d08:	f06f 0302 	mvn.w	r3, #2
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d0e:	e028      	b.n	8007d62 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d025      	beq.n	8007d62 <osMessageQueueGet+0xce>
 8007d16:	4b17      	ldr	r3, [pc, #92]	; (8007d74 <osMessageQueueGet+0xe0>)
 8007d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d26:	e01c      	b.n	8007d62 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <osMessageQueueGet+0xa0>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007d34:	f06f 0303 	mvn.w	r3, #3
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3a:	e013      	b.n	8007d64 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	6a38      	ldr	r0, [r7, #32]
 8007d42:	f000 fd1d 	bl	8008780 <xQueueReceive>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d00b      	beq.n	8007d64 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007d52:	f06f 0301 	mvn.w	r3, #1
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
 8007d58:	e004      	b.n	8007d64 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007d5a:	f06f 0302 	mvn.w	r3, #2
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d60:	e000      	b.n	8007d64 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3728      	adds	r7, #40	; 0x28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	200000d0 	.word	0x200000d0
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
 8007d8e:	e01e      	b.n	8007dce <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d90:	f3ef 8305 	mrs	r3, IPSR
 8007d94:	617b      	str	r3, [r7, #20]
  return(result);
 8007d96:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10f      	bne.n	8007dbc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007da0:	613b      	str	r3, [r7, #16]
  return(result);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007da8:	f3ef 8311 	mrs	r3, BASEPRI
 8007dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <osMessageQueueGetCount+0x4e>
 8007db4:	4b08      	ldr	r3, [pc, #32]	; (8007dd8 <osMessageQueueGetCount+0x60>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d104      	bne.n	8007dc6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007dbc:	69b8      	ldr	r0, [r7, #24]
 8007dbe:	f000 ff73 	bl	8008ca8 <uxQueueMessagesWaitingFromISR>
 8007dc2:	61f8      	str	r0, [r7, #28]
 8007dc4:	e003      	b.n	8007dce <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007dc6:	69b8      	ldr	r0, [r7, #24]
 8007dc8:	f000 ff4f 	bl	8008c6a <uxQueueMessagesWaiting>
 8007dcc:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007dce:	69fb      	ldr	r3, [r7, #28]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	200000d0 	.word	0x200000d0

08007ddc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4a07      	ldr	r2, [pc, #28]	; (8007e08 <vApplicationGetIdleTaskMemory+0x2c>)
 8007dec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4a06      	ldr	r2, [pc, #24]	; (8007e0c <vApplicationGetIdleTaskMemory+0x30>)
 8007df2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2280      	movs	r2, #128	; 0x80
 8007df8:	601a      	str	r2, [r3, #0]
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	200000d4 	.word	0x200000d4
 8007e0c:	20000130 	.word	0x20000130

08007e10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4a07      	ldr	r2, [pc, #28]	; (8007e3c <vApplicationGetTimerTaskMemory+0x2c>)
 8007e20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	4a06      	ldr	r2, [pc, #24]	; (8007e40 <vApplicationGetTimerTaskMemory+0x30>)
 8007e26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e2e:	601a      	str	r2, [r3, #0]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	20000330 	.word	0x20000330
 8007e40:	2000038c 	.word	0x2000038c

08007e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f103 0208 	add.w	r2, r3, #8
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f103 0208 	add.w	r2, r3, #8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f103 0208 	add.w	r2, r3, #8
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	601a      	str	r2, [r3, #0]
}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007efc:	d103      	bne.n	8007f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e00c      	b.n	8007f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	e002      	b.n	8007f14 <vListInsert+0x2e>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d2f6      	bcs.n	8007f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	601a      	str	r2, [r3, #0]
}
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6892      	ldr	r2, [r2, #8]
 8007f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6852      	ldr	r2, [r2, #4]
 8007f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d103      	bne.n	8007f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	1e5a      	subs	r2, r3, #1
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10b      	bne.n	8007fd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	b672      	cpsid	i
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	b662      	cpsie	i
 8007fd4:	60bb      	str	r3, [r7, #8]
 8007fd6:	e7fe      	b.n	8007fd6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8007fd8:	f002 fcbe 	bl	800a958 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe4:	68f9      	ldr	r1, [r7, #12]
 8007fe6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	441a      	add	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008008:	3b01      	subs	r3, #1
 800800a:	68f9      	ldr	r1, [r7, #12]
 800800c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800800e:	fb01 f303 	mul.w	r3, r1, r3
 8008012:	441a      	add	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	22ff      	movs	r2, #255	; 0xff
 800801c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	22ff      	movs	r2, #255	; 0xff
 8008024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d114      	bne.n	8008058 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01a      	beq.n	800806c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3310      	adds	r3, #16
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fc90 	bl	8009960 <xTaskRemoveFromEventList>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d012      	beq.n	800806c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008046:	4b0d      	ldr	r3, [pc, #52]	; (800807c <xQueueGenericReset+0xd0>)
 8008048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	e009      	b.n	800806c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3310      	adds	r3, #16
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff fef1 	bl	8007e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3324      	adds	r3, #36	; 0x24
 8008066:	4618      	mov	r0, r3
 8008068:	f7ff feec 	bl	8007e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800806c:	f002 fca6 	bl	800a9bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008070:	2301      	movs	r3, #1
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	e000ed04 	.word	0xe000ed04

08008080 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008080:	b580      	push	{r7, lr}
 8008082:	b08e      	sub	sp, #56	; 0x38
 8008084:	af02      	add	r7, sp, #8
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10b      	bne.n	80080ac <xQueueGenericCreateStatic+0x2c>
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	b672      	cpsid	i
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	b662      	cpsie	i
 80080a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80080aa:	e7fe      	b.n	80080aa <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10b      	bne.n	80080ca <xQueueGenericCreateStatic+0x4a>
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	b672      	cpsid	i
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	b662      	cpsie	i
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
 80080c8:	e7fe      	b.n	80080c8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <xQueueGenericCreateStatic+0x56>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <xQueueGenericCreateStatic+0x5a>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <xQueueGenericCreateStatic+0x5c>
 80080da:	2300      	movs	r3, #0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <xQueueGenericCreateStatic+0x78>
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	b672      	cpsid	i
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	b662      	cpsie	i
 80080f4:	623b      	str	r3, [r7, #32]
 80080f6:	e7fe      	b.n	80080f6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <xQueueGenericCreateStatic+0x84>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <xQueueGenericCreateStatic+0x88>
 8008104:	2301      	movs	r3, #1
 8008106:	e000      	b.n	800810a <xQueueGenericCreateStatic+0x8a>
 8008108:	2300      	movs	r3, #0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10b      	bne.n	8008126 <xQueueGenericCreateStatic+0xa6>
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	b672      	cpsid	i
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	b662      	cpsie	i
 8008122:	61fb      	str	r3, [r7, #28]
 8008124:	e7fe      	b.n	8008124 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008126:	2350      	movs	r3, #80	; 0x50
 8008128:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b50      	cmp	r3, #80	; 0x50
 800812e:	d00b      	beq.n	8008148 <xQueueGenericCreateStatic+0xc8>
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	b672      	cpsid	i
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	b662      	cpsie	i
 8008144:	61bb      	str	r3, [r7, #24]
 8008146:	e7fe      	b.n	8008146 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008148:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800815c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	4613      	mov	r3, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 f846 	bl	80081fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008172:	4618      	mov	r0, r3
 8008174:	3730      	adds	r7, #48	; 0x30
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800817a:	b580      	push	{r7, lr}
 800817c:	b08a      	sub	sp, #40	; 0x28
 800817e:	af02      	add	r7, sp, #8
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	4613      	mov	r3, r2
 8008186:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10b      	bne.n	80081a6 <xQueueGenericCreate+0x2c>
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	b672      	cpsid	i
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	b662      	cpsie	i
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	e7fe      	b.n	80081a4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	e004      	b.n	80081bc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	fb02 f303 	mul.w	r3, r2, r3
 80081ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	3350      	adds	r3, #80	; 0x50
 80081c0:	4618      	mov	r0, r3
 80081c2:	f002 fceb 	bl	800ab9c <pvPortMalloc>
 80081c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d011      	beq.n	80081f2 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	3350      	adds	r3, #80	; 0x50
 80081d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081e0:	79fa      	ldrb	r2, [r7, #7]
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	4613      	mov	r3, r2
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f805 	bl	80081fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081f2:	69bb      	ldr	r3, [r7, #24]
	}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	e002      	b.n	800821e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800822a:	2101      	movs	r1, #1
 800822c:	69b8      	ldr	r0, [r7, #24]
 800822e:	f7ff febd 	bl	8007fac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	78fa      	ldrb	r2, [r7, #3]
 8008236:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800823a:	bf00      	nop
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008242:	b580      	push	{r7, lr}
 8008244:	b08a      	sub	sp, #40	; 0x28
 8008246:	af02      	add	r7, sp, #8
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10b      	bne.n	800826c <xQueueCreateCountingSemaphoreStatic+0x2a>
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	b672      	cpsid	i
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	b662      	cpsie	i
 8008268:	61bb      	str	r3, [r7, #24]
 800826a:	e7fe      	b.n	800826a <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	429a      	cmp	r2, r3
 8008272:	d90b      	bls.n	800828c <xQueueCreateCountingSemaphoreStatic+0x4a>
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	b672      	cpsid	i
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	b662      	cpsie	i
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e7fe      	b.n	800828a <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800828c:	2302      	movs	r3, #2
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	2100      	movs	r1, #0
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7ff fef2 	bl	8008080 <xQueueGenericCreateStatic>
 800829c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80082aa:	69fb      	ldr	r3, [r7, #28]
	}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3720      	adds	r7, #32
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10b      	bne.n	80082dc <xQueueCreateCountingSemaphore+0x28>
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	b672      	cpsid	i
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	b662      	cpsie	i
 80082d8:	613b      	str	r3, [r7, #16]
 80082da:	e7fe      	b.n	80082da <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d90b      	bls.n	80082fc <xQueueCreateCountingSemaphore+0x48>
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	b672      	cpsid	i
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	b662      	cpsie	i
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	e7fe      	b.n	80082fa <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082fc:	2202      	movs	r2, #2
 80082fe:	2100      	movs	r1, #0
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ff3a 	bl	800817a <xQueueGenericCreate>
 8008306:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008314:	697b      	ldr	r3, [r7, #20]
	}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08e      	sub	sp, #56	; 0x38
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800832e:	2300      	movs	r3, #0
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <xQueueGenericSend+0x34>
 800833c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008340:	b672      	cpsid	i
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	b662      	cpsie	i
 8008350:	62bb      	str	r3, [r7, #40]	; 0x28
 8008352:	e7fe      	b.n	8008352 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d103      	bne.n	8008362 <xQueueGenericSend+0x42>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <xQueueGenericSend+0x46>
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <xQueueGenericSend+0x48>
 8008366:	2300      	movs	r3, #0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10b      	bne.n	8008384 <xQueueGenericSend+0x64>
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	b672      	cpsid	i
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	b662      	cpsie	i
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
 8008382:	e7fe      	b.n	8008382 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d103      	bne.n	8008392 <xQueueGenericSend+0x72>
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838e:	2b01      	cmp	r3, #1
 8008390:	d101      	bne.n	8008396 <xQueueGenericSend+0x76>
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <xQueueGenericSend+0x78>
 8008396:	2300      	movs	r3, #0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10b      	bne.n	80083b4 <xQueueGenericSend+0x94>
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	b672      	cpsid	i
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	b662      	cpsie	i
 80083b0:	623b      	str	r3, [r7, #32]
 80083b2:	e7fe      	b.n	80083b2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083b4:	f001 fc92 	bl	8009cdc <xTaskGetSchedulerState>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <xQueueGenericSend+0xa4>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <xQueueGenericSend+0xa8>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e000      	b.n	80083ca <xQueueGenericSend+0xaa>
 80083c8:	2300      	movs	r3, #0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10b      	bne.n	80083e6 <xQueueGenericSend+0xc6>
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	b672      	cpsid	i
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	b662      	cpsie	i
 80083e2:	61fb      	str	r3, [r7, #28]
 80083e4:	e7fe      	b.n	80083e4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083e6:	f002 fab7 	bl	800a958 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d302      	bcc.n	80083fc <xQueueGenericSend+0xdc>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d129      	bne.n	8008450 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008402:	f000 fcac 	bl	8008d5e <prvCopyDataToQueue>
 8008406:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	d010      	beq.n	8008432 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	3324      	adds	r3, #36	; 0x24
 8008414:	4618      	mov	r0, r3
 8008416:	f001 faa3 	bl	8009960 <xTaskRemoveFromEventList>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d013      	beq.n	8008448 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008420:	4b3f      	ldr	r3, [pc, #252]	; (8008520 <xQueueGenericSend+0x200>)
 8008422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	e00a      	b.n	8008448 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008438:	4b39      	ldr	r3, [pc, #228]	; (8008520 <xQueueGenericSend+0x200>)
 800843a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008448:	f002 fab8 	bl	800a9bc <vPortExitCritical>
				return pdPASS;
 800844c:	2301      	movs	r3, #1
 800844e:	e063      	b.n	8008518 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d103      	bne.n	800845e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008456:	f002 fab1 	bl	800a9bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800845a:	2300      	movs	r3, #0
 800845c:	e05c      	b.n	8008518 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008460:	2b00      	cmp	r3, #0
 8008462:	d106      	bne.n	8008472 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008464:	f107 0314 	add.w	r3, r7, #20
 8008468:	4618      	mov	r0, r3
 800846a:	f001 fadd 	bl	8009a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800846e:	2301      	movs	r3, #1
 8008470:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008472:	f002 faa3 	bl	800a9bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008476:	f001 f84d 	bl	8009514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800847a:	f002 fa6d 	bl	800a958 <vPortEnterCritical>
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008484:	b25b      	sxtb	r3, r3
 8008486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800848a:	d103      	bne.n	8008494 <xQueueGenericSend+0x174>
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800849a:	b25b      	sxtb	r3, r3
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a0:	d103      	bne.n	80084aa <xQueueGenericSend+0x18a>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084aa:	f002 fa87 	bl	800a9bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084ae:	1d3a      	adds	r2, r7, #4
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 facc 	bl	8009a54 <xTaskCheckForTimeOut>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d124      	bne.n	800850c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c4:	f000 fd43 	bl	8008f4e <prvIsQueueFull>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d018      	beq.n	8008500 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	3310      	adds	r3, #16
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f9f0 	bl	80098bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084de:	f000 fcce 	bl	8008e7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084e2:	f001 f825 	bl	8009530 <xTaskResumeAll>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f47f af7c 	bne.w	80083e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80084ee:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <xQueueGenericSend+0x200>)
 80084f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	e772      	b.n	80083e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008502:	f000 fcbc 	bl	8008e7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008506:	f001 f813 	bl	8009530 <xTaskResumeAll>
 800850a:	e76c      	b.n	80083e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800850c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800850e:	f000 fcb6 	bl	8008e7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008512:	f001 f80d 	bl	8009530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008516:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008518:	4618      	mov	r0, r3
 800851a:	3738      	adds	r7, #56	; 0x38
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	e000ed04 	.word	0xe000ed04

08008524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08e      	sub	sp, #56	; 0x38
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <xQueueGenericSendFromISR+0x30>
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	b672      	cpsid	i
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	b662      	cpsie	i
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
 8008552:	e7fe      	b.n	8008552 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d103      	bne.n	8008562 <xQueueGenericSendFromISR+0x3e>
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <xQueueGenericSendFromISR+0x42>
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <xQueueGenericSendFromISR+0x44>
 8008566:	2300      	movs	r3, #0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10b      	bne.n	8008584 <xQueueGenericSendFromISR+0x60>
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	b672      	cpsid	i
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	b662      	cpsie	i
 8008580:	623b      	str	r3, [r7, #32]
 8008582:	e7fe      	b.n	8008582 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d103      	bne.n	8008592 <xQueueGenericSendFromISR+0x6e>
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858e:	2b01      	cmp	r3, #1
 8008590:	d101      	bne.n	8008596 <xQueueGenericSendFromISR+0x72>
 8008592:	2301      	movs	r3, #1
 8008594:	e000      	b.n	8008598 <xQueueGenericSendFromISR+0x74>
 8008596:	2300      	movs	r3, #0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <xQueueGenericSendFromISR+0x90>
 800859c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a0:	b672      	cpsid	i
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	b662      	cpsie	i
 80085b0:	61fb      	str	r3, [r7, #28]
 80085b2:	e7fe      	b.n	80085b2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085b4:	f002 fab0 	bl	800ab18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085b8:	f3ef 8211 	mrs	r2, BASEPRI
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	b672      	cpsid	i
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	b662      	cpsie	i
 80085d0:	61ba      	str	r2, [r7, #24]
 80085d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d302      	bcc.n	80085ea <xQueueGenericSendFromISR+0xc6>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d12c      	bne.n	8008644 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085fa:	f000 fbb0 	bl	8008d5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008606:	d112      	bne.n	800862e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	d016      	beq.n	800863e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	3324      	adds	r3, #36	; 0x24
 8008614:	4618      	mov	r0, r3
 8008616:	f001 f9a3 	bl	8009960 <xTaskRemoveFromEventList>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00e      	beq.n	800863e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00b      	beq.n	800863e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	e007      	b.n	800863e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800862e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008632:	3301      	adds	r3, #1
 8008634:	b2db      	uxtb	r3, r3
 8008636:	b25a      	sxtb	r2, r3
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800863e:	2301      	movs	r3, #1
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008642:	e001      	b.n	8008648 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008644:	2300      	movs	r3, #0
 8008646:	637b      	str	r3, [r7, #52]	; 0x34
 8008648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008654:	4618      	mov	r0, r3
 8008656:	3738      	adds	r7, #56	; 0x38
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08e      	sub	sp, #56	; 0x38
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10b      	bne.n	8008688 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	b672      	cpsid	i
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	b662      	cpsie	i
 8008684:	623b      	str	r3, [r7, #32]
 8008686:	e7fe      	b.n	8008686 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <xQueueGiveFromISR+0x4c>
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	b672      	cpsid	i
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	b662      	cpsie	i
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	e7fe      	b.n	80086a6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d103      	bne.n	80086b8 <xQueueGiveFromISR+0x5c>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <xQueueGiveFromISR+0x60>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <xQueueGiveFromISR+0x62>
 80086bc:	2300      	movs	r3, #0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10b      	bne.n	80086da <xQueueGiveFromISR+0x7e>
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	b672      	cpsid	i
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	b662      	cpsie	i
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	e7fe      	b.n	80086d8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086da:	f002 fa1d 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 80086de:	f3ef 8211 	mrs	r2, BASEPRI
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	b672      	cpsid	i
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	b662      	cpsie	i
 80086f6:	617a      	str	r2, [r7, #20]
 80086f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80086fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800870a:	429a      	cmp	r2, r3
 800870c:	d22b      	bcs.n	8008766 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008720:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008728:	d112      	bne.n	8008750 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	2b00      	cmp	r3, #0
 8008730:	d016      	beq.n	8008760 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	3324      	adds	r3, #36	; 0x24
 8008736:	4618      	mov	r0, r3
 8008738:	f001 f912 	bl	8009960 <xTaskRemoveFromEventList>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00e      	beq.n	8008760 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2201      	movs	r2, #1
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	e007      	b.n	8008760 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008754:	3301      	adds	r3, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	b25a      	sxtb	r2, r3
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008760:	2301      	movs	r3, #1
 8008762:	637b      	str	r3, [r7, #52]	; 0x34
 8008764:	e001      	b.n	800876a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008766:	2300      	movs	r3, #0
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008776:	4618      	mov	r0, r3
 8008778:	3738      	adds	r7, #56	; 0x38
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08c      	sub	sp, #48	; 0x30
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800878c:	2300      	movs	r3, #0
 800878e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10b      	bne.n	80087b2 <xQueueReceive+0x32>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	b672      	cpsid	i
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	b662      	cpsie	i
 80087ae:	623b      	str	r3, [r7, #32]
 80087b0:	e7fe      	b.n	80087b0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d103      	bne.n	80087c0 <xQueueReceive+0x40>
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <xQueueReceive+0x44>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e000      	b.n	80087c6 <xQueueReceive+0x46>
 80087c4:	2300      	movs	r3, #0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10b      	bne.n	80087e2 <xQueueReceive+0x62>
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	b672      	cpsid	i
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	b662      	cpsie	i
 80087de:	61fb      	str	r3, [r7, #28]
 80087e0:	e7fe      	b.n	80087e0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087e2:	f001 fa7b 	bl	8009cdc <xTaskGetSchedulerState>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d102      	bne.n	80087f2 <xQueueReceive+0x72>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <xQueueReceive+0x76>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <xQueueReceive+0x78>
 80087f6:	2300      	movs	r3, #0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <xQueueReceive+0x94>
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	b672      	cpsid	i
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	b662      	cpsie	i
 8008810:	61bb      	str	r3, [r7, #24]
 8008812:	e7fe      	b.n	8008812 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008814:	f002 f8a0 	bl	800a958 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	d01f      	beq.n	8008864 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008828:	f000 fb03 	bl	8008e32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	1e5a      	subs	r2, r3, #1
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00f      	beq.n	800885c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	3310      	adds	r3, #16
 8008840:	4618      	mov	r0, r3
 8008842:	f001 f88d 	bl	8009960 <xTaskRemoveFromEventList>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d007      	beq.n	800885c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800884c:	4b3c      	ldr	r3, [pc, #240]	; (8008940 <xQueueReceive+0x1c0>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800885c:	f002 f8ae 	bl	800a9bc <vPortExitCritical>
				return pdPASS;
 8008860:	2301      	movs	r3, #1
 8008862:	e069      	b.n	8008938 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d103      	bne.n	8008872 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800886a:	f002 f8a7 	bl	800a9bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800886e:	2300      	movs	r3, #0
 8008870:	e062      	b.n	8008938 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008874:	2b00      	cmp	r3, #0
 8008876:	d106      	bne.n	8008886 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008878:	f107 0310 	add.w	r3, r7, #16
 800887c:	4618      	mov	r0, r3
 800887e:	f001 f8d3 	bl	8009a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008882:	2301      	movs	r3, #1
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008886:	f002 f899 	bl	800a9bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800888a:	f000 fe43 	bl	8009514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800888e:	f002 f863 	bl	800a958 <vPortEnterCritical>
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008898:	b25b      	sxtb	r3, r3
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800889e:	d103      	bne.n	80088a8 <xQueueReceive+0x128>
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ae:	b25b      	sxtb	r3, r3
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088b4:	d103      	bne.n	80088be <xQueueReceive+0x13e>
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088be:	f002 f87d 	bl	800a9bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088c2:	1d3a      	adds	r2, r7, #4
 80088c4:	f107 0310 	add.w	r3, r7, #16
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f001 f8c2 	bl	8009a54 <xTaskCheckForTimeOut>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d123      	bne.n	800891e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d8:	f000 fb23 	bl	8008f22 <prvIsQueueEmpty>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d017      	beq.n	8008912 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	3324      	adds	r3, #36	; 0x24
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 ffe6 	bl	80098bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f2:	f000 fac4 	bl	8008e7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088f6:	f000 fe1b 	bl	8009530 <xTaskResumeAll>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d189      	bne.n	8008814 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <xQueueReceive+0x1c0>)
 8008902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	e780      	b.n	8008814 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008914:	f000 fab3 	bl	8008e7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008918:	f000 fe0a 	bl	8009530 <xTaskResumeAll>
 800891c:	e77a      	b.n	8008814 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800891e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008920:	f000 faad 	bl	8008e7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008924:	f000 fe04 	bl	8009530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800892a:	f000 fafa 	bl	8008f22 <prvIsQueueEmpty>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	f43f af6f 	beq.w	8008814 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008936:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008938:	4618      	mov	r0, r3
 800893a:	3730      	adds	r7, #48	; 0x30
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	e000ed04 	.word	0xe000ed04

08008944 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08e      	sub	sp, #56	; 0x38
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800894e:	2300      	movs	r3, #0
 8008950:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008956:	2300      	movs	r3, #0
 8008958:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10b      	bne.n	8008978 <xQueueSemaphoreTake+0x34>
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	b672      	cpsid	i
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	b662      	cpsie	i
 8008974:	623b      	str	r3, [r7, #32]
 8008976:	e7fe      	b.n	8008976 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <xQueueSemaphoreTake+0x54>
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	b672      	cpsid	i
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	b662      	cpsie	i
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	e7fe      	b.n	8008996 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008998:	f001 f9a0 	bl	8009cdc <xTaskGetSchedulerState>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <xQueueSemaphoreTake+0x64>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <xQueueSemaphoreTake+0x68>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <xQueueSemaphoreTake+0x6a>
 80089ac:	2300      	movs	r3, #0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <xQueueSemaphoreTake+0x86>
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	b672      	cpsid	i
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	b662      	cpsie	i
 80089c6:	61bb      	str	r3, [r7, #24]
 80089c8:	e7fe      	b.n	80089c8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ca:	f001 ffc5 	bl	800a958 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d024      	beq.n	8008a24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	1e5a      	subs	r2, r3, #1
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d104      	bne.n	80089f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80089ea:	f001 faf1 	bl	8009fd0 <pvTaskIncrementMutexHeldCount>
 80089ee:	4602      	mov	r2, r0
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00f      	beq.n	8008a1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	3310      	adds	r3, #16
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 ffad 	bl	8009960 <xTaskRemoveFromEventList>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a0c:	4b54      	ldr	r3, [pc, #336]	; (8008b60 <xQueueSemaphoreTake+0x21c>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a1c:	f001 ffce 	bl	800a9bc <vPortExitCritical>
				return pdPASS;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e098      	b.n	8008b56 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d112      	bne.n	8008a50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <xQueueSemaphoreTake+0x104>
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	b672      	cpsid	i
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	b662      	cpsie	i
 8008a44:	617b      	str	r3, [r7, #20]
 8008a46:	e7fe      	b.n	8008a46 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a48:	f001 ffb8 	bl	800a9bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e082      	b.n	8008b56 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a56:	f107 030c 	add.w	r3, r7, #12
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 ffe4 	bl	8009a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a60:	2301      	movs	r3, #1
 8008a62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a64:	f001 ffaa 	bl	800a9bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a68:	f000 fd54 	bl	8009514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a6c:	f001 ff74 	bl	800a958 <vPortEnterCritical>
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a76:	b25b      	sxtb	r3, r3
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a7c:	d103      	bne.n	8008a86 <xQueueSemaphoreTake+0x142>
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a8c:	b25b      	sxtb	r3, r3
 8008a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a92:	d103      	bne.n	8008a9c <xQueueSemaphoreTake+0x158>
 8008a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a9c:	f001 ff8e 	bl	800a9bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aa0:	463a      	mov	r2, r7
 8008aa2:	f107 030c 	add.w	r3, r7, #12
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 ffd3 	bl	8009a54 <xTaskCheckForTimeOut>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d132      	bne.n	8008b1a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ab6:	f000 fa34 	bl	8008f22 <prvIsQueueEmpty>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d026      	beq.n	8008b0e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d109      	bne.n	8008adc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008ac8:	f001 ff46 	bl	800a958 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 f921 	bl	8009d18 <xTaskPriorityInherit>
 8008ad6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008ad8:	f001 ff70 	bl	800a9bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	3324      	adds	r3, #36	; 0x24
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fee9 	bl	80098bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aec:	f000 f9c7 	bl	8008e7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008af0:	f000 fd1e 	bl	8009530 <xTaskResumeAll>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f47f af67 	bne.w	80089ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008afc:	4b18      	ldr	r3, [pc, #96]	; (8008b60 <xQueueSemaphoreTake+0x21c>)
 8008afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	e75d      	b.n	80089ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b10:	f000 f9b5 	bl	8008e7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b14:	f000 fd0c 	bl	8009530 <xTaskResumeAll>
 8008b18:	e757      	b.n	80089ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b1c:	f000 f9af 	bl	8008e7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b20:	f000 fd06 	bl	8009530 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b26:	f000 f9fc 	bl	8008f22 <prvIsQueueEmpty>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f43f af4c 	beq.w	80089ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00d      	beq.n	8008b54 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008b38:	f001 ff0e 	bl	800a958 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b3e:	f000 f8f6 	bl	8008d2e <prvGetDisinheritPriorityAfterTimeout>
 8008b42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 f9bc 	bl	8009ec8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b50:	f001 ff34 	bl	800a9bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3738      	adds	r7, #56	; 0x38
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08e      	sub	sp, #56	; 0x38
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10b      	bne.n	8008b92 <xQueueReceiveFromISR+0x2e>
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	b672      	cpsid	i
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	b662      	cpsie	i
 8008b8e:	623b      	str	r3, [r7, #32]
 8008b90:	e7fe      	b.n	8008b90 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <xQueueReceiveFromISR+0x3c>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <xQueueReceiveFromISR+0x40>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <xQueueReceiveFromISR+0x42>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10b      	bne.n	8008bc2 <xQueueReceiveFromISR+0x5e>
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	b672      	cpsid	i
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	b662      	cpsie	i
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	e7fe      	b.n	8008bc0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bc2:	f001 ffa9 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 8008bc6:	f3ef 8211 	mrs	r2, BASEPRI
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	b672      	cpsid	i
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	b662      	cpsie	i
 8008bde:	61ba      	str	r2, [r7, #24]
 8008be0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008be2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008be4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d02f      	beq.n	8008c52 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c00:	f000 f917 	bl	8008e32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	1e5a      	subs	r2, r3, #1
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c14:	d112      	bne.n	8008c3c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d016      	beq.n	8008c4c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	3310      	adds	r3, #16
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fe9c 	bl	8009960 <xTaskRemoveFromEventList>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00e      	beq.n	8008c4c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e007      	b.n	8008c4c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c40:	3301      	adds	r3, #1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	b25a      	sxtb	r2, r3
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c50:	e001      	b.n	8008c56 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	637b      	str	r3, [r7, #52]	; 0x34
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3738      	adds	r7, #56	; 0x38
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10b      	bne.n	8008c90 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	b672      	cpsid	i
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	b662      	cpsie	i
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	e7fe      	b.n	8008c8e <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8008c90:	f001 fe62 	bl	800a958 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008c9a:	f001 fe8f 	bl	800a9bc <vPortExitCritical>

	return uxReturn;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <uxQueueMessagesWaitingFromISR+0x2a>
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	b672      	cpsid	i
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	b662      	cpsie	i
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e7fe      	b.n	8008cd0 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008cd8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008cda:	4618      	mov	r0, r3
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10b      	bne.n	8008d10 <vQueueDelete+0x2a>
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	b672      	cpsid	i
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	b662      	cpsie	i
 8008d0c:	60bb      	str	r3, [r7, #8]
 8008d0e:	e7fe      	b.n	8008d0e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 f95d 	bl	8008fd0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d102      	bne.n	8008d26 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f002 f803 	bl	800ad2c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008d2e:	b480      	push	{r7}
 8008d30:	b085      	sub	sp, #20
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d006      	beq.n	8008d4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	e001      	b.n	8008d50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008d50:	68fb      	ldr	r3, [r7, #12]
	}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b086      	sub	sp, #24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10d      	bne.n	8008d98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d14d      	bne.n	8008e20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f001 f82d 	bl	8009de8 <xTaskPriorityDisinherit>
 8008d8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	609a      	str	r2, [r3, #8]
 8008d96:	e043      	b.n	8008e20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d119      	bne.n	8008dd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6858      	ldr	r0, [r3, #4]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da6:	461a      	mov	r2, r3
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	f002 f909 	bl	800afc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	441a      	add	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d32b      	bcc.n	8008e20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	605a      	str	r2, [r3, #4]
 8008dd0:	e026      	b.n	8008e20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	68d8      	ldr	r0, [r3, #12]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dda:	461a      	mov	r2, r3
 8008ddc:	68b9      	ldr	r1, [r7, #8]
 8008dde:	f002 f8ef 	bl	800afc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	425b      	negs	r3, r3
 8008dec:	441a      	add	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d207      	bcs.n	8008e0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689a      	ldr	r2, [r3, #8]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	425b      	negs	r3, r3
 8008e08:	441a      	add	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d105      	bne.n	8008e20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e28:	697b      	ldr	r3, [r7, #20]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d018      	beq.n	8008e76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4c:	441a      	add	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d303      	bcc.n	8008e66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68d9      	ldr	r1, [r3, #12]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6838      	ldr	r0, [r7, #0]
 8008e72:	f002 f8a5 	bl	800afc0 <memcpy>
	}
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e86:	f001 fd67 	bl	800a958 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e92:	e011      	b.n	8008eb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d012      	beq.n	8008ec2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3324      	adds	r3, #36	; 0x24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fd5d 	bl	8009960 <xTaskRemoveFromEventList>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008eac:	f000 fe36 	bl	8009b1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dce9      	bgt.n	8008e94 <prvUnlockQueue+0x16>
 8008ec0:	e000      	b.n	8008ec4 <prvUnlockQueue+0x46>
					break;
 8008ec2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	22ff      	movs	r2, #255	; 0xff
 8008ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ecc:	f001 fd76 	bl	800a9bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ed0:	f001 fd42 	bl	800a958 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008edc:	e011      	b.n	8008f02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d012      	beq.n	8008f0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	3310      	adds	r3, #16
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fd38 	bl	8009960 <xTaskRemoveFromEventList>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ef6:	f000 fe11 	bl	8009b1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dce9      	bgt.n	8008ede <prvUnlockQueue+0x60>
 8008f0a:	e000      	b.n	8008f0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	22ff      	movs	r2, #255	; 0xff
 8008f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f16:	f001 fd51 	bl	800a9bc <vPortExitCritical>
}
 8008f1a:	bf00      	nop
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f2a:	f001 fd15 	bl	800a958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f36:	2301      	movs	r3, #1
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	e001      	b.n	8008f40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f40:	f001 fd3c 	bl	800a9bc <vPortExitCritical>

	return xReturn;
 8008f44:	68fb      	ldr	r3, [r7, #12]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f56:	f001 fcff 	bl	800a958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d102      	bne.n	8008f6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f66:	2301      	movs	r3, #1
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e001      	b.n	8008f70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f70:	f001 fd24 	bl	800a9bc <vPortExitCritical>

	return xReturn;
 8008f74:	68fb      	ldr	r3, [r7, #12]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	e014      	b.n	8008fba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f90:	4a0e      	ldr	r2, [pc, #56]	; (8008fcc <vQueueAddToRegistry+0x4c>)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10b      	bne.n	8008fb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f9c:	490b      	ldr	r1, [pc, #44]	; (8008fcc <vQueueAddToRegistry+0x4c>)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008fa6:	4a09      	ldr	r2, [pc, #36]	; (8008fcc <vQueueAddToRegistry+0x4c>)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	00db      	lsls	r3, r3, #3
 8008fac:	4413      	add	r3, r2
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008fb2:	e005      	b.n	8008fc0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b07      	cmp	r3, #7
 8008fbe:	d9e7      	bls.n	8008f90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fc0:	bf00      	nop
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	20004cbc 	.word	0x20004cbc

08008fd0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	e016      	b.n	800900c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008fde:	4a10      	ldr	r2, [pc, #64]	; (8009020 <vQueueUnregisterQueue+0x50>)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d10b      	bne.n	8009006 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008fee:	4a0c      	ldr	r2, [pc, #48]	; (8009020 <vQueueUnregisterQueue+0x50>)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008ff8:	4a09      	ldr	r2, [pc, #36]	; (8009020 <vQueueUnregisterQueue+0x50>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	4413      	add	r3, r2
 8009000:	2200      	movs	r2, #0
 8009002:	605a      	str	r2, [r3, #4]
				break;
 8009004:	e005      	b.n	8009012 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3301      	adds	r3, #1
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b07      	cmp	r3, #7
 8009010:	d9e5      	bls.n	8008fde <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	20004cbc 	.word	0x20004cbc

08009024 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009034:	f001 fc90 	bl	800a958 <vPortEnterCritical>
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800903e:	b25b      	sxtb	r3, r3
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009044:	d103      	bne.n	800904e <vQueueWaitForMessageRestricted+0x2a>
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009054:	b25b      	sxtb	r3, r3
 8009056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800905a:	d103      	bne.n	8009064 <vQueueWaitForMessageRestricted+0x40>
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009064:	f001 fcaa 	bl	800a9bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	2b00      	cmp	r3, #0
 800906e:	d106      	bne.n	800907e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	3324      	adds	r3, #36	; 0x24
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fc45 	bl	8009908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800907e:	6978      	ldr	r0, [r7, #20]
 8009080:	f7ff fefd 	bl	8008e7e <prvUnlockQueue>
	}
 8009084:	bf00      	nop
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08e      	sub	sp, #56	; 0x38
 8009090:	af04      	add	r7, sp, #16
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800909a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10b      	bne.n	80090b8 <xTaskCreateStatic+0x2c>
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	b672      	cpsid	i
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	b662      	cpsie	i
 80090b4:	623b      	str	r3, [r7, #32]
 80090b6:	e7fe      	b.n	80090b6 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10b      	bne.n	80090d6 <xTaskCreateStatic+0x4a>
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	b672      	cpsid	i
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	b662      	cpsie	i
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	e7fe      	b.n	80090d4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090d6:	235c      	movs	r3, #92	; 0x5c
 80090d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b5c      	cmp	r3, #92	; 0x5c
 80090de:	d00b      	beq.n	80090f8 <xTaskCreateStatic+0x6c>
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	b672      	cpsid	i
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	b662      	cpsie	i
 80090f4:	61bb      	str	r3, [r7, #24]
 80090f6:	e7fe      	b.n	80090f6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01e      	beq.n	800913e <xTaskCreateStatic+0xb2>
 8009100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009102:	2b00      	cmp	r3, #0
 8009104:	d01b      	beq.n	800913e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800910e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	2202      	movs	r2, #2
 8009114:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009118:	2300      	movs	r3, #0
 800911a:	9303      	str	r3, [sp, #12]
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	9302      	str	r3, [sp, #8]
 8009120:	f107 0314 	add.w	r3, r7, #20
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	68b9      	ldr	r1, [r7, #8]
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 f850 	bl	80091d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009138:	f000 f8de 	bl	80092f8 <prvAddNewTaskToReadyList>
 800913c:	e001      	b.n	8009142 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009142:	697b      	ldr	r3, [r7, #20]
	}
 8009144:	4618      	mov	r0, r3
 8009146:	3728      	adds	r7, #40	; 0x28
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08c      	sub	sp, #48	; 0x30
 8009150:	af04      	add	r7, sp, #16
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	4613      	mov	r3, r2
 800915a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800915c:	88fb      	ldrh	r3, [r7, #6]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4618      	mov	r0, r3
 8009162:	f001 fd1b 	bl	800ab9c <pvPortMalloc>
 8009166:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00e      	beq.n	800918c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800916e:	205c      	movs	r0, #92	; 0x5c
 8009170:	f001 fd14 	bl	800ab9c <pvPortMalloc>
 8009174:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	631a      	str	r2, [r3, #48]	; 0x30
 8009182:	e005      	b.n	8009190 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009184:	6978      	ldr	r0, [r7, #20]
 8009186:	f001 fdd1 	bl	800ad2c <vPortFree>
 800918a:	e001      	b.n	8009190 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800918c:	2300      	movs	r3, #0
 800918e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d017      	beq.n	80091c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800919e:	88fa      	ldrh	r2, [r7, #6]
 80091a0:	2300      	movs	r3, #0
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	9302      	str	r3, [sp, #8]
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f80e 	bl	80091d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091ba:	69f8      	ldr	r0, [r7, #28]
 80091bc:	f000 f89c 	bl	80092f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091c0:	2301      	movs	r3, #1
 80091c2:	61bb      	str	r3, [r7, #24]
 80091c4:	e002      	b.n	80091cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091cc:	69bb      	ldr	r3, [r7, #24]
	}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3720      	adds	r7, #32
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b088      	sub	sp, #32
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	607a      	str	r2, [r7, #4]
 80091e2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	461a      	mov	r2, r3
 80091ee:	21a5      	movs	r1, #165	; 0xa5
 80091f0:	f001 fef1 	bl	800afd6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80091fe:	440b      	add	r3, r1
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f023 0307 	bic.w	r3, r3, #7
 800920c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	f003 0307 	and.w	r3, r3, #7
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <prvInitialiseNewTask+0x5a>
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	b672      	cpsid	i
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	b662      	cpsie	i
 800922c:	617b      	str	r3, [r7, #20]
 800922e:	e7fe      	b.n	800922e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d01f      	beq.n	8009276 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009236:	2300      	movs	r3, #0
 8009238:	61fb      	str	r3, [r7, #28]
 800923a:	e012      	b.n	8009262 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	4413      	add	r3, r2
 8009242:	7819      	ldrb	r1, [r3, #0]
 8009244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	4413      	add	r3, r2
 800924a:	3334      	adds	r3, #52	; 0x34
 800924c:	460a      	mov	r2, r1
 800924e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d006      	beq.n	800926a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	3301      	adds	r3, #1
 8009260:	61fb      	str	r3, [r7, #28]
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	2b0f      	cmp	r3, #15
 8009266:	d9e9      	bls.n	800923c <prvInitialiseNewTask+0x66>
 8009268:	e000      	b.n	800926c <prvInitialiseNewTask+0x96>
			{
				break;
 800926a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009274:	e003      	b.n	800927e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	2b37      	cmp	r3, #55	; 0x37
 8009282:	d901      	bls.n	8009288 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009284:	2337      	movs	r3, #55	; 0x37
 8009286:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800928c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009292:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	2200      	movs	r2, #0
 8009298:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	3304      	adds	r3, #4
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fdf0 	bl	8007e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	3318      	adds	r3, #24
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe fdeb 	bl	8007e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	2200      	movs	r2, #0
 80092c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	68f9      	ldr	r1, [r7, #12]
 80092d6:	69b8      	ldr	r0, [r7, #24]
 80092d8:	f001 fa36 	bl	800a748 <pxPortInitialiseStack>
 80092dc:	4602      	mov	r2, r0
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092ee:	bf00      	nop
 80092f0:	3720      	adds	r7, #32
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009300:	f001 fb2a 	bl	800a958 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009304:	4b2d      	ldr	r3, [pc, #180]	; (80093bc <prvAddNewTaskToReadyList+0xc4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3301      	adds	r3, #1
 800930a:	4a2c      	ldr	r2, [pc, #176]	; (80093bc <prvAddNewTaskToReadyList+0xc4>)
 800930c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800930e:	4b2c      	ldr	r3, [pc, #176]	; (80093c0 <prvAddNewTaskToReadyList+0xc8>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d109      	bne.n	800932a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009316:	4a2a      	ldr	r2, [pc, #168]	; (80093c0 <prvAddNewTaskToReadyList+0xc8>)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800931c:	4b27      	ldr	r3, [pc, #156]	; (80093bc <prvAddNewTaskToReadyList+0xc4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d110      	bne.n	8009346 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009324:	f000 fc1e 	bl	8009b64 <prvInitialiseTaskLists>
 8009328:	e00d      	b.n	8009346 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800932a:	4b26      	ldr	r3, [pc, #152]	; (80093c4 <prvAddNewTaskToReadyList+0xcc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d109      	bne.n	8009346 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009332:	4b23      	ldr	r3, [pc, #140]	; (80093c0 <prvAddNewTaskToReadyList+0xc8>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	429a      	cmp	r2, r3
 800933e:	d802      	bhi.n	8009346 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009340:	4a1f      	ldr	r2, [pc, #124]	; (80093c0 <prvAddNewTaskToReadyList+0xc8>)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009346:	4b20      	ldr	r3, [pc, #128]	; (80093c8 <prvAddNewTaskToReadyList+0xd0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3301      	adds	r3, #1
 800934c:	4a1e      	ldr	r2, [pc, #120]	; (80093c8 <prvAddNewTaskToReadyList+0xd0>)
 800934e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009350:	4b1d      	ldr	r3, [pc, #116]	; (80093c8 <prvAddNewTaskToReadyList+0xd0>)
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	4b1b      	ldr	r3, [pc, #108]	; (80093cc <prvAddNewTaskToReadyList+0xd4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d903      	bls.n	800936c <prvAddNewTaskToReadyList+0x74>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	4a18      	ldr	r2, [pc, #96]	; (80093cc <prvAddNewTaskToReadyList+0xd4>)
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <prvAddNewTaskToReadyList+0xd8>)
 800937a:	441a      	add	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f7fe fd8b 	bl	8007e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009388:	f001 fb18 	bl	800a9bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800938c:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <prvAddNewTaskToReadyList+0xcc>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00e      	beq.n	80093b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009394:	4b0a      	ldr	r3, [pc, #40]	; (80093c0 <prvAddNewTaskToReadyList+0xc8>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	429a      	cmp	r2, r3
 80093a0:	d207      	bcs.n	80093b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093a2:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <prvAddNewTaskToReadyList+0xdc>)
 80093a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000c60 	.word	0x20000c60
 80093c0:	2000078c 	.word	0x2000078c
 80093c4:	20000c6c 	.word	0x20000c6c
 80093c8:	20000c7c 	.word	0x20000c7c
 80093cc:	20000c68 	.word	0x20000c68
 80093d0:	20000790 	.word	0x20000790
 80093d4:	e000ed04 	.word	0xe000ed04

080093d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d018      	beq.n	800941c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093ea:	4b14      	ldr	r3, [pc, #80]	; (800943c <vTaskDelay+0x64>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <vTaskDelay+0x32>
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	b672      	cpsid	i
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	b662      	cpsie	i
 8009406:	60bb      	str	r3, [r7, #8]
 8009408:	e7fe      	b.n	8009408 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800940a:	f000 f883 	bl	8009514 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800940e:	2100      	movs	r1, #0
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fdf1 	bl	8009ff8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009416:	f000 f88b 	bl	8009530 <xTaskResumeAll>
 800941a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d107      	bne.n	8009432 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009422:	4b07      	ldr	r3, [pc, #28]	; (8009440 <vTaskDelay+0x68>)
 8009424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000c88 	.word	0x20000c88
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	; 0x28
 8009448:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800944a:	2300      	movs	r3, #0
 800944c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009452:	463a      	mov	r2, r7
 8009454:	1d39      	adds	r1, r7, #4
 8009456:	f107 0308 	add.w	r3, r7, #8
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe fcbe 	bl	8007ddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	9202      	str	r2, [sp, #8]
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	2300      	movs	r3, #0
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2300      	movs	r3, #0
 8009470:	460a      	mov	r2, r1
 8009472:	4922      	ldr	r1, [pc, #136]	; (80094fc <vTaskStartScheduler+0xb8>)
 8009474:	4822      	ldr	r0, [pc, #136]	; (8009500 <vTaskStartScheduler+0xbc>)
 8009476:	f7ff fe09 	bl	800908c <xTaskCreateStatic>
 800947a:	4602      	mov	r2, r0
 800947c:	4b21      	ldr	r3, [pc, #132]	; (8009504 <vTaskStartScheduler+0xc0>)
 800947e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009480:	4b20      	ldr	r3, [pc, #128]	; (8009504 <vTaskStartScheduler+0xc0>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009488:	2301      	movs	r3, #1
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	e001      	b.n	8009492 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d102      	bne.n	800949e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009498:	f000 fe02 	bl	800a0a0 <xTimerCreateTimerTask>
 800949c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d117      	bne.n	80094d4 <vTaskStartScheduler+0x90>
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	b672      	cpsid	i
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	b662      	cpsie	i
 80094b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094ba:	4b13      	ldr	r3, [pc, #76]	; (8009508 <vTaskStartScheduler+0xc4>)
 80094bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094c2:	4b12      	ldr	r3, [pc, #72]	; (800950c <vTaskStartScheduler+0xc8>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094c8:	4b11      	ldr	r3, [pc, #68]	; (8009510 <vTaskStartScheduler+0xcc>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094ce:	f001 f9c7 	bl	800a860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094d2:	e00f      	b.n	80094f4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094da:	d10b      	bne.n	80094f4 <vTaskStartScheduler+0xb0>
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	b672      	cpsid	i
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	b662      	cpsie	i
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	e7fe      	b.n	80094f2 <vTaskStartScheduler+0xae>
}
 80094f4:	bf00      	nop
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	0800ba5c 	.word	0x0800ba5c
 8009500:	08009b35 	.word	0x08009b35
 8009504:	20000c84 	.word	0x20000c84
 8009508:	20000c80 	.word	0x20000c80
 800950c:	20000c6c 	.word	0x20000c6c
 8009510:	20000c64 	.word	0x20000c64

08009514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <vTaskSuspendAll+0x18>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3301      	adds	r3, #1
 800951e:	4a03      	ldr	r2, [pc, #12]	; (800952c <vTaskSuspendAll+0x18>)
 8009520:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009522:	bf00      	nop
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	20000c88 	.word	0x20000c88

08009530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800953a:	2300      	movs	r3, #0
 800953c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800953e:	4b42      	ldr	r3, [pc, #264]	; (8009648 <xTaskResumeAll+0x118>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10b      	bne.n	800955e <xTaskResumeAll+0x2e>
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	b672      	cpsid	i
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	b662      	cpsie	i
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	e7fe      	b.n	800955c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800955e:	f001 f9fb 	bl	800a958 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009562:	4b39      	ldr	r3, [pc, #228]	; (8009648 <xTaskResumeAll+0x118>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3b01      	subs	r3, #1
 8009568:	4a37      	ldr	r2, [pc, #220]	; (8009648 <xTaskResumeAll+0x118>)
 800956a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800956c:	4b36      	ldr	r3, [pc, #216]	; (8009648 <xTaskResumeAll+0x118>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d162      	bne.n	800963a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009574:	4b35      	ldr	r3, [pc, #212]	; (800964c <xTaskResumeAll+0x11c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d05e      	beq.n	800963a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800957c:	e02f      	b.n	80095de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957e:	4b34      	ldr	r3, [pc, #208]	; (8009650 <xTaskResumeAll+0x120>)
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3318      	adds	r3, #24
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe fce4 	bl	8007f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3304      	adds	r3, #4
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe fcdf 	bl	8007f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959e:	4b2d      	ldr	r3, [pc, #180]	; (8009654 <xTaskResumeAll+0x124>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d903      	bls.n	80095ae <xTaskResumeAll+0x7e>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	4a2a      	ldr	r2, [pc, #168]	; (8009654 <xTaskResumeAll+0x124>)
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4a27      	ldr	r2, [pc, #156]	; (8009658 <xTaskResumeAll+0x128>)
 80095bc:	441a      	add	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3304      	adds	r3, #4
 80095c2:	4619      	mov	r1, r3
 80095c4:	4610      	mov	r0, r2
 80095c6:	f7fe fc6a 	bl	8007e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ce:	4b23      	ldr	r3, [pc, #140]	; (800965c <xTaskResumeAll+0x12c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d302      	bcc.n	80095de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80095d8:	4b21      	ldr	r3, [pc, #132]	; (8009660 <xTaskResumeAll+0x130>)
 80095da:	2201      	movs	r2, #1
 80095dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095de:	4b1c      	ldr	r3, [pc, #112]	; (8009650 <xTaskResumeAll+0x120>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1cb      	bne.n	800957e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095ec:	f000 fb56 	bl	8009c9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80095f0:	4b1c      	ldr	r3, [pc, #112]	; (8009664 <xTaskResumeAll+0x134>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d010      	beq.n	800961e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095fc:	f000 f846 	bl	800968c <xTaskIncrementTick>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009606:	4b16      	ldr	r3, [pc, #88]	; (8009660 <xTaskResumeAll+0x130>)
 8009608:	2201      	movs	r2, #1
 800960a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3b01      	subs	r3, #1
 8009610:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1f1      	bne.n	80095fc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009618:	4b12      	ldr	r3, [pc, #72]	; (8009664 <xTaskResumeAll+0x134>)
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800961e:	4b10      	ldr	r3, [pc, #64]	; (8009660 <xTaskResumeAll+0x130>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009626:	2301      	movs	r3, #1
 8009628:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800962a:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <xTaskResumeAll+0x138>)
 800962c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800963a:	f001 f9bf 	bl	800a9bc <vPortExitCritical>

	return xAlreadyYielded;
 800963e:	68bb      	ldr	r3, [r7, #8]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000c88 	.word	0x20000c88
 800964c:	20000c60 	.word	0x20000c60
 8009650:	20000c20 	.word	0x20000c20
 8009654:	20000c68 	.word	0x20000c68
 8009658:	20000790 	.word	0x20000790
 800965c:	2000078c 	.word	0x2000078c
 8009660:	20000c74 	.word	0x20000c74
 8009664:	20000c70 	.word	0x20000c70
 8009668:	e000ed04 	.word	0xe000ed04

0800966c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009672:	4b05      	ldr	r3, [pc, #20]	; (8009688 <xTaskGetTickCount+0x1c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009678:	687b      	ldr	r3, [r7, #4]
}
 800967a:	4618      	mov	r0, r3
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	20000c64 	.word	0x20000c64

0800968c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009692:	2300      	movs	r3, #0
 8009694:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009696:	4b4f      	ldr	r3, [pc, #316]	; (80097d4 <xTaskIncrementTick+0x148>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f040 808a 	bne.w	80097b4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096a0:	4b4d      	ldr	r3, [pc, #308]	; (80097d8 <xTaskIncrementTick+0x14c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096a8:	4a4b      	ldr	r2, [pc, #300]	; (80097d8 <xTaskIncrementTick+0x14c>)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d121      	bne.n	80096f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80096b4:	4b49      	ldr	r3, [pc, #292]	; (80097dc <xTaskIncrementTick+0x150>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <xTaskIncrementTick+0x4a>
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	b672      	cpsid	i
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	b662      	cpsie	i
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	e7fe      	b.n	80096d4 <xTaskIncrementTick+0x48>
 80096d6:	4b41      	ldr	r3, [pc, #260]	; (80097dc <xTaskIncrementTick+0x150>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	4b40      	ldr	r3, [pc, #256]	; (80097e0 <xTaskIncrementTick+0x154>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a3e      	ldr	r2, [pc, #248]	; (80097dc <xTaskIncrementTick+0x150>)
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	4a3e      	ldr	r2, [pc, #248]	; (80097e0 <xTaskIncrementTick+0x154>)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	4b3e      	ldr	r3, [pc, #248]	; (80097e4 <xTaskIncrementTick+0x158>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3301      	adds	r3, #1
 80096f0:	4a3c      	ldr	r2, [pc, #240]	; (80097e4 <xTaskIncrementTick+0x158>)
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	f000 fad2 	bl	8009c9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096f8:	4b3b      	ldr	r3, [pc, #236]	; (80097e8 <xTaskIncrementTick+0x15c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d349      	bcc.n	8009796 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009702:	4b36      	ldr	r3, [pc, #216]	; (80097dc <xTaskIncrementTick+0x150>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d104      	bne.n	8009716 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800970c:	4b36      	ldr	r3, [pc, #216]	; (80097e8 <xTaskIncrementTick+0x15c>)
 800970e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009712:	601a      	str	r2, [r3, #0]
					break;
 8009714:	e03f      	b.n	8009796 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009716:	4b31      	ldr	r3, [pc, #196]	; (80097dc <xTaskIncrementTick+0x150>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	429a      	cmp	r2, r3
 800972c:	d203      	bcs.n	8009736 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800972e:	4a2e      	ldr	r2, [pc, #184]	; (80097e8 <xTaskIncrementTick+0x15c>)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009734:	e02f      	b.n	8009796 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	3304      	adds	r3, #4
 800973a:	4618      	mov	r0, r3
 800973c:	f7fe fc0c 	bl	8007f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009744:	2b00      	cmp	r3, #0
 8009746:	d004      	beq.n	8009752 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	3318      	adds	r3, #24
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe fc03 	bl	8007f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009756:	4b25      	ldr	r3, [pc, #148]	; (80097ec <xTaskIncrementTick+0x160>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	429a      	cmp	r2, r3
 800975c:	d903      	bls.n	8009766 <xTaskIncrementTick+0xda>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009762:	4a22      	ldr	r2, [pc, #136]	; (80097ec <xTaskIncrementTick+0x160>)
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4a1f      	ldr	r2, [pc, #124]	; (80097f0 <xTaskIncrementTick+0x164>)
 8009774:	441a      	add	r2, r3
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	3304      	adds	r3, #4
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f7fe fb8e 	bl	8007e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009786:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <xTaskIncrementTick+0x168>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	429a      	cmp	r2, r3
 800978e:	d3b8      	bcc.n	8009702 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009790:	2301      	movs	r3, #1
 8009792:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009794:	e7b5      	b.n	8009702 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009796:	4b17      	ldr	r3, [pc, #92]	; (80097f4 <xTaskIncrementTick+0x168>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979c:	4914      	ldr	r1, [pc, #80]	; (80097f0 <xTaskIncrementTick+0x164>)
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	440b      	add	r3, r1
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d907      	bls.n	80097be <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80097ae:	2301      	movs	r3, #1
 80097b0:	617b      	str	r3, [r7, #20]
 80097b2:	e004      	b.n	80097be <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80097b4:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <xTaskIncrementTick+0x16c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3301      	adds	r3, #1
 80097ba:	4a0f      	ldr	r2, [pc, #60]	; (80097f8 <xTaskIncrementTick+0x16c>)
 80097bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80097be:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <xTaskIncrementTick+0x170>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80097c6:	2301      	movs	r3, #1
 80097c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80097ca:	697b      	ldr	r3, [r7, #20]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20000c88 	.word	0x20000c88
 80097d8:	20000c64 	.word	0x20000c64
 80097dc:	20000c18 	.word	0x20000c18
 80097e0:	20000c1c 	.word	0x20000c1c
 80097e4:	20000c78 	.word	0x20000c78
 80097e8:	20000c80 	.word	0x20000c80
 80097ec:	20000c68 	.word	0x20000c68
 80097f0:	20000790 	.word	0x20000790
 80097f4:	2000078c 	.word	0x2000078c
 80097f8:	20000c70 	.word	0x20000c70
 80097fc:	20000c74 	.word	0x20000c74

08009800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009806:	4b28      	ldr	r3, [pc, #160]	; (80098a8 <vTaskSwitchContext+0xa8>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800980e:	4b27      	ldr	r3, [pc, #156]	; (80098ac <vTaskSwitchContext+0xac>)
 8009810:	2201      	movs	r2, #1
 8009812:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009814:	e042      	b.n	800989c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009816:	4b25      	ldr	r3, [pc, #148]	; (80098ac <vTaskSwitchContext+0xac>)
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800981c:	4b24      	ldr	r3, [pc, #144]	; (80098b0 <vTaskSwitchContext+0xb0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60fb      	str	r3, [r7, #12]
 8009822:	e011      	b.n	8009848 <vTaskSwitchContext+0x48>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10b      	bne.n	8009842 <vTaskSwitchContext+0x42>
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	b672      	cpsid	i
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	b662      	cpsie	i
 800983e:	607b      	str	r3, [r7, #4]
 8009840:	e7fe      	b.n	8009840 <vTaskSwitchContext+0x40>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3b01      	subs	r3, #1
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	491a      	ldr	r1, [pc, #104]	; (80098b4 <vTaskSwitchContext+0xb4>)
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0e3      	beq.n	8009824 <vTaskSwitchContext+0x24>
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4a13      	ldr	r2, [pc, #76]	; (80098b4 <vTaskSwitchContext+0xb4>)
 8009868:	4413      	add	r3, r2
 800986a:	60bb      	str	r3, [r7, #8]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	605a      	str	r2, [r3, #4]
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	3308      	adds	r3, #8
 800987e:	429a      	cmp	r2, r3
 8009880:	d104      	bne.n	800988c <vTaskSwitchContext+0x8c>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	605a      	str	r2, [r3, #4]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	4a09      	ldr	r2, [pc, #36]	; (80098b8 <vTaskSwitchContext+0xb8>)
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	4a06      	ldr	r2, [pc, #24]	; (80098b0 <vTaskSwitchContext+0xb0>)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6013      	str	r3, [r2, #0]
}
 800989c:	bf00      	nop
 800989e:	3714      	adds	r7, #20
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	20000c88 	.word	0x20000c88
 80098ac:	20000c74 	.word	0x20000c74
 80098b0:	20000c68 	.word	0x20000c68
 80098b4:	20000790 	.word	0x20000790
 80098b8:	2000078c 	.word	0x2000078c

080098bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10b      	bne.n	80098e4 <vTaskPlaceOnEventList+0x28>
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	b672      	cpsid	i
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	b662      	cpsie	i
 80098e0:	60fb      	str	r3, [r7, #12]
 80098e2:	e7fe      	b.n	80098e2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098e4:	4b07      	ldr	r3, [pc, #28]	; (8009904 <vTaskPlaceOnEventList+0x48>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3318      	adds	r3, #24
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7fe fafa 	bl	8007ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098f2:	2101      	movs	r1, #1
 80098f4:	6838      	ldr	r0, [r7, #0]
 80098f6:	f000 fb7f 	bl	8009ff8 <prvAddCurrentTaskToDelayedList>
}
 80098fa:	bf00      	nop
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	2000078c 	.word	0x2000078c

08009908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <vTaskPlaceOnEventListRestricted+0x2a>
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	b672      	cpsid	i
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	b662      	cpsie	i
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	e7fe      	b.n	8009930 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009932:	4b0a      	ldr	r3, [pc, #40]	; (800995c <vTaskPlaceOnEventListRestricted+0x54>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3318      	adds	r3, #24
 8009938:	4619      	mov	r1, r3
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7fe faaf 	bl	8007e9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800994a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800994c:	6879      	ldr	r1, [r7, #4]
 800994e:	68b8      	ldr	r0, [r7, #8]
 8009950:	f000 fb52 	bl	8009ff8 <prvAddCurrentTaskToDelayedList>
	}
 8009954:	bf00      	nop
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	2000078c 	.word	0x2000078c

08009960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10b      	bne.n	800998e <xTaskRemoveFromEventList+0x2e>
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	b672      	cpsid	i
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	b662      	cpsie	i
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	e7fe      	b.n	800998c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3318      	adds	r3, #24
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fae0 	bl	8007f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009998:	4b1d      	ldr	r3, [pc, #116]	; (8009a10 <xTaskRemoveFromEventList+0xb0>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d11d      	bne.n	80099dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	3304      	adds	r3, #4
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fad7 	bl	8007f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ae:	4b19      	ldr	r3, [pc, #100]	; (8009a14 <xTaskRemoveFromEventList+0xb4>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d903      	bls.n	80099be <xTaskRemoveFromEventList+0x5e>
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	4a16      	ldr	r2, [pc, #88]	; (8009a14 <xTaskRemoveFromEventList+0xb4>)
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c2:	4613      	mov	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4a13      	ldr	r2, [pc, #76]	; (8009a18 <xTaskRemoveFromEventList+0xb8>)
 80099cc:	441a      	add	r2, r3
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	3304      	adds	r3, #4
 80099d2:	4619      	mov	r1, r3
 80099d4:	4610      	mov	r0, r2
 80099d6:	f7fe fa62 	bl	8007e9e <vListInsertEnd>
 80099da:	e005      	b.n	80099e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	3318      	adds	r3, #24
 80099e0:	4619      	mov	r1, r3
 80099e2:	480e      	ldr	r0, [pc, #56]	; (8009a1c <xTaskRemoveFromEventList+0xbc>)
 80099e4:	f7fe fa5b 	bl	8007e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ec:	4b0c      	ldr	r3, [pc, #48]	; (8009a20 <xTaskRemoveFromEventList+0xc0>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d905      	bls.n	8009a02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099f6:	2301      	movs	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099fa:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <xTaskRemoveFromEventList+0xc4>)
 80099fc:	2201      	movs	r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	e001      	b.n	8009a06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a06:	697b      	ldr	r3, [r7, #20]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20000c88 	.word	0x20000c88
 8009a14:	20000c68 	.word	0x20000c68
 8009a18:	20000790 	.word	0x20000790
 8009a1c:	20000c20 	.word	0x20000c20
 8009a20:	2000078c 	.word	0x2000078c
 8009a24:	20000c74 	.word	0x20000c74

08009a28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a30:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <vTaskInternalSetTimeOutState+0x24>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a38:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <vTaskInternalSetTimeOutState+0x28>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	605a      	str	r2, [r3, #4]
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	20000c78 	.word	0x20000c78
 8009a50:	20000c64 	.word	0x20000c64

08009a54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10b      	bne.n	8009a7c <xTaskCheckForTimeOut+0x28>
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	b672      	cpsid	i
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	b662      	cpsie	i
 8009a78:	613b      	str	r3, [r7, #16]
 8009a7a:	e7fe      	b.n	8009a7a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10b      	bne.n	8009a9a <xTaskCheckForTimeOut+0x46>
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	b672      	cpsid	i
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	b662      	cpsie	i
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	e7fe      	b.n	8009a98 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8009a9a:	f000 ff5d 	bl	800a958 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <xTaskCheckForTimeOut+0xc0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	69ba      	ldr	r2, [r7, #24]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ab6:	d102      	bne.n	8009abe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	61fb      	str	r3, [r7, #28]
 8009abc:	e023      	b.n	8009b06 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	4b15      	ldr	r3, [pc, #84]	; (8009b18 <xTaskCheckForTimeOut+0xc4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d007      	beq.n	8009ada <xTaskCheckForTimeOut+0x86>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d302      	bcc.n	8009ada <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	61fb      	str	r3, [r7, #28]
 8009ad8:	e015      	b.n	8009b06 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d20b      	bcs.n	8009afc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	1ad2      	subs	r2, r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7ff ff99 	bl	8009a28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009af6:	2300      	movs	r3, #0
 8009af8:	61fb      	str	r3, [r7, #28]
 8009afa:	e004      	b.n	8009b06 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b02:	2301      	movs	r3, #1
 8009b04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b06:	f000 ff59 	bl	800a9bc <vPortExitCritical>

	return xReturn;
 8009b0a:	69fb      	ldr	r3, [r7, #28]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3720      	adds	r7, #32
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20000c64 	.word	0x20000c64
 8009b18:	20000c78 	.word	0x20000c78

08009b1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b20:	4b03      	ldr	r3, [pc, #12]	; (8009b30 <vTaskMissedYield+0x14>)
 8009b22:	2201      	movs	r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
}
 8009b26:	bf00      	nop
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	20000c74 	.word	0x20000c74

08009b34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b3c:	f000 f852 	bl	8009be4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b40:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <prvIdleTask+0x28>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d9f9      	bls.n	8009b3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b48:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <prvIdleTask+0x2c>)
 8009b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b58:	e7f0      	b.n	8009b3c <prvIdleTask+0x8>
 8009b5a:	bf00      	nop
 8009b5c:	20000790 	.word	0x20000790
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	607b      	str	r3, [r7, #4]
 8009b6e:	e00c      	b.n	8009b8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	4613      	mov	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4a12      	ldr	r2, [pc, #72]	; (8009bc4 <prvInitialiseTaskLists+0x60>)
 8009b7c:	4413      	add	r3, r2
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe f960 	bl	8007e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3301      	adds	r3, #1
 8009b88:	607b      	str	r3, [r7, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b37      	cmp	r3, #55	; 0x37
 8009b8e:	d9ef      	bls.n	8009b70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b90:	480d      	ldr	r0, [pc, #52]	; (8009bc8 <prvInitialiseTaskLists+0x64>)
 8009b92:	f7fe f957 	bl	8007e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b96:	480d      	ldr	r0, [pc, #52]	; (8009bcc <prvInitialiseTaskLists+0x68>)
 8009b98:	f7fe f954 	bl	8007e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b9c:	480c      	ldr	r0, [pc, #48]	; (8009bd0 <prvInitialiseTaskLists+0x6c>)
 8009b9e:	f7fe f951 	bl	8007e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ba2:	480c      	ldr	r0, [pc, #48]	; (8009bd4 <prvInitialiseTaskLists+0x70>)
 8009ba4:	f7fe f94e 	bl	8007e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ba8:	480b      	ldr	r0, [pc, #44]	; (8009bd8 <prvInitialiseTaskLists+0x74>)
 8009baa:	f7fe f94b 	bl	8007e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009bae:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <prvInitialiseTaskLists+0x78>)
 8009bb0:	4a05      	ldr	r2, [pc, #20]	; (8009bc8 <prvInitialiseTaskLists+0x64>)
 8009bb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <prvInitialiseTaskLists+0x7c>)
 8009bb6:	4a05      	ldr	r2, [pc, #20]	; (8009bcc <prvInitialiseTaskLists+0x68>)
 8009bb8:	601a      	str	r2, [r3, #0]
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000790 	.word	0x20000790
 8009bc8:	20000bf0 	.word	0x20000bf0
 8009bcc:	20000c04 	.word	0x20000c04
 8009bd0:	20000c20 	.word	0x20000c20
 8009bd4:	20000c34 	.word	0x20000c34
 8009bd8:	20000c4c 	.word	0x20000c4c
 8009bdc:	20000c18 	.word	0x20000c18
 8009be0:	20000c1c 	.word	0x20000c1c

08009be4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bea:	e019      	b.n	8009c20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009bec:	f000 feb4 	bl	800a958 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf0:	4b0f      	ldr	r3, [pc, #60]	; (8009c30 <prvCheckTasksWaitingTermination+0x4c>)
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe f9ab 	bl	8007f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c02:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <prvCheckTasksWaitingTermination+0x50>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	4a0a      	ldr	r2, [pc, #40]	; (8009c34 <prvCheckTasksWaitingTermination+0x50>)
 8009c0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c0c:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <prvCheckTasksWaitingTermination+0x54>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	4a09      	ldr	r2, [pc, #36]	; (8009c38 <prvCheckTasksWaitingTermination+0x54>)
 8009c14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c16:	f000 fed1 	bl	800a9bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f80e 	bl	8009c3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <prvCheckTasksWaitingTermination+0x54>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e1      	bne.n	8009bec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c28:	bf00      	nop
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20000c34 	.word	0x20000c34
 8009c34:	20000c60 	.word	0x20000c60
 8009c38:	20000c48 	.word	0x20000c48

08009c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d108      	bne.n	8009c60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c52:	4618      	mov	r0, r3
 8009c54:	f001 f86a 	bl	800ad2c <vPortFree>
				vPortFree( pxTCB );
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 f867 	bl	800ad2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c5e:	e019      	b.n	8009c94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d103      	bne.n	8009c72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 f85e 	bl	800ad2c <vPortFree>
	}
 8009c70:	e010      	b.n	8009c94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d00b      	beq.n	8009c94 <prvDeleteTCB+0x58>
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	b672      	cpsid	i
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	b662      	cpsie	i
 8009c90:	60fb      	str	r3, [r7, #12]
 8009c92:	e7fe      	b.n	8009c92 <prvDeleteTCB+0x56>
	}
 8009c94:	bf00      	nop
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ca2:	4b0c      	ldr	r3, [pc, #48]	; (8009cd4 <prvResetNextTaskUnblockTime+0x38>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d104      	bne.n	8009cb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009cac:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8009cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009cb4:	e008      	b.n	8009cc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb6:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <prvResetNextTaskUnblockTime+0x38>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	4a04      	ldr	r2, [pc, #16]	; (8009cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8009cc6:	6013      	str	r3, [r2, #0]
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	20000c18 	.word	0x20000c18
 8009cd8:	20000c80 	.word	0x20000c80

08009cdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ce2:	4b0b      	ldr	r3, [pc, #44]	; (8009d10 <xTaskGetSchedulerState+0x34>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d102      	bne.n	8009cf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cea:	2301      	movs	r3, #1
 8009cec:	607b      	str	r3, [r7, #4]
 8009cee:	e008      	b.n	8009d02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cf0:	4b08      	ldr	r3, [pc, #32]	; (8009d14 <xTaskGetSchedulerState+0x38>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	607b      	str	r3, [r7, #4]
 8009cfc:	e001      	b.n	8009d02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d02:	687b      	ldr	r3, [r7, #4]
	}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	20000c6c 	.word	0x20000c6c
 8009d14:	20000c88 	.word	0x20000c88

08009d18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009d24:	2300      	movs	r3, #0
 8009d26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d051      	beq.n	8009dd2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d32:	4b2a      	ldr	r3, [pc, #168]	; (8009ddc <xTaskPriorityInherit+0xc4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d241      	bcs.n	8009dc0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	db06      	blt.n	8009d52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d44:	4b25      	ldr	r3, [pc, #148]	; (8009ddc <xTaskPriorityInherit+0xc4>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	6959      	ldr	r1, [r3, #20]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4a1f      	ldr	r2, [pc, #124]	; (8009de0 <xTaskPriorityInherit+0xc8>)
 8009d64:	4413      	add	r3, r2
 8009d66:	4299      	cmp	r1, r3
 8009d68:	d122      	bne.n	8009db0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe f8f2 	bl	8007f58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d74:	4b19      	ldr	r3, [pc, #100]	; (8009ddc <xTaskPriorityInherit+0xc4>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d82:	4b18      	ldr	r3, [pc, #96]	; (8009de4 <xTaskPriorityInherit+0xcc>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d903      	bls.n	8009d92 <xTaskPriorityInherit+0x7a>
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8e:	4a15      	ldr	r2, [pc, #84]	; (8009de4 <xTaskPriorityInherit+0xcc>)
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4a10      	ldr	r2, [pc, #64]	; (8009de0 <xTaskPriorityInherit+0xc8>)
 8009da0:	441a      	add	r2, r3
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	3304      	adds	r3, #4
 8009da6:	4619      	mov	r1, r3
 8009da8:	4610      	mov	r0, r2
 8009daa:	f7fe f878 	bl	8007e9e <vListInsertEnd>
 8009dae:	e004      	b.n	8009dba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009db0:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <xTaskPriorityInherit+0xc4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	60fb      	str	r3, [r7, #12]
 8009dbe:	e008      	b.n	8009dd2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dc4:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <xTaskPriorityInherit+0xc4>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d201      	bcs.n	8009dd2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
	}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	2000078c 	.word	0x2000078c
 8009de0:	20000790 	.word	0x20000790
 8009de4:	20000c68 	.word	0x20000c68

08009de8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d058      	beq.n	8009eb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009dfe:	4b2f      	ldr	r3, [pc, #188]	; (8009ebc <xTaskPriorityDisinherit+0xd4>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d00b      	beq.n	8009e20 <xTaskPriorityDisinherit+0x38>
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	b672      	cpsid	i
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	b662      	cpsie	i
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	e7fe      	b.n	8009e1e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10b      	bne.n	8009e40 <xTaskPriorityDisinherit+0x58>
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	b672      	cpsid	i
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	b662      	cpsie	i
 8009e3c:	60bb      	str	r3, [r7, #8]
 8009e3e:	e7fe      	b.n	8009e3e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e44:	1e5a      	subs	r2, r3, #1
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d02c      	beq.n	8009eb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d128      	bne.n	8009eb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	3304      	adds	r3, #4
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe f878 	bl	8007f58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e80:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <xTaskPriorityDisinherit+0xd8>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d903      	bls.n	8009e90 <xTaskPriorityDisinherit+0xa8>
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8c:	4a0c      	ldr	r2, [pc, #48]	; (8009ec0 <xTaskPriorityDisinherit+0xd8>)
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e94:	4613      	mov	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4a09      	ldr	r2, [pc, #36]	; (8009ec4 <xTaskPriorityDisinherit+0xdc>)
 8009e9e:	441a      	add	r2, r3
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	f7fd fff9 	bl	8007e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009eac:	2301      	movs	r3, #1
 8009eae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009eb0:	697b      	ldr	r3, [r7, #20]
	}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	2000078c 	.word	0x2000078c
 8009ec0:	20000c68 	.word	0x20000c68
 8009ec4:	20000790 	.word	0x20000790

08009ec8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d06c      	beq.n	8009fba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10b      	bne.n	8009f00 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	b672      	cpsid	i
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	b662      	cpsie	i
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	e7fe      	b.n	8009efe <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d902      	bls.n	8009f10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	61fb      	str	r3, [r7, #28]
 8009f0e:	e002      	b.n	8009f16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1a:	69fa      	ldr	r2, [r7, #28]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d04c      	beq.n	8009fba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d147      	bne.n	8009fba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f2a:	4b26      	ldr	r3, [pc, #152]	; (8009fc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d10b      	bne.n	8009f4c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	b672      	cpsid	i
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	b662      	cpsie	i
 8009f48:	60bb      	str	r3, [r7, #8]
 8009f4a:	e7fe      	b.n	8009f4a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	69fa      	ldr	r2, [r7, #28]
 8009f56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	db04      	blt.n	8009f6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	6959      	ldr	r1, [r3, #20]
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	4613      	mov	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4a13      	ldr	r2, [pc, #76]	; (8009fc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009f7a:	4413      	add	r3, r2
 8009f7c:	4299      	cmp	r1, r3
 8009f7e:	d11c      	bne.n	8009fba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	3304      	adds	r3, #4
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fd ffe7 	bl	8007f58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8e:	4b0f      	ldr	r3, [pc, #60]	; (8009fcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d903      	bls.n	8009f9e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9a:	4a0c      	ldr	r2, [pc, #48]	; (8009fcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4a07      	ldr	r2, [pc, #28]	; (8009fc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009fac:	441a      	add	r2, r3
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	f7fd ff72 	bl	8007e9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fba:	bf00      	nop
 8009fbc:	3720      	adds	r7, #32
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	2000078c 	.word	0x2000078c
 8009fc8:	20000790 	.word	0x20000790
 8009fcc:	20000c68 	.word	0x20000c68

08009fd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009fd4:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d004      	beq.n	8009fe6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009fdc:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fe2:	3201      	adds	r2, #1
 8009fe4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009fe6:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
	}
 8009fea:	4618      	mov	r0, r3
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	2000078c 	.word	0x2000078c

08009ff8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a002:	4b21      	ldr	r3, [pc, #132]	; (800a088 <prvAddCurrentTaskToDelayedList+0x90>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a008:	4b20      	ldr	r3, [pc, #128]	; (800a08c <prvAddCurrentTaskToDelayedList+0x94>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3304      	adds	r3, #4
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fd ffa2 	bl	8007f58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a01a:	d10a      	bne.n	800a032 <prvAddCurrentTaskToDelayedList+0x3a>
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d007      	beq.n	800a032 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a022:	4b1a      	ldr	r3, [pc, #104]	; (800a08c <prvAddCurrentTaskToDelayedList+0x94>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3304      	adds	r3, #4
 800a028:	4619      	mov	r1, r3
 800a02a:	4819      	ldr	r0, [pc, #100]	; (800a090 <prvAddCurrentTaskToDelayedList+0x98>)
 800a02c:	f7fd ff37 	bl	8007e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a030:	e026      	b.n	800a080 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4413      	add	r3, r2
 800a038:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a03a:	4b14      	ldr	r3, [pc, #80]	; (800a08c <prvAddCurrentTaskToDelayedList+0x94>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	429a      	cmp	r2, r3
 800a048:	d209      	bcs.n	800a05e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a04a:	4b12      	ldr	r3, [pc, #72]	; (800a094 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <prvAddCurrentTaskToDelayedList+0x94>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3304      	adds	r3, #4
 800a054:	4619      	mov	r1, r3
 800a056:	4610      	mov	r0, r2
 800a058:	f7fd ff45 	bl	8007ee6 <vListInsert>
}
 800a05c:	e010      	b.n	800a080 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a05e:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <prvAddCurrentTaskToDelayedList+0x94>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f7fd ff3b 	bl	8007ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a070:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	429a      	cmp	r2, r3
 800a078:	d202      	bcs.n	800a080 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a07a:	4a08      	ldr	r2, [pc, #32]	; (800a09c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	6013      	str	r3, [r2, #0]
}
 800a080:	bf00      	nop
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20000c64 	.word	0x20000c64
 800a08c:	2000078c 	.word	0x2000078c
 800a090:	20000c4c 	.word	0x20000c4c
 800a094:	20000c1c 	.word	0x20000c1c
 800a098:	20000c18 	.word	0x20000c18
 800a09c:	20000c80 	.word	0x20000c80

0800a0a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b08a      	sub	sp, #40	; 0x28
 800a0a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a0aa:	f000 fb0d 	bl	800a6c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a0ae:	4b1d      	ldr	r3, [pc, #116]	; (800a124 <xTimerCreateTimerTask+0x84>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d021      	beq.n	800a0fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a0be:	1d3a      	adds	r2, r7, #4
 800a0c0:	f107 0108 	add.w	r1, r7, #8
 800a0c4:	f107 030c 	add.w	r3, r7, #12
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fd fea1 	bl	8007e10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	9202      	str	r2, [sp, #8]
 800a0d6:	9301      	str	r3, [sp, #4]
 800a0d8:	2332      	movs	r3, #50	; 0x32
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	460a      	mov	r2, r1
 800a0e0:	4911      	ldr	r1, [pc, #68]	; (800a128 <xTimerCreateTimerTask+0x88>)
 800a0e2:	4812      	ldr	r0, [pc, #72]	; (800a12c <xTimerCreateTimerTask+0x8c>)
 800a0e4:	f7fe ffd2 	bl	800908c <xTaskCreateStatic>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	4b11      	ldr	r3, [pc, #68]	; (800a130 <xTimerCreateTimerTask+0x90>)
 800a0ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a0ee:	4b10      	ldr	r3, [pc, #64]	; (800a130 <xTimerCreateTimerTask+0x90>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10b      	bne.n	800a118 <xTimerCreateTimerTask+0x78>
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	b672      	cpsid	i
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	b662      	cpsie	i
 800a114:	613b      	str	r3, [r7, #16]
 800a116:	e7fe      	b.n	800a116 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800a118:	697b      	ldr	r3, [r7, #20]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20000cbc 	.word	0x20000cbc
 800a128:	0800ba64 	.word	0x0800ba64
 800a12c:	0800a26d 	.word	0x0800a26d
 800a130:	20000cc0 	.word	0x20000cc0

0800a134 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08a      	sub	sp, #40	; 0x28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a142:	2300      	movs	r3, #0
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10b      	bne.n	800a164 <xTimerGenericCommand+0x30>
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	b672      	cpsid	i
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	b662      	cpsie	i
 800a160:	623b      	str	r3, [r7, #32]
 800a162:	e7fe      	b.n	800a162 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a164:	4b19      	ldr	r3, [pc, #100]	; (800a1cc <xTimerGenericCommand+0x98>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d02a      	beq.n	800a1c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b05      	cmp	r3, #5
 800a17c:	dc18      	bgt.n	800a1b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a17e:	f7ff fdad 	bl	8009cdc <xTaskGetSchedulerState>
 800a182:	4603      	mov	r3, r0
 800a184:	2b02      	cmp	r3, #2
 800a186:	d109      	bne.n	800a19c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a188:	4b10      	ldr	r3, [pc, #64]	; (800a1cc <xTimerGenericCommand+0x98>)
 800a18a:	6818      	ldr	r0, [r3, #0]
 800a18c:	f107 0110 	add.w	r1, r7, #16
 800a190:	2300      	movs	r3, #0
 800a192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a194:	f7fe f8c4 	bl	8008320 <xQueueGenericSend>
 800a198:	6278      	str	r0, [r7, #36]	; 0x24
 800a19a:	e012      	b.n	800a1c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a19c:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <xTimerGenericCommand+0x98>)
 800a19e:	6818      	ldr	r0, [r3, #0]
 800a1a0:	f107 0110 	add.w	r1, r7, #16
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f7fe f8ba 	bl	8008320 <xQueueGenericSend>
 800a1ac:	6278      	str	r0, [r7, #36]	; 0x24
 800a1ae:	e008      	b.n	800a1c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1b0:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <xTimerGenericCommand+0x98>)
 800a1b2:	6818      	ldr	r0, [r3, #0]
 800a1b4:	f107 0110 	add.w	r1, r7, #16
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	f7fe f9b2 	bl	8008524 <xQueueGenericSendFromISR>
 800a1c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3728      	adds	r7, #40	; 0x28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20000cbc 	.word	0x20000cbc

0800a1d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1da:	4b23      	ldr	r3, [pc, #140]	; (800a268 <prvProcessExpiredTimer+0x98>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fd feb5 	bl	8007f58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d023      	beq.n	800a244 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	699a      	ldr	r2, [r3, #24]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	18d1      	adds	r1, r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	6978      	ldr	r0, [r7, #20]
 800a20a:	f000 f8d3 	bl	800a3b4 <prvInsertTimerInActiveList>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d020      	beq.n	800a256 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a214:	2300      	movs	r3, #0
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2300      	movs	r3, #0
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	2100      	movs	r1, #0
 800a21e:	6978      	ldr	r0, [r7, #20]
 800a220:	f7ff ff88 	bl	800a134 <xTimerGenericCommand>
 800a224:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d114      	bne.n	800a256 <prvProcessExpiredTimer+0x86>
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	b672      	cpsid	i
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	b662      	cpsie	i
 800a240:	60fb      	str	r3, [r7, #12]
 800a242:	e7fe      	b.n	800a242 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a24a:	f023 0301 	bic.w	r3, r3, #1
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	6978      	ldr	r0, [r7, #20]
 800a25c:	4798      	blx	r3
}
 800a25e:	bf00      	nop
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20000cb4 	.word	0x20000cb4

0800a26c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a274:	f107 0308 	add.w	r3, r7, #8
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 f857 	bl	800a32c <prvGetNextExpireTime>
 800a27e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	4619      	mov	r1, r3
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f000 f803 	bl	800a290 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a28a:	f000 f8d5 	bl	800a438 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a28e:	e7f1      	b.n	800a274 <prvTimerTask+0x8>

0800a290 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a29a:	f7ff f93b 	bl	8009514 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a29e:	f107 0308 	add.w	r3, r7, #8
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f866 	bl	800a374 <prvSampleTimeNow>
 800a2a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d130      	bne.n	800a312 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10a      	bne.n	800a2cc <prvProcessTimerOrBlockTask+0x3c>
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d806      	bhi.n	800a2cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a2be:	f7ff f937 	bl	8009530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ff83 	bl	800a1d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a2ca:	e024      	b.n	800a316 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d008      	beq.n	800a2e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a2d2:	4b13      	ldr	r3, [pc, #76]	; (800a320 <prvProcessTimerOrBlockTask+0x90>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <prvProcessTimerOrBlockTask+0x50>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e000      	b.n	800a2e2 <prvProcessTimerOrBlockTask+0x52>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <prvProcessTimerOrBlockTask+0x94>)
 800a2e6:	6818      	ldr	r0, [r3, #0]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f7fe fe97 	bl	8009024 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a2f6:	f7ff f91b 	bl	8009530 <xTaskResumeAll>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a300:	4b09      	ldr	r3, [pc, #36]	; (800a328 <prvProcessTimerOrBlockTask+0x98>)
 800a302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
}
 800a310:	e001      	b.n	800a316 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a312:	f7ff f90d 	bl	8009530 <xTaskResumeAll>
}
 800a316:	bf00      	nop
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000cb8 	.word	0x20000cb8
 800a324:	20000cbc 	.word	0x20000cbc
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a334:	4b0e      	ldr	r3, [pc, #56]	; (800a370 <prvGetNextExpireTime+0x44>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <prvGetNextExpireTime+0x16>
 800a33e:	2201      	movs	r2, #1
 800a340:	e000      	b.n	800a344 <prvGetNextExpireTime+0x18>
 800a342:	2200      	movs	r2, #0
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d105      	bne.n	800a35c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <prvGetNextExpireTime+0x44>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	e001      	b.n	800a360 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a360:	68fb      	ldr	r3, [r7, #12]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	20000cb4 	.word	0x20000cb4

0800a374 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a37c:	f7ff f976 	bl	800966c <xTaskGetTickCount>
 800a380:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a382:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <prvSampleTimeNow+0x3c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d205      	bcs.n	800a398 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a38c:	f000 f936 	bl	800a5fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	601a      	str	r2, [r3, #0]
 800a396:	e002      	b.n	800a39e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a39e:	4a04      	ldr	r2, [pc, #16]	; (800a3b0 <prvSampleTimeNow+0x3c>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20000cc4 	.word	0x20000cc4

0800a3b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d812      	bhi.n	800a400 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d302      	bcc.n	800a3ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e01b      	b.n	800a426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a3ee:	4b10      	ldr	r3, [pc, #64]	; (800a430 <prvInsertTimerInActiveList+0x7c>)
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	f7fd fd74 	bl	8007ee6 <vListInsert>
 800a3fe:	e012      	b.n	800a426 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	429a      	cmp	r2, r3
 800a406:	d206      	bcs.n	800a416 <prvInsertTimerInActiveList+0x62>
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d302      	bcc.n	800a416 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a410:	2301      	movs	r3, #1
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	e007      	b.n	800a426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a416:	4b07      	ldr	r3, [pc, #28]	; (800a434 <prvInsertTimerInActiveList+0x80>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	3304      	adds	r3, #4
 800a41e:	4619      	mov	r1, r3
 800a420:	4610      	mov	r0, r2
 800a422:	f7fd fd60 	bl	8007ee6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a426:	697b      	ldr	r3, [r7, #20]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	20000cb8 	.word	0x20000cb8
 800a434:	20000cb4 	.word	0x20000cb4

0800a438 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08e      	sub	sp, #56	; 0x38
 800a43c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a43e:	e0cc      	b.n	800a5da <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	da19      	bge.n	800a47a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a446:	1d3b      	adds	r3, r7, #4
 800a448:	3304      	adds	r3, #4
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10b      	bne.n	800a46a <prvProcessReceivedCommands+0x32>
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	b672      	cpsid	i
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	b662      	cpsie	i
 800a466:	61fb      	str	r3, [r7, #28]
 800a468:	e7fe      	b.n	800a468 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a470:	6850      	ldr	r0, [r2, #4]
 800a472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a474:	6892      	ldr	r2, [r2, #8]
 800a476:	4611      	mov	r1, r2
 800a478:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f2c0 80ab 	blt.w	800a5d8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d004      	beq.n	800a498 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	3304      	adds	r3, #4
 800a492:	4618      	mov	r0, r3
 800a494:	f7fd fd60 	bl	8007f58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a498:	463b      	mov	r3, r7
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff ff6a 	bl	800a374 <prvSampleTimeNow>
 800a4a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	f200 8098 	bhi.w	800a5da <prvProcessReceivedCommands+0x1a2>
 800a4aa:	a201      	add	r2, pc, #4	; (adr r2, 800a4b0 <prvProcessReceivedCommands+0x78>)
 800a4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b0:	0800a4d9 	.word	0x0800a4d9
 800a4b4:	0800a4d9 	.word	0x0800a4d9
 800a4b8:	0800a4d9 	.word	0x0800a4d9
 800a4bc:	0800a54f 	.word	0x0800a54f
 800a4c0:	0800a563 	.word	0x0800a563
 800a4c4:	0800a5af 	.word	0x0800a5af
 800a4c8:	0800a4d9 	.word	0x0800a4d9
 800a4cc:	0800a4d9 	.word	0x0800a4d9
 800a4d0:	0800a54f 	.word	0x0800a54f
 800a4d4:	0800a563 	.word	0x0800a563
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4de:	f043 0301 	orr.w	r3, r3, #1
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	18d1      	adds	r1, r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f8:	f7ff ff5c 	bl	800a3b4 <prvInsertTimerInActiveList>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d06b      	beq.n	800a5da <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a508:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b00      	cmp	r3, #0
 800a516:	d060      	beq.n	800a5da <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	441a      	add	r2, r3
 800a520:	2300      	movs	r3, #0
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	2300      	movs	r3, #0
 800a526:	2100      	movs	r1, #0
 800a528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52a:	f7ff fe03 	bl	800a134 <xTimerGenericCommand>
 800a52e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d151      	bne.n	800a5da <prvProcessReceivedCommands+0x1a2>
 800a536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53a:	b672      	cpsid	i
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	b662      	cpsie	i
 800a54a:	61bb      	str	r3, [r7, #24]
 800a54c:	e7fe      	b.n	800a54c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a554:	f023 0301 	bic.w	r3, r3, #1
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a560:	e03b      	b.n	800a5da <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a568:	f043 0301 	orr.w	r3, r3, #1
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10b      	bne.n	800a59a <prvProcessReceivedCommands+0x162>
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	b672      	cpsid	i
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	b662      	cpsie	i
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	e7fe      	b.n	800a598 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	699a      	ldr	r2, [r3, #24]
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	18d1      	adds	r1, r2, r3
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a8:	f7ff ff04 	bl	800a3b4 <prvInsertTimerInActiveList>
					break;
 800a5ac:	e015      	b.n	800a5da <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d103      	bne.n	800a5c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a5bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5be:	f000 fbb5 	bl	800ad2c <vPortFree>
 800a5c2:	e00a      	b.n	800a5da <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5ca:	f023 0301 	bic.w	r3, r3, #1
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5d6:	e000      	b.n	800a5da <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a5d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5da:	4b07      	ldr	r3, [pc, #28]	; (800a5f8 <prvProcessReceivedCommands+0x1c0>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	1d39      	adds	r1, r7, #4
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe f8cc 	bl	8008780 <xQueueReceive>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f47f af28 	bne.w	800a440 <prvProcessReceivedCommands+0x8>
	}
}
 800a5f0:	bf00      	nop
 800a5f2:	3730      	adds	r7, #48	; 0x30
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	20000cbc 	.word	0x20000cbc

0800a5fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a602:	e049      	b.n	800a698 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a604:	4b2e      	ldr	r3, [pc, #184]	; (800a6c0 <prvSwitchTimerLists+0xc4>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a60e:	4b2c      	ldr	r3, [pc, #176]	; (800a6c0 <prvSwitchTimerLists+0xc4>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3304      	adds	r3, #4
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fd fc9b 	bl	8007f58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b00      	cmp	r3, #0
 800a636:	d02f      	beq.n	800a698 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	4413      	add	r3, r2
 800a640:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	429a      	cmp	r2, r3
 800a648:	d90e      	bls.n	800a668 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a656:	4b1a      	ldr	r3, [pc, #104]	; (800a6c0 <prvSwitchTimerLists+0xc4>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3304      	adds	r3, #4
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f7fd fc40 	bl	8007ee6 <vListInsert>
 800a666:	e017      	b.n	800a698 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a668:	2300      	movs	r3, #0
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	2300      	movs	r3, #0
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	2100      	movs	r1, #0
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff fd5e 	bl	800a134 <xTimerGenericCommand>
 800a678:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10b      	bne.n	800a698 <prvSwitchTimerLists+0x9c>
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	b672      	cpsid	i
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	b662      	cpsie	i
 800a694:	603b      	str	r3, [r7, #0]
 800a696:	e7fe      	b.n	800a696 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a698:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <prvSwitchTimerLists+0xc4>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1b0      	bne.n	800a604 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a6a2:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <prvSwitchTimerLists+0xc4>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6a8:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <prvSwitchTimerLists+0xc8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a04      	ldr	r2, [pc, #16]	; (800a6c0 <prvSwitchTimerLists+0xc4>)
 800a6ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a6b0:	4a04      	ldr	r2, [pc, #16]	; (800a6c4 <prvSwitchTimerLists+0xc8>)
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	6013      	str	r3, [r2, #0]
}
 800a6b6:	bf00      	nop
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20000cb4 	.word	0x20000cb4
 800a6c4:	20000cb8 	.word	0x20000cb8

0800a6c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6ce:	f000 f943 	bl	800a958 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6d2:	4b15      	ldr	r3, [pc, #84]	; (800a728 <prvCheckForValidListAndQueue+0x60>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d120      	bne.n	800a71c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a6da:	4814      	ldr	r0, [pc, #80]	; (800a72c <prvCheckForValidListAndQueue+0x64>)
 800a6dc:	f7fd fbb2 	bl	8007e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6e0:	4813      	ldr	r0, [pc, #76]	; (800a730 <prvCheckForValidListAndQueue+0x68>)
 800a6e2:	f7fd fbaf 	bl	8007e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6e6:	4b13      	ldr	r3, [pc, #76]	; (800a734 <prvCheckForValidListAndQueue+0x6c>)
 800a6e8:	4a10      	ldr	r2, [pc, #64]	; (800a72c <prvCheckForValidListAndQueue+0x64>)
 800a6ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6ec:	4b12      	ldr	r3, [pc, #72]	; (800a738 <prvCheckForValidListAndQueue+0x70>)
 800a6ee:	4a10      	ldr	r2, [pc, #64]	; (800a730 <prvCheckForValidListAndQueue+0x68>)
 800a6f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	4b11      	ldr	r3, [pc, #68]	; (800a73c <prvCheckForValidListAndQueue+0x74>)
 800a6f8:	4a11      	ldr	r2, [pc, #68]	; (800a740 <prvCheckForValidListAndQueue+0x78>)
 800a6fa:	2110      	movs	r1, #16
 800a6fc:	200a      	movs	r0, #10
 800a6fe:	f7fd fcbf 	bl	8008080 <xQueueGenericCreateStatic>
 800a702:	4602      	mov	r2, r0
 800a704:	4b08      	ldr	r3, [pc, #32]	; (800a728 <prvCheckForValidListAndQueue+0x60>)
 800a706:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a708:	4b07      	ldr	r3, [pc, #28]	; (800a728 <prvCheckForValidListAndQueue+0x60>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a710:	4b05      	ldr	r3, [pc, #20]	; (800a728 <prvCheckForValidListAndQueue+0x60>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	490b      	ldr	r1, [pc, #44]	; (800a744 <prvCheckForValidListAndQueue+0x7c>)
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fc32 	bl	8008f80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a71c:	f000 f94e 	bl	800a9bc <vPortExitCritical>
}
 800a720:	bf00      	nop
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20000cbc 	.word	0x20000cbc
 800a72c:	20000c8c 	.word	0x20000c8c
 800a730:	20000ca0 	.word	0x20000ca0
 800a734:	20000cb4 	.word	0x20000cb4
 800a738:	20000cb8 	.word	0x20000cb8
 800a73c:	20000d68 	.word	0x20000d68
 800a740:	20000cc8 	.word	0x20000cc8
 800a744:	0800ba6c 	.word	0x0800ba6c

0800a748 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	3b04      	subs	r3, #4
 800a758:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3b04      	subs	r3, #4
 800a766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f023 0201 	bic.w	r2, r3, #1
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3b04      	subs	r3, #4
 800a776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a778:	4a0c      	ldr	r2, [pc, #48]	; (800a7ac <pxPortInitialiseStack+0x64>)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3b14      	subs	r3, #20
 800a782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3b04      	subs	r3, #4
 800a78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f06f 0202 	mvn.w	r2, #2
 800a796:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3b20      	subs	r3, #32
 800a79c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a79e:	68fb      	ldr	r3, [r7, #12]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	0800a7b1 	.word	0x0800a7b1

0800a7b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7ba:	4b13      	ldr	r3, [pc, #76]	; (800a808 <prvTaskExitError+0x58>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7c2:	d00b      	beq.n	800a7dc <prvTaskExitError+0x2c>
 800a7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c8:	b672      	cpsid	i
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	b662      	cpsie	i
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	e7fe      	b.n	800a7da <prvTaskExitError+0x2a>
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	b672      	cpsid	i
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	b662      	cpsie	i
 800a7f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7f2:	bf00      	nop
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d0fc      	beq.n	800a7f4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7fa:	bf00      	nop
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	2000003c 	.word	0x2000003c
 800a80c:	00000000 	.word	0x00000000

0800a810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <pxCurrentTCBConst2>)
 800a812:	6819      	ldr	r1, [r3, #0]
 800a814:	6808      	ldr	r0, [r1, #0]
 800a816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	f380 8809 	msr	PSP, r0
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f04f 0000 	mov.w	r0, #0
 800a826:	f380 8811 	msr	BASEPRI, r0
 800a82a:	4770      	bx	lr
 800a82c:	f3af 8000 	nop.w

0800a830 <pxCurrentTCBConst2>:
 800a830:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop

0800a838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a838:	4808      	ldr	r0, [pc, #32]	; (800a85c <prvPortStartFirstTask+0x24>)
 800a83a:	6800      	ldr	r0, [r0, #0]
 800a83c:	6800      	ldr	r0, [r0, #0]
 800a83e:	f380 8808 	msr	MSP, r0
 800a842:	f04f 0000 	mov.w	r0, #0
 800a846:	f380 8814 	msr	CONTROL, r0
 800a84a:	b662      	cpsie	i
 800a84c:	b661      	cpsie	f
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	df00      	svc	0
 800a858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a85a:	bf00      	nop
 800a85c:	e000ed08 	.word	0xe000ed08

0800a860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a866:	4b36      	ldr	r3, [pc, #216]	; (800a940 <xPortStartScheduler+0xe0>)
 800a868:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	22ff      	movs	r2, #255	; 0xff
 800a876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a880:	78fb      	ldrb	r3, [r7, #3]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	4b2e      	ldr	r3, [pc, #184]	; (800a944 <xPortStartScheduler+0xe4>)
 800a88c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a88e:	4b2e      	ldr	r3, [pc, #184]	; (800a948 <xPortStartScheduler+0xe8>)
 800a890:	2207      	movs	r2, #7
 800a892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a894:	e009      	b.n	800a8aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a896:	4b2c      	ldr	r3, [pc, #176]	; (800a948 <xPortStartScheduler+0xe8>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	4a2a      	ldr	r2, [pc, #168]	; (800a948 <xPortStartScheduler+0xe8>)
 800a89e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8aa:	78fb      	ldrb	r3, [r7, #3]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b2:	2b80      	cmp	r3, #128	; 0x80
 800a8b4:	d0ef      	beq.n	800a896 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8b6:	4b24      	ldr	r3, [pc, #144]	; (800a948 <xPortStartScheduler+0xe8>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f1c3 0307 	rsb	r3, r3, #7
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	d00b      	beq.n	800a8da <xPortStartScheduler+0x7a>
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	b672      	cpsid	i
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	b662      	cpsie	i
 800a8d6:	60bb      	str	r3, [r7, #8]
 800a8d8:	e7fe      	b.n	800a8d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8da:	4b1b      	ldr	r3, [pc, #108]	; (800a948 <xPortStartScheduler+0xe8>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	021b      	lsls	r3, r3, #8
 800a8e0:	4a19      	ldr	r2, [pc, #100]	; (800a948 <xPortStartScheduler+0xe8>)
 800a8e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8e4:	4b18      	ldr	r3, [pc, #96]	; (800a948 <xPortStartScheduler+0xe8>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8ec:	4a16      	ldr	r2, [pc, #88]	; (800a948 <xPortStartScheduler+0xe8>)
 800a8ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8f8:	4b14      	ldr	r3, [pc, #80]	; (800a94c <xPortStartScheduler+0xec>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a13      	ldr	r2, [pc, #76]	; (800a94c <xPortStartScheduler+0xec>)
 800a8fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a902:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a904:	4b11      	ldr	r3, [pc, #68]	; (800a94c <xPortStartScheduler+0xec>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a10      	ldr	r2, [pc, #64]	; (800a94c <xPortStartScheduler+0xec>)
 800a90a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a90e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a910:	f000 f8d4 	bl	800aabc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a914:	4b0e      	ldr	r3, [pc, #56]	; (800a950 <xPortStartScheduler+0xf0>)
 800a916:	2200      	movs	r2, #0
 800a918:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a91a:	f000 f8f3 	bl	800ab04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a91e:	4b0d      	ldr	r3, [pc, #52]	; (800a954 <xPortStartScheduler+0xf4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a0c      	ldr	r2, [pc, #48]	; (800a954 <xPortStartScheduler+0xf4>)
 800a924:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a928:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a92a:	f7ff ff85 	bl	800a838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a92e:	f7fe ff67 	bl	8009800 <vTaskSwitchContext>
	prvTaskExitError();
 800a932:	f7ff ff3d 	bl	800a7b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	e000e400 	.word	0xe000e400
 800a944:	20000db8 	.word	0x20000db8
 800a948:	20000dbc 	.word	0x20000dbc
 800a94c:	e000ed20 	.word	0xe000ed20
 800a950:	2000003c 	.word	0x2000003c
 800a954:	e000ef34 	.word	0xe000ef34

0800a958 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	b672      	cpsid	i
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	b662      	cpsie	i
 800a972:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a974:	4b0f      	ldr	r3, [pc, #60]	; (800a9b4 <vPortEnterCritical+0x5c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	3301      	adds	r3, #1
 800a97a:	4a0e      	ldr	r2, [pc, #56]	; (800a9b4 <vPortEnterCritical+0x5c>)
 800a97c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a97e:	4b0d      	ldr	r3, [pc, #52]	; (800a9b4 <vPortEnterCritical+0x5c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d110      	bne.n	800a9a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a986:	4b0c      	ldr	r3, [pc, #48]	; (800a9b8 <vPortEnterCritical+0x60>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <vPortEnterCritical+0x50>
 800a990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a994:	b672      	cpsid	i
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	b662      	cpsie	i
 800a9a4:	603b      	str	r3, [r7, #0]
 800a9a6:	e7fe      	b.n	800a9a6 <vPortEnterCritical+0x4e>
	}
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	2000003c 	.word	0x2000003c
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9c2:	4b12      	ldr	r3, [pc, #72]	; (800aa0c <vPortExitCritical+0x50>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10b      	bne.n	800a9e2 <vPortExitCritical+0x26>
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	b672      	cpsid	i
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	b662      	cpsie	i
 800a9de:	607b      	str	r3, [r7, #4]
 800a9e0:	e7fe      	b.n	800a9e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800a9e2:	4b0a      	ldr	r3, [pc, #40]	; (800aa0c <vPortExitCritical+0x50>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	4a08      	ldr	r2, [pc, #32]	; (800aa0c <vPortExitCritical+0x50>)
 800a9ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9ec:	4b07      	ldr	r3, [pc, #28]	; (800aa0c <vPortExitCritical+0x50>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d104      	bne.n	800a9fe <vPortExitCritical+0x42>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9fe:	bf00      	nop
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	2000003c 	.word	0x2000003c

0800aa10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa10:	f3ef 8009 	mrs	r0, PSP
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	4b15      	ldr	r3, [pc, #84]	; (800aa70 <pxCurrentTCBConst>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	f01e 0f10 	tst.w	lr, #16
 800aa20:	bf08      	it	eq
 800aa22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2a:	6010      	str	r0, [r2, #0]
 800aa2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa34:	b672      	cpsid	i
 800aa36:	f380 8811 	msr	BASEPRI, r0
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	b662      	cpsie	i
 800aa44:	f7fe fedc 	bl	8009800 <vTaskSwitchContext>
 800aa48:	f04f 0000 	mov.w	r0, #0
 800aa4c:	f380 8811 	msr	BASEPRI, r0
 800aa50:	bc09      	pop	{r0, r3}
 800aa52:	6819      	ldr	r1, [r3, #0]
 800aa54:	6808      	ldr	r0, [r1, #0]
 800aa56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5a:	f01e 0f10 	tst.w	lr, #16
 800aa5e:	bf08      	it	eq
 800aa60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa64:	f380 8809 	msr	PSP, r0
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop

0800aa70 <pxCurrentTCBConst>:
 800aa70:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop

0800aa78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	b672      	cpsid	i
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	b662      	cpsie	i
 800aa92:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa94:	f7fe fdfa 	bl	800968c <xTaskIncrementTick>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa9e:	4b06      	ldr	r3, [pc, #24]	; (800aab8 <SysTick_Handler+0x40>)
 800aaa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa4:	601a      	str	r2, [r3, #0]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	e000ed04 	.word	0xe000ed04

0800aabc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aac0:	4b0b      	ldr	r3, [pc, #44]	; (800aaf0 <vPortSetupTimerInterrupt+0x34>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aac6:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <vPortSetupTimerInterrupt+0x38>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aacc:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <vPortSetupTimerInterrupt+0x3c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a0a      	ldr	r2, [pc, #40]	; (800aafc <vPortSetupTimerInterrupt+0x40>)
 800aad2:	fba2 2303 	umull	r2, r3, r2, r3
 800aad6:	099b      	lsrs	r3, r3, #6
 800aad8:	4a09      	ldr	r2, [pc, #36]	; (800ab00 <vPortSetupTimerInterrupt+0x44>)
 800aada:	3b01      	subs	r3, #1
 800aadc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aade:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <vPortSetupTimerInterrupt+0x34>)
 800aae0:	2207      	movs	r2, #7
 800aae2:	601a      	str	r2, [r3, #0]
}
 800aae4:	bf00      	nop
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	e000e010 	.word	0xe000e010
 800aaf4:	e000e018 	.word	0xe000e018
 800aaf8:	20000030 	.word	0x20000030
 800aafc:	10624dd3 	.word	0x10624dd3
 800ab00:	e000e014 	.word	0xe000e014

0800ab04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab14 <vPortEnableVFP+0x10>
 800ab08:	6801      	ldr	r1, [r0, #0]
 800ab0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab0e:	6001      	str	r1, [r0, #0]
 800ab10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab12:	bf00      	nop
 800ab14:	e000ed88 	.word	0xe000ed88

0800ab18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab1e:	f3ef 8305 	mrs	r3, IPSR
 800ab22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b0f      	cmp	r3, #15
 800ab28:	d915      	bls.n	800ab56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab2a:	4a18      	ldr	r2, [pc, #96]	; (800ab8c <vPortValidateInterruptPriority+0x74>)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4413      	add	r3, r2
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab34:	4b16      	ldr	r3, [pc, #88]	; (800ab90 <vPortValidateInterruptPriority+0x78>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	7afa      	ldrb	r2, [r7, #11]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d20b      	bcs.n	800ab56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	b672      	cpsid	i
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	b662      	cpsie	i
 800ab52:	607b      	str	r3, [r7, #4]
 800ab54:	e7fe      	b.n	800ab54 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab56:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <vPortValidateInterruptPriority+0x7c>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab5e:	4b0e      	ldr	r3, [pc, #56]	; (800ab98 <vPortValidateInterruptPriority+0x80>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d90b      	bls.n	800ab7e <vPortValidateInterruptPriority+0x66>
 800ab66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6a:	b672      	cpsid	i
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	b662      	cpsie	i
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	e7fe      	b.n	800ab7c <vPortValidateInterruptPriority+0x64>
	}
 800ab7e:	bf00      	nop
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	e000e3f0 	.word	0xe000e3f0
 800ab90:	20000db8 	.word	0x20000db8
 800ab94:	e000ed0c 	.word	0xe000ed0c
 800ab98:	20000dbc 	.word	0x20000dbc

0800ab9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	; 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aba4:	2300      	movs	r3, #0
 800aba6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aba8:	f7fe fcb4 	bl	8009514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abac:	4b5a      	ldr	r3, [pc, #360]	; (800ad18 <pvPortMalloc+0x17c>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abb4:	f000 f916 	bl	800ade4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abb8:	4b58      	ldr	r3, [pc, #352]	; (800ad1c <pvPortMalloc+0x180>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4013      	ands	r3, r2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f040 8090 	bne.w	800ace6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01e      	beq.n	800ac0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800abcc:	2208      	movs	r2, #8
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4413      	add	r3, r2
 800abd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f003 0307 	and.w	r3, r3, #7
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d015      	beq.n	800ac0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f023 0307 	bic.w	r3, r3, #7
 800abe4:	3308      	adds	r3, #8
 800abe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00b      	beq.n	800ac0a <pvPortMalloc+0x6e>
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	b672      	cpsid	i
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	b662      	cpsie	i
 800ac06:	617b      	str	r3, [r7, #20]
 800ac08:	e7fe      	b.n	800ac08 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d06a      	beq.n	800ace6 <pvPortMalloc+0x14a>
 800ac10:	4b43      	ldr	r3, [pc, #268]	; (800ad20 <pvPortMalloc+0x184>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d865      	bhi.n	800ace6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac1a:	4b42      	ldr	r3, [pc, #264]	; (800ad24 <pvPortMalloc+0x188>)
 800ac1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac1e:	4b41      	ldr	r3, [pc, #260]	; (800ad24 <pvPortMalloc+0x188>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac24:	e004      	b.n	800ac30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d903      	bls.n	800ac42 <pvPortMalloc+0xa6>
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1f1      	bne.n	800ac26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac42:	4b35      	ldr	r3, [pc, #212]	; (800ad18 <pvPortMalloc+0x17c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d04c      	beq.n	800ace6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2208      	movs	r2, #8
 800ac52:	4413      	add	r3, r2
 800ac54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	1ad2      	subs	r2, r2, r3
 800ac66:	2308      	movs	r3, #8
 800ac68:	005b      	lsls	r3, r3, #1
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d920      	bls.n	800acb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4413      	add	r3, r2
 800ac74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	f003 0307 	and.w	r3, r3, #7
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00b      	beq.n	800ac98 <pvPortMalloc+0xfc>
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	b672      	cpsid	i
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	b662      	cpsie	i
 800ac94:	613b      	str	r3, [r7, #16]
 800ac96:	e7fe      	b.n	800ac96 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	1ad2      	subs	r2, r2, r3
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acaa:	69b8      	ldr	r0, [r7, #24]
 800acac:	f000 f8fc 	bl	800aea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acb0:	4b1b      	ldr	r3, [pc, #108]	; (800ad20 <pvPortMalloc+0x184>)
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	4a19      	ldr	r2, [pc, #100]	; (800ad20 <pvPortMalloc+0x184>)
 800acbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acbe:	4b18      	ldr	r3, [pc, #96]	; (800ad20 <pvPortMalloc+0x184>)
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	4b19      	ldr	r3, [pc, #100]	; (800ad28 <pvPortMalloc+0x18c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d203      	bcs.n	800acd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acca:	4b15      	ldr	r3, [pc, #84]	; (800ad20 <pvPortMalloc+0x184>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a16      	ldr	r2, [pc, #88]	; (800ad28 <pvPortMalloc+0x18c>)
 800acd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	4b11      	ldr	r3, [pc, #68]	; (800ad1c <pvPortMalloc+0x180>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	431a      	orrs	r2, r3
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ace6:	f7fe fc23 	bl	8009530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	f003 0307 	and.w	r3, r3, #7
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00b      	beq.n	800ad0c <pvPortMalloc+0x170>
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	b672      	cpsid	i
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	b662      	cpsie	i
 800ad08:	60fb      	str	r3, [r7, #12]
 800ad0a:	e7fe      	b.n	800ad0a <pvPortMalloc+0x16e>
	return pvReturn;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3728      	adds	r7, #40	; 0x28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	200049c8 	.word	0x200049c8
 800ad1c:	200049d4 	.word	0x200049d4
 800ad20:	200049cc 	.word	0x200049cc
 800ad24:	200049c0 	.word	0x200049c0
 800ad28:	200049d0 	.word	0x200049d0

0800ad2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d04a      	beq.n	800add4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad3e:	2308      	movs	r3, #8
 800ad40:	425b      	negs	r3, r3
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	4413      	add	r3, r2
 800ad46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	4b22      	ldr	r3, [pc, #136]	; (800addc <vPortFree+0xb0>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4013      	ands	r3, r2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10b      	bne.n	800ad72 <vPortFree+0x46>
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	b672      	cpsid	i
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	b662      	cpsie	i
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	e7fe      	b.n	800ad70 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00b      	beq.n	800ad92 <vPortFree+0x66>
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	b672      	cpsid	i
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	b662      	cpsie	i
 800ad8e:	60bb      	str	r3, [r7, #8]
 800ad90:	e7fe      	b.n	800ad90 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	4b11      	ldr	r3, [pc, #68]	; (800addc <vPortFree+0xb0>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d019      	beq.n	800add4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d115      	bne.n	800add4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	4b0b      	ldr	r3, [pc, #44]	; (800addc <vPortFree+0xb0>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	43db      	mvns	r3, r3
 800adb2:	401a      	ands	r2, r3
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adb8:	f7fe fbac 	bl	8009514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <vPortFree+0xb4>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4413      	add	r3, r2
 800adc6:	4a06      	ldr	r2, [pc, #24]	; (800ade0 <vPortFree+0xb4>)
 800adc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adca:	6938      	ldr	r0, [r7, #16]
 800adcc:	f000 f86c 	bl	800aea8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800add0:	f7fe fbae 	bl	8009530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800add4:	bf00      	nop
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	200049d4 	.word	0x200049d4
 800ade0:	200049cc 	.word	0x200049cc

0800ade4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800adee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800adf0:	4b27      	ldr	r3, [pc, #156]	; (800ae90 <prvHeapInit+0xac>)
 800adf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f003 0307 	and.w	r3, r3, #7
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00c      	beq.n	800ae18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3307      	adds	r3, #7
 800ae02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f023 0307 	bic.w	r3, r3, #7
 800ae0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	4a1f      	ldr	r2, [pc, #124]	; (800ae90 <prvHeapInit+0xac>)
 800ae14:	4413      	add	r3, r2
 800ae16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae1c:	4a1d      	ldr	r2, [pc, #116]	; (800ae94 <prvHeapInit+0xb0>)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae22:	4b1c      	ldr	r3, [pc, #112]	; (800ae94 <prvHeapInit+0xb0>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae30:	2208      	movs	r2, #8
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1a9b      	subs	r3, r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f023 0307 	bic.w	r3, r3, #7
 800ae3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4a15      	ldr	r2, [pc, #84]	; (800ae98 <prvHeapInit+0xb4>)
 800ae44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae46:	4b14      	ldr	r3, [pc, #80]	; (800ae98 <prvHeapInit+0xb4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae4e:	4b12      	ldr	r3, [pc, #72]	; (800ae98 <prvHeapInit+0xb4>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	1ad2      	subs	r2, r2, r3
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae64:	4b0c      	ldr	r3, [pc, #48]	; (800ae98 <prvHeapInit+0xb4>)
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	4a0a      	ldr	r2, [pc, #40]	; (800ae9c <prvHeapInit+0xb8>)
 800ae72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	4a09      	ldr	r2, [pc, #36]	; (800aea0 <prvHeapInit+0xbc>)
 800ae7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae7c:	4b09      	ldr	r3, [pc, #36]	; (800aea4 <prvHeapInit+0xc0>)
 800ae7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae82:	601a      	str	r2, [r3, #0]
}
 800ae84:	bf00      	nop
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	20000dc0 	.word	0x20000dc0
 800ae94:	200049c0 	.word	0x200049c0
 800ae98:	200049c8 	.word	0x200049c8
 800ae9c:	200049d0 	.word	0x200049d0
 800aea0:	200049cc 	.word	0x200049cc
 800aea4:	200049d4 	.word	0x200049d4

0800aea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aeb0:	4b28      	ldr	r3, [pc, #160]	; (800af54 <prvInsertBlockIntoFreeList+0xac>)
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	e002      	b.n	800aebc <prvInsertBlockIntoFreeList+0x14>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60fb      	str	r3, [r7, #12]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d8f7      	bhi.n	800aeb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	4413      	add	r3, r2
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d108      	bne.n	800aeea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	685a      	ldr	r2, [r3, #4]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	441a      	add	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	441a      	add	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d118      	bne.n	800af30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	4b15      	ldr	r3, [pc, #84]	; (800af58 <prvInsertBlockIntoFreeList+0xb0>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	d00d      	beq.n	800af26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	441a      	add	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	e008      	b.n	800af38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af26:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <prvInsertBlockIntoFreeList+0xb0>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	e003      	b.n	800af38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d002      	beq.n	800af46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af46:	bf00      	nop
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	200049c0 	.word	0x200049c0
 800af58:	200049c8 	.word	0x200049c8

0800af5c <__errno>:
 800af5c:	4b01      	ldr	r3, [pc, #4]	; (800af64 <__errno+0x8>)
 800af5e:	6818      	ldr	r0, [r3, #0]
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20000040 	.word	0x20000040

0800af68 <__libc_init_array>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	4e0d      	ldr	r6, [pc, #52]	; (800afa0 <__libc_init_array+0x38>)
 800af6c:	4c0d      	ldr	r4, [pc, #52]	; (800afa4 <__libc_init_array+0x3c>)
 800af6e:	1ba4      	subs	r4, r4, r6
 800af70:	10a4      	asrs	r4, r4, #2
 800af72:	2500      	movs	r5, #0
 800af74:	42a5      	cmp	r5, r4
 800af76:	d109      	bne.n	800af8c <__libc_init_array+0x24>
 800af78:	4e0b      	ldr	r6, [pc, #44]	; (800afa8 <__libc_init_array+0x40>)
 800af7a:	4c0c      	ldr	r4, [pc, #48]	; (800afac <__libc_init_array+0x44>)
 800af7c:	f000 fc30 	bl	800b7e0 <_init>
 800af80:	1ba4      	subs	r4, r4, r6
 800af82:	10a4      	asrs	r4, r4, #2
 800af84:	2500      	movs	r5, #0
 800af86:	42a5      	cmp	r5, r4
 800af88:	d105      	bne.n	800af96 <__libc_init_array+0x2e>
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af90:	4798      	blx	r3
 800af92:	3501      	adds	r5, #1
 800af94:	e7ee      	b.n	800af74 <__libc_init_array+0xc>
 800af96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af9a:	4798      	blx	r3
 800af9c:	3501      	adds	r5, #1
 800af9e:	e7f2      	b.n	800af86 <__libc_init_array+0x1e>
 800afa0:	0800bb18 	.word	0x0800bb18
 800afa4:	0800bb18 	.word	0x0800bb18
 800afa8:	0800bb18 	.word	0x0800bb18
 800afac:	0800bb1c 	.word	0x0800bb1c

0800afb0 <malloc>:
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <malloc+0xc>)
 800afb2:	4601      	mov	r1, r0
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	f000 b865 	b.w	800b084 <_malloc_r>
 800afba:	bf00      	nop
 800afbc:	20000040 	.word	0x20000040

0800afc0 <memcpy>:
 800afc0:	b510      	push	{r4, lr}
 800afc2:	1e43      	subs	r3, r0, #1
 800afc4:	440a      	add	r2, r1
 800afc6:	4291      	cmp	r1, r2
 800afc8:	d100      	bne.n	800afcc <memcpy+0xc>
 800afca:	bd10      	pop	{r4, pc}
 800afcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afd4:	e7f7      	b.n	800afc6 <memcpy+0x6>

0800afd6 <memset>:
 800afd6:	4402      	add	r2, r0
 800afd8:	4603      	mov	r3, r0
 800afda:	4293      	cmp	r3, r2
 800afdc:	d100      	bne.n	800afe0 <memset+0xa>
 800afde:	4770      	bx	lr
 800afe0:	f803 1b01 	strb.w	r1, [r3], #1
 800afe4:	e7f9      	b.n	800afda <memset+0x4>
	...

0800afe8 <_free_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4605      	mov	r5, r0
 800afec:	2900      	cmp	r1, #0
 800afee:	d045      	beq.n	800b07c <_free_r+0x94>
 800aff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aff4:	1f0c      	subs	r4, r1, #4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bfb8      	it	lt
 800affa:	18e4      	addlt	r4, r4, r3
 800affc:	f000 f8cc 	bl	800b198 <__malloc_lock>
 800b000:	4a1f      	ldr	r2, [pc, #124]	; (800b080 <_free_r+0x98>)
 800b002:	6813      	ldr	r3, [r2, #0]
 800b004:	4610      	mov	r0, r2
 800b006:	b933      	cbnz	r3, 800b016 <_free_r+0x2e>
 800b008:	6063      	str	r3, [r4, #4]
 800b00a:	6014      	str	r4, [r2, #0]
 800b00c:	4628      	mov	r0, r5
 800b00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b012:	f000 b8c2 	b.w	800b19a <__malloc_unlock>
 800b016:	42a3      	cmp	r3, r4
 800b018:	d90c      	bls.n	800b034 <_free_r+0x4c>
 800b01a:	6821      	ldr	r1, [r4, #0]
 800b01c:	1862      	adds	r2, r4, r1
 800b01e:	4293      	cmp	r3, r2
 800b020:	bf04      	itt	eq
 800b022:	681a      	ldreq	r2, [r3, #0]
 800b024:	685b      	ldreq	r3, [r3, #4]
 800b026:	6063      	str	r3, [r4, #4]
 800b028:	bf04      	itt	eq
 800b02a:	1852      	addeq	r2, r2, r1
 800b02c:	6022      	streq	r2, [r4, #0]
 800b02e:	6004      	str	r4, [r0, #0]
 800b030:	e7ec      	b.n	800b00c <_free_r+0x24>
 800b032:	4613      	mov	r3, r2
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	b10a      	cbz	r2, 800b03c <_free_r+0x54>
 800b038:	42a2      	cmp	r2, r4
 800b03a:	d9fa      	bls.n	800b032 <_free_r+0x4a>
 800b03c:	6819      	ldr	r1, [r3, #0]
 800b03e:	1858      	adds	r0, r3, r1
 800b040:	42a0      	cmp	r0, r4
 800b042:	d10b      	bne.n	800b05c <_free_r+0x74>
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	4401      	add	r1, r0
 800b048:	1858      	adds	r0, r3, r1
 800b04a:	4282      	cmp	r2, r0
 800b04c:	6019      	str	r1, [r3, #0]
 800b04e:	d1dd      	bne.n	800b00c <_free_r+0x24>
 800b050:	6810      	ldr	r0, [r2, #0]
 800b052:	6852      	ldr	r2, [r2, #4]
 800b054:	605a      	str	r2, [r3, #4]
 800b056:	4401      	add	r1, r0
 800b058:	6019      	str	r1, [r3, #0]
 800b05a:	e7d7      	b.n	800b00c <_free_r+0x24>
 800b05c:	d902      	bls.n	800b064 <_free_r+0x7c>
 800b05e:	230c      	movs	r3, #12
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	e7d3      	b.n	800b00c <_free_r+0x24>
 800b064:	6820      	ldr	r0, [r4, #0]
 800b066:	1821      	adds	r1, r4, r0
 800b068:	428a      	cmp	r2, r1
 800b06a:	bf04      	itt	eq
 800b06c:	6811      	ldreq	r1, [r2, #0]
 800b06e:	6852      	ldreq	r2, [r2, #4]
 800b070:	6062      	str	r2, [r4, #4]
 800b072:	bf04      	itt	eq
 800b074:	1809      	addeq	r1, r1, r0
 800b076:	6021      	streq	r1, [r4, #0]
 800b078:	605c      	str	r4, [r3, #4]
 800b07a:	e7c7      	b.n	800b00c <_free_r+0x24>
 800b07c:	bd38      	pop	{r3, r4, r5, pc}
 800b07e:	bf00      	nop
 800b080:	200049d8 	.word	0x200049d8

0800b084 <_malloc_r>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	1ccd      	adds	r5, r1, #3
 800b088:	f025 0503 	bic.w	r5, r5, #3
 800b08c:	3508      	adds	r5, #8
 800b08e:	2d0c      	cmp	r5, #12
 800b090:	bf38      	it	cc
 800b092:	250c      	movcc	r5, #12
 800b094:	2d00      	cmp	r5, #0
 800b096:	4606      	mov	r6, r0
 800b098:	db01      	blt.n	800b09e <_malloc_r+0x1a>
 800b09a:	42a9      	cmp	r1, r5
 800b09c:	d903      	bls.n	800b0a6 <_malloc_r+0x22>
 800b09e:	230c      	movs	r3, #12
 800b0a0:	6033      	str	r3, [r6, #0]
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	bd70      	pop	{r4, r5, r6, pc}
 800b0a6:	f000 f877 	bl	800b198 <__malloc_lock>
 800b0aa:	4a21      	ldr	r2, [pc, #132]	; (800b130 <_malloc_r+0xac>)
 800b0ac:	6814      	ldr	r4, [r2, #0]
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	b991      	cbnz	r1, 800b0d8 <_malloc_r+0x54>
 800b0b2:	4c20      	ldr	r4, [pc, #128]	; (800b134 <_malloc_r+0xb0>)
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	b91b      	cbnz	r3, 800b0c0 <_malloc_r+0x3c>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f000 f83d 	bl	800b138 <_sbrk_r>
 800b0be:	6020      	str	r0, [r4, #0]
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f000 f838 	bl	800b138 <_sbrk_r>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d124      	bne.n	800b116 <_malloc_r+0x92>
 800b0cc:	230c      	movs	r3, #12
 800b0ce:	6033      	str	r3, [r6, #0]
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f000 f862 	bl	800b19a <__malloc_unlock>
 800b0d6:	e7e4      	b.n	800b0a2 <_malloc_r+0x1e>
 800b0d8:	680b      	ldr	r3, [r1, #0]
 800b0da:	1b5b      	subs	r3, r3, r5
 800b0dc:	d418      	bmi.n	800b110 <_malloc_r+0x8c>
 800b0de:	2b0b      	cmp	r3, #11
 800b0e0:	d90f      	bls.n	800b102 <_malloc_r+0x7e>
 800b0e2:	600b      	str	r3, [r1, #0]
 800b0e4:	50cd      	str	r5, [r1, r3]
 800b0e6:	18cc      	adds	r4, r1, r3
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f000 f856 	bl	800b19a <__malloc_unlock>
 800b0ee:	f104 000b 	add.w	r0, r4, #11
 800b0f2:	1d23      	adds	r3, r4, #4
 800b0f4:	f020 0007 	bic.w	r0, r0, #7
 800b0f8:	1ac3      	subs	r3, r0, r3
 800b0fa:	d0d3      	beq.n	800b0a4 <_malloc_r+0x20>
 800b0fc:	425a      	negs	r2, r3
 800b0fe:	50e2      	str	r2, [r4, r3]
 800b100:	e7d0      	b.n	800b0a4 <_malloc_r+0x20>
 800b102:	428c      	cmp	r4, r1
 800b104:	684b      	ldr	r3, [r1, #4]
 800b106:	bf16      	itet	ne
 800b108:	6063      	strne	r3, [r4, #4]
 800b10a:	6013      	streq	r3, [r2, #0]
 800b10c:	460c      	movne	r4, r1
 800b10e:	e7eb      	b.n	800b0e8 <_malloc_r+0x64>
 800b110:	460c      	mov	r4, r1
 800b112:	6849      	ldr	r1, [r1, #4]
 800b114:	e7cc      	b.n	800b0b0 <_malloc_r+0x2c>
 800b116:	1cc4      	adds	r4, r0, #3
 800b118:	f024 0403 	bic.w	r4, r4, #3
 800b11c:	42a0      	cmp	r0, r4
 800b11e:	d005      	beq.n	800b12c <_malloc_r+0xa8>
 800b120:	1a21      	subs	r1, r4, r0
 800b122:	4630      	mov	r0, r6
 800b124:	f000 f808 	bl	800b138 <_sbrk_r>
 800b128:	3001      	adds	r0, #1
 800b12a:	d0cf      	beq.n	800b0cc <_malloc_r+0x48>
 800b12c:	6025      	str	r5, [r4, #0]
 800b12e:	e7db      	b.n	800b0e8 <_malloc_r+0x64>
 800b130:	200049d8 	.word	0x200049d8
 800b134:	200049dc 	.word	0x200049dc

0800b138 <_sbrk_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	4c06      	ldr	r4, [pc, #24]	; (800b154 <_sbrk_r+0x1c>)
 800b13c:	2300      	movs	r3, #0
 800b13e:	4605      	mov	r5, r0
 800b140:	4608      	mov	r0, r1
 800b142:	6023      	str	r3, [r4, #0]
 800b144:	f7f8 f984 	bl	8003450 <_sbrk>
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d102      	bne.n	800b152 <_sbrk_r+0x1a>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	b103      	cbz	r3, 800b152 <_sbrk_r+0x1a>
 800b150:	602b      	str	r3, [r5, #0]
 800b152:	bd38      	pop	{r3, r4, r5, pc}
 800b154:	20004cfc 	.word	0x20004cfc

0800b158 <siprintf>:
 800b158:	b40e      	push	{r1, r2, r3}
 800b15a:	b500      	push	{lr}
 800b15c:	b09c      	sub	sp, #112	; 0x70
 800b15e:	ab1d      	add	r3, sp, #116	; 0x74
 800b160:	9002      	str	r0, [sp, #8]
 800b162:	9006      	str	r0, [sp, #24]
 800b164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b168:	4809      	ldr	r0, [pc, #36]	; (800b190 <siprintf+0x38>)
 800b16a:	9107      	str	r1, [sp, #28]
 800b16c:	9104      	str	r1, [sp, #16]
 800b16e:	4909      	ldr	r1, [pc, #36]	; (800b194 <siprintf+0x3c>)
 800b170:	f853 2b04 	ldr.w	r2, [r3], #4
 800b174:	9105      	str	r1, [sp, #20]
 800b176:	6800      	ldr	r0, [r0, #0]
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	a902      	add	r1, sp, #8
 800b17c:	f000 f868 	bl	800b250 <_svfiprintf_r>
 800b180:	9b02      	ldr	r3, [sp, #8]
 800b182:	2200      	movs	r2, #0
 800b184:	701a      	strb	r2, [r3, #0]
 800b186:	b01c      	add	sp, #112	; 0x70
 800b188:	f85d eb04 	ldr.w	lr, [sp], #4
 800b18c:	b003      	add	sp, #12
 800b18e:	4770      	bx	lr
 800b190:	20000040 	.word	0x20000040
 800b194:	ffff0208 	.word	0xffff0208

0800b198 <__malloc_lock>:
 800b198:	4770      	bx	lr

0800b19a <__malloc_unlock>:
 800b19a:	4770      	bx	lr

0800b19c <__ssputs_r>:
 800b19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a0:	688e      	ldr	r6, [r1, #8]
 800b1a2:	429e      	cmp	r6, r3
 800b1a4:	4682      	mov	sl, r0
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	4690      	mov	r8, r2
 800b1aa:	4699      	mov	r9, r3
 800b1ac:	d837      	bhi.n	800b21e <__ssputs_r+0x82>
 800b1ae:	898a      	ldrh	r2, [r1, #12]
 800b1b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1b4:	d031      	beq.n	800b21a <__ssputs_r+0x7e>
 800b1b6:	6825      	ldr	r5, [r4, #0]
 800b1b8:	6909      	ldr	r1, [r1, #16]
 800b1ba:	1a6f      	subs	r7, r5, r1
 800b1bc:	6965      	ldr	r5, [r4, #20]
 800b1be:	2302      	movs	r3, #2
 800b1c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b1c8:	f109 0301 	add.w	r3, r9, #1
 800b1cc:	443b      	add	r3, r7
 800b1ce:	429d      	cmp	r5, r3
 800b1d0:	bf38      	it	cc
 800b1d2:	461d      	movcc	r5, r3
 800b1d4:	0553      	lsls	r3, r2, #21
 800b1d6:	d530      	bpl.n	800b23a <__ssputs_r+0x9e>
 800b1d8:	4629      	mov	r1, r5
 800b1da:	f7ff ff53 	bl	800b084 <_malloc_r>
 800b1de:	4606      	mov	r6, r0
 800b1e0:	b950      	cbnz	r0, 800b1f8 <__ssputs_r+0x5c>
 800b1e2:	230c      	movs	r3, #12
 800b1e4:	f8ca 3000 	str.w	r3, [sl]
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f8:	463a      	mov	r2, r7
 800b1fa:	6921      	ldr	r1, [r4, #16]
 800b1fc:	f7ff fee0 	bl	800afc0 <memcpy>
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b20a:	81a3      	strh	r3, [r4, #12]
 800b20c:	6126      	str	r6, [r4, #16]
 800b20e:	6165      	str	r5, [r4, #20]
 800b210:	443e      	add	r6, r7
 800b212:	1bed      	subs	r5, r5, r7
 800b214:	6026      	str	r6, [r4, #0]
 800b216:	60a5      	str	r5, [r4, #8]
 800b218:	464e      	mov	r6, r9
 800b21a:	454e      	cmp	r6, r9
 800b21c:	d900      	bls.n	800b220 <__ssputs_r+0x84>
 800b21e:	464e      	mov	r6, r9
 800b220:	4632      	mov	r2, r6
 800b222:	4641      	mov	r1, r8
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	f000 fa93 	bl	800b750 <memmove>
 800b22a:	68a3      	ldr	r3, [r4, #8]
 800b22c:	1b9b      	subs	r3, r3, r6
 800b22e:	60a3      	str	r3, [r4, #8]
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	441e      	add	r6, r3
 800b234:	6026      	str	r6, [r4, #0]
 800b236:	2000      	movs	r0, #0
 800b238:	e7dc      	b.n	800b1f4 <__ssputs_r+0x58>
 800b23a:	462a      	mov	r2, r5
 800b23c:	f000 faa1 	bl	800b782 <_realloc_r>
 800b240:	4606      	mov	r6, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	d1e2      	bne.n	800b20c <__ssputs_r+0x70>
 800b246:	6921      	ldr	r1, [r4, #16]
 800b248:	4650      	mov	r0, sl
 800b24a:	f7ff fecd 	bl	800afe8 <_free_r>
 800b24e:	e7c8      	b.n	800b1e2 <__ssputs_r+0x46>

0800b250 <_svfiprintf_r>:
 800b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b254:	461d      	mov	r5, r3
 800b256:	898b      	ldrh	r3, [r1, #12]
 800b258:	061f      	lsls	r7, r3, #24
 800b25a:	b09d      	sub	sp, #116	; 0x74
 800b25c:	4680      	mov	r8, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	4616      	mov	r6, r2
 800b262:	d50f      	bpl.n	800b284 <_svfiprintf_r+0x34>
 800b264:	690b      	ldr	r3, [r1, #16]
 800b266:	b96b      	cbnz	r3, 800b284 <_svfiprintf_r+0x34>
 800b268:	2140      	movs	r1, #64	; 0x40
 800b26a:	f7ff ff0b 	bl	800b084 <_malloc_r>
 800b26e:	6020      	str	r0, [r4, #0]
 800b270:	6120      	str	r0, [r4, #16]
 800b272:	b928      	cbnz	r0, 800b280 <_svfiprintf_r+0x30>
 800b274:	230c      	movs	r3, #12
 800b276:	f8c8 3000 	str.w	r3, [r8]
 800b27a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b27e:	e0c8      	b.n	800b412 <_svfiprintf_r+0x1c2>
 800b280:	2340      	movs	r3, #64	; 0x40
 800b282:	6163      	str	r3, [r4, #20]
 800b284:	2300      	movs	r3, #0
 800b286:	9309      	str	r3, [sp, #36]	; 0x24
 800b288:	2320      	movs	r3, #32
 800b28a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b28e:	2330      	movs	r3, #48	; 0x30
 800b290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b294:	9503      	str	r5, [sp, #12]
 800b296:	f04f 0b01 	mov.w	fp, #1
 800b29a:	4637      	mov	r7, r6
 800b29c:	463d      	mov	r5, r7
 800b29e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b2a2:	b10b      	cbz	r3, 800b2a8 <_svfiprintf_r+0x58>
 800b2a4:	2b25      	cmp	r3, #37	; 0x25
 800b2a6:	d13e      	bne.n	800b326 <_svfiprintf_r+0xd6>
 800b2a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b2ac:	d00b      	beq.n	800b2c6 <_svfiprintf_r+0x76>
 800b2ae:	4653      	mov	r3, sl
 800b2b0:	4632      	mov	r2, r6
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	4640      	mov	r0, r8
 800b2b6:	f7ff ff71 	bl	800b19c <__ssputs_r>
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	f000 80a4 	beq.w	800b408 <_svfiprintf_r+0x1b8>
 800b2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c2:	4453      	add	r3, sl
 800b2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c6:	783b      	ldrb	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f000 809d 	beq.w	800b408 <_svfiprintf_r+0x1b8>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2d8:	9304      	str	r3, [sp, #16]
 800b2da:	9307      	str	r3, [sp, #28]
 800b2dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2e0:	931a      	str	r3, [sp, #104]	; 0x68
 800b2e2:	462f      	mov	r7, r5
 800b2e4:	2205      	movs	r2, #5
 800b2e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b2ea:	4850      	ldr	r0, [pc, #320]	; (800b42c <_svfiprintf_r+0x1dc>)
 800b2ec:	f7f4 ffb0 	bl	8000250 <memchr>
 800b2f0:	9b04      	ldr	r3, [sp, #16]
 800b2f2:	b9d0      	cbnz	r0, 800b32a <_svfiprintf_r+0xda>
 800b2f4:	06d9      	lsls	r1, r3, #27
 800b2f6:	bf44      	itt	mi
 800b2f8:	2220      	movmi	r2, #32
 800b2fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b2fe:	071a      	lsls	r2, r3, #28
 800b300:	bf44      	itt	mi
 800b302:	222b      	movmi	r2, #43	; 0x2b
 800b304:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b308:	782a      	ldrb	r2, [r5, #0]
 800b30a:	2a2a      	cmp	r2, #42	; 0x2a
 800b30c:	d015      	beq.n	800b33a <_svfiprintf_r+0xea>
 800b30e:	9a07      	ldr	r2, [sp, #28]
 800b310:	462f      	mov	r7, r5
 800b312:	2000      	movs	r0, #0
 800b314:	250a      	movs	r5, #10
 800b316:	4639      	mov	r1, r7
 800b318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b31c:	3b30      	subs	r3, #48	; 0x30
 800b31e:	2b09      	cmp	r3, #9
 800b320:	d94d      	bls.n	800b3be <_svfiprintf_r+0x16e>
 800b322:	b1b8      	cbz	r0, 800b354 <_svfiprintf_r+0x104>
 800b324:	e00f      	b.n	800b346 <_svfiprintf_r+0xf6>
 800b326:	462f      	mov	r7, r5
 800b328:	e7b8      	b.n	800b29c <_svfiprintf_r+0x4c>
 800b32a:	4a40      	ldr	r2, [pc, #256]	; (800b42c <_svfiprintf_r+0x1dc>)
 800b32c:	1a80      	subs	r0, r0, r2
 800b32e:	fa0b f000 	lsl.w	r0, fp, r0
 800b332:	4318      	orrs	r0, r3
 800b334:	9004      	str	r0, [sp, #16]
 800b336:	463d      	mov	r5, r7
 800b338:	e7d3      	b.n	800b2e2 <_svfiprintf_r+0x92>
 800b33a:	9a03      	ldr	r2, [sp, #12]
 800b33c:	1d11      	adds	r1, r2, #4
 800b33e:	6812      	ldr	r2, [r2, #0]
 800b340:	9103      	str	r1, [sp, #12]
 800b342:	2a00      	cmp	r2, #0
 800b344:	db01      	blt.n	800b34a <_svfiprintf_r+0xfa>
 800b346:	9207      	str	r2, [sp, #28]
 800b348:	e004      	b.n	800b354 <_svfiprintf_r+0x104>
 800b34a:	4252      	negs	r2, r2
 800b34c:	f043 0302 	orr.w	r3, r3, #2
 800b350:	9207      	str	r2, [sp, #28]
 800b352:	9304      	str	r3, [sp, #16]
 800b354:	783b      	ldrb	r3, [r7, #0]
 800b356:	2b2e      	cmp	r3, #46	; 0x2e
 800b358:	d10c      	bne.n	800b374 <_svfiprintf_r+0x124>
 800b35a:	787b      	ldrb	r3, [r7, #1]
 800b35c:	2b2a      	cmp	r3, #42	; 0x2a
 800b35e:	d133      	bne.n	800b3c8 <_svfiprintf_r+0x178>
 800b360:	9b03      	ldr	r3, [sp, #12]
 800b362:	1d1a      	adds	r2, r3, #4
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	9203      	str	r2, [sp, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	bfb8      	it	lt
 800b36c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b370:	3702      	adds	r7, #2
 800b372:	9305      	str	r3, [sp, #20]
 800b374:	4d2e      	ldr	r5, [pc, #184]	; (800b430 <_svfiprintf_r+0x1e0>)
 800b376:	7839      	ldrb	r1, [r7, #0]
 800b378:	2203      	movs	r2, #3
 800b37a:	4628      	mov	r0, r5
 800b37c:	f7f4 ff68 	bl	8000250 <memchr>
 800b380:	b138      	cbz	r0, 800b392 <_svfiprintf_r+0x142>
 800b382:	2340      	movs	r3, #64	; 0x40
 800b384:	1b40      	subs	r0, r0, r5
 800b386:	fa03 f000 	lsl.w	r0, r3, r0
 800b38a:	9b04      	ldr	r3, [sp, #16]
 800b38c:	4303      	orrs	r3, r0
 800b38e:	3701      	adds	r7, #1
 800b390:	9304      	str	r3, [sp, #16]
 800b392:	7839      	ldrb	r1, [r7, #0]
 800b394:	4827      	ldr	r0, [pc, #156]	; (800b434 <_svfiprintf_r+0x1e4>)
 800b396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b39a:	2206      	movs	r2, #6
 800b39c:	1c7e      	adds	r6, r7, #1
 800b39e:	f7f4 ff57 	bl	8000250 <memchr>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d038      	beq.n	800b418 <_svfiprintf_r+0x1c8>
 800b3a6:	4b24      	ldr	r3, [pc, #144]	; (800b438 <_svfiprintf_r+0x1e8>)
 800b3a8:	bb13      	cbnz	r3, 800b3f0 <_svfiprintf_r+0x1a0>
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	3307      	adds	r3, #7
 800b3ae:	f023 0307 	bic.w	r3, r3, #7
 800b3b2:	3308      	adds	r3, #8
 800b3b4:	9303      	str	r3, [sp, #12]
 800b3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b8:	444b      	add	r3, r9
 800b3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b3bc:	e76d      	b.n	800b29a <_svfiprintf_r+0x4a>
 800b3be:	fb05 3202 	mla	r2, r5, r2, r3
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	460f      	mov	r7, r1
 800b3c6:	e7a6      	b.n	800b316 <_svfiprintf_r+0xc6>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	3701      	adds	r7, #1
 800b3cc:	9305      	str	r3, [sp, #20]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	250a      	movs	r5, #10
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3d8:	3a30      	subs	r2, #48	; 0x30
 800b3da:	2a09      	cmp	r2, #9
 800b3dc:	d903      	bls.n	800b3e6 <_svfiprintf_r+0x196>
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0c8      	beq.n	800b374 <_svfiprintf_r+0x124>
 800b3e2:	9105      	str	r1, [sp, #20]
 800b3e4:	e7c6      	b.n	800b374 <_svfiprintf_r+0x124>
 800b3e6:	fb05 2101 	mla	r1, r5, r1, r2
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	e7f0      	b.n	800b3d2 <_svfiprintf_r+0x182>
 800b3f0:	ab03      	add	r3, sp, #12
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	4b11      	ldr	r3, [pc, #68]	; (800b43c <_svfiprintf_r+0x1ec>)
 800b3f8:	a904      	add	r1, sp, #16
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	f3af 8000 	nop.w
 800b400:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b404:	4681      	mov	r9, r0
 800b406:	d1d6      	bne.n	800b3b6 <_svfiprintf_r+0x166>
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	065b      	lsls	r3, r3, #25
 800b40c:	f53f af35 	bmi.w	800b27a <_svfiprintf_r+0x2a>
 800b410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b412:	b01d      	add	sp, #116	; 0x74
 800b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b418:	ab03      	add	r3, sp, #12
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	4622      	mov	r2, r4
 800b41e:	4b07      	ldr	r3, [pc, #28]	; (800b43c <_svfiprintf_r+0x1ec>)
 800b420:	a904      	add	r1, sp, #16
 800b422:	4640      	mov	r0, r8
 800b424:	f000 f882 	bl	800b52c <_printf_i>
 800b428:	e7ea      	b.n	800b400 <_svfiprintf_r+0x1b0>
 800b42a:	bf00      	nop
 800b42c:	0800badc 	.word	0x0800badc
 800b430:	0800bae2 	.word	0x0800bae2
 800b434:	0800bae6 	.word	0x0800bae6
 800b438:	00000000 	.word	0x00000000
 800b43c:	0800b19d 	.word	0x0800b19d

0800b440 <_printf_common>:
 800b440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b444:	4691      	mov	r9, r2
 800b446:	461f      	mov	r7, r3
 800b448:	688a      	ldr	r2, [r1, #8]
 800b44a:	690b      	ldr	r3, [r1, #16]
 800b44c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b450:	4293      	cmp	r3, r2
 800b452:	bfb8      	it	lt
 800b454:	4613      	movlt	r3, r2
 800b456:	f8c9 3000 	str.w	r3, [r9]
 800b45a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b45e:	4606      	mov	r6, r0
 800b460:	460c      	mov	r4, r1
 800b462:	b112      	cbz	r2, 800b46a <_printf_common+0x2a>
 800b464:	3301      	adds	r3, #1
 800b466:	f8c9 3000 	str.w	r3, [r9]
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	0699      	lsls	r1, r3, #26
 800b46e:	bf42      	ittt	mi
 800b470:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b474:	3302      	addmi	r3, #2
 800b476:	f8c9 3000 	strmi.w	r3, [r9]
 800b47a:	6825      	ldr	r5, [r4, #0]
 800b47c:	f015 0506 	ands.w	r5, r5, #6
 800b480:	d107      	bne.n	800b492 <_printf_common+0x52>
 800b482:	f104 0a19 	add.w	sl, r4, #25
 800b486:	68e3      	ldr	r3, [r4, #12]
 800b488:	f8d9 2000 	ldr.w	r2, [r9]
 800b48c:	1a9b      	subs	r3, r3, r2
 800b48e:	42ab      	cmp	r3, r5
 800b490:	dc28      	bgt.n	800b4e4 <_printf_common+0xa4>
 800b492:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b496:	6822      	ldr	r2, [r4, #0]
 800b498:	3300      	adds	r3, #0
 800b49a:	bf18      	it	ne
 800b49c:	2301      	movne	r3, #1
 800b49e:	0692      	lsls	r2, r2, #26
 800b4a0:	d42d      	bmi.n	800b4fe <_printf_common+0xbe>
 800b4a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	47c0      	blx	r8
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d020      	beq.n	800b4f2 <_printf_common+0xb2>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	68e5      	ldr	r5, [r4, #12]
 800b4b4:	f8d9 2000 	ldr.w	r2, [r9]
 800b4b8:	f003 0306 	and.w	r3, r3, #6
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	bf08      	it	eq
 800b4c0:	1aad      	subeq	r5, r5, r2
 800b4c2:	68a3      	ldr	r3, [r4, #8]
 800b4c4:	6922      	ldr	r2, [r4, #16]
 800b4c6:	bf0c      	ite	eq
 800b4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4cc:	2500      	movne	r5, #0
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	bfc4      	itt	gt
 800b4d2:	1a9b      	subgt	r3, r3, r2
 800b4d4:	18ed      	addgt	r5, r5, r3
 800b4d6:	f04f 0900 	mov.w	r9, #0
 800b4da:	341a      	adds	r4, #26
 800b4dc:	454d      	cmp	r5, r9
 800b4de:	d11a      	bne.n	800b516 <_printf_common+0xd6>
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	e008      	b.n	800b4f6 <_printf_common+0xb6>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4652      	mov	r2, sl
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	47c0      	blx	r8
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d103      	bne.n	800b4fa <_printf_common+0xba>
 800b4f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fa:	3501      	adds	r5, #1
 800b4fc:	e7c3      	b.n	800b486 <_printf_common+0x46>
 800b4fe:	18e1      	adds	r1, r4, r3
 800b500:	1c5a      	adds	r2, r3, #1
 800b502:	2030      	movs	r0, #48	; 0x30
 800b504:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b508:	4422      	add	r2, r4
 800b50a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b50e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b512:	3302      	adds	r3, #2
 800b514:	e7c5      	b.n	800b4a2 <_printf_common+0x62>
 800b516:	2301      	movs	r3, #1
 800b518:	4622      	mov	r2, r4
 800b51a:	4639      	mov	r1, r7
 800b51c:	4630      	mov	r0, r6
 800b51e:	47c0      	blx	r8
 800b520:	3001      	adds	r0, #1
 800b522:	d0e6      	beq.n	800b4f2 <_printf_common+0xb2>
 800b524:	f109 0901 	add.w	r9, r9, #1
 800b528:	e7d8      	b.n	800b4dc <_printf_common+0x9c>
	...

0800b52c <_printf_i>:
 800b52c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b530:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b534:	460c      	mov	r4, r1
 800b536:	7e09      	ldrb	r1, [r1, #24]
 800b538:	b085      	sub	sp, #20
 800b53a:	296e      	cmp	r1, #110	; 0x6e
 800b53c:	4617      	mov	r7, r2
 800b53e:	4606      	mov	r6, r0
 800b540:	4698      	mov	r8, r3
 800b542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b544:	f000 80b3 	beq.w	800b6ae <_printf_i+0x182>
 800b548:	d822      	bhi.n	800b590 <_printf_i+0x64>
 800b54a:	2963      	cmp	r1, #99	; 0x63
 800b54c:	d036      	beq.n	800b5bc <_printf_i+0x90>
 800b54e:	d80a      	bhi.n	800b566 <_printf_i+0x3a>
 800b550:	2900      	cmp	r1, #0
 800b552:	f000 80b9 	beq.w	800b6c8 <_printf_i+0x19c>
 800b556:	2958      	cmp	r1, #88	; 0x58
 800b558:	f000 8083 	beq.w	800b662 <_printf_i+0x136>
 800b55c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b560:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b564:	e032      	b.n	800b5cc <_printf_i+0xa0>
 800b566:	2964      	cmp	r1, #100	; 0x64
 800b568:	d001      	beq.n	800b56e <_printf_i+0x42>
 800b56a:	2969      	cmp	r1, #105	; 0x69
 800b56c:	d1f6      	bne.n	800b55c <_printf_i+0x30>
 800b56e:	6820      	ldr	r0, [r4, #0]
 800b570:	6813      	ldr	r3, [r2, #0]
 800b572:	0605      	lsls	r5, r0, #24
 800b574:	f103 0104 	add.w	r1, r3, #4
 800b578:	d52a      	bpl.n	800b5d0 <_printf_i+0xa4>
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	6011      	str	r1, [r2, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	da03      	bge.n	800b58a <_printf_i+0x5e>
 800b582:	222d      	movs	r2, #45	; 0x2d
 800b584:	425b      	negs	r3, r3
 800b586:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b58a:	486f      	ldr	r0, [pc, #444]	; (800b748 <_printf_i+0x21c>)
 800b58c:	220a      	movs	r2, #10
 800b58e:	e039      	b.n	800b604 <_printf_i+0xd8>
 800b590:	2973      	cmp	r1, #115	; 0x73
 800b592:	f000 809d 	beq.w	800b6d0 <_printf_i+0x1a4>
 800b596:	d808      	bhi.n	800b5aa <_printf_i+0x7e>
 800b598:	296f      	cmp	r1, #111	; 0x6f
 800b59a:	d020      	beq.n	800b5de <_printf_i+0xb2>
 800b59c:	2970      	cmp	r1, #112	; 0x70
 800b59e:	d1dd      	bne.n	800b55c <_printf_i+0x30>
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	f043 0320 	orr.w	r3, r3, #32
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	e003      	b.n	800b5b2 <_printf_i+0x86>
 800b5aa:	2975      	cmp	r1, #117	; 0x75
 800b5ac:	d017      	beq.n	800b5de <_printf_i+0xb2>
 800b5ae:	2978      	cmp	r1, #120	; 0x78
 800b5b0:	d1d4      	bne.n	800b55c <_printf_i+0x30>
 800b5b2:	2378      	movs	r3, #120	; 0x78
 800b5b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5b8:	4864      	ldr	r0, [pc, #400]	; (800b74c <_printf_i+0x220>)
 800b5ba:	e055      	b.n	800b668 <_printf_i+0x13c>
 800b5bc:	6813      	ldr	r3, [r2, #0]
 800b5be:	1d19      	adds	r1, r3, #4
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6011      	str	r1, [r2, #0]
 800b5c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e08c      	b.n	800b6ea <_printf_i+0x1be>
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	6011      	str	r1, [r2, #0]
 800b5d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5d8:	bf18      	it	ne
 800b5da:	b21b      	sxthne	r3, r3
 800b5dc:	e7cf      	b.n	800b57e <_printf_i+0x52>
 800b5de:	6813      	ldr	r3, [r2, #0]
 800b5e0:	6825      	ldr	r5, [r4, #0]
 800b5e2:	1d18      	adds	r0, r3, #4
 800b5e4:	6010      	str	r0, [r2, #0]
 800b5e6:	0628      	lsls	r0, r5, #24
 800b5e8:	d501      	bpl.n	800b5ee <_printf_i+0xc2>
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	e002      	b.n	800b5f4 <_printf_i+0xc8>
 800b5ee:	0668      	lsls	r0, r5, #25
 800b5f0:	d5fb      	bpl.n	800b5ea <_printf_i+0xbe>
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	4854      	ldr	r0, [pc, #336]	; (800b748 <_printf_i+0x21c>)
 800b5f6:	296f      	cmp	r1, #111	; 0x6f
 800b5f8:	bf14      	ite	ne
 800b5fa:	220a      	movne	r2, #10
 800b5fc:	2208      	moveq	r2, #8
 800b5fe:	2100      	movs	r1, #0
 800b600:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b604:	6865      	ldr	r5, [r4, #4]
 800b606:	60a5      	str	r5, [r4, #8]
 800b608:	2d00      	cmp	r5, #0
 800b60a:	f2c0 8095 	blt.w	800b738 <_printf_i+0x20c>
 800b60e:	6821      	ldr	r1, [r4, #0]
 800b610:	f021 0104 	bic.w	r1, r1, #4
 800b614:	6021      	str	r1, [r4, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d13d      	bne.n	800b696 <_printf_i+0x16a>
 800b61a:	2d00      	cmp	r5, #0
 800b61c:	f040 808e 	bne.w	800b73c <_printf_i+0x210>
 800b620:	4665      	mov	r5, ip
 800b622:	2a08      	cmp	r2, #8
 800b624:	d10b      	bne.n	800b63e <_printf_i+0x112>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	07db      	lsls	r3, r3, #31
 800b62a:	d508      	bpl.n	800b63e <_printf_i+0x112>
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	6862      	ldr	r2, [r4, #4]
 800b630:	429a      	cmp	r2, r3
 800b632:	bfde      	ittt	le
 800b634:	2330      	movle	r3, #48	; 0x30
 800b636:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b63a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b63e:	ebac 0305 	sub.w	r3, ip, r5
 800b642:	6123      	str	r3, [r4, #16]
 800b644:	f8cd 8000 	str.w	r8, [sp]
 800b648:	463b      	mov	r3, r7
 800b64a:	aa03      	add	r2, sp, #12
 800b64c:	4621      	mov	r1, r4
 800b64e:	4630      	mov	r0, r6
 800b650:	f7ff fef6 	bl	800b440 <_printf_common>
 800b654:	3001      	adds	r0, #1
 800b656:	d14d      	bne.n	800b6f4 <_printf_i+0x1c8>
 800b658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b65c:	b005      	add	sp, #20
 800b65e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b662:	4839      	ldr	r0, [pc, #228]	; (800b748 <_printf_i+0x21c>)
 800b664:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b668:	6813      	ldr	r3, [r2, #0]
 800b66a:	6821      	ldr	r1, [r4, #0]
 800b66c:	1d1d      	adds	r5, r3, #4
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6015      	str	r5, [r2, #0]
 800b672:	060a      	lsls	r2, r1, #24
 800b674:	d50b      	bpl.n	800b68e <_printf_i+0x162>
 800b676:	07ca      	lsls	r2, r1, #31
 800b678:	bf44      	itt	mi
 800b67a:	f041 0120 	orrmi.w	r1, r1, #32
 800b67e:	6021      	strmi	r1, [r4, #0]
 800b680:	b91b      	cbnz	r3, 800b68a <_printf_i+0x15e>
 800b682:	6822      	ldr	r2, [r4, #0]
 800b684:	f022 0220 	bic.w	r2, r2, #32
 800b688:	6022      	str	r2, [r4, #0]
 800b68a:	2210      	movs	r2, #16
 800b68c:	e7b7      	b.n	800b5fe <_printf_i+0xd2>
 800b68e:	064d      	lsls	r5, r1, #25
 800b690:	bf48      	it	mi
 800b692:	b29b      	uxthmi	r3, r3
 800b694:	e7ef      	b.n	800b676 <_printf_i+0x14a>
 800b696:	4665      	mov	r5, ip
 800b698:	fbb3 f1f2 	udiv	r1, r3, r2
 800b69c:	fb02 3311 	mls	r3, r2, r1, r3
 800b6a0:	5cc3      	ldrb	r3, [r0, r3]
 800b6a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	2900      	cmp	r1, #0
 800b6aa:	d1f5      	bne.n	800b698 <_printf_i+0x16c>
 800b6ac:	e7b9      	b.n	800b622 <_printf_i+0xf6>
 800b6ae:	6813      	ldr	r3, [r2, #0]
 800b6b0:	6825      	ldr	r5, [r4, #0]
 800b6b2:	6961      	ldr	r1, [r4, #20]
 800b6b4:	1d18      	adds	r0, r3, #4
 800b6b6:	6010      	str	r0, [r2, #0]
 800b6b8:	0628      	lsls	r0, r5, #24
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	d501      	bpl.n	800b6c2 <_printf_i+0x196>
 800b6be:	6019      	str	r1, [r3, #0]
 800b6c0:	e002      	b.n	800b6c8 <_printf_i+0x19c>
 800b6c2:	066a      	lsls	r2, r5, #25
 800b6c4:	d5fb      	bpl.n	800b6be <_printf_i+0x192>
 800b6c6:	8019      	strh	r1, [r3, #0]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	6123      	str	r3, [r4, #16]
 800b6cc:	4665      	mov	r5, ip
 800b6ce:	e7b9      	b.n	800b644 <_printf_i+0x118>
 800b6d0:	6813      	ldr	r3, [r2, #0]
 800b6d2:	1d19      	adds	r1, r3, #4
 800b6d4:	6011      	str	r1, [r2, #0]
 800b6d6:	681d      	ldr	r5, [r3, #0]
 800b6d8:	6862      	ldr	r2, [r4, #4]
 800b6da:	2100      	movs	r1, #0
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f7f4 fdb7 	bl	8000250 <memchr>
 800b6e2:	b108      	cbz	r0, 800b6e8 <_printf_i+0x1bc>
 800b6e4:	1b40      	subs	r0, r0, r5
 800b6e6:	6060      	str	r0, [r4, #4]
 800b6e8:	6863      	ldr	r3, [r4, #4]
 800b6ea:	6123      	str	r3, [r4, #16]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6f2:	e7a7      	b.n	800b644 <_printf_i+0x118>
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	462a      	mov	r2, r5
 800b6f8:	4639      	mov	r1, r7
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	47c0      	blx	r8
 800b6fe:	3001      	adds	r0, #1
 800b700:	d0aa      	beq.n	800b658 <_printf_i+0x12c>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	079b      	lsls	r3, r3, #30
 800b706:	d413      	bmi.n	800b730 <_printf_i+0x204>
 800b708:	68e0      	ldr	r0, [r4, #12]
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	4298      	cmp	r0, r3
 800b70e:	bfb8      	it	lt
 800b710:	4618      	movlt	r0, r3
 800b712:	e7a3      	b.n	800b65c <_printf_i+0x130>
 800b714:	2301      	movs	r3, #1
 800b716:	464a      	mov	r2, r9
 800b718:	4639      	mov	r1, r7
 800b71a:	4630      	mov	r0, r6
 800b71c:	47c0      	blx	r8
 800b71e:	3001      	adds	r0, #1
 800b720:	d09a      	beq.n	800b658 <_printf_i+0x12c>
 800b722:	3501      	adds	r5, #1
 800b724:	68e3      	ldr	r3, [r4, #12]
 800b726:	9a03      	ldr	r2, [sp, #12]
 800b728:	1a9b      	subs	r3, r3, r2
 800b72a:	42ab      	cmp	r3, r5
 800b72c:	dcf2      	bgt.n	800b714 <_printf_i+0x1e8>
 800b72e:	e7eb      	b.n	800b708 <_printf_i+0x1dc>
 800b730:	2500      	movs	r5, #0
 800b732:	f104 0919 	add.w	r9, r4, #25
 800b736:	e7f5      	b.n	800b724 <_printf_i+0x1f8>
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1ac      	bne.n	800b696 <_printf_i+0x16a>
 800b73c:	7803      	ldrb	r3, [r0, #0]
 800b73e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b742:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b746:	e76c      	b.n	800b622 <_printf_i+0xf6>
 800b748:	0800baed 	.word	0x0800baed
 800b74c:	0800bafe 	.word	0x0800bafe

0800b750 <memmove>:
 800b750:	4288      	cmp	r0, r1
 800b752:	b510      	push	{r4, lr}
 800b754:	eb01 0302 	add.w	r3, r1, r2
 800b758:	d807      	bhi.n	800b76a <memmove+0x1a>
 800b75a:	1e42      	subs	r2, r0, #1
 800b75c:	4299      	cmp	r1, r3
 800b75e:	d00a      	beq.n	800b776 <memmove+0x26>
 800b760:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b764:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b768:	e7f8      	b.n	800b75c <memmove+0xc>
 800b76a:	4283      	cmp	r3, r0
 800b76c:	d9f5      	bls.n	800b75a <memmove+0xa>
 800b76e:	1881      	adds	r1, r0, r2
 800b770:	1ad2      	subs	r2, r2, r3
 800b772:	42d3      	cmn	r3, r2
 800b774:	d100      	bne.n	800b778 <memmove+0x28>
 800b776:	bd10      	pop	{r4, pc}
 800b778:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b77c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b780:	e7f7      	b.n	800b772 <memmove+0x22>

0800b782 <_realloc_r>:
 800b782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b784:	4607      	mov	r7, r0
 800b786:	4614      	mov	r4, r2
 800b788:	460e      	mov	r6, r1
 800b78a:	b921      	cbnz	r1, 800b796 <_realloc_r+0x14>
 800b78c:	4611      	mov	r1, r2
 800b78e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b792:	f7ff bc77 	b.w	800b084 <_malloc_r>
 800b796:	b922      	cbnz	r2, 800b7a2 <_realloc_r+0x20>
 800b798:	f7ff fc26 	bl	800afe8 <_free_r>
 800b79c:	4625      	mov	r5, r4
 800b79e:	4628      	mov	r0, r5
 800b7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a2:	f000 f814 	bl	800b7ce <_malloc_usable_size_r>
 800b7a6:	42a0      	cmp	r0, r4
 800b7a8:	d20f      	bcs.n	800b7ca <_realloc_r+0x48>
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	f7ff fc69 	bl	800b084 <_malloc_r>
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d0f2      	beq.n	800b79e <_realloc_r+0x1c>
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	f7ff fc00 	bl	800afc0 <memcpy>
 800b7c0:	4631      	mov	r1, r6
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	f7ff fc10 	bl	800afe8 <_free_r>
 800b7c8:	e7e9      	b.n	800b79e <_realloc_r+0x1c>
 800b7ca:	4635      	mov	r5, r6
 800b7cc:	e7e7      	b.n	800b79e <_realloc_r+0x1c>

0800b7ce <_malloc_usable_size_r>:
 800b7ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7d2:	1f18      	subs	r0, r3, #4
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	bfbc      	itt	lt
 800b7d8:	580b      	ldrlt	r3, [r1, r0]
 800b7da:	18c0      	addlt	r0, r0, r3
 800b7dc:	4770      	bx	lr
	...

0800b7e0 <_init>:
 800b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e2:	bf00      	nop
 800b7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e6:	bc08      	pop	{r3}
 800b7e8:	469e      	mov	lr, r3
 800b7ea:	4770      	bx	lr

0800b7ec <_fini>:
 800b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ee:	bf00      	nop
 800b7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f2:	bc08      	pop	{r3}
 800b7f4:	469e      	mov	lr, r3
 800b7f6:	4770      	bx	lr
