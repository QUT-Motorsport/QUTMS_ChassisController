
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080096c8  080096c8  000196c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800993c  0800993c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800993c  0800993c  0001993c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009944  08009944  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800994c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b0c  200000b4  08009a00  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bc0  08009a00  00024bc0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252c6  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049f0  00000000  00000000  000453a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e0  00000000  00000000  00049d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a8  00000000  00000000  0004b678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c679  00000000  00000000  0004cd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000185a3  00000000  00000000  00079399  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010790a  00000000  00000000  0009193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00199246  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000695c  00000000  00000000  001992c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b4 	.word	0x200000b4
 800021c:	00000000 	.word	0x00000000
 8000220:	080096b0 	.word	0x080096b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b8 	.word	0x200000b8
 800023c:	080096b0 	.word	0x080096b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Parse_AMS_HeartbeatResponse>:

	return p;
}

void Parse_AMS_HeartbeatResponse(AMS_HeartbeatResponse_t packet, bool* HVAn, bool* HVBn, bool* precharge, bool* HVAp, bool* HVBp, uint16_t* averageVoltage, uint16_t* runtime)
{
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	1d3c      	adds	r4, r7, #4
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005ec:	603b      	str	r3, [r7, #0]
	*HVAn = (bool)(packet.data[0] & 0x1);
 80005ee:	7a3b      	ldrb	r3, [r7, #8]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	701a      	strb	r2, [r3, #0]
	*HVBn = (bool)(packet.data[0] & 0x2);
 8000602:	7a3b      	ldrb	r3, [r7, #8]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2da      	uxtb	r2, r3
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	701a      	strb	r2, [r3, #0]
	*precharge = (bool)(packet.data[0] & 0x4);
 8000616:	7a3b      	ldrb	r3, [r7, #8]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	701a      	strb	r2, [r3, #0]

	*HVAp = (bool)(packet.data[0] & 0x10);
 800062a:	7a3b      	ldrb	r3, [r7, #8]
 800062c:	f003 0310 	and.w	r3, r3, #16
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf14      	ite	ne
 8000634:	2301      	movne	r3, #1
 8000636:	2300      	moveq	r3, #0
 8000638:	b2da      	uxtb	r2, r3
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	701a      	strb	r2, [r3, #0]
	*HVBp = (bool)(packet.data[0] & 0x20);
 800063e:	7a3b      	ldrb	r3, [r7, #8]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2da      	uxtb	r2, r3
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	701a      	strb	r2, [r3, #0]

	*averageVoltage = (uint16_t)((packet.data[1] & 0x3F) << 6 | (packet.data[0]));
 8000652:	7a7b      	ldrb	r3, [r7, #9]
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	b21b      	sxth	r3, r3
 8000658:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800065c:	b21a      	sxth	r2, r3
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	b21b      	sxth	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29a      	uxth	r2, r3
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	801a      	strh	r2, [r3, #0]
	*runtime = (uint16_t)(packet.data[3] << 8 | packet.data[2]);
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21a      	sxth	r2, r3
 8000672:	7abb      	ldrb	r3, [r7, #10]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21b      	sxth	r3, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bc90      	pop	{r4, r7}
 8000688:	4770      	bx	lr

0800068a <Compose_CC_ReadyToDrive>:
 */

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2200      	movs	r2, #0
 800069c:	2116      	movs	r1, #22
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f9a4 	bl	80009ec <Compose_CANId>
 80006a4:	4603      	mov	r3, r0
 80006a6:	607b      	str	r3, [r7, #4]
	return p;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x17, 0x0, 0x0, 0x0, 0x0);
 80006b8:	2300      	movs	r3, #0
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2300      	movs	r3, #0
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2200      	movs	r2, #0
 80006c4:	2117      	movs	r1, #23
 80006c6:	2002      	movs	r0, #2
 80006c8:	f000 f990 	bl	80009ec <Compose_CANId>
 80006cc:	4603      	mov	r3, r0
 80006ce:	607b      	str	r3, [r7, #4]
	return p;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <fsm_new>:
 */

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 80006e2:	2010      	movs	r0, #16
 80006e4:	f008 fbcc 	bl	8008e80 <malloc>
 80006e8:	4603      	mov	r3, r0
 80006ea:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 80006ec:	2210      	movs	r2, #16
 80006ee:	2100      	movs	r1, #0
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f008 fbd8 	bl	8008ea6 <memset>
	fsm->currentState = beginState;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2103      	movs	r1, #3
 8000700:	2003      	movs	r0, #3
 8000702:	f004 ffdb 	bl	80056bc <osSemaphoreNew>
 8000706:	4602      	mov	r2, r0
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 800070c:	2200      	movs	r2, #0
 800070e:	2103      	movs	r1, #3
 8000710:	2003      	movs	r0, #3
 8000712:	f004 ffd3 	bl	80056bc <osSemaphoreNew>
 8000716:	4602      	mov	r2, r0
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2120      	movs	r1, #32
 8000722:	4618      	mov	r0, r3
 8000724:	f005 f868 	bl	80057f8 <osSemaphoreAcquire>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d109      	bne.n	8000742 <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	4618      	mov	r0, r3
 800073e:	f005 f8c1 	bl	80058c4 <osSemaphoreRelease>
	}

	return fsm;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	2120      	movs	r1, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f005 f84c 	bl	80057f8 <osSemaphoreAcquire>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d10a      	bne.n	800077c <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	4618      	mov	r0, r3
 8000776:	f005 f8a5 	bl	80058c4 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 800077a:	e004      	b.n	8000786 <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 800077c:	2225      	movs	r2, #37	; 0x25
 800077e:	4904      	ldr	r1, [pc, #16]	; (8000790 <fsm_iterate+0x44>)
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f8ab 	bl	80008dc <fsm_log>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	080096c8 	.word	0x080096c8

08000794 <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af02      	add	r7, sp, #8
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d036      	beq.n	8000818 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	2120      	movs	r1, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 f821 	bl	80057f8 <osSemaphoreAcquire>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d127      	bne.n	800080c <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	68d9      	ldr	r1, [r3, #12]
 80007c6:	f107 0014 	add.w	r0, r7, #20
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	460b      	mov	r3, r1
 80007d0:	4913      	ldr	r1, [pc, #76]	; (8000820 <fsm_changeState+0x8c>)
 80007d2:	f008 fc29 	bl	8009028 <siprintf>
 80007d6:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 80007d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f000 f87b 	bl	80008dc <fsm_log>
		fsm->currentState->exit(fsm);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	4798      	blx	r3

		fsm->currentState = newState;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4618      	mov	r0, r3
 8000806:	f005 f85d 	bl	80058c4 <osSemaphoreRelease>
 800080a:	e006      	b.n	800081a <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 800080c:	2220      	movs	r2, #32
 800080e:	4905      	ldr	r1, [pc, #20]	; (8000824 <fsm_changeState+0x90>)
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f000 f863 	bl	80008dc <fsm_log>
 8000816:	e000      	b.n	800081a <fsm_changeState+0x86>
		return;
 8000818:	bf00      	nop
	}
}
 800081a:	3768      	adds	r7, #104	; 0x68
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	080096f0 	.word	0x080096f0
 8000824:	08009714 	.word	0x08009714

08000828 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b098      	sub	sp, #96	; 0x60
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4920      	ldr	r1, [pc, #128]	; (80008bc <fsm_reset+0x94>)
 800083c:	4618      	mov	r0, r3
 800083e:	f008 fbf3 	bl	8009028 <siprintf>
 8000842:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 8000844:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f845 	bl	80008dc <fsm_log>
	fsm_log_function f = fsm->log;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 8000858:	2210      	movs	r2, #16
 800085a:	2100      	movs	r1, #0
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f008 fb22 	bl	8008ea6 <memset>
	fsm->log = f;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000866:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 800086e:	2200      	movs	r2, #0
 8000870:	2103      	movs	r1, #3
 8000872:	2003      	movs	r0, #3
 8000874:	f004 ff22 	bl	80056bc <osSemaphoreNew>
 8000878:	4602      	mov	r2, r0
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 800087e:	2200      	movs	r2, #0
 8000880:	2103      	movs	r1, #3
 8000882:	2003      	movs	r0, #3
 8000884:	f004 ff1a 	bl	80056bc <osSemaphoreNew>
 8000888:	4602      	mov	r2, r0
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2120      	movs	r1, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f004 ffaf 	bl	80057f8 <osSemaphoreAcquire>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d109      	bne.n	80008b4 <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 f808 	bl	80058c4 <osSemaphoreRelease>
	}
}
 80008b4:	bf00      	nop
 80008b6:	3760      	adds	r7, #96	; 0x60
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08009738 	.word	0x08009738

080008c0 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	605a      	str	r2, [r3, #4]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	68b8      	ldr	r0, [r7, #8]
 80008f0:	4798      	blx	r3
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <Compose_PDM_InitiateStartup>:
 */

#include "PDM_CAN_Messages.h"

PDM_InitiateStartup_t Compose_PDM_InitiateStartup(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af02      	add	r7, sp, #8
	PDM_InitiateStartup_t p;
	p.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x00, 0x0);
 8000900:	2300      	movs	r3, #0
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	2300      	movs	r3, #0
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2302      	movs	r3, #2
 800090a:	2200      	movs	r2, #0
 800090c:	2114      	movs	r1, #20
 800090e:	2002      	movs	r0, #2
 8000910:	f000 f86c 	bl	80009ec <Compose_CANId>
 8000914:	4603      	mov	r3, r0
 8000916:	607b      	str	r3, [r7, #4]
	return p;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <Parse_PDM_StartupOk>:

	return packet;
}

void Parse_PDM_StartupOk(PDM_StartupOk_t packet, uint32_t* powerChannels)
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000930:	607a      	str	r2, [r7, #4]
	*powerChannels = (packet.data[0] << 24) + (packet.data[1] << 16) + (packet.data[2] << 8) + packet.data[3];
 8000932:	7b3b      	ldrb	r3, [r7, #12]
 8000934:	061a      	lsls	r2, r3, #24
 8000936:	7b7b      	ldrb	r3, [r7, #13]
 8000938:	041b      	lsls	r3, r3, #16
 800093a:	441a      	add	r2, r3
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	4413      	add	r3, r2
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	4413      	add	r3, r2
 8000946:	461a      	mov	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	601a      	str	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <Compose_PDM_SelectStartup>:

PDM_SelectStartup_t Compose_PDM_SelectStartup(uint32_t powerChannels)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af02      	add	r7, sp, #8
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	PDM_SelectStartup_t packet;
	packet.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x01, 0x0);
 8000962:	2300      	movs	r3, #0
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	2301      	movs	r3, #1
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2302      	movs	r3, #2
 800096c:	2200      	movs	r2, #0
 800096e:	2114      	movs	r1, #20
 8000970:	2002      	movs	r0, #2
 8000972:	f000 f83b 	bl	80009ec <Compose_CANId>
 8000976:	4603      	mov	r3, r0
 8000978:	613b      	str	r3, [r7, #16]

	uint8_t d[4] = {0};
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<4 ;++i)
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
 8000982:	e00f      	b.n	80009a4 <Compose_PDM_SelectStartup+0x4c>
		d[i] = ((uint8_t*)&powerChannels)[3-i];
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0303 	rsb	r3, r3, #3
 800098a:	461a      	mov	r2, r3
 800098c:	463b      	mov	r3, r7
 800098e:	4413      	add	r3, r2
 8000990:	7819      	ldrb	r1, [r3, #0]
 8000992:	f107 020c 	add.w	r2, r7, #12
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	4413      	add	r3, r2
 800099a:	460a      	mov	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3301      	adds	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	ddec      	ble.n	8000984 <Compose_PDM_SelectStartup+0x2c>

	for (int i=0; i<4 ;++i)
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	e00d      	b.n	80009cc <Compose_PDM_SelectStartup+0x74>
		packet.data[i] = d[i];
 80009b0:	f107 020c 	add.w	r2, r7, #12
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	4413      	add	r3, r2
 80009b8:	7819      	ldrb	r1, [r3, #0]
 80009ba:	f107 0214 	add.w	r2, r7, #20
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	4413      	add	r3, r2
 80009c2:	460a      	mov	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	3301      	adds	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	ddee      	ble.n	80009b0 <Compose_PDM_SelectStartup+0x58>

	return packet;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	461a      	mov	r2, r3
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <Compose_CANId>:

/* USER CODE BEGIN 0 */

/* CANId */
uint32_t Compose_CANId(uint8_t priority, uint16_t sourceId, uint8_t autonomous, uint8_t type, uint16_t extra, uint8_t BMSId)
{
 80009ec:	b490      	push	{r4, r7}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	71bb      	strb	r3, [r7, #6]
 8000a06:	4613      	mov	r3, r2
 8000a08:	70fb      	strb	r3, [r7, #3]
	uint32_t id = (priority & 0x3) << 27
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	06db      	lsls	r3, r3, #27
 8000a0e:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
				| (sourceId & 0x1FF) << 18
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	0499      	lsls	r1, r3, #18
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <Compose_CANId+0x68>)
 8000a18:	400b      	ands	r3, r1
 8000a1a:	431a      	orrs	r2, r3
				| (autonomous & 0x1) << 17
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	045b      	lsls	r3, r3, #17
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	431a      	orrs	r2, r3
				| (type & 0x7) << 14
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	039b      	lsls	r3, r3, #14
 8000a2a:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000a2e:	431a      	orrs	r2, r3
				| (extra & 0x3FF) << 4
 8000a30:	8b3b      	ldrh	r3, [r7, #24]
 8000a32:	0119      	lsls	r1, r3, #4
 8000a34:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000a38:	400b      	ands	r3, r1
 8000a3a:	431a      	orrs	r2, r3
				| (BMSId & 0xF);
 8000a3c:	7f3b      	ldrb	r3, [r7, #28]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	4313      	orrs	r3, r2
	uint32_t id = (priority & 0x3) << 27
 8000a44:	60fb      	str	r3, [r7, #12]
	return id;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc90      	pop	{r4, r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	07fc0000 	.word	0x07fc0000

08000a58 <Parse_SHDN_IMD_HeartbeatResponse>:
	p.data = pwmState;
	return p;
}

void Parse_SHDN_IMD_HeartbeatResponse(SHDN_IMD_HeartbeatResponse_t packet, uint8_t* pwmState)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a66:	607a      	str	r2, [r7, #4]
	*pwmState = packet.data;
 8000a68:	7b3a      	ldrb	r2, [r7, #12]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	701a      	strb	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b08b      	sub	sp, #44	; 0x2c
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000a84:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <state_start_enter+0xf0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d142      	bne.n	8000b12 <state_start_enter+0x96>
	{
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000a8c:	2038      	movs	r0, #56	; 0x38
 8000a8e:	f008 f9f7 	bl	8008e80 <malloc>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b35      	ldr	r3, [pc, #212]	; (8000b6c <state_start_enter+0xf0>)
 8000a98:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000a9a:	4b34      	ldr	r3, [pc, #208]	; (8000b6c <state_start_enter+0xf0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2238      	movs	r2, #56	; 0x38
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 f9ff 	bl	8008ea6 <memset>

		// As CC_GlobalState is accessible across threads, we need to use a semaphore to access it
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <state_start_enter+0xf0>)
 8000aaa:	681c      	ldr	r4, [r3, #0]
 8000aac:	2200      	movs	r2, #0
 8000aae:	2103      	movs	r1, #3
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f004 fe03 	bl	80056bc <osSemaphoreNew>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6323      	str	r3, [r4, #48]	; 0x30
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <state_start_enter+0xf0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 fe98 	bl	80057f8 <osSemaphoreAcquire>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d111      	bne.n	8000af2 <state_start_enter+0x76>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <state_start_enter+0xf0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	761a      	strb	r2, [r3, #24]
			CC_GlobalState->AMS_Debug = true;
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <state_start_enter+0xf0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2201      	movs	r2, #1
 8000adc:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <state_start_enter+0xf0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	769a      	strb	r2, [r3, #26]

			osSemaphoreRelease(CC_GlobalState->sem);
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <state_start_enter+0xf0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4618      	mov	r0, r3
 8000aee:	f004 fee9 	bl	80058c4 <osSemaphoreRelease>
		}

		CC_GlobalState->CANQueue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <state_start_enter+0xf0>)
 8000af4:	681c      	ldr	r4, [r3, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	2128      	movs	r1, #40	; 0x28
 8000afa:	200a      	movs	r0, #10
 8000afc:	f004 ff3a 	bl	8005974 <osMessageQueueNew>
 8000b00:	4603      	mov	r3, r0
 8000b02:	6263      	str	r3, [r4, #36]	; 0x24
		if(CC_GlobalState->CANQueue == NULL)
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <state_start_enter+0xf0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <state_start_enter+0x96>
		{
			Error_Handler();
 8000b0e:	f000 ffc3 	bl	8001a98 <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	4815      	ldr	r0, [pc, #84]	; (8000b70 <state_start_enter+0xf4>)
 8000b1a:	f002 fc59 	bl	80033d0 <HAL_GPIO_WritePin>
	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t pdmStartup = Compose_PDM_InitiateStartup();
 8000b1e:	f7ff feec 	bl	80008fa <Compose_PDM_InitiateStartup>
 8000b22:	4603      	mov	r3, r0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
	{
			.ExtId = pdmStartup.id,
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	2301      	movs	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000b44:	230f      	movs	r3, #15
 8000b46:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <state_start_enter+0xf0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	f107 0208 	add.w	r2, r7, #8
 8000b52:	f107 010c 	add.w	r1, r7, #12
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <state_start_enter+0xf8>)
 8000b58:	f001 ff80 	bl	8002a5c <HAL_CAN_AddTxMessage>

	/* Debug Tracing */
	CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
 8000b5c:	210d      	movs	r1, #13
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <state_start_enter+0xfc>)
 8000b60:	f000 fed0 	bl	8001904 <CC_LogInfo>
	return;
 8000b64:	bf00      	nop
}
 8000b66:	372c      	adds	r7, #44	; 0x2c
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	200049f0 	.word	0x200049f0
 8000b70:	40021000 	.word	0x40021000
 8000b74:	20004a64 	.word	0x20004a64
 8000b78:	0800977c 	.word	0x0800977c

08000b7c <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b09b      	sub	sp, #108	; 0x6c
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000b84:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <state_start_iterate+0x128>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	7e1b      	ldrb	r3, [r3, #24]
 8000b8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	657b      	str	r3, [r7, #84]	; 0x54
 8000b92:	2300      	movs	r3, #0
 8000b94:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000b96:	e027      	b.n	8000be8 <state_start_iterate+0x6c>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <state_start_iterate+0x128>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000b9e:	f107 010c 	add.w	r1, r7, #12
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f004 ffdf 	bl	8005b68 <osMessageQueueGet>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d11b      	bne.n	8000be8 <state_start_iterate+0x6c>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(0x2, 0x14, 0x0, 0x3, 0x00, 0x0))
 8000bb0:	693c      	ldr	r4, [r7, #16]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2303      	movs	r3, #3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2114      	movs	r1, #20
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f7ff ff13 	bl	80009ec <Compose_CANId>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	d10d      	bne.n	8000be8 <state_start_iterate+0x6c>
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(*((PDM_StartupOk_t*)&(msg.data)), &getPowerChannels);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	331c      	adds	r3, #28
 8000bd6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000bda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bde:	f7ff fea0 	bl	8000922 <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000be2:	2301      	movs	r3, #1
 8000be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <state_start_iterate+0x128>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f005 f82c 	bl	8005c4c <osMessageQueueGetCount>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1ce      	bne.n	8000b98 <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d04b      	beq.n	8000c9a <state_start_iterate+0x11e>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c04:	2201      	movs	r2, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000c12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe9d 	bl	8000958 <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000c1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
 8000c2e:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c34:	2304      	movs	r3, #4
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c38:	2304      	movs	r3, #4
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <state_start_iterate+0x128>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f103 0008 	add.w	r0, r3, #8
 8000c44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c48:	1d1a      	adds	r2, r3, #4
 8000c4a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <state_start_iterate+0x12c>)
 8000c52:	f001 ff03 	bl	8002a5c <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <state_start_iterate+0x128>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 fdca 	bl	80057f8 <osSemaphoreAcquire>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d111      	bne.n	8000c8e <state_start_iterate+0x112>
		{
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <state_start_iterate+0x128>)
 8000c6c:	681c      	ldr	r4, [r3, #0]
 8000c6e:	f001 f8e3 	bl	8001e38 <HAL_GetTick>
 8000c72:	4603      	mov	r3, r0
 8000c74:	61e3      	str	r3, [r4, #28]
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <state_start_iterate+0x128>)
 8000c78:	681c      	ldr	r4, [r3, #0]
 8000c7a:	f001 f8dd 	bl	8001e38 <HAL_GetTick>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6223      	str	r3, [r4, #32]
			osSemaphoreRelease(CC_GlobalState->sem);
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <state_start_iterate+0x128>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 fe1b 	bl	80058c4 <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000c8e:	4a07      	ldr	r2, [pc, #28]	; (8000cac <state_start_iterate+0x130>)
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <state_start_iterate+0x134>)
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fd7e 	bl	8000794 <fsm_changeState>
	}
	return;
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
}
 8000c9c:	3764      	adds	r7, #100	; 0x64
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd90      	pop	{r4, r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200049f0 	.word	0x200049f0
 8000ca8:	20004a64 	.word	0x20004a64
 8000cac:	0800978c 	.word	0x0800978c
 8000cb0:	20000010 	.word	0x20000010

08000cb4 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	/* Wake/Ready to Idle over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8000cbc:	bf00      	nop
}
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	return;
 8000cd0:	bf00      	nop
}
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b0a7      	sub	sp, #156	; 0x9c
 8000ce0:	af06      	add	r7, sp, #24
 8000ce2:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */

	/* AMS Heartbeat Expiry - Fatal Shutdown */
	if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8000ce4:	f001 f8a8 	bl	8001e38 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4b8b      	ldr	r3, [pc, #556]	; (8000f18 <state_idle_iterate+0x23c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b64      	cmp	r3, #100	; 0x64
 8000cf4:	d93a      	bls.n	8000d6c <state_idle_iterate+0x90>
 8000cf6:	4b88      	ldr	r3, [pc, #544]	; (8000f18 <state_idle_iterate+0x23c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	7e5b      	ldrb	r3, [r3, #25]
 8000cfc:	f083 0301 	eor.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d032      	beq.n	8000d6c <state_idle_iterate+0x90>
	{
		CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000d06:	f7ff fcd4 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
		CAN_TxHeaderTypeDef header =
 8000d0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
 8000d1e:	615a      	str	r2, [r3, #20]
		{
				.ExtId = fatalShutdown.id,
 8000d20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		CAN_TxHeaderTypeDef header =
 8000d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d24:	2304      	movs	r3, #4
 8000d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d28:	2301      	movs	r3, #1
 8000d2a:	677b      	str	r3, [r7, #116]	; 0x74
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000d32:	4b79      	ldr	r3, [pc, #484]	; (8000f18 <state_idle_iterate+0x23c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000d3a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000d3e:	4877      	ldr	r0, [pc, #476]	; (8000f1c <state_idle_iterate+0x240>)
 8000d40:	f001 fe8c 	bl	8002a5c <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000d44:	4b74      	ldr	r3, [pc, #464]	; (8000f18 <state_idle_iterate+0x23c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3308      	adds	r3, #8
 8000d4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000d4e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000d52:	4873      	ldr	r0, [pc, #460]	; (8000f20 <state_idle_iterate+0x244>)
 8000d54:	f001 fe82 	bl	8002a5c <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000d58:	4b6f      	ldr	r3, [pc, #444]	; (8000f18 <state_idle_iterate+0x23c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3310      	adds	r3, #16
 8000d5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000d62:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000d66:	486f      	ldr	r0, [pc, #444]	; (8000f24 <state_idle_iterate+0x248>)
 8000d68:	f001 fe78 	bl	8002a5c <HAL_CAN_AddTxMessage>
	}
	/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
	if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8000d6c:	f001 f864 	bl	8001e38 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	4b69      	ldr	r3, [pc, #420]	; (8000f18 <state_idle_iterate+0x23c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	f240 8097 	bls.w	8000eae <state_idle_iterate+0x1d2>
 8000d80:	4b65      	ldr	r3, [pc, #404]	; (8000f18 <state_idle_iterate+0x23c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	7e9b      	ldrb	r3, [r3, #26]
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 808e 	beq.w	8000eae <state_idle_iterate+0x1d2>
	{
		CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000d92:	f7ff fc8e 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000d96:	4603      	mov	r3, r0
 8000d98:	65fb      	str	r3, [r7, #92]	; 0x5c
		CAN_TxHeaderTypeDef header =
 8000d9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	615a      	str	r2, [r3, #20]
		{
				.ExtId = fatalShutdown.id,
 8000dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		CAN_TxHeaderTypeDef header =
 8000dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8000db0:	2304      	movs	r3, #4
 8000db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000db4:	2301      	movs	r3, #1
 8000db6:	657b      	str	r3, [r7, #84]	; 0x54
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8000db8:	230f      	movs	r3, #15
 8000dba:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000dbe:	4b56      	ldr	r3, [pc, #344]	; (8000f18 <state_idle_iterate+0x23c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dc6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000dca:	4854      	ldr	r0, [pc, #336]	; (8000f1c <state_idle_iterate+0x240>)
 8000dcc:	f001 fe46 	bl	8002a5c <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000dd0:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <state_idle_iterate+0x23c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3308      	adds	r3, #8
 8000dd6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dda:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000dde:	4850      	ldr	r0, [pc, #320]	; (8000f20 <state_idle_iterate+0x244>)
 8000de0:	f001 fe3c 	bl	8002a5c <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000de4:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <state_idle_iterate+0x23c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3310      	adds	r3, #16
 8000dea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dee:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000df2:	484c      	ldr	r0, [pc, #304]	; (8000f24 <state_idle_iterate+0x248>)
 8000df4:	f001 fe32 	bl	8002a5c <HAL_CAN_AddTxMessage>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000df8:	e059      	b.n	8000eae <state_idle_iterate+0x1d2>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000dfa:	4b47      	ldr	r3, [pc, #284]	; (8000f18 <state_idle_iterate+0x23c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000e00:	f107 010c 	add.w	r1, r7, #12
 8000e04:	2300      	movs	r3, #0
 8000e06:	2200      	movs	r2, #0
 8000e08:	f004 feae 	bl	8005b68 <osMessageQueueGet>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14d      	bne.n	8000eae <state_idle_iterate+0x1d2>
		{
			/* Packet Handler */

			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000e12:	693c      	ldr	r4, [r7, #16]
 8000e14:	2300      	movs	r3, #0
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2110      	movs	r1, #16
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff fde2 	bl	80009ec <Compose_CANId>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d122      	bne.n	8000e74 <state_idle_iterate+0x198>
			{
				bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
				Parse_AMS_HeartbeatResponse(*((AMS_HeartbeatResponse_t*)&(msg.data)), &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	f103 021c 	add.w	r2, r3, #28
 8000e36:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000e3a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000e3e:	9305      	str	r3, [sp, #20]
 8000e40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e44:	9304      	str	r3, [sp, #16]
 8000e46:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000e4a:	9303      	str	r3, [sp, #12]
 8000e4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e62:	f7ff fbbd 	bl	80005e0 <Parse_AMS_HeartbeatResponse>
				CC_GlobalState->amsTicks = HAL_GetTick();
 8000e66:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <state_idle_iterate+0x23c>)
 8000e68:	681c      	ldr	r4, [r3, #0]
 8000e6a:	f000 ffe5 	bl	8001e38 <HAL_GetTick>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	61e3      	str	r3, [r4, #28]
 8000e72:	e01c      	b.n	8000eae <state_idle_iterate+0x1d2>
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000e74:	693c      	ldr	r4, [r7, #16]
 8000e76:	2300      	movs	r3, #0
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2200      	movs	r2, #0
 8000e82:	2110      	movs	r1, #16
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fdb1 	bl	80009ec <Compose_CANId>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	d10e      	bne.n	8000eae <state_idle_iterate+0x1d2>
			{
				uint8_t pwmState;
				Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	331c      	adds	r3, #28
 8000e96:	f107 0235 	add.w	r2, r7, #53	; 0x35
 8000e9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e9e:	f7ff fddb 	bl	8000a58 <Parse_SHDN_IMD_HeartbeatResponse>
				CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <state_idle_iterate+0x23c>)
 8000ea4:	681c      	ldr	r4, [r3, #0]
 8000ea6:	f000 ffc7 	bl	8001e38 <HAL_GetTick>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6223      	str	r3, [r4, #32]
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <state_idle_iterate+0x23c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 fec9 	bl	8005c4c <osMessageQueueGetCount>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d19c      	bne.n	8000dfa <state_idle_iterate+0x11e>
	/* If Brake Pressure > 20% */

	/* Illuminate Power Button */
	// HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
	/* If RTD Button Engaged */
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <state_idle_iterate+0x23c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f004 fc95 	bl	80057f8 <osSemaphoreAcquire>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d11d      	bne.n	8000f10 <state_idle_iterate+0x234>
	{
		if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->rtdTicks) > 5000)
 8000ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <state_idle_iterate+0x24c>)
 8000eda:	f002 fa61 	bl	80033a0 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00f      	beq.n	8000f04 <state_idle_iterate+0x228>
 8000ee4:	f000 ffa8 	bl	8001e38 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <state_idle_iterate+0x23c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d904      	bls.n	8000f04 <state_idle_iterate+0x228>
		{
			/* Enter Driving State */
			fsm_changeState(fsm, &drivingState, "RTD Engaged");
 8000efa:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <state_idle_iterate+0x250>)
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <state_idle_iterate+0x254>)
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fc48 	bl	8000794 <fsm_changeState>
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <state_idle_iterate+0x23c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 fcda 	bl	80058c4 <osSemaphoreRelease>
	}
}
 8000f10:	bf00      	nop
 8000f12:	3784      	adds	r7, #132	; 0x84
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	200049f0 	.word	0x200049f0
 8000f1c:	20004a8c 	.word	0x20004a8c
 8000f20:	20004a64 	.word	0x20004a64
 8000f24:	20004a3c 	.word	0x20004a3c
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	080097a8 	.word	0x080097a8
 8000f30:	20000020 	.word	0x20000020

08000f34 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 8000f3c:	f7ff fba5 	bl	800068a <Compose_CC_ReadyToDrive>
 8000f40:	4603      	mov	r3, r0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000f62:	230f      	movs	r3, #15
 8000f64:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <state_idle_exit+0x74>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f107 0208 	add.w	r2, r7, #8
 8000f6e:	f107 010c 	add.w	r1, r7, #12
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <state_idle_exit+0x78>)
 8000f74:	f001 fd72 	bl	8002a5c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <state_idle_exit+0x74>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	f107 0208 	add.w	r2, r7, #8
 8000f82:	f107 010c 	add.w	r1, r7, #12
 8000f86:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <state_idle_exit+0x7c>)
 8000f88:	f001 fd68 	bl	8002a5c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <state_idle_exit+0x74>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3310      	adds	r3, #16
 8000f92:	f107 0208 	add.w	r2, r7, #8
 8000f96:	f107 010c 	add.w	r1, r7, #12
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <state_idle_exit+0x80>)
 8000f9c:	f001 fd5e 	bl	8002a5c <HAL_CAN_AddTxMessage>
	return;
 8000fa0:	bf00      	nop
}
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200049f0 	.word	0x200049f0
 8000fac:	20004a8c 	.word	0x20004a8c
 8000fb0:	20004a64 	.word	0x20004a64
 8000fb4:	20004a3c 	.word	0x20004a3c

08000fb8 <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	/* Else */

	/* Hard Shutdown Power Off */
	return;
 8000fc0:	bf00      	nop
}
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Drivin Drivin\r\n", strlen("Drivin Drivin\r\n"));
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <state_driving_iterate+0x40>)
 8000fd8:	f000 fc94 	bl	8001904 <CC_LogInfo>

	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000fdc:	e008      	b.n	8000ff0 <state_driving_iterate+0x24>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U))
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <state_driving_iterate+0x44>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000fe4:	f107 0108 	add.w	r1, r7, #8
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2200      	movs	r2, #0
 8000fec:	f004 fdbc 	bl	8005b68 <osMessageQueueGet>
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <state_driving_iterate+0x44>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 fe28 	bl	8005c4c <osMessageQueueGetCount>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ed      	bne.n	8000fde <state_driving_iterate+0x12>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 8001002:	bf00      	nop
 8001004:	3730      	adds	r7, #48	; 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	080097b4 	.word	0x080097b4
 8001010:	200049f0 	.word	0x200049f0

08001014 <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 800101c:	bf00      	nop
}
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <state_debug_enter>:

state_t debugState = {&state_debug_enter, &state_debug_iterate, &state_debug_exit, "Debug_s"};

void state_debug_enter(fsm_t *fsm)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Enter Debugging\r\n", strlen("Enter Debugging\r\n"));
 8001030:	2111      	movs	r1, #17
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <state_debug_enter+0x18>)
 8001034:	f000 fc66 	bl	8001904 <CC_LogInfo>
	return;
 8001038:	bf00      	nop
}
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	080097c4 	.word	0x080097c4

08001044 <state_debug_iterate>:

void state_debug_iterate(fsm_t *fsm)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b097      	sub	sp, #92	; 0x5c
 8001048:	af02      	add	r7, sp, #8
 800104a:	6078      	str	r0, [r7, #4]

	/* RTD LED */

	//HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
	//osDelay(100);
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001052:	4846      	ldr	r0, [pc, #280]	; (800116c <state_debug_iterate+0x128>)
 8001054:	f002 f9bc 	bl	80033d0 <HAL_GPIO_WritePin>
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001058:	4b45      	ldr	r3, [pc, #276]	; (8001170 <state_debug_iterate+0x12c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	2120      	movs	r1, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fbc9 	bl	80057f8 <osSemaphoreAcquire>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d11c      	bne.n	80010a6 <state_debug_iterate+0x62>
	{
		if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->rtdTicks) > 5000)
 800106c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001070:	483e      	ldr	r0, [pc, #248]	; (800116c <state_debug_iterate+0x128>)
 8001072:	f002 f995 	bl	80033a0 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00e      	beq.n	800109a <state_debug_iterate+0x56>
 800107c:	f000 fedc 	bl	8001e38 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <state_debug_iterate+0x12c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	f241 3288 	movw	r2, #5000	; 0x1388
 800108e:	4293      	cmp	r3, r2
 8001090:	d903      	bls.n	800109a <state_debug_iterate+0x56>
		{
			CC_LogInfo("Button Be Driving\r\n", strlen("Button Be Driving\r\n"));
 8001092:	2113      	movs	r1, #19
 8001094:	4837      	ldr	r0, [pc, #220]	; (8001174 <state_debug_iterate+0x130>)
 8001096:	f000 fc35 	bl	8001904 <CC_LogInfo>
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 800109a:	4b35      	ldr	r3, [pc, #212]	; (8001170 <state_debug_iterate+0x12c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fc0f 	bl	80058c4 <osSemaphoreRelease>
	// osDelay(100);

	/* ADC Value Debugging */

	/* Compose CAN Message */
	CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 80010a6:	f7ff fb04 	bl	80006b2 <Compose_CC_FatalShutdown>
 80010aa:	4603      	mov	r3, r0
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	CAN_TxHeaderTypeDef header =
 80010ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	615a      	str	r2, [r3, #20]
	{
			.ExtId = fatalShutdown.id,
 80010c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	CAN_TxHeaderTypeDef header =
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80010c4:	2304      	movs	r3, #4
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010c8:	2301      	movs	r3, #1
 80010ca:	647b      	str	r3, [r7, #68]	; 0x44
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 80010cc:	230f      	movs	r3, #15
 80010ce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <state_debug_iterate+0x12c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010da:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80010de:	4826      	ldr	r0, [pc, #152]	; (8001178 <state_debug_iterate+0x134>)
 80010e0:	f001 fcbc 	bl	8002a5c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <state_debug_iterate+0x12c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3308      	adds	r3, #8
 80010ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010ee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80010f2:	4822      	ldr	r0, [pc, #136]	; (800117c <state_debug_iterate+0x138>)
 80010f4:	f001 fcb2 	bl	8002a5c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <state_debug_iterate+0x12c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3310      	adds	r3, #16
 80010fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001102:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001106:	481e      	ldr	r0, [pc, #120]	; (8001180 <state_debug_iterate+0x13c>)
 8001108:	f001 fca8 	bl	8002a5c <HAL_CAN_AddTxMessage>

	/* Check for CAN Messages */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 800110c:	e021      	b.n	8001152 <state_debug_iterate+0x10e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <state_debug_iterate+0x12c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001114:	f107 0108 	add.w	r1, r7, #8
 8001118:	2300      	movs	r3, #0
 800111a:	2200      	movs	r2, #0
 800111c:	f004 fd24 	bl	8005b68 <osMessageQueueGet>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d115      	bne.n	8001152 <state_debug_iterate+0x10e>
		{
			/* Packet Handler */
			CC_LogInfo("CAN Being Received\r\n", strlen("CAN Being Received\r\n"));
 8001126:	2114      	movs	r1, #20
 8001128:	4816      	ldr	r0, [pc, #88]	; (8001184 <state_debug_iterate+0x140>)
 800112a:	f000 fbeb 	bl	8001904 <CC_LogInfo>

			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800112e:	68fc      	ldr	r4, [r7, #12]
 8001130:	2300      	movs	r3, #0
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	2301      	movs	r3, #1
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	2200      	movs	r2, #0
 800113c:	2110      	movs	r1, #16
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff fc54 	bl	80009ec <Compose_CANId>
 8001144:	4603      	mov	r3, r0
 8001146:	429c      	cmp	r4, r3
 8001148:	d103      	bne.n	8001152 <state_debug_iterate+0x10e>
			{
				CC_LogInfo("AMS Heartbeat Detected\r\n", strlen("AMS Heartbeat Detected\r\n"));
 800114a:	2118      	movs	r1, #24
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <state_debug_iterate+0x144>)
 800114e:	f000 fbd9 	bl	8001904 <CC_LogInfo>
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <state_debug_iterate+0x12c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fd77 	bl	8005c4c <osMessageQueueGetCount>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1d4      	bne.n	800110e <state_debug_iterate+0xca>
			}
		}
	}

	return;
 8001164:	bf00      	nop
}
 8001166:	3754      	adds	r7, #84	; 0x54
 8001168:	46bd      	mov	sp, r7
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	200049f0 	.word	0x200049f0
 8001174:	080097d8 	.word	0x080097d8
 8001178:	20004a8c 	.word	0x20004a8c
 800117c:	20004a64 	.word	0x20004a64
 8001180:	20004a3c 	.word	0x20004a3c
 8001184:	080097ec 	.word	0x080097ec
 8001188:	08009804 	.word	0x08009804

0800118c <state_debug_exit>:

void state_debug_exit(fsm_t *fsm)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Exit Debugging\r\n", strlen("Exit Debugging\r\n"));
 8001194:	2110      	movs	r1, #16
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <state_debug_exit+0x18>)
 8001198:	f000 fbb4 	bl	8001904 <CC_LogInfo>
	return;
 800119c:	bf00      	nop
}
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08009820 	.word	0x08009820

080011a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_ADC1_Init+0x98>)
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <MX_ADC1_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_ADC1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_ADC1_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_ADC1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_ADC1_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_ADC1_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_ADC1_Init+0x98>)
 80011e8:	4a17      	ldr	r2, [pc, #92]	; (8001248 <MX_ADC1_Init+0xa0>)
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_ADC1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_ADC1_Init+0x98>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_ADC1_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_ADC1_Init+0x98>)
 8001202:	2201      	movs	r2, #1
 8001204:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_ADC1_Init+0x98>)
 8001208:	f000 fe22 	bl	8001e50 <HAL_ADC_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 fc41 	bl	8001a98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121a:	2301      	movs	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_ADC1_Init+0x98>)
 8001228:	f000 ffa8 	bl	800217c <HAL_ADC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001232:	f000 fc31 	bl	8001a98 <Error_Handler>
  }

}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200049f4 	.word	0x200049f4
 8001244:	40012000 	.word	0x40012000
 8001248:	0f000001 	.word	0x0f000001

0800124c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <HAL_ADC_MspInit+0x74>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d123      	bne.n	80012b6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_ADC_MspInit+0x78>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_ADC_MspInit+0x78>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_ADC_MspInit+0x78>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_ADC_MspInit+0x78>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_ADC_MspInit+0x78>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_ADC_MspInit+0x78>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800129e:	2305      	movs	r3, #5
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_ADC_MspInit+0x7c>)
 80012b2:	f001 fecb 	bl	800304c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b6:	bf00      	nop
 80012b8:	3728      	adds	r7, #40	; 0x28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40012000 	.word	0x40012000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000

080012cc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_CAN1_Init+0x60>)
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <MX_CAN1_Init+0x64>)
 80012d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_CAN1_Init+0x60>)
 80012d8:	2210      	movs	r2, #16
 80012da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_CAN1_Init+0x60>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_CAN1_Init+0x60>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_CAN1_Init+0x60>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_CAN1_Init+0x60>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <MX_CAN1_Init+0x60>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_CAN1_Init+0x60>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MX_CAN1_Init+0x60>)
 8001302:	2200      	movs	r2, #0
 8001304:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_CAN1_Init+0x60>)
 8001308:	2200      	movs	r2, #0
 800130a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <MX_CAN1_Init+0x60>)
 800130e:	2200      	movs	r2, #0
 8001310:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_CAN1_Init+0x60>)
 8001314:	2200      	movs	r2, #0
 8001316:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_CAN1_Init+0x60>)
 800131a:	f001 f973 	bl	8002604 <HAL_CAN_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001324:	f000 fbb8 	bl	8001a98 <Error_Handler>
  }

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20004a8c 	.word	0x20004a8c
 8001330:	40006400 	.word	0x40006400

08001334 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_CAN2_Init+0x64>)
 800133a:	4a18      	ldr	r2, [pc, #96]	; (800139c <MX_CAN2_Init+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_CAN2_Init+0x64>)
 8001340:	2202      	movs	r2, #2
 8001342:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_CAN2_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_CAN2_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_CAN2_Init+0x64>)
 8001352:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001356:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_CAN2_Init+0x64>)
 800135a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800135e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MX_CAN2_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_CAN2_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <MX_CAN2_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_CAN2_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <MX_CAN2_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_CAN2_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_CAN2_Init+0x64>)
 8001386:	f001 f93d 	bl	8002604 <HAL_CAN_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001390:	f000 fb82 	bl	8001a98 <Error_Handler>
  }

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20004a64 	.word	0x20004a64
 800139c:	40006800 	.word	0x40006800

080013a0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_CAN3_Init+0x60>)
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <MX_CAN3_Init+0x64>)
 80013a8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 16;
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_CAN3_Init+0x60>)
 80013ac:	2210      	movs	r2, #16
 80013ae:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_CAN3_Init+0x60>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_CAN3_Init+0x60>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_1TQ;
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_CAN3_Init+0x60>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_CAN3_Init+0x60>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <MX_CAN3_Init+0x60>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_CAN3_Init+0x60>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <MX_CAN3_Init+0x60>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_CAN3_Init+0x60>)
 80013dc:	2200      	movs	r2, #0
 80013de:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_CAN3_Init+0x60>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_CAN3_Init+0x60>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_CAN3_Init+0x60>)
 80013ee:	f001 f909 	bl	8002604 <HAL_CAN_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_CAN3_Init+0x5c>
  {
    Error_Handler();
 80013f8:	f000 fb4e 	bl	8001a98 <Error_Handler>
  }

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20004a3c 	.word	0x20004a3c
 8001404:	40003400 	.word	0x40003400

08001408 <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b092      	sub	sp, #72	; 0x48
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a7e      	ldr	r2, [pc, #504]	; (8001620 <HAL_CAN_MspInit+0x218>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d132      	bne.n	8001490 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800142a:	4b7e      	ldr	r3, [pc, #504]	; (8001624 <HAL_CAN_MspInit+0x21c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	4a7c      	ldr	r2, [pc, #496]	; (8001624 <HAL_CAN_MspInit+0x21c>)
 8001432:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001434:	4b7b      	ldr	r3, [pc, #492]	; (8001624 <HAL_CAN_MspInit+0x21c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d10b      	bne.n	8001454 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800143c:	4b7a      	ldr	r3, [pc, #488]	; (8001628 <HAL_CAN_MspInit+0x220>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a79      	ldr	r2, [pc, #484]	; (8001628 <HAL_CAN_MspInit+0x220>)
 8001442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b77      	ldr	r3, [pc, #476]	; (8001628 <HAL_CAN_MspInit+0x220>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
 8001452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b74      	ldr	r3, [pc, #464]	; (8001628 <HAL_CAN_MspInit+0x220>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a73      	ldr	r2, [pc, #460]	; (8001628 <HAL_CAN_MspInit+0x220>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b71      	ldr	r3, [pc, #452]	; (8001628 <HAL_CAN_MspInit+0x220>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800146c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800147e:	2309      	movs	r3, #9
 8001480:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001486:	4619      	mov	r1, r3
 8001488:	4868      	ldr	r0, [pc, #416]	; (800162c <HAL_CAN_MspInit+0x224>)
 800148a:	f001 fddf 	bl	800304c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 800148e:	e0c2      	b.n	8001616 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a66      	ldr	r2, [pc, #408]	; (8001630 <HAL_CAN_MspInit+0x228>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d15c      	bne.n	8001554 <HAL_CAN_MspInit+0x14c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 800149a:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_CAN_MspInit+0x22c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	4a64      	ldr	r2, [pc, #400]	; (8001634 <HAL_CAN_MspInit+0x22c>)
 80014a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 80014a4:	4b63      	ldr	r3, [pc, #396]	; (8001634 <HAL_CAN_MspInit+0x22c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10b      	bne.n	80014c4 <HAL_CAN_MspInit+0xbc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 80014ac:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80014b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 80014c4:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <HAL_CAN_MspInit+0x230>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a5b      	ldr	r2, [pc, #364]	; (8001638 <HAL_CAN_MspInit+0x230>)
 80014cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 80014ce:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <HAL_CAN_MspInit+0x230>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d10b      	bne.n	80014ee <HAL_CAN_MspInit+0xe6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a53      	ldr	r2, [pc, #332]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80014dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b51      	ldr	r3, [pc, #324]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014ee:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <HAL_CAN_MspInit+0x21c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <HAL_CAN_MspInit+0x21c>)
 80014f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014f8:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <HAL_CAN_MspInit+0x21c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10b      	bne.n	8001518 <HAL_CAN_MspInit+0x110>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001500:	4b49      	ldr	r3, [pc, #292]	; (8001628 <HAL_CAN_MspInit+0x220>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a48      	ldr	r2, [pc, #288]	; (8001628 <HAL_CAN_MspInit+0x220>)
 8001506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b46      	ldr	r3, [pc, #280]	; (8001628 <HAL_CAN_MspInit+0x220>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001514:	623b      	str	r3, [r7, #32]
 8001516:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_CAN_MspInit+0x220>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	4a42      	ldr	r2, [pc, #264]	; (8001628 <HAL_CAN_MspInit+0x220>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6313      	str	r3, [r2, #48]	; 0x30
 8001524:	4b40      	ldr	r3, [pc, #256]	; (8001628 <HAL_CAN_MspInit+0x220>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8001530:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001542:	2309      	movs	r3, #9
 8001544:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800154a:	4619      	mov	r1, r3
 800154c:	483b      	ldr	r0, [pc, #236]	; (800163c <HAL_CAN_MspInit+0x234>)
 800154e:	f001 fd7d 	bl	800304c <HAL_GPIO_Init>
}
 8001552:	e060      	b.n	8001616 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a39      	ldr	r2, [pc, #228]	; (8001640 <HAL_CAN_MspInit+0x238>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d15b      	bne.n	8001616 <HAL_CAN_MspInit+0x20e>
    HAL_RCC_CAN3_CLK_ENABLED++;
 800155e:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_CAN_MspInit+0x22c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	4a33      	ldr	r2, [pc, #204]	; (8001634 <HAL_CAN_MspInit+0x22c>)
 8001566:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8001568:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_CAN_MspInit+0x22c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d10b      	bne.n	8001588 <HAL_CAN_MspInit+0x180>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_CAN_MspInit+0x220>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a2c      	ldr	r2, [pc, #176]	; (8001628 <HAL_CAN_MspInit+0x220>)
 8001576:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <HAL_CAN_MspInit+0x220>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_CAN_MspInit+0x230>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_CAN_MspInit+0x230>)
 8001590:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_CAN_MspInit+0x230>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10b      	bne.n	80015b2 <HAL_CAN_MspInit+0x1aa>
      __HAL_RCC_CAN2_CLK_ENABLE();
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_CAN_MspInit+0x220>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a22      	ldr	r2, [pc, #136]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80015a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_CAN_MspInit+0x21c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <HAL_CAN_MspInit+0x21c>)
 80015ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_CAN_MspInit+0x21c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10b      	bne.n	80015dc <HAL_CAN_MspInit+0x1d4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80015ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_CAN_MspInit+0x220>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80015f4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001606:	230b      	movs	r3, #11
 8001608:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800160e:	4619      	mov	r1, r3
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <HAL_CAN_MspInit+0x224>)
 8001612:	f001 fd1b 	bl	800304c <HAL_GPIO_Init>
}
 8001616:	bf00      	nop
 8001618:	3748      	adds	r7, #72	; 0x48
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40006400 	.word	0x40006400
 8001624:	200000d0 	.word	0x200000d0
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	40006800 	.word	0x40006800
 8001634:	200000d4 	.word	0x200000d4
 8001638:	200000d8 	.word	0x200000d8
 800163c:	40020400 	.word	0x40020400
 8001640:	40003400 	.word	0x40003400

08001644 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <MX_FREERTOS_Init+0x18>)
 800164a:	2100      	movs	r1, #0
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_FREERTOS_Init+0x1c>)
 800164e:	f003 ff61 	bl	8005514 <osThreadNew>
 8001652:	4602      	mov	r2, r0
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <MX_FREERTOS_Init+0x20>)
 8001656:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	080098a8 	.word	0x080098a8
 8001660:	08001669 	.word	0x08001669
 8001664:	20004ab4 	.word	0x20004ab4

08001668 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001670:	2001      	movs	r0, #1
 8001672:	f003 fff5 	bl	8005660 <osDelay>
 8001676:	e7fb      	b.n	8001670 <StartDefaultTask+0x8>

08001678 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <MX_GPIO_Init+0xbc>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a28      	ldr	r2, [pc, #160]	; (8001734 <MX_GPIO_Init+0xbc>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <MX_GPIO_Init+0xbc>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <MX_GPIO_Init+0xbc>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <MX_GPIO_Init+0xbc>)
 80016ac:	f043 0310 	orr.w	r3, r3, #16
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <MX_GPIO_Init+0xbc>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_GPIO_Init+0xbc>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_GPIO_Init+0xbc>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_GPIO_Init+0xbc>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016dc:	4816      	ldr	r0, [pc, #88]	; (8001738 <MX_GPIO_Init+0xc0>)
 80016de:	f001 fe77 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HSOUT_RTD_LED_Pin;
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HSOUT_RTD_LED_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	480f      	ldr	r0, [pc, #60]	; (8001738 <MX_GPIO_Init+0xc0>)
 80016fc:	f001 fca6 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_INPUT_Pin;
 8001700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <MX_GPIO_Init+0xc4>)
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RTD_INPUT_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4619      	mov	r1, r3
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <MX_GPIO_Init+0xc0>)
 8001716:	f001 fc99 	bl	800304c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2103      	movs	r1, #3
 800171e:	2028      	movs	r0, #40	; 0x28
 8001720:	f001 fc6a 	bl	8002ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001724:	2028      	movs	r0, #40	; 0x28
 8001726:	f001 fc83 	bl	8003030 <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40021000 	.word	0x40021000
 800173c:	10110000 	.word	0x10110000

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f000 fb56 	bl	8001df6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f861 	bl	8001810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f7ff ff93 	bl	8001678 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001752:	f7ff fdbb 	bl	80012cc <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8001756:	f000 fab1 	bl	8001cbc <MX_USART3_UART_Init>
  MX_CAN2_Init();
 800175a:	f7ff fdeb 	bl	8001334 <MX_CAN2_Init>
  MX_CAN3_Init();
 800175e:	f7ff fe1f 	bl	80013a0 <MX_CAN3_Init>
  MX_ADC1_Init();
 8001762:	f7ff fd21 	bl	80011a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8001766:	4824      	ldr	r0, [pc, #144]	; (80017f8 <main+0xb8>)
 8001768:	f001 f934 	bl	80029d4 <HAL_CAN_Start>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <main+0x36>
	{
		Error_Handler();
 8001772:	f000 f991 	bl	8001a98 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8001776:	4821      	ldr	r0, [pc, #132]	; (80017fc <main+0xbc>)
 8001778:	f001 f92c 	bl	80029d4 <HAL_CAN_Start>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <main+0x46>
	{
		Error_Handler();
 8001782:	f000 f989 	bl	8001a98 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8001786:	481d      	ldr	r0, [pc, #116]	; (80017fc <main+0xbc>)
 8001788:	f001 f924 	bl	80029d4 <HAL_CAN_Start>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <main+0x56>
	{
		Error_Handler();
 8001792:	f000 f981 	bl	8001a98 <Error_Handler>
	}
	// Setup CAN Filters
	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14; // Must be 14 for the slave CANBUS
 8001796:	230e      	movs	r3, #14
 8001798:	61bb      	str	r3, [r7, #24]
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 800179e:	2301      	movs	r3, #1
 80017a0:	623b      	str	r3, [r7, #32]
	sFilterConfig2.FilterIdHigh = 0x0000;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
	sFilterConfig2.FilterIdLow = 0x0001;
 80017a6:	2301      	movs	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
	sFilterConfig2.FilterActivation = ENABLE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig2.SlaveStartFilterBank = 14;
 80017ba:	230e      	movs	r3, #14
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2);
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <main+0xbc>)
 80017c4:	f001 f81a 	bl	80027fc <HAL_CAN_ConfigFilter>

	if(HAL_ADC_Start(&hadc1) != HAL_OK)
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <main+0xc0>)
 80017ca:	f000 fb85 	bl	8001ed8 <HAL_ADC_Start>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <main+0x98>
	{
		Error_Handler();
 80017d4:	f000 f960 	bl	8001a98 <Error_Handler>
	}
	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 80017d8:	480a      	ldr	r0, [pc, #40]	; (8001804 <main+0xc4>)
 80017da:	f7fe ff7e 	bl	80006da <fsm_new>
 80017de:	62f8      	str	r0, [r7, #44]	; 0x2c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <main+0xc8>)
 80017e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <main+0xcc>)
 80017e6:	f003 fe95 	bl	8005514 <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80017ea:	f003 fe29 	bl	8005440 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017ee:	f7ff ff29 	bl	8001644 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80017f2:	f003 fe59 	bl	80054a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80017f6:	e7fe      	b.n	80017f6 <main+0xb6>
 80017f8:	20004a8c 	.word	0x20004a8c
 80017fc:	20004a64 	.word	0x20004a64
 8001800:	200049f4 	.word	0x200049f4
 8001804:	20000000 	.word	0x20000000
 8001808:	080098cc 	.word	0x080098cc
 800180c:	0800192d 	.word	0x0800192d

08001810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0b8      	sub	sp, #224	; 0xe0
 8001814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800181a:	2234      	movs	r2, #52	; 0x34
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f007 fb41 	bl	8008ea6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	2290      	movs	r2, #144	; 0x90
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f007 fb32 	bl	8008ea6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <SystemClock_Config+0xec>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <SystemClock_Config+0xec>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <SystemClock_Config+0xec>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800185a:	4b29      	ldr	r3, [pc, #164]	; (8001900 <SystemClock_Config+0xf0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001862:	4a27      	ldr	r2, [pc, #156]	; (8001900 <SystemClock_Config+0xf0>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b25      	ldr	r3, [pc, #148]	; (8001900 <SystemClock_Config+0xf0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001876:	2302      	movs	r3, #2
 8001878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187c:	2301      	movs	r3, #1
 800187e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001882:	2310      	movs	r3, #16
 8001884:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fdda 	bl	800344c <HAL_RCC_OscConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800189e:	f000 f8fb 	bl	8001a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a2:	230f      	movs	r3, #15
 80018a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 f86e 	bl	80039a8 <HAL_RCC_ClockConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018d2:	f000 f8e1 	bl	8001a98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018da:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 fa63 	bl	8003db0 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80018f0:	f000 f8d2 	bl	8001a98 <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	37e0      	adds	r7, #224	; 0xe0
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b29a      	uxth	r2, r3
 8001912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <CC_LogInfo+0x24>)
 800191a:	f003 f8eb 	bl	8004af4 <HAL_UART_Transmit>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20004af8 	.word	0x20004af8

0800192c <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b098      	sub	sp, #96	; 0x60
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 8001934:	2115      	movs	r1, #21
 8001936:	4843      	ldr	r0, [pc, #268]	; (8001a44 <fsm_thread_mainLoop+0x118>)
 8001938:	f7ff ffe4 	bl	8001904 <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 800193c:	4942      	ldr	r1, [pc, #264]	; (8001a48 <fsm_thread_mainLoop+0x11c>)
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe ffbe 	bl	80008c0 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 8001944:	4941      	ldr	r1, [pc, #260]	; (8001a4c <fsm_thread_mainLoop+0x120>)
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe ff6e 	bl	8000828 <fsm_reset>
	fsm_changeState(fsm, &debugState, "Forcing debug state");
 800194c:	4a40      	ldr	r2, [pc, #256]	; (8001a50 <fsm_thread_mainLoop+0x124>)
 800194e:	4941      	ldr	r1, [pc, #260]	; (8001a54 <fsm_thread_mainLoop+0x128>)
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7fe ff1f 	bl	8000794 <fsm_changeState>
	for(;;)
	{
		uint16_t raw;
		if(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001956:	2164      	movs	r1, #100	; 0x64
 8001958:	483f      	ldr	r0, [pc, #252]	; (8001a58 <fsm_thread_mainLoop+0x12c>)
 800195a:	f000 fb7d 	bl	8002058 <HAL_ADC_PollForConversion>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <fsm_thread_mainLoop+0x42>
		{
			CC_LogInfo("Fucked\r\n", sizeof("Fucked\r\n"));
 8001964:	2109      	movs	r1, #9
 8001966:	483d      	ldr	r0, [pc, #244]	; (8001a5c <fsm_thread_mainLoop+0x130>)
 8001968:	f7ff ffcc 	bl	8001904 <CC_LogInfo>
 800196c:	e028      	b.n	80019c0 <fsm_thread_mainLoop+0x94>
		} else {
			raw = HAL_ADC_GetValue(&hadc1);
 800196e:	483a      	ldr	r0, [pc, #232]	; (8001a58 <fsm_thread_mainLoop+0x12c>)
 8001970:	f000 fbf6 	bl	8002160 <HAL_ADC_GetValue>
 8001974:	4603      	mov	r3, r0
 8001976:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			char x[80];
			int len = sprintf(x, "Read ADC Value of: %i\r\n", raw);
 800197a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	4937      	ldr	r1, [pc, #220]	; (8001a60 <fsm_thread_mainLoop+0x134>)
 8001984:	4618      	mov	r0, r3
 8001986:	f007 fb4f 	bl	8009028 <siprintf>
 800198a:	65b8      	str	r0, [r7, #88]	; 0x58
			CC_LogInfo(x, len);
 800198c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffb5 	bl	8001904 <CC_LogInfo>
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 800199a:	e011      	b.n	80019c0 <fsm_thread_mainLoop+0x94>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	331c      	adds	r3, #28
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	2100      	movs	r1, #0
 80019a8:	482e      	ldr	r0, [pc, #184]	; (8001a64 <fsm_thread_mainLoop+0x138>)
 80019aa:	f001 f932 	bl	8002c12 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <fsm_thread_mainLoop+0x13c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	2300      	movs	r3, #0
 80019ba:	2200      	movs	r2, #0
 80019bc:	f004 f860 	bl	8005a80 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80019c0:	2100      	movs	r1, #0
 80019c2:	4828      	ldr	r0, [pc, #160]	; (8001a64 <fsm_thread_mainLoop+0x138>)
 80019c4:	f001 fa37 	bl	8002e36 <HAL_CAN_GetRxFifoFillLevel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1e6      	bne.n	800199c <fsm_thread_mainLoop+0x70>
		}
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 80019ce:	e011      	b.n	80019f4 <fsm_thread_mainLoop+0xc8>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	331c      	adds	r3, #28
 80019d6:	f107 0208 	add.w	r2, r7, #8
 80019da:	2100      	movs	r1, #0
 80019dc:	4823      	ldr	r0, [pc, #140]	; (8001a6c <fsm_thread_mainLoop+0x140>)
 80019de:	f001 f918 	bl	8002c12 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <fsm_thread_mainLoop+0x13c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80019e8:	f107 0108 	add.w	r1, r7, #8
 80019ec:	2300      	movs	r3, #0
 80019ee:	2200      	movs	r2, #0
 80019f0:	f004 f846 	bl	8005a80 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 80019f4:	2100      	movs	r1, #0
 80019f6:	481d      	ldr	r0, [pc, #116]	; (8001a6c <fsm_thread_mainLoop+0x140>)
 80019f8:	f001 fa1d 	bl	8002e36 <HAL_CAN_GetRxFifoFillLevel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1e6      	bne.n	80019d0 <fsm_thread_mainLoop+0xa4>
		}
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8001a02:	e011      	b.n	8001a28 <fsm_thread_mainLoop+0xfc>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 8001a04:	f107 0308 	add.w	r3, r7, #8
 8001a08:	331c      	adds	r3, #28
 8001a0a:	f107 0208 	add.w	r2, r7, #8
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4817      	ldr	r0, [pc, #92]	; (8001a70 <fsm_thread_mainLoop+0x144>)
 8001a12:	f001 f8fe 	bl	8002c12 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <fsm_thread_mainLoop+0x13c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a1c:	f107 0108 	add.w	r1, r7, #8
 8001a20:	2300      	movs	r3, #0
 8001a22:	2200      	movs	r2, #0
 8001a24:	f004 f82c 	bl	8005a80 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4811      	ldr	r0, [pc, #68]	; (8001a70 <fsm_thread_mainLoop+0x144>)
 8001a2c:	f001 fa03 	bl	8002e36 <HAL_CAN_GetRxFifoFillLevel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1e6      	bne.n	8001a04 <fsm_thread_mainLoop+0xd8>
		}

		osDelay(30);
 8001a36:	201e      	movs	r0, #30
 8001a38:	f003 fe12 	bl	8005660 <osDelay>
		fsm_iterate(fsm);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7fe fe85 	bl	800074c <fsm_iterate>
	{
 8001a42:	e788      	b.n	8001956 <fsm_thread_mainLoop+0x2a>
 8001a44:	08009840 	.word	0x08009840
 8001a48:	08001905 	.word	0x08001905
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	08009858 	.word	0x08009858
 8001a54:	20000030 	.word	0x20000030
 8001a58:	200049f4 	.word	0x200049f4
 8001a5c:	0800986c 	.word	0x0800986c
 8001a60:	08009878 	.word	0x08009878
 8001a64:	20004a8c 	.word	0x20004a8c
 8001a68:	200049f0 	.word	0x200049f0
 8001a6c:	20004a64 	.word	0x20004a64
 8001a70:	20004a3c 	.word	0x20004a3c

08001a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a86:	f000 f9c3 	bl	8001e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40001400 	.word	0x40001400

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_MspInit+0x44>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_MspInit+0x44>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_MspInit+0x44>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x44>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x44>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x44>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	2037      	movs	r0, #55	; 0x37
 8001b06:	f001 fa77 	bl	8002ff8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b0a:	2037      	movs	r0, #55	; 0x37
 8001b0c:	f001 fa90 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_InitTick+0x9c>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_InitTick+0x9c>)
 8001b16:	f043 0320 	orr.w	r3, r3, #32
 8001b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_InitTick+0x9c>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b28:	f107 0210 	add.w	r2, r7, #16
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 f90a 	bl	8003d4c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b38:	f002 f8e0 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8001b3c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <HAL_InitTick+0xa0>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0c9b      	lsrs	r3, r3, #18
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <HAL_InitTick+0xa8>)
 8001b50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b58:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001b6c:	4809      	ldr	r0, [pc, #36]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b6e:	f002 fd0d 	bl	800458c <HAL_TIM_Base_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d104      	bne.n	8001b82 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001b78:	4806      	ldr	r0, [pc, #24]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b7a:	f002 fd3d 	bl	80045f8 <HAL_TIM_Base_Start_IT>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3730      	adds	r7, #48	; 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	431bde83 	.word	0x431bde83
 8001b94:	20004ab8 	.word	0x20004ab8
 8001b98:	40001400 	.word	0x40001400

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd0:	b598      	push	{r3, r4, r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	//CC_LogInfo("Buttonpress\r\n", strlen("Buttonpress\r\n"));
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <EXTI15_10_IRQHandler+0x3c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	2120      	movs	r1, #32
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 fe0b 	bl	80057f8 <osSemaphoreAcquire>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10b      	bne.n	8001c00 <EXTI15_10_IRQHandler+0x30>
	{
		CC_GlobalState->rtdTicks = HAL_GetTick();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <EXTI15_10_IRQHandler+0x3c>)
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	f000 f924 	bl	8001e38 <HAL_GetTick>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	6363      	str	r3, [r4, #52]	; 0x34
		osSemaphoreRelease(CC_GlobalState->sem);
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <EXTI15_10_IRQHandler+0x3c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fe62 	bl	80058c4 <osSemaphoreRelease>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c04:	f001 fbfe 	bl	8003404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd98      	pop	{r3, r4, r7, pc}
 8001c0c:	200049f0 	.word	0x200049f0

08001c10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TIM7_IRQHandler+0x10>)
 8001c16:	f002 fd19 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20004ab8 	.word	0x20004ab8

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f007 f8ea 	bl	8008e2c <__errno>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20080000 	.word	0x20080000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	200000dc 	.word	0x200000dc
 8001c8c:	20004bc0 	.word	0x20004bc0

08001c90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <SystemInit+0x28>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <SystemInit+0x28>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SystemInit+0x28>)
 8001ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001caa:	609a      	str	r2, [r3, #8]
#endif
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001cc2:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <MX_USART3_UART_Init+0x5c>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_USART3_UART_Init+0x58>)
 8001d00:	f002 feaa 	bl	8004a58 <HAL_UART_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d0a:	f7ff fec5 	bl	8001a98 <Error_Handler>
  }

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20004af8 	.word	0x20004af8
 8001d18:	40004800 	.word	0x40004800

08001d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_UART_MspInit+0x7c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d128      	bne.n	8001d90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_UART_MspInit+0x80>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_UART_MspInit+0x80>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_UART_MspInit+0x80>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_UART_MspInit+0x80>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_UART_MspInit+0x80>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_UART_MspInit+0x80>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d80:	2307      	movs	r3, #7
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_UART_MspInit+0x84>)
 8001d8c:	f001 f95e 	bl	800304c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40004800 	.word	0x40004800
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020400 	.word	0x40020400

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001da8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001daa:	e003      	b.n	8001db4 <LoopCopyDataInit>

08001dac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001db0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001db2:	3104      	adds	r1, #4

08001db4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001db8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dbc:	d3f6      	bcc.n	8001dac <CopyDataInit>
  ldr  r2, =_sbss
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dc0:	e002      	b.n	8001dc8 <LoopFillZerobss>

08001dc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dc4:	f842 3b04 	str.w	r3, [r2], #4

08001dc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dcc:	d3f9      	bcc.n	8001dc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dce:	f7ff ff5f 	bl	8001c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f007 f831 	bl	8008e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd6:	f7ff fcb3 	bl	8001740 <main>
  bx  lr    
 8001dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ddc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001de0:	0800994c 	.word	0x0800994c
  ldr  r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001de8:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8001dec:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 8001df0:	20004bc0 	.word	0x20004bc0

08001df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC_IRQHandler>

08001df6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	f001 f8f1 	bl	8002fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff fe75 	bl	8001af0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001e06:	f7ff fe4f 	bl	8001aa8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000048 	.word	0x20000048
 8001e34:	20004b78 	.word	0x20004b78

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20004b78 	.word	0x20004b78

08001e50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e031      	b.n	8001eca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff f9ec 	bl	800124c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d116      	bne.n	8001ebc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_ADC_Init+0x84>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	f043 0202 	orr.w	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fab6 	bl	8002410 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eba:	e001      	b.n	8001ec0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	ffffeefd 	.word	0xffffeefd

08001ed8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Start+0x1a>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e0a0      	b.n	8002034 <HAL_ADC_Start+0x15c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d018      	beq.n	8001f3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f18:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_ADC_Start+0x168>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a49      	ldr	r2, [pc, #292]	; (8002044 <HAL_ADC_Start+0x16c>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0c9a      	lsrs	r2, r3, #18
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f9      	bne.n	8001f2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d174      	bne.n	8002032 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_ADC_Start+0x170>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f82:	d106      	bne.n	8001f92 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	f023 0206 	bic.w	r2, r3, #6
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f90:	e002      	b.n	8001f98 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fa8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_ADC_Start+0x174>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d136      	bne.n	8002032 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	e02d      	b.n	8002032 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_ADC_Start+0x178>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d10e      	bne.n	8001ffe <HAL_ADC_Start+0x126>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d107      	bne.n	8001ffe <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ffc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_ADC_Start+0x174>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d113      	bne.n	8002032 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a11      	ldr	r2, [pc, #68]	; (8002054 <HAL_ADC_Start+0x17c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d10e      	bne.n	8002032 <HAL_ADC_Start+0x15a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002030:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	20000040 	.word	0x20000040
 8002044:	431bde83 	.word	0x431bde83
 8002048:	fffff8fe 	.word	0xfffff8fe
 800204c:	40012300 	.word	0x40012300
 8002050:	40012000 	.word	0x40012000
 8002054:	40012200 	.word	0x40012200

08002058 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002074:	d113      	bne.n	800209e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002084:	d10b      	bne.n	800209e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f043 0220 	orr.w	r2, r3, #32
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e05c      	b.n	8002158 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800209e:	f7ff fecb 	bl	8001e38 <HAL_GetTick>
 80020a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020a4:	e01a      	b.n	80020dc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ac:	d016      	beq.n	80020dc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_ADC_PollForConversion+0x6c>
 80020b4:	f7ff fec0 	bl	8001e38 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d20b      	bcs.n	80020dc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f043 0204 	orr.w	r2, r3, #4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e03d      	b.n	8002158 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d1dd      	bne.n	80020a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f06f 0212 	mvn.w	r2, #18
 80020f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d123      	bne.n	8002156 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	d11f      	bne.n	8002156 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800212e:	2b00      	cmp	r3, #0
 8002130:	d111      	bne.n	8002156 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1c>
 8002194:	2302      	movs	r3, #2
 8002196:	e12a      	b.n	80023ee <HAL_ADC_ConfigChannel+0x272>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b09      	cmp	r3, #9
 80021a6:	d93a      	bls.n	800221e <HAL_ADC_ConfigChannel+0xa2>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021b0:	d035      	beq.n	800221e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68d9      	ldr	r1, [r3, #12]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	3b1e      	subs	r3, #30
 80021c8:	2207      	movs	r2, #7
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a87      	ldr	r2, [pc, #540]	; (80023fc <HAL_ADC_ConfigChannel+0x280>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10a      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68d9      	ldr	r1, [r3, #12]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	061a      	lsls	r2, r3, #24
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f6:	e035      	b.n	8002264 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68d9      	ldr	r1, [r3, #12]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	4603      	mov	r3, r0
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4403      	add	r3, r0
 8002210:	3b1e      	subs	r3, #30
 8002212:	409a      	lsls	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221c:	e022      	b.n	8002264 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6919      	ldr	r1, [r3, #16]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	2207      	movs	r2, #7
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43da      	mvns	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	400a      	ands	r2, r1
 8002240:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6919      	ldr	r1, [r3, #16]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	4618      	mov	r0, r3
 8002254:	4603      	mov	r3, r0
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4403      	add	r3, r0
 800225a:	409a      	lsls	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b06      	cmp	r3, #6
 800226a:	d824      	bhi.n	80022b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3b05      	subs	r3, #5
 800227e:	221f      	movs	r2, #31
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b05      	subs	r3, #5
 80022a8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34
 80022b4:	e04c      	b.n	8002350 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d824      	bhi.n	8002308 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b23      	subs	r3, #35	; 0x23
 80022d0:	221f      	movs	r2, #31
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b23      	subs	r3, #35	; 0x23
 80022fa:	fa00 f203 	lsl.w	r2, r0, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
 8002306:	e023      	b.n	8002350 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b41      	subs	r3, #65	; 0x41
 800231a:	221f      	movs	r2, #31
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43da      	mvns	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	400a      	ands	r2, r1
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	4618      	mov	r0, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b41      	subs	r3, #65	; 0x41
 8002344:	fa00 f203 	lsl.w	r2, r0, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_ADC_ConfigChannel+0x284>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10a      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1f4>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002362:	d105      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_ADC_ConfigChannel+0x288>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a26      	ldr	r2, [pc, #152]	; (8002404 <HAL_ADC_ConfigChannel+0x288>)
 800236a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800236e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <HAL_ADC_ConfigChannel+0x284>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d109      	bne.n	800238e <HAL_ADC_ConfigChannel+0x212>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b12      	cmp	r3, #18
 8002380:	d105      	bne.n	800238e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_ADC_ConfigChannel+0x288>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_ADC_ConfigChannel+0x288>)
 8002388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800238c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1b      	ldr	r2, [pc, #108]	; (8002400 <HAL_ADC_ConfigChannel+0x284>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d125      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x268>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a17      	ldr	r2, [pc, #92]	; (80023fc <HAL_ADC_ConfigChannel+0x280>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d003      	beq.n	80023aa <HAL_ADC_ConfigChannel+0x22e>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b11      	cmp	r3, #17
 80023a8:	d11c      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_ADC_ConfigChannel+0x288>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4a15      	ldr	r2, [pc, #84]	; (8002404 <HAL_ADC_ConfigChannel+0x288>)
 80023b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a10      	ldr	r2, [pc, #64]	; (80023fc <HAL_ADC_ConfigChannel+0x280>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d111      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_ADC_ConfigChannel+0x28c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a11      	ldr	r2, [pc, #68]	; (800240c <HAL_ADC_ConfigChannel+0x290>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9a      	lsrs	r2, r3, #18
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023d6:	e002      	b.n	80023de <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3b01      	subs	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f9      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	10000012 	.word	0x10000012
 8002400:	40012000 	.word	0x40012000
 8002404:	40012300 	.word	0x40012300
 8002408:	20000040 	.word	0x20000040
 800240c:	431bde83 	.word	0x431bde83

08002410 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002418:	4b78      	ldr	r3, [pc, #480]	; (80025fc <ADC_Init+0x1ec>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a77      	ldr	r2, [pc, #476]	; (80025fc <ADC_Init+0x1ec>)
 800241e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002422:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002424:	4b75      	ldr	r3, [pc, #468]	; (80025fc <ADC_Init+0x1ec>)
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4973      	ldr	r1, [pc, #460]	; (80025fc <ADC_Init+0x1ec>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	021a      	lsls	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	4a58      	ldr	r2, [pc, #352]	; (8002600 <ADC_Init+0x1f0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d022      	beq.n	80024ea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6899      	ldr	r1, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e00f      	b.n	800250a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002508:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0202 	bic.w	r2, r2, #2
 8002518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	005a      	lsls	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002546:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002556:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	3b01      	subs	r3, #1
 8002564:	035a      	lsls	r2, r3, #13
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	e007      	b.n	8002580 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	3b01      	subs	r3, #1
 800259c:	051a      	lsls	r2, r3, #20
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025c2:	025a      	lsls	r2, r3, #9
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	029a      	lsls	r2, r3, #10
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40012300 	.word	0x40012300
 8002600:	0f000001 	.word	0x0f000001

08002604 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0ed      	b.n	80027f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fef0 	bl	8001408 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0202 	bic.w	r2, r2, #2
 8002636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002638:	f7ff fbfe 	bl	8001e38 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800263e:	e012      	b.n	8002666 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002640:	f7ff fbfa 	bl	8001e38 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b0a      	cmp	r3, #10
 800264c:	d90b      	bls.n	8002666 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2205      	movs	r2, #5
 800265e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0c5      	b.n	80027f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e5      	bne.n	8002640 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002684:	f7ff fbd8 	bl	8001e38 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800268a:	e012      	b.n	80026b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800268c:	f7ff fbd4 	bl	8001e38 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b0a      	cmp	r3, #10
 8002698:	d90b      	bls.n	80026b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2205      	movs	r2, #5
 80026aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e09f      	b.n	80027f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0e5      	beq.n	800268c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e1b      	ldrb	r3, [r3, #24]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d108      	bne.n	80026da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	e007      	b.n	80026ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7e5b      	ldrb	r3, [r3, #25]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d108      	bne.n	8002704 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e007      	b.n	8002714 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7e9b      	ldrb	r3, [r3, #26]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d108      	bne.n	800272e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0220 	orr.w	r2, r2, #32
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e007      	b.n	800273e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0220 	bic.w	r2, r2, #32
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7edb      	ldrb	r3, [r3, #27]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d108      	bne.n	8002758 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0210 	bic.w	r2, r2, #16
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e007      	b.n	8002768 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0210 	orr.w	r2, r2, #16
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7f1b      	ldrb	r3, [r3, #28]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d108      	bne.n	8002782 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0208 	orr.w	r2, r2, #8
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e007      	b.n	8002792 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0208 	bic.w	r2, r2, #8
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7f5b      	ldrb	r3, [r3, #29]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d108      	bne.n	80027ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0204 	orr.w	r2, r2, #4
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e007      	b.n	80027bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0204 	bic.w	r2, r2, #4
 80027ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	ea42 0103 	orr.w	r1, r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002812:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d003      	beq.n	8002822 <HAL_CAN_ConfigFilter+0x26>
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	2b02      	cmp	r3, #2
 800281e:	f040 80c7 	bne.w	80029b0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a69      	ldr	r2, [pc, #420]	; (80029cc <HAL_CAN_ConfigFilter+0x1d0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d001      	beq.n	8002830 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <HAL_CAN_ConfigFilter+0x1d4>)
 800282e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_CAN_ConfigFilter+0x1d4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d111      	bne.n	800286c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800284e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	2201      	movs	r2, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d123      	bne.n	80028de <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3248      	adds	r2, #72	; 0x48
 80028be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028d4:	6979      	ldr	r1, [r7, #20]
 80028d6:	3348      	adds	r3, #72	; 0x48
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d122      	bne.n	800292c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002906:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3248      	adds	r2, #72	; 0x48
 800290c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002920:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002922:	6979      	ldr	r1, [r7, #20]
 8002924:	3348      	adds	r3, #72	; 0x48
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	43db      	mvns	r3, r3
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002946:	e007      	b.n	8002958 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	431a      	orrs	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43db      	mvns	r3, r3
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002972:	e007      	b.n	8002984 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	431a      	orrs	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029a2:	f023 0201 	bic.w	r2, r3, #1
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e006      	b.n	80029be <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40003400 	.word	0x40003400
 80029d0:	40006400 	.word	0x40006400

080029d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d12e      	bne.n	8002a46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a00:	f7ff fa1a 	bl	8001e38 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a06:	e012      	b.n	8002a2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a08:	f7ff fa16 	bl	8001e38 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b0a      	cmp	r3, #10
 8002a14:	d90b      	bls.n	8002a2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2205      	movs	r2, #5
 8002a26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e012      	b.n	8002a54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e5      	bne.n	8002a08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e006      	b.n	8002a54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a7a:	7ffb      	ldrb	r3, [r7, #31]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d003      	beq.n	8002a88 <HAL_CAN_AddTxMessage+0x2c>
 8002a80:	7ffb      	ldrb	r3, [r7, #31]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	f040 80b8 	bne.w	8002bf8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80a0 	beq.w	8002be8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	0e1b      	lsrs	r3, r3, #24
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d907      	bls.n	8002ac8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e09e      	b.n	8002c06 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	409a      	lsls	r2, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	6809      	ldr	r1, [r1, #0]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	3318      	adds	r3, #24
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	440b      	add	r3, r1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e00f      	b.n	8002b16 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b00:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b0a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3318      	adds	r3, #24
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	440b      	add	r3, r1
 8002b14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3318      	adds	r3, #24
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	440b      	add	r3, r1
 8002b26:	3304      	adds	r3, #4
 8002b28:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	7d1b      	ldrb	r3, [r3, #20]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d111      	bne.n	8002b56 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3318      	adds	r3, #24
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3304      	adds	r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	6811      	ldr	r1, [r2, #0]
 8002b46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3318      	adds	r3, #24
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	440b      	add	r3, r1
 8002b52:	3304      	adds	r3, #4
 8002b54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3307      	adds	r3, #7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	061a      	lsls	r2, r3, #24
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3306      	adds	r3, #6
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3305      	adds	r3, #5
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	4313      	orrs	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	3204      	adds	r2, #4
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	4610      	mov	r0, r2
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6811      	ldr	r1, [r2, #0]
 8002b7e:	ea43 0200 	orr.w	r2, r3, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	440b      	add	r3, r1
 8002b88:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3303      	adds	r3, #3
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	061a      	lsls	r2, r3, #24
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3302      	adds	r3, #2
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	7812      	ldrb	r2, [r2, #0]
 8002bae:	4610      	mov	r0, r2
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6811      	ldr	r1, [r2, #0]
 8002bb4:	ea43 0200 	orr.w	r2, r3, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002bc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3318      	adds	r3, #24
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	4413      	add	r3, r2
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	6811      	ldr	r1, [r2, #0]
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3318      	adds	r3, #24
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	440b      	add	r3, r1
 8002be2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e00e      	b.n	8002c06 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e006      	b.n	8002c06 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c12:	b480      	push	{r7}
 8002c14:	b087      	sub	sp, #28
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c26:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d003      	beq.n	8002c36 <HAL_CAN_GetRxMessage+0x24>
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	f040 80f3 	bne.w	8002e1c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10e      	bne.n	8002c5a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0e7      	b.n	8002e2a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0d8      	b.n	8002e2a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	331b      	adds	r3, #27
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4413      	add	r3, r2
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0204 	and.w	r2, r3, #4
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	331b      	adds	r3, #27
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0d5b      	lsrs	r3, r3, #21
 8002ca6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	331b      	adds	r3, #27
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4413      	add	r3, r2
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	331b      	adds	r3, #27
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	4413      	add	r3, r2
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0202 	and.w	r2, r3, #2
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	331b      	adds	r3, #27
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	4413      	add	r3, r2
 8002cea:	3304      	adds	r3, #4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 020f 	and.w	r2, r3, #15
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	331b      	adds	r3, #27
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	331b      	adds	r3, #27
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	4413      	add	r3, r2
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0a1a      	lsrs	r2, r3, #8
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0c1a      	lsrs	r2, r3, #16
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e1a      	lsrs	r2, r3, #24
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	3303      	adds	r3, #3
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0a1a      	lsrs	r2, r3, #8
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	3305      	adds	r3, #5
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0c1a      	lsrs	r2, r3, #16
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	3306      	adds	r3, #6
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0e1a      	lsrs	r2, r3, #24
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	3307      	adds	r3, #7
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d108      	bne.n	8002e08 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0220 	orr.w	r2, r2, #32
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	e007      	b.n	8002e18 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0220 	orr.w	r2, r2, #32
 8002e16:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e006      	b.n	8002e2a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e4a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e4c:	7afb      	ldrb	r3, [r7, #11]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d002      	beq.n	8002e58 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d10f      	bne.n	8002e78 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	e005      	b.n	8002e78 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002e78:	68fb      	ldr	r3, [r7, #12]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00
 8002ecc:	05fa0000 	.word	0x05fa0000

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	; (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	; (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ff4c 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800300a:	f7ff ff61 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 800300e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	6978      	ldr	r0, [r7, #20]
 8003016:	f7ff ffb1 	bl	8002f7c <NVIC_EncodePriority>
 800301a:	4602      	mov	r2, r0
 800301c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff80 	bl	8002f28 <__NVIC_SetPriority>
}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ff54 	bl	8002eec <__NVIC_EnableIRQ>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	e175      	b.n	8003358 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800306c:	2201      	movs	r2, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	429a      	cmp	r2, r3
 8003086:	f040 8164 	bne.w	8003352 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d00b      	beq.n	80030aa <HAL_GPIO_Init+0x5e>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d007      	beq.n	80030aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800309e:	2b11      	cmp	r3, #17
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b12      	cmp	r3, #18
 80030a8:	d130      	bne.n	800310c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e0:	2201      	movs	r2, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 0201 	and.w	r2, r3, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x100>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b12      	cmp	r3, #18
 800314a:	d123      	bne.n	8003194 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	08da      	lsrs	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3208      	adds	r2, #8
 8003154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	220f      	movs	r2, #15
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	08da      	lsrs	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3208      	adds	r2, #8
 800318e:	69b9      	ldr	r1, [r7, #24]
 8003190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0203 	and.w	r2, r3, #3
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80be 	beq.w	8003352 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d6:	4b65      	ldr	r3, [pc, #404]	; (800336c <HAL_GPIO_Init+0x320>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a64      	ldr	r2, [pc, #400]	; (800336c <HAL_GPIO_Init+0x320>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b62      	ldr	r3, [pc, #392]	; (800336c <HAL_GPIO_Init+0x320>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031ee:	4a60      	ldr	r2, [pc, #384]	; (8003370 <HAL_GPIO_Init+0x324>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a57      	ldr	r2, [pc, #348]	; (8003374 <HAL_GPIO_Init+0x328>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d037      	beq.n	800328a <HAL_GPIO_Init+0x23e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a56      	ldr	r2, [pc, #344]	; (8003378 <HAL_GPIO_Init+0x32c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d031      	beq.n	8003286 <HAL_GPIO_Init+0x23a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a55      	ldr	r2, [pc, #340]	; (800337c <HAL_GPIO_Init+0x330>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d02b      	beq.n	8003282 <HAL_GPIO_Init+0x236>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a54      	ldr	r2, [pc, #336]	; (8003380 <HAL_GPIO_Init+0x334>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d025      	beq.n	800327e <HAL_GPIO_Init+0x232>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a53      	ldr	r2, [pc, #332]	; (8003384 <HAL_GPIO_Init+0x338>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01f      	beq.n	800327a <HAL_GPIO_Init+0x22e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_GPIO_Init+0x33c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d019      	beq.n	8003276 <HAL_GPIO_Init+0x22a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a51      	ldr	r2, [pc, #324]	; (800338c <HAL_GPIO_Init+0x340>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_GPIO_Init+0x226>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a50      	ldr	r2, [pc, #320]	; (8003390 <HAL_GPIO_Init+0x344>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00d      	beq.n	800326e <HAL_GPIO_Init+0x222>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4f      	ldr	r2, [pc, #316]	; (8003394 <HAL_GPIO_Init+0x348>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <HAL_GPIO_Init+0x21e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4e      	ldr	r2, [pc, #312]	; (8003398 <HAL_GPIO_Init+0x34c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_GPIO_Init+0x21a>
 8003262:	2309      	movs	r3, #9
 8003264:	e012      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003266:	230a      	movs	r3, #10
 8003268:	e010      	b.n	800328c <HAL_GPIO_Init+0x240>
 800326a:	2308      	movs	r3, #8
 800326c:	e00e      	b.n	800328c <HAL_GPIO_Init+0x240>
 800326e:	2307      	movs	r3, #7
 8003270:	e00c      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003272:	2306      	movs	r3, #6
 8003274:	e00a      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003276:	2305      	movs	r3, #5
 8003278:	e008      	b.n	800328c <HAL_GPIO_Init+0x240>
 800327a:	2304      	movs	r3, #4
 800327c:	e006      	b.n	800328c <HAL_GPIO_Init+0x240>
 800327e:	2303      	movs	r3, #3
 8003280:	e004      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003282:	2302      	movs	r3, #2
 8003284:	e002      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_GPIO_Init+0x240>
 800328a:	2300      	movs	r3, #0
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	f002 0203 	and.w	r2, r2, #3
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	4093      	lsls	r3, r2
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800329c:	4934      	ldr	r1, [pc, #208]	; (8003370 <HAL_GPIO_Init+0x324>)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <HAL_GPIO_Init+0x350>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032ce:	4a33      	ldr	r2, [pc, #204]	; (800339c <HAL_GPIO_Init+0x350>)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032d4:	4b31      	ldr	r3, [pc, #196]	; (800339c <HAL_GPIO_Init+0x350>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032f8:	4a28      	ldr	r2, [pc, #160]	; (800339c <HAL_GPIO_Init+0x350>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fe:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_GPIO_Init+0x350>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003322:	4a1e      	ldr	r2, [pc, #120]	; (800339c <HAL_GPIO_Init+0x350>)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_GPIO_Init+0x350>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <HAL_GPIO_Init+0x350>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3301      	adds	r3, #1
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b0f      	cmp	r3, #15
 800335c:	f67f ae86 	bls.w	800306c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003360:	bf00      	nop
 8003362:	3724      	adds	r7, #36	; 0x24
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40023800 	.word	0x40023800
 8003370:	40013800 	.word	0x40013800
 8003374:	40020000 	.word	0x40020000
 8003378:	40020400 	.word	0x40020400
 800337c:	40020800 	.word	0x40020800
 8003380:	40020c00 	.word	0x40020c00
 8003384:	40021000 	.word	0x40021000
 8003388:	40021400 	.word	0x40021400
 800338c:	40021800 	.word	0x40021800
 8003390:	40021c00 	.word	0x40021c00
 8003394:	40022000 	.word	0x40022000
 8003398:	40022400 	.word	0x40022400
 800339c:	40013c00 	.word	0x40013c00

080033a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	887b      	ldrh	r3, [r7, #2]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	e001      	b.n	80033c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
 80033dc:	4613      	mov	r3, r2
 80033de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e0:	787b      	ldrb	r3, [r7, #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033ec:	e003      	b.n	80033f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033ee:	887b      	ldrh	r3, [r7, #2]
 80033f0:	041a      	lsls	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	619a      	str	r2, [r3, #24]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800341a:	4a05      	ldr	r2, [pc, #20]	; (8003430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f806 	bl	8003434 <HAL_GPIO_EXTI_Callback>
  }
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40013c00 	.word	0x40013c00

08003434 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e29b      	b.n	800399a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8087 	beq.w	800357e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003470:	4b96      	ldr	r3, [pc, #600]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b04      	cmp	r3, #4
 800347a:	d00c      	beq.n	8003496 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347c:	4b93      	ldr	r3, [pc, #588]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d112      	bne.n	80034ae <HAL_RCC_OscConfig+0x62>
 8003488:	4b90      	ldr	r3, [pc, #576]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003494:	d10b      	bne.n	80034ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003496:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d06c      	beq.n	800357c <HAL_RCC_OscConfig+0x130>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d168      	bne.n	800357c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e275      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x7a>
 80034b8:	4b84      	ldr	r3, [pc, #528]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a83      	ldr	r2, [pc, #524]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e02e      	b.n	8003524 <HAL_RCC_OscConfig+0xd8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x9c>
 80034ce:	4b7f      	ldr	r3, [pc, #508]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7e      	ldr	r2, [pc, #504]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b7c      	ldr	r3, [pc, #496]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7b      	ldr	r2, [pc, #492]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e01d      	b.n	8003524 <HAL_RCC_OscConfig+0xd8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0xc0>
 80034f2:	4b76      	ldr	r3, [pc, #472]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a75      	ldr	r2, [pc, #468]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b73      	ldr	r3, [pc, #460]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a72      	ldr	r2, [pc, #456]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xd8>
 800350c:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6b      	ldr	r2, [pc, #428]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fc84 	bl	8001e38 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe fc80 	bl	8001e38 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e229      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0xe8>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fc70 	bl	8001e38 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fc6c 	bl	8001e38 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e215      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	4b57      	ldr	r3, [pc, #348]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x110>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d069      	beq.n	800365e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800358a:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b4d      	ldr	r3, [pc, #308]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11c      	bne.n	80035dc <HAL_RCC_OscConfig+0x190>
 80035a2:	4b4a      	ldr	r3, [pc, #296]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1e9      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b41      	ldr	r3, [pc, #260]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	493d      	ldr	r1, [pc, #244]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e040      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d023      	beq.n	800362c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a38      	ldr	r2, [pc, #224]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fc22 	bl	8001e38 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f8:	f7fe fc1e 	bl	8001e38 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1c7      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360a:	4b30      	ldr	r3, [pc, #192]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4929      	ldr	r1, [pc, #164]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
 800362a:	e018      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362c:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a26      	ldr	r2, [pc, #152]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fbfe 	bl	8001e38 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003640:	f7fe fbfa 	bl	8001e38 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1a3      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d038      	beq.n	80036dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d019      	beq.n	80036a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe fbdb 	bl	8001e38 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003686:	f7fe fbd7 	bl	8001e38 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e180      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x23a>
 80036a4:	e01a      	b.n	80036dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fe fbc1 	bl	8001e38 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ba:	f7fe fbbd 	bl	8001e38 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d903      	bls.n	80036d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e166      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
 80036cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	4b92      	ldr	r3, [pc, #584]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ee      	bne.n	80036ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a4 	beq.w	8003832 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ea:	4b8c      	ldr	r3, [pc, #560]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10d      	bne.n	8003712 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	4b89      	ldr	r3, [pc, #548]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a88      	ldr	r2, [pc, #544]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80036fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b86      	ldr	r3, [pc, #536]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003712:	4b83      	ldr	r3, [pc, #524]	; (8003920 <HAL_RCC_OscConfig+0x4d4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d118      	bne.n	8003750 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800371e:	4b80      	ldr	r3, [pc, #512]	; (8003920 <HAL_RCC_OscConfig+0x4d4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7f      	ldr	r2, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x4d4>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372a:	f7fe fb85 	bl	8001e38 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003732:	f7fe fb81 	bl	8001e38 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b64      	cmp	r3, #100	; 0x64
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e12a      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003744:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x4d4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d106      	bne.n	8003766 <HAL_RCC_OscConfig+0x31a>
 8003758:	4b70      	ldr	r3, [pc, #448]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4a6f      	ldr	r2, [pc, #444]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
 8003764:	e02d      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x33c>
 800376e:	4b6b      	ldr	r3, [pc, #428]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a6a      	ldr	r2, [pc, #424]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
 800377a:	4b68      	ldr	r3, [pc, #416]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	4a67      	ldr	r2, [pc, #412]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	6713      	str	r3, [r2, #112]	; 0x70
 8003786:	e01c      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b05      	cmp	r3, #5
 800378e:	d10c      	bne.n	80037aa <HAL_RCC_OscConfig+0x35e>
 8003790:	4b62      	ldr	r3, [pc, #392]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4a61      	ldr	r2, [pc, #388]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	6713      	str	r3, [r2, #112]	; 0x70
 800379c:	4b5f      	ldr	r3, [pc, #380]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a5e      	ldr	r2, [pc, #376]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	e00b      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
 80037aa:	4b5c      	ldr	r3, [pc, #368]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a5b      	ldr	r2, [pc, #364]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
 80037b6:	4b59      	ldr	r3, [pc, #356]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a58      	ldr	r2, [pc, #352]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d015      	beq.n	80037f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fe fb35 	bl	8001e38 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fe fb31 	bl	8001e38 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0d8      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	4b4c      	ldr	r3, [pc, #304]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ee      	beq.n	80037d2 <HAL_RCC_OscConfig+0x386>
 80037f4:	e014      	b.n	8003820 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe fb1f 	bl	8001e38 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fe fb1b 	bl	8001e38 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0c2      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	4b41      	ldr	r3, [pc, #260]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1ee      	bne.n	80037fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4a3c      	ldr	r2, [pc, #240]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800382c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003830:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80ae 	beq.w	8003998 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800383c:	4b37      	ldr	r3, [pc, #220]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d06d      	beq.n	8003924 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d14b      	bne.n	80038e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003850:	4b32      	ldr	r3, [pc, #200]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a31      	ldr	r2, [pc, #196]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe faec 	bl	8001e38 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe fae8 	bl	8001e38 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e091      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	4b29      	ldr	r3, [pc, #164]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	3b01      	subs	r3, #1
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	071b      	lsls	r3, r3, #28
 80038ae:	491b      	ldr	r1, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fe faba 	bl	8001e38 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fe fab6 	bl	8001e38 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e05f      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x47c>
 80038e6:	e057      	b.n	8003998 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0b      	ldr	r2, [pc, #44]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fe faa0 	bl	8001e38 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fe fa9c 	bl	8001e38 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e045      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	4b03      	ldr	r3, [pc, #12]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x4b0>
 800391a:	e03d      	b.n	8003998 <HAL_RCC_OscConfig+0x54c>
 800391c:	40023800 	.word	0x40023800
 8003920:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003924:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <HAL_RCC_OscConfig+0x558>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d030      	beq.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d129      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d122      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800395a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800395c:	4293      	cmp	r3, r2
 800395e:	d119      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	3b01      	subs	r3, #1
 800396e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d10f      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800

080039a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0d0      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d910      	bls.n	80039f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 020f 	bic.w	r2, r3, #15
 80039d6:	4965      	ldr	r1, [pc, #404]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b63      	ldr	r3, [pc, #396]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0b8      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a08:	4b59      	ldr	r3, [pc, #356]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a58      	ldr	r2, [pc, #352]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a52      	ldr	r2, [pc, #328]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	494d      	ldr	r1, [pc, #308]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d040      	beq.n	8003acc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d115      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e07f      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e073      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06b      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4936      	ldr	r1, [pc, #216]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fe f9cc 	bl	8001e38 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fe f9c8 	bl	8001e38 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e053      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003acc:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d210      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 020f 	bic.w	r2, r3, #15
 8003ae2:	4922      	ldr	r1, [pc, #136]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e032      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b08:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4916      	ldr	r1, [pc, #88]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	490e      	ldr	r1, [pc, #56]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b3a:	f000 f821 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b3e:	4601      	mov	r1, r0
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <HAL_RCC_ClockConfig+0x1cc>)
 8003b4c:	5cd3      	ldrb	r3, [r2, r3]
 8003b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b52:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1d0>)
 8003b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1d4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd ffc8 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023c00 	.word	0x40023c00
 8003b70:	40023800 	.word	0x40023800
 8003b74:	080098f0 	.word	0x080098f0
 8003b78:	20000040 	.word	0x20000040
 8003b7c:	20000044 	.word	0x20000044

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b96:	4b50      	ldr	r3, [pc, #320]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d007      	beq.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x32>
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x38>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 808d 	bne.w	8003cc6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003bae:	60bb      	str	r3, [r7, #8]
      break;
 8003bb0:	e08c      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb2:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bb4:	60bb      	str	r3, [r7, #8]
      break;
 8003bb6:	e089      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb8:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bc2:	4b45      	ldr	r3, [pc, #276]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d023      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bce:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	f04f 0400 	mov.w	r4, #0
 8003bd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	ea03 0501 	and.w	r5, r3, r1
 8003be4:	ea04 0602 	and.w	r6, r4, r2
 8003be8:	4a3d      	ldr	r2, [pc, #244]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bea:	fb02 f106 	mul.w	r1, r2, r6
 8003bee:	2200      	movs	r2, #0
 8003bf0:	fb02 f205 	mul.w	r2, r2, r5
 8003bf4:	440a      	add	r2, r1
 8003bf6:	493a      	ldr	r1, [pc, #232]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bf8:	fba5 0101 	umull	r0, r1, r5, r1
 8003bfc:	1853      	adds	r3, r2, r1
 8003bfe:	4619      	mov	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f04f 0400 	mov.w	r4, #0
 8003c06:	461a      	mov	r2, r3
 8003c08:	4623      	mov	r3, r4
 8003c0a:	f7fc fb69 	bl	80002e0 <__aeabi_uldivmod>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	460c      	mov	r4, r1
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e049      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	099b      	lsrs	r3, r3, #6
 8003c1c:	f04f 0400 	mov.w	r4, #0
 8003c20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	ea03 0501 	and.w	r5, r3, r1
 8003c2c:	ea04 0602 	and.w	r6, r4, r2
 8003c30:	4629      	mov	r1, r5
 8003c32:	4632      	mov	r2, r6
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	f04f 0400 	mov.w	r4, #0
 8003c3c:	0154      	lsls	r4, r2, #5
 8003c3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c42:	014b      	lsls	r3, r1, #5
 8003c44:	4619      	mov	r1, r3
 8003c46:	4622      	mov	r2, r4
 8003c48:	1b49      	subs	r1, r1, r5
 8003c4a:	eb62 0206 	sbc.w	r2, r2, r6
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	f04f 0400 	mov.w	r4, #0
 8003c56:	0194      	lsls	r4, r2, #6
 8003c58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c5c:	018b      	lsls	r3, r1, #6
 8003c5e:	1a5b      	subs	r3, r3, r1
 8003c60:	eb64 0402 	sbc.w	r4, r4, r2
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	00e2      	lsls	r2, r4, #3
 8003c6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c72:	00d9      	lsls	r1, r3, #3
 8003c74:	460b      	mov	r3, r1
 8003c76:	4614      	mov	r4, r2
 8003c78:	195b      	adds	r3, r3, r5
 8003c7a:	eb44 0406 	adc.w	r4, r4, r6
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	02a2      	lsls	r2, r4, #10
 8003c88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c8c:	0299      	lsls	r1, r3, #10
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4614      	mov	r4, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	4621      	mov	r1, r4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	f7fc fb1e 	bl	80002e0 <__aeabi_uldivmod>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	60bb      	str	r3, [r7, #8]
      break;
 8003cc4:	e002      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003cc8:	60bb      	str	r3, [r7, #8]
      break;
 8003cca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	00f42400 	.word	0x00f42400
 8003ce0:	017d7840 	.word	0x017d7840

08003ce4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000040 	.word	0x20000040

08003cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d00:	f7ff fff0 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d04:	4601      	mov	r1, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0a9b      	lsrs	r3, r3, #10
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4a03      	ldr	r2, [pc, #12]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d12:	5cd3      	ldrb	r3, [r2, r3]
 8003d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	08009900 	.word	0x08009900

08003d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d28:	f7ff ffdc 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d2c:	4601      	mov	r1, r0
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0b5b      	lsrs	r3, r3, #13
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4a03      	ldr	r2, [pc, #12]	; (8003d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3a:	5cd3      	ldrb	r3, [r2, r3]
 8003d3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08009900 	.word	0x08009900

08003d4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	220f      	movs	r2, #15
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0203 	and.w	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d68:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <HAL_RCC_GetClockConfig+0x60>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 020f 	and.w	r2, r3, #15
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40023c00 	.word	0x40023c00

08003db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d012      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dd8:	4b69      	ldr	r3, [pc, #420]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a68      	ldr	r2, [pc, #416]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003de2:	6093      	str	r3, [r2, #8]
 8003de4:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	4964      	ldr	r1, [pc, #400]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d017      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e0a:	4b5d      	ldr	r3, [pc, #372]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	4959      	ldr	r1, [pc, #356]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e28:	d101      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e46:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	494a      	ldr	r1, [pc, #296]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e64:	d101      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e82:	2301      	movs	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 808b 	beq.w	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e94:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	4a39      	ldr	r2, [pc, #228]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea0:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a34      	ldr	r2, [pc, #208]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb8:	f7fd ffbe 	bl	8001e38 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec0:	f7fd ffba 	bl	8001e38 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e356      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ed2:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d035      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d02e      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003efc:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f12:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f1e:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d114      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd ff82 	bl	8001e38 <HAL_GetTick>
 8003f34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fd ff7e 	bl	8001e38 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e318      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0ee      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f66:	d111      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f76:	400b      	ands	r3, r1
 8003f78:	4901      	ldr	r1, [pc, #4]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000
 8003f88:	0ffffcff 	.word	0x0ffffcff
 8003f8c:	4bb1      	ldr	r3, [pc, #708]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4ab0      	ldr	r2, [pc, #704]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f96:	6093      	str	r3, [r2, #8]
 8003f98:	4bae      	ldr	r3, [pc, #696]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	49ab      	ldr	r1, [pc, #684]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d010      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fb6:	4ba7      	ldr	r3, [pc, #668]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fbc:	4aa5      	ldr	r2, [pc, #660]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fc6:	4ba3      	ldr	r3, [pc, #652]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	49a0      	ldr	r1, [pc, #640]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe4:	4b9b      	ldr	r3, [pc, #620]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff2:	4998      	ldr	r1, [pc, #608]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004006:	4b93      	ldr	r3, [pc, #588]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004014:	498f      	ldr	r1, [pc, #572]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004028:	4b8a      	ldr	r3, [pc, #552]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004036:	4987      	ldr	r1, [pc, #540]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800404a:	4b82      	ldr	r3, [pc, #520]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	497e      	ldr	r1, [pc, #504]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800406c:	4b79      	ldr	r3, [pc, #484]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f023 0203 	bic.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	4976      	ldr	r1, [pc, #472]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800408e:	4b71      	ldr	r3, [pc, #452]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f023 020c 	bic.w	r2, r3, #12
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409c:	496d      	ldr	r1, [pc, #436]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040b0:	4b68      	ldr	r3, [pc, #416]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	4965      	ldr	r1, [pc, #404]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040d2:	4b60      	ldr	r3, [pc, #384]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e0:	495c      	ldr	r1, [pc, #368]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040f4:	4b57      	ldr	r3, [pc, #348]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	4954      	ldr	r1, [pc, #336]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004116:	4b4f      	ldr	r3, [pc, #316]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	494b      	ldr	r1, [pc, #300]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004138:	4b46      	ldr	r3, [pc, #280]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004146:	4943      	ldr	r1, [pc, #268]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800415a:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004168:	493a      	ldr	r1, [pc, #232]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800417c:	4b35      	ldr	r3, [pc, #212]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418a:	4932      	ldr	r1, [pc, #200]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d011      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800419e:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ac:	4929      	ldr	r1, [pc, #164]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041bc:	d101      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041dc:	491d      	ldr	r1, [pc, #116]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041f0:	4b18      	ldr	r3, [pc, #96]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004200:	4914      	ldr	r1, [pc, #80]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004224:	490b      	ldr	r1, [pc, #44]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00f      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800423a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800423e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	4902      	ldr	r1, [pc, #8]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8004250:	e002      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004264:	4b80      	ldr	r3, [pc, #512]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004274:	497c      	ldr	r1, [pc, #496]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d005      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428a:	f040 80d6 	bne.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800428e:	4b76      	ldr	r3, [pc, #472]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a75      	ldr	r2, [pc, #468]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004294:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429a:	f7fd fdcd 	bl	8001e38 <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042a2:	f7fd fdc9 	bl	8001e38 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b64      	cmp	r3, #100	; 0x64
 80042ae:	d901      	bls.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e165      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b4:	4b6c      	ldr	r3, [pc, #432]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f0      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d021      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11d      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042d4:	4b64      	ldr	r3, [pc, #400]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80042d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042e2:	4b61      	ldr	r3, [pc, #388]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80042e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e8:	0e1b      	lsrs	r3, r3, #24
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	019a      	lsls	r2, r3, #6
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	431a      	orrs	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	061b      	lsls	r3, r3, #24
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	071b      	lsls	r3, r3, #28
 8004308:	4957      	ldr	r1, [pc, #348]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x576>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02e      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433a:	d129      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800433c:	4b4a      	ldr	r3, [pc, #296]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800434a:	4b47      	ldr	r3, [pc, #284]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800434c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004350:	0f1b      	lsrs	r3, r3, #28
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	019a      	lsls	r2, r3, #6
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	431a      	orrs	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	071b      	lsls	r3, r3, #28
 8004370:	493d      	ldr	r1, [pc, #244]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004378:	4b3b      	ldr	r3, [pc, #236]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800437a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437e:	f023 021f 	bic.w	r2, r3, #31
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	3b01      	subs	r3, #1
 8004388:	4937      	ldr	r1, [pc, #220]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01d      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800439c:	4b32      	ldr	r3, [pc, #200]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800439e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a2:	0e1b      	lsrs	r3, r3, #24
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043aa:	4b2f      	ldr	r3, [pc, #188]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80043ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b0:	0f1b      	lsrs	r3, r3, #28
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	019a      	lsls	r2, r3, #6
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	431a      	orrs	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	061b      	lsls	r3, r3, #24
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	071b      	lsls	r3, r3, #28
 80043d0:	4925      	ldr	r1, [pc, #148]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d011      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	019a      	lsls	r2, r3, #6
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	061b      	lsls	r3, r3, #24
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	071b      	lsls	r3, r3, #28
 8004400:	4919      	ldr	r1, [pc, #100]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004408:	4b17      	ldr	r3, [pc, #92]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800440e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004414:	f7fd fd10 	bl	8001e38 <HAL_GetTick>
 8004418:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800441c:	f7fd fd0c 	bl	8001e38 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e0a8      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800442e:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 809e 	bne.w	800457e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444e:	f7fd fcf3 	bl	8001e38 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004454:	e00a      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004456:	f7fd fcef 	bl	8001e38 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b64      	cmp	r3, #100	; 0x64
 8004462:	d903      	bls.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e08b      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8004468:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800446c:	4b46      	ldr	r3, [pc, #280]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004478:	d0ed      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004496:	2b00      	cmp	r3, #0
 8004498:	d02e      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d12a      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044a2:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044b0:	4b35      	ldr	r3, [pc, #212]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	0f1b      	lsrs	r3, r3, #28
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	019a      	lsls	r2, r3, #6
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	061b      	lsls	r3, r3, #24
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	071b      	lsls	r3, r3, #28
 80044d6:	492c      	ldr	r1, [pc, #176]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	4925      	ldr	r1, [pc, #148]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d022      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800450c:	d11d      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	0e1b      	lsrs	r3, r3, #24
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	0f1b      	lsrs	r3, r3, #28
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	019a      	lsls	r2, r3, #6
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	431a      	orrs	r2, r3
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	061b      	lsls	r3, r3, #24
 800453c:	431a      	orrs	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	071b      	lsls	r3, r3, #28
 8004542:	4911      	ldr	r1, [pc, #68]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a0e      	ldr	r2, [pc, #56]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004556:	f7fd fc6f 	bl	8001e38 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800455e:	f7fd fc6b 	bl	8001e38 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	; 0x64
 800456a:	d901      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e007      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457c:	d1ef      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40023800 	.word	0x40023800

0800458c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e01d      	b.n	80045da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f815 	bl	80045e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f000 f986 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_TIM_Base_Start_IT+0x50>)
 8004618:	4013      	ands	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b06      	cmp	r3, #6
 8004620:	d00b      	beq.n	800463a <HAL_TIM_Base_Start_IT+0x42>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d007      	beq.n	800463a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0201 	orr.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	00010007 	.word	0x00010007

0800464c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d122      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d11b      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0202 	mvn.w	r2, #2
 8004678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f905 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 8004694:	e005      	b.n	80046a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8f7 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f908 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d122      	bne.n	80046fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d11b      	bne.n	80046fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0204 	mvn.w	r2, #4
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f8db 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8cd 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8de 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b08      	cmp	r3, #8
 8004708:	d122      	bne.n	8004750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b08      	cmp	r3, #8
 8004716:	d11b      	bne.n	8004750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0208 	mvn.w	r2, #8
 8004720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2204      	movs	r2, #4
 8004726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8b1 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 800473c:	e005      	b.n	800474a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8a3 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8b4 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b10      	cmp	r3, #16
 800475c:	d122      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b10      	cmp	r3, #16
 800476a:	d11b      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0210 	mvn.w	r2, #16
 8004774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2208      	movs	r2, #8
 800477a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f887 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f879 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f88a 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10e      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0201 	mvn.w	r2, #1
 80047c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fd f952 	bl	8001a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	2b80      	cmp	r3, #128	; 0x80
 80047dc:	d10e      	bne.n	80047fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b80      	cmp	r3, #128	; 0x80
 80047ea:	d107      	bne.n	80047fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f91a 	bl	8004a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480a:	d10e      	bne.n	800482a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d107      	bne.n	800482a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f90d 	bl	8004a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d10e      	bne.n	8004856 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d107      	bne.n	8004856 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800484e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f838 	bl	80048c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b20      	cmp	r3, #32
 8004862:	d10e      	bne.n	8004882 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b20      	cmp	r3, #32
 8004870:	d107      	bne.n	8004882 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f06f 0220 	mvn.w	r2, #32
 800487a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8cd 	bl	8004a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a40      	ldr	r2, [pc, #256]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d013      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d00f      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00b      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3a      	ldr	r2, [pc, #232]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d02b      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d027      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d023      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01f      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01b      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d017      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a28      	ldr	r2, [pc, #160]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a27      	ldr	r2, [pc, #156]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00f      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00b      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <TIM_Base_SetConfig+0x134>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d007      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a24      	ldr	r2, [pc, #144]	; (8004a14 <TIM_Base_SetConfig+0x138>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a23      	ldr	r2, [pc, #140]	; (8004a18 <TIM_Base_SetConfig+0x13c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d108      	bne.n	80049a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d103      	bne.n	80049dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	615a      	str	r2, [r3, #20]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40010400 	.word	0x40010400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800
 8004a10:	40001800 	.word	0x40001800
 8004a14:	40001c00 	.word	0x40001c00
 8004a18:	40002000 	.word	0x40002000

08004a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e040      	b.n	8004aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd f94e 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2224      	movs	r2, #36	; 0x24
 8004a84:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8be 	bl	8004c18 <UART_SetConfig>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e022      	b.n	8004aec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fb5c 	bl	800516c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fbe3 	bl	80052b0 <UART_CheckIdleState>
 8004aea:	4603      	mov	r3, r0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d17f      	bne.n	8004c0c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_UART_Transmit+0x24>
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e078      	b.n	8004c0e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Transmit+0x36>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e071      	b.n	8004c0e <HAL_UART_Transmit+0x11a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2221      	movs	r2, #33	; 0x21
 8004b3c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004b3e:	f7fd f97b 	bl	8001e38 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5c:	d108      	bne.n	8004b70 <HAL_UART_Transmit+0x7c>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d104      	bne.n	8004b70 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	e003      	b.n	8004b78 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004b80:	e02c      	b.n	8004bdc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2180      	movs	r1, #128	; 0x80
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fbd4 	bl	800533a <UART_WaitOnFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e038      	b.n	8004c0e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10b      	bne.n	8004bba <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	e007      	b.n	8004bca <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1cc      	bne.n	8004b82 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2140      	movs	r1, #64	; 0x40
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fba1 	bl	800533a <UART_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e005      	b.n	8004c0e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e000      	b.n	8004c0e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004c0c:	2302      	movs	r3, #2
  }
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4bb1      	ldr	r3, [pc, #708]	; (8004f0c <UART_SetConfig+0x2f4>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	6939      	ldr	r1, [r7, #16]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a9f      	ldr	r2, [pc, #636]	; (8004f10 <UART_SetConfig+0x2f8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d121      	bne.n	8004cdc <UART_SetConfig+0xc4>
 8004c98:	4b9e      	ldr	r3, [pc, #632]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d816      	bhi.n	8004cd4 <UART_SetConfig+0xbc>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0x94>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004cc3 	.word	0x08004cc3
 8004cb8:	08004ccf 	.word	0x08004ccf
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e151      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	77fb      	strb	r3, [r7, #31]
 8004cc6:	e14e      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e14b      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e148      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	bf00      	nop
 8004cda:	e144      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a8d      	ldr	r2, [pc, #564]	; (8004f18 <UART_SetConfig+0x300>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d134      	bne.n	8004d50 <UART_SetConfig+0x138>
 8004ce6:	4b8b      	ldr	r3, [pc, #556]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d829      	bhi.n	8004d48 <UART_SetConfig+0x130>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0xe4>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d31 	.word	0x08004d31
 8004d00:	08004d49 	.word	0x08004d49
 8004d04:	08004d49 	.word	0x08004d49
 8004d08:	08004d49 	.word	0x08004d49
 8004d0c:	08004d3d 	.word	0x08004d3d
 8004d10:	08004d49 	.word	0x08004d49
 8004d14:	08004d49 	.word	0x08004d49
 8004d18:	08004d49 	.word	0x08004d49
 8004d1c:	08004d37 	.word	0x08004d37
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d49 	.word	0x08004d49
 8004d2c:	08004d43 	.word	0x08004d43
 8004d30:	2300      	movs	r3, #0
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e117      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d36:	2302      	movs	r3, #2
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e114      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e111      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d42:	2308      	movs	r3, #8
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e10e      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	bf00      	nop
 8004d4e:	e10a      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a71      	ldr	r2, [pc, #452]	; (8004f1c <UART_SetConfig+0x304>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d120      	bne.n	8004d9c <UART_SetConfig+0x184>
 8004d5a:	4b6e      	ldr	r3, [pc, #440]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d00f      	beq.n	8004d88 <UART_SetConfig+0x170>
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d802      	bhi.n	8004d72 <UART_SetConfig+0x15a>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <UART_SetConfig+0x164>
 8004d70:	e010      	b.n	8004d94 <UART_SetConfig+0x17c>
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d005      	beq.n	8004d82 <UART_SetConfig+0x16a>
 8004d76:	2b30      	cmp	r3, #48	; 0x30
 8004d78:	d009      	beq.n	8004d8e <UART_SetConfig+0x176>
 8004d7a:	e00b      	b.n	8004d94 <UART_SetConfig+0x17c>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e0f1      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d82:	2302      	movs	r3, #2
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e0ee      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e0eb      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d8e:	2308      	movs	r3, #8
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e0e8      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d94:	2310      	movs	r3, #16
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	bf00      	nop
 8004d9a:	e0e4      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5f      	ldr	r2, [pc, #380]	; (8004f20 <UART_SetConfig+0x308>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d120      	bne.n	8004de8 <UART_SetConfig+0x1d0>
 8004da6:	4b5b      	ldr	r3, [pc, #364]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d00f      	beq.n	8004dd4 <UART_SetConfig+0x1bc>
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d802      	bhi.n	8004dbe <UART_SetConfig+0x1a6>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <UART_SetConfig+0x1b0>
 8004dbc:	e010      	b.n	8004de0 <UART_SetConfig+0x1c8>
 8004dbe:	2b80      	cmp	r3, #128	; 0x80
 8004dc0:	d005      	beq.n	8004dce <UART_SetConfig+0x1b6>
 8004dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc4:	d009      	beq.n	8004dda <UART_SetConfig+0x1c2>
 8004dc6:	e00b      	b.n	8004de0 <UART_SetConfig+0x1c8>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e0cb      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	e0c8      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e0c5      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e0c2      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004de0:	2310      	movs	r3, #16
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	bf00      	nop
 8004de6:	e0be      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a4d      	ldr	r2, [pc, #308]	; (8004f24 <UART_SetConfig+0x30c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d124      	bne.n	8004e3c <UART_SetConfig+0x224>
 8004df2:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e00:	d012      	beq.n	8004e28 <UART_SetConfig+0x210>
 8004e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e06:	d802      	bhi.n	8004e0e <UART_SetConfig+0x1f6>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <UART_SetConfig+0x204>
 8004e0c:	e012      	b.n	8004e34 <UART_SetConfig+0x21c>
 8004e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e12:	d006      	beq.n	8004e22 <UART_SetConfig+0x20a>
 8004e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e18:	d009      	beq.n	8004e2e <UART_SetConfig+0x216>
 8004e1a:	e00b      	b.n	8004e34 <UART_SetConfig+0x21c>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e0a1      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e09e      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e09b      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e098      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e34:	2310      	movs	r3, #16
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	bf00      	nop
 8004e3a:	e094      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a39      	ldr	r2, [pc, #228]	; (8004f28 <UART_SetConfig+0x310>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d124      	bne.n	8004e90 <UART_SetConfig+0x278>
 8004e46:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d012      	beq.n	8004e7c <UART_SetConfig+0x264>
 8004e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5a:	d802      	bhi.n	8004e62 <UART_SetConfig+0x24a>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <UART_SetConfig+0x258>
 8004e60:	e012      	b.n	8004e88 <UART_SetConfig+0x270>
 8004e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e66:	d006      	beq.n	8004e76 <UART_SetConfig+0x25e>
 8004e68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e6c:	d009      	beq.n	8004e82 <UART_SetConfig+0x26a>
 8004e6e:	e00b      	b.n	8004e88 <UART_SetConfig+0x270>
 8004e70:	2301      	movs	r3, #1
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e077      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e76:	2302      	movs	r3, #2
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e074      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e071      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e82:	2308      	movs	r3, #8
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e06e      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	bf00      	nop
 8004e8e:	e06a      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <UART_SetConfig+0x314>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d124      	bne.n	8004ee4 <UART_SetConfig+0x2cc>
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea8:	d012      	beq.n	8004ed0 <UART_SetConfig+0x2b8>
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	d802      	bhi.n	8004eb6 <UART_SetConfig+0x29e>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <UART_SetConfig+0x2ac>
 8004eb4:	e012      	b.n	8004edc <UART_SetConfig+0x2c4>
 8004eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eba:	d006      	beq.n	8004eca <UART_SetConfig+0x2b2>
 8004ebc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ec0:	d009      	beq.n	8004ed6 <UART_SetConfig+0x2be>
 8004ec2:	e00b      	b.n	8004edc <UART_SetConfig+0x2c4>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e04d      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e04a      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e047      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e044      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004edc:	2310      	movs	r3, #16
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	bf00      	nop
 8004ee2:	e040      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <UART_SetConfig+0x318>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d139      	bne.n	8004f62 <UART_SetConfig+0x34a>
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efc:	d027      	beq.n	8004f4e <UART_SetConfig+0x336>
 8004efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f02:	d817      	bhi.n	8004f34 <UART_SetConfig+0x31c>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01c      	beq.n	8004f42 <UART_SetConfig+0x32a>
 8004f08:	e027      	b.n	8004f5a <UART_SetConfig+0x342>
 8004f0a:	bf00      	nop
 8004f0c:	efff69f3 	.word	0xefff69f3
 8004f10:	40011000 	.word	0x40011000
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40004400 	.word	0x40004400
 8004f1c:	40004800 	.word	0x40004800
 8004f20:	40004c00 	.word	0x40004c00
 8004f24:	40005000 	.word	0x40005000
 8004f28:	40011400 	.word	0x40011400
 8004f2c:	40007800 	.word	0x40007800
 8004f30:	40007c00 	.word	0x40007c00
 8004f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f38:	d006      	beq.n	8004f48 <UART_SetConfig+0x330>
 8004f3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f3e:	d009      	beq.n	8004f54 <UART_SetConfig+0x33c>
 8004f40:	e00b      	b.n	8004f5a <UART_SetConfig+0x342>
 8004f42:	2300      	movs	r3, #0
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e00e      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e00b      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004f4e:	2304      	movs	r3, #4
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e008      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004f54:	2308      	movs	r3, #8
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e005      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004f5a:	2310      	movs	r3, #16
 8004f5c:	77fb      	strb	r3, [r7, #31]
 8004f5e:	bf00      	nop
 8004f60:	e001      	b.n	8004f66 <UART_SetConfig+0x34e>
 8004f62:	2310      	movs	r3, #16
 8004f64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6e:	d17f      	bne.n	8005070 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004f70:	7ffb      	ldrb	r3, [r7, #31]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d85c      	bhi.n	8005030 <UART_SetConfig+0x418>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x364>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fc1 	.word	0x08004fc1
 8004f84:	08004fe1 	.word	0x08004fe1
 8004f88:	08005031 	.word	0x08005031
 8004f8c:	08004ff9 	.word	0x08004ff9
 8004f90:	08005031 	.word	0x08005031
 8004f94:	08005031 	.word	0x08005031
 8004f98:	08005031 	.word	0x08005031
 8004f9c:	08005019 	.word	0x08005019
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe feac 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8004fa4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	005a      	lsls	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	61bb      	str	r3, [r7, #24]
        break;
 8004fbe:	e03a      	b.n	8005036 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc0:	f7fe feb0 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8004fc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	005a      	lsls	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	441a      	add	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	61bb      	str	r3, [r7, #24]
        break;
 8004fde:	e02a      	b.n	8005036 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	085a      	lsrs	r2, r3, #1
 8004fe6:	4b5f      	ldr	r3, [pc, #380]	; (8005164 <UART_SetConfig+0x54c>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6852      	ldr	r2, [r2, #4]
 8004fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	61bb      	str	r3, [r7, #24]
        break;
 8004ff6:	e01e      	b.n	8005036 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff8:	f7fe fdc2 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8004ffc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	005a      	lsls	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	441a      	add	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	61bb      	str	r3, [r7, #24]
        break;
 8005016:	e00e      	b.n	8005036 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	b29b      	uxth	r3, r3
 800502c:	61bb      	str	r3, [r7, #24]
        break;
 800502e:	e002      	b.n	8005036 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	75fb      	strb	r3, [r7, #23]
        break;
 8005034:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b0f      	cmp	r3, #15
 800503a:	d916      	bls.n	800506a <UART_SetConfig+0x452>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005042:	d212      	bcs.n	800506a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f023 030f 	bic.w	r3, r3, #15
 800504c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	b29b      	uxth	r3, r3
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	b29a      	uxth	r2, r3
 800505a:	897b      	ldrh	r3, [r7, #10]
 800505c:	4313      	orrs	r3, r2
 800505e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	897a      	ldrh	r2, [r7, #10]
 8005066:	60da      	str	r2, [r3, #12]
 8005068:	e070      	b.n	800514c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
 800506e:	e06d      	b.n	800514c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005070:	7ffb      	ldrb	r3, [r7, #31]
 8005072:	2b08      	cmp	r3, #8
 8005074:	d859      	bhi.n	800512a <UART_SetConfig+0x512>
 8005076:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x464>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050bf 	.word	0x080050bf
 8005084:	080050dd 	.word	0x080050dd
 8005088:	0800512b 	.word	0x0800512b
 800508c:	080050f5 	.word	0x080050f5
 8005090:	0800512b 	.word	0x0800512b
 8005094:	0800512b 	.word	0x0800512b
 8005098:	0800512b 	.word	0x0800512b
 800509c:	08005113 	.word	0x08005113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a0:	f7fe fe2c 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 80050a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	085a      	lsrs	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	441a      	add	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	61bb      	str	r3, [r7, #24]
        break;
 80050bc:	e038      	b.n	8005130 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050be:	f7fe fe31 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 80050c2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	085a      	lsrs	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	441a      	add	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	61bb      	str	r3, [r7, #24]
        break;
 80050da:	e029      	b.n	8005130 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	085a      	lsrs	r2, r3, #1
 80050e2:	4b21      	ldr	r3, [pc, #132]	; (8005168 <UART_SetConfig+0x550>)
 80050e4:	4413      	add	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6852      	ldr	r2, [r2, #4]
 80050ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	61bb      	str	r3, [r7, #24]
        break;
 80050f2:	e01d      	b.n	8005130 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f4:	f7fe fd44 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 80050f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	085a      	lsrs	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	441a      	add	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	b29b      	uxth	r3, r3
 800510e:	61bb      	str	r3, [r7, #24]
        break;
 8005110:	e00e      	b.n	8005130 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	b29b      	uxth	r3, r3
 8005126:	61bb      	str	r3, [r7, #24]
        break;
 8005128:	e002      	b.n	8005130 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
        break;
 800512e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d908      	bls.n	8005148 <UART_SetConfig+0x530>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d204      	bcs.n	8005148 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	e001      	b.n	800514c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	01e84800 	.word	0x01e84800
 8005168:	00f42400 	.word	0x00f42400

0800516c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01a      	beq.n	8005282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526a:	d10a      	bne.n	8005282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  }
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80052be:	f7fc fdbb 	bl	8001e38 <HAL_GetTick>
 80052c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d10e      	bne.n	80052f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f82a 	bl	800533a <UART_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e020      	b.n	8005332 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d10e      	bne.n	800531c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f814 	bl	800533a <UART_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e00a      	b.n	8005332 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534a:	e05d      	b.n	8005408 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005352:	d059      	beq.n	8005408 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005354:	f7fc fd70 	bl	8001e38 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	429a      	cmp	r2, r3
 8005362:	d302      	bcc.n	800536a <UART_WaitOnFlagUntilTimeout+0x30>
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d11b      	bne.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005378:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0201 	bic.w	r2, r2, #1
 8005388:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e042      	b.n	8005428 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d02b      	beq.n	8005408 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053be:	d123      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0201 	bic.w	r2, r2, #1
 80053e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e00f      	b.n	8005428 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	429a      	cmp	r2, r3
 8005424:	d092      	beq.n	800534c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005446:	f3ef 8305 	mrs	r3, IPSR
 800544a:	60bb      	str	r3, [r7, #8]
  return(result);
 800544c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10f      	bne.n	8005472 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005452:	f3ef 8310 	mrs	r3, PRIMASK
 8005456:	607b      	str	r3, [r7, #4]
  return(result);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800545e:	f3ef 8311 	mrs	r3, BASEPRI
 8005462:	603b      	str	r3, [r7, #0]
  return(result);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <osKernelInitialize+0x3a>
 800546a:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <osKernelInitialize+0x64>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d103      	bne.n	800547a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005472:	f06f 0305 	mvn.w	r3, #5
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e00c      	b.n	8005494 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800547a:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <osKernelInitialize+0x64>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005482:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <osKernelInitialize+0x64>)
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	e002      	b.n	8005494 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800548e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005492:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005494:	68fb      	ldr	r3, [r7, #12]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	200000e0 	.word	0x200000e0

080054a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ae:	f3ef 8305 	mrs	r3, IPSR
 80054b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80054b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ba:	f3ef 8310 	mrs	r3, PRIMASK
 80054be:	607b      	str	r3, [r7, #4]
  return(result);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d105      	bne.n	80054d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054c6:	f3ef 8311 	mrs	r3, BASEPRI
 80054ca:	603b      	str	r3, [r7, #0]
  return(result);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <osKernelStart+0x3a>
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <osKernelStart+0x68>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d103      	bne.n	80054e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80054da:	f06f 0305 	mvn.w	r3, #5
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	e010      	b.n	8005504 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <osKernelStart+0x68>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d109      	bne.n	80054fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054ea:	f7ff ffa1 	bl	8005430 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <osKernelStart+0x68>)
 80054f0:	2202      	movs	r2, #2
 80054f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054f4:	f001 ff10 	bl	8007318 <vTaskStartScheduler>
      stat = osOK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	e002      	b.n	8005504 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005502:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	200000e0 	.word	0x200000e0

08005514 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b090      	sub	sp, #64	; 0x40
 8005518:	af04      	add	r7, sp, #16
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005524:	f3ef 8305 	mrs	r3, IPSR
 8005528:	61fb      	str	r3, [r7, #28]
  return(result);
 800552a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800552c:	2b00      	cmp	r3, #0
 800552e:	f040 808f 	bne.w	8005650 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005532:	f3ef 8310 	mrs	r3, PRIMASK
 8005536:	61bb      	str	r3, [r7, #24]
  return(result);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d105      	bne.n	800554a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800553e:	f3ef 8311 	mrs	r3, BASEPRI
 8005542:	617b      	str	r3, [r7, #20]
  return(result);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <osThreadNew+0x3e>
 800554a:	4b44      	ldr	r3, [pc, #272]	; (800565c <osThreadNew+0x148>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d07e      	beq.n	8005650 <osThreadNew+0x13c>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d07b      	beq.n	8005650 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800555c:	2318      	movs	r3, #24
 800555e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005560:	2300      	movs	r3, #0
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005568:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d045      	beq.n	80055fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <osThreadNew+0x6a>
        name = attr->name;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d008      	beq.n	80055a4 <osThreadNew+0x90>
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	2b38      	cmp	r3, #56	; 0x38
 8005596:	d805      	bhi.n	80055a4 <osThreadNew+0x90>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <osThreadNew+0x94>
        return (NULL);
 80055a4:	2300      	movs	r3, #0
 80055a6:	e054      	b.n	8005652 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	089b      	lsrs	r3, r3, #2
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00e      	beq.n	80055de <osThreadNew+0xca>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b5b      	cmp	r3, #91	; 0x5b
 80055c6:	d90a      	bls.n	80055de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <osThreadNew+0xca>
        mem = 1;
 80055d8:	2301      	movs	r3, #1
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	e010      	b.n	8005600 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10c      	bne.n	8005600 <osThreadNew+0xec>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d108      	bne.n	8005600 <osThreadNew+0xec>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d104      	bne.n	8005600 <osThreadNew+0xec>
          mem = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	623b      	str	r3, [r7, #32]
 80055fa:	e001      	b.n	8005600 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d110      	bne.n	8005628 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800560e:	9202      	str	r2, [sp, #8]
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f001 fc9f 	bl	8006f60 <xTaskCreateStatic>
 8005622:	4603      	mov	r3, r0
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e013      	b.n	8005650 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d110      	bne.n	8005650 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	b29a      	uxth	r2, r3
 8005632:	f107 0310 	add.w	r3, r7, #16
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f001 fced 	bl	8007020 <xTaskCreate>
 8005646:	4603      	mov	r3, r0
 8005648:	2b01      	cmp	r3, #1
 800564a:	d001      	beq.n	8005650 <osThreadNew+0x13c>
          hTask = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005650:	693b      	ldr	r3, [r7, #16]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3730      	adds	r7, #48	; 0x30
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200000e0 	.word	0x200000e0

08005660 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005668:	f3ef 8305 	mrs	r3, IPSR
 800566c:	613b      	str	r3, [r7, #16]
  return(result);
 800566e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10f      	bne.n	8005694 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005674:	f3ef 8310 	mrs	r3, PRIMASK
 8005678:	60fb      	str	r3, [r7, #12]
  return(result);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005680:	f3ef 8311 	mrs	r3, BASEPRI
 8005684:	60bb      	str	r3, [r7, #8]
  return(result);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <osDelay+0x3c>
 800568c:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <osDelay+0x58>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d103      	bne.n	800569c <osDelay+0x3c>
    stat = osErrorISR;
 8005694:	f06f 0305 	mvn.w	r3, #5
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e007      	b.n	80056ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 fe00 	bl	80072ac <vTaskDelay>
    }
  }

  return (stat);
 80056ac:	697b      	ldr	r3, [r7, #20]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	200000e0 	.word	0x200000e0

080056bc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08c      	sub	sp, #48	; 0x30
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056cc:	f3ef 8305 	mrs	r3, IPSR
 80056d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80056d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f040 8087 	bne.w	80057e8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056da:	f3ef 8310 	mrs	r3, PRIMASK
 80056de:	617b      	str	r3, [r7, #20]
  return(result);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d105      	bne.n	80056f2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056e6:	f3ef 8311 	mrs	r3, BASEPRI
 80056ea:	613b      	str	r3, [r7, #16]
  return(result);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <osSemaphoreNew+0x3e>
 80056f2:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <osSemaphoreNew+0x138>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d076      	beq.n	80057e8 <osSemaphoreNew+0x12c>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d073      	beq.n	80057e8 <osSemaphoreNew+0x12c>
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	429a      	cmp	r2, r3
 8005706:	d86f      	bhi.n	80057e8 <osSemaphoreNew+0x12c>
    mem = -1;
 8005708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800570c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d015      	beq.n	8005740 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d006      	beq.n	800572a <osSemaphoreNew+0x6e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	2b4f      	cmp	r3, #79	; 0x4f
 8005722:	d902      	bls.n	800572a <osSemaphoreNew+0x6e>
        mem = 1;
 8005724:	2301      	movs	r3, #1
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	e00c      	b.n	8005744 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d108      	bne.n	8005744 <osSemaphoreNew+0x88>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <osSemaphoreNew+0x88>
          mem = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	623b      	str	r3, [r7, #32]
 800573e:	e001      	b.n	8005744 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574a:	d04d      	beq.n	80057e8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d129      	bne.n	80057a6 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10b      	bne.n	8005770 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	2303      	movs	r3, #3
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	2200      	movs	r2, #0
 8005764:	2100      	movs	r1, #0
 8005766:	2001      	movs	r0, #1
 8005768:	f000 fbf4 	bl	8005f54 <xQueueGenericCreateStatic>
 800576c:	6278      	str	r0, [r7, #36]	; 0x24
 800576e:	e005      	b.n	800577c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005770:	2203      	movs	r2, #3
 8005772:	2100      	movs	r1, #0
 8005774:	2001      	movs	r0, #1
 8005776:	f000 fc6a 	bl	800604e <xQueueGenericCreate>
 800577a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	2b00      	cmp	r3, #0
 8005780:	d022      	beq.n	80057c8 <osSemaphoreNew+0x10c>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01f      	beq.n	80057c8 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005788:	2300      	movs	r3, #0
 800578a:	2200      	movs	r2, #0
 800578c:	2100      	movs	r1, #0
 800578e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005790:	f000 fd30 	bl	80061f4 <xQueueGenericSend>
 8005794:	4603      	mov	r3, r0
 8005796:	2b01      	cmp	r3, #1
 8005798:	d016      	beq.n	80057c8 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800579a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579c:	f001 fa0d 	bl	8006bba <vQueueDelete>
            hSemaphore = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
 80057a4:	e010      	b.n	80057c8 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d108      	bne.n	80057be <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	461a      	mov	r2, r3
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fcae 	bl	8006116 <xQueueCreateCountingSemaphoreStatic>
 80057ba:	6278      	str	r0, [r7, #36]	; 0x24
 80057bc:	e004      	b.n	80057c8 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fce1 	bl	8006188 <xQueueCreateCountingSemaphore>
 80057c6:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00c      	beq.n	80057e8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <osSemaphoreNew+0x120>
          name = attr->name;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e001      	b.n	80057e0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80057e0:	69f9      	ldr	r1, [r7, #28]
 80057e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e4:	f001 fb36 	bl	8006e54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3728      	adds	r7, #40	; 0x28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	200000e0 	.word	0x200000e0

080057f8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005810:	f06f 0303 	mvn.w	r3, #3
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e04b      	b.n	80058b0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005818:	f3ef 8305 	mrs	r3, IPSR
 800581c:	617b      	str	r3, [r7, #20]
  return(result);
 800581e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10f      	bne.n	8005844 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005824:	f3ef 8310 	mrs	r3, PRIMASK
 8005828:	613b      	str	r3, [r7, #16]
  return(result);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d105      	bne.n	800583c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005830:	f3ef 8311 	mrs	r3, BASEPRI
 8005834:	60fb      	str	r3, [r7, #12]
  return(result);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d026      	beq.n	800588a <osSemaphoreAcquire+0x92>
 800583c:	4b1f      	ldr	r3, [pc, #124]	; (80058bc <osSemaphoreAcquire+0xc4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d122      	bne.n	800588a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800584a:	f06f 0303 	mvn.w	r3, #3
 800584e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005850:	e02d      	b.n	80058ae <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005856:	f107 0308 	add.w	r3, r7, #8
 800585a:	461a      	mov	r2, r3
 800585c:	2100      	movs	r1, #0
 800585e:	69b8      	ldr	r0, [r7, #24]
 8005860:	f001 f8ea 	bl	8006a38 <xQueueReceiveFromISR>
 8005864:	4603      	mov	r3, r0
 8005866:	2b01      	cmp	r3, #1
 8005868:	d003      	beq.n	8005872 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800586a:	f06f 0302 	mvn.w	r3, #2
 800586e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005870:	e01d      	b.n	80058ae <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01a      	beq.n	80058ae <osSemaphoreAcquire+0xb6>
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <osSemaphoreAcquire+0xc8>)
 800587a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005888:	e011      	b.n	80058ae <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	69b8      	ldr	r0, [r7, #24]
 800588e:	f000 ffc3 	bl	8006818 <xQueueSemaphoreTake>
 8005892:	4603      	mov	r3, r0
 8005894:	2b01      	cmp	r3, #1
 8005896:	d00b      	beq.n	80058b0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800589e:	f06f 0301 	mvn.w	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	e004      	b.n	80058b0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80058a6:	f06f 0302 	mvn.w	r3, #2
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e000      	b.n	80058b0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80058ae:	bf00      	nop
      }
    }
  }

  return (stat);
 80058b0:	69fb      	ldr	r3, [r7, #28]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200000e0 	.word	0x200000e0
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80058da:	f06f 0303 	mvn.w	r3, #3
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	e03e      	b.n	8005960 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e2:	f3ef 8305 	mrs	r3, IPSR
 80058e6:	617b      	str	r3, [r7, #20]
  return(result);
 80058e8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10f      	bne.n	800590e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ee:	f3ef 8310 	mrs	r3, PRIMASK
 80058f2:	613b      	str	r3, [r7, #16]
  return(result);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058fa:	f3ef 8311 	mrs	r3, BASEPRI
 80058fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01e      	beq.n	8005944 <osSemaphoreRelease+0x80>
 8005906:	4b19      	ldr	r3, [pc, #100]	; (800596c <osSemaphoreRelease+0xa8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d11a      	bne.n	8005944 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005912:	f107 0308 	add.w	r3, r7, #8
 8005916:	4619      	mov	r1, r3
 8005918:	69b8      	ldr	r0, [r7, #24]
 800591a:	f000 fe09 	bl	8006530 <xQueueGiveFromISR>
 800591e:	4603      	mov	r3, r0
 8005920:	2b01      	cmp	r3, #1
 8005922:	d003      	beq.n	800592c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005924:	f06f 0302 	mvn.w	r3, #2
 8005928:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800592a:	e018      	b.n	800595e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d015      	beq.n	800595e <osSemaphoreRelease+0x9a>
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <osSemaphoreRelease+0xac>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005942:	e00c      	b.n	800595e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005944:	2300      	movs	r3, #0
 8005946:	2200      	movs	r2, #0
 8005948:	2100      	movs	r1, #0
 800594a:	69b8      	ldr	r0, [r7, #24]
 800594c:	f000 fc52 	bl	80061f4 <xQueueGenericSend>
 8005950:	4603      	mov	r3, r0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d004      	beq.n	8005960 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005956:	f06f 0302 	mvn.w	r3, #2
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e000      	b.n	8005960 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800595e:	bf00      	nop
    }
  }

  return (stat);
 8005960:	69fb      	ldr	r3, [r7, #28]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	200000e0 	.word	0x200000e0
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b08c      	sub	sp, #48	; 0x30
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005984:	f3ef 8305 	mrs	r3, IPSR
 8005988:	61bb      	str	r3, [r7, #24]
  return(result);
 800598a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800598c:	2b00      	cmp	r3, #0
 800598e:	d170      	bne.n	8005a72 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005990:	f3ef 8310 	mrs	r3, PRIMASK
 8005994:	617b      	str	r3, [r7, #20]
  return(result);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800599c:	f3ef 8311 	mrs	r3, BASEPRI
 80059a0:	613b      	str	r3, [r7, #16]
  return(result);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <osMessageQueueNew+0x3c>
 80059a8:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <osMessageQueueNew+0x108>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d060      	beq.n	8005a72 <osMessageQueueNew+0xfe>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d05d      	beq.n	8005a72 <osMessageQueueNew+0xfe>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d05a      	beq.n	8005a72 <osMessageQueueNew+0xfe>
    mem = -1;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d029      	beq.n	8005a1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d012      	beq.n	80059f6 <osMessageQueueNew+0x82>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b4f      	cmp	r3, #79	; 0x4f
 80059d6:	d90e      	bls.n	80059f6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d302      	bcc.n	80059f6 <osMessageQueueNew+0x82>
        mem = 1;
 80059f0:	2301      	movs	r3, #1
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	e014      	b.n	8005a20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d110      	bne.n	8005a20 <osMessageQueueNew+0xac>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10c      	bne.n	8005a20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d108      	bne.n	8005a20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <osMessageQueueNew+0xac>
          mem = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	e001      	b.n	8005a20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10c      	bne.n	8005a40 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6899      	ldr	r1, [r3, #8]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	460b      	mov	r3, r1
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fa8c 	bl	8005f54 <xQueueGenericCreateStatic>
 8005a3c:	6278      	str	r0, [r7, #36]	; 0x24
 8005a3e:	e008      	b.n	8005a52 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005a46:	2200      	movs	r2, #0
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 faff 	bl	800604e <xQueueGenericCreate>
 8005a50:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00c      	beq.n	8005a72 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <osMessageQueueNew+0xf2>
        name = attr->name;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	61fb      	str	r3, [r7, #28]
 8005a64:	e001      	b.n	8005a6a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a6a:	69f9      	ldr	r1, [r7, #28]
 8005a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a6e:	f001 f9f1 	bl	8006e54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3728      	adds	r7, #40	; 0x28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	200000e0 	.word	0x200000e0

08005a80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a98:	f3ef 8305 	mrs	r3, IPSR
 8005a9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a9e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10f      	bne.n	8005ac4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d02c      	beq.n	8005b16 <osMessageQueuePut+0x96>
 8005abc:	4b28      	ldr	r3, [pc, #160]	; (8005b60 <osMessageQueuePut+0xe0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d128      	bne.n	8005b16 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <osMessageQueuePut+0x56>
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <osMessageQueuePut+0x56>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005ad6:	f06f 0303 	mvn.w	r3, #3
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005adc:	e039      	b.n	8005b52 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005ae2:	f107 0210 	add.w	r2, r7, #16
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	6a38      	ldr	r0, [r7, #32]
 8005aec:	f000 fc84 	bl	80063f8 <xQueueGenericSendFromISR>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d003      	beq.n	8005afe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005af6:	f06f 0302 	mvn.w	r3, #2
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005afc:	e029      	b.n	8005b52 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d026      	beq.n	8005b52 <osMessageQueuePut+0xd2>
 8005b04:	4b17      	ldr	r3, [pc, #92]	; (8005b64 <osMessageQueuePut+0xe4>)
 8005b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b14:	e01d      	b.n	8005b52 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <osMessageQueuePut+0xa2>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d103      	bne.n	8005b2a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005b22:	f06f 0303 	mvn.w	r3, #3
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
 8005b28:	e014      	b.n	8005b54 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	6a38      	ldr	r0, [r7, #32]
 8005b32:	f000 fb5f 	bl	80061f4 <xQueueGenericSend>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d00b      	beq.n	8005b54 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005b42:	f06f 0301 	mvn.w	r3, #1
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
 8005b48:	e004      	b.n	8005b54 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005b4a:	f06f 0302 	mvn.w	r3, #2
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b50:	e000      	b.n	8005b54 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b52:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3728      	adds	r7, #40	; 0x28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	200000e0 	.word	0x200000e0
 8005b64:	e000ed04 	.word	0xe000ed04

08005b68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b7e:	f3ef 8305 	mrs	r3, IPSR
 8005b82:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b84:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b96:	f3ef 8311 	mrs	r3, BASEPRI
 8005b9a:	617b      	str	r3, [r7, #20]
  return(result);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02c      	beq.n	8005bfc <osMessageQueueGet+0x94>
 8005ba2:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <osMessageQueueGet+0xdc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d128      	bne.n	8005bfc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <osMessageQueueGet+0x54>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <osMessageQueueGet+0x54>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005bbc:	f06f 0303 	mvn.w	r3, #3
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bc2:	e038      	b.n	8005c36 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005bc8:	f107 0310 	add.w	r3, r7, #16
 8005bcc:	461a      	mov	r2, r3
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	6a38      	ldr	r0, [r7, #32]
 8005bd2:	f000 ff31 	bl	8006a38 <xQueueReceiveFromISR>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d003      	beq.n	8005be4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005bdc:	f06f 0302 	mvn.w	r3, #2
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005be2:	e028      	b.n	8005c36 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d025      	beq.n	8005c36 <osMessageQueueGet+0xce>
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <osMessageQueueGet+0xe0>)
 8005bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bfa:	e01c      	b.n	8005c36 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <osMessageQueueGet+0xa0>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005c08:	f06f 0303 	mvn.w	r3, #3
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0e:	e013      	b.n	8005c38 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	6a38      	ldr	r0, [r7, #32]
 8005c16:	f000 fd1d 	bl	8006654 <xQueueReceive>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d00b      	beq.n	8005c38 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005c26:	f06f 0301 	mvn.w	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2c:	e004      	b.n	8005c38 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005c2e:	f06f 0302 	mvn.w	r3, #2
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
 8005c34:	e000      	b.n	8005c38 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c36:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3728      	adds	r7, #40	; 0x28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	200000e0 	.word	0x200000e0
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e01e      	b.n	8005ca2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c64:	f3ef 8305 	mrs	r3, IPSR
 8005c68:	617b      	str	r3, [r7, #20]
  return(result);
 8005c6a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10f      	bne.n	8005c90 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c70:	f3ef 8310 	mrs	r3, PRIMASK
 8005c74:	613b      	str	r3, [r7, #16]
  return(result);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c80:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <osMessageQueueGetCount+0x4e>
 8005c88:	4b08      	ldr	r3, [pc, #32]	; (8005cac <osMessageQueueGetCount+0x60>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d104      	bne.n	8005c9a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005c90:	69b8      	ldr	r0, [r7, #24]
 8005c92:	f000 ff73 	bl	8006b7c <uxQueueMessagesWaitingFromISR>
 8005c96:	61f8      	str	r0, [r7, #28]
 8005c98:	e003      	b.n	8005ca2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005c9a:	69b8      	ldr	r0, [r7, #24]
 8005c9c:	f000 ff4f 	bl	8006b3e <uxQueueMessagesWaiting>
 8005ca0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8005ca2:	69fb      	ldr	r3, [r7, #28]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	200000e0 	.word	0x200000e0

08005cb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a07      	ldr	r2, [pc, #28]	; (8005cdc <vApplicationGetIdleTaskMemory+0x2c>)
 8005cc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4a06      	ldr	r2, [pc, #24]	; (8005ce0 <vApplicationGetIdleTaskMemory+0x30>)
 8005cc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	200000e4 	.word	0x200000e4
 8005ce0:	20000140 	.word	0x20000140

08005ce4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4a06      	ldr	r2, [pc, #24]	; (8005d14 <vApplicationGetTimerTaskMemory+0x30>)
 8005cfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d02:	601a      	str	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	20000340 	.word	0x20000340
 8005d14:	2000039c 	.word	0x2000039c

08005d18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f103 0208 	add.w	r2, r3, #8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f103 0208 	add.w	r2, r3, #8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f103 0208 	add.w	r2, r3, #8
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd0:	d103      	bne.n	8005dda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e00c      	b.n	8005df4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3308      	adds	r3, #8
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e002      	b.n	8005de8 <vListInsert+0x2e>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d2f6      	bcs.n	8005de2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	601a      	str	r2, [r3, #0]
}
 8005e20:	bf00      	nop
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6892      	ldr	r2, [r2, #8]
 8005e42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6852      	ldr	r2, [r2, #4]
 8005e4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d103      	bne.n	8005e60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	1e5a      	subs	r2, r3, #1
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	b672      	cpsid	i
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	b662      	cpsie	i
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	e7fe      	b.n	8005eaa <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005eac:	f002 fcbc 	bl	8008828 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb8:	68f9      	ldr	r1, [r7, #12]
 8005eba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	3b01      	subs	r3, #1
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ee2:	fb01 f303 	mul.w	r3, r1, r3
 8005ee6:	441a      	add	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	22ff      	movs	r2, #255	; 0xff
 8005ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	22ff      	movs	r2, #255	; 0xff
 8005ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d114      	bne.n	8005f2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01a      	beq.n	8005f40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3310      	adds	r3, #16
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fc90 	bl	8007834 <xTaskRemoveFromEventList>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d012      	beq.n	8005f40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <xQueueGenericReset+0xd0>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	e009      	b.n	8005f40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3310      	adds	r3, #16
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fef1 	bl	8005d18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3324      	adds	r3, #36	; 0x24
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff feec 	bl	8005d18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f40:	f002 fca4 	bl	800888c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f44:	2301      	movs	r3, #1
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08e      	sub	sp, #56	; 0x38
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <xQueueGenericCreateStatic+0x2c>
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	b672      	cpsid	i
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	b662      	cpsie	i
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7e:	e7fe      	b.n	8005f7e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <xQueueGenericCreateStatic+0x4a>
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	b672      	cpsid	i
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	b662      	cpsie	i
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	e7fe      	b.n	8005f9c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <xQueueGenericCreateStatic+0x56>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <xQueueGenericCreateStatic+0x5a>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <xQueueGenericCreateStatic+0x5c>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <xQueueGenericCreateStatic+0x78>
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	b672      	cpsid	i
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	b662      	cpsie	i
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	e7fe      	b.n	8005fca <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d102      	bne.n	8005fd8 <xQueueGenericCreateStatic+0x84>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <xQueueGenericCreateStatic+0x88>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e000      	b.n	8005fde <xQueueGenericCreateStatic+0x8a>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10b      	bne.n	8005ffa <xQueueGenericCreateStatic+0xa6>
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	b672      	cpsid	i
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	b662      	cpsie	i
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ffa:	2350      	movs	r3, #80	; 0x50
 8005ffc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b50      	cmp	r3, #80	; 0x50
 8006002:	d00b      	beq.n	800601c <xQueueGenericCreateStatic+0xc8>
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	b672      	cpsid	i
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	b662      	cpsie	i
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e7fe      	b.n	800601a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800601c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00d      	beq.n	8006044 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006030:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f846 	bl	80060d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006046:	4618      	mov	r0, r3
 8006048:	3730      	adds	r7, #48	; 0x30
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800604e:	b580      	push	{r7, lr}
 8006050:	b08a      	sub	sp, #40	; 0x28
 8006052:	af02      	add	r7, sp, #8
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	4613      	mov	r3, r2
 800605a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <xQueueGenericCreate+0x2c>
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	b672      	cpsid	i
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	b662      	cpsie	i
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	e7fe      	b.n	8006078 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006080:	2300      	movs	r3, #0
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	e004      	b.n	8006090 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	3350      	adds	r3, #80	; 0x50
 8006094:	4618      	mov	r0, r3
 8006096:	f002 fce9 	bl	8008a6c <pvPortMalloc>
 800609a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d011      	beq.n	80060c6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	3350      	adds	r3, #80	; 0x50
 80060aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060b4:	79fa      	ldrb	r2, [r7, #7]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f805 	bl	80060d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060c6:	69bb      	ldr	r3, [r7, #24]
	}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e002      	b.n	80060f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060fe:	2101      	movs	r1, #1
 8006100:	69b8      	ldr	r0, [r7, #24]
 8006102:	f7ff febd 	bl	8005e80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	78fa      	ldrb	r2, [r7, #3]
 800610a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006116:	b580      	push	{r7, lr}
 8006118:	b08a      	sub	sp, #40	; 0x28
 800611a:	af02      	add	r7, sp, #8
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	b672      	cpsid	i
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	b662      	cpsie	i
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e7fe      	b.n	800613e <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	429a      	cmp	r2, r3
 8006146:	d90b      	bls.n	8006160 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	b672      	cpsid	i
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	b662      	cpsie	i
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	e7fe      	b.n	800615e <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006160:	2302      	movs	r3, #2
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	2100      	movs	r1, #0
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff fef2 	bl	8005f54 <xQueueGenericCreateStatic>
 8006170:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800617e:	69fb      	ldr	r3, [r7, #28]
	}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10b      	bne.n	80061b0 <xQueueCreateCountingSemaphore+0x28>
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	b672      	cpsid	i
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	b662      	cpsie	i
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	e7fe      	b.n	80061ae <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d90b      	bls.n	80061d0 <xQueueCreateCountingSemaphore+0x48>
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	b672      	cpsid	i
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	b662      	cpsie	i
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	e7fe      	b.n	80061ce <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80061d0:	2202      	movs	r2, #2
 80061d2:	2100      	movs	r1, #0
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ff3a 	bl	800604e <xQueueGenericCreate>
 80061da:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80061e8:	697b      	ldr	r3, [r7, #20]
	}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08e      	sub	sp, #56	; 0x38
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006202:	2300      	movs	r3, #0
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10b      	bne.n	8006228 <xQueueGenericSend+0x34>
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	b672      	cpsid	i
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	b662      	cpsie	i
 8006224:	62bb      	str	r3, [r7, #40]	; 0x28
 8006226:	e7fe      	b.n	8006226 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d103      	bne.n	8006236 <xQueueGenericSend+0x42>
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <xQueueGenericSend+0x46>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <xQueueGenericSend+0x48>
 800623a:	2300      	movs	r3, #0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <xQueueGenericSend+0x64>
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	b672      	cpsid	i
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	b662      	cpsie	i
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
 8006256:	e7fe      	b.n	8006256 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d103      	bne.n	8006266 <xQueueGenericSend+0x72>
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <xQueueGenericSend+0x76>
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <xQueueGenericSend+0x78>
 800626a:	2300      	movs	r3, #0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10b      	bne.n	8006288 <xQueueGenericSend+0x94>
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	b672      	cpsid	i
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	b662      	cpsie	i
 8006284:	623b      	str	r3, [r7, #32]
 8006286:	e7fe      	b.n	8006286 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006288:	f001 fc92 	bl	8007bb0 <xTaskGetSchedulerState>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <xQueueGenericSend+0xa4>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <xQueueGenericSend+0xa8>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <xQueueGenericSend+0xaa>
 800629c:	2300      	movs	r3, #0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10b      	bne.n	80062ba <xQueueGenericSend+0xc6>
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	b672      	cpsid	i
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	b662      	cpsie	i
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	e7fe      	b.n	80062b8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062ba:	f002 fab5 	bl	8008828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d302      	bcc.n	80062d0 <xQueueGenericSend+0xdc>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d129      	bne.n	8006324 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062d6:	f000 fcac 	bl	8006c32 <prvCopyDataToQueue>
 80062da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d010      	beq.n	8006306 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	3324      	adds	r3, #36	; 0x24
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 faa3 	bl	8007834 <xTaskRemoveFromEventList>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d013      	beq.n	800631c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062f4:	4b3f      	ldr	r3, [pc, #252]	; (80063f4 <xQueueGenericSend+0x200>)
 80062f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	e00a      	b.n	800631c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800630c:	4b39      	ldr	r3, [pc, #228]	; (80063f4 <xQueueGenericSend+0x200>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800631c:	f002 fab6 	bl	800888c <vPortExitCritical>
				return pdPASS;
 8006320:	2301      	movs	r3, #1
 8006322:	e063      	b.n	80063ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800632a:	f002 faaf 	bl	800888c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800632e:	2300      	movs	r3, #0
 8006330:	e05c      	b.n	80063ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006338:	f107 0314 	add.w	r3, r7, #20
 800633c:	4618      	mov	r0, r3
 800633e:	f001 fadd 	bl	80078fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006346:	f002 faa1 	bl	800888c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800634a:	f001 f84d 	bl	80073e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800634e:	f002 fa6b 	bl	8008828 <vPortEnterCritical>
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006358:	b25b      	sxtb	r3, r3
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635e:	d103      	bne.n	8006368 <xQueueGenericSend+0x174>
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800636e:	b25b      	sxtb	r3, r3
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006374:	d103      	bne.n	800637e <xQueueGenericSend+0x18a>
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800637e:	f002 fa85 	bl	800888c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006382:	1d3a      	adds	r2, r7, #4
 8006384:	f107 0314 	add.w	r3, r7, #20
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f001 facc 	bl	8007928 <xTaskCheckForTimeOut>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d124      	bne.n	80063e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006398:	f000 fd43 	bl	8006e22 <prvIsQueueFull>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d018      	beq.n	80063d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	3310      	adds	r3, #16
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	4611      	mov	r1, r2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 f9f0 	bl	8007790 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063b2:	f000 fcce 	bl	8006d52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063b6:	f001 f825 	bl	8007404 <xTaskResumeAll>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f47f af7c 	bne.w	80062ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80063c2:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <xQueueGenericSend+0x200>)
 80063c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	e772      	b.n	80062ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063d6:	f000 fcbc 	bl	8006d52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063da:	f001 f813 	bl	8007404 <xTaskResumeAll>
 80063de:	e76c      	b.n	80062ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063e2:	f000 fcb6 	bl	8006d52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063e6:	f001 f80d 	bl	8007404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3738      	adds	r7, #56	; 0x38
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08e      	sub	sp, #56	; 0x38
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <xQueueGenericSendFromISR+0x30>
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	b672      	cpsid	i
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	b662      	cpsie	i
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
 8006426:	e7fe      	b.n	8006426 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d103      	bne.n	8006436 <xQueueGenericSendFromISR+0x3e>
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <xQueueGenericSendFromISR+0x42>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <xQueueGenericSendFromISR+0x44>
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <xQueueGenericSendFromISR+0x60>
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	b672      	cpsid	i
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	b662      	cpsie	i
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	e7fe      	b.n	8006456 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d103      	bne.n	8006466 <xQueueGenericSendFromISR+0x6e>
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <xQueueGenericSendFromISR+0x72>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <xQueueGenericSendFromISR+0x74>
 800646a:	2300      	movs	r3, #0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <xQueueGenericSendFromISR+0x90>
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	b672      	cpsid	i
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	b662      	cpsie	i
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	e7fe      	b.n	8006486 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006488:	f002 faae 	bl	80089e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800648c:	f3ef 8211 	mrs	r2, BASEPRI
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	b672      	cpsid	i
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	b662      	cpsie	i
 80064a4:	61ba      	str	r2, [r7, #24]
 80064a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <xQueueGenericSendFromISR+0xc6>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d12c      	bne.n	8006518 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ce:	f000 fbb0 	bl	8006c32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064da:	d112      	bne.n	8006502 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d016      	beq.n	8006512 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	3324      	adds	r3, #36	; 0x24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 f9a3 	bl	8007834 <xTaskRemoveFromEventList>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00e      	beq.n	8006512 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e007      	b.n	8006512 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006506:	3301      	adds	r3, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	b25a      	sxtb	r2, r3
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006512:	2301      	movs	r3, #1
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006516:	e001      	b.n	800651c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006518:	2300      	movs	r3, #0
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006528:	4618      	mov	r0, r3
 800652a:	3738      	adds	r7, #56	; 0x38
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08e      	sub	sp, #56	; 0x38
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	b672      	cpsid	i
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	b662      	cpsie	i
 8006558:	623b      	str	r3, [r7, #32]
 800655a:	e7fe      	b.n	800655a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <xQueueGiveFromISR+0x4c>
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	b672      	cpsid	i
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	b662      	cpsie	i
 8006578:	61fb      	str	r3, [r7, #28]
 800657a:	e7fe      	b.n	800657a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <xQueueGiveFromISR+0x5c>
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <xQueueGiveFromISR+0x60>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <xQueueGiveFromISR+0x62>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <xQueueGiveFromISR+0x7e>
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	b672      	cpsid	i
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	b662      	cpsie	i
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	e7fe      	b.n	80065ac <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ae:	f002 fa1b 	bl	80089e8 <vPortValidateInterruptPriority>
	__asm volatile
 80065b2:	f3ef 8211 	mrs	r2, BASEPRI
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	b672      	cpsid	i
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	b662      	cpsie	i
 80065ca:	617a      	str	r2, [r7, #20]
 80065cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80065ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065de:	429a      	cmp	r2, r3
 80065e0:	d22b      	bcs.n	800663a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fc:	d112      	bne.n	8006624 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d016      	beq.n	8006634 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	3324      	adds	r3, #36	; 0x24
 800660a:	4618      	mov	r0, r3
 800660c:	f001 f912 	bl	8007834 <xTaskRemoveFromEventList>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00e      	beq.n	8006634 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e007      	b.n	8006634 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006628:	3301      	adds	r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	b25a      	sxtb	r2, r3
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006634:	2301      	movs	r3, #1
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
 8006638:	e001      	b.n	800663e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800663a:	2300      	movs	r3, #0
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
 800663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006640:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800664a:	4618      	mov	r0, r3
 800664c:	3738      	adds	r7, #56	; 0x38
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08c      	sub	sp, #48	; 0x30
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <xQueueReceive+0x32>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	b672      	cpsid	i
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	b662      	cpsie	i
 8006682:	623b      	str	r3, [r7, #32]
 8006684:	e7fe      	b.n	8006684 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <xQueueReceive+0x40>
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <xQueueReceive+0x44>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <xQueueReceive+0x46>
 8006698:	2300      	movs	r3, #0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <xQueueReceive+0x62>
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	b672      	cpsid	i
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	b662      	cpsie	i
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	e7fe      	b.n	80066b4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066b6:	f001 fa7b 	bl	8007bb0 <xTaskGetSchedulerState>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <xQueueReceive+0x72>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <xQueueReceive+0x76>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <xQueueReceive+0x78>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <xQueueReceive+0x94>
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	b672      	cpsid	i
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	b662      	cpsie	i
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e7fe      	b.n	80066e6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066e8:	f002 f89e 	bl	8008828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01f      	beq.n	8006738 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066fc:	f000 fb03 	bl	8006d06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	1e5a      	subs	r2, r3, #1
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00f      	beq.n	8006730 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	3310      	adds	r3, #16
 8006714:	4618      	mov	r0, r3
 8006716:	f001 f88d 	bl	8007834 <xTaskRemoveFromEventList>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006720:	4b3c      	ldr	r3, [pc, #240]	; (8006814 <xQueueReceive+0x1c0>)
 8006722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006730:	f002 f8ac 	bl	800888c <vPortExitCritical>
				return pdPASS;
 8006734:	2301      	movs	r3, #1
 8006736:	e069      	b.n	800680c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800673e:	f002 f8a5 	bl	800888c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006742:	2300      	movs	r3, #0
 8006744:	e062      	b.n	800680c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800674c:	f107 0310 	add.w	r3, r7, #16
 8006750:	4618      	mov	r0, r3
 8006752:	f001 f8d3 	bl	80078fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006756:	2301      	movs	r3, #1
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800675a:	f002 f897 	bl	800888c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800675e:	f000 fe43 	bl	80073e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006762:	f002 f861 	bl	8008828 <vPortEnterCritical>
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800676c:	b25b      	sxtb	r3, r3
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006772:	d103      	bne.n	800677c <xQueueReceive+0x128>
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006782:	b25b      	sxtb	r3, r3
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006788:	d103      	bne.n	8006792 <xQueueReceive+0x13e>
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006792:	f002 f87b 	bl	800888c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006796:	1d3a      	adds	r2, r7, #4
 8006798:	f107 0310 	add.w	r3, r7, #16
 800679c:	4611      	mov	r1, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f001 f8c2 	bl	8007928 <xTaskCheckForTimeOut>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d123      	bne.n	80067f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ac:	f000 fb23 	bl	8006df6 <prvIsQueueEmpty>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d017      	beq.n	80067e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	4611      	mov	r1, r2
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 ffe6 	bl	8007790 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c6:	f000 fac4 	bl	8006d52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067ca:	f000 fe1b 	bl	8007404 <xTaskResumeAll>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d189      	bne.n	80066e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80067d4:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <xQueueReceive+0x1c0>)
 80067d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	e780      	b.n	80066e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e8:	f000 fab3 	bl	8006d52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067ec:	f000 fe0a 	bl	8007404 <xTaskResumeAll>
 80067f0:	e77a      	b.n	80066e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f4:	f000 faad 	bl	8006d52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067f8:	f000 fe04 	bl	8007404 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fe:	f000 fafa 	bl	8006df6 <prvIsQueueEmpty>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	f43f af6f 	beq.w	80066e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800680a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800680c:	4618      	mov	r0, r3
 800680e:	3730      	adds	r7, #48	; 0x30
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	; 0x38
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800682a:	2300      	movs	r3, #0
 800682c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10b      	bne.n	800684c <xQueueSemaphoreTake+0x34>
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	b672      	cpsid	i
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	b662      	cpsie	i
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	e7fe      	b.n	800684a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <xQueueSemaphoreTake+0x54>
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	b672      	cpsid	i
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	b662      	cpsie	i
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	e7fe      	b.n	800686a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800686c:	f001 f9a0 	bl	8007bb0 <xTaskGetSchedulerState>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d102      	bne.n	800687c <xQueueSemaphoreTake+0x64>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <xQueueSemaphoreTake+0x68>
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <xQueueSemaphoreTake+0x6a>
 8006880:	2300      	movs	r3, #0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <xQueueSemaphoreTake+0x86>
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	b672      	cpsid	i
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	b662      	cpsie	i
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	e7fe      	b.n	800689c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800689e:	f001 ffc3 	bl	8008828 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d024      	beq.n	80068f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	1e5a      	subs	r2, r3, #1
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80068be:	f001 faf1 	bl	8007ea4 <pvTaskIncrementMutexHeldCount>
 80068c2:	4602      	mov	r2, r0
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00f      	beq.n	80068f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	3310      	adds	r3, #16
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 ffad 	bl	8007834 <xTaskRemoveFromEventList>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068e0:	4b54      	ldr	r3, [pc, #336]	; (8006a34 <xQueueSemaphoreTake+0x21c>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068f0:	f001 ffcc 	bl	800888c <vPortExitCritical>
				return pdPASS;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e098      	b.n	8006a2a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d112      	bne.n	8006924 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <xQueueSemaphoreTake+0x104>
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	b672      	cpsid	i
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	b662      	cpsie	i
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	e7fe      	b.n	800691a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800691c:	f001 ffb6 	bl	800888c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006920:	2300      	movs	r3, #0
 8006922:	e082      	b.n	8006a2a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800692a:	f107 030c 	add.w	r3, r7, #12
 800692e:	4618      	mov	r0, r3
 8006930:	f000 ffe4 	bl	80078fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006934:	2301      	movs	r3, #1
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006938:	f001 ffa8 	bl	800888c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800693c:	f000 fd54 	bl	80073e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006940:	f001 ff72 	bl	8008828 <vPortEnterCritical>
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800694a:	b25b      	sxtb	r3, r3
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006950:	d103      	bne.n	800695a <xQueueSemaphoreTake+0x142>
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006960:	b25b      	sxtb	r3, r3
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006966:	d103      	bne.n	8006970 <xQueueSemaphoreTake+0x158>
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006970:	f001 ff8c 	bl	800888c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006974:	463a      	mov	r2, r7
 8006976:	f107 030c 	add.w	r3, r7, #12
 800697a:	4611      	mov	r1, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f000 ffd3 	bl	8007928 <xTaskCheckForTimeOut>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d132      	bne.n	80069ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800698a:	f000 fa34 	bl	8006df6 <prvIsQueueEmpty>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d026      	beq.n	80069e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800699c:	f001 ff44 	bl	8008828 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 f921 	bl	8007bec <xTaskPriorityInherit>
 80069aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80069ac:	f001 ff6e 	bl	800888c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	3324      	adds	r3, #36	; 0x24
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	4611      	mov	r1, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fee9 	bl	8007790 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069c0:	f000 f9c7 	bl	8006d52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069c4:	f000 fd1e 	bl	8007404 <xTaskResumeAll>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f47f af67 	bne.w	800689e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80069d0:	4b18      	ldr	r3, [pc, #96]	; (8006a34 <xQueueSemaphoreTake+0x21c>)
 80069d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	e75d      	b.n	800689e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80069e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069e4:	f000 f9b5 	bl	8006d52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069e8:	f000 fd0c 	bl	8007404 <xTaskResumeAll>
 80069ec:	e757      	b.n	800689e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80069ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069f0:	f000 f9af 	bl	8006d52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069f4:	f000 fd06 	bl	8007404 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069fa:	f000 f9fc 	bl	8006df6 <prvIsQueueEmpty>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f43f af4c 	beq.w	800689e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006a0c:	f001 ff0c 	bl	8008828 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a12:	f000 f8f6 	bl	8006c02 <prvGetDisinheritPriorityAfterTimeout>
 8006a16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 f9bc 	bl	8007d9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a24:	f001 ff32 	bl	800888c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3738      	adds	r7, #56	; 0x38
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08e      	sub	sp, #56	; 0x38
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <xQueueReceiveFromISR+0x2e>
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	b672      	cpsid	i
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	b662      	cpsie	i
 8006a62:	623b      	str	r3, [r7, #32]
 8006a64:	e7fe      	b.n	8006a64 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <xQueueReceiveFromISR+0x3c>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <xQueueReceiveFromISR+0x40>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e000      	b.n	8006a7a <xQueueReceiveFromISR+0x42>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10b      	bne.n	8006a96 <xQueueReceiveFromISR+0x5e>
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	b672      	cpsid	i
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	b662      	cpsie	i
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	e7fe      	b.n	8006a94 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a96:	f001 ffa7 	bl	80089e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	b672      	cpsid	i
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	b662      	cpsie	i
 8006ab2:	61ba      	str	r2, [r7, #24]
 8006ab4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006ab6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d02f      	beq.n	8006b26 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ad4:	f000 f917 	bl	8006d06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	1e5a      	subs	r2, r3, #1
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ae0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ae8:	d112      	bne.n	8006b10 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d016      	beq.n	8006b20 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	3310      	adds	r3, #16
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fe9c 	bl	8007834 <xTaskRemoveFromEventList>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00e      	beq.n	8006b20 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e007      	b.n	8006b20 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b14:	3301      	adds	r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	b25a      	sxtb	r2, r3
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b20:	2301      	movs	r3, #1
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
 8006b24:	e001      	b.n	8006b2a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3738      	adds	r7, #56	; 0x38
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10b      	bne.n	8006b64 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	b672      	cpsid	i
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	b662      	cpsie	i
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	e7fe      	b.n	8006b62 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8006b64:	f001 fe60 	bl	8008828 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006b6e:	f001 fe8d 	bl	800888c <vPortExitCritical>

	return uxReturn;
 8006b72:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10b      	bne.n	8006ba6 <uxQueueMessagesWaitingFromISR+0x2a>
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	b672      	cpsid	i
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	b662      	cpsie	i
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	e7fe      	b.n	8006ba4 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006bac:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006bae:	4618      	mov	r0, r3
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <vQueueDelete+0x2a>
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	b672      	cpsid	i
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	b662      	cpsie	i
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	e7fe      	b.n	8006be2 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f95d 	bl	8006ea4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d102      	bne.n	8006bfa <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f002 f801 	bl	8008bfc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d006      	beq.n	8006c20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	e001      	b.n	8006c24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006c24:	68fb      	ldr	r3, [r7, #12]
	}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10d      	bne.n	8006c6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d14d      	bne.n	8006cf4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 f82d 	bl	8007cbc <xTaskPriorityDisinherit>
 8006c62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	609a      	str	r2, [r3, #8]
 8006c6a:	e043      	b.n	8006cf4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d119      	bne.n	8006ca6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6858      	ldr	r0, [r3, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	f002 f907 	bl	8008e90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	441a      	add	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d32b      	bcc.n	8006cf4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	605a      	str	r2, [r3, #4]
 8006ca4:	e026      	b.n	8006cf4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68d8      	ldr	r0, [r3, #12]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	f002 f8ed 	bl	8008e90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	425b      	negs	r3, r3
 8006cc0:	441a      	add	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d207      	bcs.n	8006ce2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	425b      	negs	r3, r3
 8006cdc:	441a      	add	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d105      	bne.n	8006cf4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006cfc:	697b      	ldr	r3, [r7, #20]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d018      	beq.n	8006d4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	441a      	add	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d303      	bcc.n	8006d3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68d9      	ldr	r1, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	461a      	mov	r2, r3
 8006d44:	6838      	ldr	r0, [r7, #0]
 8006d46:	f002 f8a3 	bl	8008e90 <memcpy>
	}
}
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d5a:	f001 fd65 	bl	8008828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d66:	e011      	b.n	8006d8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d012      	beq.n	8006d96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3324      	adds	r3, #36	; 0x24
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fd5d 	bl	8007834 <xTaskRemoveFromEventList>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d80:	f000 fe36 	bl	80079f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dce9      	bgt.n	8006d68 <prvUnlockQueue+0x16>
 8006d94:	e000      	b.n	8006d98 <prvUnlockQueue+0x46>
					break;
 8006d96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	22ff      	movs	r2, #255	; 0xff
 8006d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006da0:	f001 fd74 	bl	800888c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006da4:	f001 fd40 	bl	8008828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006db0:	e011      	b.n	8006dd6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d012      	beq.n	8006de0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3310      	adds	r3, #16
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fd38 	bl	8007834 <xTaskRemoveFromEventList>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dca:	f000 fe11 	bl	80079f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dce9      	bgt.n	8006db2 <prvUnlockQueue+0x60>
 8006dde:	e000      	b.n	8006de2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006de0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	22ff      	movs	r2, #255	; 0xff
 8006de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006dea:	f001 fd4f 	bl	800888c <vPortExitCritical>
}
 8006dee:	bf00      	nop
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dfe:	f001 fd13 	bl	8008828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d102      	bne.n	8006e10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e001      	b.n	8006e14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e14:	f001 fd3a 	bl	800888c <vPortExitCritical>

	return xReturn;
 8006e18:	68fb      	ldr	r3, [r7, #12]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e2a:	f001 fcfd 	bl	8008828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d102      	bne.n	8006e40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	e001      	b.n	8006e44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e44:	f001 fd22 	bl	800888c <vPortExitCritical>

	return xReturn;
 8006e48:	68fb      	ldr	r3, [r7, #12]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	e014      	b.n	8006e8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e64:	4a0e      	ldr	r2, [pc, #56]	; (8006ea0 <vQueueAddToRegistry+0x4c>)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10b      	bne.n	8006e88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e70:	490b      	ldr	r1, [pc, #44]	; (8006ea0 <vQueueAddToRegistry+0x4c>)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e7a:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <vQueueAddToRegistry+0x4c>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	4413      	add	r3, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e86:	e005      	b.n	8006e94 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b07      	cmp	r3, #7
 8006e92:	d9e7      	bls.n	8006e64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	20004b7c 	.word	0x20004b7c

08006ea4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e016      	b.n	8006ee0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006eb2:	4a10      	ldr	r2, [pc, #64]	; (8006ef4 <vQueueUnregisterQueue+0x50>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	4413      	add	r3, r2
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d10b      	bne.n	8006eda <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	; (8006ef4 <vQueueUnregisterQueue+0x50>)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006ecc:	4a09      	ldr	r2, [pc, #36]	; (8006ef4 <vQueueUnregisterQueue+0x50>)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	605a      	str	r2, [r3, #4]
				break;
 8006ed8:	e005      	b.n	8006ee6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b07      	cmp	r3, #7
 8006ee4:	d9e5      	bls.n	8006eb2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006ee6:	bf00      	nop
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20004b7c 	.word	0x20004b7c

08006ef8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f08:	f001 fc8e 	bl	8008828 <vPortEnterCritical>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f12:	b25b      	sxtb	r3, r3
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f18:	d103      	bne.n	8006f22 <vQueueWaitForMessageRestricted+0x2a>
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f2e:	d103      	bne.n	8006f38 <vQueueWaitForMessageRestricted+0x40>
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f38:	f001 fca8 	bl	800888c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	3324      	adds	r3, #36	; 0x24
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fc45 	bl	80077dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f52:	6978      	ldr	r0, [r7, #20]
 8006f54:	f7ff fefd 	bl	8006d52 <prvUnlockQueue>
	}
 8006f58:	bf00      	nop
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08e      	sub	sp, #56	; 0x38
 8006f64:	af04      	add	r7, sp, #16
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10b      	bne.n	8006f8c <xTaskCreateStatic+0x2c>
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	b672      	cpsid	i
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	b662      	cpsie	i
 8006f88:	623b      	str	r3, [r7, #32]
 8006f8a:	e7fe      	b.n	8006f8a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10b      	bne.n	8006faa <xTaskCreateStatic+0x4a>
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	b672      	cpsid	i
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	b662      	cpsie	i
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	e7fe      	b.n	8006fa8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006faa:	235c      	movs	r3, #92	; 0x5c
 8006fac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b5c      	cmp	r3, #92	; 0x5c
 8006fb2:	d00b      	beq.n	8006fcc <xTaskCreateStatic+0x6c>
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	b672      	cpsid	i
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	b662      	cpsie	i
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	e7fe      	b.n	8006fca <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01e      	beq.n	8007012 <xTaskCreateStatic+0xb2>
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d01b      	beq.n	8007012 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fec:	2300      	movs	r3, #0
 8006fee:	9303      	str	r3, [sp, #12]
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	9302      	str	r3, [sp, #8]
 8006ff4:	f107 0314 	add.w	r3, r7, #20
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f850 	bl	80070aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800700a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800700c:	f000 f8de 	bl	80071cc <prvAddNewTaskToReadyList>
 8007010:	e001      	b.n	8007016 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007016:	697b      	ldr	r3, [r7, #20]
	}
 8007018:	4618      	mov	r0, r3
 800701a:	3728      	adds	r7, #40	; 0x28
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08c      	sub	sp, #48	; 0x30
 8007024:	af04      	add	r7, sp, #16
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	4613      	mov	r3, r2
 800702e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fd19 	bl	8008a6c <pvPortMalloc>
 800703a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00e      	beq.n	8007060 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007042:	205c      	movs	r0, #92	; 0x5c
 8007044:	f001 fd12 	bl	8008a6c <pvPortMalloc>
 8007048:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	631a      	str	r2, [r3, #48]	; 0x30
 8007056:	e005      	b.n	8007064 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007058:	6978      	ldr	r0, [r7, #20]
 800705a:	f001 fdcf 	bl	8008bfc <vPortFree>
 800705e:	e001      	b.n	8007064 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d017      	beq.n	800709a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	2300      	movs	r3, #0
 8007076:	9303      	str	r3, [sp, #12]
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	9302      	str	r3, [sp, #8]
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f80e 	bl	80070aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800708e:	69f8      	ldr	r0, [r7, #28]
 8007090:	f000 f89c 	bl	80071cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007094:	2301      	movs	r3, #1
 8007096:	61bb      	str	r3, [r7, #24]
 8007098:	e002      	b.n	80070a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800709a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800709e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070a0:	69bb      	ldr	r3, [r7, #24]
	}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b088      	sub	sp, #32
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
 80070b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	461a      	mov	r2, r3
 80070c2:	21a5      	movs	r1, #165	; 0xa5
 80070c4:	f001 feef 	bl	8008ea6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80070d2:	440b      	add	r3, r1
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	f023 0307 	bic.w	r3, r3, #7
 80070e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <prvInitialiseNewTask+0x5a>
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	b672      	cpsid	i
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	b662      	cpsie	i
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	e7fe      	b.n	8007102 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01f      	beq.n	800714a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800710a:	2300      	movs	r3, #0
 800710c:	61fb      	str	r3, [r7, #28]
 800710e:	e012      	b.n	8007136 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	4413      	add	r3, r2
 8007116:	7819      	ldrb	r1, [r3, #0]
 8007118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	3334      	adds	r3, #52	; 0x34
 8007120:	460a      	mov	r2, r1
 8007122:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d006      	beq.n	800713e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	3301      	adds	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	2b0f      	cmp	r3, #15
 800713a:	d9e9      	bls.n	8007110 <prvInitialiseNewTask+0x66>
 800713c:	e000      	b.n	8007140 <prvInitialiseNewTask+0x96>
			{
				break;
 800713e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007148:	e003      	b.n	8007152 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	2b37      	cmp	r3, #55	; 0x37
 8007156:	d901      	bls.n	800715c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007158:	2337      	movs	r3, #55	; 0x37
 800715a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007160:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007166:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	2200      	movs	r2, #0
 800716c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	3304      	adds	r3, #4
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fdf0 	bl	8005d58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	3318      	adds	r3, #24
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fdeb 	bl	8005d58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007186:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007196:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	2200      	movs	r2, #0
 800719c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	68f9      	ldr	r1, [r7, #12]
 80071aa:	69b8      	ldr	r0, [r7, #24]
 80071ac:	f001 fa36 	bl	800861c <pxPortInitialiseStack>
 80071b0:	4602      	mov	r2, r0
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071c2:	bf00      	nop
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071d4:	f001 fb28 	bl	8008828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071d8:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <prvAddNewTaskToReadyList+0xc4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <prvAddNewTaskToReadyList+0xc4>)
 80071e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071e2:	4b2c      	ldr	r3, [pc, #176]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071ea:	4a2a      	ldr	r2, [pc, #168]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071f0:	4b27      	ldr	r3, [pc, #156]	; (8007290 <prvAddNewTaskToReadyList+0xc4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d110      	bne.n	800721a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071f8:	f000 fc1e 	bl	8007a38 <prvInitialiseTaskLists>
 80071fc:	e00d      	b.n	800721a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071fe:	4b26      	ldr	r3, [pc, #152]	; (8007298 <prvAddNewTaskToReadyList+0xcc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007206:	4b23      	ldr	r3, [pc, #140]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	429a      	cmp	r2, r3
 8007212:	d802      	bhi.n	800721a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007214:	4a1f      	ldr	r2, [pc, #124]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800721a:	4b20      	ldr	r3, [pc, #128]	; (800729c <prvAddNewTaskToReadyList+0xd0>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3301      	adds	r3, #1
 8007220:	4a1e      	ldr	r2, [pc, #120]	; (800729c <prvAddNewTaskToReadyList+0xd0>)
 8007222:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007224:	4b1d      	ldr	r3, [pc, #116]	; (800729c <prvAddNewTaskToReadyList+0xd0>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <prvAddNewTaskToReadyList+0xd4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d903      	bls.n	8007240 <prvAddNewTaskToReadyList+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <prvAddNewTaskToReadyList+0xd4>)
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <prvAddNewTaskToReadyList+0xd8>)
 800724e:	441a      	add	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f7fe fd8b 	bl	8005d72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800725c:	f001 fb16 	bl	800888c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <prvAddNewTaskToReadyList+0xcc>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00e      	beq.n	8007286 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	429a      	cmp	r2, r3
 8007274:	d207      	bcs.n	8007286 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <prvAddNewTaskToReadyList+0xdc>)
 8007278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000c70 	.word	0x20000c70
 8007294:	2000079c 	.word	0x2000079c
 8007298:	20000c7c 	.word	0x20000c7c
 800729c:	20000c8c 	.word	0x20000c8c
 80072a0:	20000c78 	.word	0x20000c78
 80072a4:	200007a0 	.word	0x200007a0
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d018      	beq.n	80072f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072be:	4b14      	ldr	r3, [pc, #80]	; (8007310 <vTaskDelay+0x64>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00b      	beq.n	80072de <vTaskDelay+0x32>
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	b672      	cpsid	i
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	b662      	cpsie	i
 80072da:	60bb      	str	r3, [r7, #8]
 80072dc:	e7fe      	b.n	80072dc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80072de:	f000 f883 	bl	80073e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072e2:	2100      	movs	r1, #0
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fdf1 	bl	8007ecc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072ea:	f000 f88b 	bl	8007404 <xTaskResumeAll>
 80072ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80072f6:	4b07      	ldr	r3, [pc, #28]	; (8007314 <vTaskDelay+0x68>)
 80072f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000c98 	.word	0x20000c98
 8007314:	e000ed04 	.word	0xe000ed04

08007318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007326:	463a      	mov	r2, r7
 8007328:	1d39      	adds	r1, r7, #4
 800732a:	f107 0308 	add.w	r3, r7, #8
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fcbe 	bl	8005cb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	9202      	str	r2, [sp, #8]
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	2300      	movs	r3, #0
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	2300      	movs	r3, #0
 8007344:	460a      	mov	r2, r1
 8007346:	4922      	ldr	r1, [pc, #136]	; (80073d0 <vTaskStartScheduler+0xb8>)
 8007348:	4822      	ldr	r0, [pc, #136]	; (80073d4 <vTaskStartScheduler+0xbc>)
 800734a:	f7ff fe09 	bl	8006f60 <xTaskCreateStatic>
 800734e:	4602      	mov	r2, r0
 8007350:	4b21      	ldr	r3, [pc, #132]	; (80073d8 <vTaskStartScheduler+0xc0>)
 8007352:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007354:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <vTaskStartScheduler+0xc0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800735c:	2301      	movs	r3, #1
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	e001      	b.n	8007366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d102      	bne.n	8007372 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800736c:	f000 fe02 	bl	8007f74 <xTimerCreateTimerTask>
 8007370:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d117      	bne.n	80073a8 <vTaskStartScheduler+0x90>
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	b672      	cpsid	i
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	b662      	cpsie	i
 800738c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800738e:	4b13      	ldr	r3, [pc, #76]	; (80073dc <vTaskStartScheduler+0xc4>)
 8007390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007394:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007396:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <vTaskStartScheduler+0xc8>)
 8007398:	2201      	movs	r2, #1
 800739a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800739c:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <vTaskStartScheduler+0xcc>)
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073a2:	f001 f9c5 	bl	8008730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073a6:	e00f      	b.n	80073c8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ae:	d10b      	bne.n	80073c8 <vTaskStartScheduler+0xb0>
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	b672      	cpsid	i
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	b662      	cpsie	i
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	e7fe      	b.n	80073c6 <vTaskStartScheduler+0xae>
}
 80073c8:	bf00      	nop
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	08009890 	.word	0x08009890
 80073d4:	08007a09 	.word	0x08007a09
 80073d8:	20000c94 	.word	0x20000c94
 80073dc:	20000c90 	.word	0x20000c90
 80073e0:	20000c7c 	.word	0x20000c7c
 80073e4:	20000c74 	.word	0x20000c74

080073e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <vTaskSuspendAll+0x18>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3301      	adds	r3, #1
 80073f2:	4a03      	ldr	r2, [pc, #12]	; (8007400 <vTaskSuspendAll+0x18>)
 80073f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80073f6:	bf00      	nop
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	20000c98 	.word	0x20000c98

08007404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007412:	4b42      	ldr	r3, [pc, #264]	; (800751c <xTaskResumeAll+0x118>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <xTaskResumeAll+0x2e>
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	b672      	cpsid	i
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	b662      	cpsie	i
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	e7fe      	b.n	8007430 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007432:	f001 f9f9 	bl	8008828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007436:	4b39      	ldr	r3, [pc, #228]	; (800751c <xTaskResumeAll+0x118>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3b01      	subs	r3, #1
 800743c:	4a37      	ldr	r2, [pc, #220]	; (800751c <xTaskResumeAll+0x118>)
 800743e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007440:	4b36      	ldr	r3, [pc, #216]	; (800751c <xTaskResumeAll+0x118>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d162      	bne.n	800750e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007448:	4b35      	ldr	r3, [pc, #212]	; (8007520 <xTaskResumeAll+0x11c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d05e      	beq.n	800750e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007450:	e02f      	b.n	80074b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007452:	4b34      	ldr	r3, [pc, #208]	; (8007524 <xTaskResumeAll+0x120>)
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3318      	adds	r3, #24
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe fce4 	bl	8005e2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3304      	adds	r3, #4
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe fcdf 	bl	8005e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007472:	4b2d      	ldr	r3, [pc, #180]	; (8007528 <xTaskResumeAll+0x124>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d903      	bls.n	8007482 <xTaskResumeAll+0x7e>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	4a2a      	ldr	r2, [pc, #168]	; (8007528 <xTaskResumeAll+0x124>)
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4a27      	ldr	r2, [pc, #156]	; (800752c <xTaskResumeAll+0x128>)
 8007490:	441a      	add	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3304      	adds	r3, #4
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f7fe fc6a 	bl	8005d72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a2:	4b23      	ldr	r3, [pc, #140]	; (8007530 <xTaskResumeAll+0x12c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d302      	bcc.n	80074b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80074ac:	4b21      	ldr	r3, [pc, #132]	; (8007534 <xTaskResumeAll+0x130>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <xTaskResumeAll+0x120>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1cb      	bne.n	8007452 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074c0:	f000 fb56 	bl	8007b70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80074c4:	4b1c      	ldr	r3, [pc, #112]	; (8007538 <xTaskResumeAll+0x134>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d010      	beq.n	80074f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074d0:	f000 f846 	bl	8007560 <xTaskIncrementTick>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80074da:	4b16      	ldr	r3, [pc, #88]	; (8007534 <xTaskResumeAll+0x130>)
 80074dc:	2201      	movs	r2, #1
 80074de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f1      	bne.n	80074d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80074ec:	4b12      	ldr	r3, [pc, #72]	; (8007538 <xTaskResumeAll+0x134>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074f2:	4b10      	ldr	r3, [pc, #64]	; (8007534 <xTaskResumeAll+0x130>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d009      	beq.n	800750e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074fa:	2301      	movs	r3, #1
 80074fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074fe:	4b0f      	ldr	r3, [pc, #60]	; (800753c <xTaskResumeAll+0x138>)
 8007500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800750e:	f001 f9bd 	bl	800888c <vPortExitCritical>

	return xAlreadyYielded;
 8007512:	68bb      	ldr	r3, [r7, #8]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20000c98 	.word	0x20000c98
 8007520:	20000c70 	.word	0x20000c70
 8007524:	20000c30 	.word	0x20000c30
 8007528:	20000c78 	.word	0x20000c78
 800752c:	200007a0 	.word	0x200007a0
 8007530:	2000079c 	.word	0x2000079c
 8007534:	20000c84 	.word	0x20000c84
 8007538:	20000c80 	.word	0x20000c80
 800753c:	e000ed04 	.word	0xe000ed04

08007540 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007546:	4b05      	ldr	r3, [pc, #20]	; (800755c <xTaskGetTickCount+0x1c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800754c:	687b      	ldr	r3, [r7, #4]
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000c74 	.word	0x20000c74

08007560 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800756a:	4b4f      	ldr	r3, [pc, #316]	; (80076a8 <xTaskIncrementTick+0x148>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f040 808a 	bne.w	8007688 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007574:	4b4d      	ldr	r3, [pc, #308]	; (80076ac <xTaskIncrementTick+0x14c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800757c:	4a4b      	ldr	r2, [pc, #300]	; (80076ac <xTaskIncrementTick+0x14c>)
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d121      	bne.n	80075cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007588:	4b49      	ldr	r3, [pc, #292]	; (80076b0 <xTaskIncrementTick+0x150>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <xTaskIncrementTick+0x4a>
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	b672      	cpsid	i
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	b662      	cpsie	i
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	e7fe      	b.n	80075a8 <xTaskIncrementTick+0x48>
 80075aa:	4b41      	ldr	r3, [pc, #260]	; (80076b0 <xTaskIncrementTick+0x150>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	4b40      	ldr	r3, [pc, #256]	; (80076b4 <xTaskIncrementTick+0x154>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a3e      	ldr	r2, [pc, #248]	; (80076b0 <xTaskIncrementTick+0x150>)
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	4a3e      	ldr	r2, [pc, #248]	; (80076b4 <xTaskIncrementTick+0x154>)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	4b3e      	ldr	r3, [pc, #248]	; (80076b8 <xTaskIncrementTick+0x158>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a3c      	ldr	r2, [pc, #240]	; (80076b8 <xTaskIncrementTick+0x158>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	f000 fad2 	bl	8007b70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075cc:	4b3b      	ldr	r3, [pc, #236]	; (80076bc <xTaskIncrementTick+0x15c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d349      	bcc.n	800766a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075d6:	4b36      	ldr	r3, [pc, #216]	; (80076b0 <xTaskIncrementTick+0x150>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e0:	4b36      	ldr	r3, [pc, #216]	; (80076bc <xTaskIncrementTick+0x15c>)
 80075e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075e6:	601a      	str	r2, [r3, #0]
					break;
 80075e8:	e03f      	b.n	800766a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ea:	4b31      	ldr	r3, [pc, #196]	; (80076b0 <xTaskIncrementTick+0x150>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d203      	bcs.n	800760a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007602:	4a2e      	ldr	r2, [pc, #184]	; (80076bc <xTaskIncrementTick+0x15c>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007608:	e02f      	b.n	800766a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	3304      	adds	r3, #4
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fc0c 	bl	8005e2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	3318      	adds	r3, #24
 8007620:	4618      	mov	r0, r3
 8007622:	f7fe fc03 	bl	8005e2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762a:	4b25      	ldr	r3, [pc, #148]	; (80076c0 <xTaskIncrementTick+0x160>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d903      	bls.n	800763a <xTaskIncrementTick+0xda>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	4a22      	ldr	r2, [pc, #136]	; (80076c0 <xTaskIncrementTick+0x160>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <xTaskIncrementTick+0x164>)
 8007648:	441a      	add	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	3304      	adds	r3, #4
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f7fe fb8e 	bl	8005d72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765a:	4b1b      	ldr	r3, [pc, #108]	; (80076c8 <xTaskIncrementTick+0x168>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	429a      	cmp	r2, r3
 8007662:	d3b8      	bcc.n	80075d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007668:	e7b5      	b.n	80075d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800766a:	4b17      	ldr	r3, [pc, #92]	; (80076c8 <xTaskIncrementTick+0x168>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4914      	ldr	r1, [pc, #80]	; (80076c4 <xTaskIncrementTick+0x164>)
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d907      	bls.n	8007692 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007682:	2301      	movs	r3, #1
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e004      	b.n	8007692 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <xTaskIncrementTick+0x16c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3301      	adds	r3, #1
 800768e:	4a0f      	ldr	r2, [pc, #60]	; (80076cc <xTaskIncrementTick+0x16c>)
 8007690:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007692:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <xTaskIncrementTick+0x170>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800769a:	2301      	movs	r3, #1
 800769c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800769e:	697b      	ldr	r3, [r7, #20]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000c98 	.word	0x20000c98
 80076ac:	20000c74 	.word	0x20000c74
 80076b0:	20000c28 	.word	0x20000c28
 80076b4:	20000c2c 	.word	0x20000c2c
 80076b8:	20000c88 	.word	0x20000c88
 80076bc:	20000c90 	.word	0x20000c90
 80076c0:	20000c78 	.word	0x20000c78
 80076c4:	200007a0 	.word	0x200007a0
 80076c8:	2000079c 	.word	0x2000079c
 80076cc:	20000c80 	.word	0x20000c80
 80076d0:	20000c84 	.word	0x20000c84

080076d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076da:	4b28      	ldr	r3, [pc, #160]	; (800777c <vTaskSwitchContext+0xa8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076e2:	4b27      	ldr	r3, [pc, #156]	; (8007780 <vTaskSwitchContext+0xac>)
 80076e4:	2201      	movs	r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076e8:	e042      	b.n	8007770 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80076ea:	4b25      	ldr	r3, [pc, #148]	; (8007780 <vTaskSwitchContext+0xac>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f0:	4b24      	ldr	r3, [pc, #144]	; (8007784 <vTaskSwitchContext+0xb0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e011      	b.n	800771c <vTaskSwitchContext+0x48>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10b      	bne.n	8007716 <vTaskSwitchContext+0x42>
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	b672      	cpsid	i
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	b662      	cpsie	i
 8007712:	607b      	str	r3, [r7, #4]
 8007714:	e7fe      	b.n	8007714 <vTaskSwitchContext+0x40>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3b01      	subs	r3, #1
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	491a      	ldr	r1, [pc, #104]	; (8007788 <vTaskSwitchContext+0xb4>)
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0e3      	beq.n	80076f8 <vTaskSwitchContext+0x24>
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4a13      	ldr	r2, [pc, #76]	; (8007788 <vTaskSwitchContext+0xb4>)
 800773c:	4413      	add	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	605a      	str	r2, [r3, #4]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	3308      	adds	r3, #8
 8007752:	429a      	cmp	r2, r3
 8007754:	d104      	bne.n	8007760 <vTaskSwitchContext+0x8c>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	605a      	str	r2, [r3, #4]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	4a09      	ldr	r2, [pc, #36]	; (800778c <vTaskSwitchContext+0xb8>)
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	4a06      	ldr	r2, [pc, #24]	; (8007784 <vTaskSwitchContext+0xb0>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6013      	str	r3, [r2, #0]
}
 8007770:	bf00      	nop
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	20000c98 	.word	0x20000c98
 8007780:	20000c84 	.word	0x20000c84
 8007784:	20000c78 	.word	0x20000c78
 8007788:	200007a0 	.word	0x200007a0
 800778c:	2000079c 	.word	0x2000079c

08007790 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <vTaskPlaceOnEventList+0x28>
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	b672      	cpsid	i
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	b662      	cpsie	i
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	e7fe      	b.n	80077b6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077b8:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <vTaskPlaceOnEventList+0x48>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3318      	adds	r3, #24
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fe fafa 	bl	8005dba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077c6:	2101      	movs	r1, #1
 80077c8:	6838      	ldr	r0, [r7, #0]
 80077ca:	f000 fb7f 	bl	8007ecc <prvAddCurrentTaskToDelayedList>
}
 80077ce:	bf00      	nop
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	2000079c 	.word	0x2000079c

080077dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10b      	bne.n	8007806 <vTaskPlaceOnEventListRestricted+0x2a>
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	b672      	cpsid	i
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	b662      	cpsie	i
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	e7fe      	b.n	8007804 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007806:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <vTaskPlaceOnEventListRestricted+0x54>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3318      	adds	r3, #24
 800780c:	4619      	mov	r1, r3
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7fe faaf 	bl	8005d72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800781a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800781e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	68b8      	ldr	r0, [r7, #8]
 8007824:	f000 fb52 	bl	8007ecc <prvAddCurrentTaskToDelayedList>
	}
 8007828:	bf00      	nop
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	2000079c 	.word	0x2000079c

08007834 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10b      	bne.n	8007862 <xTaskRemoveFromEventList+0x2e>
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	b672      	cpsid	i
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	b662      	cpsie	i
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	e7fe      	b.n	8007860 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3318      	adds	r3, #24
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fae0 	bl	8005e2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800786c:	4b1d      	ldr	r3, [pc, #116]	; (80078e4 <xTaskRemoveFromEventList+0xb0>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d11d      	bne.n	80078b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	3304      	adds	r3, #4
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fad7 	bl	8005e2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <xTaskRemoveFromEventList+0xb4>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d903      	bls.n	8007892 <xTaskRemoveFromEventList+0x5e>
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a16      	ldr	r2, [pc, #88]	; (80078e8 <xTaskRemoveFromEventList+0xb4>)
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4a13      	ldr	r2, [pc, #76]	; (80078ec <xTaskRemoveFromEventList+0xb8>)
 80078a0:	441a      	add	r2, r3
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	3304      	adds	r3, #4
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	f7fe fa62 	bl	8005d72 <vListInsertEnd>
 80078ae:	e005      	b.n	80078bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	3318      	adds	r3, #24
 80078b4:	4619      	mov	r1, r3
 80078b6:	480e      	ldr	r0, [pc, #56]	; (80078f0 <xTaskRemoveFromEventList+0xbc>)
 80078b8:	f7fe fa5b 	bl	8005d72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c0:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <xTaskRemoveFromEventList+0xc0>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d905      	bls.n	80078d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078ca:	2301      	movs	r3, #1
 80078cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078ce:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <xTaskRemoveFromEventList+0xc4>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e001      	b.n	80078da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078da:	697b      	ldr	r3, [r7, #20]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20000c98 	.word	0x20000c98
 80078e8:	20000c78 	.word	0x20000c78
 80078ec:	200007a0 	.word	0x200007a0
 80078f0:	20000c30 	.word	0x20000c30
 80078f4:	2000079c 	.word	0x2000079c
 80078f8:	20000c84 	.word	0x20000c84

080078fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007904:	4b06      	ldr	r3, [pc, #24]	; (8007920 <vTaskInternalSetTimeOutState+0x24>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <vTaskInternalSetTimeOutState+0x28>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	605a      	str	r2, [r3, #4]
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	20000c88 	.word	0x20000c88
 8007924:	20000c74 	.word	0x20000c74

08007928 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b088      	sub	sp, #32
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10b      	bne.n	8007950 <xTaskCheckForTimeOut+0x28>
 8007938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793c:	b672      	cpsid	i
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	b662      	cpsie	i
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	e7fe      	b.n	800794e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10b      	bne.n	800796e <xTaskCheckForTimeOut+0x46>
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	b672      	cpsid	i
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	b662      	cpsie	i
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	e7fe      	b.n	800796c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800796e:	f000 ff5b 	bl	8008828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007972:	4b1d      	ldr	r3, [pc, #116]	; (80079e8 <xTaskCheckForTimeOut+0xc0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800798a:	d102      	bne.n	8007992 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800798c:	2300      	movs	r3, #0
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	e023      	b.n	80079da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b15      	ldr	r3, [pc, #84]	; (80079ec <xTaskCheckForTimeOut+0xc4>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d007      	beq.n	80079ae <xTaskCheckForTimeOut+0x86>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d302      	bcc.n	80079ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	61fb      	str	r3, [r7, #28]
 80079ac:	e015      	b.n	80079da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d20b      	bcs.n	80079d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff ff99 	bl	80078fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	e004      	b.n	80079da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079d6:	2301      	movs	r3, #1
 80079d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079da:	f000 ff57 	bl	800888c <vPortExitCritical>

	return xReturn;
 80079de:	69fb      	ldr	r3, [r7, #28]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3720      	adds	r7, #32
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000c74 	.word	0x20000c74
 80079ec:	20000c88 	.word	0x20000c88

080079f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <vTaskMissedYield+0x14>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]
}
 80079fa:	bf00      	nop
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	20000c84 	.word	0x20000c84

08007a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a10:	f000 f852 	bl	8007ab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a14:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <prvIdleTask+0x28>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d9f9      	bls.n	8007a10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a1c:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <prvIdleTask+0x2c>)
 8007a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a2c:	e7f0      	b.n	8007a10 <prvIdleTask+0x8>
 8007a2e:	bf00      	nop
 8007a30:	200007a0 	.word	0x200007a0
 8007a34:	e000ed04 	.word	0xe000ed04

08007a38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a3e:	2300      	movs	r3, #0
 8007a40:	607b      	str	r3, [r7, #4]
 8007a42:	e00c      	b.n	8007a5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4a12      	ldr	r2, [pc, #72]	; (8007a98 <prvInitialiseTaskLists+0x60>)
 8007a50:	4413      	add	r3, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe f960 	bl	8005d18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b37      	cmp	r3, #55	; 0x37
 8007a62:	d9ef      	bls.n	8007a44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a64:	480d      	ldr	r0, [pc, #52]	; (8007a9c <prvInitialiseTaskLists+0x64>)
 8007a66:	f7fe f957 	bl	8005d18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a6a:	480d      	ldr	r0, [pc, #52]	; (8007aa0 <prvInitialiseTaskLists+0x68>)
 8007a6c:	f7fe f954 	bl	8005d18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a70:	480c      	ldr	r0, [pc, #48]	; (8007aa4 <prvInitialiseTaskLists+0x6c>)
 8007a72:	f7fe f951 	bl	8005d18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a76:	480c      	ldr	r0, [pc, #48]	; (8007aa8 <prvInitialiseTaskLists+0x70>)
 8007a78:	f7fe f94e 	bl	8005d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a7c:	480b      	ldr	r0, [pc, #44]	; (8007aac <prvInitialiseTaskLists+0x74>)
 8007a7e:	f7fe f94b 	bl	8005d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <prvInitialiseTaskLists+0x78>)
 8007a84:	4a05      	ldr	r2, [pc, #20]	; (8007a9c <prvInitialiseTaskLists+0x64>)
 8007a86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a88:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <prvInitialiseTaskLists+0x7c>)
 8007a8a:	4a05      	ldr	r2, [pc, #20]	; (8007aa0 <prvInitialiseTaskLists+0x68>)
 8007a8c:	601a      	str	r2, [r3, #0]
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	200007a0 	.word	0x200007a0
 8007a9c:	20000c00 	.word	0x20000c00
 8007aa0:	20000c14 	.word	0x20000c14
 8007aa4:	20000c30 	.word	0x20000c30
 8007aa8:	20000c44 	.word	0x20000c44
 8007aac:	20000c5c 	.word	0x20000c5c
 8007ab0:	20000c28 	.word	0x20000c28
 8007ab4:	20000c2c 	.word	0x20000c2c

08007ab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007abe:	e019      	b.n	8007af4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ac0:	f000 feb2 	bl	8008828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <prvCheckTasksWaitingTermination+0x4c>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe f9ab 	bl	8005e2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <prvCheckTasksWaitingTermination+0x50>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	4a0a      	ldr	r2, [pc, #40]	; (8007b08 <prvCheckTasksWaitingTermination+0x50>)
 8007ade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <prvCheckTasksWaitingTermination+0x54>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <prvCheckTasksWaitingTermination+0x54>)
 8007ae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007aea:	f000 fecf 	bl	800888c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f80e 	bl	8007b10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007af4:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <prvCheckTasksWaitingTermination+0x54>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e1      	bne.n	8007ac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000c44 	.word	0x20000c44
 8007b08:	20000c70 	.word	0x20000c70
 8007b0c:	20000c58 	.word	0x20000c58

08007b10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d108      	bne.n	8007b34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 f868 	bl	8008bfc <vPortFree>
				vPortFree( pxTCB );
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f865 	bl	8008bfc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b32:	e019      	b.n	8007b68 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d103      	bne.n	8007b46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 f85c 	bl	8008bfc <vPortFree>
	}
 8007b44:	e010      	b.n	8007b68 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d00b      	beq.n	8007b68 <prvDeleteTCB+0x58>
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	b672      	cpsid	i
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	b662      	cpsie	i
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e7fe      	b.n	8007b66 <prvDeleteTCB+0x56>
	}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b76:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <prvResetNextTaskUnblockTime+0x38>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d104      	bne.n	8007b8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b80:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <prvResetNextTaskUnblockTime+0x3c>)
 8007b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b88:	e008      	b.n	8007b9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b8a:	4b07      	ldr	r3, [pc, #28]	; (8007ba8 <prvResetNextTaskUnblockTime+0x38>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	4a04      	ldr	r2, [pc, #16]	; (8007bac <prvResetNextTaskUnblockTime+0x3c>)
 8007b9a:	6013      	str	r3, [r2, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	20000c28 	.word	0x20000c28
 8007bac:	20000c90 	.word	0x20000c90

08007bb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <xTaskGetSchedulerState+0x34>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	607b      	str	r3, [r7, #4]
 8007bc2:	e008      	b.n	8007bd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bc4:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <xTaskGetSchedulerState+0x38>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d102      	bne.n	8007bd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	607b      	str	r3, [r7, #4]
 8007bd0:	e001      	b.n	8007bd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bd6:	687b      	ldr	r3, [r7, #4]
	}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	20000c7c 	.word	0x20000c7c
 8007be8:	20000c98 	.word	0x20000c98

08007bec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d051      	beq.n	8007ca6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c06:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <xTaskPriorityInherit+0xc4>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d241      	bcs.n	8007c94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	db06      	blt.n	8007c26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c18:	4b25      	ldr	r3, [pc, #148]	; (8007cb0 <xTaskPriorityInherit+0xc4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6959      	ldr	r1, [r3, #20]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <xTaskPriorityInherit+0xc8>)
 8007c38:	4413      	add	r3, r2
 8007c3a:	4299      	cmp	r1, r3
 8007c3c:	d122      	bne.n	8007c84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe f8f2 	bl	8005e2c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c48:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <xTaskPriorityInherit+0xc4>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c56:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <xTaskPriorityInherit+0xcc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d903      	bls.n	8007c66 <xTaskPriorityInherit+0x7a>
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a15      	ldr	r2, [pc, #84]	; (8007cb8 <xTaskPriorityInherit+0xcc>)
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4a10      	ldr	r2, [pc, #64]	; (8007cb4 <xTaskPriorityInherit+0xc8>)
 8007c74:	441a      	add	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f7fe f878 	bl	8005d72 <vListInsertEnd>
 8007c82:	e004      	b.n	8007c8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <xTaskPriorityInherit+0xc4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	e008      	b.n	8007ca6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <xTaskPriorityInherit+0xc4>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d201      	bcs.n	8007ca6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
	}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	2000079c 	.word	0x2000079c
 8007cb4:	200007a0 	.word	0x200007a0
 8007cb8:	20000c78 	.word	0x20000c78

08007cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d058      	beq.n	8007d84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cd2:	4b2f      	ldr	r3, [pc, #188]	; (8007d90 <xTaskPriorityDisinherit+0xd4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d00b      	beq.n	8007cf4 <xTaskPriorityDisinherit+0x38>
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	b672      	cpsid	i
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	b662      	cpsie	i
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	e7fe      	b.n	8007cf2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10b      	bne.n	8007d14 <xTaskPriorityDisinherit+0x58>
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	b672      	cpsid	i
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	b662      	cpsie	i
 8007d10:	60bb      	str	r3, [r7, #8]
 8007d12:	e7fe      	b.n	8007d12 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d18:	1e5a      	subs	r2, r3, #1
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d02c      	beq.n	8007d84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d128      	bne.n	8007d84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3304      	adds	r3, #4
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe f878 	bl	8005e2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d54:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <xTaskPriorityDisinherit+0xd8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d903      	bls.n	8007d64 <xTaskPriorityDisinherit+0xa8>
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	4a0c      	ldr	r2, [pc, #48]	; (8007d94 <xTaskPriorityDisinherit+0xd8>)
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d68:	4613      	mov	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4a09      	ldr	r2, [pc, #36]	; (8007d98 <xTaskPriorityDisinherit+0xdc>)
 8007d72:	441a      	add	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	f7fd fff9 	bl	8005d72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d80:	2301      	movs	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d84:	697b      	ldr	r3, [r7, #20]
	}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	2000079c 	.word	0x2000079c
 8007d94:	20000c78 	.word	0x20000c78
 8007d98:	200007a0 	.word	0x200007a0

08007d9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007daa:	2301      	movs	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d06c      	beq.n	8007e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10b      	bne.n	8007dd4 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	b672      	cpsid	i
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	b662      	cpsie	i
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	e7fe      	b.n	8007dd2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d902      	bls.n	8007de4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	e002      	b.n	8007dea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	69fa      	ldr	r2, [r7, #28]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d04c      	beq.n	8007e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d147      	bne.n	8007e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007dfe:	4b26      	ldr	r3, [pc, #152]	; (8007e98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d10b      	bne.n	8007e20 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	b672      	cpsid	i
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	b662      	cpsie	i
 8007e1c:	60bb      	str	r3, [r7, #8]
 8007e1e:	e7fe      	b.n	8007e1e <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	69fa      	ldr	r2, [r7, #28]
 8007e2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	db04      	blt.n	8007e3e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	6959      	ldr	r1, [r3, #20]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4613      	mov	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e4e:	4413      	add	r3, r2
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d11c      	bne.n	8007e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fd ffe7 	bl	8005e2c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e62:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d903      	bls.n	8007e72 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ea0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4a07      	ldr	r2, [pc, #28]	; (8007e9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e80:	441a      	add	r2, r3
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	3304      	adds	r3, #4
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7fd ff72 	bl	8005d72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e8e:	bf00      	nop
 8007e90:	3720      	adds	r7, #32
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	2000079c 	.word	0x2000079c
 8007e9c:	200007a0 	.word	0x200007a0
 8007ea0:	20000c78 	.word	0x20000c78

08007ea4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007ea8:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007eb0:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eb6:	3201      	adds	r2, #1
 8007eb8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007eba:	4b03      	ldr	r3, [pc, #12]	; (8007ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
	}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	2000079c 	.word	0x2000079c

08007ecc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ed6:	4b21      	ldr	r3, [pc, #132]	; (8007f5c <prvAddCurrentTaskToDelayedList+0x90>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007edc:	4b20      	ldr	r3, [pc, #128]	; (8007f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fd ffa2 	bl	8005e2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eee:	d10a      	bne.n	8007f06 <prvAddCurrentTaskToDelayedList+0x3a>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d007      	beq.n	8007f06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ef6:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3304      	adds	r3, #4
 8007efc:	4619      	mov	r1, r3
 8007efe:	4819      	ldr	r0, [pc, #100]	; (8007f64 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f00:	f7fd ff37 	bl	8005d72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f04:	e026      	b.n	8007f54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f0e:	4b14      	ldr	r3, [pc, #80]	; (8007f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d209      	bcs.n	8007f32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f1e:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3304      	adds	r3, #4
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f7fd ff45 	bl	8005dba <vListInsert>
}
 8007f30:	e010      	b.n	8007f54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f32:	4b0e      	ldr	r3, [pc, #56]	; (8007f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	f7fd ff3b 	bl	8005dba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f44:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d202      	bcs.n	8007f54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f4e:	4a08      	ldr	r2, [pc, #32]	; (8007f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	6013      	str	r3, [r2, #0]
}
 8007f54:	bf00      	nop
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20000c74 	.word	0x20000c74
 8007f60:	2000079c 	.word	0x2000079c
 8007f64:	20000c5c 	.word	0x20000c5c
 8007f68:	20000c2c 	.word	0x20000c2c
 8007f6c:	20000c28 	.word	0x20000c28
 8007f70:	20000c90 	.word	0x20000c90

08007f74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08a      	sub	sp, #40	; 0x28
 8007f78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f7e:	f000 fb0d 	bl	800859c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f82:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <xTimerCreateTimerTask+0x84>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d021      	beq.n	8007fce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f92:	1d3a      	adds	r2, r7, #4
 8007f94:	f107 0108 	add.w	r1, r7, #8
 8007f98:	f107 030c 	add.w	r3, r7, #12
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fd fea1 	bl	8005ce4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	9202      	str	r2, [sp, #8]
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	2332      	movs	r3, #50	; 0x32
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	460a      	mov	r2, r1
 8007fb4:	4911      	ldr	r1, [pc, #68]	; (8007ffc <xTimerCreateTimerTask+0x88>)
 8007fb6:	4812      	ldr	r0, [pc, #72]	; (8008000 <xTimerCreateTimerTask+0x8c>)
 8007fb8:	f7fe ffd2 	bl	8006f60 <xTaskCreateStatic>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	4b11      	ldr	r3, [pc, #68]	; (8008004 <xTimerCreateTimerTask+0x90>)
 8007fc0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fc2:	4b10      	ldr	r3, [pc, #64]	; (8008004 <xTimerCreateTimerTask+0x90>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10b      	bne.n	8007fec <xTimerCreateTimerTask+0x78>
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	b672      	cpsid	i
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	b662      	cpsie	i
 8007fe8:	613b      	str	r3, [r7, #16]
 8007fea:	e7fe      	b.n	8007fea <xTimerCreateTimerTask+0x76>
	return xReturn;
 8007fec:	697b      	ldr	r3, [r7, #20]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000ccc 	.word	0x20000ccc
 8007ffc:	08009898 	.word	0x08009898
 8008000:	08008141 	.word	0x08008141
 8008004:	20000cd0 	.word	0x20000cd0

08008008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008016:	2300      	movs	r3, #0
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <xTimerGenericCommand+0x30>
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	b672      	cpsid	i
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	b662      	cpsie	i
 8008034:	623b      	str	r3, [r7, #32]
 8008036:	e7fe      	b.n	8008036 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008038:	4b19      	ldr	r3, [pc, #100]	; (80080a0 <xTimerGenericCommand+0x98>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d02a      	beq.n	8008096 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b05      	cmp	r3, #5
 8008050:	dc18      	bgt.n	8008084 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008052:	f7ff fdad 	bl	8007bb0 <xTaskGetSchedulerState>
 8008056:	4603      	mov	r3, r0
 8008058:	2b02      	cmp	r3, #2
 800805a:	d109      	bne.n	8008070 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800805c:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <xTimerGenericCommand+0x98>)
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	f107 0110 	add.w	r1, r7, #16
 8008064:	2300      	movs	r3, #0
 8008066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008068:	f7fe f8c4 	bl	80061f4 <xQueueGenericSend>
 800806c:	6278      	str	r0, [r7, #36]	; 0x24
 800806e:	e012      	b.n	8008096 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <xTimerGenericCommand+0x98>)
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	f107 0110 	add.w	r1, r7, #16
 8008078:	2300      	movs	r3, #0
 800807a:	2200      	movs	r2, #0
 800807c:	f7fe f8ba 	bl	80061f4 <xQueueGenericSend>
 8008080:	6278      	str	r0, [r7, #36]	; 0x24
 8008082:	e008      	b.n	8008096 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008084:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <xTimerGenericCommand+0x98>)
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	f107 0110 	add.w	r1, r7, #16
 800808c:	2300      	movs	r3, #0
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	f7fe f9b2 	bl	80063f8 <xQueueGenericSendFromISR>
 8008094:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008098:	4618      	mov	r0, r3
 800809a:	3728      	adds	r7, #40	; 0x28
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20000ccc 	.word	0x20000ccc

080080a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ae:	4b23      	ldr	r3, [pc, #140]	; (800813c <prvProcessExpiredTimer+0x98>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fd feb5 	bl	8005e2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d023      	beq.n	8008118 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	699a      	ldr	r2, [r3, #24]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	18d1      	adds	r1, r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	6978      	ldr	r0, [r7, #20]
 80080de:	f000 f8d3 	bl	8008288 <prvInsertTimerInActiveList>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d020      	beq.n	800812a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080e8:	2300      	movs	r3, #0
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	2300      	movs	r3, #0
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	2100      	movs	r1, #0
 80080f2:	6978      	ldr	r0, [r7, #20]
 80080f4:	f7ff ff88 	bl	8008008 <xTimerGenericCommand>
 80080f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d114      	bne.n	800812a <prvProcessExpiredTimer+0x86>
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	b672      	cpsid	i
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	b662      	cpsie	i
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	e7fe      	b.n	8008116 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800811e:	f023 0301 	bic.w	r3, r3, #1
 8008122:	b2da      	uxtb	r2, r3
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	6978      	ldr	r0, [r7, #20]
 8008130:	4798      	blx	r3
}
 8008132:	bf00      	nop
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000cc4 	.word	0x20000cc4

08008140 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008148:	f107 0308 	add.w	r3, r7, #8
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f857 	bl	8008200 <prvGetNextExpireTime>
 8008152:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4619      	mov	r1, r3
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 f803 	bl	8008164 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800815e:	f000 f8d5 	bl	800830c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008162:	e7f1      	b.n	8008148 <prvTimerTask+0x8>

08008164 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800816e:	f7ff f93b 	bl	80073e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008172:	f107 0308 	add.w	r3, r7, #8
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f866 	bl	8008248 <prvSampleTimeNow>
 800817c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d130      	bne.n	80081e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <prvProcessTimerOrBlockTask+0x3c>
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	429a      	cmp	r2, r3
 8008190:	d806      	bhi.n	80081a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008192:	f7ff f937 	bl	8007404 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008196:	68f9      	ldr	r1, [r7, #12]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff ff83 	bl	80080a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800819e:	e024      	b.n	80081ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d008      	beq.n	80081b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081a6:	4b13      	ldr	r3, [pc, #76]	; (80081f4 <prvProcessTimerOrBlockTask+0x90>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <prvProcessTimerOrBlockTask+0x50>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e000      	b.n	80081b6 <prvProcessTimerOrBlockTask+0x52>
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081b8:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <prvProcessTimerOrBlockTask+0x94>)
 80081ba:	6818      	ldr	r0, [r3, #0]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	4619      	mov	r1, r3
 80081c6:	f7fe fe97 	bl	8006ef8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081ca:	f7ff f91b 	bl	8007404 <xTaskResumeAll>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80081d4:	4b09      	ldr	r3, [pc, #36]	; (80081fc <prvProcessTimerOrBlockTask+0x98>)
 80081d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	f3bf 8f6f 	isb	sy
}
 80081e4:	e001      	b.n	80081ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081e6:	f7ff f90d 	bl	8007404 <xTaskResumeAll>
}
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000cc8 	.word	0x20000cc8
 80081f8:	20000ccc 	.word	0x20000ccc
 80081fc:	e000ed04 	.word	0xe000ed04

08008200 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008208:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <prvGetNextExpireTime+0x44>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <prvGetNextExpireTime+0x16>
 8008212:	2201      	movs	r2, #1
 8008214:	e000      	b.n	8008218 <prvGetNextExpireTime+0x18>
 8008216:	2200      	movs	r2, #0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d105      	bne.n	8008230 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008224:	4b07      	ldr	r3, [pc, #28]	; (8008244 <prvGetNextExpireTime+0x44>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	e001      	b.n	8008234 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008234:	68fb      	ldr	r3, [r7, #12]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20000cc4 	.word	0x20000cc4

08008248 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008250:	f7ff f976 	bl	8007540 <xTaskGetTickCount>
 8008254:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008256:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <prvSampleTimeNow+0x3c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	429a      	cmp	r2, r3
 800825e:	d205      	bcs.n	800826c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008260:	f000 f936 	bl	80084d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	e002      	b.n	8008272 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008272:	4a04      	ldr	r2, [pc, #16]	; (8008284 <prvSampleTimeNow+0x3c>)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008278:	68fb      	ldr	r3, [r7, #12]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000cd4 	.word	0x20000cd4

08008288 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d812      	bhi.n	80082d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	1ad2      	subs	r2, r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d302      	bcc.n	80082c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082bc:	2301      	movs	r3, #1
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	e01b      	b.n	80082fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082c2:	4b10      	ldr	r3, [pc, #64]	; (8008304 <prvInsertTimerInActiveList+0x7c>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3304      	adds	r3, #4
 80082ca:	4619      	mov	r1, r3
 80082cc:	4610      	mov	r0, r2
 80082ce:	f7fd fd74 	bl	8005dba <vListInsert>
 80082d2:	e012      	b.n	80082fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d206      	bcs.n	80082ea <prvInsertTimerInActiveList+0x62>
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d302      	bcc.n	80082ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082e4:	2301      	movs	r3, #1
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	e007      	b.n	80082fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082ea:	4b07      	ldr	r3, [pc, #28]	; (8008308 <prvInsertTimerInActiveList+0x80>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4619      	mov	r1, r3
 80082f4:	4610      	mov	r0, r2
 80082f6:	f7fd fd60 	bl	8005dba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082fa:	697b      	ldr	r3, [r7, #20]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	20000cc8 	.word	0x20000cc8
 8008308:	20000cc4 	.word	0x20000cc4

0800830c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08e      	sub	sp, #56	; 0x38
 8008310:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008312:	e0cc      	b.n	80084ae <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	da19      	bge.n	800834e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800831a:	1d3b      	adds	r3, r7, #4
 800831c:	3304      	adds	r3, #4
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <prvProcessReceivedCommands+0x32>
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	b672      	cpsid	i
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	b662      	cpsie	i
 800833a:	61fb      	str	r3, [r7, #28]
 800833c:	e7fe      	b.n	800833c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008344:	6850      	ldr	r0, [r2, #4]
 8008346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008348:	6892      	ldr	r2, [r2, #8]
 800834a:	4611      	mov	r1, r2
 800834c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f2c0 80ab 	blt.w	80084ac <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d004      	beq.n	800836c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	3304      	adds	r3, #4
 8008366:	4618      	mov	r0, r3
 8008368:	f7fd fd60 	bl	8005e2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800836c:	463b      	mov	r3, r7
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff ff6a 	bl	8008248 <prvSampleTimeNow>
 8008374:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b09      	cmp	r3, #9
 800837a:	f200 8098 	bhi.w	80084ae <prvProcessReceivedCommands+0x1a2>
 800837e:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <prvProcessReceivedCommands+0x78>)
 8008380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008384:	080083ad 	.word	0x080083ad
 8008388:	080083ad 	.word	0x080083ad
 800838c:	080083ad 	.word	0x080083ad
 8008390:	08008423 	.word	0x08008423
 8008394:	08008437 	.word	0x08008437
 8008398:	08008483 	.word	0x08008483
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	080083ad 	.word	0x080083ad
 80083a4:	08008423 	.word	0x08008423
 80083a8:	08008437 	.word	0x08008437
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083b2:	f043 0301 	orr.w	r3, r3, #1
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	18d1      	adds	r1, r2, r3
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083cc:	f7ff ff5c 	bl	8008288 <prvInsertTimerInActiveList>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d06b      	beq.n	80084ae <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d060      	beq.n	80084ae <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	441a      	add	r2, r3
 80083f4:	2300      	movs	r3, #0
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	2300      	movs	r3, #0
 80083fa:	2100      	movs	r1, #0
 80083fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fe:	f7ff fe03 	bl	8008008 <xTimerGenericCommand>
 8008402:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d151      	bne.n	80084ae <prvProcessReceivedCommands+0x1a2>
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	b672      	cpsid	i
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	b662      	cpsie	i
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	e7fe      	b.n	8008420 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008428:	f023 0301 	bic.w	r3, r3, #1
 800842c:	b2da      	uxtb	r2, r3
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008434:	e03b      	b.n	80084ae <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800843c:	f043 0301 	orr.w	r3, r3, #1
 8008440:	b2da      	uxtb	r2, r3
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <prvProcessReceivedCommands+0x162>
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	b672      	cpsid	i
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	b662      	cpsie	i
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	e7fe      	b.n	800846c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	18d1      	adds	r1, r2, r3
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847c:	f7ff ff04 	bl	8008288 <prvInsertTimerInActiveList>
					break;
 8008480:	e015      	b.n	80084ae <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008488:	f003 0302 	and.w	r3, r3, #2
 800848c:	2b00      	cmp	r3, #0
 800848e:	d103      	bne.n	8008498 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008492:	f000 fbb3 	bl	8008bfc <vPortFree>
 8008496:	e00a      	b.n	80084ae <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800849e:	f023 0301 	bic.w	r3, r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084aa:	e000      	b.n	80084ae <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ae:	4b07      	ldr	r3, [pc, #28]	; (80084cc <prvProcessReceivedCommands+0x1c0>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	1d39      	adds	r1, r7, #4
 80084b4:	2200      	movs	r2, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe f8cc 	bl	8006654 <xQueueReceive>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f47f af28 	bne.w	8008314 <prvProcessReceivedCommands+0x8>
	}
}
 80084c4:	bf00      	nop
 80084c6:	3730      	adds	r7, #48	; 0x30
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000ccc 	.word	0x20000ccc

080084d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084d6:	e049      	b.n	800856c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084d8:	4b2e      	ldr	r3, [pc, #184]	; (8008594 <prvSwitchTimerLists+0xc4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e2:	4b2c      	ldr	r3, [pc, #176]	; (8008594 <prvSwitchTimerLists+0xc4>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3304      	adds	r3, #4
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fd fc9b 	bl	8005e2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d02f      	beq.n	800856c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4413      	add	r3, r2
 8008514:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	429a      	cmp	r2, r3
 800851c:	d90e      	bls.n	800853c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800852a:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <prvSwitchTimerLists+0xc4>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3304      	adds	r3, #4
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f7fd fc40 	bl	8005dba <vListInsert>
 800853a:	e017      	b.n	800856c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800853c:	2300      	movs	r3, #0
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	2300      	movs	r3, #0
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	2100      	movs	r1, #0
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f7ff fd5e 	bl	8008008 <xTimerGenericCommand>
 800854c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10b      	bne.n	800856c <prvSwitchTimerLists+0x9c>
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	b672      	cpsid	i
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	b662      	cpsie	i
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	e7fe      	b.n	800856a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800856c:	4b09      	ldr	r3, [pc, #36]	; (8008594 <prvSwitchTimerLists+0xc4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1b0      	bne.n	80084d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008576:	4b07      	ldr	r3, [pc, #28]	; (8008594 <prvSwitchTimerLists+0xc4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <prvSwitchTimerLists+0xc8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a04      	ldr	r2, [pc, #16]	; (8008594 <prvSwitchTimerLists+0xc4>)
 8008582:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008584:	4a04      	ldr	r2, [pc, #16]	; (8008598 <prvSwitchTimerLists+0xc8>)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	6013      	str	r3, [r2, #0]
}
 800858a:	bf00      	nop
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000cc4 	.word	0x20000cc4
 8008598:	20000cc8 	.word	0x20000cc8

0800859c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085a2:	f000 f941 	bl	8008828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085a6:	4b15      	ldr	r3, [pc, #84]	; (80085fc <prvCheckForValidListAndQueue+0x60>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d120      	bne.n	80085f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085ae:	4814      	ldr	r0, [pc, #80]	; (8008600 <prvCheckForValidListAndQueue+0x64>)
 80085b0:	f7fd fbb2 	bl	8005d18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085b4:	4813      	ldr	r0, [pc, #76]	; (8008604 <prvCheckForValidListAndQueue+0x68>)
 80085b6:	f7fd fbaf 	bl	8005d18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085ba:	4b13      	ldr	r3, [pc, #76]	; (8008608 <prvCheckForValidListAndQueue+0x6c>)
 80085bc:	4a10      	ldr	r2, [pc, #64]	; (8008600 <prvCheckForValidListAndQueue+0x64>)
 80085be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085c0:	4b12      	ldr	r3, [pc, #72]	; (800860c <prvCheckForValidListAndQueue+0x70>)
 80085c2:	4a10      	ldr	r2, [pc, #64]	; (8008604 <prvCheckForValidListAndQueue+0x68>)
 80085c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085c6:	2300      	movs	r3, #0
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	4b11      	ldr	r3, [pc, #68]	; (8008610 <prvCheckForValidListAndQueue+0x74>)
 80085cc:	4a11      	ldr	r2, [pc, #68]	; (8008614 <prvCheckForValidListAndQueue+0x78>)
 80085ce:	2110      	movs	r1, #16
 80085d0:	200a      	movs	r0, #10
 80085d2:	f7fd fcbf 	bl	8005f54 <xQueueGenericCreateStatic>
 80085d6:	4602      	mov	r2, r0
 80085d8:	4b08      	ldr	r3, [pc, #32]	; (80085fc <prvCheckForValidListAndQueue+0x60>)
 80085da:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085dc:	4b07      	ldr	r3, [pc, #28]	; (80085fc <prvCheckForValidListAndQueue+0x60>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <prvCheckForValidListAndQueue+0x60>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	490b      	ldr	r1, [pc, #44]	; (8008618 <prvCheckForValidListAndQueue+0x7c>)
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fc32 	bl	8006e54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085f0:	f000 f94c 	bl	800888c <vPortExitCritical>
}
 80085f4:	bf00      	nop
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000ccc 	.word	0x20000ccc
 8008600:	20000c9c 	.word	0x20000c9c
 8008604:	20000cb0 	.word	0x20000cb0
 8008608:	20000cc4 	.word	0x20000cc4
 800860c:	20000cc8 	.word	0x20000cc8
 8008610:	20000d78 	.word	0x20000d78
 8008614:	20000cd8 	.word	0x20000cd8
 8008618:	080098a0 	.word	0x080098a0

0800861c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3b04      	subs	r3, #4
 800862c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3b04      	subs	r3, #4
 800863a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f023 0201 	bic.w	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3b04      	subs	r3, #4
 800864a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800864c:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <pxPortInitialiseStack+0x64>)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3b14      	subs	r3, #20
 8008656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3b04      	subs	r3, #4
 8008662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f06f 0202 	mvn.w	r2, #2
 800866a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3b20      	subs	r3, #32
 8008670:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008672:	68fb      	ldr	r3, [r7, #12]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	08008685 	.word	0x08008685

08008684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <prvTaskExitError+0x58>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008696:	d00b      	beq.n	80086b0 <prvTaskExitError+0x2c>
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	b672      	cpsid	i
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	b662      	cpsie	i
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	e7fe      	b.n	80086ae <prvTaskExitError+0x2a>
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	b672      	cpsid	i
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	b662      	cpsie	i
 80086c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086c6:	bf00      	nop
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0fc      	beq.n	80086c8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086ce:	bf00      	nop
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	2000004c 	.word	0x2000004c

080086e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <pxCurrentTCBConst2>)
 80086e2:	6819      	ldr	r1, [r3, #0]
 80086e4:	6808      	ldr	r0, [r1, #0]
 80086e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ea:	f380 8809 	msr	PSP, r0
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f04f 0000 	mov.w	r0, #0
 80086f6:	f380 8811 	msr	BASEPRI, r0
 80086fa:	4770      	bx	lr
 80086fc:	f3af 8000 	nop.w

08008700 <pxCurrentTCBConst2>:
 8008700:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop

08008708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008708:	4808      	ldr	r0, [pc, #32]	; (800872c <prvPortStartFirstTask+0x24>)
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	6800      	ldr	r0, [r0, #0]
 800870e:	f380 8808 	msr	MSP, r0
 8008712:	f04f 0000 	mov.w	r0, #0
 8008716:	f380 8814 	msr	CONTROL, r0
 800871a:	b662      	cpsie	i
 800871c:	b661      	cpsie	f
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	df00      	svc	0
 8008728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800872a:	bf00      	nop
 800872c:	e000ed08 	.word	0xe000ed08

08008730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008736:	4b36      	ldr	r3, [pc, #216]	; (8008810 <xPortStartScheduler+0xe0>)
 8008738:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	22ff      	movs	r2, #255	; 0xff
 8008746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008750:	78fb      	ldrb	r3, [r7, #3]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008758:	b2da      	uxtb	r2, r3
 800875a:	4b2e      	ldr	r3, [pc, #184]	; (8008814 <xPortStartScheduler+0xe4>)
 800875c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800875e:	4b2e      	ldr	r3, [pc, #184]	; (8008818 <xPortStartScheduler+0xe8>)
 8008760:	2207      	movs	r2, #7
 8008762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008764:	e009      	b.n	800877a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008766:	4b2c      	ldr	r3, [pc, #176]	; (8008818 <xPortStartScheduler+0xe8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3b01      	subs	r3, #1
 800876c:	4a2a      	ldr	r2, [pc, #168]	; (8008818 <xPortStartScheduler+0xe8>)
 800876e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	b2db      	uxtb	r3, r3
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	b2db      	uxtb	r3, r3
 8008778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008782:	2b80      	cmp	r3, #128	; 0x80
 8008784:	d0ef      	beq.n	8008766 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008786:	4b24      	ldr	r3, [pc, #144]	; (8008818 <xPortStartScheduler+0xe8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f1c3 0307 	rsb	r3, r3, #7
 800878e:	2b04      	cmp	r3, #4
 8008790:	d00b      	beq.n	80087aa <xPortStartScheduler+0x7a>
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	60bb      	str	r3, [r7, #8]
 80087a8:	e7fe      	b.n	80087a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087aa:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <xPortStartScheduler+0xe8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	021b      	lsls	r3, r3, #8
 80087b0:	4a19      	ldr	r2, [pc, #100]	; (8008818 <xPortStartScheduler+0xe8>)
 80087b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087b4:	4b18      	ldr	r3, [pc, #96]	; (8008818 <xPortStartScheduler+0xe8>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087bc:	4a16      	ldr	r2, [pc, #88]	; (8008818 <xPortStartScheduler+0xe8>)
 80087be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087c8:	4b14      	ldr	r3, [pc, #80]	; (800881c <xPortStartScheduler+0xec>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a13      	ldr	r2, [pc, #76]	; (800881c <xPortStartScheduler+0xec>)
 80087ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087d4:	4b11      	ldr	r3, [pc, #68]	; (800881c <xPortStartScheduler+0xec>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a10      	ldr	r2, [pc, #64]	; (800881c <xPortStartScheduler+0xec>)
 80087da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087e0:	f000 f8d4 	bl	800898c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087e4:	4b0e      	ldr	r3, [pc, #56]	; (8008820 <xPortStartScheduler+0xf0>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087ea:	f000 f8f3 	bl	80089d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087ee:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <xPortStartScheduler+0xf4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a0c      	ldr	r2, [pc, #48]	; (8008824 <xPortStartScheduler+0xf4>)
 80087f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087fa:	f7ff ff85 	bl	8008708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087fe:	f7fe ff69 	bl	80076d4 <vTaskSwitchContext>
	prvTaskExitError();
 8008802:	f7ff ff3f 	bl	8008684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	e000e400 	.word	0xe000e400
 8008814:	20000dc8 	.word	0x20000dc8
 8008818:	20000dcc 	.word	0x20000dcc
 800881c:	e000ed20 	.word	0xe000ed20
 8008820:	2000004c 	.word	0x2000004c
 8008824:	e000ef34 	.word	0xe000ef34

08008828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	b672      	cpsid	i
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	b662      	cpsie	i
 8008842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <vPortEnterCritical+0x5c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3301      	adds	r3, #1
 800884a:	4a0e      	ldr	r2, [pc, #56]	; (8008884 <vPortEnterCritical+0x5c>)
 800884c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800884e:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <vPortEnterCritical+0x5c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d110      	bne.n	8008878 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008856:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <vPortEnterCritical+0x60>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <vPortEnterCritical+0x50>
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	b672      	cpsid	i
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	b662      	cpsie	i
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	e7fe      	b.n	8008876 <vPortEnterCritical+0x4e>
	}
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	2000004c 	.word	0x2000004c
 8008888:	e000ed04 	.word	0xe000ed04

0800888c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <vPortExitCritical+0x50>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <vPortExitCritical+0x26>
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	b672      	cpsid	i
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	b662      	cpsie	i
 80088ae:	607b      	str	r3, [r7, #4]
 80088b0:	e7fe      	b.n	80088b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80088b2:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <vPortExitCritical+0x50>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	4a08      	ldr	r2, [pc, #32]	; (80088dc <vPortExitCritical+0x50>)
 80088ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088bc:	4b07      	ldr	r3, [pc, #28]	; (80088dc <vPortExitCritical+0x50>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <vPortExitCritical+0x42>
 80088c4:	2300      	movs	r3, #0
 80088c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	2000004c 	.word	0x2000004c

080088e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088e0:	f3ef 8009 	mrs	r0, PSP
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	4b15      	ldr	r3, [pc, #84]	; (8008940 <pxCurrentTCBConst>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	f01e 0f10 	tst.w	lr, #16
 80088f0:	bf08      	it	eq
 80088f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	6010      	str	r0, [r2, #0]
 80088fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008904:	b672      	cpsid	i
 8008906:	f380 8811 	msr	BASEPRI, r0
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	b662      	cpsie	i
 8008914:	f7fe fede 	bl	80076d4 <vTaskSwitchContext>
 8008918:	f04f 0000 	mov.w	r0, #0
 800891c:	f380 8811 	msr	BASEPRI, r0
 8008920:	bc09      	pop	{r0, r3}
 8008922:	6819      	ldr	r1, [r3, #0]
 8008924:	6808      	ldr	r0, [r1, #0]
 8008926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892a:	f01e 0f10 	tst.w	lr, #16
 800892e:	bf08      	it	eq
 8008930:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008934:	f380 8809 	msr	PSP, r0
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop

08008940 <pxCurrentTCBConst>:
 8008940:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop

08008948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	b672      	cpsid	i
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	b662      	cpsie	i
 8008962:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008964:	f7fe fdfc 	bl	8007560 <xTaskIncrementTick>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <SysTick_Handler+0x40>)
 8008970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	2300      	movs	r3, #0
 8008978:	603b      	str	r3, [r7, #0]
	__asm volatile
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008990:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <vPortSetupTimerInterrupt+0x34>)
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <vPortSetupTimerInterrupt+0x38>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <vPortSetupTimerInterrupt+0x3c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a0a      	ldr	r2, [pc, #40]	; (80089cc <vPortSetupTimerInterrupt+0x40>)
 80089a2:	fba2 2303 	umull	r2, r3, r2, r3
 80089a6:	099b      	lsrs	r3, r3, #6
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <vPortSetupTimerInterrupt+0x44>)
 80089aa:	3b01      	subs	r3, #1
 80089ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089ae:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <vPortSetupTimerInterrupt+0x34>)
 80089b0:	2207      	movs	r2, #7
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	e000e010 	.word	0xe000e010
 80089c4:	e000e018 	.word	0xe000e018
 80089c8:	20000040 	.word	0x20000040
 80089cc:	10624dd3 	.word	0x10624dd3
 80089d0:	e000e014 	.word	0xe000e014

080089d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089e4 <vPortEnableVFP+0x10>
 80089d8:	6801      	ldr	r1, [r0, #0]
 80089da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089de:	6001      	str	r1, [r0, #0]
 80089e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089e2:	bf00      	nop
 80089e4:	e000ed88 	.word	0xe000ed88

080089e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089ee:	f3ef 8305 	mrs	r3, IPSR
 80089f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b0f      	cmp	r3, #15
 80089f8:	d915      	bls.n	8008a26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089fa:	4a18      	ldr	r2, [pc, #96]	; (8008a5c <vPortValidateInterruptPriority+0x74>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a04:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <vPortValidateInterruptPriority+0x78>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	7afa      	ldrb	r2, [r7, #11]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d20b      	bcs.n	8008a26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	b672      	cpsid	i
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	b662      	cpsie	i
 8008a22:	607b      	str	r3, [r7, #4]
 8008a24:	e7fe      	b.n	8008a24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <vPortValidateInterruptPriority+0x7c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a2e:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <vPortValidateInterruptPriority+0x80>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d90b      	bls.n	8008a4e <vPortValidateInterruptPriority+0x66>
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	b672      	cpsid	i
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	b662      	cpsie	i
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	e7fe      	b.n	8008a4c <vPortValidateInterruptPriority+0x64>
	}
 8008a4e:	bf00      	nop
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	e000e3f0 	.word	0xe000e3f0
 8008a60:	20000dc8 	.word	0x20000dc8
 8008a64:	e000ed0c 	.word	0xe000ed0c
 8008a68:	20000dcc 	.word	0x20000dcc

08008a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08a      	sub	sp, #40	; 0x28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a78:	f7fe fcb6 	bl	80073e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a7c:	4b5a      	ldr	r3, [pc, #360]	; (8008be8 <pvPortMalloc+0x17c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a84:	f000 f916 	bl	8008cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a88:	4b58      	ldr	r3, [pc, #352]	; (8008bec <pvPortMalloc+0x180>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f040 8090 	bne.w	8008bb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01e      	beq.n	8008ada <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d015      	beq.n	8008ada <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f023 0307 	bic.w	r3, r3, #7
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <pvPortMalloc+0x6e>
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	b672      	cpsid	i
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	b662      	cpsie	i
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e7fe      	b.n	8008ad8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d06a      	beq.n	8008bb6 <pvPortMalloc+0x14a>
 8008ae0:	4b43      	ldr	r3, [pc, #268]	; (8008bf0 <pvPortMalloc+0x184>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d865      	bhi.n	8008bb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aea:	4b42      	ldr	r3, [pc, #264]	; (8008bf4 <pvPortMalloc+0x188>)
 8008aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008aee:	4b41      	ldr	r3, [pc, #260]	; (8008bf4 <pvPortMalloc+0x188>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008af4:	e004      	b.n	8008b00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d903      	bls.n	8008b12 <pvPortMalloc+0xa6>
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1f1      	bne.n	8008af6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b12:	4b35      	ldr	r3, [pc, #212]	; (8008be8 <pvPortMalloc+0x17c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d04c      	beq.n	8008bb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2208      	movs	r2, #8
 8008b22:	4413      	add	r3, r2
 8008b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	1ad2      	subs	r2, r2, r3
 8008b36:	2308      	movs	r3, #8
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d920      	bls.n	8008b80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <pvPortMalloc+0xfc>
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	b672      	cpsid	i
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	b662      	cpsie	i
 8008b64:	613b      	str	r3, [r7, #16]
 8008b66:	e7fe      	b.n	8008b66 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	1ad2      	subs	r2, r2, r3
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b7a:	69b8      	ldr	r0, [r7, #24]
 8008b7c:	f000 f8fc 	bl	8008d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b80:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <pvPortMalloc+0x184>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	4a19      	ldr	r2, [pc, #100]	; (8008bf0 <pvPortMalloc+0x184>)
 8008b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b8e:	4b18      	ldr	r3, [pc, #96]	; (8008bf0 <pvPortMalloc+0x184>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b19      	ldr	r3, [pc, #100]	; (8008bf8 <pvPortMalloc+0x18c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d203      	bcs.n	8008ba2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b9a:	4b15      	ldr	r3, [pc, #84]	; (8008bf0 <pvPortMalloc+0x184>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a16      	ldr	r2, [pc, #88]	; (8008bf8 <pvPortMalloc+0x18c>)
 8008ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	4b11      	ldr	r3, [pc, #68]	; (8008bec <pvPortMalloc+0x180>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bb6:	f7fe fc25 	bl	8007404 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00b      	beq.n	8008bdc <pvPortMalloc+0x170>
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	b672      	cpsid	i
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	b662      	cpsie	i
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	e7fe      	b.n	8008bda <pvPortMalloc+0x16e>
	return pvReturn;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3728      	adds	r7, #40	; 0x28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	200049d8 	.word	0x200049d8
 8008bec:	200049e4 	.word	0x200049e4
 8008bf0:	200049dc 	.word	0x200049dc
 8008bf4:	200049d0 	.word	0x200049d0
 8008bf8:	200049e0 	.word	0x200049e0

08008bfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d04a      	beq.n	8008ca4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c0e:	2308      	movs	r3, #8
 8008c10:	425b      	negs	r3, r3
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	4413      	add	r3, r2
 8008c16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	4b22      	ldr	r3, [pc, #136]	; (8008cac <vPortFree+0xb0>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4013      	ands	r3, r2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10b      	bne.n	8008c42 <vPortFree+0x46>
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	b672      	cpsid	i
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	b662      	cpsie	i
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	e7fe      	b.n	8008c40 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <vPortFree+0x66>
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	b672      	cpsid	i
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	b662      	cpsie	i
 8008c5e:	60bb      	str	r3, [r7, #8]
 8008c60:	e7fe      	b.n	8008c60 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	4b11      	ldr	r3, [pc, #68]	; (8008cac <vPortFree+0xb0>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d019      	beq.n	8008ca4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d115      	bne.n	8008ca4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <vPortFree+0xb0>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	43db      	mvns	r3, r3
 8008c82:	401a      	ands	r2, r3
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c88:	f7fe fbae 	bl	80073e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <vPortFree+0xb4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4413      	add	r3, r2
 8008c96:	4a06      	ldr	r2, [pc, #24]	; (8008cb0 <vPortFree+0xb4>)
 8008c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c9a:	6938      	ldr	r0, [r7, #16]
 8008c9c:	f000 f86c 	bl	8008d78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ca0:	f7fe fbb0 	bl	8007404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ca4:	bf00      	nop
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	200049e4 	.word	0x200049e4
 8008cb0:	200049dc 	.word	0x200049dc

08008cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cc0:	4b27      	ldr	r3, [pc, #156]	; (8008d60 <prvHeapInit+0xac>)
 8008cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00c      	beq.n	8008ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3307      	adds	r3, #7
 8008cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0307 	bic.w	r3, r3, #7
 8008cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	4a1f      	ldr	r2, [pc, #124]	; (8008d60 <prvHeapInit+0xac>)
 8008ce4:	4413      	add	r3, r2
 8008ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cec:	4a1d      	ldr	r2, [pc, #116]	; (8008d64 <prvHeapInit+0xb0>)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cf2:	4b1c      	ldr	r3, [pc, #112]	; (8008d64 <prvHeapInit+0xb0>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d00:	2208      	movs	r2, #8
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0307 	bic.w	r3, r3, #7
 8008d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a15      	ldr	r2, [pc, #84]	; (8008d68 <prvHeapInit+0xb4>)
 8008d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <prvHeapInit+0xb4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d1e:	4b12      	ldr	r3, [pc, #72]	; (8008d68 <prvHeapInit+0xb4>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <prvHeapInit+0xb4>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <prvHeapInit+0xb8>)
 8008d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <prvHeapInit+0xbc>)
 8008d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d4c:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <prvHeapInit+0xc0>)
 8008d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	20000dd0 	.word	0x20000dd0
 8008d64:	200049d0 	.word	0x200049d0
 8008d68:	200049d8 	.word	0x200049d8
 8008d6c:	200049e0 	.word	0x200049e0
 8008d70:	200049dc 	.word	0x200049dc
 8008d74:	200049e4 	.word	0x200049e4

08008d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d80:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <prvInsertBlockIntoFreeList+0xac>)
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e002      	b.n	8008d8c <prvInsertBlockIntoFreeList+0x14>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d8f7      	bhi.n	8008d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d108      	bne.n	8008dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	441a      	add	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	441a      	add	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d118      	bne.n	8008e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	4b15      	ldr	r3, [pc, #84]	; (8008e28 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d00d      	beq.n	8008df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	441a      	add	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e008      	b.n	8008e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008df6:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <prvInsertBlockIntoFreeList+0xb0>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	e003      	b.n	8008e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d002      	beq.n	8008e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e16:	bf00      	nop
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	200049d0 	.word	0x200049d0
 8008e28:	200049d8 	.word	0x200049d8

08008e2c <__errno>:
 8008e2c:	4b01      	ldr	r3, [pc, #4]	; (8008e34 <__errno+0x8>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20000050 	.word	0x20000050

08008e38 <__libc_init_array>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	4e0d      	ldr	r6, [pc, #52]	; (8008e70 <__libc_init_array+0x38>)
 8008e3c:	4c0d      	ldr	r4, [pc, #52]	; (8008e74 <__libc_init_array+0x3c>)
 8008e3e:	1ba4      	subs	r4, r4, r6
 8008e40:	10a4      	asrs	r4, r4, #2
 8008e42:	2500      	movs	r5, #0
 8008e44:	42a5      	cmp	r5, r4
 8008e46:	d109      	bne.n	8008e5c <__libc_init_array+0x24>
 8008e48:	4e0b      	ldr	r6, [pc, #44]	; (8008e78 <__libc_init_array+0x40>)
 8008e4a:	4c0c      	ldr	r4, [pc, #48]	; (8008e7c <__libc_init_array+0x44>)
 8008e4c:	f000 fc30 	bl	80096b0 <_init>
 8008e50:	1ba4      	subs	r4, r4, r6
 8008e52:	10a4      	asrs	r4, r4, #2
 8008e54:	2500      	movs	r5, #0
 8008e56:	42a5      	cmp	r5, r4
 8008e58:	d105      	bne.n	8008e66 <__libc_init_array+0x2e>
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e60:	4798      	blx	r3
 8008e62:	3501      	adds	r5, #1
 8008e64:	e7ee      	b.n	8008e44 <__libc_init_array+0xc>
 8008e66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e6a:	4798      	blx	r3
 8008e6c:	3501      	adds	r5, #1
 8008e6e:	e7f2      	b.n	8008e56 <__libc_init_array+0x1e>
 8008e70:	08009944 	.word	0x08009944
 8008e74:	08009944 	.word	0x08009944
 8008e78:	08009944 	.word	0x08009944
 8008e7c:	08009948 	.word	0x08009948

08008e80 <malloc>:
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <malloc+0xc>)
 8008e82:	4601      	mov	r1, r0
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	f000 b865 	b.w	8008f54 <_malloc_r>
 8008e8a:	bf00      	nop
 8008e8c:	20000050 	.word	0x20000050

08008e90 <memcpy>:
 8008e90:	b510      	push	{r4, lr}
 8008e92:	1e43      	subs	r3, r0, #1
 8008e94:	440a      	add	r2, r1
 8008e96:	4291      	cmp	r1, r2
 8008e98:	d100      	bne.n	8008e9c <memcpy+0xc>
 8008e9a:	bd10      	pop	{r4, pc}
 8008e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ea4:	e7f7      	b.n	8008e96 <memcpy+0x6>

08008ea6 <memset>:
 8008ea6:	4402      	add	r2, r0
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d100      	bne.n	8008eb0 <memset+0xa>
 8008eae:	4770      	bx	lr
 8008eb0:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb4:	e7f9      	b.n	8008eaa <memset+0x4>
	...

08008eb8 <_free_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4605      	mov	r5, r0
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d045      	beq.n	8008f4c <_free_r+0x94>
 8008ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec4:	1f0c      	subs	r4, r1, #4
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfb8      	it	lt
 8008eca:	18e4      	addlt	r4, r4, r3
 8008ecc:	f000 f8cc 	bl	8009068 <__malloc_lock>
 8008ed0:	4a1f      	ldr	r2, [pc, #124]	; (8008f50 <_free_r+0x98>)
 8008ed2:	6813      	ldr	r3, [r2, #0]
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	b933      	cbnz	r3, 8008ee6 <_free_r+0x2e>
 8008ed8:	6063      	str	r3, [r4, #4]
 8008eda:	6014      	str	r4, [r2, #0]
 8008edc:	4628      	mov	r0, r5
 8008ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee2:	f000 b8c2 	b.w	800906a <__malloc_unlock>
 8008ee6:	42a3      	cmp	r3, r4
 8008ee8:	d90c      	bls.n	8008f04 <_free_r+0x4c>
 8008eea:	6821      	ldr	r1, [r4, #0]
 8008eec:	1862      	adds	r2, r4, r1
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	bf04      	itt	eq
 8008ef2:	681a      	ldreq	r2, [r3, #0]
 8008ef4:	685b      	ldreq	r3, [r3, #4]
 8008ef6:	6063      	str	r3, [r4, #4]
 8008ef8:	bf04      	itt	eq
 8008efa:	1852      	addeq	r2, r2, r1
 8008efc:	6022      	streq	r2, [r4, #0]
 8008efe:	6004      	str	r4, [r0, #0]
 8008f00:	e7ec      	b.n	8008edc <_free_r+0x24>
 8008f02:	4613      	mov	r3, r2
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	b10a      	cbz	r2, 8008f0c <_free_r+0x54>
 8008f08:	42a2      	cmp	r2, r4
 8008f0a:	d9fa      	bls.n	8008f02 <_free_r+0x4a>
 8008f0c:	6819      	ldr	r1, [r3, #0]
 8008f0e:	1858      	adds	r0, r3, r1
 8008f10:	42a0      	cmp	r0, r4
 8008f12:	d10b      	bne.n	8008f2c <_free_r+0x74>
 8008f14:	6820      	ldr	r0, [r4, #0]
 8008f16:	4401      	add	r1, r0
 8008f18:	1858      	adds	r0, r3, r1
 8008f1a:	4282      	cmp	r2, r0
 8008f1c:	6019      	str	r1, [r3, #0]
 8008f1e:	d1dd      	bne.n	8008edc <_free_r+0x24>
 8008f20:	6810      	ldr	r0, [r2, #0]
 8008f22:	6852      	ldr	r2, [r2, #4]
 8008f24:	605a      	str	r2, [r3, #4]
 8008f26:	4401      	add	r1, r0
 8008f28:	6019      	str	r1, [r3, #0]
 8008f2a:	e7d7      	b.n	8008edc <_free_r+0x24>
 8008f2c:	d902      	bls.n	8008f34 <_free_r+0x7c>
 8008f2e:	230c      	movs	r3, #12
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	e7d3      	b.n	8008edc <_free_r+0x24>
 8008f34:	6820      	ldr	r0, [r4, #0]
 8008f36:	1821      	adds	r1, r4, r0
 8008f38:	428a      	cmp	r2, r1
 8008f3a:	bf04      	itt	eq
 8008f3c:	6811      	ldreq	r1, [r2, #0]
 8008f3e:	6852      	ldreq	r2, [r2, #4]
 8008f40:	6062      	str	r2, [r4, #4]
 8008f42:	bf04      	itt	eq
 8008f44:	1809      	addeq	r1, r1, r0
 8008f46:	6021      	streq	r1, [r4, #0]
 8008f48:	605c      	str	r4, [r3, #4]
 8008f4a:	e7c7      	b.n	8008edc <_free_r+0x24>
 8008f4c:	bd38      	pop	{r3, r4, r5, pc}
 8008f4e:	bf00      	nop
 8008f50:	200049e8 	.word	0x200049e8

08008f54 <_malloc_r>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	1ccd      	adds	r5, r1, #3
 8008f58:	f025 0503 	bic.w	r5, r5, #3
 8008f5c:	3508      	adds	r5, #8
 8008f5e:	2d0c      	cmp	r5, #12
 8008f60:	bf38      	it	cc
 8008f62:	250c      	movcc	r5, #12
 8008f64:	2d00      	cmp	r5, #0
 8008f66:	4606      	mov	r6, r0
 8008f68:	db01      	blt.n	8008f6e <_malloc_r+0x1a>
 8008f6a:	42a9      	cmp	r1, r5
 8008f6c:	d903      	bls.n	8008f76 <_malloc_r+0x22>
 8008f6e:	230c      	movs	r3, #12
 8008f70:	6033      	str	r3, [r6, #0]
 8008f72:	2000      	movs	r0, #0
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
 8008f76:	f000 f877 	bl	8009068 <__malloc_lock>
 8008f7a:	4a21      	ldr	r2, [pc, #132]	; (8009000 <_malloc_r+0xac>)
 8008f7c:	6814      	ldr	r4, [r2, #0]
 8008f7e:	4621      	mov	r1, r4
 8008f80:	b991      	cbnz	r1, 8008fa8 <_malloc_r+0x54>
 8008f82:	4c20      	ldr	r4, [pc, #128]	; (8009004 <_malloc_r+0xb0>)
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	b91b      	cbnz	r3, 8008f90 <_malloc_r+0x3c>
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f000 f83d 	bl	8009008 <_sbrk_r>
 8008f8e:	6020      	str	r0, [r4, #0]
 8008f90:	4629      	mov	r1, r5
 8008f92:	4630      	mov	r0, r6
 8008f94:	f000 f838 	bl	8009008 <_sbrk_r>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d124      	bne.n	8008fe6 <_malloc_r+0x92>
 8008f9c:	230c      	movs	r3, #12
 8008f9e:	6033      	str	r3, [r6, #0]
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 f862 	bl	800906a <__malloc_unlock>
 8008fa6:	e7e4      	b.n	8008f72 <_malloc_r+0x1e>
 8008fa8:	680b      	ldr	r3, [r1, #0]
 8008faa:	1b5b      	subs	r3, r3, r5
 8008fac:	d418      	bmi.n	8008fe0 <_malloc_r+0x8c>
 8008fae:	2b0b      	cmp	r3, #11
 8008fb0:	d90f      	bls.n	8008fd2 <_malloc_r+0x7e>
 8008fb2:	600b      	str	r3, [r1, #0]
 8008fb4:	50cd      	str	r5, [r1, r3]
 8008fb6:	18cc      	adds	r4, r1, r3
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f000 f856 	bl	800906a <__malloc_unlock>
 8008fbe:	f104 000b 	add.w	r0, r4, #11
 8008fc2:	1d23      	adds	r3, r4, #4
 8008fc4:	f020 0007 	bic.w	r0, r0, #7
 8008fc8:	1ac3      	subs	r3, r0, r3
 8008fca:	d0d3      	beq.n	8008f74 <_malloc_r+0x20>
 8008fcc:	425a      	negs	r2, r3
 8008fce:	50e2      	str	r2, [r4, r3]
 8008fd0:	e7d0      	b.n	8008f74 <_malloc_r+0x20>
 8008fd2:	428c      	cmp	r4, r1
 8008fd4:	684b      	ldr	r3, [r1, #4]
 8008fd6:	bf16      	itet	ne
 8008fd8:	6063      	strne	r3, [r4, #4]
 8008fda:	6013      	streq	r3, [r2, #0]
 8008fdc:	460c      	movne	r4, r1
 8008fde:	e7eb      	b.n	8008fb8 <_malloc_r+0x64>
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	6849      	ldr	r1, [r1, #4]
 8008fe4:	e7cc      	b.n	8008f80 <_malloc_r+0x2c>
 8008fe6:	1cc4      	adds	r4, r0, #3
 8008fe8:	f024 0403 	bic.w	r4, r4, #3
 8008fec:	42a0      	cmp	r0, r4
 8008fee:	d005      	beq.n	8008ffc <_malloc_r+0xa8>
 8008ff0:	1a21      	subs	r1, r4, r0
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f000 f808 	bl	8009008 <_sbrk_r>
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d0cf      	beq.n	8008f9c <_malloc_r+0x48>
 8008ffc:	6025      	str	r5, [r4, #0]
 8008ffe:	e7db      	b.n	8008fb8 <_malloc_r+0x64>
 8009000:	200049e8 	.word	0x200049e8
 8009004:	200049ec 	.word	0x200049ec

08009008 <_sbrk_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4c06      	ldr	r4, [pc, #24]	; (8009024 <_sbrk_r+0x1c>)
 800900c:	2300      	movs	r3, #0
 800900e:	4605      	mov	r5, r0
 8009010:	4608      	mov	r0, r1
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	f7f8 fe06 	bl	8001c24 <_sbrk>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d102      	bne.n	8009022 <_sbrk_r+0x1a>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	b103      	cbz	r3, 8009022 <_sbrk_r+0x1a>
 8009020:	602b      	str	r3, [r5, #0]
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	20004bbc 	.word	0x20004bbc

08009028 <siprintf>:
 8009028:	b40e      	push	{r1, r2, r3}
 800902a:	b500      	push	{lr}
 800902c:	b09c      	sub	sp, #112	; 0x70
 800902e:	ab1d      	add	r3, sp, #116	; 0x74
 8009030:	9002      	str	r0, [sp, #8]
 8009032:	9006      	str	r0, [sp, #24]
 8009034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009038:	4809      	ldr	r0, [pc, #36]	; (8009060 <siprintf+0x38>)
 800903a:	9107      	str	r1, [sp, #28]
 800903c:	9104      	str	r1, [sp, #16]
 800903e:	4909      	ldr	r1, [pc, #36]	; (8009064 <siprintf+0x3c>)
 8009040:	f853 2b04 	ldr.w	r2, [r3], #4
 8009044:	9105      	str	r1, [sp, #20]
 8009046:	6800      	ldr	r0, [r0, #0]
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	a902      	add	r1, sp, #8
 800904c:	f000 f868 	bl	8009120 <_svfiprintf_r>
 8009050:	9b02      	ldr	r3, [sp, #8]
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	b01c      	add	sp, #112	; 0x70
 8009058:	f85d eb04 	ldr.w	lr, [sp], #4
 800905c:	b003      	add	sp, #12
 800905e:	4770      	bx	lr
 8009060:	20000050 	.word	0x20000050
 8009064:	ffff0208 	.word	0xffff0208

08009068 <__malloc_lock>:
 8009068:	4770      	bx	lr

0800906a <__malloc_unlock>:
 800906a:	4770      	bx	lr

0800906c <__ssputs_r>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	688e      	ldr	r6, [r1, #8]
 8009072:	429e      	cmp	r6, r3
 8009074:	4682      	mov	sl, r0
 8009076:	460c      	mov	r4, r1
 8009078:	4690      	mov	r8, r2
 800907a:	4699      	mov	r9, r3
 800907c:	d837      	bhi.n	80090ee <__ssputs_r+0x82>
 800907e:	898a      	ldrh	r2, [r1, #12]
 8009080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009084:	d031      	beq.n	80090ea <__ssputs_r+0x7e>
 8009086:	6825      	ldr	r5, [r4, #0]
 8009088:	6909      	ldr	r1, [r1, #16]
 800908a:	1a6f      	subs	r7, r5, r1
 800908c:	6965      	ldr	r5, [r4, #20]
 800908e:	2302      	movs	r3, #2
 8009090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009094:	fb95 f5f3 	sdiv	r5, r5, r3
 8009098:	f109 0301 	add.w	r3, r9, #1
 800909c:	443b      	add	r3, r7
 800909e:	429d      	cmp	r5, r3
 80090a0:	bf38      	it	cc
 80090a2:	461d      	movcc	r5, r3
 80090a4:	0553      	lsls	r3, r2, #21
 80090a6:	d530      	bpl.n	800910a <__ssputs_r+0x9e>
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7ff ff53 	bl	8008f54 <_malloc_r>
 80090ae:	4606      	mov	r6, r0
 80090b0:	b950      	cbnz	r0, 80090c8 <__ssputs_r+0x5c>
 80090b2:	230c      	movs	r3, #12
 80090b4:	f8ca 3000 	str.w	r3, [sl]
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c8:	463a      	mov	r2, r7
 80090ca:	6921      	ldr	r1, [r4, #16]
 80090cc:	f7ff fee0 	bl	8008e90 <memcpy>
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	6126      	str	r6, [r4, #16]
 80090de:	6165      	str	r5, [r4, #20]
 80090e0:	443e      	add	r6, r7
 80090e2:	1bed      	subs	r5, r5, r7
 80090e4:	6026      	str	r6, [r4, #0]
 80090e6:	60a5      	str	r5, [r4, #8]
 80090e8:	464e      	mov	r6, r9
 80090ea:	454e      	cmp	r6, r9
 80090ec:	d900      	bls.n	80090f0 <__ssputs_r+0x84>
 80090ee:	464e      	mov	r6, r9
 80090f0:	4632      	mov	r2, r6
 80090f2:	4641      	mov	r1, r8
 80090f4:	6820      	ldr	r0, [r4, #0]
 80090f6:	f000 fa93 	bl	8009620 <memmove>
 80090fa:	68a3      	ldr	r3, [r4, #8]
 80090fc:	1b9b      	subs	r3, r3, r6
 80090fe:	60a3      	str	r3, [r4, #8]
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	441e      	add	r6, r3
 8009104:	6026      	str	r6, [r4, #0]
 8009106:	2000      	movs	r0, #0
 8009108:	e7dc      	b.n	80090c4 <__ssputs_r+0x58>
 800910a:	462a      	mov	r2, r5
 800910c:	f000 faa1 	bl	8009652 <_realloc_r>
 8009110:	4606      	mov	r6, r0
 8009112:	2800      	cmp	r0, #0
 8009114:	d1e2      	bne.n	80090dc <__ssputs_r+0x70>
 8009116:	6921      	ldr	r1, [r4, #16]
 8009118:	4650      	mov	r0, sl
 800911a:	f7ff fecd 	bl	8008eb8 <_free_r>
 800911e:	e7c8      	b.n	80090b2 <__ssputs_r+0x46>

08009120 <_svfiprintf_r>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	461d      	mov	r5, r3
 8009126:	898b      	ldrh	r3, [r1, #12]
 8009128:	061f      	lsls	r7, r3, #24
 800912a:	b09d      	sub	sp, #116	; 0x74
 800912c:	4680      	mov	r8, r0
 800912e:	460c      	mov	r4, r1
 8009130:	4616      	mov	r6, r2
 8009132:	d50f      	bpl.n	8009154 <_svfiprintf_r+0x34>
 8009134:	690b      	ldr	r3, [r1, #16]
 8009136:	b96b      	cbnz	r3, 8009154 <_svfiprintf_r+0x34>
 8009138:	2140      	movs	r1, #64	; 0x40
 800913a:	f7ff ff0b 	bl	8008f54 <_malloc_r>
 800913e:	6020      	str	r0, [r4, #0]
 8009140:	6120      	str	r0, [r4, #16]
 8009142:	b928      	cbnz	r0, 8009150 <_svfiprintf_r+0x30>
 8009144:	230c      	movs	r3, #12
 8009146:	f8c8 3000 	str.w	r3, [r8]
 800914a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800914e:	e0c8      	b.n	80092e2 <_svfiprintf_r+0x1c2>
 8009150:	2340      	movs	r3, #64	; 0x40
 8009152:	6163      	str	r3, [r4, #20]
 8009154:	2300      	movs	r3, #0
 8009156:	9309      	str	r3, [sp, #36]	; 0x24
 8009158:	2320      	movs	r3, #32
 800915a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800915e:	2330      	movs	r3, #48	; 0x30
 8009160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009164:	9503      	str	r5, [sp, #12]
 8009166:	f04f 0b01 	mov.w	fp, #1
 800916a:	4637      	mov	r7, r6
 800916c:	463d      	mov	r5, r7
 800916e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009172:	b10b      	cbz	r3, 8009178 <_svfiprintf_r+0x58>
 8009174:	2b25      	cmp	r3, #37	; 0x25
 8009176:	d13e      	bne.n	80091f6 <_svfiprintf_r+0xd6>
 8009178:	ebb7 0a06 	subs.w	sl, r7, r6
 800917c:	d00b      	beq.n	8009196 <_svfiprintf_r+0x76>
 800917e:	4653      	mov	r3, sl
 8009180:	4632      	mov	r2, r6
 8009182:	4621      	mov	r1, r4
 8009184:	4640      	mov	r0, r8
 8009186:	f7ff ff71 	bl	800906c <__ssputs_r>
 800918a:	3001      	adds	r0, #1
 800918c:	f000 80a4 	beq.w	80092d8 <_svfiprintf_r+0x1b8>
 8009190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009192:	4453      	add	r3, sl
 8009194:	9309      	str	r3, [sp, #36]	; 0x24
 8009196:	783b      	ldrb	r3, [r7, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 809d 	beq.w	80092d8 <_svfiprintf_r+0x1b8>
 800919e:	2300      	movs	r3, #0
 80091a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	9307      	str	r3, [sp, #28]
 80091ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091b0:	931a      	str	r3, [sp, #104]	; 0x68
 80091b2:	462f      	mov	r7, r5
 80091b4:	2205      	movs	r2, #5
 80091b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80091ba:	4850      	ldr	r0, [pc, #320]	; (80092fc <_svfiprintf_r+0x1dc>)
 80091bc:	f7f7 f840 	bl	8000240 <memchr>
 80091c0:	9b04      	ldr	r3, [sp, #16]
 80091c2:	b9d0      	cbnz	r0, 80091fa <_svfiprintf_r+0xda>
 80091c4:	06d9      	lsls	r1, r3, #27
 80091c6:	bf44      	itt	mi
 80091c8:	2220      	movmi	r2, #32
 80091ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80091ce:	071a      	lsls	r2, r3, #28
 80091d0:	bf44      	itt	mi
 80091d2:	222b      	movmi	r2, #43	; 0x2b
 80091d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80091d8:	782a      	ldrb	r2, [r5, #0]
 80091da:	2a2a      	cmp	r2, #42	; 0x2a
 80091dc:	d015      	beq.n	800920a <_svfiprintf_r+0xea>
 80091de:	9a07      	ldr	r2, [sp, #28]
 80091e0:	462f      	mov	r7, r5
 80091e2:	2000      	movs	r0, #0
 80091e4:	250a      	movs	r5, #10
 80091e6:	4639      	mov	r1, r7
 80091e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091ec:	3b30      	subs	r3, #48	; 0x30
 80091ee:	2b09      	cmp	r3, #9
 80091f0:	d94d      	bls.n	800928e <_svfiprintf_r+0x16e>
 80091f2:	b1b8      	cbz	r0, 8009224 <_svfiprintf_r+0x104>
 80091f4:	e00f      	b.n	8009216 <_svfiprintf_r+0xf6>
 80091f6:	462f      	mov	r7, r5
 80091f8:	e7b8      	b.n	800916c <_svfiprintf_r+0x4c>
 80091fa:	4a40      	ldr	r2, [pc, #256]	; (80092fc <_svfiprintf_r+0x1dc>)
 80091fc:	1a80      	subs	r0, r0, r2
 80091fe:	fa0b f000 	lsl.w	r0, fp, r0
 8009202:	4318      	orrs	r0, r3
 8009204:	9004      	str	r0, [sp, #16]
 8009206:	463d      	mov	r5, r7
 8009208:	e7d3      	b.n	80091b2 <_svfiprintf_r+0x92>
 800920a:	9a03      	ldr	r2, [sp, #12]
 800920c:	1d11      	adds	r1, r2, #4
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	9103      	str	r1, [sp, #12]
 8009212:	2a00      	cmp	r2, #0
 8009214:	db01      	blt.n	800921a <_svfiprintf_r+0xfa>
 8009216:	9207      	str	r2, [sp, #28]
 8009218:	e004      	b.n	8009224 <_svfiprintf_r+0x104>
 800921a:	4252      	negs	r2, r2
 800921c:	f043 0302 	orr.w	r3, r3, #2
 8009220:	9207      	str	r2, [sp, #28]
 8009222:	9304      	str	r3, [sp, #16]
 8009224:	783b      	ldrb	r3, [r7, #0]
 8009226:	2b2e      	cmp	r3, #46	; 0x2e
 8009228:	d10c      	bne.n	8009244 <_svfiprintf_r+0x124>
 800922a:	787b      	ldrb	r3, [r7, #1]
 800922c:	2b2a      	cmp	r3, #42	; 0x2a
 800922e:	d133      	bne.n	8009298 <_svfiprintf_r+0x178>
 8009230:	9b03      	ldr	r3, [sp, #12]
 8009232:	1d1a      	adds	r2, r3, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	9203      	str	r2, [sp, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	bfb8      	it	lt
 800923c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009240:	3702      	adds	r7, #2
 8009242:	9305      	str	r3, [sp, #20]
 8009244:	4d2e      	ldr	r5, [pc, #184]	; (8009300 <_svfiprintf_r+0x1e0>)
 8009246:	7839      	ldrb	r1, [r7, #0]
 8009248:	2203      	movs	r2, #3
 800924a:	4628      	mov	r0, r5
 800924c:	f7f6 fff8 	bl	8000240 <memchr>
 8009250:	b138      	cbz	r0, 8009262 <_svfiprintf_r+0x142>
 8009252:	2340      	movs	r3, #64	; 0x40
 8009254:	1b40      	subs	r0, r0, r5
 8009256:	fa03 f000 	lsl.w	r0, r3, r0
 800925a:	9b04      	ldr	r3, [sp, #16]
 800925c:	4303      	orrs	r3, r0
 800925e:	3701      	adds	r7, #1
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	7839      	ldrb	r1, [r7, #0]
 8009264:	4827      	ldr	r0, [pc, #156]	; (8009304 <_svfiprintf_r+0x1e4>)
 8009266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800926a:	2206      	movs	r2, #6
 800926c:	1c7e      	adds	r6, r7, #1
 800926e:	f7f6 ffe7 	bl	8000240 <memchr>
 8009272:	2800      	cmp	r0, #0
 8009274:	d038      	beq.n	80092e8 <_svfiprintf_r+0x1c8>
 8009276:	4b24      	ldr	r3, [pc, #144]	; (8009308 <_svfiprintf_r+0x1e8>)
 8009278:	bb13      	cbnz	r3, 80092c0 <_svfiprintf_r+0x1a0>
 800927a:	9b03      	ldr	r3, [sp, #12]
 800927c:	3307      	adds	r3, #7
 800927e:	f023 0307 	bic.w	r3, r3, #7
 8009282:	3308      	adds	r3, #8
 8009284:	9303      	str	r3, [sp, #12]
 8009286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009288:	444b      	add	r3, r9
 800928a:	9309      	str	r3, [sp, #36]	; 0x24
 800928c:	e76d      	b.n	800916a <_svfiprintf_r+0x4a>
 800928e:	fb05 3202 	mla	r2, r5, r2, r3
 8009292:	2001      	movs	r0, #1
 8009294:	460f      	mov	r7, r1
 8009296:	e7a6      	b.n	80091e6 <_svfiprintf_r+0xc6>
 8009298:	2300      	movs	r3, #0
 800929a:	3701      	adds	r7, #1
 800929c:	9305      	str	r3, [sp, #20]
 800929e:	4619      	mov	r1, r3
 80092a0:	250a      	movs	r5, #10
 80092a2:	4638      	mov	r0, r7
 80092a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092a8:	3a30      	subs	r2, #48	; 0x30
 80092aa:	2a09      	cmp	r2, #9
 80092ac:	d903      	bls.n	80092b6 <_svfiprintf_r+0x196>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0c8      	beq.n	8009244 <_svfiprintf_r+0x124>
 80092b2:	9105      	str	r1, [sp, #20]
 80092b4:	e7c6      	b.n	8009244 <_svfiprintf_r+0x124>
 80092b6:	fb05 2101 	mla	r1, r5, r1, r2
 80092ba:	2301      	movs	r3, #1
 80092bc:	4607      	mov	r7, r0
 80092be:	e7f0      	b.n	80092a2 <_svfiprintf_r+0x182>
 80092c0:	ab03      	add	r3, sp, #12
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	4622      	mov	r2, r4
 80092c6:	4b11      	ldr	r3, [pc, #68]	; (800930c <_svfiprintf_r+0x1ec>)
 80092c8:	a904      	add	r1, sp, #16
 80092ca:	4640      	mov	r0, r8
 80092cc:	f3af 8000 	nop.w
 80092d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80092d4:	4681      	mov	r9, r0
 80092d6:	d1d6      	bne.n	8009286 <_svfiprintf_r+0x166>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	065b      	lsls	r3, r3, #25
 80092dc:	f53f af35 	bmi.w	800914a <_svfiprintf_r+0x2a>
 80092e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092e2:	b01d      	add	sp, #116	; 0x74
 80092e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e8:	ab03      	add	r3, sp, #12
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	4622      	mov	r2, r4
 80092ee:	4b07      	ldr	r3, [pc, #28]	; (800930c <_svfiprintf_r+0x1ec>)
 80092f0:	a904      	add	r1, sp, #16
 80092f2:	4640      	mov	r0, r8
 80092f4:	f000 f882 	bl	80093fc <_printf_i>
 80092f8:	e7ea      	b.n	80092d0 <_svfiprintf_r+0x1b0>
 80092fa:	bf00      	nop
 80092fc:	08009908 	.word	0x08009908
 8009300:	0800990e 	.word	0x0800990e
 8009304:	08009912 	.word	0x08009912
 8009308:	00000000 	.word	0x00000000
 800930c:	0800906d 	.word	0x0800906d

08009310 <_printf_common>:
 8009310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009314:	4691      	mov	r9, r2
 8009316:	461f      	mov	r7, r3
 8009318:	688a      	ldr	r2, [r1, #8]
 800931a:	690b      	ldr	r3, [r1, #16]
 800931c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009320:	4293      	cmp	r3, r2
 8009322:	bfb8      	it	lt
 8009324:	4613      	movlt	r3, r2
 8009326:	f8c9 3000 	str.w	r3, [r9]
 800932a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800932e:	4606      	mov	r6, r0
 8009330:	460c      	mov	r4, r1
 8009332:	b112      	cbz	r2, 800933a <_printf_common+0x2a>
 8009334:	3301      	adds	r3, #1
 8009336:	f8c9 3000 	str.w	r3, [r9]
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	0699      	lsls	r1, r3, #26
 800933e:	bf42      	ittt	mi
 8009340:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009344:	3302      	addmi	r3, #2
 8009346:	f8c9 3000 	strmi.w	r3, [r9]
 800934a:	6825      	ldr	r5, [r4, #0]
 800934c:	f015 0506 	ands.w	r5, r5, #6
 8009350:	d107      	bne.n	8009362 <_printf_common+0x52>
 8009352:	f104 0a19 	add.w	sl, r4, #25
 8009356:	68e3      	ldr	r3, [r4, #12]
 8009358:	f8d9 2000 	ldr.w	r2, [r9]
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	42ab      	cmp	r3, r5
 8009360:	dc28      	bgt.n	80093b4 <_printf_common+0xa4>
 8009362:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009366:	6822      	ldr	r2, [r4, #0]
 8009368:	3300      	adds	r3, #0
 800936a:	bf18      	it	ne
 800936c:	2301      	movne	r3, #1
 800936e:	0692      	lsls	r2, r2, #26
 8009370:	d42d      	bmi.n	80093ce <_printf_common+0xbe>
 8009372:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009376:	4639      	mov	r1, r7
 8009378:	4630      	mov	r0, r6
 800937a:	47c0      	blx	r8
 800937c:	3001      	adds	r0, #1
 800937e:	d020      	beq.n	80093c2 <_printf_common+0xb2>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	68e5      	ldr	r5, [r4, #12]
 8009384:	f8d9 2000 	ldr.w	r2, [r9]
 8009388:	f003 0306 	and.w	r3, r3, #6
 800938c:	2b04      	cmp	r3, #4
 800938e:	bf08      	it	eq
 8009390:	1aad      	subeq	r5, r5, r2
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	6922      	ldr	r2, [r4, #16]
 8009396:	bf0c      	ite	eq
 8009398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800939c:	2500      	movne	r5, #0
 800939e:	4293      	cmp	r3, r2
 80093a0:	bfc4      	itt	gt
 80093a2:	1a9b      	subgt	r3, r3, r2
 80093a4:	18ed      	addgt	r5, r5, r3
 80093a6:	f04f 0900 	mov.w	r9, #0
 80093aa:	341a      	adds	r4, #26
 80093ac:	454d      	cmp	r5, r9
 80093ae:	d11a      	bne.n	80093e6 <_printf_common+0xd6>
 80093b0:	2000      	movs	r0, #0
 80093b2:	e008      	b.n	80093c6 <_printf_common+0xb6>
 80093b4:	2301      	movs	r3, #1
 80093b6:	4652      	mov	r2, sl
 80093b8:	4639      	mov	r1, r7
 80093ba:	4630      	mov	r0, r6
 80093bc:	47c0      	blx	r8
 80093be:	3001      	adds	r0, #1
 80093c0:	d103      	bne.n	80093ca <_printf_common+0xba>
 80093c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ca:	3501      	adds	r5, #1
 80093cc:	e7c3      	b.n	8009356 <_printf_common+0x46>
 80093ce:	18e1      	adds	r1, r4, r3
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	2030      	movs	r0, #48	; 0x30
 80093d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093d8:	4422      	add	r2, r4
 80093da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093e2:	3302      	adds	r3, #2
 80093e4:	e7c5      	b.n	8009372 <_printf_common+0x62>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4622      	mov	r2, r4
 80093ea:	4639      	mov	r1, r7
 80093ec:	4630      	mov	r0, r6
 80093ee:	47c0      	blx	r8
 80093f0:	3001      	adds	r0, #1
 80093f2:	d0e6      	beq.n	80093c2 <_printf_common+0xb2>
 80093f4:	f109 0901 	add.w	r9, r9, #1
 80093f8:	e7d8      	b.n	80093ac <_printf_common+0x9c>
	...

080093fc <_printf_i>:
 80093fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009400:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009404:	460c      	mov	r4, r1
 8009406:	7e09      	ldrb	r1, [r1, #24]
 8009408:	b085      	sub	sp, #20
 800940a:	296e      	cmp	r1, #110	; 0x6e
 800940c:	4617      	mov	r7, r2
 800940e:	4606      	mov	r6, r0
 8009410:	4698      	mov	r8, r3
 8009412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009414:	f000 80b3 	beq.w	800957e <_printf_i+0x182>
 8009418:	d822      	bhi.n	8009460 <_printf_i+0x64>
 800941a:	2963      	cmp	r1, #99	; 0x63
 800941c:	d036      	beq.n	800948c <_printf_i+0x90>
 800941e:	d80a      	bhi.n	8009436 <_printf_i+0x3a>
 8009420:	2900      	cmp	r1, #0
 8009422:	f000 80b9 	beq.w	8009598 <_printf_i+0x19c>
 8009426:	2958      	cmp	r1, #88	; 0x58
 8009428:	f000 8083 	beq.w	8009532 <_printf_i+0x136>
 800942c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009430:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009434:	e032      	b.n	800949c <_printf_i+0xa0>
 8009436:	2964      	cmp	r1, #100	; 0x64
 8009438:	d001      	beq.n	800943e <_printf_i+0x42>
 800943a:	2969      	cmp	r1, #105	; 0x69
 800943c:	d1f6      	bne.n	800942c <_printf_i+0x30>
 800943e:	6820      	ldr	r0, [r4, #0]
 8009440:	6813      	ldr	r3, [r2, #0]
 8009442:	0605      	lsls	r5, r0, #24
 8009444:	f103 0104 	add.w	r1, r3, #4
 8009448:	d52a      	bpl.n	80094a0 <_printf_i+0xa4>
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6011      	str	r1, [r2, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	da03      	bge.n	800945a <_printf_i+0x5e>
 8009452:	222d      	movs	r2, #45	; 0x2d
 8009454:	425b      	negs	r3, r3
 8009456:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800945a:	486f      	ldr	r0, [pc, #444]	; (8009618 <_printf_i+0x21c>)
 800945c:	220a      	movs	r2, #10
 800945e:	e039      	b.n	80094d4 <_printf_i+0xd8>
 8009460:	2973      	cmp	r1, #115	; 0x73
 8009462:	f000 809d 	beq.w	80095a0 <_printf_i+0x1a4>
 8009466:	d808      	bhi.n	800947a <_printf_i+0x7e>
 8009468:	296f      	cmp	r1, #111	; 0x6f
 800946a:	d020      	beq.n	80094ae <_printf_i+0xb2>
 800946c:	2970      	cmp	r1, #112	; 0x70
 800946e:	d1dd      	bne.n	800942c <_printf_i+0x30>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	f043 0320 	orr.w	r3, r3, #32
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	e003      	b.n	8009482 <_printf_i+0x86>
 800947a:	2975      	cmp	r1, #117	; 0x75
 800947c:	d017      	beq.n	80094ae <_printf_i+0xb2>
 800947e:	2978      	cmp	r1, #120	; 0x78
 8009480:	d1d4      	bne.n	800942c <_printf_i+0x30>
 8009482:	2378      	movs	r3, #120	; 0x78
 8009484:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009488:	4864      	ldr	r0, [pc, #400]	; (800961c <_printf_i+0x220>)
 800948a:	e055      	b.n	8009538 <_printf_i+0x13c>
 800948c:	6813      	ldr	r3, [r2, #0]
 800948e:	1d19      	adds	r1, r3, #4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	6011      	str	r1, [r2, #0]
 8009494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800949c:	2301      	movs	r3, #1
 800949e:	e08c      	b.n	80095ba <_printf_i+0x1be>
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6011      	str	r1, [r2, #0]
 80094a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094a8:	bf18      	it	ne
 80094aa:	b21b      	sxthne	r3, r3
 80094ac:	e7cf      	b.n	800944e <_printf_i+0x52>
 80094ae:	6813      	ldr	r3, [r2, #0]
 80094b0:	6825      	ldr	r5, [r4, #0]
 80094b2:	1d18      	adds	r0, r3, #4
 80094b4:	6010      	str	r0, [r2, #0]
 80094b6:	0628      	lsls	r0, r5, #24
 80094b8:	d501      	bpl.n	80094be <_printf_i+0xc2>
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	e002      	b.n	80094c4 <_printf_i+0xc8>
 80094be:	0668      	lsls	r0, r5, #25
 80094c0:	d5fb      	bpl.n	80094ba <_printf_i+0xbe>
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	4854      	ldr	r0, [pc, #336]	; (8009618 <_printf_i+0x21c>)
 80094c6:	296f      	cmp	r1, #111	; 0x6f
 80094c8:	bf14      	ite	ne
 80094ca:	220a      	movne	r2, #10
 80094cc:	2208      	moveq	r2, #8
 80094ce:	2100      	movs	r1, #0
 80094d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094d4:	6865      	ldr	r5, [r4, #4]
 80094d6:	60a5      	str	r5, [r4, #8]
 80094d8:	2d00      	cmp	r5, #0
 80094da:	f2c0 8095 	blt.w	8009608 <_printf_i+0x20c>
 80094de:	6821      	ldr	r1, [r4, #0]
 80094e0:	f021 0104 	bic.w	r1, r1, #4
 80094e4:	6021      	str	r1, [r4, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d13d      	bne.n	8009566 <_printf_i+0x16a>
 80094ea:	2d00      	cmp	r5, #0
 80094ec:	f040 808e 	bne.w	800960c <_printf_i+0x210>
 80094f0:	4665      	mov	r5, ip
 80094f2:	2a08      	cmp	r2, #8
 80094f4:	d10b      	bne.n	800950e <_printf_i+0x112>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	07db      	lsls	r3, r3, #31
 80094fa:	d508      	bpl.n	800950e <_printf_i+0x112>
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	6862      	ldr	r2, [r4, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	bfde      	ittt	le
 8009504:	2330      	movle	r3, #48	; 0x30
 8009506:	f805 3c01 	strble.w	r3, [r5, #-1]
 800950a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800950e:	ebac 0305 	sub.w	r3, ip, r5
 8009512:	6123      	str	r3, [r4, #16]
 8009514:	f8cd 8000 	str.w	r8, [sp]
 8009518:	463b      	mov	r3, r7
 800951a:	aa03      	add	r2, sp, #12
 800951c:	4621      	mov	r1, r4
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff fef6 	bl	8009310 <_printf_common>
 8009524:	3001      	adds	r0, #1
 8009526:	d14d      	bne.n	80095c4 <_printf_i+0x1c8>
 8009528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800952c:	b005      	add	sp, #20
 800952e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009532:	4839      	ldr	r0, [pc, #228]	; (8009618 <_printf_i+0x21c>)
 8009534:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009538:	6813      	ldr	r3, [r2, #0]
 800953a:	6821      	ldr	r1, [r4, #0]
 800953c:	1d1d      	adds	r5, r3, #4
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6015      	str	r5, [r2, #0]
 8009542:	060a      	lsls	r2, r1, #24
 8009544:	d50b      	bpl.n	800955e <_printf_i+0x162>
 8009546:	07ca      	lsls	r2, r1, #31
 8009548:	bf44      	itt	mi
 800954a:	f041 0120 	orrmi.w	r1, r1, #32
 800954e:	6021      	strmi	r1, [r4, #0]
 8009550:	b91b      	cbnz	r3, 800955a <_printf_i+0x15e>
 8009552:	6822      	ldr	r2, [r4, #0]
 8009554:	f022 0220 	bic.w	r2, r2, #32
 8009558:	6022      	str	r2, [r4, #0]
 800955a:	2210      	movs	r2, #16
 800955c:	e7b7      	b.n	80094ce <_printf_i+0xd2>
 800955e:	064d      	lsls	r5, r1, #25
 8009560:	bf48      	it	mi
 8009562:	b29b      	uxthmi	r3, r3
 8009564:	e7ef      	b.n	8009546 <_printf_i+0x14a>
 8009566:	4665      	mov	r5, ip
 8009568:	fbb3 f1f2 	udiv	r1, r3, r2
 800956c:	fb02 3311 	mls	r3, r2, r1, r3
 8009570:	5cc3      	ldrb	r3, [r0, r3]
 8009572:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009576:	460b      	mov	r3, r1
 8009578:	2900      	cmp	r1, #0
 800957a:	d1f5      	bne.n	8009568 <_printf_i+0x16c>
 800957c:	e7b9      	b.n	80094f2 <_printf_i+0xf6>
 800957e:	6813      	ldr	r3, [r2, #0]
 8009580:	6825      	ldr	r5, [r4, #0]
 8009582:	6961      	ldr	r1, [r4, #20]
 8009584:	1d18      	adds	r0, r3, #4
 8009586:	6010      	str	r0, [r2, #0]
 8009588:	0628      	lsls	r0, r5, #24
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	d501      	bpl.n	8009592 <_printf_i+0x196>
 800958e:	6019      	str	r1, [r3, #0]
 8009590:	e002      	b.n	8009598 <_printf_i+0x19c>
 8009592:	066a      	lsls	r2, r5, #25
 8009594:	d5fb      	bpl.n	800958e <_printf_i+0x192>
 8009596:	8019      	strh	r1, [r3, #0]
 8009598:	2300      	movs	r3, #0
 800959a:	6123      	str	r3, [r4, #16]
 800959c:	4665      	mov	r5, ip
 800959e:	e7b9      	b.n	8009514 <_printf_i+0x118>
 80095a0:	6813      	ldr	r3, [r2, #0]
 80095a2:	1d19      	adds	r1, r3, #4
 80095a4:	6011      	str	r1, [r2, #0]
 80095a6:	681d      	ldr	r5, [r3, #0]
 80095a8:	6862      	ldr	r2, [r4, #4]
 80095aa:	2100      	movs	r1, #0
 80095ac:	4628      	mov	r0, r5
 80095ae:	f7f6 fe47 	bl	8000240 <memchr>
 80095b2:	b108      	cbz	r0, 80095b8 <_printf_i+0x1bc>
 80095b4:	1b40      	subs	r0, r0, r5
 80095b6:	6060      	str	r0, [r4, #4]
 80095b8:	6863      	ldr	r3, [r4, #4]
 80095ba:	6123      	str	r3, [r4, #16]
 80095bc:	2300      	movs	r3, #0
 80095be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c2:	e7a7      	b.n	8009514 <_printf_i+0x118>
 80095c4:	6923      	ldr	r3, [r4, #16]
 80095c6:	462a      	mov	r2, r5
 80095c8:	4639      	mov	r1, r7
 80095ca:	4630      	mov	r0, r6
 80095cc:	47c0      	blx	r8
 80095ce:	3001      	adds	r0, #1
 80095d0:	d0aa      	beq.n	8009528 <_printf_i+0x12c>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	079b      	lsls	r3, r3, #30
 80095d6:	d413      	bmi.n	8009600 <_printf_i+0x204>
 80095d8:	68e0      	ldr	r0, [r4, #12]
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	4298      	cmp	r0, r3
 80095de:	bfb8      	it	lt
 80095e0:	4618      	movlt	r0, r3
 80095e2:	e7a3      	b.n	800952c <_printf_i+0x130>
 80095e4:	2301      	movs	r3, #1
 80095e6:	464a      	mov	r2, r9
 80095e8:	4639      	mov	r1, r7
 80095ea:	4630      	mov	r0, r6
 80095ec:	47c0      	blx	r8
 80095ee:	3001      	adds	r0, #1
 80095f0:	d09a      	beq.n	8009528 <_printf_i+0x12c>
 80095f2:	3501      	adds	r5, #1
 80095f4:	68e3      	ldr	r3, [r4, #12]
 80095f6:	9a03      	ldr	r2, [sp, #12]
 80095f8:	1a9b      	subs	r3, r3, r2
 80095fa:	42ab      	cmp	r3, r5
 80095fc:	dcf2      	bgt.n	80095e4 <_printf_i+0x1e8>
 80095fe:	e7eb      	b.n	80095d8 <_printf_i+0x1dc>
 8009600:	2500      	movs	r5, #0
 8009602:	f104 0919 	add.w	r9, r4, #25
 8009606:	e7f5      	b.n	80095f4 <_printf_i+0x1f8>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1ac      	bne.n	8009566 <_printf_i+0x16a>
 800960c:	7803      	ldrb	r3, [r0, #0]
 800960e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009612:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009616:	e76c      	b.n	80094f2 <_printf_i+0xf6>
 8009618:	08009919 	.word	0x08009919
 800961c:	0800992a 	.word	0x0800992a

08009620 <memmove>:
 8009620:	4288      	cmp	r0, r1
 8009622:	b510      	push	{r4, lr}
 8009624:	eb01 0302 	add.w	r3, r1, r2
 8009628:	d807      	bhi.n	800963a <memmove+0x1a>
 800962a:	1e42      	subs	r2, r0, #1
 800962c:	4299      	cmp	r1, r3
 800962e:	d00a      	beq.n	8009646 <memmove+0x26>
 8009630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009634:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009638:	e7f8      	b.n	800962c <memmove+0xc>
 800963a:	4283      	cmp	r3, r0
 800963c:	d9f5      	bls.n	800962a <memmove+0xa>
 800963e:	1881      	adds	r1, r0, r2
 8009640:	1ad2      	subs	r2, r2, r3
 8009642:	42d3      	cmn	r3, r2
 8009644:	d100      	bne.n	8009648 <memmove+0x28>
 8009646:	bd10      	pop	{r4, pc}
 8009648:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800964c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009650:	e7f7      	b.n	8009642 <memmove+0x22>

08009652 <_realloc_r>:
 8009652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009654:	4607      	mov	r7, r0
 8009656:	4614      	mov	r4, r2
 8009658:	460e      	mov	r6, r1
 800965a:	b921      	cbnz	r1, 8009666 <_realloc_r+0x14>
 800965c:	4611      	mov	r1, r2
 800965e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009662:	f7ff bc77 	b.w	8008f54 <_malloc_r>
 8009666:	b922      	cbnz	r2, 8009672 <_realloc_r+0x20>
 8009668:	f7ff fc26 	bl	8008eb8 <_free_r>
 800966c:	4625      	mov	r5, r4
 800966e:	4628      	mov	r0, r5
 8009670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009672:	f000 f814 	bl	800969e <_malloc_usable_size_r>
 8009676:	42a0      	cmp	r0, r4
 8009678:	d20f      	bcs.n	800969a <_realloc_r+0x48>
 800967a:	4621      	mov	r1, r4
 800967c:	4638      	mov	r0, r7
 800967e:	f7ff fc69 	bl	8008f54 <_malloc_r>
 8009682:	4605      	mov	r5, r0
 8009684:	2800      	cmp	r0, #0
 8009686:	d0f2      	beq.n	800966e <_realloc_r+0x1c>
 8009688:	4631      	mov	r1, r6
 800968a:	4622      	mov	r2, r4
 800968c:	f7ff fc00 	bl	8008e90 <memcpy>
 8009690:	4631      	mov	r1, r6
 8009692:	4638      	mov	r0, r7
 8009694:	f7ff fc10 	bl	8008eb8 <_free_r>
 8009698:	e7e9      	b.n	800966e <_realloc_r+0x1c>
 800969a:	4635      	mov	r5, r6
 800969c:	e7e7      	b.n	800966e <_realloc_r+0x1c>

0800969e <_malloc_usable_size_r>:
 800969e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a2:	1f18      	subs	r0, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	bfbc      	itt	lt
 80096a8:	580b      	ldrlt	r3, [r1, r0]
 80096aa:	18c0      	addlt	r0, r0, r3
 80096ac:	4770      	bx	lr
	...

080096b0 <_init>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	bf00      	nop
 80096b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b6:	bc08      	pop	{r3}
 80096b8:	469e      	mov	lr, r3
 80096ba:	4770      	bx	lr

080096bc <_fini>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	bf00      	nop
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr
