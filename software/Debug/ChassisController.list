
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b198  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800b398  0800b398  0001b398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6b0  0800b6b0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6b0  0800b6b0  0001b6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6b8  0800b6b8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6b8  0800b6b8  0001b6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6bc  0800b6bc  0001b6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800b6c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  200000b4  0800b774  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d10  0800b774  00024d10  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027904  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004dad  00000000  00000000  000479e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b8  00000000  00000000  0004c798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  0004e150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cb7a  00000000  00000000  0004f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001937d  00000000  00000000  0007c42a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001081e1  00000000  00000000  000957a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019d988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c8c  00000000  00000000  0019da04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b4 	.word	0x200000b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b380 	.word	0x0800b380

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b8 	.word	0x200000b8
 800023c:	0800b380 	.word	0x0800b380

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Parse_AMS_HeartbeatResponse>:

	return p;
}

void Parse_AMS_HeartbeatResponse(AMS_HeartbeatResponse_t packet, bool* HVAn, bool* HVBn, bool* precharge, bool* HVAp, bool* HVBp, uint16_t* averageVoltage, uint16_t* runtime)
{
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	1d3c      	adds	r4, r7, #4
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005ec:	603b      	str	r3, [r7, #0]
	*HVAn = (bool)(packet.data[0] & 0x1);
 80005ee:	7a3b      	ldrb	r3, [r7, #8]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	701a      	strb	r2, [r3, #0]
	*HVBn = (bool)(packet.data[0] & 0x2);
 8000602:	7a3b      	ldrb	r3, [r7, #8]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2da      	uxtb	r2, r3
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	701a      	strb	r2, [r3, #0]
	*precharge = (bool)(packet.data[0] & 0x4);
 8000616:	7a3b      	ldrb	r3, [r7, #8]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	701a      	strb	r2, [r3, #0]

	*HVAp = (bool)(packet.data[0] & 0x10);
 800062a:	7a3b      	ldrb	r3, [r7, #8]
 800062c:	f003 0310 	and.w	r3, r3, #16
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf14      	ite	ne
 8000634:	2301      	movne	r3, #1
 8000636:	2300      	moveq	r3, #0
 8000638:	b2da      	uxtb	r2, r3
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	701a      	strb	r2, [r3, #0]
	*HVBp = (bool)(packet.data[0] & 0x20);
 800063e:	7a3b      	ldrb	r3, [r7, #8]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2da      	uxtb	r2, r3
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	701a      	strb	r2, [r3, #0]

	*averageVoltage = (uint16_t)((packet.data[1] & 0x3F) << 6 | (packet.data[0]));
 8000652:	7a7b      	ldrb	r3, [r7, #9]
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	b21b      	sxth	r3, r3
 8000658:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800065c:	b21a      	sxth	r2, r3
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	b21b      	sxth	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29a      	uxth	r2, r3
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	801a      	strh	r2, [r3, #0]
	*runtime = (uint16_t)(packet.data[3] << 8 | packet.data[2]);
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21a      	sxth	r2, r3
 8000672:	7abb      	ldrb	r3, [r7, #10]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21b      	sxth	r3, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bc90      	pop	{r4, r7}
 8000688:	4770      	bx	lr

0800068a <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2200      	movs	r2, #0
 800069c:	2116      	movs	r1, #22
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f9b8 	bl	8000a14 <Compose_CANId>
 80006a4:	4603      	mov	r3, r0
 80006a6:	607b      	str	r3, [r7, #4]
	return p;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x17, 0x0, 0x0, 0x0, 0x0);
 80006b8:	2300      	movs	r3, #0
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2300      	movs	r3, #0
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2200      	movs	r2, #0
 80006c4:	2117      	movs	r1, #23
 80006c6:	2002      	movs	r0, #2
 80006c8:	f000 f9a4 	bl	8000a14 <Compose_CANId>
 80006cc:	4603      	mov	r3, r0
 80006ce:	607b      	str	r3, [r7, #4]
	return p;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <Compose_CC_SoftShutdown>:

CC_SoftShutdown_t Compose_CC_SoftShutdown(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af02      	add	r7, sp, #8
	CC_SoftShutdown_t p;
	p.id = Compose_CANId(0x2, 0x18, 0x0, 0x0, 0x0, 0x0);
 80006e0:	2300      	movs	r3, #0
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	2300      	movs	r3, #0
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2300      	movs	r3, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	2118      	movs	r1, #24
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 f990 	bl	8000a14 <Compose_CANId>
 80006f4:	4603      	mov	r3, r0
 80006f6:	607b      	str	r3, [r7, #4]
	return p;
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <fsm_new>:
#ifdef QUTMS_FSM

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 800070a:	2010      	movs	r0, #16
 800070c:	f00a fa20 	bl	800ab50 <malloc>
 8000710:	4603      	mov	r3, r0
 8000712:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 8000714:	2210      	movs	r2, #16
 8000716:	2100      	movs	r1, #0
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f00a fa2c 	bl	800ab76 <memset>
	fsm->currentState = beginState;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000724:	2200      	movs	r2, #0
 8000726:	2103      	movs	r1, #3
 8000728:	2003      	movs	r0, #3
 800072a:	f006 fe2f 	bl	800738c <osSemaphoreNew>
 800072e:	4602      	mov	r2, r0
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 8000734:	2200      	movs	r2, #0
 8000736:	2103      	movs	r1, #3
 8000738:	2003      	movs	r0, #3
 800073a:	f006 fe27 	bl	800738c <osSemaphoreNew>
 800073e:	4602      	mov	r2, r0
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	2120      	movs	r1, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f006 febc 	bl	80074c8 <osSemaphoreAcquire>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d109      	bne.n	800076a <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	4618      	mov	r0, r3
 8000766:	f006 ff15 	bl	8007594 <osSemaphoreRelease>
	}

	return fsm;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	2120      	movs	r1, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f006 fea0 	bl	80074c8 <osSemaphoreAcquire>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10a      	bne.n	80007a4 <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	4618      	mov	r0, r3
 800079e:	f006 fef9 	bl	8007594 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 80007a2:	e004      	b.n	80007ae <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 80007a4:	2225      	movs	r2, #37	; 0x25
 80007a6:	4904      	ldr	r1, [pc, #16]	; (80007b8 <fsm_iterate+0x44>)
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f8ab 	bl	8000904 <fsm_log>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	0800b398 	.word	0x0800b398

080007bc <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09c      	sub	sp, #112	; 0x70
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d036      	beq.n	8000840 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	2120      	movs	r1, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f006 fe75 	bl	80074c8 <osSemaphoreAcquire>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d127      	bne.n	8000834 <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	68d9      	ldr	r1, [r3, #12]
 80007ee:	f107 0014 	add.w	r0, r7, #20
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	460b      	mov	r3, r1
 80007f8:	4913      	ldr	r1, [pc, #76]	; (8000848 <fsm_changeState+0x8c>)
 80007fa:	f00a fa7d 	bl	800acf8 <siprintf>
 80007fe:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 8000800:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 f87b 	bl	8000904 <fsm_log>
		fsm->currentState->exit(fsm);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	4798      	blx	r3

		fsm->currentState = newState;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	4618      	mov	r0, r3
 800082e:	f006 feb1 	bl	8007594 <osSemaphoreRelease>
 8000832:	e006      	b.n	8000842 <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 8000834:	2220      	movs	r2, #32
 8000836:	4905      	ldr	r1, [pc, #20]	; (800084c <fsm_changeState+0x90>)
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f863 	bl	8000904 <fsm_log>
 800083e:	e000      	b.n	8000842 <fsm_changeState+0x86>
		return;
 8000840:	bf00      	nop
	}
}
 8000842:	3768      	adds	r7, #104	; 0x68
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	0800b3c0 	.word	0x0800b3c0
 800084c:	0800b3e4 	.word	0x0800b3e4

08000850 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b098      	sub	sp, #96	; 0x60
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	68da      	ldr	r2, [r3, #12]
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4920      	ldr	r1, [pc, #128]	; (80008e4 <fsm_reset+0x94>)
 8000864:	4618      	mov	r0, r3
 8000866:	f00a fa47 	bl	800acf8 <siprintf>
 800086a:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 800086c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f845 	bl	8000904 <fsm_log>
	fsm_log_function f = fsm->log;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 8000880:	2210      	movs	r2, #16
 8000882:	2100      	movs	r1, #0
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f00a f976 	bl	800ab76 <memset>
	fsm->log = f;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800088e:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000896:	2200      	movs	r2, #0
 8000898:	2103      	movs	r1, #3
 800089a:	2003      	movs	r0, #3
 800089c:	f006 fd76 	bl	800738c <osSemaphoreNew>
 80008a0:	4602      	mov	r2, r0
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2103      	movs	r1, #3
 80008aa:	2003      	movs	r0, #3
 80008ac:	f006 fd6e 	bl	800738c <osSemaphoreNew>
 80008b0:	4602      	mov	r2, r0
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	2120      	movs	r1, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f006 fe03 	bl	80074c8 <osSemaphoreAcquire>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d109      	bne.n	80008dc <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f006 fe5c 	bl	8007594 <osSemaphoreRelease>
	}
}
 80008dc:	bf00      	nop
 80008de:	3760      	adds	r7, #96	; 0x60
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800b408 	.word	0x0800b408

080008e8 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	605a      	str	r2, [r3, #4]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	68b8      	ldr	r0, [r7, #8]
 8000918:	4798      	blx	r3
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <Compose_PDM_InitiateStartup>:
#ifdef QUTMS_CAN_PDM

#include "PDM_CAN_Messages.h"

PDM_InitiateStartup_t Compose_PDM_InitiateStartup(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af02      	add	r7, sp, #8
	PDM_InitiateStartup_t p;
	p.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x00, 0x0);
 8000928:	2300      	movs	r3, #0
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	2300      	movs	r3, #0
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	2200      	movs	r2, #0
 8000934:	2114      	movs	r1, #20
 8000936:	2002      	movs	r0, #2
 8000938:	f000 f86c 	bl	8000a14 <Compose_CANId>
 800093c:	4603      	mov	r3, r0
 800093e:	607b      	str	r3, [r7, #4]
	return p;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <Parse_PDM_StartupOk>:

	return packet;
}

void Parse_PDM_StartupOk(PDM_StartupOk_t packet, uint32_t* powerChannels)
{
 800094a:	b480      	push	{r7}
 800094c:	b085      	sub	sp, #20
 800094e:	af00      	add	r7, sp, #0
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	e883 0003 	stmia.w	r3, {r0, r1}
 8000958:	607a      	str	r2, [r7, #4]
	*powerChannels = (packet.data[0] << 24) + (packet.data[1] << 16) + (packet.data[2] << 8) + packet.data[3];
 800095a:	7b3b      	ldrb	r3, [r7, #12]
 800095c:	061a      	lsls	r2, r3, #24
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	041b      	lsls	r3, r3, #16
 8000962:	441a      	add	r2, r3
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	4413      	add	r3, r2
 800096a:	7bfa      	ldrb	r2, [r7, #15]
 800096c:	4413      	add	r3, r2
 800096e:	461a      	mov	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <Compose_PDM_SelectStartup>:

PDM_SelectStartup_t Compose_PDM_SelectStartup(uint32_t powerChannels)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	PDM_SelectStartup_t packet;
	packet.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x01, 0x0);
 800098a:	2300      	movs	r3, #0
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	2301      	movs	r3, #1
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2302      	movs	r3, #2
 8000994:	2200      	movs	r2, #0
 8000996:	2114      	movs	r1, #20
 8000998:	2002      	movs	r0, #2
 800099a:	f000 f83b 	bl	8000a14 <Compose_CANId>
 800099e:	4603      	mov	r3, r0
 80009a0:	613b      	str	r3, [r7, #16]

	uint8_t d[4] = {0};
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<4 ;++i)
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	e00f      	b.n	80009cc <Compose_PDM_SelectStartup+0x4c>
		d[i] = ((uint8_t*)&powerChannels)[3-i];
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0303 	rsb	r3, r3, #3
 80009b2:	461a      	mov	r2, r3
 80009b4:	463b      	mov	r3, r7
 80009b6:	4413      	add	r3, r2
 80009b8:	7819      	ldrb	r1, [r3, #0]
 80009ba:	f107 020c 	add.w	r2, r7, #12
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	4413      	add	r3, r2
 80009c2:	460a      	mov	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3301      	adds	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	ddec      	ble.n	80009ac <Compose_PDM_SelectStartup+0x2c>

	for (int i=0; i<4 ;++i)
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	e00d      	b.n	80009f4 <Compose_PDM_SelectStartup+0x74>
		packet.data[i] = (uint8_t)(d[i] & 0xFF);
 80009d8:	f107 020c 	add.w	r2, r7, #12
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	4413      	add	r3, r2
 80009e0:	7819      	ldrb	r1, [r3, #0]
 80009e2:	f107 0214 	add.w	r2, r7, #20
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	4413      	add	r3, r2
 80009ea:	460a      	mov	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	3301      	adds	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	ddee      	ble.n	80009d8 <Compose_PDM_SelectStartup+0x58>

	return packet;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	461a      	mov	r2, r3
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a06:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <Compose_CANId>:

/* USER CODE BEGIN 0 */

/* CANId */
uint32_t Compose_CANId(uint8_t priority, uint16_t sourceId, uint8_t autonomous, uint8_t type, uint16_t extra, uint8_t BMSId)
{
 8000a14:	b490      	push	{r4, r7}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4623      	mov	r3, r4
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	4603      	mov	r3, r0
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	70fb      	strb	r3, [r7, #3]
	uint32_t id = (priority & 0x3) << 27
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	06db      	lsls	r3, r3, #27
 8000a36:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
				| (sourceId & 0x1FF) << 18
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	0499      	lsls	r1, r3, #18
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <Compose_CANId+0x68>)
 8000a40:	400b      	ands	r3, r1
 8000a42:	431a      	orrs	r2, r3
				| (autonomous & 0x1) << 17
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	045b      	lsls	r3, r3, #17
 8000a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4c:	431a      	orrs	r2, r3
				| (type & 0x7) << 14
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	039b      	lsls	r3, r3, #14
 8000a52:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000a56:	431a      	orrs	r2, r3
				| (extra & 0x3FF) << 4
 8000a58:	8b3b      	ldrh	r3, [r7, #24]
 8000a5a:	0119      	lsls	r1, r3, #4
 8000a5c:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000a60:	400b      	ands	r3, r1
 8000a62:	431a      	orrs	r2, r3
				| (BMSId & 0xF);
 8000a64:	7f3b      	ldrb	r3, [r7, #28]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	4313      	orrs	r3, r2
	uint32_t id = (priority & 0x3) << 27
 8000a6c:	60fb      	str	r3, [r7, #12]
	return id;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc90      	pop	{r4, r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	07fc0000 	.word	0x07fc0000

08000a80 <Parse_SHDN_IMD_HeartbeatResponse>:
	p.data = pwmState;
	return p;
}

void Parse_SHDN_IMD_HeartbeatResponse(SHDN_IMD_HeartbeatResponse_t packet, uint8_t* pwmState)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a8e:	607a      	str	r2, [r7, #4]
	*pwmState = packet.data;
 8000a90:	7b3a      	ldrb	r2, [r7, #12]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	701a      	strb	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <map>:
#define ACCEL_PEDAL_THREE_MIN 320
#define ACCEL_PEDAL_THREE_MAX 3380

/* Util Functions */
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b085      	sub	sp, #20
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (float)(in_max - in_min) + out_min;
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	69b9      	ldr	r1, [r7, #24]
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	1a8a      	subs	r2, r1, r2
 8000abc:	fb02 f303 	mul.w	r3, r2, r3
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	ee07 3a90 	vmov	s15, r3
 8000ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	ee07 3a90 	vmov	s15, r3
 8000ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aec:	ee17 3a90 	vmov	r3, s15
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000b04:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <state_start_enter+0x110>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d152      	bne.n	8000bb2 <state_start_enter+0xb6>
	{
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000b0c:	f240 40f4 	movw	r0, #1268	; 0x4f4
 8000b10:	f00a f81e 	bl	800ab50 <malloc>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <state_start_enter+0x110>)
 8000b1a:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000b1c:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <state_start_enter+0x110>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f240 42f4 	movw	r2, #1268	; 0x4f4
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00a f825 	bl	800ab76 <memset>

		// As CC_GlobalState is accessible across threads, we need to use a semaphore to access it
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000b2c:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <state_start_enter+0x110>)
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	2103      	movs	r1, #3
 8000b34:	2003      	movs	r0, #3
 8000b36:	f006 fc29 	bl	800738c <osSemaphoreNew>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <state_start_enter+0x110>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000b48:	2120      	movs	r1, #32
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f006 fcbc 	bl	80074c8 <osSemaphoreAcquire>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d11b      	bne.n	8000b8e <state_start_enter+0x92>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <state_start_enter+0x110>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->AMS_Debug = false;
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <state_start_enter+0x110>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2200      	movs	r2, #0
 8000b64:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <state_start_enter+0x110>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->RTD_Debug = true;
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <state_start_enter+0x110>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2201      	movs	r2, #1
 8000b74:	761a      	strb	r2, [r3, #24]

			CC_GlobalState->tractiveActive = false;
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <state_start_enter+0x110>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2

			osSemaphoreRelease(CC_GlobalState->sem);
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <state_start_enter+0x110>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f006 fd03 	bl	8007594 <osSemaphoreRelease>
		}

		CC_GlobalState->CANQueue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <state_start_enter+0x110>)
 8000b90:	681c      	ldr	r4, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	2128      	movs	r1, #40	; 0x28
 8000b96:	200a      	movs	r0, #10
 8000b98:	f006 fd54 	bl	8007644 <osMessageQueueNew>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f8c4 34d8 	str.w	r3, [r4, #1240]	; 0x4d8
		if(CC_GlobalState->CANQueue == NULL)
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <state_start_enter+0x110>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <state_start_enter+0xb6>
		{
			Error_Handler();
 8000bae:	f002 f93d 	bl	8002e2c <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb8:	4815      	ldr	r0, [pc, #84]	; (8000c10 <state_start_enter+0x114>)
 8000bba:	f004 fa71 	bl	80050a0 <HAL_GPIO_WritePin>
	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t pdmStartup = Compose_PDM_InitiateStartup();
 8000bbe:	f7ff feb0 	bl	8000922 <Compose_PDM_InitiateStartup>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	615a      	str	r2, [r3, #20]
	{
			.ExtId = pdmStartup.id,
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	2304      	movs	r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000be4:	230f      	movs	r3, #15
 8000be6:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <state_start_enter+0x110>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3308      	adds	r3, #8
 8000bee:	f107 0208 	add.w	r2, r7, #8
 8000bf2:	f107 010c 	add.w	r1, r7, #12
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <state_start_enter+0x118>)
 8000bf8:	f003 fa22 	bl	8004040 <HAL_CAN_AddTxMessage>

	/* Debug Tracing */
	CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
 8000bfc:	210d      	movs	r1, #13
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <state_start_enter+0x11c>)
 8000c00:	f002 f82e 	bl	8002c60 <CC_LogInfo>
	return;
 8000c04:	bf00      	nop
}
 8000c06:	372c      	adds	r7, #44	; 0x2c
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	200049f0 	.word	0x200049f0
 8000c10:	40021000 	.word	0x40021000
 8000c14:	20004bb4 	.word	0x20004bb4
 8000c18:	0800b44c 	.word	0x0800b44c

08000c1c <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b09b      	sub	sp, #108	; 0x6c
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000c24:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <state_start_iterate+0x13c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	7e5b      	ldrb	r3, [r3, #25]
 8000c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	657b      	str	r3, [r7, #84]	; 0x54
 8000c32:	2300      	movs	r3, #0
 8000c34:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000c36:	e028      	b.n	8000c8a <state_start_iterate+0x6e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <state_start_iterate+0x13c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8000c40:	f107 010c 	add.w	r1, r7, #12
 8000c44:	2300      	movs	r3, #0
 8000c46:	2200      	movs	r2, #0
 8000c48:	f006 fdf6 	bl	8007838 <osMessageQueueGet>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d11b      	bne.n	8000c8a <state_start_iterate+0x6e>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(0x2, 0x14, 0x0, 0x3, 0x00, 0x0))
 8000c52:	693c      	ldr	r4, [r7, #16]
 8000c54:	2300      	movs	r3, #0
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2114      	movs	r1, #20
 8000c62:	2002      	movs	r0, #2
 8000c64:	f7ff fed6 	bl	8000a14 <Compose_CANId>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	d10d      	bne.n	8000c8a <state_start_iterate+0x6e>
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(*((PDM_StartupOk_t*)&(msg.data)), &getPowerChannels);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	331c      	adds	r3, #28
 8000c78:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000c7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c80:	f7ff fe63 	bl	800094a <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000c84:	2301      	movs	r3, #1
 8000c86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <state_start_iterate+0x13c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8000c92:	4618      	mov	r0, r3
 8000c94:	f006 fe42 	bl	800791c <osMessageQueueGetCount>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1cc      	bne.n	8000c38 <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d053      	beq.n	8000d4e <state_start_iterate+0x132>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000cb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe5f 	bl	8000980 <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000cc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cd8:	2304      	movs	r3, #4
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cdc:	2304      	movs	r3, #4
 8000cde:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <state_start_iterate+0x13c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f103 0008 	add.w	r0, r3, #8
 8000ce8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cec:	1d1a      	adds	r2, r3, #4
 8000cee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4819      	ldr	r0, [pc, #100]	; (8000d5c <state_start_iterate+0x140>)
 8000cf6:	f003 f9a3 	bl	8004040 <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <state_start_iterate+0x13c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000d02:	2120      	movs	r1, #32
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 fbdf 	bl	80074c8 <osSemaphoreAcquire>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d118      	bne.n	8000d42 <state_start_iterate+0x126>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <state_start_iterate+0x13c>)
 8000d12:	681c      	ldr	r4, [r3, #0]
 8000d14:	f002 fa78 	bl	8003208 <HAL_GetTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	61e3      	str	r3, [r4, #28]
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <state_start_iterate+0x13c>)
 8000d1e:	681c      	ldr	r4, [r3, #0]
 8000d20:	f002 fa72 	bl	8003208 <HAL_GetTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	62a3      	str	r3, [r4, #40]	; 0x28
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <state_start_iterate+0x13c>)
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	f002 fa6c 	bl	8003208 <HAL_GetTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	62e3      	str	r3, [r4, #44]	; 0x2c
			osSemaphoreRelease(CC_GlobalState->sem);
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <state_start_iterate+0x13c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f006 fc29 	bl	8007594 <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <state_start_iterate+0x144>)
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <state_start_iterate+0x148>)
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fd38 	bl	80007bc <fsm_changeState>
	}
	return;
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
}
 8000d50:	3764      	adds	r7, #100	; 0x64
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200049f0 	.word	0x200049f0
 8000d5c:	20004bb4 	.word	0x20004bb4
 8000d60:	0800b45c 	.word	0x0800b45c
 8000d64:	20000010 	.word	0x20000010

08000d68 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	/* Wake/Ready to Idle over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8000d70:	bf00      	nop
}
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8000d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8c:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <state_idle_enter+0x78>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000d96:	2120      	movs	r1, #32
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 fb95 	bl	80074c8 <osSemaphoreAcquire>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d11c      	bne.n	8000dde <state_idle_enter+0x5e>
	{
		CC_GlobalState->brakePressureThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dae:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000de8 <state_idle_enter+0x68>
 8000db2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000db6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000df0 <state_idle_enter+0x70>
 8000dba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <state_idle_enter+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dc6:	ee17 2a90 	vmov	r2, s15
 8000dca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		osSemaphoreRelease(CC_GlobalState->sem);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <state_idle_enter+0x78>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f006 fbdc 	bl	8007594 <osSemaphoreRelease>
	}
	return;
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
}
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	9999999a 	.word	0x9999999a
 8000dec:	3fc99999 	.word	0x3fc99999
 8000df0:	00000000 	.word	0x00000000
 8000df4:	40790000 	.word	0x40790000
 8000df8:	200049f0 	.word	0x200049f0
 8000dfc:	00000000 	.word	0x00000000

08000e00 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b0a9      	sub	sp, #164	; 0xa4
 8000e04:	af06      	add	r7, sp, #24
 8000e06:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000e08:	4bbf      	ldr	r3, [pc, #764]	; (8001108 <state_idle_iterate+0x308>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000e10:	2120      	movs	r1, #32
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 fb58 	bl	80074c8 <osSemaphoreAcquire>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 8101 	bne.w	8001022 <state_idle_iterate+0x222>
	{
		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8000e20:	f002 f9f2 	bl	8003208 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	4bb8      	ldr	r3, [pc, #736]	; (8001108 <state_idle_iterate+0x308>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	; 0x64
 8000e30:	d93e      	bls.n	8000eb0 <state_idle_iterate+0xb0>
 8000e32:	4bb5      	ldr	r3, [pc, #724]	; (8001108 <state_idle_iterate+0x308>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	7e9b      	ldrb	r3, [r3, #26]
 8000e38:	f083 0301 	eor.w	r3, r3, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d036      	beq.n	8000eb0 <state_idle_iterate+0xb0>
		{
			CC_LogInfo("Fatal Shutdown AMS\r\n", strlen("Fatal Shutdown AMS\r\n"));
 8000e42:	2114      	movs	r1, #20
 8000e44:	48b1      	ldr	r0, [pc, #708]	; (800110c <state_idle_iterate+0x30c>)
 8000e46:	f001 ff0b 	bl	8002c60 <CC_LogInfo>
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000e4a:	f7ff fc32 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	67fb      	str	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 8000e52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 8000e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 8000e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e68:	2304      	movs	r3, #4
 8000e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	677b      	str	r3, [r7, #116]	; 0x74
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8000e70:	230f      	movs	r3, #15
 8000e72:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000e76:	4ba4      	ldr	r3, [pc, #656]	; (8001108 <state_idle_iterate+0x308>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e7e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000e82:	48a3      	ldr	r0, [pc, #652]	; (8001110 <state_idle_iterate+0x310>)
 8000e84:	f003 f8dc 	bl	8004040 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000e88:	4b9f      	ldr	r3, [pc, #636]	; (8001108 <state_idle_iterate+0x308>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3308      	adds	r3, #8
 8000e8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e92:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000e96:	489f      	ldr	r0, [pc, #636]	; (8001114 <state_idle_iterate+0x314>)
 8000e98:	f003 f8d2 	bl	8004040 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000e9c:	4b9a      	ldr	r3, [pc, #616]	; (8001108 <state_idle_iterate+0x308>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3310      	adds	r3, #16
 8000ea2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ea6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000eaa:	489b      	ldr	r0, [pc, #620]	; (8001118 <state_idle_iterate+0x318>)
 8000eac:	f003 f8c8 	bl	8004040 <HAL_CAN_AddTxMessage>
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8000eb0:	f002 f9aa 	bl	8003208 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4b94      	ldr	r3, [pc, #592]	; (8001108 <state_idle_iterate+0x308>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d93a      	bls.n	8000f38 <state_idle_iterate+0x138>
 8000ec2:	4b91      	ldr	r3, [pc, #580]	; (8001108 <state_idle_iterate+0x308>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	7edb      	ldrb	r3, [r3, #27]
 8000ec8:	f083 0301 	eor.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d032      	beq.n	8000f38 <state_idle_iterate+0x138>
		{
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000ed2:	f7ff fbee 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
			CAN_TxHeaderTypeDef header =
 8000eda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 8000eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
			CAN_TxHeaderTypeDef header =
 8000eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	657b      	str	r3, [r7, #84]	; 0x54
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8000ef8:	230f      	movs	r3, #15
 8000efa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000efe:	4b82      	ldr	r3, [pc, #520]	; (8001108 <state_idle_iterate+0x308>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f06:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f0a:	4881      	ldr	r0, [pc, #516]	; (8001110 <state_idle_iterate+0x310>)
 8000f0c:	f003 f898 	bl	8004040 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000f10:	4b7d      	ldr	r3, [pc, #500]	; (8001108 <state_idle_iterate+0x308>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3308      	adds	r3, #8
 8000f16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f1a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f1e:	487d      	ldr	r0, [pc, #500]	; (8001114 <state_idle_iterate+0x314>)
 8000f20:	f003 f88e 	bl	8004040 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000f24:	4b78      	ldr	r3, [pc, #480]	; (8001108 <state_idle_iterate+0x308>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3310      	adds	r3, #16
 8000f2a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f2e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f32:	4879      	ldr	r0, [pc, #484]	; (8001118 <state_idle_iterate+0x318>)
 8000f34:	f003 f884 	bl	8004040 <HAL_CAN_AddTxMessage>
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8000f38:	4b73      	ldr	r3, [pc, #460]	; (8001108 <state_idle_iterate+0x308>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000f40:	4618      	mov	r0, r3
 8000f42:	f006 fb27 	bl	8007594 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000f46:	e06c      	b.n	8001022 <state_idle_iterate+0x222>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000f48:	4b6f      	ldr	r3, [pc, #444]	; (8001108 <state_idle_iterate+0x308>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8000f50:	f107 010c 	add.w	r1, r7, #12
 8000f54:	2300      	movs	r3, #0
 8000f56:	2200      	movs	r2, #0
 8000f58:	f006 fc6e 	bl	8007838 <osMessageQueueGet>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d15f      	bne.n	8001022 <state_idle_iterate+0x222>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000f62:	693c      	ldr	r4, [r7, #16]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff fd4e 	bl	8000a14 <Compose_CANId>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	429c      	cmp	r4, r3
 8000f7c:	d134      	bne.n	8000fe8 <state_idle_iterate+0x1e8>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000f7e:	4b62      	ldr	r3, [pc, #392]	; (8001108 <state_idle_iterate+0x308>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000f86:	2120      	movs	r1, #32
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f006 fa9d 	bl	80074c8 <osSemaphoreAcquire>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d146      	bne.n	8001022 <state_idle_iterate+0x222>
				{
					bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(*((AMS_HeartbeatResponse_t*)&(msg.data)), &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	f103 021c 	add.w	r2, r3, #28
 8000f9c:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000fa0:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000fa4:	9305      	str	r3, [sp, #20]
 8000fa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000faa:	9304      	str	r3, [sp, #16]
 8000fac:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000fb0:	9303      	str	r3, [sp, #12]
 8000fb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc8:	f7ff fb0a 	bl	80005e0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 8000fcc:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <state_idle_iterate+0x308>)
 8000fce:	681c      	ldr	r4, [r3, #0]
 8000fd0:	f002 f91a 	bl	8003208 <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	62a3      	str	r3, [r4, #40]	; 0x28
					osSemaphoreRelease(CC_GlobalState->sem);
 8000fd8:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <state_idle_iterate+0x308>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f006 fad7 	bl	8007594 <osSemaphoreRelease>
 8000fe6:	e01c      	b.n	8001022 <state_idle_iterate+0x222>
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000fe8:	693c      	ldr	r4, [r7, #16]
 8000fea:	2300      	movs	r3, #0
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff fd0b 	bl	8000a14 <Compose_CANId>
 8000ffe:	4603      	mov	r3, r0
 8001000:	429c      	cmp	r4, r3
 8001002:	d10e      	bne.n	8001022 <state_idle_iterate+0x222>
			{
				uint8_t pwmState;
				Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	331c      	adds	r3, #28
 800100a:	f107 0235 	add.w	r2, r7, #53	; 0x35
 800100e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001012:	f7ff fd35 	bl	8000a80 <Parse_SHDN_IMD_HeartbeatResponse>
				CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <state_idle_iterate+0x308>)
 8001018:	681c      	ldr	r4, [r3, #0]
 800101a:	f002 f8f5 	bl	8003208 <HAL_GetTick>
 800101e:	4603      	mov	r3, r0
 8001020:	62e3      	str	r3, [r4, #44]	; 0x2c
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8001022:	4b39      	ldr	r3, [pc, #228]	; (8001108 <state_idle_iterate+0x308>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800102a:	4618      	mov	r0, r3
 800102c:	f006 fc76 	bl	800791c <osMessageQueueGetCount>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d188      	bne.n	8000f48 <state_idle_iterate+0x148>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <state_idle_iterate+0x308>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	7e1b      	ldrb	r3, [r3, #24]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d018      	beq.n	8001072 <state_idle_iterate+0x272>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 8001048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001054:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80010f8 <state_idle_iterate+0x2f8>
 8001058:	ee27 7b06 	vmul.f64	d7, d7, d6
 800105c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001100 <state_idle_iterate+0x300>
 8001060:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001064:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001068:	ee17 3a90 	vmov	r3, s15
 800106c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001070:	e008      	b.n	8001084 <state_idle_iterate+0x284>
	}
	else
	{
		HAL_ADC_Start(&hadc3);
 8001072:	482a      	ldr	r0, [pc, #168]	; (800111c <state_idle_iterate+0x31c>)
 8001074:	f002 f918 	bl	80032a8 <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc3);
 8001078:	4828      	ldr	r0, [pc, #160]	; (800111c <state_idle_iterate+0x31c>)
 800107a:	f002 fac3 	bl	8003604 <HAL_ADC_GetValue>
 800107e:	4603      	mov	r3, r0
 8001080:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	}
	if(raw > CC_GlobalState->brakePressureThreshold)
 8001084:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <state_idle_iterate+0x308>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001090:	429a      	cmp	r2, r3
 8001092:	d94b      	bls.n	800112c <state_idle_iterate+0x32c>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109a:	4821      	ldr	r0, [pc, #132]	; (8001120 <state_idle_iterate+0x320>)
 800109c:	f004 f800 	bl	80050a0 <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <state_idle_iterate+0x308>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80010a8:	2120      	movs	r1, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 fa0c 	bl	80074c8 <osSemaphoreAcquire>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d140      	bne.n	8001138 <state_idle_iterate+0x338>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 80010b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ba:	4819      	ldr	r0, [pc, #100]	; (8001120 <state_idle_iterate+0x320>)
 80010bc:	f003 ffd8 	bl	8005070 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d010      	beq.n	80010e8 <state_idle_iterate+0x2e8>
 80010c6:	f002 f89f 	bl	8003208 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <state_idle_iterate+0x308>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	f241 3287 	movw	r2, #4999	; 0x1387
 80010da:	4293      	cmp	r3, r2
 80010dc:	d904      	bls.n	80010e8 <state_idle_iterate+0x2e8>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <state_idle_iterate+0x324>)
 80010e0:	4911      	ldr	r1, [pc, #68]	; (8001128 <state_idle_iterate+0x328>)
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fb6a 	bl	80007bc <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <state_idle_iterate+0x308>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 fa4f 	bl	8007594 <osSemaphoreRelease>
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
	}
}
 80010f6:	e01f      	b.n	8001138 <state_idle_iterate+0x338>
 80010f8:	33333333 	.word	0x33333333
 80010fc:	3fd33333 	.word	0x3fd33333
 8001100:	00000000 	.word	0x00000000
 8001104:	40790000 	.word	0x40790000
 8001108:	200049f0 	.word	0x200049f0
 800110c:	0800b478 	.word	0x0800b478
 8001110:	20004bdc 	.word	0x20004bdc
 8001114:	20004bb4 	.word	0x20004bb4
 8001118:	20004b8c 	.word	0x20004b8c
 800111c:	20004a84 	.word	0x20004a84
 8001120:	40021000 	.word	0x40021000
 8001124:	0800b490 	.word	0x0800b490
 8001128:	20000020 	.word	0x20000020
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <state_idle_iterate+0x340>)
 8001134:	f003 ffb4 	bl	80050a0 <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	378c      	adds	r7, #140	; 0x8c
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	40021000 	.word	0x40021000

08001144 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b08b      	sub	sp, #44	; 0x2c
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 800114c:	f7ff fa9d 	bl	800068a <Compose_CC_ReadyToDrive>
 8001150:	4603      	mov	r3, r0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	2304      	movs	r3, #4
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	2301      	movs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8001172:	230f      	movs	r3, #15
 8001174:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <state_idle_exit+0xa8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f107 0208 	add.w	r2, r7, #8
 800117e:	f107 010c 	add.w	r1, r7, #12
 8001182:	481b      	ldr	r0, [pc, #108]	; (80011f0 <state_idle_exit+0xac>)
 8001184:	f002 ff5c 	bl	8004040 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <state_idle_exit+0xa8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3308      	adds	r3, #8
 800118e:	f107 0208 	add.w	r2, r7, #8
 8001192:	f107 010c 	add.w	r1, r7, #12
 8001196:	4817      	ldr	r0, [pc, #92]	; (80011f4 <state_idle_exit+0xb0>)
 8001198:	f002 ff52 	bl	8004040 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <state_idle_exit+0xa8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3310      	adds	r3, #16
 80011a2:	f107 0208 	add.w	r2, r7, #8
 80011a6:	f107 010c 	add.w	r1, r7, #12
 80011aa:	4813      	ldr	r0, [pc, #76]	; (80011f8 <state_idle_exit+0xb4>)
 80011ac:	f002 ff48 	bl	8004040 <HAL_CAN_AddTxMessage>

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <state_idle_exit+0xa8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80011b8:	2120      	movs	r1, #32
 80011ba:	4618      	mov	r0, r3
 80011bc:	f006 f984 	bl	80074c8 <osSemaphoreAcquire>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10d      	bne.n	80011e2 <state_idle_exit+0x9e>
	{
		CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <state_idle_exit+0xa8>)
 80011c8:	681c      	ldr	r4, [r3, #0]
 80011ca:	f002 f81d 	bl	8003208 <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	6223      	str	r3, [r4, #32]
		osSemaphoreRelease(CC_GlobalState->sem);
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <state_idle_exit+0xa8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 f9da 	bl	8007594 <osSemaphoreRelease>
	}
	return;
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
}
 80011e4:	372c      	adds	r7, #44	; 0x2c
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200049f0 	.word	0x200049f0
 80011f0:	20004bdc 	.word	0x20004bdc
 80011f4:	20004bb4 	.word	0x20004bb4
 80011f8:	20004b8c 	.word	0x20004b8c

080011fc <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	/* Play RTD Siren for 2 Seconds */

	/* Enable all channels on PDM */
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001204:	4b4e      	ldr	r3, [pc, #312]	; (8001340 <state_driving_enter+0x144>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800120c:	2120      	movs	r1, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f006 f95a 	bl	80074c8 <osSemaphoreAcquire>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d17d      	bne.n	8001316 <state_driving_enter+0x11a>
	{
		CC_GlobalState->tractiveActive = true;
 800121a:	4b49      	ldr	r3, [pc, #292]	; (8001340 <state_driving_enter+0x144>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
		CC_GlobalState->faultDetected = false;
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <state_driving_enter+0x144>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
		CC_GlobalState->rtdLightActive = true;
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <state_driving_enter+0x144>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4

		memset(CC_GlobalState->rollingBrakeValues, 0, 10*sizeof(uint32_t));
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <state_driving_enter+0x144>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001240:	2228      	movs	r2, #40	; 0x28
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f009 fc96 	bl	800ab76 <memset>
		memset(CC_GlobalState->secondaryRollingBrakeValues, 0, 10*sizeof(uint32_t));
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <state_driving_enter+0x144>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8001252:	2228      	movs	r2, #40	; 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f009 fc8d 	bl	800ab76 <memset>
		memset(CC_GlobalState->rollingAccelValues, 0, 10*sizeof(uint32_t));
 800125c:	4b38      	ldr	r3, [pc, #224]	; (8001340 <state_driving_enter+0x144>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8001264:	2228      	movs	r2, #40	; 0x28
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f009 fc84 	bl	800ab76 <memset>
		memset(CC_GlobalState->secondaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <state_driving_enter+0x144>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8001276:	2228      	movs	r2, #40	; 0x28
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f009 fc7b 	bl	800ab76 <memset>
		memset(CC_GlobalState->tertiaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <state_driving_enter+0x144>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001288:	2228      	movs	r2, #40	; 0x28
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fc72 	bl	800ab76 <memset>

		CC_GlobalState->brakeOneMin = BRAKE_PEDAL_ONE_MIN;
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <state_driving_enter+0x144>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800129a:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
		CC_GlobalState->brakeOneMax = BRAKE_PEDAL_ONE_MAX;
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <state_driving_enter+0x144>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f640 5248 	movw	r2, #3400	; 0xd48
 80012a6:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446
		CC_GlobalState->brakeTwoMin = BRAKE_PEDAL_TWO_MIN;
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <state_driving_enter+0x144>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	22f0      	movs	r2, #240	; 0xf0
 80012b0:	f8a3 2448 	strh.w	r2, [r3, #1096]	; 0x448
		CC_GlobalState->brakeTwoMax = BRAKE_PEDAL_TWO_MAX;
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <state_driving_enter+0x144>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f640 42f8 	movw	r2, #3320	; 0xcf8
 80012bc:	f8a3 244a 	strh.w	r2, [r3, #1098]	; 0x44a

		CC_GlobalState->accelOneMin = ACCEL_PEDAL_ONE_MIN;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <state_driving_enter+0x144>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012c8:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
		CC_GlobalState->accelOneMax = ACCEL_PEDAL_ONE_MAX;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <state_driving_enter+0x144>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f640 5216 	movw	r2, #3350	; 0xd16
 80012d4:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
		CC_GlobalState->accelTwoMin = ACCEL_PEDAL_TWO_MIN;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <state_driving_enter+0x144>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012e0:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
		CC_GlobalState->accelTwoMax = ACCEL_PEDAL_TWO_MAX;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <state_driving_enter+0x144>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f640 5248 	movw	r2, #3400	; 0xd48
 80012ec:	f8a3 24ca 	strh.w	r2, [r3, #1226]	; 0x4ca
		CC_GlobalState->accelThreeMin = ACCEL_PEDAL_THREE_MIN;
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <state_driving_enter+0x144>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012f8:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
		CC_GlobalState->accelThreeMax = ACCEL_PEDAL_THREE_MAX;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <state_driving_enter+0x144>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f640 5234 	movw	r2, #3380	; 0xd34
 8001304:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce

		osSemaphoreRelease(CC_GlobalState->sem);
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <state_driving_enter+0x144>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001310:	4618      	mov	r0, r3
 8001312:	f006 f93f 	bl	8007594 <osSemaphoreRelease>
	}
	/* Start Polling ADC */
	HAL_ADC_Start_DMA(&hadc2, CC_GlobalState->brakeAdcValues, 100);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <state_driving_enter+0x144>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3330      	adds	r3, #48	; 0x30
 800131c:	2264      	movs	r2, #100	; 0x64
 800131e:	4619      	mov	r1, r3
 8001320:	4808      	ldr	r0, [pc, #32]	; (8001344 <state_driving_enter+0x148>)
 8001322:	f002 f881 	bl	8003428 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, CC_GlobalState->accelAdcValues, 150);
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <state_driving_enter+0x144>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800132e:	2296      	movs	r2, #150	; 0x96
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <state_driving_enter+0x14c>)
 8001334:	f002 f878 	bl	8003428 <HAL_ADC_Start_DMA>
	/* Else */

	/* Hard Shutdown Power Off */
	return;
 8001338:	bf00      	nop
}
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200049f0 	.word	0x200049f0
 8001344:	200049f4 	.word	0x200049f4
 8001348:	20004a3c 	.word	0x20004a3c

0800134c <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b0d3      	sub	sp, #332	; 0x14c
 8001350:	af06      	add	r7, sp, #24
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	6018      	str	r0, [r3, #0]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001356:	4b94      	ldr	r3, [pc, #592]	; (80015a8 <state_driving_iterate+0x25c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800135e:	2120      	movs	r1, #32
 8001360:	4618      	mov	r0, r3
 8001362:	f006 f8b1 	bl	80074c8 <osSemaphoreAcquire>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	f040 815a 	bne.w	8001622 <state_driving_iterate+0x2d6>
	{
		/* Flash RTD */
		if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) > 1000)
 800136e:	f001 ff4b 	bl	8003208 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	4b8c      	ldr	r3, [pc, #560]	; (80015a8 <state_driving_iterate+0x25c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001380:	d925      	bls.n	80013ce <state_driving_iterate+0x82>
		{
			if(!CC_GlobalState->rtdLightActive)
 8001382:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <state_driving_iterate+0x25c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800138a:	f083 0301 	eor.w	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <state_driving_iterate+0x60>
			{
				HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139a:	4884      	ldr	r0, [pc, #528]	; (80015ac <state_driving_iterate+0x260>)
 800139c:	f003 fe80 	bl	80050a0 <HAL_GPIO_WritePin>
				CC_GlobalState->rtdLightActive = true;
 80013a0:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <state_driving_iterate+0x25c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 80013aa:	e00a      	b.n	80013c2 <state_driving_iterate+0x76>
			}
			else
			{
				HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	487e      	ldr	r0, [pc, #504]	; (80015ac <state_driving_iterate+0x260>)
 80013b4:	f003 fe74 	bl	80050a0 <HAL_GPIO_WritePin>
				CC_GlobalState->rtdLightActive = false;
 80013b8:	4b7b      	ldr	r3, [pc, #492]	; (80015a8 <state_driving_iterate+0x25c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
			}
			CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 80013c2:	4b79      	ldr	r3, [pc, #484]	; (80015a8 <state_driving_iterate+0x25c>)
 80013c4:	681c      	ldr	r4, [r3, #0]
 80013c6:	f001 ff1f 	bl	8003208 <HAL_GetTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	6223      	str	r3, [r4, #32]
		}

		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 80013ce:	f001 ff1b 	bl	8003208 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b74      	ldr	r3, [pc, #464]	; (80015a8 <state_driving_iterate+0x25c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d943      	bls.n	8001468 <state_driving_iterate+0x11c>
 80013e0:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <state_driving_iterate+0x25c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	7e9b      	ldrb	r3, [r3, #26]
 80013e6:	f083 0301 	eor.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d03b      	beq.n	8001468 <state_driving_iterate+0x11c>
		{
			CC_LogInfo("Fatal Shutdown AMS Driving\r\n", strlen("Fatal Shutdown AMS Driving\r\n"));
 80013f0:	211c      	movs	r1, #28
 80013f2:	486f      	ldr	r0, [pc, #444]	; (80015b0 <state_driving_iterate+0x264>)
 80013f4:	f001 fc34 	bl	8002c60 <CC_LogInfo>
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 80013f8:	f7ff f95b 	bl	80006b2 <Compose_CC_FatalShutdown>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			CAN_TxHeaderTypeDef header =
 8001402:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 8001414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
			CAN_TxHeaderTypeDef header =
 8001418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800141c:	2304      	movs	r3, #4
 800141e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001422:	2301      	movs	r3, #1
 8001424:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8001428:	230f      	movs	r3, #15
 800142a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 800142e:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <state_driving_iterate+0x25c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001436:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800143a:	485e      	ldr	r0, [pc, #376]	; (80015b4 <state_driving_iterate+0x268>)
 800143c:	f002 fe00 	bl	8004040 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001440:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <state_driving_iterate+0x25c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3308      	adds	r3, #8
 8001446:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800144a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800144e:	485a      	ldr	r0, [pc, #360]	; (80015b8 <state_driving_iterate+0x26c>)
 8001450:	f002 fdf6 	bl	8004040 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8001454:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <state_driving_iterate+0x25c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3310      	adds	r3, #16
 800145a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800145e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001462:	4856      	ldr	r0, [pc, #344]	; (80015bc <state_driving_iterate+0x270>)
 8001464:	f002 fdec 	bl	8004040 <HAL_CAN_AddTxMessage>
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8001468:	f001 fece 	bl	8003208 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <state_driving_iterate+0x25c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d93a      	bls.n	80014f0 <state_driving_iterate+0x1a4>
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <state_driving_iterate+0x25c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	7edb      	ldrb	r3, [r3, #27]
 8001480:	f083 0301 	eor.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d032      	beq.n	80014f0 <state_driving_iterate+0x1a4>
		{
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 800148a:	f7ff f912 	bl	80006b2 <Compose_CC_FatalShutdown>
 800148e:	4603      	mov	r3, r0
 8001490:	67fb      	str	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 8001492:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 80014a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 80014a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80014a8:	2304      	movs	r3, #4
 80014aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014ac:	2301      	movs	r3, #1
 80014ae:	677b      	str	r3, [r7, #116]	; 0x74
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 80014b0:	230f      	movs	r3, #15
 80014b2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <state_driving_iterate+0x25c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014be:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80014c2:	483c      	ldr	r0, [pc, #240]	; (80015b4 <state_driving_iterate+0x268>)
 80014c4:	f002 fdbc 	bl	8004040 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <state_driving_iterate+0x25c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3308      	adds	r3, #8
 80014ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014d2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80014d6:	4838      	ldr	r0, [pc, #224]	; (80015b8 <state_driving_iterate+0x26c>)
 80014d8:	f002 fdb2 	bl	8004040 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <state_driving_iterate+0x25c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3310      	adds	r3, #16
 80014e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014e6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80014ea:	4834      	ldr	r0, [pc, #208]	; (80015bc <state_driving_iterate+0x270>)
 80014ec:	f002 fda8 	bl	8004040 <HAL_CAN_AddTxMessage>
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <state_driving_iterate+0x25c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 f84b 	bl	8007594 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 80014fe:	e090      	b.n	8001622 <state_driving_iterate+0x2d6>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <state_driving_iterate+0x25c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8001508:	f107 010c 	add.w	r1, r7, #12
 800150c:	2300      	movs	r3, #0
 800150e:	2200      	movs	r2, #0
 8001510:	f006 f992 	bl	8007838 <osMessageQueueGet>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	f040 8083 	bne.w	8001622 <state_driving_iterate+0x2d6>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	685c      	ldr	r4, [r3, #4]
 8001522:	2300      	movs	r3, #0
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2301      	movs	r3, #1
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	2200      	movs	r2, #0
 800152e:	2110      	movs	r1, #16
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fa6f 	bl	8000a14 <Compose_CANId>
 8001536:	4603      	mov	r3, r0
 8001538:	429c      	cmp	r4, r3
 800153a:	d141      	bne.n	80015c0 <state_driving_iterate+0x274>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <state_driving_iterate+0x25c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001544:	2120      	movs	r1, #32
 8001546:	4618      	mov	r0, r3
 8001548:	f005 ffbe 	bl	80074c8 <osSemaphoreAcquire>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d167      	bne.n	8001622 <state_driving_iterate+0x2d6>
				{
					bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(*((AMS_HeartbeatResponse_t*)&(msg.data)), &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	f103 021c 	add.w	r2, r3, #28
 800155a:	f107 015f 	add.w	r1, r7, #95	; 0x5f
 800155e:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8001562:	9305      	str	r3, [sp, #20]
 8001564:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001568:	9304      	str	r3, [sp, #16]
 800156a:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 800156e:	9303      	str	r3, [sp, #12]
 8001570:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	460b      	mov	r3, r1
 8001584:	ca07      	ldmia	r2, {r0, r1, r2}
 8001586:	f7ff f82b 	bl	80005e0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <state_driving_iterate+0x25c>)
 800158c:	681c      	ldr	r4, [r3, #0]
 800158e:	f001 fe3b 	bl	8003208 <HAL_GetTick>
 8001592:	4603      	mov	r3, r0
 8001594:	62a3      	str	r3, [r4, #40]	; 0x28
					osSemaphoreRelease(CC_GlobalState->sem);
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <state_driving_iterate+0x25c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 fff8 	bl	8007594 <osSemaphoreRelease>
 80015a4:	e03d      	b.n	8001622 <state_driving_iterate+0x2d6>
 80015a6:	bf00      	nop
 80015a8:	200049f0 	.word	0x200049f0
 80015ac:	40021000 	.word	0x40021000
 80015b0:	0800b49c 	.word	0x0800b49c
 80015b4:	20004bdc 	.word	0x20004bdc
 80015b8:	20004bb4 	.word	0x20004bb4
 80015bc:	20004b8c 	.word	0x20004b8c
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	685c      	ldr	r4, [r3, #4]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2301      	movs	r3, #1
 80015d0:	2200      	movs	r2, #0
 80015d2:	2110      	movs	r1, #16
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fa1d 	bl	8000a14 <Compose_CANId>
 80015da:	4603      	mov	r3, r0
 80015dc:	429c      	cmp	r4, r3
 80015de:	d120      	bne.n	8001622 <state_driving_iterate+0x2d6>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80015e0:	4b8e      	ldr	r3, [pc, #568]	; (800181c <state_driving_iterate+0x4d0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80015e8:	2120      	movs	r1, #32
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 ff6c 	bl	80074c8 <osSemaphoreAcquire>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d115      	bne.n	8001622 <state_driving_iterate+0x2d6>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	331c      	adds	r3, #28
 80015fc:	f107 0255 	add.w	r2, r7, #85	; 0x55
 8001600:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001604:	f7ff fa3c 	bl	8000a80 <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001608:	4b84      	ldr	r3, [pc, #528]	; (800181c <state_driving_iterate+0x4d0>)
 800160a:	681c      	ldr	r4, [r3, #0]
 800160c:	f001 fdfc 	bl	8003208 <HAL_GetTick>
 8001610:	4603      	mov	r3, r0
 8001612:	62e3      	str	r3, [r4, #44]	; 0x2c
					osSemaphoreRelease(CC_GlobalState->sem);
 8001614:	4b81      	ldr	r3, [pc, #516]	; (800181c <state_driving_iterate+0x4d0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800161c:	4618      	mov	r0, r3
 800161e:	f005 ffb9 	bl	8007594 <osSemaphoreRelease>
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8001622:	4b7e      	ldr	r3, [pc, #504]	; (800181c <state_driving_iterate+0x4d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800162a:	4618      	mov	r0, r3
 800162c:	f006 f976 	bl	800791c <osMessageQueueGetCount>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	f47f af64 	bne.w	8001500 <state_driving_iterate+0x1b4>
	uint16_t brake_travel_one; uint16_t brake_travel_two;
	uint16_t accel_travel_one; uint16_t accel_travel_two; uint16_t accel_travel_three;
	char x[80]; uint32_t len;

	/* Echo ADC Failure for Debugging */
	if(CC_GlobalState->faultDetected)
 8001638:	4b78      	ldr	r3, [pc, #480]	; (800181c <state_driving_iterate+0x4d0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <state_driving_iterate+0x300>
	{
		CC_LogInfo("ADC Fault Detected\r\n", strlen("ADC Fault Detected\r\n"));
 8001644:	2114      	movs	r1, #20
 8001646:	4876      	ldr	r0, [pc, #472]	; (8001820 <state_driving_iterate+0x4d4>)
 8001648:	f001 fb0a 	bl	8002c60 <CC_LogInfo>
	}
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800164c:	4b73      	ldr	r3, [pc, #460]	; (800181c <state_driving_iterate+0x4d0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001654:	2120      	movs	r1, #32
 8001656:	4618      	mov	r0, r3
 8001658:	f005 ff36 	bl	80074c8 <osSemaphoreAcquire>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 814f 	bne.w	8001902 <state_driving_iterate+0x5b6>
	{
		/* Check for non-expected ADC Values
		 * Trigger Fault outside expected range
		 * Power trip, surge to sensor etc.
		 */
		if(!CC_GlobalState->faultDetected && CC_GlobalState->brakeAdcValues[0] <= CC_GlobalState->brakeOneMin - 100 || CC_GlobalState->brakeAdcValues[0] >= CC_GlobalState->brakeOneMax + 100 || CC_GlobalState->brakeAdcValues[1] <= CC_GlobalState->brakeTwoMin - 100 || CC_GlobalState->brakeAdcValues[1] >= CC_GlobalState->brakeTwoMax + 100)
 8001664:	4b6d      	ldr	r3, [pc, #436]	; (800181c <state_driving_iterate+0x4d0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 800166c:	f083 0301 	eor.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <state_driving_iterate+0x33e>
 8001676:	4b69      	ldr	r3, [pc, #420]	; (800181c <state_driving_iterate+0x4d0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a67      	ldr	r2, [pc, #412]	; (800181c <state_driving_iterate+0x4d0>)
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	f8b2 2444 	ldrh.w	r2, [r2, #1092]	; 0x444
 8001684:	3a64      	subs	r2, #100	; 0x64
 8001686:	4293      	cmp	r3, r2
 8001688:	d91d      	bls.n	80016c6 <state_driving_iterate+0x37a>
 800168a:	4b64      	ldr	r3, [pc, #400]	; (800181c <state_driving_iterate+0x4d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4a62      	ldr	r2, [pc, #392]	; (800181c <state_driving_iterate+0x4d0>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f8b2 2446 	ldrh.w	r2, [r2, #1094]	; 0x446
 8001698:	3264      	adds	r2, #100	; 0x64
 800169a:	4293      	cmp	r3, r2
 800169c:	d213      	bcs.n	80016c6 <state_driving_iterate+0x37a>
 800169e:	4b5f      	ldr	r3, [pc, #380]	; (800181c <state_driving_iterate+0x4d0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a4:	4a5d      	ldr	r2, [pc, #372]	; (800181c <state_driving_iterate+0x4d0>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 80016ac:	3a64      	subs	r2, #100	; 0x64
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d909      	bls.n	80016c6 <state_driving_iterate+0x37a>
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <state_driving_iterate+0x4d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <state_driving_iterate+0x4d0>)
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	f8b2 244a 	ldrh.w	r2, [r2, #1098]	; 0x44a
 80016c0:	3264      	adds	r2, #100	; 0x64
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d30a      	bcc.n	80016dc <state_driving_iterate+0x390>
		{
			CC_GlobalState->faultDetected = true;
 80016c6:	4b55      	ldr	r3, [pc, #340]	; (800181c <state_driving_iterate+0x4d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 80016d0:	4b52      	ldr	r3, [pc, #328]	; (800181c <state_driving_iterate+0x4d0>)
 80016d2:	681c      	ldr	r4, [r3, #0]
 80016d4:	f001 fd98 	bl	8003208 <HAL_GetTick>
 80016d8:	4603      	mov	r3, r0
 80016da:	6263      	str	r3, [r4, #36]	; 0x24
		}
		if(!CC_GlobalState->faultDetected && CC_GlobalState->accelAdcValues[0] <= CC_GlobalState->accelOneMin - 100 || CC_GlobalState->accelAdcValues[0] >= CC_GlobalState->accelOneMax + 100 || CC_GlobalState->accelAdcValues[1] <= CC_GlobalState->accelTwoMin - 100 || CC_GlobalState->accelAdcValues[1] >= CC_GlobalState->accelTwoMax + 100 || CC_GlobalState->accelAdcValues[2] <= CC_GlobalState->accelThreeMin - 100 || CC_GlobalState->accelAdcValues[2] >= CC_GlobalState->accelThreeMax + 100)
 80016dc:	4b4f      	ldr	r3, [pc, #316]	; (800181c <state_driving_iterate+0x4d0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 80016e4:	f083 0301 	eor.w	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00a      	beq.n	8001704 <state_driving_iterate+0x3b8>
 80016ee:	4b4b      	ldr	r3, [pc, #300]	; (800181c <state_driving_iterate+0x4d0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80016f6:	4a49      	ldr	r2, [pc, #292]	; (800181c <state_driving_iterate+0x4d0>)
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f8b2 24c4 	ldrh.w	r2, [r2, #1220]	; 0x4c4
 80016fe:	3a64      	subs	r2, #100	; 0x64
 8001700:	4293      	cmp	r3, r2
 8001702:	d936      	bls.n	8001772 <state_driving_iterate+0x426>
 8001704:	4b45      	ldr	r3, [pc, #276]	; (800181c <state_driving_iterate+0x4d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800170c:	4a43      	ldr	r2, [pc, #268]	; (800181c <state_driving_iterate+0x4d0>)
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	f8b2 24c6 	ldrh.w	r2, [r2, #1222]	; 0x4c6
 8001714:	3264      	adds	r2, #100	; 0x64
 8001716:	4293      	cmp	r3, r2
 8001718:	d22b      	bcs.n	8001772 <state_driving_iterate+0x426>
 800171a:	4b40      	ldr	r3, [pc, #256]	; (800181c <state_driving_iterate+0x4d0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001722:	4a3e      	ldr	r2, [pc, #248]	; (800181c <state_driving_iterate+0x4d0>)
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f8b2 24c8 	ldrh.w	r2, [r2, #1224]	; 0x4c8
 800172a:	3a64      	subs	r2, #100	; 0x64
 800172c:	4293      	cmp	r3, r2
 800172e:	d920      	bls.n	8001772 <state_driving_iterate+0x426>
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <state_driving_iterate+0x4d0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001738:	4a38      	ldr	r2, [pc, #224]	; (800181c <state_driving_iterate+0x4d0>)
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	f8b2 24ca 	ldrh.w	r2, [r2, #1226]	; 0x4ca
 8001740:	3264      	adds	r2, #100	; 0x64
 8001742:	4293      	cmp	r3, r2
 8001744:	d215      	bcs.n	8001772 <state_driving_iterate+0x426>
 8001746:	4b35      	ldr	r3, [pc, #212]	; (800181c <state_driving_iterate+0x4d0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800174e:	4a33      	ldr	r2, [pc, #204]	; (800181c <state_driving_iterate+0x4d0>)
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	f8b2 24cc 	ldrh.w	r2, [r2, #1228]	; 0x4cc
 8001756:	3a64      	subs	r2, #100	; 0x64
 8001758:	4293      	cmp	r3, r2
 800175a:	d90a      	bls.n	8001772 <state_driving_iterate+0x426>
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <state_driving_iterate+0x4d0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001764:	4a2d      	ldr	r2, [pc, #180]	; (800181c <state_driving_iterate+0x4d0>)
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	f8b2 24ce 	ldrh.w	r2, [r2, #1230]	; 0x4ce
 800176c:	3264      	adds	r2, #100	; 0x64
 800176e:	4293      	cmp	r3, r2
 8001770:	d30a      	bcc.n	8001788 <state_driving_iterate+0x43c>
		{
			CC_GlobalState->faultDetected = true;
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <state_driving_iterate+0x4d0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <state_driving_iterate+0x4d0>)
 800177e:	681c      	ldr	r4, [r3, #0]
 8001780:	f001 fd42 	bl	8003208 <HAL_GetTick>
 8001784:	4603      	mov	r3, r0
 8001786:	6263      	str	r3, [r4, #36]	; 0x24
		}

		/* Brake Travel Record & Sum 10 Values */
		for (int i=0; i < 10; i++)
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800178e:	e0ac      	b.n	80018ea <state_driving_iterate+0x59e>
		{
			if (i == 9)
 8001790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001794:	2b09      	cmp	r3, #9
 8001796:	d145      	bne.n	8001824 <state_driving_iterate+0x4d8>
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[0];
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <state_driving_iterate+0x4d0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <state_driving_iterate+0x4d0>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	b289      	uxth	r1, r1
 80017a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017a8:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	460a      	mov	r2, r1
 80017b2:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[1];
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <state_driving_iterate+0x4d0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <state_driving_iterate+0x4d0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b291      	uxth	r1, r2
 80017c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80017c4:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80017c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->accelAdcValues[0];
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <state_driving_iterate+0x4d0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <state_driving_iterate+0x4d0>)
 80017d2:	6811      	ldr	r1, [r2, #0]
 80017d4:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 80017d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017dc:	f503 7389 	add.w	r3, r3, #274	; 0x112
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[1];
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <state_driving_iterate+0x4d0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <state_driving_iterate+0x4d0>)
 80017ec:	6811      	ldr	r1, [r2, #0]
 80017ee:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80017f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[2];
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <state_driving_iterate+0x4d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a05      	ldr	r2, [pc, #20]	; (800181c <state_driving_iterate+0x4d0>)
 8001806:	6811      	ldr	r1, [r2, #0]
 8001808:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800180c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001810:	f503 7393 	add.w	r3, r3, #294	; 0x126
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	e061      	b.n	80018e0 <state_driving_iterate+0x594>
 800181c:	200049f0 	.word	0x200049f0
 8001820:	0800b4bc 	.word	0x0800b4bc
			}
			else
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->rollingBrakeValues[i+1];
 8001824:	4b48      	ldr	r3, [pc, #288]	; (8001948 <state_driving_iterate+0x5fc>)
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800182c:	3301      	adds	r3, #1
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <state_driving_iterate+0x5fc>)
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	440b      	add	r3, r1
 800183a:	8899      	ldrh	r1, [r3, #4]
 800183c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001840:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	460a      	mov	r2, r1
 800184a:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->secondaryRollingBrakeValues[i+1];
 800184c:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <state_driving_iterate+0x5fc>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001854:	1c59      	adds	r1, r3, #1
 8001856:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <state_driving_iterate+0x5fc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f501 7106 	add.w	r1, r1, #536	; 0x218
 800185e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001862:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001866:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800186a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->rollingAccelValues[i+1];
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <state_driving_iterate+0x5fc>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001876:	3301      	adds	r3, #1
 8001878:	4933      	ldr	r1, [pc, #204]	; (8001948 <state_driving_iterate+0x5fc>)
 800187a:	6809      	ldr	r1, [r1, #0]
 800187c:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800188a:	f503 7389 	add.w	r3, r3, #274	; 0x112
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->secondaryRollingAccelValues[i+1];
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <state_driving_iterate+0x5fc>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800189c:	3301      	adds	r3, #1
 800189e:	492a      	ldr	r1, [pc, #168]	; (8001948 <state_driving_iterate+0x5fc>)
 80018a0:	6809      	ldr	r1, [r1, #0]
 80018a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->tertiaryRollingAccelValues[i+1];
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <state_driving_iterate+0x5fc>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018c2:	3301      	adds	r3, #1
 80018c4:	4920      	ldr	r1, [pc, #128]	; (8001948 <state_driving_iterate+0x5fc>)
 80018c6:	6809      	ldr	r1, [r1, #0]
 80018c8:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018d6:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	605a      	str	r2, [r3, #4]
		for (int i=0; i < 10; i++)
 80018e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018e4:	3301      	adds	r3, #1
 80018e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	f77f af4e 	ble.w	8001790 <state_driving_iterate+0x444>
			}
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <state_driving_iterate+0x5fc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f005 fe49 	bl	8007594 <osSemaphoreRelease>
	}

	uint32_t brake_one_sum = 0; uint32_t brake_one_avg = 0;uint32_t brake_two_sum = 0;uint32_t brake_two_avg = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t accel_one_sum = 0; uint32_t accel_one_avg = 0; uint32_t accel_two_avg = 0; uint32_t accel_three_sum = 0; uint32_t accel_three_avg = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	uint32_t accel_two_sum = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	for (int i=0; i < 10; i++)
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001944:	e04e      	b.n	80019e4 <state_driving_iterate+0x698>
 8001946:	bf00      	nop
 8001948:	200049f0 	.word	0x200049f0
	{
		brake_one_sum += CC_GlobalState->rollingBrakeValues[i];
 800194c:	4bc0      	ldr	r3, [pc, #768]	; (8001c50 <state_driving_iterate+0x904>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001954:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	461a      	mov	r2, r3
 8001960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001964:	4413      	add	r3, r2
 8001966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		brake_two_sum += CC_GlobalState->secondaryRollingBrakeValues[i];
 800196a:	4bb9      	ldr	r3, [pc, #740]	; (8001c50 <state_driving_iterate+0x904>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001972:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8001976:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800197a:	461a      	mov	r2, r3
 800197c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001980:	4413      	add	r3, r2
 8001982:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		accel_one_sum += CC_GlobalState->rollingAccelValues[i];
 8001986:	4bb2      	ldr	r3, [pc, #712]	; (8001c50 <state_driving_iterate+0x904>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800198e:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800199c:	4413      	add	r3, r2
 800199e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		accel_two_sum += CC_GlobalState->secondaryRollingAccelValues[i];
 80019a2:	4bab      	ldr	r3, [pc, #684]	; (8001c50 <state_driving_iterate+0x904>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019b8:	4413      	add	r3, r2
 80019ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		accel_three_sum += CC_GlobalState->tertiaryRollingAccelValues[i];
 80019be:	4ba4      	ldr	r3, [pc, #656]	; (8001c50 <state_driving_iterate+0x904>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019c6:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80019d4:	4413      	add	r3, r2
 80019d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	for (int i=0; i < 10; i++)
 80019da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019de:	3301      	adds	r3, #1
 80019e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80019e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	ddaf      	ble.n	800194c <state_driving_iterate+0x600>
	}

	/* Average 10 Latest Brake Travel Values */
	brake_one_avg = brake_one_sum / 10;
 80019ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019f0:	4a98      	ldr	r2, [pc, #608]	; (8001c54 <state_driving_iterate+0x908>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	08db      	lsrs	r3, r3, #3
 80019f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	brake_two_avg = brake_two_sum / 10;
 80019fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a00:	4a94      	ldr	r2, [pc, #592]	; (8001c54 <state_driving_iterate+0x908>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	08db      	lsrs	r3, r3, #3
 8001a08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	accel_one_avg = accel_one_sum / 10;
 8001a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a10:	4a90      	ldr	r2, [pc, #576]	; (8001c54 <state_driving_iterate+0x908>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	accel_two_avg = accel_two_sum / 10;
 8001a1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a20:	4a8c      	ldr	r2, [pc, #560]	; (8001c54 <state_driving_iterate+0x908>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	08db      	lsrs	r3, r3, #3
 8001a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	accel_three_avg = accel_three_sum / 10;
 8001a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a30:	4a88      	ldr	r2, [pc, #544]	; (8001c54 <state_driving_iterate+0x908>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	08db      	lsrs	r3, r3, #3
 8001a38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001a3c:	4b84      	ldr	r3, [pc, #528]	; (8001c50 <state_driving_iterate+0x904>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001a44:	2120      	movs	r1, #32
 8001a46:	4618      	mov	r0, r3
 8001a48:	f005 fd3e 	bl	80074c8 <osSemaphoreAcquire>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 8218 	bne.w	8001e84 <state_driving_iterate+0xb38>
	{
		/* Check for New Min/Max Brake Values */
		if(CC_GlobalState->rollingBrakeValues[0] > 0 && CC_GlobalState->secondaryRollingBrakeValues[0] > 0)
 8001a54:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <state_driving_iterate+0x904>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d069      	beq.n	8001b34 <state_driving_iterate+0x7e8>
 8001a60:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <state_driving_iterate+0x904>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3430 	ldrh.w	r3, [r3, #1072]	; 0x430
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d063      	beq.n	8001b34 <state_driving_iterate+0x7e8>
		{
			if(brake_one_avg <= CC_GlobalState->brakeOneMin && !CC_GlobalState->faultDetected)
 8001a6c:	4b78      	ldr	r3, [pc, #480]	; (8001c50 <state_driving_iterate+0x904>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8b3 3444 	ldrh.w	r3, [r3, #1092]	; 0x444
 8001a74:	461a      	mov	r2, r3
 8001a76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d80f      	bhi.n	8001a9e <state_driving_iterate+0x752>
 8001a7e:	4b74      	ldr	r3, [pc, #464]	; (8001c50 <state_driving_iterate+0x904>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001a86:	f083 0301 	eor.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <state_driving_iterate+0x752>
			{
				CC_GlobalState->brakeOneMin = brake_one_avg;
 8001a90:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <state_driving_iterate+0x904>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
			}
			if(brake_one_avg >= CC_GlobalState->brakeOneMax && !CC_GlobalState->faultDetected)
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <state_driving_iterate+0x904>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8b3 3446 	ldrh.w	r3, [r3, #1094]	; 0x446
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d30f      	bcc.n	8001ad0 <state_driving_iterate+0x784>
 8001ab0:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <state_driving_iterate+0x904>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001ab8:	f083 0301 	eor.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <state_driving_iterate+0x784>
			{
				CC_GlobalState->brakeOneMax = brake_one_avg;
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <state_driving_iterate+0x904>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001aca:	b292      	uxth	r2, r2
 8001acc:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446
			}
			if(brake_two_avg <= CC_GlobalState->brakeTwoMin && !CC_GlobalState->faultDetected)
 8001ad0:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <state_driving_iterate+0x904>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	; 0x448
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d80f      	bhi.n	8001b02 <state_driving_iterate+0x7b6>
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <state_driving_iterate+0x904>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <state_driving_iterate+0x7b6>
			{
				CC_GlobalState->brakeTwoMin = brake_two_avg;
 8001af4:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <state_driving_iterate+0x904>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001afc:	b292      	uxth	r2, r2
 8001afe:	f8a3 2448 	strh.w	r2, [r3, #1096]	; 0x448
			}
			if(brake_two_avg >= CC_GlobalState->brakeTwoMax && !CC_GlobalState->faultDetected)
 8001b02:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <state_driving_iterate+0x904>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 344a 	ldrh.w	r3, [r3, #1098]	; 0x44a
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d30f      	bcc.n	8001b34 <state_driving_iterate+0x7e8>
 8001b14:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <state_driving_iterate+0x904>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <state_driving_iterate+0x7e8>
			{
				CC_GlobalState->brakeTwoMax = brake_two_avg;
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <state_driving_iterate+0x904>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	f8a3 244a 	strh.w	r2, [r3, #1098]	; 0x44a
			}
		}
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->secondaryRollingAccelValues[0] > 0 && CC_GlobalState->tertiaryRollingAccelValues[0] > 0)
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <state_driving_iterate+0x904>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a9 	beq.w	8001c94 <state_driving_iterate+0x948>
 8001b42:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <state_driving_iterate+0x904>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80a2 	beq.w	8001c94 <state_driving_iterate+0x948>
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <state_driving_iterate+0x904>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 809b 	beq.w	8001c94 <state_driving_iterate+0x948>
		{
			if(accel_one_avg <= CC_GlobalState->accelOneMin && !CC_GlobalState->faultDetected)
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <state_driving_iterate+0x904>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 34c4 	ldrh.w	r3, [r3, #1220]	; 0x4c4
 8001b66:	461a      	mov	r2, r3
 8001b68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d80f      	bhi.n	8001b90 <state_driving_iterate+0x844>
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <state_driving_iterate+0x904>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <state_driving_iterate+0x844>
			{
				CC_GlobalState->accelOneMin = accel_one_avg;
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <state_driving_iterate+0x904>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
			}
			if(accel_one_avg >= CC_GlobalState->accelOneMax && !CC_GlobalState->faultDetected)
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <state_driving_iterate+0x904>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d30f      	bcc.n	8001bc2 <state_driving_iterate+0x876>
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <state_driving_iterate+0x904>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001baa:	f083 0301 	eor.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <state_driving_iterate+0x876>
			{
				CC_GlobalState->accelOneMax = accel_one_avg;
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <state_driving_iterate+0x904>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
			}
			if(accel_two_avg <= CC_GlobalState->accelTwoMin && !CC_GlobalState->faultDetected)
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <state_driving_iterate+0x904>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8b3 34c8 	ldrh.w	r3, [r3, #1224]	; 0x4c8
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d80f      	bhi.n	8001bf4 <state_driving_iterate+0x8a8>
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <state_driving_iterate+0x904>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <state_driving_iterate+0x8a8>
			{
				CC_GlobalState->accelTwoMin = accel_two_avg;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <state_driving_iterate+0x904>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001bee:	b292      	uxth	r2, r2
 8001bf0:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
			}
			if(accel_two_avg >= CC_GlobalState->accelTwoMax && !CC_GlobalState->faultDetected)
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <state_driving_iterate+0x904>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8b3 34ca 	ldrh.w	r3, [r3, #1226]	; 0x4ca
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d30f      	bcc.n	8001c26 <state_driving_iterate+0x8da>
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <state_driving_iterate+0x904>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001c0e:	f083 0301 	eor.w	r3, r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <state_driving_iterate+0x8da>
			{
				CC_GlobalState->accelTwoMax = accel_two_avg;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <state_driving_iterate+0x904>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001c20:	b292      	uxth	r2, r2
 8001c22:	f8a3 24ca 	strh.w	r2, [r3, #1226]	; 0x4ca
			}
			if(accel_three_avg <= CC_GlobalState->accelThreeMin && !CC_GlobalState->faultDetected)
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <state_driving_iterate+0x904>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 34cc 	ldrh.w	r3, [r3, #1228]	; 0x4cc
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d814      	bhi.n	8001c62 <state_driving_iterate+0x916>
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <state_driving_iterate+0x904>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <state_driving_iterate+0x916>
			{
				CC_GlobalState->accelThreeMin = accel_three_avg;
 8001c4a:	4b01      	ldr	r3, [pc, #4]	; (8001c50 <state_driving_iterate+0x904>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e003      	b.n	8001c58 <state_driving_iterate+0x90c>
 8001c50:	200049f0 	.word	0x200049f0
 8001c54:	cccccccd 	.word	0xcccccccd
 8001c58:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001c5c:	b292      	uxth	r2, r2
 8001c5e:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
			}
			if(accel_three_avg >= CC_GlobalState->accelThreeMax && !CC_GlobalState->faultDetected)
 8001c62:	4bbb      	ldr	r3, [pc, #748]	; (8001f50 <state_driving_iterate+0xc04>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 34ce 	ldrh.w	r3, [r3, #1230]	; 0x4ce
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d30f      	bcc.n	8001c94 <state_driving_iterate+0x948>
 8001c74:	4bb6      	ldr	r3, [pc, #728]	; (8001f50 <state_driving_iterate+0xc04>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <state_driving_iterate+0x948>
			{
				CC_GlobalState->accelThreeMax = accel_three_avg;
 8001c86:	4bb2      	ldr	r3, [pc, #712]	; (8001f50 <state_driving_iterate+0xc04>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce
			}
		}

		/* Map Travel to Pedal Pos */
		brake_travel_one = map(brake_one_avg, CC_GlobalState->brakeOneMin+2, CC_GlobalState->brakeOneMax-5, 0, 100);
 8001c94:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001c98:	4bad      	ldr	r3, [pc, #692]	; (8001f50 <state_driving_iterate+0xc04>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3444 	ldrh.w	r3, [r3, #1092]	; 0x444
 8001ca0:	1c99      	adds	r1, r3, #2
 8001ca2:	4bab      	ldr	r3, [pc, #684]	; (8001f50 <state_driving_iterate+0xc04>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3446 	ldrh.w	r3, [r3, #1094]	; 0x446
 8001caa:	1f5a      	subs	r2, r3, #5
 8001cac:	2364      	movs	r3, #100	; 0x64
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f7fe fef6 	bl	8000aa2 <map>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		brake_travel_two = map(brake_two_avg, CC_GlobalState->brakeTwoMin+2, CC_GlobalState->brakeTwoMax-5, 0, 100);
 8001cbc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001cc0:	4ba3      	ldr	r3, [pc, #652]	; (8001f50 <state_driving_iterate+0xc04>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	; 0x448
 8001cc8:	1c99      	adds	r1, r3, #2
 8001cca:	4ba1      	ldr	r3, [pc, #644]	; (8001f50 <state_driving_iterate+0xc04>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 344a 	ldrh.w	r3, [r3, #1098]	; 0x44a
 8001cd2:	1f5a      	subs	r2, r3, #5
 8001cd4:	2364      	movs	r3, #100	; 0x64
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f7fe fee2 	bl	8000aa2 <map>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		accel_travel_one = map(accel_one_avg, CC_GlobalState->accelOneMin, CC_GlobalState->accelOneMax-5, 0, 100);
 8001ce4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001ce8:	4b99      	ldr	r3, [pc, #612]	; (8001f50 <state_driving_iterate+0xc04>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 34c4 	ldrh.w	r3, [r3, #1220]	; 0x4c4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4b97      	ldr	r3, [pc, #604]	; (8001f50 <state_driving_iterate+0xc04>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 8001cfa:	1f5a      	subs	r2, r3, #5
 8001cfc:	2364      	movs	r3, #100	; 0x64
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2300      	movs	r3, #0
 8001d02:	f7fe fece 	bl	8000aa2 <map>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
		accel_travel_two = map(accel_two_avg, CC_GlobalState->accelTwoMin, CC_GlobalState->accelTwoMax-5, 0, 100);
 8001d0c:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001d10:	4b8f      	ldr	r3, [pc, #572]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8b3 34c8 	ldrh.w	r3, [r3, #1224]	; 0x4c8
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 34ca 	ldrh.w	r3, [r3, #1226]	; 0x4ca
 8001d22:	1f5a      	subs	r2, r3, #5
 8001d24:	2364      	movs	r3, #100	; 0x64
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f7fe feba 	bl	8000aa2 <map>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		accel_travel_three = map(accel_three_avg, CC_GlobalState->accelThreeMin, CC_GlobalState->accelThreeMax-5, 0, 100);
 8001d34:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001d38:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 34cc 	ldrh.w	r3, [r3, #1228]	; 0x4cc
 8001d40:	4619      	mov	r1, r3
 8001d42:	4b83      	ldr	r3, [pc, #524]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8b3 34ce 	ldrh.w	r3, [r3, #1230]	; 0x4ce
 8001d4a:	1f5a      	subs	r2, r3, #5
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2300      	movs	r3, #0
 8001d52:	f7fe fea6 	bl	8000aa2 <map>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		/* Ensure Brake & Accel Pots Synced */
		if(!CC_GlobalState->faultDetected && brake_travel_one >= brake_travel_two+10 || brake_travel_one <= brake_travel_two-10)
 8001d5c:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <state_driving_iterate+0xa30>
 8001d6e:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8001d72:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001d76:	330a      	adds	r3, #10
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	da06      	bge.n	8001d8a <state_driving_iterate+0xa3e>
 8001d7c:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8001d80:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001d84:	3b0a      	subs	r3, #10
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dc0a      	bgt.n	8001da0 <state_driving_iterate+0xa54>
		{
			CC_GlobalState->faultDetected = true;
 8001d8a:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001d94:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	f001 fa36 	bl	8003208 <HAL_GetTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	6263      	str	r3, [r4, #36]	; 0x24
		}
		if(!CC_GlobalState->faultDetected && accel_travel_one >= accel_travel_two+10 || accel_travel_one <= accel_travel_two-10 || accel_travel_one >= accel_travel_three+10 || accel_travel_one <= accel_travel_three-10 || accel_travel_two >= accel_travel_three+10 || accel_travel_two <= accel_travel_three-10)
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <state_driving_iterate+0xc04>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001da8:	f083 0301 	eor.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <state_driving_iterate+0xa74>
 8001db2:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001db6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001dba:	330a      	adds	r3, #10
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	da22      	bge.n	8001e06 <state_driving_iterate+0xaba>
 8001dc0:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001dc4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001dc8:	3b0a      	subs	r3, #10
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dd1b      	ble.n	8001e06 <state_driving_iterate+0xaba>
 8001dce:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001dd2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001dd6:	330a      	adds	r3, #10
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	da14      	bge.n	8001e06 <state_driving_iterate+0xaba>
 8001ddc:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001de0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001de4:	3b0a      	subs	r3, #10
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dd0d      	ble.n	8001e06 <state_driving_iterate+0xaba>
 8001dea:	f8b7 20f8 	ldrh.w	r2, [r7, #248]	; 0xf8
 8001dee:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001df2:	330a      	adds	r3, #10
 8001df4:	429a      	cmp	r2, r3
 8001df6:	da06      	bge.n	8001e06 <state_driving_iterate+0xaba>
 8001df8:	f8b7 20f8 	ldrh.w	r2, [r7, #248]	; 0xf8
 8001dfc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001e00:	3b0a      	subs	r3, #10
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dc0a      	bgt.n	8001e1c <state_driving_iterate+0xad0>
		{
			CC_GlobalState->faultDetected = true;
 8001e06:	4b52      	ldr	r3, [pc, #328]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001e10:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e12:	681c      	ldr	r4, [r3, #0]
 8001e14:	f001 f9f8 	bl	8003208 <HAL_GetTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	6263      	str	r3, [r4, #36]	; 0x24
		}

		/* Average 2 Brake Travel Positions */
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8001e1c:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d026      	beq.n	8001e76 <state_driving_iterate+0xb2a>
 8001e28:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <state_driving_iterate+0xb2a>
		{
			CC_GlobalState->brakeTravel = (brake_travel_one+brake_travel_two)/2;
 8001e34:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8001e38:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da00      	bge.n	8001e44 <state_driving_iterate+0xaf8>
 8001e42:	3301      	adds	r3, #1
 8001e44:	105b      	asrs	r3, r3, #1
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
			CC_GlobalState->accelTravel = (accel_travel_one+accel_travel_two+accel_travel_three)/3;
 8001e52:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001e56:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001e5a:	441a      	add	r2, r3
 8001e5c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001e60:	4413      	add	r3, r2
 8001e62:	4a3c      	ldr	r2, [pc, #240]	; (8001f54 <state_driving_iterate+0xc08>)
 8001e64:	fb82 1203 	smull	r1, r2, r2, r3
 8001e68:	17db      	asrs	r3, r3, #31
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
		}

		osSemaphoreRelease(CC_GlobalState->sem);
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f005 fb88 	bl	8007594 <osSemaphoreRelease>
	}

	/* Echo Pedal Positions */
	if(!CC_GlobalState->faultDetected && CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8001e84:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d023      	beq.n	8001ede <state_driving_iterate+0xb92>
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01d      	beq.n	8001ede <state_driving_iterate+0xb92>
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <state_driving_iterate+0xc04>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d017      	beq.n	8001ede <state_driving_iterate+0xb92>
	{
		len = sprintf(x, "Data: %li %li\r\n", CC_GlobalState->brakeTravel, CC_GlobalState->accelTravel);
 8001eae:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <state_driving_iterate+0xc04>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f893 34d1 	ldrb.w	r3, [r3, #1233]	; 0x4d1
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <state_driving_iterate+0xc04>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f893 34d0 	ldrb.w	r3, [r3, #1232]	; 0x4d0
 8001ec0:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8001ec4:	4924      	ldr	r1, [pc, #144]	; (8001f58 <state_driving_iterate+0xc0c>)
 8001ec6:	f008 ff17 	bl	800acf8 <siprintf>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		CC_LogInfo(x, len);
 8001ed0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ed4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fec1 	bl	8002c60 <CC_LogInfo>

	/*
	 * If Throttle and Brake Implausibility State Clock < 100ms
	 * Suspend Tractive System Operations
	 */
	if(CC_GlobalState->faultDetected && CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 100)
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <state_driving_iterate+0xc04>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d017      	beq.n	8001f1a <state_driving_iterate+0xbce>
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <state_driving_iterate+0xc04>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f893 34d2 	ldrb.w	r3, [r3, #1234]	; 0x4d2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d011      	beq.n	8001f1a <state_driving_iterate+0xbce>
 8001ef6:	f001 f987 	bl	8003208 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <state_driving_iterate+0xc04>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b63      	cmp	r3, #99	; 0x63
 8001f06:	d908      	bls.n	8001f1a <state_driving_iterate+0xbce>
	{
		CC_GlobalState->tractiveActive = false;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <state_driving_iterate+0xc04>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
		CC_LogInfo("Disabling Tractive Operations\r\n", strlen("Disabling Tractive Operations\r\n"));
 8001f12:	211f      	movs	r1, #31
 8001f14:	4811      	ldr	r0, [pc, #68]	; (8001f5c <state_driving_iterate+0xc10>)
 8001f16:	f000 fea3 	bl	8002c60 <CC_LogInfo>

	/*
	 * If Throttle or Brake Implausibility State Clock > 1000ms
	 * Engage Soft Shutdown (Reset to Idle)
	 */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 1000)
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <state_driving_iterate+0xc04>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d055      	beq.n	8001fd2 <state_driving_iterate+0xc86>
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <state_driving_iterate+0xc04>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f893 34d2 	ldrb.w	r3, [r3, #1234]	; 0x4d2
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d04c      	beq.n	8001fd2 <state_driving_iterate+0xc86>
 8001f38:	f001 f966 	bl	8003208 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <state_driving_iterate+0xc04>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f4a:	d342      	bcc.n	8001fd2 <state_driving_iterate+0xc86>
 8001f4c:	e008      	b.n	8001f60 <state_driving_iterate+0xc14>
 8001f4e:	bf00      	nop
 8001f50:	200049f0 	.word	0x200049f0
 8001f54:	55555556 	.word	0x55555556
 8001f58:	0800b4d4 	.word	0x0800b4d4
 8001f5c:	0800b4e4 	.word	0x0800b4e4
	{
		/* Broadcast Soft Shutdown on all CAN lines */
		CC_SoftShutdown_t softShutdown = Compose_CC_SoftShutdown();
 8001f60:	f7fe fbbb 	bl	80006da <Compose_CC_SoftShutdown>
 8001f64:	4603      	mov	r3, r0
 8001f66:	653b      	str	r3, [r7, #80]	; 0x50
		CAN_TxHeaderTypeDef header =
 8001f68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
 8001f78:	615a      	str	r2, [r3, #20]
		{
				.ExtId = softShutdown.id,
 8001f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		CAN_TxHeaderTypeDef header =
 8001f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f7e:	2304      	movs	r3, #4
 8001f80:	643b      	str	r3, [r7, #64]	; 0x40
 8001f82:	2301      	movs	r3, #1
 8001f84:	64bb      	str	r3, [r7, #72]	; 0x48
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8001f86:	230f      	movs	r3, #15
 8001f88:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <state_driving_iterate+0xc90>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f94:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f98:	4811      	ldr	r0, [pc, #68]	; (8001fe0 <state_driving_iterate+0xc94>)
 8001f9a:	f002 f851 	bl	8004040 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <state_driving_iterate+0xc90>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3308      	adds	r3, #8
 8001fa4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fa8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <state_driving_iterate+0xc98>)
 8001fae:	f002 f847 	bl	8004040 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <state_driving_iterate+0xc90>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3310      	adds	r3, #16
 8001fb8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fbc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <state_driving_iterate+0xc9c>)
 8001fc2:	f002 f83d 	bl	8004040 <HAL_CAN_AddTxMessage>
		fsm_changeState(fsm, &idleState, "Soft Shutdown Requested (CAN)");
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <state_driving_iterate+0xca0>)
 8001fca:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <state_driving_iterate+0xca4>)
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	f7fe fbf5 	bl	80007bc <fsm_changeState>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 8001fd2:	bf00      	nop
 8001fd4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd90      	pop	{r4, r7, pc}
 8001fdc:	200049f0 	.word	0x200049f0
 8001fe0:	20004bdc 	.word	0x20004bdc
 8001fe4:	20004bb4 	.word	0x20004bb4
 8001fe8:	20004b8c 	.word	0x20004b8c
 8001fec:	0800b504 	.word	0x0800b504
 8001ff0:	20000010 	.word	0x20000010

08001ff4 <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 8001ffc:	bf00      	nop
}
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <state_debug_enter>:

state_t debugState = {&state_debug_enter, &state_debug_iterate, &state_debug_exit, "Debug_s"};

void state_debug_enter(fsm_t *fsm)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Enter Debugging\r\n", strlen("Enter Debugging\r\n"));
 8002010:	2111      	movs	r1, #17
 8002012:	4803      	ldr	r0, [pc, #12]	; (8002020 <state_debug_enter+0x18>)
 8002014:	f000 fe24 	bl	8002c60 <CC_LogInfo>
	return;
 8002018:	bf00      	nop
}
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	0800b524 	.word	0x0800b524

08002024 <state_debug_iterate>:

void state_debug_iterate(fsm_t *fsm)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown on all CAN lines */
	CC_SoftShutdown_t softShutdown = Compose_CC_SoftShutdown();
 800202c:	f7fe fb55 	bl	80006da <Compose_CC_SoftShutdown>
 8002030:	4603      	mov	r3, r0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
 8002044:	615a      	str	r2, [r3, #20]
	{
			.ExtId = softShutdown.id,
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	2304      	movs	r3, #4
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	2301      	movs	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8002052:	230f      	movs	r3, #15
 8002054:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <state_debug_iterate+0x74>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f107 0208 	add.w	r2, r7, #8
 800205e:	f107 010c 	add.w	r1, r7, #12
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <state_debug_iterate+0x78>)
 8002064:	f001 ffec 	bl	8004040 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <state_debug_iterate+0x74>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3308      	adds	r3, #8
 800206e:	f107 0208 	add.w	r2, r7, #8
 8002072:	f107 010c 	add.w	r1, r7, #12
 8002076:	480a      	ldr	r0, [pc, #40]	; (80020a0 <state_debug_iterate+0x7c>)
 8002078:	f001 ffe2 	bl	8004040 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <state_debug_iterate+0x74>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3310      	adds	r3, #16
 8002082:	f107 0208 	add.w	r2, r7, #8
 8002086:	f107 010c 	add.w	r1, r7, #12
 800208a:	4806      	ldr	r0, [pc, #24]	; (80020a4 <state_debug_iterate+0x80>)
 800208c:	f001 ffd8 	bl	8004040 <HAL_CAN_AddTxMessage>
	return;
 8002090:	bf00      	nop
}
 8002092:	3728      	adds	r7, #40	; 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200049f0 	.word	0x200049f0
 800209c:	20004bdc 	.word	0x20004bdc
 80020a0:	20004bb4 	.word	0x20004bb4
 80020a4:	20004b8c 	.word	0x20004b8c

080020a8 <state_debug_exit>:

void state_debug_exit(fsm_t *fsm)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Exit Debugging\r\n", strlen("Exit Debugging\r\n"));
 80020b0:	2110      	movs	r1, #16
 80020b2:	4803      	ldr	r0, [pc, #12]	; (80020c0 <state_debug_exit+0x18>)
 80020b4:	f000 fdd4 	bl	8002c60 <CC_LogInfo>
	return;
 80020b8:	bf00      	nop
}
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	0800b538 	.word	0x0800b538

080020c4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80020ca:	463b      	mov	r3, r7
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <MX_ADC1_Init+0xd0>)
 80020d8:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <MX_ADC1_Init+0xd4>)
 80020da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <MX_ADC1_Init+0xd0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020e2:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <MX_ADC1_Init+0xd0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <MX_ADC1_Init+0xd0>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <MX_ADC1_Init+0xd0>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <MX_ADC1_Init+0xd0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <MX_ADC1_Init+0xd0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <MX_ADC1_Init+0xd0>)
 8002104:	4a25      	ldr	r2, [pc, #148]	; (800219c <MX_ADC1_Init+0xd8>)
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <MX_ADC1_Init+0xd0>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800210e:	4b21      	ldr	r3, [pc, #132]	; (8002194 <MX_ADC1_Init+0xd0>)
 8002110:	2203      	movs	r2, #3
 8002112:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002114:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <MX_ADC1_Init+0xd0>)
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <MX_ADC1_Init+0xd0>)
 800211e:	2201      	movs	r2, #1
 8002120:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002122:	481c      	ldr	r0, [pc, #112]	; (8002194 <MX_ADC1_Init+0xd0>)
 8002124:	f001 f87c 	bl	8003220 <HAL_ADC_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800212e:	f000 fe7d 	bl	8002e2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002132:	2304      	movs	r3, #4
 8002134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002136:	2301      	movs	r3, #1
 8002138:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800213a:	2307      	movs	r3, #7
 800213c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213e:	463b      	mov	r3, r7
 8002140:	4619      	mov	r1, r3
 8002142:	4814      	ldr	r0, [pc, #80]	; (8002194 <MX_ADC1_Init+0xd0>)
 8002144:	f001 fa8a 	bl	800365c <HAL_ADC_ConfigChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800214e:	f000 fe6d 	bl	8002e2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002152:	2306      	movs	r3, #6
 8002154:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002156:	2302      	movs	r3, #2
 8002158:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800215a:	463b      	mov	r3, r7
 800215c:	4619      	mov	r1, r3
 800215e:	480d      	ldr	r0, [pc, #52]	; (8002194 <MX_ADC1_Init+0xd0>)
 8002160:	f001 fa7c 	bl	800365c <HAL_ADC_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800216a:	f000 fe5f 	bl	8002e2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800216e:	230e      	movs	r3, #14
 8002170:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002172:	2303      	movs	r3, #3
 8002174:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002176:	463b      	mov	r3, r7
 8002178:	4619      	mov	r1, r3
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <MX_ADC1_Init+0xd0>)
 800217c:	f001 fa6e 	bl	800365c <HAL_ADC_ConfigChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002186:	f000 fe51 	bl	8002e2c <Error_Handler>
  }

}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20004a3c 	.word	0x20004a3c
 8002198:	40012000 	.word	0x40012000
 800219c:	0f000001 	.word	0x0f000001

080021a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80021a6:	463b      	mov	r3, r7
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80021b2:	4b28      	ldr	r3, [pc, #160]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021b4:	4a28      	ldr	r2, [pc, #160]	; (8002258 <MX_ADC2_Init+0xb8>)
 80021b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80021be:	4b25      	ldr	r3, [pc, #148]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021da:	2200      	movs	r2, #0
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021e0:	4a1e      	ldr	r2, [pc, #120]	; (800225c <MX_ADC2_Init+0xbc>)
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021ec:	2202      	movs	r2, #2
 80021ee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <MX_ADC2_Init+0xb4>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80021fe:	4815      	ldr	r0, [pc, #84]	; (8002254 <MX_ADC2_Init+0xb4>)
 8002200:	f001 f80e 	bl	8003220 <HAL_ADC_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800220a:	f000 fe0f 	bl	8002e2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800220e:	2303      	movs	r3, #3
 8002210:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002212:	2301      	movs	r3, #1
 8002214:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002216:	2307      	movs	r3, #7
 8002218:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800221a:	463b      	mov	r3, r7
 800221c:	4619      	mov	r1, r3
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <MX_ADC2_Init+0xb4>)
 8002220:	f001 fa1c 	bl	800365c <HAL_ADC_ConfigChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800222a:	f000 fdff 	bl	8002e2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800222e:	2305      	movs	r3, #5
 8002230:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002232:	2302      	movs	r3, #2
 8002234:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002236:	463b      	mov	r3, r7
 8002238:	4619      	mov	r1, r3
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <MX_ADC2_Init+0xb4>)
 800223c:	f001 fa0e 	bl	800365c <HAL_ADC_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8002246:	f000 fdf1 	bl	8002e2c <Error_Handler>
  }

}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200049f4 	.word	0x200049f4
 8002258:	40012100 	.word	0x40012100
 800225c:	0f000001 	.word	0x0f000001

08002260 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002266:	463b      	mov	r3, r7
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <MX_ADC3_Init+0x98>)
 8002274:	4a21      	ldr	r2, [pc, #132]	; (80022fc <MX_ADC3_Init+0x9c>)
 8002276:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <MX_ADC3_Init+0x98>)
 800227a:	2200      	movs	r2, #0
 800227c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <MX_ADC3_Init+0x98>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <MX_ADC3_Init+0x98>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_ADC3_Init+0x98>)
 800228c:	2201      	movs	r2, #1
 800228e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <MX_ADC3_Init+0x98>)
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <MX_ADC3_Init+0x98>)
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <MX_ADC3_Init+0x98>)
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <MX_ADC3_Init+0xa0>)
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_ADC3_Init+0x98>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <MX_ADC3_Init+0x98>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_ADC3_Init+0x98>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_ADC3_Init+0x98>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80022be:	480e      	ldr	r0, [pc, #56]	; (80022f8 <MX_ADC3_Init+0x98>)
 80022c0:	f000 ffae 	bl	8003220 <HAL_ADC_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80022ca:	f000 fdaf 	bl	8002e2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80022ce:	2302      	movs	r3, #2
 80022d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022da:	463b      	mov	r3, r7
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <MX_ADC3_Init+0x98>)
 80022e0:	f001 f9bc 	bl	800365c <HAL_ADC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80022ea:	f000 fd9f 	bl	8002e2c <Error_Handler>
  }

}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20004a84 	.word	0x20004a84
 80022fc:	40012200 	.word	0x40012200
 8002300:	0f000001 	.word	0x0f000001

08002304 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08e      	sub	sp, #56	; 0x38
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7b      	ldr	r2, [pc, #492]	; (8002510 <HAL_ADC_MspInit+0x20c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d16c      	bne.n	8002400 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002326:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a7a      	ldr	r2, [pc, #488]	; (8002514 <HAL_ADC_MspInit+0x210>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b78      	ldr	r3, [pc, #480]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	623b      	str	r3, [r7, #32]
 800233c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a74      	ldr	r2, [pc, #464]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b72      	ldr	r3, [pc, #456]	; (8002514 <HAL_ADC_MspInit+0x210>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002356:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a6e      	ldr	r2, [pc, #440]	; (8002514 <HAL_ADC_MspInit+0x210>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800236e:	2350      	movs	r3, #80	; 0x50
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002372:	2303      	movs	r3, #3
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237e:	4619      	mov	r1, r3
 8002380:	4865      	ldr	r0, [pc, #404]	; (8002518 <HAL_ADC_MspInit+0x214>)
 8002382:	f002 fccb 	bl	8004d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002386:	2310      	movs	r3, #16
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238a:	2303      	movs	r3, #3
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002396:	4619      	mov	r1, r3
 8002398:	4860      	ldr	r0, [pc, #384]	; (800251c <HAL_ADC_MspInit+0x218>)
 800239a:	f002 fcbf 	bl	8004d1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800239e:	4b60      	ldr	r3, [pc, #384]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023a0:	4a60      	ldr	r2, [pc, #384]	; (8002524 <HAL_ADC_MspInit+0x220>)
 80023a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023a4:	4b5e      	ldr	r3, [pc, #376]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b0:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023b6:	4b5a      	ldr	r3, [pc, #360]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023be:	4b58      	ldr	r3, [pc, #352]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023c6:	4b56      	ldr	r3, [pc, #344]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023d6:	4b52      	ldr	r3, [pc, #328]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023e2:	484f      	ldr	r0, [pc, #316]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023e4:	f002 f924 	bl	8004630 <HAL_DMA_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80023ee:	f000 fd1d 	bl	8002e2c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4a      	ldr	r2, [pc, #296]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
 80023f8:	4a49      	ldr	r2, [pc, #292]	; (8002520 <HAL_ADC_MspInit+0x21c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80023fe:	e083      	b.n	8002508 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a48      	ldr	r2, [pc, #288]	; (8002528 <HAL_ADC_MspInit+0x224>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d155      	bne.n	80024b6 <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_ADC_MspInit+0x210>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a41      	ldr	r2, [pc, #260]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a3b      	ldr	r2, [pc, #236]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_ADC_MspInit+0x210>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BRAKE_PEDAL_ONE_Pin|BRAKE_PEDAL_TWO_Pin;
 800243a:	2328      	movs	r3, #40	; 0x28
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243e:	2303      	movs	r3, #3
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244a:	4619      	mov	r1, r3
 800244c:	4832      	ldr	r0, [pc, #200]	; (8002518 <HAL_ADC_MspInit+0x214>)
 800244e:	f002 fc65 	bl	8004d1c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_ADC_MspInit+0x228>)
 8002454:	4a36      	ldr	r2, [pc, #216]	; (8002530 <HAL_ADC_MspInit+0x22c>)
 8002456:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_ADC_MspInit+0x228>)
 800245a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800245e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_ADC_MspInit+0x228>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_ADC_MspInit+0x228>)
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <HAL_ADC_MspInit+0x228>)
 800246e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002472:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_ADC_MspInit+0x228>)
 8002476:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800247a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800247c:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_ADC_MspInit+0x228>)
 800247e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002482:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_ADC_MspInit+0x228>)
 8002486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800248a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_ADC_MspInit+0x228>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_ADC_MspInit+0x228>)
 8002494:	2200      	movs	r2, #0
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002498:	4824      	ldr	r0, [pc, #144]	; (800252c <HAL_ADC_MspInit+0x228>)
 800249a:	f002 f8c9 	bl	8004630 <HAL_DMA_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 80024a4:	f000 fcc2 	bl	8002e2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a20      	ldr	r2, [pc, #128]	; (800252c <HAL_ADC_MspInit+0x228>)
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <HAL_ADC_MspInit+0x228>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024b4:	e028      	b.n	8002508 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <HAL_ADC_MspInit+0x230>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d123      	bne.n	8002508 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_ADC_MspInit+0x210>)
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	4a13      	ldr	r2, [pc, #76]	; (8002514 <HAL_ADC_MspInit+0x210>)
 80024c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ca:	6453      	str	r3, [r2, #68]	; 0x44
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_ADC_MspInit+0x210>)
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_ADC_MspInit+0x210>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <HAL_ADC_MspInit+0x210>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6313      	str	r3, [r2, #48]	; 0x30
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_ADC_MspInit+0x210>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BRAKE_PRESSURE_Pin;
 80024f0:	2304      	movs	r3, #4
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f4:	2303      	movs	r3, #3
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BRAKE_PRESSURE_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002500:	4619      	mov	r1, r3
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_ADC_MspInit+0x214>)
 8002504:	f002 fc0a 	bl	8004d1c <HAL_GPIO_Init>
}
 8002508:	bf00      	nop
 800250a:	3738      	adds	r7, #56	; 0x38
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40012000 	.word	0x40012000
 8002514:	40023800 	.word	0x40023800
 8002518:	40020000 	.word	0x40020000
 800251c:	40020800 	.word	0x40020800
 8002520:	20004acc 	.word	0x20004acc
 8002524:	40026410 	.word	0x40026410
 8002528:	40012100 	.word	0x40012100
 800252c:	20004b2c 	.word	0x20004b2c
 8002530:	40026440 	.word	0x40026440
 8002534:	40012200 	.word	0x40012200

08002538 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <MX_CAN1_Init+0x64>)
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <MX_CAN1_Init+0x68>)
 8002540:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_CAN1_Init+0x64>)
 8002544:	2202      	movs	r2, #2
 8002546:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <MX_CAN1_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800254e:	4b13      	ldr	r3, [pc, #76]	; (800259c <MX_CAN1_Init+0x64>)
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <MX_CAN1_Init+0x64>)
 8002556:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800255a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <MX_CAN1_Init+0x64>)
 800255e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002562:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <MX_CAN1_Init+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <MX_CAN1_Init+0x64>)
 800256c:	2200      	movs	r2, #0
 800256e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <MX_CAN1_Init+0x64>)
 8002572:	2200      	movs	r2, #0
 8002574:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <MX_CAN1_Init+0x64>)
 8002578:	2200      	movs	r2, #0
 800257a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <MX_CAN1_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <MX_CAN1_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <MX_CAN1_Init+0x64>)
 800258a:	f001 fb2d 	bl	8003be8 <HAL_CAN_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002594:	f000 fc4a 	bl	8002e2c <Error_Handler>
  }

}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20004bdc 	.word	0x20004bdc
 80025a0:	40006400 	.word	0x40006400

080025a4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <MX_CAN2_Init+0x64>)
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <MX_CAN2_Init+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_CAN2_Init+0x64>)
 80025b0:	2202      	movs	r2, #2
 80025b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_CAN2_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_CAN2_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_CAN2_Init+0x64>)
 80025c2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80025c6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_CAN2_Init+0x64>)
 80025ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025ce:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <MX_CAN2_Init+0x64>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_CAN2_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <MX_CAN2_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_CAN2_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <MX_CAN2_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_CAN2_Init+0x64>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_CAN2_Init+0x64>)
 80025f6:	f001 faf7 	bl	8003be8 <HAL_CAN_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002600:	f000 fc14 	bl	8002e2c <Error_Handler>
  }

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20004bb4 	.word	0x20004bb4
 800260c:	40006800 	.word	0x40006800

08002610 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_CAN3_Init+0x64>)
 8002616:	4a18      	ldr	r2, [pc, #96]	; (8002678 <MX_CAN3_Init+0x68>)
 8002618:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 2;
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <MX_CAN3_Init+0x64>)
 800261c:	2202      	movs	r2, #2
 800261e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MX_CAN3_Init+0x64>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <MX_CAN3_Init+0x64>)
 8002628:	2200      	movs	r2, #0
 800262a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_CAN3_Init+0x64>)
 800262e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002632:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <MX_CAN3_Init+0x64>)
 8002636:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800263a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <MX_CAN3_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_CAN3_Init+0x64>)
 8002644:	2200      	movs	r2, #0
 8002646:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <MX_CAN3_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_CAN3_Init+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <MX_CAN3_Init+0x64>)
 8002656:	2200      	movs	r2, #0
 8002658:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_CAN3_Init+0x64>)
 800265c:	2200      	movs	r2, #0
 800265e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8002660:	4804      	ldr	r0, [pc, #16]	; (8002674 <MX_CAN3_Init+0x64>)
 8002662:	f001 fac1 	bl	8003be8 <HAL_CAN_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 800266c:	f000 fbde 	bl	8002e2c <Error_Handler>
  }

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20004b8c 	.word	0x20004b8c
 8002678:	40003400 	.word	0x40003400

0800267c <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b092      	sub	sp, #72	; 0x48
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a7e      	ldr	r2, [pc, #504]	; (8002894 <HAL_CAN_MspInit+0x218>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d132      	bne.n	8002704 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800269e:	4b7e      	ldr	r3, [pc, #504]	; (8002898 <HAL_CAN_MspInit+0x21c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	4a7c      	ldr	r2, [pc, #496]	; (8002898 <HAL_CAN_MspInit+0x21c>)
 80026a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80026a8:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <HAL_CAN_MspInit+0x21c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10b      	bne.n	80026c8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80026b0:	4b7a      	ldr	r3, [pc, #488]	; (800289c <HAL_CAN_MspInit+0x220>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a79      	ldr	r2, [pc, #484]	; (800289c <HAL_CAN_MspInit+0x220>)
 80026b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ba:	6413      	str	r3, [r2, #64]	; 0x40
 80026bc:	4b77      	ldr	r3, [pc, #476]	; (800289c <HAL_CAN_MspInit+0x220>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b74      	ldr	r3, [pc, #464]	; (800289c <HAL_CAN_MspInit+0x220>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	4a73      	ldr	r2, [pc, #460]	; (800289c <HAL_CAN_MspInit+0x220>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6313      	str	r3, [r2, #48]	; 0x30
 80026d4:	4b71      	ldr	r3, [pc, #452]	; (800289c <HAL_CAN_MspInit+0x220>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80026f2:	2309      	movs	r3, #9
 80026f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026fa:	4619      	mov	r1, r3
 80026fc:	4868      	ldr	r0, [pc, #416]	; (80028a0 <HAL_CAN_MspInit+0x224>)
 80026fe:	f002 fb0d 	bl	8004d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8002702:	e0c2      	b.n	800288a <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a66      	ldr	r2, [pc, #408]	; (80028a4 <HAL_CAN_MspInit+0x228>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d15c      	bne.n	80027c8 <HAL_CAN_MspInit+0x14c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 800270e:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <HAL_CAN_MspInit+0x22c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	4a64      	ldr	r2, [pc, #400]	; (80028a8 <HAL_CAN_MspInit+0x22c>)
 8002716:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8002718:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_CAN_MspInit+0x22c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d10b      	bne.n	8002738 <HAL_CAN_MspInit+0xbc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002720:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	4a5d      	ldr	r2, [pc, #372]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002726:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800272a:	6413      	str	r3, [r2, #64]	; 0x40
 800272c:	4b5b      	ldr	r3, [pc, #364]	; (800289c <HAL_CAN_MspInit+0x220>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 8002738:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <HAL_CAN_MspInit+0x230>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	4a5b      	ldr	r2, [pc, #364]	; (80028ac <HAL_CAN_MspInit+0x230>)
 8002740:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8002742:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_CAN_MspInit+0x230>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d10b      	bne.n	8002762 <HAL_CAN_MspInit+0xe6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 800274a:	4b54      	ldr	r3, [pc, #336]	; (800289c <HAL_CAN_MspInit+0x220>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a53      	ldr	r2, [pc, #332]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002762:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <HAL_CAN_MspInit+0x21c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	4a4b      	ldr	r2, [pc, #300]	; (8002898 <HAL_CAN_MspInit+0x21c>)
 800276a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800276c:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_CAN_MspInit+0x21c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d10b      	bne.n	800278c <HAL_CAN_MspInit+0x110>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002774:	4b49      	ldr	r3, [pc, #292]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	4a48      	ldr	r2, [pc, #288]	; (800289c <HAL_CAN_MspInit+0x220>)
 800277a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800277e:	6413      	str	r3, [r2, #64]	; 0x40
 8002780:	4b46      	ldr	r3, [pc, #280]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278c:	4b43      	ldr	r3, [pc, #268]	; (800289c <HAL_CAN_MspInit+0x220>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	4a42      	ldr	r2, [pc, #264]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002792:	f043 0302 	orr.w	r3, r3, #2
 8002796:	6313      	str	r3, [r2, #48]	; 0x30
 8002798:	4b40      	ldr	r3, [pc, #256]	; (800289c <HAL_CAN_MspInit+0x220>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80027a4:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80027b6:	2309      	movs	r3, #9
 80027b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027be:	4619      	mov	r1, r3
 80027c0:	483b      	ldr	r0, [pc, #236]	; (80028b0 <HAL_CAN_MspInit+0x234>)
 80027c2:	f002 faab 	bl	8004d1c <HAL_GPIO_Init>
}
 80027c6:	e060      	b.n	800288a <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN3)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a39      	ldr	r2, [pc, #228]	; (80028b4 <HAL_CAN_MspInit+0x238>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d15b      	bne.n	800288a <HAL_CAN_MspInit+0x20e>
    HAL_RCC_CAN3_CLK_ENABLED++;
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <HAL_CAN_MspInit+0x22c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <HAL_CAN_MspInit+0x22c>)
 80027da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_CAN_MspInit+0x22c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10b      	bne.n	80027fc <HAL_CAN_MspInit+0x180>
      __HAL_RCC_CAN3_CLK_ENABLE();
 80027e4:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_CAN_MspInit+0x220>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	4a2c      	ldr	r2, [pc, #176]	; (800289c <HAL_CAN_MspInit+0x220>)
 80027ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027ee:	6413      	str	r3, [r2, #64]	; 0x40
 80027f0:	4b2a      	ldr	r3, [pc, #168]	; (800289c <HAL_CAN_MspInit+0x220>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_CAN_MspInit+0x230>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	4a2a      	ldr	r2, [pc, #168]	; (80028ac <HAL_CAN_MspInit+0x230>)
 8002804:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_CAN_MspInit+0x230>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10b      	bne.n	8002826 <HAL_CAN_MspInit+0x1aa>
      __HAL_RCC_CAN2_CLK_ENABLE();
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a22      	ldr	r2, [pc, #136]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002814:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_CAN_MspInit+0x220>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_CAN_MspInit+0x21c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <HAL_CAN_MspInit+0x21c>)
 800282e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_CAN_MspInit+0x21c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10b      	bne.n	8002850 <HAL_CAN_MspInit+0x1d4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_CAN_MspInit+0x220>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_CAN_MspInit+0x220>)
 800283e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002842:	6413      	str	r3, [r2, #64]	; 0x40
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a11      	ldr	r2, [pc, #68]	; (800289c <HAL_CAN_MspInit+0x220>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_CAN_MspInit+0x220>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8002868:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800287a:	230b      	movs	r3, #11
 800287c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002882:	4619      	mov	r1, r3
 8002884:	4806      	ldr	r0, [pc, #24]	; (80028a0 <HAL_CAN_MspInit+0x224>)
 8002886:	f002 fa49 	bl	8004d1c <HAL_GPIO_Init>
}
 800288a:	bf00      	nop
 800288c:	3748      	adds	r7, #72	; 0x48
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40006400 	.word	0x40006400
 8002898:	200000d0 	.word	0x200000d0
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40006800 	.word	0x40006800
 80028a8:	200000d4 	.word	0x200000d4
 80028ac:	200000d8 	.word	0x200000d8
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40003400 	.word	0x40003400

080028b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <MX_DMA_Init+0x48>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <MX_DMA_Init+0x48>)
 80028c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <MX_DMA_Init+0x48>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	2038      	movs	r0, #56	; 0x38
 80028dc:	f001 fe7e 	bl	80045dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80028e0:	2038      	movs	r0, #56	; 0x38
 80028e2:	f001 fe97 	bl	8004614 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	203a      	movs	r0, #58	; 0x3a
 80028ec:	f001 fe76 	bl	80045dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80028f0:	203a      	movs	r0, #58	; 0x3a
 80028f2:	f001 fe8f 	bl	8004614 <HAL_NVIC_EnableIRQ>

}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <MX_FREERTOS_Init+0x18>)
 800290a:	2100      	movs	r1, #0
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <MX_FREERTOS_Init+0x1c>)
 800290e:	f004 fc69 	bl	80071e4 <osThreadNew>
 8002912:	4602      	mov	r2, r0
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <MX_FREERTOS_Init+0x20>)
 8002916:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	0800b614 	.word	0x0800b614
 8002920:	08002929 	.word	0x08002929
 8002924:	20004c04 	.word	0x20004c04

08002928 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002930:	2001      	movs	r0, #1
 8002932:	f004 fcfd 	bl	8007330 <osDelay>
 8002936:	e7fb      	b.n	8002930 <StartDefaultTask+0x8>

08002938 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <MX_GPIO_Init+0xd4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a2e      	ldr	r2, [pc, #184]	; (8002a0c <MX_GPIO_Init+0xd4>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <MX_GPIO_Init+0xd4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <MX_GPIO_Init+0xd4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a28      	ldr	r2, [pc, #160]	; (8002a0c <MX_GPIO_Init+0xd4>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <MX_GPIO_Init+0xd4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <MX_GPIO_Init+0xd4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <MX_GPIO_Init+0xd4>)
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <MX_GPIO_Init+0xd4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <MX_GPIO_Init+0xd4>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <MX_GPIO_Init+0xd4>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <MX_GPIO_Init+0xd4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80029ae:	2200      	movs	r2, #0
 80029b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b4:	4816      	ldr	r0, [pc, #88]	; (8002a10 <MX_GPIO_Init+0xd8>)
 80029b6:	f002 fb73 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HSOUT_RTD_LED_Pin;
 80029ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HSOUT_RTD_LED_GPIO_Port, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	480f      	ldr	r0, [pc, #60]	; (8002a10 <MX_GPIO_Init+0xd8>)
 80029d4:	f002 f9a2 	bl	8004d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_INPUT_Pin;
 80029d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <MX_GPIO_Init+0xdc>)
 80029e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTD_INPUT_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	4808      	ldr	r0, [pc, #32]	; (8002a10 <MX_GPIO_Init+0xd8>)
 80029ee:	f002 f995 	bl	8004d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2103      	movs	r1, #3
 80029f6:	2028      	movs	r0, #40	; 0x28
 80029f8:	f001 fdf0 	bl	80045dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029fc:	2028      	movs	r0, #40	; 0x28
 80029fe:	f001 fe09 	bl	8004614 <HAL_NVIC_EnableIRQ>

}
 8002a02:	bf00      	nop
 8002a04:	3728      	adds	r7, #40	; 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40021000 	.word	0x40021000
 8002a14:	10110000 	.word	0x10110000

08002a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b0a0      	sub	sp, #128	; 0x80
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a1e:	f000 fbd2 	bl	80031c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a22:	f000 f8a3 	bl	8002b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a26:	f7ff ff87 	bl	8002938 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a2a:	f7ff ff45 	bl	80028b8 <MX_DMA_Init>
  MX_CAN1_Init();
 8002a2e:	f7ff fd83 	bl	8002538 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8002a32:	f000 fb2b 	bl	800308c <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8002a36:	f7ff fdb5 	bl	80025a4 <MX_CAN2_Init>
  MX_CAN3_Init();
 8002a3a:	f7ff fde9 	bl	8002610 <MX_CAN3_Init>
  MX_ADC2_Init();
 8002a3e:	f7ff fbaf 	bl	80021a0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002a42:	f7ff fc0d 	bl	8002260 <MX_ADC3_Init>
  MX_ADC1_Init();
 8002a46:	f7ff fb3d 	bl	80020c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8002a4a:	4842      	ldr	r0, [pc, #264]	; (8002b54 <main+0x13c>)
 8002a4c:	f001 fab4 	bl	8003fb8 <HAL_CAN_Start>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <main+0x42>
	{
		Error_Handler();
 8002a56:	f000 f9e9 	bl	8002e2c <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8002a5a:	483f      	ldr	r0, [pc, #252]	; (8002b58 <main+0x140>)
 8002a5c:	f001 faac 	bl	8003fb8 <HAL_CAN_Start>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <main+0x52>
	{
		Error_Handler();
 8002a66:	f000 f9e1 	bl	8002e2c <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan3) != HAL_OK)
 8002a6a:	483c      	ldr	r0, [pc, #240]	; (8002b5c <main+0x144>)
 8002a6c:	f001 faa4 	bl	8003fb8 <HAL_CAN_Start>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <main+0x62>
	{
		Error_Handler();
 8002a76:	f000 f9d9 	bl	8002e2c <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8002a82:	2301      	movs	r3, #1
 8002a84:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 8002a86:	2300      	movs	r3, #0
 8002a88:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 8002a92:	2300      	movs	r3, #0
 8002a94:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 8002a9e:	230e      	movs	r3, #14
 8002aa0:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 8002aa2:	230e      	movs	r3, #14
 8002aa4:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 8002aba:	2300      	movs	r3, #0
 8002abc:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 8002ac6:	230e      	movs	r3, #14
 8002ac8:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 28;
 8002aca:	231c      	movs	r3, #28
 8002acc:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 8002ada:	2301      	movs	r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 8002aee:	230e      	movs	r3, #14
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 8002af2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002af6:	4619      	mov	r1, r3
 8002af8:	4816      	ldr	r0, [pc, #88]	; (8002b54 <main+0x13c>)
 8002afa:	f001 f971 	bl	8003de0 <HAL_CAN_ConfigFilter>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <main+0xf0>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002b04:	f000 f992 	bl	8002e2c <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8002b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4812      	ldr	r0, [pc, #72]	; (8002b58 <main+0x140>)
 8002b10:	f001 f966 	bl	8003de0 <HAL_CAN_ConfigFilter>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <main+0x106>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002b1a:	f000 f987 	bl	8002e2c <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	480e      	ldr	r0, [pc, #56]	; (8002b5c <main+0x144>)
 8002b24:	f001 f95c 	bl	8003de0 <HAL_CAN_ConfigFilter>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <main+0x11a>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002b2e:	f000 f97d 	bl	8002e2c <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 8002b32:	480b      	ldr	r0, [pc, #44]	; (8002b60 <main+0x148>)
 8002b34:	f7fd fde5 	bl	8000702 <fsm_new>
 8002b38:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <main+0x14c>)
 8002b3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b3e:	480a      	ldr	r0, [pc, #40]	; (8002b68 <main+0x150>)
 8002b40:	f004 fb50 	bl	80071e4 <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002b44:	f004 fae4 	bl	8007110 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002b48:	f7ff fedc 	bl	8002904 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002b4c:	f004 fb14 	bl	8007178 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002b50:	e7fe      	b.n	8002b50 <main+0x138>
 8002b52:	bf00      	nop
 8002b54:	20004bdc 	.word	0x20004bdc
 8002b58:	20004bb4 	.word	0x20004bb4
 8002b5c:	20004b8c 	.word	0x20004b8c
 8002b60:	20000000 	.word	0x20000000
 8002b64:	0800b638 	.word	0x0800b638
 8002b68:	08002c89 	.word	0x08002c89

08002b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0b8      	sub	sp, #224	; 0xe0
 8002b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b76:	2234      	movs	r2, #52	; 0x34
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f007 fffb 	bl	800ab76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b90:	f107 0308 	add.w	r3, r7, #8
 8002b94:	2290      	movs	r2, #144	; 0x90
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f007 ffec 	bl	800ab76 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <SystemClock_Config+0xec>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <SystemClock_Config+0xec>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <SystemClock_Config+0xec>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <SystemClock_Config+0xf0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bbe:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <SystemClock_Config+0xf0>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <SystemClock_Config+0xf0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bde:	2310      	movs	r3, #16
 8002be0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 fa94 	bl	800511c <HAL_RCC_OscConfig>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002bfa:	f000 f917 	bl	8002e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bfe:	230f      	movs	r3, #15
 8002c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 fd28 	bl	8005678 <HAL_RCC_ClockConfig>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002c2e:	f000 f8fd 	bl	8002e2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c36:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c3c:	f107 0308 	add.w	r3, r7, #8
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 ff1d 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002c4c:	f000 f8ee 	bl	8002e2c <Error_Handler>
  }
}
 8002c50:	bf00      	nop
 8002c52:	37e0      	adds	r7, #224	; 0xe0
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000

08002c60 <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4803      	ldr	r0, [pc, #12]	; (8002c84 <CC_LogInfo+0x24>)
 8002c76:	f003 fda5 	bl	80067c4 <HAL_UART_Transmit>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20004c48 	.word	0x20004c48

08002c88 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b0a4      	sub	sp, #144	; 0x90
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 8002c90:	2115      	movs	r1, #21
 8002c92:	4850      	ldr	r0, [pc, #320]	; (8002dd4 <fsm_thread_mainLoop+0x14c>)
 8002c94:	f7ff ffe4 	bl	8002c60 <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 8002c98:	494f      	ldr	r1, [pc, #316]	; (8002dd8 <fsm_thread_mainLoop+0x150>)
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd fe24 	bl	80008e8 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 8002ca0:	494e      	ldr	r1, [pc, #312]	; (8002ddc <fsm_thread_mainLoop+0x154>)
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd fdd4 	bl	8000850 <fsm_reset>
	fsm_changeState(fsm, &debugState, "Forcing debug state");
 8002ca8:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <fsm_thread_mainLoop+0x158>)
 8002caa:	494e      	ldr	r1, [pc, #312]	; (8002de4 <fsm_thread_mainLoop+0x15c>)
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7fd fd85 	bl	80007bc <fsm_changeState>
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8002cb2:	e025      	b.n	8002d00 <fsm_thread_mainLoop+0x78>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	331c      	adds	r3, #28
 8002cba:	f107 020c 	add.w	r2, r7, #12
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4849      	ldr	r0, [pc, #292]	; (8002de8 <fsm_thread_mainLoop+0x160>)
 8002cc2:	f001 fa98 	bl	80041f6 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002cc6:	4b49      	ldr	r3, [pc, #292]	; (8002dec <fsm_thread_mainLoop+0x164>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8002cce:	f107 010c 	add.w	r1, r7, #12
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f004 fd3b 	bl	8007750 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002cda:	f000 fa95 	bl	8003208 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4b42      	ldr	r3, [pc, #264]	; (8002dec <fsm_thread_mainLoop+0x164>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	4a41      	ldr	r2, [pc, #260]	; (8002df0 <fsm_thread_mainLoop+0x168>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	099a      	lsrs	r2, r3, #6
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002cf6:	493f      	ldr	r1, [pc, #252]	; (8002df4 <fsm_thread_mainLoop+0x16c>)
 8002cf8:	f007 fffe 	bl	800acf8 <siprintf>
 8002cfc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8002d00:	2100      	movs	r1, #0
 8002d02:	4839      	ldr	r0, [pc, #228]	; (8002de8 <fsm_thread_mainLoop+0x160>)
 8002d04:	f001 fb89 	bl	800441a <HAL_CAN_GetRxFifoFillLevel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1d2      	bne.n	8002cb4 <fsm_thread_mainLoop+0x2c>
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8002d0e:	e025      	b.n	8002d5c <fsm_thread_mainLoop+0xd4>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	331c      	adds	r3, #28
 8002d16:	f107 020c 	add.w	r2, r7, #12
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4836      	ldr	r0, [pc, #216]	; (8002df8 <fsm_thread_mainLoop+0x170>)
 8002d1e:	f001 fa6a 	bl	80041f6 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002d22:	4b32      	ldr	r3, [pc, #200]	; (8002dec <fsm_thread_mainLoop+0x164>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8002d2a:	f107 010c 	add.w	r1, r7, #12
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2200      	movs	r2, #0
 8002d32:	f004 fd0d 	bl	8007750 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002d36:	f000 fa67 	bl	8003208 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <fsm_thread_mainLoop+0x164>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <fsm_thread_mainLoop+0x168>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	099a      	lsrs	r2, r3, #6
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002d52:	492a      	ldr	r1, [pc, #168]	; (8002dfc <fsm_thread_mainLoop+0x174>)
 8002d54:	f007 ffd0 	bl	800acf8 <siprintf>
 8002d58:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4826      	ldr	r0, [pc, #152]	; (8002df8 <fsm_thread_mainLoop+0x170>)
 8002d60:	f001 fb5b 	bl	800441a <HAL_CAN_GetRxFifoFillLevel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1d2      	bne.n	8002d10 <fsm_thread_mainLoop+0x88>
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8002d6a:	e025      	b.n	8002db8 <fsm_thread_mainLoop+0x130>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 8002d6c:	f107 030c 	add.w	r3, r7, #12
 8002d70:	331c      	adds	r3, #28
 8002d72:	f107 020c 	add.w	r2, r7, #12
 8002d76:	2100      	movs	r1, #0
 8002d78:	4821      	ldr	r0, [pc, #132]	; (8002e00 <fsm_thread_mainLoop+0x178>)
 8002d7a:	f001 fa3c 	bl	80041f6 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <fsm_thread_mainLoop+0x164>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8002d86:	f107 010c 	add.w	r1, r7, #12
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f004 fcdf 	bl	8007750 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002d92:	f000 fa39 	bl	8003208 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <fsm_thread_mainLoop+0x164>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <fsm_thread_mainLoop+0x168>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	099a      	lsrs	r2, r3, #6
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002dae:	4915      	ldr	r1, [pc, #84]	; (8002e04 <fsm_thread_mainLoop+0x17c>)
 8002db0:	f007 ffa2 	bl	800acf8 <siprintf>
 8002db4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8002db8:	2100      	movs	r1, #0
 8002dba:	4811      	ldr	r0, [pc, #68]	; (8002e00 <fsm_thread_mainLoop+0x178>)
 8002dbc:	f001 fb2d 	bl	800441a <HAL_CAN_GetRxFifoFillLevel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1d2      	bne.n	8002d6c <fsm_thread_mainLoop+0xe4>
			//CC_LogInfo(x, len);
		}

		osDelay(20);
 8002dc6:	2014      	movs	r0, #20
 8002dc8:	f004 fab2 	bl	8007330 <osDelay>
		fsm_iterate(fsm);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7fd fcd1 	bl	8000774 <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8002dd2:	e795      	b.n	8002d00 <fsm_thread_mainLoop+0x78>
 8002dd4:	0800b558 	.word	0x0800b558
 8002dd8:	08002c61 	.word	0x08002c61
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	0800b570 	.word	0x0800b570
 8002de4:	20000030 	.word	0x20000030
 8002de8:	20004bdc 	.word	0x20004bdc
 8002dec:	200049f0 	.word	0x200049f0
 8002df0:	10624dd3 	.word	0x10624dd3
 8002df4:	0800b584 	.word	0x0800b584
 8002df8:	20004bb4 	.word	0x20004bb4
 8002dfc:	0800b5ac 	.word	0x0800b5ac
 8002e00:	20004b8c 	.word	0x20004b8c
 8002e04:	0800b5d4 	.word	0x0800b5d4

08002e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e1a:	f000 f9e1 	bl	80031e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40001400 	.word	0x40001400

08002e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_MspInit+0x44>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <HAL_MspInit+0x44>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_MspInit+0x44>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_MspInit+0x44>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <HAL_MspInit+0x44>)
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e64:	6453      	str	r3, [r2, #68]	; 0x44
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_MspInit+0x44>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800

08002e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08c      	sub	sp, #48	; 0x30
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002e94:	2200      	movs	r2, #0
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	2037      	movs	r0, #55	; 0x37
 8002e9a:	f001 fb9f 	bl	80045dc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e9e:	2037      	movs	r0, #55	; 0x37
 8002ea0:	f001 fbb8 	bl	8004614 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <HAL_InitTick+0x9c>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <HAL_InitTick+0x9c>)
 8002eaa:	f043 0320 	orr.w	r3, r3, #32
 8002eae:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_InitTick+0x9c>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ebc:	f107 0210 	add.w	r2, r7, #16
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 fda8 	bl	8005a1c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ecc:	f002 fd7e 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 8002ed0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <HAL_InitTick+0xa0>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0c9b      	lsrs	r3, r3, #18
 8002edc:	3b01      	subs	r3, #1
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_InitTick+0xa4>)
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <HAL_InitTick+0xa8>)
 8002ee4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_InitTick+0xa4>)
 8002ee8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002eec:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002eee:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <HAL_InitTick+0xa4>)
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_InitTick+0xa4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_InitTick+0xa4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002f00:	4809      	ldr	r0, [pc, #36]	; (8002f28 <HAL_InitTick+0xa4>)
 8002f02:	f003 f9ab 	bl	800625c <HAL_TIM_Base_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d104      	bne.n	8002f16 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002f0c:	4806      	ldr	r0, [pc, #24]	; (8002f28 <HAL_InitTick+0xa4>)
 8002f0e:	f003 f9db 	bl	80062c8 <HAL_TIM_Base_Start_IT>
 8002f12:	4603      	mov	r3, r0
 8002f14:	e000      	b.n	8002f18 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3730      	adds	r7, #48	; 0x30
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	431bde83 	.word	0x431bde83
 8002f28:	20004c08 	.word	0x20004c08
 8002f2c:	40001400 	.word	0x40001400

08002f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <HardFault_Handler+0x4>

08002f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <MemManage_Handler+0x4>

08002f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <BusFault_Handler+0x4>

08002f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <UsageFault_Handler+0x4>

08002f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f64:	b598      	push	{r3, r4, r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 8002f68:	f000 f94e 	bl	8003208 <HAL_GetTick>
 8002f6c:	4601      	mov	r1, r0
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <EXTI15_10_IRQHandler+0x50>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <EXTI15_10_IRQHandler+0x50>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	1a8a      	subs	r2, r1, r2
 8002f7c:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
	CC_GlobalState->rtdTicks = HAL_GetTick();
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <EXTI15_10_IRQHandler+0x50>)
 8002f82:	681c      	ldr	r4, [r3, #0]
 8002f84:	f000 f940 	bl	8003208 <HAL_GetTick>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
	if(CC_GlobalState->rtdTicksSpan > 10)
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <EXTI15_10_IRQHandler+0x50>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f96:	2b0a      	cmp	r3, #10
 8002f98:	d906      	bls.n	8002fa8 <EXTI15_10_IRQHandler+0x44>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <EXTI15_10_IRQHandler+0x50>)
 8002f9c:	681c      	ldr	r4, [r3, #0]
 8002f9e:	f000 f933 	bl	8003208 <HAL_GetTick>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002fa8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fac:	f002 f892 	bl	80050d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	bd98      	pop	{r3, r4, r7, pc}
 8002fb4:	200049f0 	.word	0x200049f0

08002fb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <TIM7_IRQHandler+0x10>)
 8002fbe:	f003 f9ad 	bl	800631c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20004c08 	.word	0x20004c08

08002fcc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <DMA2_Stream0_IRQHandler+0x10>)
 8002fd2:	f001 fc3b 	bl	800484c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20004acc 	.word	0x20004acc

08002fe0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <DMA2_Stream2_IRQHandler+0x10>)
 8002fe6:	f001 fc31 	bl	800484c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20004b2c 	.word	0x20004b2c

08002ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <_sbrk+0x5c>)
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <_sbrk+0x60>)
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <_sbrk+0x64>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <_sbrk+0x64>)
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <_sbrk+0x68>)
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <_sbrk+0x64>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	429a      	cmp	r2, r3
 8003022:	d207      	bcs.n	8003034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003024:	f007 fd6a 	bl	800aafc <__errno>
 8003028:	4602      	mov	r2, r0
 800302a:	230c      	movs	r3, #12
 800302c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800302e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003032:	e009      	b.n	8003048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <_sbrk+0x64>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	4a05      	ldr	r2, [pc, #20]	; (8003058 <_sbrk+0x64>)
 8003044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003046:	68fb      	ldr	r3, [r7, #12]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20080000 	.word	0x20080000
 8003054:	00000400 	.word	0x00000400
 8003058:	200000dc 	.word	0x200000dc
 800305c:	20004d10 	.word	0x20004d10

08003060 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <SystemInit+0x28>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	4a07      	ldr	r2, [pc, #28]	; (8003088 <SystemInit+0x28>)
 800306c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SystemInit+0x28>)
 8003076:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800307a:	609a      	str	r2, [r3, #8]
#endif
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 8003092:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <MX_USART3_UART_Init+0x5c>)
 8003094:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 8003098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800309c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 80030b2:	220c      	movs	r2, #12
 80030b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030ce:	4805      	ldr	r0, [pc, #20]	; (80030e4 <MX_USART3_UART_Init+0x58>)
 80030d0:	f003 fb2a 	bl	8006728 <HAL_UART_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80030da:	f7ff fea7 	bl	8002e2c <Error_Handler>
  }

}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20004c48 	.word	0x20004c48
 80030e8:	40004800 	.word	0x40004800

080030ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_UART_MspInit+0x7c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d128      	bne.n	8003160 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800310e:	4b17      	ldr	r3, [pc, #92]	; (800316c <HAL_UART_MspInit+0x80>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_UART_MspInit+0x80>)
 8003114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_UART_MspInit+0x80>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_UART_MspInit+0x80>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_UART_MspInit+0x80>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_UART_MspInit+0x80>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800313e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314c:	2303      	movs	r3, #3
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003150:	2307      	movs	r3, #7
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4805      	ldr	r0, [pc, #20]	; (8003170 <HAL_UART_MspInit+0x84>)
 800315c:	f001 fdde 	bl	8004d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003160:	bf00      	nop
 8003162:	3728      	adds	r7, #40	; 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40004800 	.word	0x40004800
 800316c:	40023800 	.word	0x40023800
 8003170:	40020400 	.word	0x40020400

08003174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003178:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800317a:	e003      	b.n	8003184 <LoopCopyDataInit>

0800317c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800317e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003180:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003182:	3104      	adds	r1, #4

08003184 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003184:	480b      	ldr	r0, [pc, #44]	; (80031b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003188:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800318a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800318c:	d3f6      	bcc.n	800317c <CopyDataInit>
  ldr  r2, =_sbss
 800318e:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003190:	e002      	b.n	8003198 <LoopFillZerobss>

08003192 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003192:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003194:	f842 3b04 	str.w	r3, [r2], #4

08003198 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800319a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800319c:	d3f9      	bcc.n	8003192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800319e:	f7ff ff5f 	bl	8003060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031a2:	f007 fcb1 	bl	800ab08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031a6:	f7ff fc37 	bl	8002a18 <main>
  bx  lr    
 80031aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031ac:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80031b0:	0800b6c0 	.word	0x0800b6c0
  ldr  r0, =_sdata
 80031b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031b8:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 80031bc:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 80031c0:	20004d10 	.word	0x20004d10

080031c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c4:	e7fe      	b.n	80031c4 <ADC_IRQHandler>

080031c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ca:	2003      	movs	r0, #3
 80031cc:	f001 f9fb 	bl	80045c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7ff fe57 	bl	8002e84 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80031d6:	f7ff fe31 	bl	8002e3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_IncTick+0x20>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_IncTick+0x24>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <HAL_IncTick+0x24>)
 80031f2:	6013      	str	r3, [r2, #0]
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000048 	.word	0x20000048
 8003204:	20004cc8 	.word	0x20004cc8

08003208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return uwTick;
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <HAL_GetTick+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20004cc8 	.word	0x20004cc8

08003220 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e031      	b.n	800329a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff f860 	bl	8002304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d116      	bne.n	800328c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <HAL_ADC_Init+0x84>)
 8003264:	4013      	ands	r3, r2
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fb3e 	bl	80038f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f023 0303 	bic.w	r3, r3, #3
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
 800328a:	e001      	b.n	8003290 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	ffffeefd 	.word	0xffffeefd

080032a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_Start+0x1a>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0a0      	b.n	8003404 <HAL_ADC_Start+0x15c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d018      	beq.n	800330a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80032e8:	4b49      	ldr	r3, [pc, #292]	; (8003410 <HAL_ADC_Start+0x168>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a49      	ldr	r2, [pc, #292]	; (8003414 <HAL_ADC_Start+0x16c>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	0c9a      	lsrs	r2, r3, #18
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80032fc:	e002      	b.n	8003304 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3b01      	subs	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f9      	bne.n	80032fe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d174      	bne.n	8003402 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331c:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <HAL_ADC_Start+0x170>)
 800331e:	4013      	ands	r3, r2
 8003320:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800333e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003352:	d106      	bne.n	8003362 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f023 0206 	bic.w	r2, r3, #6
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
 8003360:	e002      	b.n	8003368 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003378:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_ADC_Start+0x174>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d136      	bne.n	8003402 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	e02d      	b.n	8003402 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_ADC_Start+0x178>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d10e      	bne.n	80033ce <HAL_ADC_Start+0x126>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d107      	bne.n	80033ce <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033cc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <HAL_ADC_Start+0x174>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d113      	bne.n	8003402 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a11      	ldr	r2, [pc, #68]	; (8003424 <HAL_ADC_Start+0x17c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10e      	bne.n	8003402 <HAL_ADC_Start+0x15a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d107      	bne.n	8003402 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003400:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	20000040 	.word	0x20000040
 8003414:	431bde83 	.word	0x431bde83
 8003418:	fffff8fe 	.word	0xfffff8fe
 800341c:	40012300 	.word	0x40012300
 8003420:	40012000 	.word	0x40012000
 8003424:	40012200 	.word	0x40012200

08003428 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_ADC_Start_DMA+0x1e>
 8003442:	2302      	movs	r3, #2
 8003444:	e0c7      	b.n	80035d6 <HAL_ADC_Start_DMA+0x1ae>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d018      	beq.n	800348e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800346c:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_ADC_Start_DMA+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5c      	ldr	r2, [pc, #368]	; (80035e4 <HAL_ADC_Start_DMA+0x1bc>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0c9a      	lsrs	r2, r3, #18
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003480:	e002      	b.n	8003488 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3b01      	subs	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f9      	bne.n	8003482 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	f040 809b 	bne.w	80035d4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <HAL_ADC_Start_DMA+0x1c0>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d106      	bne.n	80034e8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f023 0206 	bic.w	r2, r3, #6
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	645a      	str	r2, [r3, #68]	; 0x44
 80034e6:	e002      	b.n	80034ee <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <HAL_ADC_Start_DMA+0x1c4>)
 80034fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_ADC_Start_DMA+0x1c8>)
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	4a3a      	ldr	r2, [pc, #232]	; (80035f4 <HAL_ADC_Start_DMA+0x1cc>)
 800350c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003516:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003526:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003536:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	334c      	adds	r3, #76	; 0x4c
 8003542:	4619      	mov	r1, r3
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f001 f920 	bl	800478c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800354c:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <HAL_ADC_Start_DMA+0x1d0>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10f      	bne.n	8003578 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d136      	bne.n	80035d4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003574:	609a      	str	r2, [r3, #8]
 8003576:	e02d      	b.n	80035d4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <HAL_ADC_Start_DMA+0x1d4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10e      	bne.n	80035a0 <HAL_ADC_Start_DMA+0x178>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800359e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80035a0:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <HAL_ADC_Start_DMA+0x1d0>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d113      	bne.n	80035d4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <HAL_ADC_Start_DMA+0x1d8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10e      	bne.n	80035d4 <HAL_ADC_Start_DMA+0x1ac>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d107      	bne.n	80035d4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035d2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000040 	.word	0x20000040
 80035e4:	431bde83 	.word	0x431bde83
 80035e8:	fffff8fe 	.word	0xfffff8fe
 80035ec:	08003ae5 	.word	0x08003ae5
 80035f0:	08003b9f 	.word	0x08003b9f
 80035f4:	08003bbb 	.word	0x08003bbb
 80035f8:	40012300 	.word	0x40012300
 80035fc:	40012000 	.word	0x40012000
 8003600:	40012200 	.word	0x40012200

08003604 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x1c>
 8003674:	2302      	movs	r3, #2
 8003676:	e12a      	b.n	80038ce <HAL_ADC_ConfigChannel+0x272>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b09      	cmp	r3, #9
 8003686:	d93a      	bls.n	80036fe <HAL_ADC_ConfigChannel+0xa2>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003690:	d035      	beq.n	80036fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68d9      	ldr	r1, [r3, #12]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	3b1e      	subs	r3, #30
 80036a8:	2207      	movs	r2, #7
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	400a      	ands	r2, r1
 80036b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a87      	ldr	r2, [pc, #540]	; (80038dc <HAL_ADC_ConfigChannel+0x280>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10a      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68d9      	ldr	r1, [r3, #12]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	061a      	lsls	r2, r3, #24
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d6:	e035      	b.n	8003744 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68d9      	ldr	r1, [r3, #12]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4618      	mov	r0, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4403      	add	r3, r0
 80036f0:	3b1e      	subs	r3, #30
 80036f2:	409a      	lsls	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036fc:	e022      	b.n	8003744 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6919      	ldr	r1, [r3, #16]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	2207      	movs	r2, #7
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43da      	mvns	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	400a      	ands	r2, r1
 8003720:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6919      	ldr	r1, [r3, #16]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	4618      	mov	r0, r3
 8003734:	4603      	mov	r3, r0
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4403      	add	r3, r0
 800373a:	409a      	lsls	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b06      	cmp	r3, #6
 800374a:	d824      	bhi.n	8003796 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	3b05      	subs	r3, #5
 800375e:	221f      	movs	r2, #31
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43da      	mvns	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	400a      	ands	r2, r1
 800376c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	b29b      	uxth	r3, r3
 800377a:	4618      	mov	r0, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	3b05      	subs	r3, #5
 8003788:	fa00 f203 	lsl.w	r2, r0, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	635a      	str	r2, [r3, #52]	; 0x34
 8003794:	e04c      	b.n	8003830 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d824      	bhi.n	80037e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	3b23      	subs	r3, #35	; 0x23
 80037b0:	221f      	movs	r2, #31
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43da      	mvns	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	400a      	ands	r2, r1
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	4618      	mov	r0, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	3b23      	subs	r3, #35	; 0x23
 80037da:	fa00 f203 	lsl.w	r2, r0, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
 80037e6:	e023      	b.n	8003830 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	3b41      	subs	r3, #65	; 0x41
 80037fa:	221f      	movs	r2, #31
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43da      	mvns	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	400a      	ands	r2, r1
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	4618      	mov	r0, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	3b41      	subs	r3, #65	; 0x41
 8003824:	fa00 f203 	lsl.w	r2, r0, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2a      	ldr	r2, [pc, #168]	; (80038e0 <HAL_ADC_ConfigChannel+0x284>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d10a      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x1f4>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003842:	d105      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_ADC_ConfigChannel+0x288>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a26      	ldr	r2, [pc, #152]	; (80038e4 <HAL_ADC_ConfigChannel+0x288>)
 800384a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800384e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <HAL_ADC_ConfigChannel+0x284>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d109      	bne.n	800386e <HAL_ADC_ConfigChannel+0x212>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b12      	cmp	r3, #18
 8003860:	d105      	bne.n	800386e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_ADC_ConfigChannel+0x288>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <HAL_ADC_ConfigChannel+0x288>)
 8003868:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800386c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_ADC_ConfigChannel+0x284>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d125      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x268>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_ADC_ConfigChannel+0x280>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <HAL_ADC_ConfigChannel+0x22e>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b11      	cmp	r3, #17
 8003888:	d11c      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_ADC_ConfigChannel+0x288>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <HAL_ADC_ConfigChannel+0x288>)
 8003890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003894:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <HAL_ADC_ConfigChannel+0x280>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d111      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_ADC_ConfigChannel+0x28c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HAL_ADC_ConfigChannel+0x290>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	0c9a      	lsrs	r2, r3, #18
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038b6:	e002      	b.n	80038be <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f9      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	10000012 	.word	0x10000012
 80038e0:	40012000 	.word	0x40012000
 80038e4:	40012300 	.word	0x40012300
 80038e8:	20000040 	.word	0x20000040
 80038ec:	431bde83 	.word	0x431bde83

080038f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80038f8:	4b78      	ldr	r3, [pc, #480]	; (8003adc <ADC_Init+0x1ec>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a77      	ldr	r2, [pc, #476]	; (8003adc <ADC_Init+0x1ec>)
 80038fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003902:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003904:	4b75      	ldr	r3, [pc, #468]	; (8003adc <ADC_Init+0x1ec>)
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4973      	ldr	r1, [pc, #460]	; (8003adc <ADC_Init+0x1ec>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	021a      	lsls	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6899      	ldr	r1, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <ADC_Init+0x1f0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d022      	beq.n	80039ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003992:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6899      	ldr	r1, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	e00f      	b.n	80039ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0202 	bic.w	r2, r2, #2
 80039f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6899      	ldr	r1, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	005a      	lsls	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01b      	beq.n	8003a50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	3b01      	subs	r3, #1
 8003a44:	035a      	lsls	r2, r3, #13
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	e007      	b.n	8003a60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	051a      	lsls	r2, r3, #20
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6899      	ldr	r1, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003aa2:	025a      	lsls	r2, r3, #9
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6899      	ldr	r1, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	029a      	lsls	r2, r3, #10
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40012300 	.word	0x40012300
 8003ae0:	0f000001 	.word	0x0f000001

08003ae4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d13c      	bne.n	8003b78 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d12b      	bne.n	8003b70 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d127      	bne.n	8003b70 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d006      	beq.n	8003b3c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d119      	bne.n	8003b70 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0220 	bic.w	r2, r2, #32
 8003b4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f043 0201 	orr.w	r2, r3, #1
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff fd54 	bl	800361e <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b76:	e00e      	b.n	8003b96 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff fd5e 	bl	8003646 <HAL_ADC_ErrorCallback>
}
 8003b8a:	e004      	b.n	8003b96 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7ff fd40 	bl	8003632 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2240      	movs	r2, #64	; 0x40
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f043 0204 	orr.w	r2, r3, #4
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7ff fd33 	bl	8003646 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0ed      	b.n	8003dd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe fd38 	bl	800267c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0202 	bic.w	r2, r2, #2
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c1c:	f7ff faf4 	bl	8003208 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c22:	e012      	b.n	8003c4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c24:	f7ff faf0 	bl	8003208 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b0a      	cmp	r3, #10
 8003c30:	d90b      	bls.n	8003c4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2205      	movs	r2, #5
 8003c42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0c5      	b.n	8003dd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c68:	f7ff face 	bl	8003208 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c6e:	e012      	b.n	8003c96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c70:	f7ff faca 	bl	8003208 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b0a      	cmp	r3, #10
 8003c7c:	d90b      	bls.n	8003c96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2205      	movs	r2, #5
 8003c8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e09f      	b.n	8003dd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0e5      	beq.n	8003c70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7e1b      	ldrb	r3, [r3, #24]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d108      	bne.n	8003cbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e007      	b.n	8003cce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	7e5b      	ldrb	r3, [r3, #25]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d108      	bne.n	8003ce8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e007      	b.n	8003cf8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7e9b      	ldrb	r3, [r3, #26]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d108      	bne.n	8003d12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0220 	orr.w	r2, r2, #32
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e007      	b.n	8003d22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0220 	bic.w	r2, r2, #32
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7edb      	ldrb	r3, [r3, #27]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d108      	bne.n	8003d3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0210 	bic.w	r2, r2, #16
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e007      	b.n	8003d4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0210 	orr.w	r2, r2, #16
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	7f1b      	ldrb	r3, [r3, #28]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d108      	bne.n	8003d66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0208 	orr.w	r2, r2, #8
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e007      	b.n	8003d76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0208 	bic.w	r2, r2, #8
 8003d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7f5b      	ldrb	r3, [r3, #29]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d108      	bne.n	8003d90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0204 	orr.w	r2, r2, #4
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e007      	b.n	8003da0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	ea42 0103 	orr.w	r1, r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d003      	beq.n	8003e06 <HAL_CAN_ConfigFilter+0x26>
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	f040 80c7 	bne.w	8003f94 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a69      	ldr	r2, [pc, #420]	; (8003fb0 <HAL_CAN_ConfigFilter+0x1d0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d001      	beq.n	8003e14 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003e10:	4b68      	ldr	r3, [pc, #416]	; (8003fb4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003e12:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4a63      	ldr	r2, [pc, #396]	; (8003fb4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e32:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2201      	movs	r2, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d123      	bne.n	8003ec2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	401a      	ands	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3248      	adds	r2, #72	; 0x48
 8003ea2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003eb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003eb8:	6979      	ldr	r1, [r7, #20]
 8003eba:	3348      	adds	r3, #72	; 0x48
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d122      	bne.n	8003f10 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003eea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	3248      	adds	r2, #72	; 0x48
 8003ef0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f06:	6979      	ldr	r1, [r7, #20]
 8003f08:	3348      	adds	r3, #72	; 0x48
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	440b      	add	r3, r1
 8003f0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	401a      	ands	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003f2a:	e007      	b.n	8003f3c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003f56:	e007      	b.n	8003f68 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f86:	f023 0201 	bic.w	r2, r3, #1
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e006      	b.n	8003fa2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40003400 	.word	0x40003400
 8003fb4:	40006400 	.word	0x40006400

08003fb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d12e      	bne.n	800402a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fe4:	f7ff f910 	bl	8003208 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fea:	e012      	b.n	8004012 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fec:	f7ff f90c 	bl	8003208 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b0a      	cmp	r3, #10
 8003ff8:	d90b      	bls.n	8004012 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2205      	movs	r2, #5
 800400a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e012      	b.n	8004038 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e006      	b.n	8004038 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004054:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d003      	beq.n	800406c <HAL_CAN_AddTxMessage+0x2c>
 8004064:	7ffb      	ldrb	r3, [r7, #31]
 8004066:	2b02      	cmp	r3, #2
 8004068:	f040 80b8 	bne.w	80041dc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80a0 	beq.w	80041cc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	0e1b      	lsrs	r3, r3, #24
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d907      	bls.n	80040ac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e09e      	b.n	80041ea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80040ac:	2201      	movs	r2, #1
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	409a      	lsls	r2, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10d      	bne.n	80040da <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	6809      	ldr	r1, [r1, #0]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3318      	adds	r3, #24
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	440b      	add	r3, r1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e00f      	b.n	80040fa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040ea:	68f9      	ldr	r1, [r7, #12]
 80040ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80040ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3318      	adds	r3, #24
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	440b      	add	r3, r1
 80040f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6819      	ldr	r1, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	3318      	adds	r3, #24
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	440b      	add	r3, r1
 800410a:	3304      	adds	r3, #4
 800410c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	7d1b      	ldrb	r3, [r3, #20]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d111      	bne.n	800413a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	3318      	adds	r3, #24
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4413      	add	r3, r2
 8004122:	3304      	adds	r3, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	6811      	ldr	r1, [r2, #0]
 800412a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	3318      	adds	r3, #24
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	440b      	add	r3, r1
 8004136:	3304      	adds	r3, #4
 8004138:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3307      	adds	r3, #7
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	061a      	lsls	r2, r3, #24
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3306      	adds	r3, #6
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3305      	adds	r3, #5
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	4313      	orrs	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	3204      	adds	r2, #4
 800415a:	7812      	ldrb	r2, [r2, #0]
 800415c:	4610      	mov	r0, r2
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	ea43 0200 	orr.w	r2, r3, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	440b      	add	r3, r1
 800416c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004170:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3303      	adds	r3, #3
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	061a      	lsls	r2, r3, #24
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3302      	adds	r3, #2
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3301      	adds	r3, #1
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	4313      	orrs	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	7812      	ldrb	r2, [r2, #0]
 8004192:	4610      	mov	r0, r2
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	6811      	ldr	r1, [r2, #0]
 8004198:	ea43 0200 	orr.w	r2, r3, r0
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	440b      	add	r3, r1
 80041a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80041a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	3318      	adds	r3, #24
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	4413      	add	r3, r2
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	6811      	ldr	r1, [r2, #0]
 80041ba:	f043 0201 	orr.w	r2, r3, #1
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3318      	adds	r3, #24
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	440b      	add	r3, r1
 80041c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e00e      	b.n	80041ea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e006      	b.n	80041ea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
  }
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800420a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d003      	beq.n	800421a <HAL_CAN_GetRxMessage+0x24>
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	2b02      	cmp	r3, #2
 8004216:	f040 80f3 	bne.w	8004400 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10e      	bne.n	800423e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0e7      	b.n	800440e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0d8      	b.n	800440e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	331b      	adds	r3, #27
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	4413      	add	r3, r2
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0204 	and.w	r2, r3, #4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	331b      	adds	r3, #27
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	4413      	add	r3, r2
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	0d5b      	lsrs	r3, r3, #21
 800428a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e00b      	b.n	80042ac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	331b      	adds	r3, #27
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	4413      	add	r3, r2
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	08db      	lsrs	r3, r3, #3
 80042a4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	331b      	adds	r3, #27
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	4413      	add	r3, r2
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0202 	and.w	r2, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	331b      	adds	r3, #27
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	4413      	add	r3, r2
 80042ce:	3304      	adds	r3, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	331b      	adds	r3, #27
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	4413      	add	r3, r2
 80042e6:	3304      	adds	r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	331b      	adds	r3, #27
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	4413      	add	r3, r2
 80042fe:	3304      	adds	r3, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	0c1b      	lsrs	r3, r3, #16
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	4413      	add	r3, r2
 8004314:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0a1a      	lsrs	r2, r3, #8
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	4413      	add	r3, r2
 8004344:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	0c1a      	lsrs	r2, r3, #16
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	3302      	adds	r3, #2
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	4413      	add	r3, r2
 800435e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0e1a      	lsrs	r2, r3, #24
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	3303      	adds	r3, #3
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4413      	add	r3, r2
 8004378:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3304      	adds	r3, #4
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	4413      	add	r3, r2
 8004390:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	0a1a      	lsrs	r2, r3, #8
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	3305      	adds	r3, #5
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	0c1a      	lsrs	r2, r3, #16
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	3306      	adds	r3, #6
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0e1a      	lsrs	r2, r3, #24
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	3307      	adds	r3, #7
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d108      	bne.n	80043ec <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0220 	orr.w	r2, r2, #32
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	e007      	b.n	80043fc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0220 	orr.w	r2, r2, #32
 80043fa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e006      	b.n	800440e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
  }
}
 800440e:	4618      	mov	r0, r3
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004430:	7afb      	ldrb	r3, [r7, #11]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d002      	beq.n	800443c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004436:	7afb      	ldrb	r3, [r7, #11]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d10f      	bne.n	800445c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e005      	b.n	800445c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800445c:	68fb      	ldr	r3, [r7, #12]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <__NVIC_SetPriorityGrouping+0x40>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004488:	4013      	ands	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004496:	4313      	orrs	r3, r2
 8004498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800449a:	4a04      	ldr	r2, [pc, #16]	; (80044ac <__NVIC_SetPriorityGrouping+0x40>)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	60d3      	str	r3, [r2, #12]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000ed00 	.word	0xe000ed00
 80044b0:	05fa0000 	.word	0x05fa0000

080044b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <__NVIC_GetPriorityGrouping+0x18>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	f003 0307 	and.w	r3, r3, #7
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	db0b      	blt.n	80044fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	f003 021f 	and.w	r2, r3, #31
 80044e8:	4907      	ldr	r1, [pc, #28]	; (8004508 <__NVIC_EnableIRQ+0x38>)
 80044ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2001      	movs	r0, #1
 80044f2:	fa00 f202 	lsl.w	r2, r0, r2
 80044f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	e000e100 	.word	0xe000e100

0800450c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	6039      	str	r1, [r7, #0]
 8004516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451c:	2b00      	cmp	r3, #0
 800451e:	db0a      	blt.n	8004536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	490c      	ldr	r1, [pc, #48]	; (8004558 <__NVIC_SetPriority+0x4c>)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	0112      	lsls	r2, r2, #4
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	440b      	add	r3, r1
 8004530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004534:	e00a      	b.n	800454c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	4908      	ldr	r1, [pc, #32]	; (800455c <__NVIC_SetPriority+0x50>)
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	3b04      	subs	r3, #4
 8004544:	0112      	lsls	r2, r2, #4
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	440b      	add	r3, r1
 800454a:	761a      	strb	r2, [r3, #24]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	e000e100 	.word	0xe000e100
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f1c3 0307 	rsb	r3, r3, #7
 800457a:	2b04      	cmp	r3, #4
 800457c:	bf28      	it	cs
 800457e:	2304      	movcs	r3, #4
 8004580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3304      	adds	r3, #4
 8004586:	2b06      	cmp	r3, #6
 8004588:	d902      	bls.n	8004590 <NVIC_EncodePriority+0x30>
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3b03      	subs	r3, #3
 800458e:	e000      	b.n	8004592 <NVIC_EncodePriority+0x32>
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43da      	mvns	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	401a      	ands	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fa01 f303 	lsl.w	r3, r1, r3
 80045b2:	43d9      	mvns	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b8:	4313      	orrs	r3, r2
         );
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3724      	adds	r7, #36	; 0x24
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff ff4c 	bl	800446c <__NVIC_SetPriorityGrouping>
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045ee:	f7ff ff61 	bl	80044b4 <__NVIC_GetPriorityGrouping>
 80045f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	6978      	ldr	r0, [r7, #20]
 80045fa:	f7ff ffb1 	bl	8004560 <NVIC_EncodePriority>
 80045fe:	4602      	mov	r2, r0
 8004600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004604:	4611      	mov	r1, r2
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff ff80 	bl	800450c <__NVIC_SetPriority>
}
 800460c:	bf00      	nop
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800461e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff ff54 	bl	80044d0 <__NVIC_EnableIRQ>
}
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800463c:	f7fe fde4 	bl	8003208 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e099      	b.n	8004780 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800466c:	e00f      	b.n	800468e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800466e:	f7fe fdcb 	bl	8003208 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b05      	cmp	r3, #5
 800467a:	d908      	bls.n	800468e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2203      	movs	r2, #3
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e078      	b.n	8004780 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e8      	bne.n	800466e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4b38      	ldr	r3, [pc, #224]	; (8004788 <HAL_DMA_Init+0x158>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d107      	bne.n	80046f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	4313      	orrs	r3, r2
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0307 	bic.w	r3, r3, #7
 800470e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b04      	cmp	r3, #4
 8004720:	d117      	bne.n	8004752 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00e      	beq.n	8004752 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fa77 	bl	8004c28 <DMA_CheckFifoParam>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2240      	movs	r2, #64	; 0x40
 8004744:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800474e:	2301      	movs	r3, #1
 8004750:	e016      	b.n	8004780 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa2e 	bl	8004bbc <DMA_CalcBaseAndBitshift>
 8004760:	4603      	mov	r3, r0
 8004762:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004768:	223f      	movs	r2, #63	; 0x3f
 800476a:	409a      	lsls	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	e010803f 	.word	0xe010803f

0800478c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_DMA_Start_IT+0x26>
 80047ae:	2302      	movs	r3, #2
 80047b0:	e048      	b.n	8004844 <HAL_DMA_Start_IT+0xb8>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d137      	bne.n	8004836 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f9c0 	bl	8004b60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	223f      	movs	r2, #63	; 0x3f
 80047e6:	409a      	lsls	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0216 	orr.w	r2, r2, #22
 80047fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800480a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e005      	b.n	8004842 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800483e:	2302      	movs	r3, #2
 8004840:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004842:	7dfb      	ldrb	r3, [r7, #23]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004858:	4b92      	ldr	r3, [pc, #584]	; (8004aa4 <HAL_DMA_IRQHandler+0x258>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a92      	ldr	r2, [pc, #584]	; (8004aa8 <HAL_DMA_IRQHandler+0x25c>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	0a9b      	lsrs	r3, r3, #10
 8004864:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004876:	2208      	movs	r2, #8
 8004878:	409a      	lsls	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01a      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0204 	bic.w	r2, r2, #4
 800489e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	2208      	movs	r2, #8
 80048a6:	409a      	lsls	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f043 0201 	orr.w	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048bc:	2201      	movs	r2, #1
 80048be:	409a      	lsls	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d012      	beq.n	80048ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	2201      	movs	r2, #1
 80048dc:	409a      	lsls	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	f043 0202 	orr.w	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f2:	2204      	movs	r2, #4
 80048f4:	409a      	lsls	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d012      	beq.n	8004924 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	2204      	movs	r2, #4
 8004912:	409a      	lsls	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f043 0204 	orr.w	r2, r3, #4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004928:	2210      	movs	r2, #16
 800492a:	409a      	lsls	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d043      	beq.n	80049bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d03c      	beq.n	80049bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004946:	2210      	movs	r2, #16
 8004948:	409a      	lsls	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d018      	beq.n	800498e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d024      	beq.n	80049bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	4798      	blx	r3
 800497a:	e01f      	b.n	80049bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01b      	beq.n	80049bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
 800498c:	e016      	b.n	80049bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d107      	bne.n	80049ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0208 	bic.w	r2, r2, #8
 80049aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	2220      	movs	r2, #32
 80049c2:	409a      	lsls	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 808e 	beq.w	8004aea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8086 	beq.w	8004aea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	2220      	movs	r2, #32
 80049e4:	409a      	lsls	r2, r3
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d136      	bne.n	8004a64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0216 	bic.w	r2, r2, #22
 8004a04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <HAL_DMA_IRQHandler+0x1da>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0208 	bic.w	r2, r2, #8
 8004a34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3a:	223f      	movs	r2, #63	; 0x3f
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d07d      	beq.n	8004b56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
        }
        return;
 8004a62:	e078      	b.n	8004b56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01c      	beq.n	8004aac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d108      	bne.n	8004a92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d030      	beq.n	8004aea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
 8004a90:	e02b      	b.n	8004aea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d027      	beq.n	8004aea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
 8004aa2:	e022      	b.n	8004aea <HAL_DMA_IRQHandler+0x29e>
 8004aa4:	20000040 	.word	0x20000040
 8004aa8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10f      	bne.n	8004ada <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0210 	bic.w	r2, r2, #16
 8004ac8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d032      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d022      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2205      	movs	r2, #5
 8004b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d307      	bcc.n	8004b32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f2      	bne.n	8004b16 <HAL_DMA_IRQHandler+0x2ca>
 8004b30:	e000      	b.n	8004b34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004b32:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4798      	blx	r3
 8004b54:	e000      	b.n	8004b58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b56:	bf00      	nop
    }
  }
}
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop

08004b60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d108      	bne.n	8004ba0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b9e:	e007      	b.n	8004bb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	3b10      	subs	r3, #16
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <DMA_CalcBaseAndBitshift+0x60>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bd6:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <DMA_CalcBaseAndBitshift+0x64>)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d908      	bls.n	8004bfc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <DMA_CalcBaseAndBitshift+0x68>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	1d1a      	adds	r2, r3, #4
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	659a      	str	r2, [r3, #88]	; 0x58
 8004bfa:	e006      	b.n	8004c0a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <DMA_CalcBaseAndBitshift+0x68>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	aaaaaaab 	.word	0xaaaaaaab
 8004c20:	0800b674 	.word	0x0800b674
 8004c24:	fffffc00 	.word	0xfffffc00

08004c28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d11f      	bne.n	8004c82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d855      	bhi.n	8004cf4 <DMA_CheckFifoParam+0xcc>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <DMA_CheckFifoParam+0x28>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c61 	.word	0x08004c61
 8004c54:	08004c73 	.word	0x08004c73
 8004c58:	08004c61 	.word	0x08004c61
 8004c5c:	08004cf5 	.word	0x08004cf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d045      	beq.n	8004cf8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c70:	e042      	b.n	8004cf8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c7a:	d13f      	bne.n	8004cfc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c80:	e03c      	b.n	8004cfc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c8a:	d121      	bne.n	8004cd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d836      	bhi.n	8004d00 <DMA_CheckFifoParam+0xd8>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <DMA_CheckFifoParam+0x70>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004caf 	.word	0x08004caf
 8004ca0:	08004ca9 	.word	0x08004ca9
 8004ca4:	08004cc1 	.word	0x08004cc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e02f      	b.n	8004d0e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d024      	beq.n	8004d04 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cbe:	e021      	b.n	8004d04 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cc8:	d11e      	bne.n	8004d08 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cce:	e01b      	b.n	8004d08 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d902      	bls.n	8004cdc <DMA_CheckFifoParam+0xb4>
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d003      	beq.n	8004ce2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cda:	e018      	b.n	8004d0e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce0:	e015      	b.n	8004d0e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00e      	beq.n	8004d0c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf2:	e00b      	b.n	8004d0c <DMA_CheckFifoParam+0xe4>
      break;
 8004cf4:	bf00      	nop
 8004cf6:	e00a      	b.n	8004d0e <DMA_CheckFifoParam+0xe6>
      break;
 8004cf8:	bf00      	nop
 8004cfa:	e008      	b.n	8004d0e <DMA_CheckFifoParam+0xe6>
      break;
 8004cfc:	bf00      	nop
 8004cfe:	e006      	b.n	8004d0e <DMA_CheckFifoParam+0xe6>
      break;
 8004d00:	bf00      	nop
 8004d02:	e004      	b.n	8004d0e <DMA_CheckFifoParam+0xe6>
      break;
 8004d04:	bf00      	nop
 8004d06:	e002      	b.n	8004d0e <DMA_CheckFifoParam+0xe6>
      break;   
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <DMA_CheckFifoParam+0xe6>
      break;
 8004d0c:	bf00      	nop
    }
  } 
  
  return status; 
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b089      	sub	sp, #36	; 0x24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e175      	b.n	8005028 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	f040 8164 	bne.w	8005022 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d00b      	beq.n	8004d7a <HAL_GPIO_Init+0x5e>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d007      	beq.n	8004d7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d6e:	2b11      	cmp	r3, #17
 8004d70:	d003      	beq.n	8004d7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b12      	cmp	r3, #18
 8004d78:	d130      	bne.n	8004ddc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	2203      	movs	r2, #3
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004db0:	2201      	movs	r2, #1
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f003 0201 	and.w	r2, r3, #1
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	2203      	movs	r2, #3
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d003      	beq.n	8004e1c <HAL_GPIO_Init+0x100>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b12      	cmp	r3, #18
 8004e1a:	d123      	bne.n	8004e64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	08da      	lsrs	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3208      	adds	r2, #8
 8004e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	220f      	movs	r2, #15
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	08da      	lsrs	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3208      	adds	r2, #8
 8004e5e:	69b9      	ldr	r1, [r7, #24]
 8004e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	2203      	movs	r2, #3
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80be 	beq.w	8005022 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea6:	4b65      	ldr	r3, [pc, #404]	; (800503c <HAL_GPIO_Init+0x320>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	4a64      	ldr	r2, [pc, #400]	; (800503c <HAL_GPIO_Init+0x320>)
 8004eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb2:	4b62      	ldr	r3, [pc, #392]	; (800503c <HAL_GPIO_Init+0x320>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ebe:	4a60      	ldr	r2, [pc, #384]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	220f      	movs	r2, #15
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a57      	ldr	r2, [pc, #348]	; (8005044 <HAL_GPIO_Init+0x328>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d037      	beq.n	8004f5a <HAL_GPIO_Init+0x23e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a56      	ldr	r2, [pc, #344]	; (8005048 <HAL_GPIO_Init+0x32c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d031      	beq.n	8004f56 <HAL_GPIO_Init+0x23a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a55      	ldr	r2, [pc, #340]	; (800504c <HAL_GPIO_Init+0x330>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d02b      	beq.n	8004f52 <HAL_GPIO_Init+0x236>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a54      	ldr	r2, [pc, #336]	; (8005050 <HAL_GPIO_Init+0x334>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d025      	beq.n	8004f4e <HAL_GPIO_Init+0x232>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a53      	ldr	r2, [pc, #332]	; (8005054 <HAL_GPIO_Init+0x338>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01f      	beq.n	8004f4a <HAL_GPIO_Init+0x22e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a52      	ldr	r2, [pc, #328]	; (8005058 <HAL_GPIO_Init+0x33c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d019      	beq.n	8004f46 <HAL_GPIO_Init+0x22a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a51      	ldr	r2, [pc, #324]	; (800505c <HAL_GPIO_Init+0x340>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_GPIO_Init+0x226>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a50      	ldr	r2, [pc, #320]	; (8005060 <HAL_GPIO_Init+0x344>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00d      	beq.n	8004f3e <HAL_GPIO_Init+0x222>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a4f      	ldr	r2, [pc, #316]	; (8005064 <HAL_GPIO_Init+0x348>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d007      	beq.n	8004f3a <HAL_GPIO_Init+0x21e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a4e      	ldr	r2, [pc, #312]	; (8005068 <HAL_GPIO_Init+0x34c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <HAL_GPIO_Init+0x21a>
 8004f32:	2309      	movs	r3, #9
 8004f34:	e012      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f36:	230a      	movs	r3, #10
 8004f38:	e010      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	e00e      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f3e:	2307      	movs	r3, #7
 8004f40:	e00c      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f42:	2306      	movs	r3, #6
 8004f44:	e00a      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f46:	2305      	movs	r3, #5
 8004f48:	e008      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	e006      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e004      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e002      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_GPIO_Init+0x240>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	f002 0203 	and.w	r2, r2, #3
 8004f62:	0092      	lsls	r2, r2, #2
 8004f64:	4093      	lsls	r3, r2
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f6c:	4934      	ldr	r1, [pc, #208]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	3302      	adds	r3, #2
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f7a:	4b3c      	ldr	r3, [pc, #240]	; (800506c <HAL_GPIO_Init+0x350>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f9e:	4a33      	ldr	r2, [pc, #204]	; (800506c <HAL_GPIO_Init+0x350>)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fa4:	4b31      	ldr	r3, [pc, #196]	; (800506c <HAL_GPIO_Init+0x350>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fc8:	4a28      	ldr	r2, [pc, #160]	; (800506c <HAL_GPIO_Init+0x350>)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fce:	4b27      	ldr	r3, [pc, #156]	; (800506c <HAL_GPIO_Init+0x350>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	; (800506c <HAL_GPIO_Init+0x350>)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ff8:	4b1c      	ldr	r3, [pc, #112]	; (800506c <HAL_GPIO_Init+0x350>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800501c:	4a13      	ldr	r2, [pc, #76]	; (800506c <HAL_GPIO_Init+0x350>)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3301      	adds	r3, #1
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b0f      	cmp	r3, #15
 800502c:	f67f ae86 	bls.w	8004d3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005030:	bf00      	nop
 8005032:	3724      	adds	r7, #36	; 0x24
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40023800 	.word	0x40023800
 8005040:	40013800 	.word	0x40013800
 8005044:	40020000 	.word	0x40020000
 8005048:	40020400 	.word	0x40020400
 800504c:	40020800 	.word	0x40020800
 8005050:	40020c00 	.word	0x40020c00
 8005054:	40021000 	.word	0x40021000
 8005058:	40021400 	.word	0x40021400
 800505c:	40021800 	.word	0x40021800
 8005060:	40021c00 	.word	0x40021c00
 8005064:	40022000 	.word	0x40022000
 8005068:	40022400 	.word	0x40022400
 800506c:	40013c00 	.word	0x40013c00

08005070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	887b      	ldrh	r3, [r7, #2]
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
 800508c:	e001      	b.n	8005092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	807b      	strh	r3, [r7, #2]
 80050ac:	4613      	mov	r3, r2
 80050ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050b0:	787b      	ldrb	r3, [r7, #1]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050b6:	887a      	ldrh	r2, [r7, #2]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80050bc:	e003      	b.n	80050c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80050be:	887b      	ldrh	r3, [r7, #2]
 80050c0:	041a      	lsls	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	619a      	str	r2, [r3, #24]
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050ea:	4a05      	ldr	r2, [pc, #20]	; (8005100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f806 	bl	8005104 <HAL_GPIO_EXTI_Callback>
  }
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40013c00 	.word	0x40013c00

08005104 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005124:	2300      	movs	r3, #0
 8005126:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e29b      	b.n	800566a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8087 	beq.w	800524e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005140:	4b96      	ldr	r3, [pc, #600]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	2b04      	cmp	r3, #4
 800514a:	d00c      	beq.n	8005166 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800514c:	4b93      	ldr	r3, [pc, #588]	; (800539c <HAL_RCC_OscConfig+0x280>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 030c 	and.w	r3, r3, #12
 8005154:	2b08      	cmp	r3, #8
 8005156:	d112      	bne.n	800517e <HAL_RCC_OscConfig+0x62>
 8005158:	4b90      	ldr	r3, [pc, #576]	; (800539c <HAL_RCC_OscConfig+0x280>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005164:	d10b      	bne.n	800517e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005166:	4b8d      	ldr	r3, [pc, #564]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d06c      	beq.n	800524c <HAL_RCC_OscConfig+0x130>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d168      	bne.n	800524c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e275      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005186:	d106      	bne.n	8005196 <HAL_RCC_OscConfig+0x7a>
 8005188:	4b84      	ldr	r3, [pc, #528]	; (800539c <HAL_RCC_OscConfig+0x280>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a83      	ldr	r2, [pc, #524]	; (800539c <HAL_RCC_OscConfig+0x280>)
 800518e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e02e      	b.n	80051f4 <HAL_RCC_OscConfig+0xd8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x9c>
 800519e:	4b7f      	ldr	r3, [pc, #508]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a7e      	ldr	r2, [pc, #504]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b7c      	ldr	r3, [pc, #496]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a7b      	ldr	r2, [pc, #492]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e01d      	b.n	80051f4 <HAL_RCC_OscConfig+0xd8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051c0:	d10c      	bne.n	80051dc <HAL_RCC_OscConfig+0xc0>
 80051c2:	4b76      	ldr	r3, [pc, #472]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a75      	ldr	r2, [pc, #468]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	4b73      	ldr	r3, [pc, #460]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a72      	ldr	r2, [pc, #456]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e00b      	b.n	80051f4 <HAL_RCC_OscConfig+0xd8>
 80051dc:	4b6f      	ldr	r3, [pc, #444]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a6e      	ldr	r2, [pc, #440]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4b6c      	ldr	r3, [pc, #432]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a6b      	ldr	r2, [pc, #428]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80051ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d013      	beq.n	8005224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fe f804 	bl	8003208 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005204:	f7fe f800 	bl	8003208 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	; 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e229      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	4b61      	ldr	r3, [pc, #388]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f0      	beq.n	8005204 <HAL_RCC_OscConfig+0xe8>
 8005222:	e014      	b.n	800524e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fd fff0 	bl	8003208 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800522c:	f7fd ffec 	bl	8003208 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	; 0x64
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e215      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523e:	4b57      	ldr	r3, [pc, #348]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x110>
 800524a:	e000      	b.n	800524e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d069      	beq.n	800532e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800525a:	4b50      	ldr	r3, [pc, #320]	; (800539c <HAL_RCC_OscConfig+0x280>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005266:	4b4d      	ldr	r3, [pc, #308]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	2b08      	cmp	r3, #8
 8005270:	d11c      	bne.n	80052ac <HAL_RCC_OscConfig+0x190>
 8005272:	4b4a      	ldr	r3, [pc, #296]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d116      	bne.n	80052ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800527e:	4b47      	ldr	r3, [pc, #284]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_RCC_OscConfig+0x17a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d001      	beq.n	8005296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e1e9      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005296:	4b41      	ldr	r3, [pc, #260]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	493d      	ldr	r1, [pc, #244]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052aa:	e040      	b.n	800532e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d023      	beq.n	80052fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b4:	4b39      	ldr	r3, [pc, #228]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a38      	ldr	r2, [pc, #224]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fd ffa2 	bl	8003208 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c8:	f7fd ff9e 	bl	8003208 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e1c7      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052da:	4b30      	ldr	r3, [pc, #192]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e6:	4b2d      	ldr	r3, [pc, #180]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4929      	ldr	r1, [pc, #164]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]
 80052fa:	e018      	b.n	800532e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052fc:	4b27      	ldr	r3, [pc, #156]	; (800539c <HAL_RCC_OscConfig+0x280>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a26      	ldr	r2, [pc, #152]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fd ff7e 	bl	8003208 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005310:	f7fd ff7a 	bl	8003208 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e1a3      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005322:	4b1e      	ldr	r3, [pc, #120]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d038      	beq.n	80053ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d019      	beq.n	8005376 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005342:	4b16      	ldr	r3, [pc, #88]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005346:	4a15      	ldr	r2, [pc, #84]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534e:	f7fd ff5b 	bl	8003208 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005356:	f7fd ff57 	bl	8003208 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e180      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005368:	4b0c      	ldr	r3, [pc, #48]	; (800539c <HAL_RCC_OscConfig+0x280>)
 800536a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x23a>
 8005374:	e01a      	b.n	80053ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <HAL_RCC_OscConfig+0x280>)
 8005378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537a:	4a08      	ldr	r2, [pc, #32]	; (800539c <HAL_RCC_OscConfig+0x280>)
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fd ff41 	bl	8003208 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005388:	e00a      	b.n	80053a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538a:	f7fd ff3d 	bl	8003208 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d903      	bls.n	80053a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e166      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
 800539c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a0:	4b92      	ldr	r3, [pc, #584]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80053a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1ee      	bne.n	800538a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80a4 	beq.w	8005502 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ba:	4b8c      	ldr	r3, [pc, #560]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10d      	bne.n	80053e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c6:	4b89      	ldr	r3, [pc, #548]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	4a88      	ldr	r2, [pc, #544]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80053cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d0:	6413      	str	r3, [r2, #64]	; 0x40
 80053d2:	4b86      	ldr	r3, [pc, #536]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053da:	60bb      	str	r3, [r7, #8]
 80053dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053de:	2301      	movs	r3, #1
 80053e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e2:	4b83      	ldr	r3, [pc, #524]	; (80055f0 <HAL_RCC_OscConfig+0x4d4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d118      	bne.n	8005420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053ee:	4b80      	ldr	r3, [pc, #512]	; (80055f0 <HAL_RCC_OscConfig+0x4d4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a7f      	ldr	r2, [pc, #508]	; (80055f0 <HAL_RCC_OscConfig+0x4d4>)
 80053f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053fa:	f7fd ff05 	bl	8003208 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005402:	f7fd ff01 	bl	8003208 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b64      	cmp	r3, #100	; 0x64
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e12a      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005414:	4b76      	ldr	r3, [pc, #472]	; (80055f0 <HAL_RCC_OscConfig+0x4d4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d106      	bne.n	8005436 <HAL_RCC_OscConfig+0x31a>
 8005428:	4b70      	ldr	r3, [pc, #448]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	4a6f      	ldr	r2, [pc, #444]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	6713      	str	r3, [r2, #112]	; 0x70
 8005434:	e02d      	b.n	8005492 <HAL_RCC_OscConfig+0x376>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10c      	bne.n	8005458 <HAL_RCC_OscConfig+0x33c>
 800543e:	4b6b      	ldr	r3, [pc, #428]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	4a6a      	ldr	r2, [pc, #424]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	6713      	str	r3, [r2, #112]	; 0x70
 800544a:	4b68      	ldr	r3, [pc, #416]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	4a67      	ldr	r2, [pc, #412]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005450:	f023 0304 	bic.w	r3, r3, #4
 8005454:	6713      	str	r3, [r2, #112]	; 0x70
 8005456:	e01c      	b.n	8005492 <HAL_RCC_OscConfig+0x376>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b05      	cmp	r3, #5
 800545e:	d10c      	bne.n	800547a <HAL_RCC_OscConfig+0x35e>
 8005460:	4b62      	ldr	r3, [pc, #392]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	4a61      	ldr	r2, [pc, #388]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005466:	f043 0304 	orr.w	r3, r3, #4
 800546a:	6713      	str	r3, [r2, #112]	; 0x70
 800546c:	4b5f      	ldr	r3, [pc, #380]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005470:	4a5e      	ldr	r2, [pc, #376]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6713      	str	r3, [r2, #112]	; 0x70
 8005478:	e00b      	b.n	8005492 <HAL_RCC_OscConfig+0x376>
 800547a:	4b5c      	ldr	r3, [pc, #368]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	4a5b      	ldr	r2, [pc, #364]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	6713      	str	r3, [r2, #112]	; 0x70
 8005486:	4b59      	ldr	r3, [pc, #356]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548a:	4a58      	ldr	r2, [pc, #352]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 800548c:	f023 0304 	bic.w	r3, r3, #4
 8005490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d015      	beq.n	80054c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549a:	f7fd feb5 	bl	8003208 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fd feb1 	bl	8003208 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e0d8      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b8:	4b4c      	ldr	r3, [pc, #304]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0ee      	beq.n	80054a2 <HAL_RCC_OscConfig+0x386>
 80054c4:	e014      	b.n	80054f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c6:	f7fd fe9f 	bl	8003208 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054cc:	e00a      	b.n	80054e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ce:	f7fd fe9b 	bl	8003208 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054dc:	4293      	cmp	r3, r2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e0c2      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e4:	4b41      	ldr	r3, [pc, #260]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ee      	bne.n	80054ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d105      	bne.n	8005502 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f6:	4b3d      	ldr	r3, [pc, #244]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	4a3c      	ldr	r2, [pc, #240]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80054fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80ae 	beq.w	8005668 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800550c:	4b37      	ldr	r3, [pc, #220]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 030c 	and.w	r3, r3, #12
 8005514:	2b08      	cmp	r3, #8
 8005516:	d06d      	beq.n	80055f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d14b      	bne.n	80055b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005520:	4b32      	ldr	r3, [pc, #200]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a31      	ldr	r2, [pc, #196]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fd fe6c 	bl	8003208 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005534:	f7fd fe68 	bl	8003208 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e091      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005546:	4b29      	ldr	r3, [pc, #164]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	019b      	lsls	r3, r3, #6
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	085b      	lsrs	r3, r3, #1
 800556a:	3b01      	subs	r3, #1
 800556c:	041b      	lsls	r3, r3, #16
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	061b      	lsls	r3, r3, #24
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	071b      	lsls	r3, r3, #28
 800557e:	491b      	ldr	r1, [pc, #108]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 800558a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800558e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fd fe3a 	bl	8003208 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005598:	f7fd fe36 	bl	8003208 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e05f      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055aa:	4b10      	ldr	r3, [pc, #64]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0x47c>
 80055b6:	e057      	b.n	8005668 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a0b      	ldr	r2, [pc, #44]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80055be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fd fe20 	bl	8003208 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055cc:	f7fd fe1c 	bl	8003208 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e045      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055de:	4b03      	ldr	r3, [pc, #12]	; (80055ec <HAL_RCC_OscConfig+0x4d0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0x4b0>
 80055ea:	e03d      	b.n	8005668 <HAL_RCC_OscConfig+0x54c>
 80055ec:	40023800 	.word	0x40023800
 80055f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80055f4:	4b1f      	ldr	r3, [pc, #124]	; (8005674 <HAL_RCC_OscConfig+0x558>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d030      	beq.n	8005664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800560c:	429a      	cmp	r2, r3
 800560e:	d129      	bne.n	8005664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800561a:	429a      	cmp	r2, r3
 800561c:	d122      	bne.n	8005664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005624:	4013      	ands	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800562a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800562c:	4293      	cmp	r3, r2
 800562e:	d119      	bne.n	8005664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	3b01      	subs	r3, #1
 800563e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d10f      	bne.n	8005664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d107      	bne.n	8005664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005660:	429a      	cmp	r2, r3
 8005662:	d001      	beq.n	8005668 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40023800 	.word	0x40023800

08005678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0d0      	b.n	8005832 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005690:	4b6a      	ldr	r3, [pc, #424]	; (800583c <HAL_RCC_ClockConfig+0x1c4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d910      	bls.n	80056c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569e:	4b67      	ldr	r3, [pc, #412]	; (800583c <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f023 020f 	bic.w	r2, r3, #15
 80056a6:	4965      	ldr	r1, [pc, #404]	; (800583c <HAL_RCC_ClockConfig+0x1c4>)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ae:	4b63      	ldr	r3, [pc, #396]	; (800583c <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d001      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0b8      	b.n	8005832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d020      	beq.n	800570e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056d8:	4b59      	ldr	r3, [pc, #356]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	4a58      	ldr	r2, [pc, #352]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 80056de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f0:	4b53      	ldr	r3, [pc, #332]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	4a52      	ldr	r2, [pc, #328]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 80056f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056fc:	4b50      	ldr	r3, [pc, #320]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	494d      	ldr	r1, [pc, #308]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 800570a:	4313      	orrs	r3, r2
 800570c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d040      	beq.n	800579c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d107      	bne.n	8005732 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005722:	4b47      	ldr	r3, [pc, #284]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d115      	bne.n	800575a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e07f      	b.n	8005832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d107      	bne.n	800574a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573a:	4b41      	ldr	r3, [pc, #260]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e073      	b.n	8005832 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574a:	4b3d      	ldr	r3, [pc, #244]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e06b      	b.n	8005832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800575a:	4b39      	ldr	r3, [pc, #228]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f023 0203 	bic.w	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4936      	ldr	r1, [pc, #216]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 8005768:	4313      	orrs	r3, r2
 800576a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576c:	f7fd fd4c 	bl	8003208 <HAL_GetTick>
 8005770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005772:	e00a      	b.n	800578a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005774:	f7fd fd48 	bl	8003208 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e053      	b.n	8005832 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578a:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 020c 	and.w	r2, r3, #12
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	429a      	cmp	r2, r3
 800579a:	d1eb      	bne.n	8005774 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800579c:	4b27      	ldr	r3, [pc, #156]	; (800583c <HAL_RCC_ClockConfig+0x1c4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d210      	bcs.n	80057cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b24      	ldr	r3, [pc, #144]	; (800583c <HAL_RCC_ClockConfig+0x1c4>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 020f 	bic.w	r2, r3, #15
 80057b2:	4922      	ldr	r1, [pc, #136]	; (800583c <HAL_RCC_ClockConfig+0x1c4>)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b20      	ldr	r3, [pc, #128]	; (800583c <HAL_RCC_ClockConfig+0x1c4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e032      	b.n	8005832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d008      	beq.n	80057ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057d8:	4b19      	ldr	r3, [pc, #100]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4916      	ldr	r1, [pc, #88]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	490e      	ldr	r1, [pc, #56]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 8005806:	4313      	orrs	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800580a:	f000 f821 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 800580e:	4601      	mov	r1, r0
 8005810:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <HAL_RCC_ClockConfig+0x1cc>)
 800581c:	5cd3      	ldrb	r3, [r2, r3]
 800581e:	fa21 f303 	lsr.w	r3, r1, r3
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <HAL_RCC_ClockConfig+0x1d0>)
 8005824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <HAL_RCC_ClockConfig+0x1d4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f7fd fb2a 	bl	8002e84 <HAL_InitTick>

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40023c00 	.word	0x40023c00
 8005840:	40023800 	.word	0x40023800
 8005844:	0800b65c 	.word	0x0800b65c
 8005848:	20000040 	.word	0x20000040
 800584c:	20000044 	.word	0x20000044

08005850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	2300      	movs	r3, #0
 8005860:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005866:	4b50      	ldr	r3, [pc, #320]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b04      	cmp	r3, #4
 8005870:	d007      	beq.n	8005882 <HAL_RCC_GetSysClockFreq+0x32>
 8005872:	2b08      	cmp	r3, #8
 8005874:	d008      	beq.n	8005888 <HAL_RCC_GetSysClockFreq+0x38>
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 808d 	bne.w	8005996 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800587c:	4b4b      	ldr	r3, [pc, #300]	; (80059ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800587e:	60bb      	str	r3, [r7, #8]
      break;
 8005880:	e08c      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005882:	4b4b      	ldr	r3, [pc, #300]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005884:	60bb      	str	r3, [r7, #8]
      break;
 8005886:	e089      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005888:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005890:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005892:	4b45      	ldr	r3, [pc, #276]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d023      	beq.n	80058e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800589e:	4b42      	ldr	r3, [pc, #264]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	099b      	lsrs	r3, r3, #6
 80058a4:	f04f 0400 	mov.w	r4, #0
 80058a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	ea03 0501 	and.w	r5, r3, r1
 80058b4:	ea04 0602 	and.w	r6, r4, r2
 80058b8:	4a3d      	ldr	r2, [pc, #244]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80058ba:	fb02 f106 	mul.w	r1, r2, r6
 80058be:	2200      	movs	r2, #0
 80058c0:	fb02 f205 	mul.w	r2, r2, r5
 80058c4:	440a      	add	r2, r1
 80058c6:	493a      	ldr	r1, [pc, #232]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80058c8:	fba5 0101 	umull	r0, r1, r5, r1
 80058cc:	1853      	adds	r3, r2, r1
 80058ce:	4619      	mov	r1, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f04f 0400 	mov.w	r4, #0
 80058d6:	461a      	mov	r2, r3
 80058d8:	4623      	mov	r3, r4
 80058da:	f7fa fd01 	bl	80002e0 <__aeabi_uldivmod>
 80058de:	4603      	mov	r3, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e049      	b.n	800597a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058e6:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	099b      	lsrs	r3, r3, #6
 80058ec:	f04f 0400 	mov.w	r4, #0
 80058f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	ea03 0501 	and.w	r5, r3, r1
 80058fc:	ea04 0602 	and.w	r6, r4, r2
 8005900:	4629      	mov	r1, r5
 8005902:	4632      	mov	r2, r6
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	f04f 0400 	mov.w	r4, #0
 800590c:	0154      	lsls	r4, r2, #5
 800590e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005912:	014b      	lsls	r3, r1, #5
 8005914:	4619      	mov	r1, r3
 8005916:	4622      	mov	r2, r4
 8005918:	1b49      	subs	r1, r1, r5
 800591a:	eb62 0206 	sbc.w	r2, r2, r6
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	f04f 0400 	mov.w	r4, #0
 8005926:	0194      	lsls	r4, r2, #6
 8005928:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800592c:	018b      	lsls	r3, r1, #6
 800592e:	1a5b      	subs	r3, r3, r1
 8005930:	eb64 0402 	sbc.w	r4, r4, r2
 8005934:	f04f 0100 	mov.w	r1, #0
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	00e2      	lsls	r2, r4, #3
 800593e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005942:	00d9      	lsls	r1, r3, #3
 8005944:	460b      	mov	r3, r1
 8005946:	4614      	mov	r4, r2
 8005948:	195b      	adds	r3, r3, r5
 800594a:	eb44 0406 	adc.w	r4, r4, r6
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	02a2      	lsls	r2, r4, #10
 8005958:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800595c:	0299      	lsls	r1, r3, #10
 800595e:	460b      	mov	r3, r1
 8005960:	4614      	mov	r4, r2
 8005962:	4618      	mov	r0, r3
 8005964:	4621      	mov	r1, r4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f04f 0400 	mov.w	r4, #0
 800596c:	461a      	mov	r2, r3
 800596e:	4623      	mov	r3, r4
 8005970:	f7fa fcb6 	bl	80002e0 <__aeabi_uldivmod>
 8005974:	4603      	mov	r3, r0
 8005976:	460c      	mov	r4, r1
 8005978:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800597a:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	0c1b      	lsrs	r3, r3, #16
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	3301      	adds	r3, #1
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	60bb      	str	r3, [r7, #8]
      break;
 8005994:	e002      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8005998:	60bb      	str	r3, [r7, #8]
      break;
 800599a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800599c:	68bb      	ldr	r3, [r7, #8]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40023800 	.word	0x40023800
 80059ac:	00f42400 	.word	0x00f42400
 80059b0:	017d7840 	.word	0x017d7840

080059b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b8:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	20000040 	.word	0x20000040

080059cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059d0:	f7ff fff0 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80059d4:	4601      	mov	r1, r0
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	0a9b      	lsrs	r3, r3, #10
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	4a03      	ldr	r2, [pc, #12]	; (80059f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059e2:	5cd3      	ldrb	r3, [r2, r3]
 80059e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40023800 	.word	0x40023800
 80059f0:	0800b66c 	.word	0x0800b66c

080059f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059f8:	f7ff ffdc 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80059fc:	4601      	mov	r1, r0
 80059fe:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	0b5b      	lsrs	r3, r3, #13
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	4a03      	ldr	r2, [pc, #12]	; (8005a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40023800 	.word	0x40023800
 8005a18:	0800b66c 	.word	0x0800b66c

08005a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	220f      	movs	r2, #15
 8005a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a2c:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <HAL_RCC_GetClockConfig+0x5c>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f003 0203 	and.w	r2, r3, #3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <HAL_RCC_GetClockConfig+0x5c>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a44:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <HAL_RCC_GetClockConfig+0x5c>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005a50:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <HAL_RCC_GetClockConfig+0x5c>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	08db      	lsrs	r3, r3, #3
 8005a56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <HAL_RCC_GetClockConfig+0x60>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 020f 	and.w	r2, r3, #15
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	601a      	str	r2, [r3, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	40023c00 	.word	0x40023c00

08005a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d012      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005aa8:	4b69      	ldr	r3, [pc, #420]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	4a68      	ldr	r2, [pc, #416]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005ab2:	6093      	str	r3, [r2, #8]
 8005ab4:	4b66      	ldr	r3, [pc, #408]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	4964      	ldr	r1, [pc, #400]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005aca:	2301      	movs	r3, #1
 8005acc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d017      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ada:	4b5d      	ldr	r3, [pc, #372]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	4959      	ldr	r1, [pc, #356]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af8:	d101      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005afa:	2301      	movs	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005b06:	2301      	movs	r3, #1
 8005b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d017      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b16:	4b4e      	ldr	r3, [pc, #312]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	494a      	ldr	r1, [pc, #296]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b34:	d101      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b36:	2301      	movs	r3, #1
 8005b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b42:	2301      	movs	r3, #1
 8005b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 808b 	beq.w	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b64:	4b3a      	ldr	r3, [pc, #232]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	4a39      	ldr	r2, [pc, #228]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8005b70:	4b37      	ldr	r3, [pc, #220]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b7c:	4b35      	ldr	r3, [pc, #212]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a34      	ldr	r2, [pc, #208]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b88:	f7fd fb3e 	bl	8003208 <HAL_GetTick>
 8005b8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b90:	f7fd fb3a 	bl	8003208 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b64      	cmp	r3, #100	; 0x64
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e356      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ba2:	4b2c      	ldr	r3, [pc, #176]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f0      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bae:	4b28      	ldr	r3, [pc, #160]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d035      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d02e      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bcc:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bd6:	4b1e      	ldr	r3, [pc, #120]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	4a1d      	ldr	r2, [pc, #116]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005be2:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be6:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005bee:	4a18      	ldr	r2, [pc, #96]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bf4:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d114      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fd fb02 	bl	8003208 <HAL_GetTick>
 8005c04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c06:	e00a      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c08:	f7fd fafe 	bl	8003208 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e318      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0ee      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c36:	d111      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c44:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c46:	400b      	ands	r3, r1
 8005c48:	4901      	ldr	r1, [pc, #4]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	608b      	str	r3, [r1, #8]
 8005c4e:	e00b      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40007000 	.word	0x40007000
 8005c58:	0ffffcff 	.word	0x0ffffcff
 8005c5c:	4bb1      	ldr	r3, [pc, #708]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4ab0      	ldr	r2, [pc, #704]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c66:	6093      	str	r3, [r2, #8]
 8005c68:	4bae      	ldr	r3, [pc, #696]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c74:	49ab      	ldr	r1, [pc, #684]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c86:	4ba7      	ldr	r3, [pc, #668]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c8c:	4aa5      	ldr	r2, [pc, #660]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c96:	4ba3      	ldr	r3, [pc, #652]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	49a0      	ldr	r1, [pc, #640]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cb4:	4b9b      	ldr	r3, [pc, #620]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc2:	4998      	ldr	r1, [pc, #608]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cd6:	4b93      	ldr	r3, [pc, #588]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce4:	498f      	ldr	r1, [pc, #572]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cf8:	4b8a      	ldr	r3, [pc, #552]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d06:	4987      	ldr	r1, [pc, #540]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d1a:	4b82      	ldr	r3, [pc, #520]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d28:	497e      	ldr	r1, [pc, #504]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d3c:	4b79      	ldr	r3, [pc, #484]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d42:	f023 0203 	bic.w	r2, r3, #3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	4976      	ldr	r1, [pc, #472]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d5e:	4b71      	ldr	r3, [pc, #452]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	f023 020c 	bic.w	r2, r3, #12
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6c:	496d      	ldr	r1, [pc, #436]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d80:	4b68      	ldr	r3, [pc, #416]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8e:	4965      	ldr	r1, [pc, #404]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005da2:	4b60      	ldr	r3, [pc, #384]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	495c      	ldr	r1, [pc, #368]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dc4:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd2:	4954      	ldr	r1, [pc, #336]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005de6:	4b4f      	ldr	r3, [pc, #316]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	494b      	ldr	r1, [pc, #300]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e08:	4b46      	ldr	r3, [pc, #280]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e16:	4943      	ldr	r1, [pc, #268]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005e2a:	4b3e      	ldr	r3, [pc, #248]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e38:	493a      	ldr	r1, [pc, #232]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e4c:	4b35      	ldr	r3, [pc, #212]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e5a:	4932      	ldr	r1, [pc, #200]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d011      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e6e:	4b2d      	ldr	r3, [pc, #180]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e7c:	4929      	ldr	r1, [pc, #164]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e8c:	d101      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e9e:	4b21      	ldr	r3, [pc, #132]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eac:	491d      	ldr	r1, [pc, #116]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ec0:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ed0:	4914      	ldr	r1, [pc, #80]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef4:	490b      	ldr	r1, [pc, #44]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00f      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	4902      	ldr	r1, [pc, #8]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8005f20:	e002      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005f22:	bf00      	nop
 8005f24:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f34:	4b80      	ldr	r3, [pc, #512]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f44:	497c      	ldr	r1, [pc, #496]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d005      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f5a:	f040 80d6 	bne.w	800610a <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f5e:	4b76      	ldr	r3, [pc, #472]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a75      	ldr	r2, [pc, #468]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6a:	f7fd f94d 	bl	8003208 <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f70:	e008      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f72:	f7fd f949 	bl	8003208 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b64      	cmp	r3, #100	; 0x64
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e165      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f84:	4b6c      	ldr	r3, [pc, #432]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f0      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d021      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d11d      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fa4:	4b64      	ldr	r3, [pc, #400]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fb2:	4b61      	ldr	r3, [pc, #388]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb8:	0e1b      	lsrs	r3, r3, #24
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	019a      	lsls	r2, r3, #6
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	041b      	lsls	r3, r3, #16
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	061b      	lsls	r3, r3, #24
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	071b      	lsls	r3, r3, #28
 8005fd8:	4957      	ldr	r1, [pc, #348]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d02e      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800600a:	d129      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800600c:	4b4a      	ldr	r3, [pc, #296]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800600e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006012:	0c1b      	lsrs	r3, r3, #16
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800601a:	4b47      	ldr	r3, [pc, #284]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800601c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006020:	0f1b      	lsrs	r3, r3, #28
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	019a      	lsls	r2, r3, #6
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	061b      	lsls	r3, r3, #24
 800603a:	431a      	orrs	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	071b      	lsls	r3, r3, #28
 8006040:	493d      	ldr	r1, [pc, #244]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006048:	4b3b      	ldr	r3, [pc, #236]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800604a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800604e:	f023 021f 	bic.w	r2, r3, #31
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	3b01      	subs	r3, #1
 8006058:	4937      	ldr	r1, [pc, #220]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01d      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800606c:	4b32      	ldr	r3, [pc, #200]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800606e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006072:	0e1b      	lsrs	r3, r3, #24
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800607a:	4b2f      	ldr	r3, [pc, #188]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800607c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006080:	0f1b      	lsrs	r3, r3, #28
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	019a      	lsls	r2, r3, #6
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	041b      	lsls	r3, r3, #16
 8006094:	431a      	orrs	r2, r3
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	431a      	orrs	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	071b      	lsls	r3, r3, #28
 80060a0:	4925      	ldr	r1, [pc, #148]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d011      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	019a      	lsls	r2, r3, #6
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	061b      	lsls	r3, r3, #24
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	071b      	lsls	r3, r3, #28
 80060d0:	4919      	ldr	r1, [pc, #100]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060d8:	4b17      	ldr	r3, [pc, #92]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a16      	ldr	r2, [pc, #88]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80060de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e4:	f7fd f890 	bl	8003208 <HAL_GetTick>
 80060e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060ec:	f7fd f88c 	bl	8003208 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b64      	cmp	r3, #100	; 0x64
 80060f8:	d901      	bls.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e0a8      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060fe:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b01      	cmp	r3, #1
 800610e:	f040 809e 	bne.w	800624e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006112:	4b09      	ldr	r3, [pc, #36]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a08      	ldr	r2, [pc, #32]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800611c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800611e:	f7fd f873 	bl	8003208 <HAL_GetTick>
 8006122:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006124:	e00a      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006126:	f7fd f86f 	bl	8003208 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b64      	cmp	r3, #100	; 0x64
 8006132:	d903      	bls.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e08b      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8006138:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800613c:	4b46      	ldr	r3, [pc, #280]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006148:	d0ed      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006166:	2b00      	cmp	r3, #0
 8006168:	d02e      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d12a      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006172:	4b39      	ldr	r3, [pc, #228]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006180:	4b35      	ldr	r3, [pc, #212]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006186:	0f1b      	lsrs	r3, r3, #28
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	019a      	lsls	r2, r3, #6
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	061b      	lsls	r3, r3, #24
 80061a0:	431a      	orrs	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	071b      	lsls	r3, r3, #28
 80061a6:	492c      	ldr	r1, [pc, #176]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061ae:	4b2a      	ldr	r3, [pc, #168]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	3b01      	subs	r3, #1
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	4925      	ldr	r1, [pc, #148]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d022      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061dc:	d11d      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061de:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	0e1b      	lsrs	r3, r3, #24
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061ec:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	0f1b      	lsrs	r3, r3, #28
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	019a      	lsls	r2, r3, #6
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	041b      	lsls	r3, r3, #16
 8006206:	431a      	orrs	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	061b      	lsls	r3, r3, #24
 800620c:	431a      	orrs	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	071b      	lsls	r3, r3, #28
 8006212:	4911      	ldr	r1, [pc, #68]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800621a:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a0e      	ldr	r2, [pc, #56]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006226:	f7fc ffef 	bl	8003208 <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800622e:	f7fc ffeb 	bl	8003208 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b64      	cmp	r3, #100	; 0x64
 800623a:	d901      	bls.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e007      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800624c:	d1ef      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3720      	adds	r7, #32
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800

0800625c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e01d      	b.n	80062aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f815 	bl	80062b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f000 f986 	bl	80065ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
	...

080062c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <HAL_TIM_Base_Start_IT+0x50>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b06      	cmp	r3, #6
 80062f0:	d00b      	beq.n	800630a <HAL_TIM_Base_Start_IT+0x42>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f8:	d007      	beq.n	800630a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0201 	orr.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	00010007 	.word	0x00010007

0800631c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d122      	bne.n	8006378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b02      	cmp	r3, #2
 800633e:	d11b      	bne.n	8006378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0202 	mvn.w	r2, #2
 8006348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f905 	bl	800656e <HAL_TIM_IC_CaptureCallback>
 8006364:	e005      	b.n	8006372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f8f7 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f908 	bl	8006582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b04      	cmp	r3, #4
 8006384:	d122      	bne.n	80063cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b04      	cmp	r3, #4
 8006392:	d11b      	bne.n	80063cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0204 	mvn.w	r2, #4
 800639c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f8db 	bl	800656e <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f8cd 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f8de 	bl	8006582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d122      	bne.n	8006420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d11b      	bne.n	8006420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0208 	mvn.w	r2, #8
 80063f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2204      	movs	r2, #4
 80063f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f8b1 	bl	800656e <HAL_TIM_IC_CaptureCallback>
 800640c:	e005      	b.n	800641a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8a3 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f8b4 	bl	8006582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b10      	cmp	r3, #16
 800642c:	d122      	bne.n	8006474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0310 	and.w	r3, r3, #16
 8006438:	2b10      	cmp	r3, #16
 800643a:	d11b      	bne.n	8006474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0210 	mvn.w	r2, #16
 8006444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2208      	movs	r2, #8
 800644a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f887 	bl	800656e <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f879 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f88a 	bl	8006582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b01      	cmp	r3, #1
 8006480:	d10e      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b01      	cmp	r3, #1
 800648e:	d107      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0201 	mvn.w	r2, #1
 8006498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fc fcb4 	bl	8002e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064aa:	2b80      	cmp	r3, #128	; 0x80
 80064ac:	d10e      	bne.n	80064cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d107      	bne.n	80064cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f91a 	bl	8006700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064da:	d10e      	bne.n	80064fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e6:	2b80      	cmp	r3, #128	; 0x80
 80064e8:	d107      	bne.n	80064fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f90d 	bl	8006714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d10e      	bne.n	8006526 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d107      	bne.n	8006526 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800651e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f838 	bl	8006596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b20      	cmp	r3, #32
 8006532:	d10e      	bne.n	8006552 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b20      	cmp	r3, #32
 8006540:	d107      	bne.n	8006552 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f06f 0220 	mvn.w	r2, #32
 800654a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f8cd 	bl	80066ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a40      	ldr	r2, [pc, #256]	; (80066c0 <TIM_Base_SetConfig+0x114>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ca:	d00f      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a3d      	ldr	r2, [pc, #244]	; (80066c4 <TIM_Base_SetConfig+0x118>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00b      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a3c      	ldr	r2, [pc, #240]	; (80066c8 <TIM_Base_SetConfig+0x11c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a3b      	ldr	r2, [pc, #236]	; (80066cc <TIM_Base_SetConfig+0x120>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3a      	ldr	r2, [pc, #232]	; (80066d0 <TIM_Base_SetConfig+0x124>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d108      	bne.n	80065fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a2f      	ldr	r2, [pc, #188]	; (80066c0 <TIM_Base_SetConfig+0x114>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d02b      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d027      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2c      	ldr	r2, [pc, #176]	; (80066c4 <TIM_Base_SetConfig+0x118>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d023      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2b      	ldr	r2, [pc, #172]	; (80066c8 <TIM_Base_SetConfig+0x11c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01f      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2a      	ldr	r2, [pc, #168]	; (80066cc <TIM_Base_SetConfig+0x120>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d01b      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a29      	ldr	r2, [pc, #164]	; (80066d0 <TIM_Base_SetConfig+0x124>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d017      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a28      	ldr	r2, [pc, #160]	; (80066d4 <TIM_Base_SetConfig+0x128>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d013      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <TIM_Base_SetConfig+0x12c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00f      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a26      	ldr	r2, [pc, #152]	; (80066dc <TIM_Base_SetConfig+0x130>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00b      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a25      	ldr	r2, [pc, #148]	; (80066e0 <TIM_Base_SetConfig+0x134>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d007      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a24      	ldr	r2, [pc, #144]	; (80066e4 <TIM_Base_SetConfig+0x138>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <TIM_Base_SetConfig+0x13c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d108      	bne.n	8006670 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <TIM_Base_SetConfig+0x114>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_Base_SetConfig+0xf8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a0c      	ldr	r2, [pc, #48]	; (80066d0 <TIM_Base_SetConfig+0x124>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d103      	bne.n	80066ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	615a      	str	r2, [r3, #20]
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40000400 	.word	0x40000400
 80066c8:	40000800 	.word	0x40000800
 80066cc:	40000c00 	.word	0x40000c00
 80066d0:	40010400 	.word	0x40010400
 80066d4:	40014000 	.word	0x40014000
 80066d8:	40014400 	.word	0x40014400
 80066dc:	40014800 	.word	0x40014800
 80066e0:	40001800 	.word	0x40001800
 80066e4:	40001c00 	.word	0x40001c00
 80066e8:	40002000 	.word	0x40002000

080066ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e040      	b.n	80067bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fc fcce 	bl	80030ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2224      	movs	r2, #36	; 0x24
 8006754:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f8be 	bl	80068e8 <UART_SetConfig>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e022      	b.n	80067bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fb5c 	bl	8006e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fbe3 	bl	8006f80 <UART_CheckIdleState>
 80067ba:	4603      	mov	r3, r0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d17f      	bne.n	80068dc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_UART_Transmit+0x24>
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e078      	b.n	80068de <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_UART_Transmit+0x36>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e071      	b.n	80068de <HAL_UART_Transmit+0x11a>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2221      	movs	r2, #33	; 0x21
 800680c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800680e:	f7fc fcfb 	bl	8003208 <HAL_GetTick>
 8006812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	88fa      	ldrh	r2, [r7, #6]
 8006820:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682c:	d108      	bne.n	8006840 <HAL_UART_Transmit+0x7c>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	e003      	b.n	8006848 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006844:	2300      	movs	r3, #0
 8006846:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006850:	e02c      	b.n	80068ac <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2200      	movs	r2, #0
 800685a:	2180      	movs	r1, #128	; 0x80
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fbd4 	bl	800700a <UART_WaitOnFlagUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e038      	b.n	80068de <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10b      	bne.n	800688a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006880:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	3302      	adds	r3, #2
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	e007      	b.n	800689a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	3301      	adds	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1cc      	bne.n	8006852 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2200      	movs	r2, #0
 80068c0:	2140      	movs	r1, #64	; 0x40
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fba1 	bl	800700a <UART_WaitOnFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e005      	b.n	80068de <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2220      	movs	r2, #32
 80068d6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80068dc:	2302      	movs	r3, #2
  }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4bb1      	ldr	r3, [pc, #708]	; (8006bdc <UART_SetConfig+0x2f4>)
 8006918:	4013      	ands	r3, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	6939      	ldr	r1, [r7, #16]
 8006920:	430b      	orrs	r3, r1
 8006922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	430a      	orrs	r2, r1
 800695c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a9f      	ldr	r2, [pc, #636]	; (8006be0 <UART_SetConfig+0x2f8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d121      	bne.n	80069ac <UART_SetConfig+0xc4>
 8006968:	4b9e      	ldr	r3, [pc, #632]	; (8006be4 <UART_SetConfig+0x2fc>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d816      	bhi.n	80069a4 <UART_SetConfig+0xbc>
 8006976:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0x94>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	0800698d 	.word	0x0800698d
 8006980:	08006999 	.word	0x08006999
 8006984:	08006993 	.word	0x08006993
 8006988:	0800699f 	.word	0x0800699f
 800698c:	2301      	movs	r3, #1
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	e151      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006992:	2302      	movs	r3, #2
 8006994:	77fb      	strb	r3, [r7, #31]
 8006996:	e14e      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006998:	2304      	movs	r3, #4
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e14b      	b.n	8006c36 <UART_SetConfig+0x34e>
 800699e:	2308      	movs	r3, #8
 80069a0:	77fb      	strb	r3, [r7, #31]
 80069a2:	e148      	b.n	8006c36 <UART_SetConfig+0x34e>
 80069a4:	2310      	movs	r3, #16
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	bf00      	nop
 80069aa:	e144      	b.n	8006c36 <UART_SetConfig+0x34e>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a8d      	ldr	r2, [pc, #564]	; (8006be8 <UART_SetConfig+0x300>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d134      	bne.n	8006a20 <UART_SetConfig+0x138>
 80069b6:	4b8b      	ldr	r3, [pc, #556]	; (8006be4 <UART_SetConfig+0x2fc>)
 80069b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069bc:	f003 030c 	and.w	r3, r3, #12
 80069c0:	2b0c      	cmp	r3, #12
 80069c2:	d829      	bhi.n	8006a18 <UART_SetConfig+0x130>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0xe4>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	08006a01 	.word	0x08006a01
 80069d0:	08006a19 	.word	0x08006a19
 80069d4:	08006a19 	.word	0x08006a19
 80069d8:	08006a19 	.word	0x08006a19
 80069dc:	08006a0d 	.word	0x08006a0d
 80069e0:	08006a19 	.word	0x08006a19
 80069e4:	08006a19 	.word	0x08006a19
 80069e8:	08006a19 	.word	0x08006a19
 80069ec:	08006a07 	.word	0x08006a07
 80069f0:	08006a19 	.word	0x08006a19
 80069f4:	08006a19 	.word	0x08006a19
 80069f8:	08006a19 	.word	0x08006a19
 80069fc:	08006a13 	.word	0x08006a13
 8006a00:	2300      	movs	r3, #0
 8006a02:	77fb      	strb	r3, [r7, #31]
 8006a04:	e117      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a06:	2302      	movs	r3, #2
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e114      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e111      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a12:	2308      	movs	r3, #8
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e10e      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	bf00      	nop
 8006a1e:	e10a      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a71      	ldr	r2, [pc, #452]	; (8006bec <UART_SetConfig+0x304>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d120      	bne.n	8006a6c <UART_SetConfig+0x184>
 8006a2a:	4b6e      	ldr	r3, [pc, #440]	; (8006be4 <UART_SetConfig+0x2fc>)
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a34:	2b10      	cmp	r3, #16
 8006a36:	d00f      	beq.n	8006a58 <UART_SetConfig+0x170>
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d802      	bhi.n	8006a42 <UART_SetConfig+0x15a>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <UART_SetConfig+0x164>
 8006a40:	e010      	b.n	8006a64 <UART_SetConfig+0x17c>
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d005      	beq.n	8006a52 <UART_SetConfig+0x16a>
 8006a46:	2b30      	cmp	r3, #48	; 0x30
 8006a48:	d009      	beq.n	8006a5e <UART_SetConfig+0x176>
 8006a4a:	e00b      	b.n	8006a64 <UART_SetConfig+0x17c>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e0f1      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a52:	2302      	movs	r3, #2
 8006a54:	77fb      	strb	r3, [r7, #31]
 8006a56:	e0ee      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e0eb      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a5e:	2308      	movs	r3, #8
 8006a60:	77fb      	strb	r3, [r7, #31]
 8006a62:	e0e8      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a64:	2310      	movs	r3, #16
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	bf00      	nop
 8006a6a:	e0e4      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a5f      	ldr	r2, [pc, #380]	; (8006bf0 <UART_SetConfig+0x308>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d120      	bne.n	8006ab8 <UART_SetConfig+0x1d0>
 8006a76:	4b5b      	ldr	r3, [pc, #364]	; (8006be4 <UART_SetConfig+0x2fc>)
 8006a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d00f      	beq.n	8006aa4 <UART_SetConfig+0x1bc>
 8006a84:	2b40      	cmp	r3, #64	; 0x40
 8006a86:	d802      	bhi.n	8006a8e <UART_SetConfig+0x1a6>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <UART_SetConfig+0x1b0>
 8006a8c:	e010      	b.n	8006ab0 <UART_SetConfig+0x1c8>
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d005      	beq.n	8006a9e <UART_SetConfig+0x1b6>
 8006a92:	2bc0      	cmp	r3, #192	; 0xc0
 8006a94:	d009      	beq.n	8006aaa <UART_SetConfig+0x1c2>
 8006a96:	e00b      	b.n	8006ab0 <UART_SetConfig+0x1c8>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	77fb      	strb	r3, [r7, #31]
 8006a9c:	e0cb      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e0c8      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e0c5      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006aaa:	2308      	movs	r3, #8
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e0c2      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	bf00      	nop
 8006ab6:	e0be      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a4d      	ldr	r2, [pc, #308]	; (8006bf4 <UART_SetConfig+0x30c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d124      	bne.n	8006b0c <UART_SetConfig+0x224>
 8006ac2:	4b48      	ldr	r3, [pc, #288]	; (8006be4 <UART_SetConfig+0x2fc>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad0:	d012      	beq.n	8006af8 <UART_SetConfig+0x210>
 8006ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad6:	d802      	bhi.n	8006ade <UART_SetConfig+0x1f6>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <UART_SetConfig+0x204>
 8006adc:	e012      	b.n	8006b04 <UART_SetConfig+0x21c>
 8006ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae2:	d006      	beq.n	8006af2 <UART_SetConfig+0x20a>
 8006ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ae8:	d009      	beq.n	8006afe <UART_SetConfig+0x216>
 8006aea:	e00b      	b.n	8006b04 <UART_SetConfig+0x21c>
 8006aec:	2300      	movs	r3, #0
 8006aee:	77fb      	strb	r3, [r7, #31]
 8006af0:	e0a1      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006af2:	2302      	movs	r3, #2
 8006af4:	77fb      	strb	r3, [r7, #31]
 8006af6:	e09e      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006af8:	2304      	movs	r3, #4
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e09b      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006afe:	2308      	movs	r3, #8
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e098      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006b04:	2310      	movs	r3, #16
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	bf00      	nop
 8006b0a:	e094      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a39      	ldr	r2, [pc, #228]	; (8006bf8 <UART_SetConfig+0x310>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d124      	bne.n	8006b60 <UART_SetConfig+0x278>
 8006b16:	4b33      	ldr	r3, [pc, #204]	; (8006be4 <UART_SetConfig+0x2fc>)
 8006b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b24:	d012      	beq.n	8006b4c <UART_SetConfig+0x264>
 8006b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2a:	d802      	bhi.n	8006b32 <UART_SetConfig+0x24a>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <UART_SetConfig+0x258>
 8006b30:	e012      	b.n	8006b58 <UART_SetConfig+0x270>
 8006b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b36:	d006      	beq.n	8006b46 <UART_SetConfig+0x25e>
 8006b38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b3c:	d009      	beq.n	8006b52 <UART_SetConfig+0x26a>
 8006b3e:	e00b      	b.n	8006b58 <UART_SetConfig+0x270>
 8006b40:	2301      	movs	r3, #1
 8006b42:	77fb      	strb	r3, [r7, #31]
 8006b44:	e077      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006b46:	2302      	movs	r3, #2
 8006b48:	77fb      	strb	r3, [r7, #31]
 8006b4a:	e074      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e071      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006b52:	2308      	movs	r3, #8
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e06e      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	bf00      	nop
 8006b5e:	e06a      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a25      	ldr	r2, [pc, #148]	; (8006bfc <UART_SetConfig+0x314>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d124      	bne.n	8006bb4 <UART_SetConfig+0x2cc>
 8006b6a:	4b1e      	ldr	r3, [pc, #120]	; (8006be4 <UART_SetConfig+0x2fc>)
 8006b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b70:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b78:	d012      	beq.n	8006ba0 <UART_SetConfig+0x2b8>
 8006b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7e:	d802      	bhi.n	8006b86 <UART_SetConfig+0x29e>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <UART_SetConfig+0x2ac>
 8006b84:	e012      	b.n	8006bac <UART_SetConfig+0x2c4>
 8006b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8a:	d006      	beq.n	8006b9a <UART_SetConfig+0x2b2>
 8006b8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b90:	d009      	beq.n	8006ba6 <UART_SetConfig+0x2be>
 8006b92:	e00b      	b.n	8006bac <UART_SetConfig+0x2c4>
 8006b94:	2300      	movs	r3, #0
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e04d      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	77fb      	strb	r3, [r7, #31]
 8006b9e:	e04a      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e047      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e044      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006bac:	2310      	movs	r3, #16
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	bf00      	nop
 8006bb2:	e040      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a11      	ldr	r2, [pc, #68]	; (8006c00 <UART_SetConfig+0x318>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d139      	bne.n	8006c32 <UART_SetConfig+0x34a>
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <UART_SetConfig+0x2fc>)
 8006bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bcc:	d027      	beq.n	8006c1e <UART_SetConfig+0x336>
 8006bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd2:	d817      	bhi.n	8006c04 <UART_SetConfig+0x31c>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01c      	beq.n	8006c12 <UART_SetConfig+0x32a>
 8006bd8:	e027      	b.n	8006c2a <UART_SetConfig+0x342>
 8006bda:	bf00      	nop
 8006bdc:	efff69f3 	.word	0xefff69f3
 8006be0:	40011000 	.word	0x40011000
 8006be4:	40023800 	.word	0x40023800
 8006be8:	40004400 	.word	0x40004400
 8006bec:	40004800 	.word	0x40004800
 8006bf0:	40004c00 	.word	0x40004c00
 8006bf4:	40005000 	.word	0x40005000
 8006bf8:	40011400 	.word	0x40011400
 8006bfc:	40007800 	.word	0x40007800
 8006c00:	40007c00 	.word	0x40007c00
 8006c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c08:	d006      	beq.n	8006c18 <UART_SetConfig+0x330>
 8006c0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c0e:	d009      	beq.n	8006c24 <UART_SetConfig+0x33c>
 8006c10:	e00b      	b.n	8006c2a <UART_SetConfig+0x342>
 8006c12:	2300      	movs	r3, #0
 8006c14:	77fb      	strb	r3, [r7, #31]
 8006c16:	e00e      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e00b      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006c1e:	2304      	movs	r3, #4
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e008      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006c24:	2308      	movs	r3, #8
 8006c26:	77fb      	strb	r3, [r7, #31]
 8006c28:	e005      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006c2a:	2310      	movs	r3, #16
 8006c2c:	77fb      	strb	r3, [r7, #31]
 8006c2e:	bf00      	nop
 8006c30:	e001      	b.n	8006c36 <UART_SetConfig+0x34e>
 8006c32:	2310      	movs	r3, #16
 8006c34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3e:	d17f      	bne.n	8006d40 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006c40:	7ffb      	ldrb	r3, [r7, #31]
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d85c      	bhi.n	8006d00 <UART_SetConfig+0x418>
 8006c46:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <UART_SetConfig+0x364>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006cb1 	.word	0x08006cb1
 8006c58:	08006d01 	.word	0x08006d01
 8006c5c:	08006cc9 	.word	0x08006cc9
 8006c60:	08006d01 	.word	0x08006d01
 8006c64:	08006d01 	.word	0x08006d01
 8006c68:	08006d01 	.word	0x08006d01
 8006c6c:	08006ce9 	.word	0x08006ce9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c70:	f7fe feac 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 8006c74:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	005a      	lsls	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	441a      	add	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	61bb      	str	r3, [r7, #24]
        break;
 8006c8e:	e03a      	b.n	8006d06 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c90:	f7fe feb0 	bl	80059f4 <HAL_RCC_GetPCLK2Freq>
 8006c94:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	005a      	lsls	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	085b      	lsrs	r3, r3, #1
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	61bb      	str	r3, [r7, #24]
        break;
 8006cae:	e02a      	b.n	8006d06 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	085a      	lsrs	r2, r3, #1
 8006cb6:	4b5f      	ldr	r3, [pc, #380]	; (8006e34 <UART_SetConfig+0x54c>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6852      	ldr	r2, [r2, #4]
 8006cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	61bb      	str	r3, [r7, #24]
        break;
 8006cc6:	e01e      	b.n	8006d06 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc8:	f7fe fdc2 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 8006ccc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	005a      	lsls	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	441a      	add	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	61bb      	str	r3, [r7, #24]
        break;
 8006ce6:	e00e      	b.n	8006d06 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	085b      	lsrs	r3, r3, #1
 8006cee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	61bb      	str	r3, [r7, #24]
        break;
 8006cfe:	e002      	b.n	8006d06 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
        break;
 8006d04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b0f      	cmp	r3, #15
 8006d0a:	d916      	bls.n	8006d3a <UART_SetConfig+0x452>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d12:	d212      	bcs.n	8006d3a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f023 030f 	bic.w	r3, r3, #15
 8006d1c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	897b      	ldrh	r3, [r7, #10]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	897a      	ldrh	r2, [r7, #10]
 8006d36:	60da      	str	r2, [r3, #12]
 8006d38:	e070      	b.n	8006e1c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
 8006d3e:	e06d      	b.n	8006e1c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006d40:	7ffb      	ldrb	r3, [r7, #31]
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	d859      	bhi.n	8006dfa <UART_SetConfig+0x512>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <UART_SetConfig+0x464>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d71 	.word	0x08006d71
 8006d50:	08006d8f 	.word	0x08006d8f
 8006d54:	08006dad 	.word	0x08006dad
 8006d58:	08006dfb 	.word	0x08006dfb
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006dfb 	.word	0x08006dfb
 8006d64:	08006dfb 	.word	0x08006dfb
 8006d68:	08006dfb 	.word	0x08006dfb
 8006d6c:	08006de3 	.word	0x08006de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d70:	f7fe fe2c 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 8006d74:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	085a      	lsrs	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	441a      	add	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	61bb      	str	r3, [r7, #24]
        break;
 8006d8c:	e038      	b.n	8006e00 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d8e:	f7fe fe31 	bl	80059f4 <HAL_RCC_GetPCLK2Freq>
 8006d92:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	085a      	lsrs	r2, r3, #1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	441a      	add	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	61bb      	str	r3, [r7, #24]
        break;
 8006daa:	e029      	b.n	8006e00 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	085a      	lsrs	r2, r3, #1
 8006db2:	4b21      	ldr	r3, [pc, #132]	; (8006e38 <UART_SetConfig+0x550>)
 8006db4:	4413      	add	r3, r2
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6852      	ldr	r2, [r2, #4]
 8006dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	61bb      	str	r3, [r7, #24]
        break;
 8006dc2:	e01d      	b.n	8006e00 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc4:	f7fe fd44 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 8006dc8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	085a      	lsrs	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	441a      	add	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	61bb      	str	r3, [r7, #24]
        break;
 8006de0:	e00e      	b.n	8006e00 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	61bb      	str	r3, [r7, #24]
        break;
 8006df8:	e002      	b.n	8006e00 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
        break;
 8006dfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b0f      	cmp	r3, #15
 8006e04:	d908      	bls.n	8006e18 <UART_SetConfig+0x530>
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0c:	d204      	bcs.n	8006e18 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	60da      	str	r2, [r3, #12]
 8006e16:	e001      	b.n	8006e1c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3720      	adds	r7, #32
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	01e84800 	.word	0x01e84800
 8006e38:	00f42400 	.word	0x00f42400

08006e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01a      	beq.n	8006f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f3a:	d10a      	bne.n	8006f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006f8e:	f7fc f93b 	bl	8003208 <HAL_GetTick>
 8006f92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d10e      	bne.n	8006fc0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f82a 	bl	800700a <UART_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e020      	b.n	8007002 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d10e      	bne.n	8006fec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f814 	bl	800700a <UART_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e00a      	b.n	8007002 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701a:	e05d      	b.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007022:	d059      	beq.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007024:	f7fc f8f0 	bl	8003208 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	429a      	cmp	r2, r3
 8007032:	d302      	bcc.n	800703a <UART_WaitOnFlagUntilTimeout+0x30>
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d11b      	bne.n	8007072 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007048:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e042      	b.n	80070f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d02b      	beq.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800708a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708e:	d123      	bne.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007098:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2220      	movs	r2, #32
 80070c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2220      	movs	r2, #32
 80070ca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e00f      	b.n	80070f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69da      	ldr	r2, [r3, #28]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	4013      	ands	r3, r2
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	bf0c      	ite	eq
 80070e8:	2301      	moveq	r3, #1
 80070ea:	2300      	movne	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d092      	beq.n	800701c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007104:	bf00      	nop
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007116:	f3ef 8305 	mrs	r3, IPSR
 800711a:	60bb      	str	r3, [r7, #8]
  return(result);
 800711c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10f      	bne.n	8007142 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007122:	f3ef 8310 	mrs	r3, PRIMASK
 8007126:	607b      	str	r3, [r7, #4]
  return(result);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d105      	bne.n	800713a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800712e:	f3ef 8311 	mrs	r3, BASEPRI
 8007132:	603b      	str	r3, [r7, #0]
  return(result);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <osKernelInitialize+0x3a>
 800713a:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <osKernelInitialize+0x64>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d103      	bne.n	800714a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007142:	f06f 0305 	mvn.w	r3, #5
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	e00c      	b.n	8007164 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800714a:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <osKernelInitialize+0x64>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d105      	bne.n	800715e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007152:	4b08      	ldr	r3, [pc, #32]	; (8007174 <osKernelInitialize+0x64>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e002      	b.n	8007164 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800715e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007162:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007164:	68fb      	ldr	r3, [r7, #12]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	200000e0 	.word	0x200000e0

08007178 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800717e:	f3ef 8305 	mrs	r3, IPSR
 8007182:	60bb      	str	r3, [r7, #8]
  return(result);
 8007184:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10f      	bne.n	80071aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800718a:	f3ef 8310 	mrs	r3, PRIMASK
 800718e:	607b      	str	r3, [r7, #4]
  return(result);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007196:	f3ef 8311 	mrs	r3, BASEPRI
 800719a:	603b      	str	r3, [r7, #0]
  return(result);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d007      	beq.n	80071b2 <osKernelStart+0x3a>
 80071a2:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <osKernelStart+0x68>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d103      	bne.n	80071b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80071aa:	f06f 0305 	mvn.w	r3, #5
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e010      	b.n	80071d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071b2:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <osKernelStart+0x68>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d109      	bne.n	80071ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071ba:	f7ff ffa1 	bl	8007100 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071be:	4b08      	ldr	r3, [pc, #32]	; (80071e0 <osKernelStart+0x68>)
 80071c0:	2202      	movs	r2, #2
 80071c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071c4:	f001 ff10 	bl	8008fe8 <vTaskStartScheduler>
      stat = osOK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e002      	b.n	80071d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80071ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	200000e0 	.word	0x200000e0

080071e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b090      	sub	sp, #64	; 0x40
 80071e8:	af04      	add	r7, sp, #16
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071f4:	f3ef 8305 	mrs	r3, IPSR
 80071f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80071fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 808f 	bne.w	8007320 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007202:	f3ef 8310 	mrs	r3, PRIMASK
 8007206:	61bb      	str	r3, [r7, #24]
  return(result);
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800720e:	f3ef 8311 	mrs	r3, BASEPRI
 8007212:	617b      	str	r3, [r7, #20]
  return(result);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <osThreadNew+0x3e>
 800721a:	4b44      	ldr	r3, [pc, #272]	; (800732c <osThreadNew+0x148>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d07e      	beq.n	8007320 <osThreadNew+0x13c>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d07b      	beq.n	8007320 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007228:	2380      	movs	r3, #128	; 0x80
 800722a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800722c:	2318      	movs	r3, #24
 800722e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007230:	2300      	movs	r3, #0
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007238:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d045      	beq.n	80072cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <osThreadNew+0x6a>
        name = attr->name;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d008      	beq.n	8007274 <osThreadNew+0x90>
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	2b38      	cmp	r3, #56	; 0x38
 8007266:	d805      	bhi.n	8007274 <osThreadNew+0x90>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <osThreadNew+0x94>
        return (NULL);
 8007274:	2300      	movs	r3, #0
 8007276:	e054      	b.n	8007322 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	089b      	lsrs	r3, r3, #2
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00e      	beq.n	80072ae <osThreadNew+0xca>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b5b      	cmp	r3, #91	; 0x5b
 8007296:	d90a      	bls.n	80072ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <osThreadNew+0xca>
        mem = 1;
 80072a8:	2301      	movs	r3, #1
 80072aa:	623b      	str	r3, [r7, #32]
 80072ac:	e010      	b.n	80072d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10c      	bne.n	80072d0 <osThreadNew+0xec>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d108      	bne.n	80072d0 <osThreadNew+0xec>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <osThreadNew+0xec>
          mem = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	e001      	b.n	80072d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d110      	bne.n	80072f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072de:	9202      	str	r2, [sp, #8]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f001 fc9f 	bl	8008c30 <xTaskCreateStatic>
 80072f2:	4603      	mov	r3, r0
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	e013      	b.n	8007320 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d110      	bne.n	8007320 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007300:	b29a      	uxth	r2, r3
 8007302:	f107 0310 	add.w	r3, r7, #16
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f001 fced 	bl	8008cf0 <xTaskCreate>
 8007316:	4603      	mov	r3, r0
 8007318:	2b01      	cmp	r3, #1
 800731a:	d001      	beq.n	8007320 <osThreadNew+0x13c>
          hTask = NULL;
 800731c:	2300      	movs	r3, #0
 800731e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007320:	693b      	ldr	r3, [r7, #16]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3730      	adds	r7, #48	; 0x30
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	200000e0 	.word	0x200000e0

08007330 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007338:	f3ef 8305 	mrs	r3, IPSR
 800733c:	613b      	str	r3, [r7, #16]
  return(result);
 800733e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10f      	bne.n	8007364 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007344:	f3ef 8310 	mrs	r3, PRIMASK
 8007348:	60fb      	str	r3, [r7, #12]
  return(result);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007350:	f3ef 8311 	mrs	r3, BASEPRI
 8007354:	60bb      	str	r3, [r7, #8]
  return(result);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <osDelay+0x3c>
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <osDelay+0x58>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d103      	bne.n	800736c <osDelay+0x3c>
    stat = osErrorISR;
 8007364:	f06f 0305 	mvn.w	r3, #5
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	e007      	b.n	800737c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 fe00 	bl	8008f7c <vTaskDelay>
    }
  }

  return (stat);
 800737c:	697b      	ldr	r3, [r7, #20]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200000e0 	.word	0x200000e0

0800738c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800738c:	b580      	push	{r7, lr}
 800738e:	b08c      	sub	sp, #48	; 0x30
 8007390:	af02      	add	r7, sp, #8
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800739c:	f3ef 8305 	mrs	r3, IPSR
 80073a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80073a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8087 	bne.w	80074b8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073aa:	f3ef 8310 	mrs	r3, PRIMASK
 80073ae:	617b      	str	r3, [r7, #20]
  return(result);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d105      	bne.n	80073c2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073b6:	f3ef 8311 	mrs	r3, BASEPRI
 80073ba:	613b      	str	r3, [r7, #16]
  return(result);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <osSemaphoreNew+0x3e>
 80073c2:	4b40      	ldr	r3, [pc, #256]	; (80074c4 <osSemaphoreNew+0x138>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d076      	beq.n	80074b8 <osSemaphoreNew+0x12c>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d073      	beq.n	80074b8 <osSemaphoreNew+0x12c>
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d86f      	bhi.n	80074b8 <osSemaphoreNew+0x12c>
    mem = -1;
 80073d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d015      	beq.n	8007410 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <osSemaphoreNew+0x6e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2b4f      	cmp	r3, #79	; 0x4f
 80073f2:	d902      	bls.n	80073fa <osSemaphoreNew+0x6e>
        mem = 1;
 80073f4:	2301      	movs	r3, #1
 80073f6:	623b      	str	r3, [r7, #32]
 80073f8:	e00c      	b.n	8007414 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d108      	bne.n	8007414 <osSemaphoreNew+0x88>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d104      	bne.n	8007414 <osSemaphoreNew+0x88>
          mem = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	623b      	str	r3, [r7, #32]
 800740e:	e001      	b.n	8007414 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800741a:	d04d      	beq.n	80074b8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d129      	bne.n	8007476 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d10b      	bne.n	8007440 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	2303      	movs	r3, #3
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	4613      	mov	r3, r2
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	2001      	movs	r0, #1
 8007438:	f000 fbf4 	bl	8007c24 <xQueueGenericCreateStatic>
 800743c:	6278      	str	r0, [r7, #36]	; 0x24
 800743e:	e005      	b.n	800744c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007440:	2203      	movs	r2, #3
 8007442:	2100      	movs	r1, #0
 8007444:	2001      	movs	r0, #1
 8007446:	f000 fc6a 	bl	8007d1e <xQueueGenericCreate>
 800744a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d022      	beq.n	8007498 <osSemaphoreNew+0x10c>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01f      	beq.n	8007498 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007458:	2300      	movs	r3, #0
 800745a:	2200      	movs	r2, #0
 800745c:	2100      	movs	r1, #0
 800745e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007460:	f000 fd30 	bl	8007ec4 <xQueueGenericSend>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	d016      	beq.n	8007498 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800746a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800746c:	f001 fa0d 	bl	800888a <vQueueDelete>
            hSemaphore = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
 8007474:	e010      	b.n	8007498 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d108      	bne.n	800748e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	461a      	mov	r2, r3
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fcae 	bl	8007de6 <xQueueCreateCountingSemaphoreStatic>
 800748a:	6278      	str	r0, [r7, #36]	; 0x24
 800748c:	e004      	b.n	8007498 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fce1 	bl	8007e58 <xQueueCreateCountingSemaphore>
 8007496:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00c      	beq.n	80074b8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <osSemaphoreNew+0x120>
          name = attr->name;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	e001      	b.n	80074b0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80074b0:	69f9      	ldr	r1, [r7, #28]
 80074b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074b4:	f001 fb36 	bl	8008b24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3728      	adds	r7, #40	; 0x28
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200000e0 	.word	0x200000e0

080074c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d103      	bne.n	80074e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80074e0:	f06f 0303 	mvn.w	r3, #3
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	e04b      	b.n	8007580 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074e8:	f3ef 8305 	mrs	r3, IPSR
 80074ec:	617b      	str	r3, [r7, #20]
  return(result);
 80074ee:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10f      	bne.n	8007514 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f4:	f3ef 8310 	mrs	r3, PRIMASK
 80074f8:	613b      	str	r3, [r7, #16]
  return(result);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007500:	f3ef 8311 	mrs	r3, BASEPRI
 8007504:	60fb      	str	r3, [r7, #12]
  return(result);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d026      	beq.n	800755a <osSemaphoreAcquire+0x92>
 800750c:	4b1f      	ldr	r3, [pc, #124]	; (800758c <osSemaphoreAcquire+0xc4>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d122      	bne.n	800755a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800751a:	f06f 0303 	mvn.w	r3, #3
 800751e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007520:	e02d      	b.n	800757e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007522:	2300      	movs	r3, #0
 8007524:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007526:	f107 0308 	add.w	r3, r7, #8
 800752a:	461a      	mov	r2, r3
 800752c:	2100      	movs	r1, #0
 800752e:	69b8      	ldr	r0, [r7, #24]
 8007530:	f001 f8ea 	bl	8008708 <xQueueReceiveFromISR>
 8007534:	4603      	mov	r3, r0
 8007536:	2b01      	cmp	r3, #1
 8007538:	d003      	beq.n	8007542 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800753a:	f06f 0302 	mvn.w	r3, #2
 800753e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007540:	e01d      	b.n	800757e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01a      	beq.n	800757e <osSemaphoreAcquire+0xb6>
 8007548:	4b11      	ldr	r3, [pc, #68]	; (8007590 <osSemaphoreAcquire+0xc8>)
 800754a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007558:	e011      	b.n	800757e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	69b8      	ldr	r0, [r7, #24]
 800755e:	f000 ffc3 	bl	80084e8 <xQueueSemaphoreTake>
 8007562:	4603      	mov	r3, r0
 8007564:	2b01      	cmp	r3, #1
 8007566:	d00b      	beq.n	8007580 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800756e:	f06f 0301 	mvn.w	r3, #1
 8007572:	61fb      	str	r3, [r7, #28]
 8007574:	e004      	b.n	8007580 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007576:	f06f 0302 	mvn.w	r3, #2
 800757a:	61fb      	str	r3, [r7, #28]
 800757c:	e000      	b.n	8007580 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800757e:	bf00      	nop
      }
    }
  }

  return (stat);
 8007580:	69fb      	ldr	r3, [r7, #28]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200000e0 	.word	0x200000e0
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007594:	b580      	push	{r7, lr}
 8007596:	b088      	sub	sp, #32
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80075aa:	f06f 0303 	mvn.w	r3, #3
 80075ae:	61fb      	str	r3, [r7, #28]
 80075b0:	e03e      	b.n	8007630 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b2:	f3ef 8305 	mrs	r3, IPSR
 80075b6:	617b      	str	r3, [r7, #20]
  return(result);
 80075b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075be:	f3ef 8310 	mrs	r3, PRIMASK
 80075c2:	613b      	str	r3, [r7, #16]
  return(result);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ca:	f3ef 8311 	mrs	r3, BASEPRI
 80075ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01e      	beq.n	8007614 <osSemaphoreRelease+0x80>
 80075d6:	4b19      	ldr	r3, [pc, #100]	; (800763c <osSemaphoreRelease+0xa8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d11a      	bne.n	8007614 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80075de:	2300      	movs	r3, #0
 80075e0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80075e2:	f107 0308 	add.w	r3, r7, #8
 80075e6:	4619      	mov	r1, r3
 80075e8:	69b8      	ldr	r0, [r7, #24]
 80075ea:	f000 fe09 	bl	8008200 <xQueueGiveFromISR>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d003      	beq.n	80075fc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80075f4:	f06f 0302 	mvn.w	r3, #2
 80075f8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80075fa:	e018      	b.n	800762e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d015      	beq.n	800762e <osSemaphoreRelease+0x9a>
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <osSemaphoreRelease+0xac>)
 8007604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007612:	e00c      	b.n	800762e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007614:	2300      	movs	r3, #0
 8007616:	2200      	movs	r2, #0
 8007618:	2100      	movs	r1, #0
 800761a:	69b8      	ldr	r0, [r7, #24]
 800761c:	f000 fc52 	bl	8007ec4 <xQueueGenericSend>
 8007620:	4603      	mov	r3, r0
 8007622:	2b01      	cmp	r3, #1
 8007624:	d004      	beq.n	8007630 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007626:	f06f 0302 	mvn.w	r3, #2
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	e000      	b.n	8007630 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800762e:	bf00      	nop
    }
  }

  return (stat);
 8007630:	69fb      	ldr	r3, [r7, #28]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	200000e0 	.word	0x200000e0
 8007640:	e000ed04 	.word	0xe000ed04

08007644 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b08c      	sub	sp, #48	; 0x30
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007654:	f3ef 8305 	mrs	r3, IPSR
 8007658:	61bb      	str	r3, [r7, #24]
  return(result);
 800765a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800765c:	2b00      	cmp	r3, #0
 800765e:	d170      	bne.n	8007742 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007660:	f3ef 8310 	mrs	r3, PRIMASK
 8007664:	617b      	str	r3, [r7, #20]
  return(result);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d105      	bne.n	8007678 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800766c:	f3ef 8311 	mrs	r3, BASEPRI
 8007670:	613b      	str	r3, [r7, #16]
  return(result);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <osMessageQueueNew+0x3c>
 8007678:	4b34      	ldr	r3, [pc, #208]	; (800774c <osMessageQueueNew+0x108>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d060      	beq.n	8007742 <osMessageQueueNew+0xfe>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d05d      	beq.n	8007742 <osMessageQueueNew+0xfe>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05a      	beq.n	8007742 <osMessageQueueNew+0xfe>
    mem = -1;
 800768c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007690:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d029      	beq.n	80076ec <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d012      	beq.n	80076c6 <osMessageQueueNew+0x82>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	2b4f      	cmp	r3, #79	; 0x4f
 80076a6:	d90e      	bls.n	80076c6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695a      	ldr	r2, [r3, #20]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68b9      	ldr	r1, [r7, #8]
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	429a      	cmp	r2, r3
 80076be:	d302      	bcc.n	80076c6 <osMessageQueueNew+0x82>
        mem = 1;
 80076c0:	2301      	movs	r3, #1
 80076c2:	623b      	str	r3, [r7, #32]
 80076c4:	e014      	b.n	80076f0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d110      	bne.n	80076f0 <osMessageQueueNew+0xac>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10c      	bne.n	80076f0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d108      	bne.n	80076f0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d104      	bne.n	80076f0 <osMessageQueueNew+0xac>
          mem = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	623b      	str	r3, [r7, #32]
 80076ea:	e001      	b.n	80076f0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d10c      	bne.n	8007710 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6899      	ldr	r1, [r3, #8]
 80076fe:	2300      	movs	r3, #0
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	460b      	mov	r3, r1
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fa8c 	bl	8007c24 <xQueueGenericCreateStatic>
 800770c:	6278      	str	r0, [r7, #36]	; 0x24
 800770e:	e008      	b.n	8007722 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007716:	2200      	movs	r2, #0
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 faff 	bl	8007d1e <xQueueGenericCreate>
 8007720:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00c      	beq.n	8007742 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <osMessageQueueNew+0xf2>
        name = attr->name;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	61fb      	str	r3, [r7, #28]
 8007734:	e001      	b.n	800773a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800773a:	69f9      	ldr	r1, [r7, #28]
 800773c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800773e:	f001 f9f1 	bl	8008b24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007744:	4618      	mov	r0, r3
 8007746:	3728      	adds	r7, #40	; 0x28
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	200000e0 	.word	0x200000e0

08007750 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	; 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	4613      	mov	r3, r2
 800775e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007764:	2300      	movs	r3, #0
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007768:	f3ef 8305 	mrs	r3, IPSR
 800776c:	61fb      	str	r3, [r7, #28]
  return(result);
 800776e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10f      	bne.n	8007794 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007774:	f3ef 8310 	mrs	r3, PRIMASK
 8007778:	61bb      	str	r3, [r7, #24]
  return(result);
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d105      	bne.n	800778c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007780:	f3ef 8311 	mrs	r3, BASEPRI
 8007784:	617b      	str	r3, [r7, #20]
  return(result);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d02c      	beq.n	80077e6 <osMessageQueuePut+0x96>
 800778c:	4b28      	ldr	r3, [pc, #160]	; (8007830 <osMessageQueuePut+0xe0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d128      	bne.n	80077e6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <osMessageQueuePut+0x56>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <osMessageQueuePut+0x56>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80077a6:	f06f 0303 	mvn.w	r3, #3
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077ac:	e039      	b.n	8007822 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80077b2:	f107 0210 	add.w	r2, r7, #16
 80077b6:	2300      	movs	r3, #0
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	6a38      	ldr	r0, [r7, #32]
 80077bc:	f000 fc84 	bl	80080c8 <xQueueGenericSendFromISR>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d003      	beq.n	80077ce <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80077c6:	f06f 0302 	mvn.w	r3, #2
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077cc:	e029      	b.n	8007822 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d026      	beq.n	8007822 <osMessageQueuePut+0xd2>
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <osMessageQueuePut+0xe4>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077e4:	e01d      	b.n	8007822 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <osMessageQueuePut+0xa2>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d103      	bne.n	80077fa <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80077f2:	f06f 0303 	mvn.w	r3, #3
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
 80077f8:	e014      	b.n	8007824 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077fa:	2300      	movs	r3, #0
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	6a38      	ldr	r0, [r7, #32]
 8007802:	f000 fb5f 	bl	8007ec4 <xQueueGenericSend>
 8007806:	4603      	mov	r3, r0
 8007808:	2b01      	cmp	r3, #1
 800780a:	d00b      	beq.n	8007824 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007812:	f06f 0301 	mvn.w	r3, #1
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
 8007818:	e004      	b.n	8007824 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800781a:	f06f 0302 	mvn.w	r3, #2
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
 8007820:	e000      	b.n	8007824 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007822:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007826:	4618      	mov	r0, r3
 8007828:	3728      	adds	r7, #40	; 0x28
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	200000e0 	.word	0x200000e0
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	; 0x28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800784a:	2300      	movs	r3, #0
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800784e:	f3ef 8305 	mrs	r3, IPSR
 8007852:	61fb      	str	r3, [r7, #28]
  return(result);
 8007854:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10f      	bne.n	800787a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785a:	f3ef 8310 	mrs	r3, PRIMASK
 800785e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d105      	bne.n	8007872 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007866:	f3ef 8311 	mrs	r3, BASEPRI
 800786a:	617b      	str	r3, [r7, #20]
  return(result);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d02c      	beq.n	80078cc <osMessageQueueGet+0x94>
 8007872:	4b28      	ldr	r3, [pc, #160]	; (8007914 <osMessageQueueGet+0xdc>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d128      	bne.n	80078cc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <osMessageQueueGet+0x54>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <osMessageQueueGet+0x54>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800788c:	f06f 0303 	mvn.w	r3, #3
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007892:	e038      	b.n	8007906 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007894:	2300      	movs	r3, #0
 8007896:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007898:	f107 0310 	add.w	r3, r7, #16
 800789c:	461a      	mov	r2, r3
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	6a38      	ldr	r0, [r7, #32]
 80078a2:	f000 ff31 	bl	8008708 <xQueueReceiveFromISR>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d003      	beq.n	80078b4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80078ac:	f06f 0302 	mvn.w	r3, #2
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078b2:	e028      	b.n	8007906 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d025      	beq.n	8007906 <osMessageQueueGet+0xce>
 80078ba:	4b17      	ldr	r3, [pc, #92]	; (8007918 <osMessageQueueGet+0xe0>)
 80078bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078ca:	e01c      	b.n	8007906 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <osMessageQueueGet+0xa0>
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d103      	bne.n	80078e0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80078d8:	f06f 0303 	mvn.w	r3, #3
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
 80078de:	e013      	b.n	8007908 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	68b9      	ldr	r1, [r7, #8]
 80078e4:	6a38      	ldr	r0, [r7, #32]
 80078e6:	f000 fd1d 	bl	8008324 <xQueueReceive>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d00b      	beq.n	8007908 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80078f6:	f06f 0301 	mvn.w	r3, #1
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
 80078fc:	e004      	b.n	8007908 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80078fe:	f06f 0302 	mvn.w	r3, #2
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
 8007904:	e000      	b.n	8007908 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007906:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800790a:	4618      	mov	r0, r3
 800790c:	3728      	adds	r7, #40	; 0x28
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200000e0 	.word	0x200000e0
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d102      	bne.n	8007934 <osMessageQueueGetCount+0x18>
    count = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
 8007932:	e01e      	b.n	8007972 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007934:	f3ef 8305 	mrs	r3, IPSR
 8007938:	617b      	str	r3, [r7, #20]
  return(result);
 800793a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10f      	bne.n	8007960 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007940:	f3ef 8310 	mrs	r3, PRIMASK
 8007944:	613b      	str	r3, [r7, #16]
  return(result);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800794c:	f3ef 8311 	mrs	r3, BASEPRI
 8007950:	60fb      	str	r3, [r7, #12]
  return(result);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d008      	beq.n	800796a <osMessageQueueGetCount+0x4e>
 8007958:	4b08      	ldr	r3, [pc, #32]	; (800797c <osMessageQueueGetCount+0x60>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d104      	bne.n	800796a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007960:	69b8      	ldr	r0, [r7, #24]
 8007962:	f000 ff73 	bl	800884c <uxQueueMessagesWaitingFromISR>
 8007966:	61f8      	str	r0, [r7, #28]
 8007968:	e003      	b.n	8007972 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800796a:	69b8      	ldr	r0, [r7, #24]
 800796c:	f000 ff4f 	bl	800880e <uxQueueMessagesWaiting>
 8007970:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007972:	69fb      	ldr	r3, [r7, #28]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3720      	adds	r7, #32
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	200000e0 	.word	0x200000e0

08007980 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4a07      	ldr	r2, [pc, #28]	; (80079ac <vApplicationGetIdleTaskMemory+0x2c>)
 8007990:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	4a06      	ldr	r2, [pc, #24]	; (80079b0 <vApplicationGetIdleTaskMemory+0x30>)
 8007996:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2280      	movs	r2, #128	; 0x80
 800799c:	601a      	str	r2, [r3, #0]
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	200000e4 	.word	0x200000e4
 80079b0:	20000140 	.word	0x20000140

080079b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4a07      	ldr	r2, [pc, #28]	; (80079e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80079c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4a06      	ldr	r2, [pc, #24]	; (80079e4 <vApplicationGetTimerTaskMemory+0x30>)
 80079ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079d2:	601a      	str	r2, [r3, #0]
}
 80079d4:	bf00      	nop
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	20000340 	.word	0x20000340
 80079e4:	2000039c 	.word	0x2000039c

080079e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f103 0208 	add.w	r2, r3, #8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f103 0208 	add.w	r2, r3, #8
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f103 0208 	add.w	r2, r3, #8
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a42:	b480      	push	{r7}
 8007a44:	b085      	sub	sp, #20
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa0:	d103      	bne.n	8007aaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	e00c      	b.n	8007ac4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3308      	adds	r3, #8
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	e002      	b.n	8007ab8 <vListInsert+0x2e>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d2f6      	bcs.n	8007ab2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]
}
 8007af0:	bf00      	nop
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6892      	ldr	r2, [r2, #8]
 8007b12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6852      	ldr	r2, [r2, #4]
 8007b1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d103      	bne.n	8007b30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	1e5a      	subs	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	b672      	cpsid	i
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	b662      	cpsie	i
 8007b78:	60bb      	str	r3, [r7, #8]
 8007b7a:	e7fe      	b.n	8007b7a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8007b7c:	f002 fcbc 	bl	800a4f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b88:	68f9      	ldr	r1, [r7, #12]
 8007b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bac:	3b01      	subs	r3, #1
 8007bae:	68f9      	ldr	r1, [r7, #12]
 8007bb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	441a      	add	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	22ff      	movs	r2, #255	; 0xff
 8007bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	22ff      	movs	r2, #255	; 0xff
 8007bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d114      	bne.n	8007bfc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01a      	beq.n	8007c10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3310      	adds	r3, #16
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 fc90 	bl	8009504 <xTaskRemoveFromEventList>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d012      	beq.n	8007c10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bea:	4b0d      	ldr	r3, [pc, #52]	; (8007c20 <xQueueGenericReset+0xd0>)
 8007bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	e009      	b.n	8007c10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3310      	adds	r3, #16
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff fef1 	bl	80079e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3324      	adds	r3, #36	; 0x24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7ff feec 	bl	80079e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c10:	f002 fca4 	bl	800a55c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c14:	2301      	movs	r3, #1
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	e000ed04 	.word	0xe000ed04

08007c24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08e      	sub	sp, #56	; 0x38
 8007c28:	af02      	add	r7, sp, #8
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10b      	bne.n	8007c50 <xQueueGenericCreateStatic+0x2c>
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	b672      	cpsid	i
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	b662      	cpsie	i
 8007c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c4e:	e7fe      	b.n	8007c4e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10b      	bne.n	8007c6e <xQueueGenericCreateStatic+0x4a>
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	b672      	cpsid	i
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	b662      	cpsie	i
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6c:	e7fe      	b.n	8007c6c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <xQueueGenericCreateStatic+0x56>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <xQueueGenericCreateStatic+0x5a>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <xQueueGenericCreateStatic+0x5c>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <xQueueGenericCreateStatic+0x78>
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	b672      	cpsid	i
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	b662      	cpsie	i
 8007c98:	623b      	str	r3, [r7, #32]
 8007c9a:	e7fe      	b.n	8007c9a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d102      	bne.n	8007ca8 <xQueueGenericCreateStatic+0x84>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <xQueueGenericCreateStatic+0x88>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e000      	b.n	8007cae <xQueueGenericCreateStatic+0x8a>
 8007cac:	2300      	movs	r3, #0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10b      	bne.n	8007cca <xQueueGenericCreateStatic+0xa6>
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	b672      	cpsid	i
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	b662      	cpsie	i
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cca:	2350      	movs	r3, #80	; 0x50
 8007ccc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b50      	cmp	r3, #80	; 0x50
 8007cd2:	d00b      	beq.n	8007cec <xQueueGenericCreateStatic+0xc8>
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	b672      	cpsid	i
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	b662      	cpsie	i
 8007ce8:	61bb      	str	r3, [r7, #24]
 8007cea:	e7fe      	b.n	8007cea <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00d      	beq.n	8007d14 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d00:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 f846 	bl	8007da0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3730      	adds	r7, #48	; 0x30
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b08a      	sub	sp, #40	; 0x28
 8007d22:	af02      	add	r7, sp, #8
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <xQueueGenericCreate+0x2c>
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	b672      	cpsid	i
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	b662      	cpsie	i
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	e7fe      	b.n	8007d48 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61fb      	str	r3, [r7, #28]
 8007d54:	e004      	b.n	8007d60 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	fb02 f303 	mul.w	r3, r2, r3
 8007d5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	3350      	adds	r3, #80	; 0x50
 8007d64:	4618      	mov	r0, r3
 8007d66:	f002 fce9 	bl	800a73c <pvPortMalloc>
 8007d6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d011      	beq.n	8007d96 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	3350      	adds	r3, #80	; 0x50
 8007d7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d84:	79fa      	ldrb	r2, [r7, #7]
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	68b9      	ldr	r1, [r7, #8]
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 f805 	bl	8007da0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d96:	69bb      	ldr	r3, [r7, #24]
	}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	e002      	b.n	8007dc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dce:	2101      	movs	r1, #1
 8007dd0:	69b8      	ldr	r0, [r7, #24]
 8007dd2:	f7ff febd 	bl	8007b50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	78fa      	ldrb	r2, [r7, #3]
 8007dda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b08a      	sub	sp, #40	; 0x28
 8007dea:	af02      	add	r7, sp, #8
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10b      	bne.n	8007e10 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	b672      	cpsid	i
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	b662      	cpsie	i
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	e7fe      	b.n	8007e0e <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d90b      	bls.n	8007e30 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	b672      	cpsid	i
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	b662      	cpsie	i
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	e7fe      	b.n	8007e2e <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007e30:	2302      	movs	r3, #2
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	2100      	movs	r1, #0
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7ff fef2 	bl	8007c24 <xQueueGenericCreateStatic>
 8007e40:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007e4e:	69fb      	ldr	r3, [r7, #28]
	}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3720      	adds	r7, #32
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10b      	bne.n	8007e80 <xQueueCreateCountingSemaphore+0x28>
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	b672      	cpsid	i
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	b662      	cpsie	i
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	e7fe      	b.n	8007e7e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d90b      	bls.n	8007ea0 <xQueueCreateCountingSemaphore+0x48>
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	b672      	cpsid	i
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	b662      	cpsie	i
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	e7fe      	b.n	8007e9e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff3a 	bl	8007d1e <xQueueGenericCreate>
 8007eaa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007eb8:	697b      	ldr	r3, [r7, #20]
	}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08e      	sub	sp, #56	; 0x38
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10b      	bne.n	8007ef8 <xQueueGenericSend+0x34>
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	b672      	cpsid	i
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	b662      	cpsie	i
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ef6:	e7fe      	b.n	8007ef6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <xQueueGenericSend+0x42>
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <xQueueGenericSend+0x46>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <xQueueGenericSend+0x48>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <xQueueGenericSend+0x64>
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	b672      	cpsid	i
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	b662      	cpsie	i
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
 8007f26:	e7fe      	b.n	8007f26 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d103      	bne.n	8007f36 <xQueueGenericSend+0x72>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <xQueueGenericSend+0x76>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <xQueueGenericSend+0x78>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10b      	bne.n	8007f58 <xQueueGenericSend+0x94>
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	b672      	cpsid	i
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	b662      	cpsie	i
 8007f54:	623b      	str	r3, [r7, #32]
 8007f56:	e7fe      	b.n	8007f56 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f58:	f001 fc92 	bl	8009880 <xTaskGetSchedulerState>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d102      	bne.n	8007f68 <xQueueGenericSend+0xa4>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <xQueueGenericSend+0xa8>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e000      	b.n	8007f6e <xQueueGenericSend+0xaa>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10b      	bne.n	8007f8a <xQueueGenericSend+0xc6>
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	b672      	cpsid	i
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	b662      	cpsie	i
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	e7fe      	b.n	8007f88 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f8a:	f002 fab5 	bl	800a4f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d302      	bcc.n	8007fa0 <xQueueGenericSend+0xdc>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d129      	bne.n	8007ff4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fa6:	f000 fcac 	bl	8008902 <prvCopyDataToQueue>
 8007faa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d010      	beq.n	8007fd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	3324      	adds	r3, #36	; 0x24
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 faa3 	bl	8009504 <xTaskRemoveFromEventList>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d013      	beq.n	8007fec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fc4:	4b3f      	ldr	r3, [pc, #252]	; (80080c4 <xQueueGenericSend+0x200>)
 8007fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	e00a      	b.n	8007fec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d007      	beq.n	8007fec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fdc:	4b39      	ldr	r3, [pc, #228]	; (80080c4 <xQueueGenericSend+0x200>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fec:	f002 fab6 	bl	800a55c <vPortExitCritical>
				return pdPASS;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e063      	b.n	80080bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d103      	bne.n	8008002 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ffa:	f002 faaf 	bl	800a55c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	e05c      	b.n	80080bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008008:	f107 0314 	add.w	r3, r7, #20
 800800c:	4618      	mov	r0, r3
 800800e:	f001 fadd 	bl	80095cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008012:	2301      	movs	r3, #1
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008016:	f002 faa1 	bl	800a55c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800801a:	f001 f84d 	bl	80090b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800801e:	f002 fa6b 	bl	800a4f8 <vPortEnterCritical>
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008028:	b25b      	sxtb	r3, r3
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800802e:	d103      	bne.n	8008038 <xQueueGenericSend+0x174>
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800803e:	b25b      	sxtb	r3, r3
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008044:	d103      	bne.n	800804e <xQueueGenericSend+0x18a>
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800804e:	f002 fa85 	bl	800a55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008052:	1d3a      	adds	r2, r7, #4
 8008054:	f107 0314 	add.w	r3, r7, #20
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f001 facc 	bl	80095f8 <xTaskCheckForTimeOut>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d124      	bne.n	80080b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008068:	f000 fd43 	bl	8008af2 <prvIsQueueFull>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d018      	beq.n	80080a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	3310      	adds	r3, #16
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	4611      	mov	r1, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f001 f9f0 	bl	8009460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008082:	f000 fcce 	bl	8008a22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008086:	f001 f825 	bl	80090d4 <xTaskResumeAll>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	f47f af7c 	bne.w	8007f8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008092:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <xQueueGenericSend+0x200>)
 8008094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	e772      	b.n	8007f8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080a6:	f000 fcbc 	bl	8008a22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080aa:	f001 f813 	bl	80090d4 <xTaskResumeAll>
 80080ae:	e76c      	b.n	8007f8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b2:	f000 fcb6 	bl	8008a22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080b6:	f001 f80d 	bl	80090d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3738      	adds	r7, #56	; 0x38
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08e      	sub	sp, #56	; 0x38
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <xQueueGenericSendFromISR+0x30>
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	b672      	cpsid	i
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	b662      	cpsie	i
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
 80080f6:	e7fe      	b.n	80080f6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <xQueueGenericSendFromISR+0x3e>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <xQueueGenericSendFromISR+0x42>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <xQueueGenericSendFromISR+0x44>
 800810a:	2300      	movs	r3, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <xQueueGenericSendFromISR+0x60>
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	b672      	cpsid	i
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	b662      	cpsie	i
 8008124:	623b      	str	r3, [r7, #32]
 8008126:	e7fe      	b.n	8008126 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d103      	bne.n	8008136 <xQueueGenericSendFromISR+0x6e>
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <xQueueGenericSendFromISR+0x72>
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <xQueueGenericSendFromISR+0x74>
 800813a:	2300      	movs	r3, #0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10b      	bne.n	8008158 <xQueueGenericSendFromISR+0x90>
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	b672      	cpsid	i
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	b662      	cpsie	i
 8008154:	61fb      	str	r3, [r7, #28]
 8008156:	e7fe      	b.n	8008156 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008158:	f002 faae 	bl	800a6b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800815c:	f3ef 8211 	mrs	r2, BASEPRI
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	b672      	cpsid	i
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	b662      	cpsie	i
 8008174:	61ba      	str	r2, [r7, #24]
 8008176:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008178:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008184:	429a      	cmp	r2, r3
 8008186:	d302      	bcc.n	800818e <xQueueGenericSendFromISR+0xc6>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d12c      	bne.n	80081e8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800819e:	f000 fbb0 	bl	8008902 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081aa:	d112      	bne.n	80081d2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d016      	beq.n	80081e2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	3324      	adds	r3, #36	; 0x24
 80081b8:	4618      	mov	r0, r3
 80081ba:	f001 f9a3 	bl	8009504 <xTaskRemoveFromEventList>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00e      	beq.n	80081e2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e007      	b.n	80081e2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081d6:	3301      	adds	r3, #1
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	b25a      	sxtb	r2, r3
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081e2:	2301      	movs	r3, #1
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80081e6:	e001      	b.n	80081ec <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081e8:	2300      	movs	r3, #0
 80081ea:	637b      	str	r3, [r7, #52]	; 0x34
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3738      	adds	r7, #56	; 0x38
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08e      	sub	sp, #56	; 0x38
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10b      	bne.n	800822c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	b672      	cpsid	i
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	b662      	cpsie	i
 8008228:	623b      	str	r3, [r7, #32]
 800822a:	e7fe      	b.n	800822a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <xQueueGiveFromISR+0x4c>
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	b672      	cpsid	i
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	b662      	cpsie	i
 8008248:	61fb      	str	r3, [r7, #28]
 800824a:	e7fe      	b.n	800824a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d103      	bne.n	800825c <xQueueGiveFromISR+0x5c>
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <xQueueGiveFromISR+0x60>
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <xQueueGiveFromISR+0x62>
 8008260:	2300      	movs	r3, #0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10b      	bne.n	800827e <xQueueGiveFromISR+0x7e>
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	b672      	cpsid	i
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	b662      	cpsie	i
 800827a:	61bb      	str	r3, [r7, #24]
 800827c:	e7fe      	b.n	800827c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800827e:	f002 fa1b 	bl	800a6b8 <vPortValidateInterruptPriority>
	__asm volatile
 8008282:	f3ef 8211 	mrs	r2, BASEPRI
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	b672      	cpsid	i
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	b662      	cpsie	i
 800829a:	617a      	str	r2, [r7, #20]
 800829c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800829e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d22b      	bcs.n	800830a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082cc:	d112      	bne.n	80082f4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d016      	beq.n	8008304 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	3324      	adds	r3, #36	; 0x24
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 f912 	bl	8009504 <xTaskRemoveFromEventList>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00e      	beq.n	8008304 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2201      	movs	r2, #1
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	e007      	b.n	8008304 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082f8:	3301      	adds	r3, #1
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	b25a      	sxtb	r2, r3
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008304:	2301      	movs	r3, #1
 8008306:	637b      	str	r3, [r7, #52]	; 0x34
 8008308:	e001      	b.n	800830e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800830a:	2300      	movs	r3, #0
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008310:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800831a:	4618      	mov	r0, r3
 800831c:	3738      	adds	r7, #56	; 0x38
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08c      	sub	sp, #48	; 0x30
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008330:	2300      	movs	r3, #0
 8008332:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10b      	bne.n	8008356 <xQueueReceive+0x32>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	b672      	cpsid	i
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	b662      	cpsie	i
 8008352:	623b      	str	r3, [r7, #32]
 8008354:	e7fe      	b.n	8008354 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d103      	bne.n	8008364 <xQueueReceive+0x40>
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <xQueueReceive+0x44>
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <xQueueReceive+0x46>
 8008368:	2300      	movs	r3, #0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <xQueueReceive+0x62>
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	b672      	cpsid	i
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	b662      	cpsie	i
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e7fe      	b.n	8008384 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008386:	f001 fa7b 	bl	8009880 <xTaskGetSchedulerState>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <xQueueReceive+0x72>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <xQueueReceive+0x76>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <xQueueReceive+0x78>
 800839a:	2300      	movs	r3, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10b      	bne.n	80083b8 <xQueueReceive+0x94>
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	b672      	cpsid	i
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	b662      	cpsie	i
 80083b4:	61bb      	str	r3, [r7, #24]
 80083b6:	e7fe      	b.n	80083b6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083b8:	f002 f89e 	bl	800a4f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01f      	beq.n	8008408 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083cc:	f000 fb03 	bl	80089d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	1e5a      	subs	r2, r3, #1
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00f      	beq.n	8008400 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	3310      	adds	r3, #16
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 f88d 	bl	8009504 <xTaskRemoveFromEventList>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083f0:	4b3c      	ldr	r3, [pc, #240]	; (80084e4 <xQueueReceive+0x1c0>)
 80083f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008400:	f002 f8ac 	bl	800a55c <vPortExitCritical>
				return pdPASS;
 8008404:	2301      	movs	r3, #1
 8008406:	e069      	b.n	80084dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d103      	bne.n	8008416 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800840e:	f002 f8a5 	bl	800a55c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008412:	2300      	movs	r3, #0
 8008414:	e062      	b.n	80084dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800841c:	f107 0310 	add.w	r3, r7, #16
 8008420:	4618      	mov	r0, r3
 8008422:	f001 f8d3 	bl	80095cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008426:	2301      	movs	r3, #1
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800842a:	f002 f897 	bl	800a55c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800842e:	f000 fe43 	bl	80090b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008432:	f002 f861 	bl	800a4f8 <vPortEnterCritical>
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800843c:	b25b      	sxtb	r3, r3
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008442:	d103      	bne.n	800844c <xQueueReceive+0x128>
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008452:	b25b      	sxtb	r3, r3
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008458:	d103      	bne.n	8008462 <xQueueReceive+0x13e>
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008462:	f002 f87b 	bl	800a55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008466:	1d3a      	adds	r2, r7, #4
 8008468:	f107 0310 	add.w	r3, r7, #16
 800846c:	4611      	mov	r1, r2
 800846e:	4618      	mov	r0, r3
 8008470:	f001 f8c2 	bl	80095f8 <xTaskCheckForTimeOut>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d123      	bne.n	80084c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800847a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847c:	f000 fb23 	bl	8008ac6 <prvIsQueueEmpty>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d017      	beq.n	80084b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008488:	3324      	adds	r3, #36	; 0x24
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f000 ffe6 	bl	8009460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008496:	f000 fac4 	bl	8008a22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800849a:	f000 fe1b 	bl	80090d4 <xTaskResumeAll>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d189      	bne.n	80083b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80084a4:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <xQueueReceive+0x1c0>)
 80084a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	e780      	b.n	80083b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b8:	f000 fab3 	bl	8008a22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084bc:	f000 fe0a 	bl	80090d4 <xTaskResumeAll>
 80084c0:	e77a      	b.n	80083b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c4:	f000 faad 	bl	8008a22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084c8:	f000 fe04 	bl	80090d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ce:	f000 fafa 	bl	8008ac6 <prvIsQueueEmpty>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f43f af6f 	beq.w	80083b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3730      	adds	r7, #48	; 0x30
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	e000ed04 	.word	0xe000ed04

080084e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08e      	sub	sp, #56	; 0x38
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10b      	bne.n	800851c <xQueueSemaphoreTake+0x34>
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	b672      	cpsid	i
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	b662      	cpsie	i
 8008518:	623b      	str	r3, [r7, #32]
 800851a:	e7fe      	b.n	800851a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00b      	beq.n	800853c <xQueueSemaphoreTake+0x54>
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	b672      	cpsid	i
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	b662      	cpsie	i
 8008538:	61fb      	str	r3, [r7, #28]
 800853a:	e7fe      	b.n	800853a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800853c:	f001 f9a0 	bl	8009880 <xTaskGetSchedulerState>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d102      	bne.n	800854c <xQueueSemaphoreTake+0x64>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <xQueueSemaphoreTake+0x68>
 800854c:	2301      	movs	r3, #1
 800854e:	e000      	b.n	8008552 <xQueueSemaphoreTake+0x6a>
 8008550:	2300      	movs	r3, #0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10b      	bne.n	800856e <xQueueSemaphoreTake+0x86>
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	b672      	cpsid	i
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	b662      	cpsie	i
 800856a:	61bb      	str	r3, [r7, #24]
 800856c:	e7fe      	b.n	800856c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800856e:	f001 ffc3 	bl	800a4f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857a:	2b00      	cmp	r3, #0
 800857c:	d024      	beq.n	80085c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008580:	1e5a      	subs	r2, r3, #1
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800858e:	f001 faf1 	bl	8009b74 <pvTaskIncrementMutexHeldCount>
 8008592:	4602      	mov	r2, r0
 8008594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008596:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00f      	beq.n	80085c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	3310      	adds	r3, #16
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 ffad 	bl	8009504 <xTaskRemoveFromEventList>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085b0:	4b54      	ldr	r3, [pc, #336]	; (8008704 <xQueueSemaphoreTake+0x21c>)
 80085b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085c0:	f001 ffcc 	bl	800a55c <vPortExitCritical>
				return pdPASS;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e098      	b.n	80086fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d112      	bne.n	80085f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <xQueueSemaphoreTake+0x104>
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	b672      	cpsid	i
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	b662      	cpsie	i
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e7fe      	b.n	80085ea <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80085ec:	f001 ffb6 	bl	800a55c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085f0:	2300      	movs	r3, #0
 80085f2:	e082      	b.n	80086fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085fa:	f107 030c 	add.w	r3, r7, #12
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 ffe4 	bl	80095cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008608:	f001 ffa8 	bl	800a55c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800860c:	f000 fd54 	bl	80090b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008610:	f001 ff72 	bl	800a4f8 <vPortEnterCritical>
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800861a:	b25b      	sxtb	r3, r3
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008620:	d103      	bne.n	800862a <xQueueSemaphoreTake+0x142>
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008630:	b25b      	sxtb	r3, r3
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008636:	d103      	bne.n	8008640 <xQueueSemaphoreTake+0x158>
 8008638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008640:	f001 ff8c 	bl	800a55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008644:	463a      	mov	r2, r7
 8008646:	f107 030c 	add.w	r3, r7, #12
 800864a:	4611      	mov	r1, r2
 800864c:	4618      	mov	r0, r3
 800864e:	f000 ffd3 	bl	80095f8 <xTaskCheckForTimeOut>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d132      	bne.n	80086be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800865a:	f000 fa34 	bl	8008ac6 <prvIsQueueEmpty>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d026      	beq.n	80086b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800866c:	f001 ff44 	bl	800a4f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	4618      	mov	r0, r3
 8008676:	f001 f921 	bl	80098bc <xTaskPriorityInherit>
 800867a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800867c:	f001 ff6e 	bl	800a55c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	3324      	adds	r3, #36	; 0x24
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fee9 	bl	8009460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800868e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008690:	f000 f9c7 	bl	8008a22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008694:	f000 fd1e 	bl	80090d4 <xTaskResumeAll>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	f47f af67 	bne.w	800856e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80086a0:	4b18      	ldr	r3, [pc, #96]	; (8008704 <xQueueSemaphoreTake+0x21c>)
 80086a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	e75d      	b.n	800856e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80086b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086b4:	f000 f9b5 	bl	8008a22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086b8:	f000 fd0c 	bl	80090d4 <xTaskResumeAll>
 80086bc:	e757      	b.n	800856e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80086be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086c0:	f000 f9af 	bl	8008a22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086c4:	f000 fd06 	bl	80090d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086ca:	f000 f9fc 	bl	8008ac6 <prvIsQueueEmpty>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f43f af4c 	beq.w	800856e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00d      	beq.n	80086f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80086dc:	f001 ff0c 	bl	800a4f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80086e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086e2:	f000 f8f6 	bl	80088d2 <prvGetDisinheritPriorityAfterTimeout>
 80086e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 f9bc 	bl	8009a6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80086f4:	f001 ff32 	bl	800a55c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3738      	adds	r7, #56	; 0x38
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	e000ed04 	.word	0xe000ed04

08008708 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08e      	sub	sp, #56	; 0x38
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10b      	bne.n	8008736 <xQueueReceiveFromISR+0x2e>
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	b672      	cpsid	i
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	b662      	cpsie	i
 8008732:	623b      	str	r3, [r7, #32]
 8008734:	e7fe      	b.n	8008734 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d103      	bne.n	8008744 <xQueueReceiveFromISR+0x3c>
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <xQueueReceiveFromISR+0x40>
 8008744:	2301      	movs	r3, #1
 8008746:	e000      	b.n	800874a <xQueueReceiveFromISR+0x42>
 8008748:	2300      	movs	r3, #0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10b      	bne.n	8008766 <xQueueReceiveFromISR+0x5e>
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	b672      	cpsid	i
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	b662      	cpsie	i
 8008762:	61fb      	str	r3, [r7, #28]
 8008764:	e7fe      	b.n	8008764 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008766:	f001 ffa7 	bl	800a6b8 <vPortValidateInterruptPriority>
	__asm volatile
 800876a:	f3ef 8211 	mrs	r2, BASEPRI
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	b672      	cpsid	i
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	b662      	cpsie	i
 8008782:	61ba      	str	r2, [r7, #24]
 8008784:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008786:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008788:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	2b00      	cmp	r3, #0
 8008794:	d02f      	beq.n	80087f6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800879c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087a0:	68b9      	ldr	r1, [r7, #8]
 80087a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087a4:	f000 f917 	bl	80089d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	1e5a      	subs	r2, r3, #1
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80087b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087b8:	d112      	bne.n	80087e0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d016      	beq.n	80087f0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	3310      	adds	r3, #16
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fe9c 	bl	8009504 <xTaskRemoveFromEventList>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00e      	beq.n	80087f0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00b      	beq.n	80087f0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	e007      	b.n	80087f0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087e4:	3301      	adds	r3, #1
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	b25a      	sxtb	r2, r3
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80087f0:	2301      	movs	r3, #1
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
 80087f4:	e001      	b.n	80087fa <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	637b      	str	r3, [r7, #52]	; 0x34
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008806:	4618      	mov	r0, r3
 8008808:	3738      	adds	r7, #56	; 0x38
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10b      	bne.n	8008834 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	b672      	cpsid	i
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	b662      	cpsie	i
 8008830:	60bb      	str	r3, [r7, #8]
 8008832:	e7fe      	b.n	8008832 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8008834:	f001 fe60 	bl	800a4f8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800883e:	f001 fe8d 	bl	800a55c <vPortExitCritical>

	return uxReturn;
 8008842:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10b      	bne.n	8008876 <uxQueueMessagesWaitingFromISR+0x2a>
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	b672      	cpsid	i
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	b662      	cpsie	i
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	e7fe      	b.n	8008874 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800887c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800887e:	4618      	mov	r0, r3
 8008880:	371c      	adds	r7, #28
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10b      	bne.n	80088b4 <vQueueDelete+0x2a>
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	b672      	cpsid	i
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	b662      	cpsie	i
 80088b0:	60bb      	str	r3, [r7, #8]
 80088b2:	e7fe      	b.n	80088b2 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f95d 	bl	8008b74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d102      	bne.n	80088ca <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f002 f801 	bl	800a8cc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d006      	beq.n	80088f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	e001      	b.n	80088f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80088f4:	68fb      	ldr	r3, [r7, #12]
	}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10d      	bne.n	800893c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d14d      	bne.n	80089c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	4618      	mov	r0, r3
 800892e:	f001 f82d 	bl	800998c <xTaskPriorityDisinherit>
 8008932:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	609a      	str	r2, [r3, #8]
 800893a:	e043      	b.n	80089c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d119      	bne.n	8008976 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6858      	ldr	r0, [r3, #4]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894a:	461a      	mov	r2, r3
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	f002 f907 	bl	800ab60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	441a      	add	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	429a      	cmp	r2, r3
 800896a:	d32b      	bcc.n	80089c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	605a      	str	r2, [r3, #4]
 8008974:	e026      	b.n	80089c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	68d8      	ldr	r0, [r3, #12]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897e:	461a      	mov	r2, r3
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	f002 f8ed 	bl	800ab60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	425b      	negs	r3, r3
 8008990:	441a      	add	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d207      	bcs.n	80089b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	425b      	negs	r3, r3
 80089ac:	441a      	add	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d105      	bne.n	80089c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089cc:	697b      	ldr	r3, [r7, #20]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d018      	beq.n	8008a1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68da      	ldr	r2, [r3, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f0:	441a      	add	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d303      	bcc.n	8008a0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68d9      	ldr	r1, [r3, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	461a      	mov	r2, r3
 8008a14:	6838      	ldr	r0, [r7, #0]
 8008a16:	f002 f8a3 	bl	800ab60 <memcpy>
	}
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a2a:	f001 fd65 	bl	800a4f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a36:	e011      	b.n	8008a5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d012      	beq.n	8008a66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3324      	adds	r3, #36	; 0x24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fd5d 	bl	8009504 <xTaskRemoveFromEventList>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a50:	f000 fe36 	bl	80096c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	dce9      	bgt.n	8008a38 <prvUnlockQueue+0x16>
 8008a64:	e000      	b.n	8008a68 <prvUnlockQueue+0x46>
					break;
 8008a66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	22ff      	movs	r2, #255	; 0xff
 8008a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a70:	f001 fd74 	bl	800a55c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a74:	f001 fd40 	bl	800a4f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a80:	e011      	b.n	8008aa6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d012      	beq.n	8008ab0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3310      	adds	r3, #16
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fd38 	bl	8009504 <xTaskRemoveFromEventList>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a9a:	f000 fe11 	bl	80096c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dce9      	bgt.n	8008a82 <prvUnlockQueue+0x60>
 8008aae:	e000      	b.n	8008ab2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ab0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	22ff      	movs	r2, #255	; 0xff
 8008ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008aba:	f001 fd4f 	bl	800a55c <vPortExitCritical>
}
 8008abe:	bf00      	nop
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ace:	f001 fd13 	bl	800a4f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ada:	2301      	movs	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	e001      	b.n	8008ae4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ae4:	f001 fd3a 	bl	800a55c <vPortExitCritical>

	return xReturn;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008afa:	f001 fcfd 	bl	800a4f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d102      	bne.n	8008b10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e001      	b.n	8008b14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b10:	2300      	movs	r3, #0
 8008b12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b14:	f001 fd22 	bl	800a55c <vPortExitCritical>

	return xReturn;
 8008b18:	68fb      	ldr	r3, [r7, #12]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	e014      	b.n	8008b5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b34:	4a0e      	ldr	r2, [pc, #56]	; (8008b70 <vQueueAddToRegistry+0x4c>)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10b      	bne.n	8008b58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b40:	490b      	ldr	r1, [pc, #44]	; (8008b70 <vQueueAddToRegistry+0x4c>)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b4a:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <vQueueAddToRegistry+0x4c>)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	00db      	lsls	r3, r3, #3
 8008b50:	4413      	add	r3, r2
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b56:	e005      	b.n	8008b64 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b07      	cmp	r3, #7
 8008b62:	d9e7      	bls.n	8008b34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b64:	bf00      	nop
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	20004ccc 	.word	0x20004ccc

08008b74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	e016      	b.n	8008bb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008b82:	4a10      	ldr	r2, [pc, #64]	; (8008bc4 <vQueueUnregisterQueue+0x50>)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4413      	add	r3, r2
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d10b      	bne.n	8008baa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008b92:	4a0c      	ldr	r2, [pc, #48]	; (8008bc4 <vQueueUnregisterQueue+0x50>)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2100      	movs	r1, #0
 8008b98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008b9c:	4a09      	ldr	r2, [pc, #36]	; (8008bc4 <vQueueUnregisterQueue+0x50>)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	00db      	lsls	r3, r3, #3
 8008ba2:	4413      	add	r3, r2
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	605a      	str	r2, [r3, #4]
				break;
 8008ba8:	e005      	b.n	8008bb6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3301      	adds	r3, #1
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b07      	cmp	r3, #7
 8008bb4:	d9e5      	bls.n	8008b82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008bb6:	bf00      	nop
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	20004ccc 	.word	0x20004ccc

08008bc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008bd8:	f001 fc8e 	bl	800a4f8 <vPortEnterCritical>
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008be2:	b25b      	sxtb	r3, r3
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be8:	d103      	bne.n	8008bf2 <vQueueWaitForMessageRestricted+0x2a>
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bf8:	b25b      	sxtb	r3, r3
 8008bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bfe:	d103      	bne.n	8008c08 <vQueueWaitForMessageRestricted+0x40>
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c08:	f001 fca8 	bl	800a55c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d106      	bne.n	8008c22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	3324      	adds	r3, #36	; 0x24
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	68b9      	ldr	r1, [r7, #8]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 fc45 	bl	80094ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c22:	6978      	ldr	r0, [r7, #20]
 8008c24:	f7ff fefd 	bl	8008a22 <prvUnlockQueue>
	}
 8008c28:	bf00      	nop
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08e      	sub	sp, #56	; 0x38
 8008c34:	af04      	add	r7, sp, #16
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10b      	bne.n	8008c5c <xTaskCreateStatic+0x2c>
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	b672      	cpsid	i
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	b662      	cpsie	i
 8008c58:	623b      	str	r3, [r7, #32]
 8008c5a:	e7fe      	b.n	8008c5a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10b      	bne.n	8008c7a <xTaskCreateStatic+0x4a>
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	b672      	cpsid	i
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	b662      	cpsie	i
 8008c76:	61fb      	str	r3, [r7, #28]
 8008c78:	e7fe      	b.n	8008c78 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c7a:	235c      	movs	r3, #92	; 0x5c
 8008c7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	2b5c      	cmp	r3, #92	; 0x5c
 8008c82:	d00b      	beq.n	8008c9c <xTaskCreateStatic+0x6c>
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	b672      	cpsid	i
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	b662      	cpsie	i
 8008c98:	61bb      	str	r3, [r7, #24]
 8008c9a:	e7fe      	b.n	8008c9a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d01e      	beq.n	8008ce2 <xTaskCreateStatic+0xb2>
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d01b      	beq.n	8008ce2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9303      	str	r3, [sp, #12]
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	9302      	str	r3, [sp, #8]
 8008cc4:	f107 0314 	add.w	r3, r7, #20
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 f850 	bl	8008d7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cdc:	f000 f8de 	bl	8008e9c <prvAddNewTaskToReadyList>
 8008ce0:	e001      	b.n	8008ce6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ce6:	697b      	ldr	r3, [r7, #20]
	}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3728      	adds	r7, #40	; 0x28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08c      	sub	sp, #48	; 0x30
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	603b      	str	r3, [r7, #0]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d00:	88fb      	ldrh	r3, [r7, #6]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 fd19 	bl	800a73c <pvPortMalloc>
 8008d0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00e      	beq.n	8008d30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d12:	205c      	movs	r0, #92	; 0x5c
 8008d14:	f001 fd12 	bl	800a73c <pvPortMalloc>
 8008d18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	631a      	str	r2, [r3, #48]	; 0x30
 8008d26:	e005      	b.n	8008d34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d28:	6978      	ldr	r0, [r7, #20]
 8008d2a:	f001 fdcf 	bl	800a8cc <vPortFree>
 8008d2e:	e001      	b.n	8008d34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d017      	beq.n	8008d6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d42:	88fa      	ldrh	r2, [r7, #6]
 8008d44:	2300      	movs	r3, #0
 8008d46:	9303      	str	r3, [sp, #12]
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	9302      	str	r3, [sp, #8]
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	68b9      	ldr	r1, [r7, #8]
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f80e 	bl	8008d7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d5e:	69f8      	ldr	r0, [r7, #28]
 8008d60:	f000 f89c 	bl	8008e9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d64:	2301      	movs	r3, #1
 8008d66:	61bb      	str	r3, [r7, #24]
 8008d68:	e002      	b.n	8008d70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d70:	69bb      	ldr	r3, [r7, #24]
	}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3720      	adds	r7, #32
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b088      	sub	sp, #32
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	607a      	str	r2, [r7, #4]
 8008d86:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	461a      	mov	r2, r3
 8008d92:	21a5      	movs	r1, #165	; 0xa5
 8008d94:	f001 feef 	bl	800ab76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008da2:	440b      	add	r3, r1
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	f023 0307 	bic.w	r3, r3, #7
 8008db0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	f003 0307 	and.w	r3, r3, #7
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <prvInitialiseNewTask+0x5a>
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	b672      	cpsid	i
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	b662      	cpsie	i
 8008dd0:	617b      	str	r3, [r7, #20]
 8008dd2:	e7fe      	b.n	8008dd2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d01f      	beq.n	8008e1a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dda:	2300      	movs	r3, #0
 8008ddc:	61fb      	str	r3, [r7, #28]
 8008dde:	e012      	b.n	8008e06 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	4413      	add	r3, r2
 8008de6:	7819      	ldrb	r1, [r3, #0]
 8008de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	4413      	add	r3, r2
 8008dee:	3334      	adds	r3, #52	; 0x34
 8008df0:	460a      	mov	r2, r1
 8008df2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	4413      	add	r3, r2
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d006      	beq.n	8008e0e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	3301      	adds	r3, #1
 8008e04:	61fb      	str	r3, [r7, #28]
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	2b0f      	cmp	r3, #15
 8008e0a:	d9e9      	bls.n	8008de0 <prvInitialiseNewTask+0x66>
 8008e0c:	e000      	b.n	8008e10 <prvInitialiseNewTask+0x96>
			{
				break;
 8008e0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e18:	e003      	b.n	8008e22 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	2b37      	cmp	r3, #55	; 0x37
 8008e26:	d901      	bls.n	8008e2c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e28:	2337      	movs	r3, #55	; 0x37
 8008e2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	3304      	adds	r3, #4
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe fdf0 	bl	8007a28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	3318      	adds	r3, #24
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe fdeb 	bl	8007a28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	68f9      	ldr	r1, [r7, #12]
 8008e7a:	69b8      	ldr	r0, [r7, #24]
 8008e7c:	f001 fa36 	bl	800a2ec <pxPortInitialiseStack>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e92:	bf00      	nop
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
	...

08008e9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ea4:	f001 fb28 	bl	800a4f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ea8:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <prvAddNewTaskToReadyList+0xc4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3301      	adds	r3, #1
 8008eae:	4a2c      	ldr	r2, [pc, #176]	; (8008f60 <prvAddNewTaskToReadyList+0xc4>)
 8008eb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008eb2:	4b2c      	ldr	r3, [pc, #176]	; (8008f64 <prvAddNewTaskToReadyList+0xc8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008eba:	4a2a      	ldr	r2, [pc, #168]	; (8008f64 <prvAddNewTaskToReadyList+0xc8>)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ec0:	4b27      	ldr	r3, [pc, #156]	; (8008f60 <prvAddNewTaskToReadyList+0xc4>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d110      	bne.n	8008eea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ec8:	f000 fc1e 	bl	8009708 <prvInitialiseTaskLists>
 8008ecc:	e00d      	b.n	8008eea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ece:	4b26      	ldr	r3, [pc, #152]	; (8008f68 <prvAddNewTaskToReadyList+0xcc>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d109      	bne.n	8008eea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ed6:	4b23      	ldr	r3, [pc, #140]	; (8008f64 <prvAddNewTaskToReadyList+0xc8>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d802      	bhi.n	8008eea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ee4:	4a1f      	ldr	r2, [pc, #124]	; (8008f64 <prvAddNewTaskToReadyList+0xc8>)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eea:	4b20      	ldr	r3, [pc, #128]	; (8008f6c <prvAddNewTaskToReadyList+0xd0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	4a1e      	ldr	r2, [pc, #120]	; (8008f6c <prvAddNewTaskToReadyList+0xd0>)
 8008ef2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ef4:	4b1d      	ldr	r3, [pc, #116]	; (8008f6c <prvAddNewTaskToReadyList+0xd0>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	4b1b      	ldr	r3, [pc, #108]	; (8008f70 <prvAddNewTaskToReadyList+0xd4>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d903      	bls.n	8008f10 <prvAddNewTaskToReadyList+0x74>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	4a18      	ldr	r2, [pc, #96]	; (8008f70 <prvAddNewTaskToReadyList+0xd4>)
 8008f0e:	6013      	str	r3, [r2, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4a15      	ldr	r2, [pc, #84]	; (8008f74 <prvAddNewTaskToReadyList+0xd8>)
 8008f1e:	441a      	add	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f7fe fd8b 	bl	8007a42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f2c:	f001 fb16 	bl	800a55c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f30:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <prvAddNewTaskToReadyList+0xcc>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00e      	beq.n	8008f56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <prvAddNewTaskToReadyList+0xc8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d207      	bcs.n	8008f56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f46:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <prvAddNewTaskToReadyList+0xdc>)
 8008f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000c70 	.word	0x20000c70
 8008f64:	2000079c 	.word	0x2000079c
 8008f68:	20000c7c 	.word	0x20000c7c
 8008f6c:	20000c8c 	.word	0x20000c8c
 8008f70:	20000c78 	.word	0x20000c78
 8008f74:	200007a0 	.word	0x200007a0
 8008f78:	e000ed04 	.word	0xe000ed04

08008f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f84:	2300      	movs	r3, #0
 8008f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d018      	beq.n	8008fc0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f8e:	4b14      	ldr	r3, [pc, #80]	; (8008fe0 <vTaskDelay+0x64>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <vTaskDelay+0x32>
 8008f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9a:	b672      	cpsid	i
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	b662      	cpsie	i
 8008faa:	60bb      	str	r3, [r7, #8]
 8008fac:	e7fe      	b.n	8008fac <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008fae:	f000 f883 	bl	80090b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fdf1 	bl	8009b9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fba:	f000 f88b 	bl	80090d4 <xTaskResumeAll>
 8008fbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d107      	bne.n	8008fd6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008fc6:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <vTaskDelay+0x68>)
 8008fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000c98 	.word	0x20000c98
 8008fe4:	e000ed04 	.word	0xe000ed04

08008fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	; 0x28
 8008fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ff6:	463a      	mov	r2, r7
 8008ff8:	1d39      	adds	r1, r7, #4
 8008ffa:	f107 0308 	add.w	r3, r7, #8
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fcbe 	bl	8007980 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	9202      	str	r2, [sp, #8]
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	2300      	movs	r3, #0
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	2300      	movs	r3, #0
 8009014:	460a      	mov	r2, r1
 8009016:	4922      	ldr	r1, [pc, #136]	; (80090a0 <vTaskStartScheduler+0xb8>)
 8009018:	4822      	ldr	r0, [pc, #136]	; (80090a4 <vTaskStartScheduler+0xbc>)
 800901a:	f7ff fe09 	bl	8008c30 <xTaskCreateStatic>
 800901e:	4602      	mov	r2, r0
 8009020:	4b21      	ldr	r3, [pc, #132]	; (80090a8 <vTaskStartScheduler+0xc0>)
 8009022:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009024:	4b20      	ldr	r3, [pc, #128]	; (80090a8 <vTaskStartScheduler+0xc0>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800902c:	2301      	movs	r3, #1
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	e001      	b.n	8009036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009032:	2300      	movs	r3, #0
 8009034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d102      	bne.n	8009042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800903c:	f000 fe02 	bl	8009c44 <xTimerCreateTimerTask>
 8009040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d117      	bne.n	8009078 <vTaskStartScheduler+0x90>
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	b672      	cpsid	i
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	b662      	cpsie	i
 800905c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800905e:	4b13      	ldr	r3, [pc, #76]	; (80090ac <vTaskStartScheduler+0xc4>)
 8009060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009064:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009066:	4b12      	ldr	r3, [pc, #72]	; (80090b0 <vTaskStartScheduler+0xc8>)
 8009068:	2201      	movs	r2, #1
 800906a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800906c:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <vTaskStartScheduler+0xcc>)
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009072:	f001 f9c5 	bl	800a400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009076:	e00f      	b.n	8009098 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800907e:	d10b      	bne.n	8009098 <vTaskStartScheduler+0xb0>
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	b672      	cpsid	i
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	b662      	cpsie	i
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e7fe      	b.n	8009096 <vTaskStartScheduler+0xae>
}
 8009098:	bf00      	nop
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	0800b5fc 	.word	0x0800b5fc
 80090a4:	080096d9 	.word	0x080096d9
 80090a8:	20000c94 	.word	0x20000c94
 80090ac:	20000c90 	.word	0x20000c90
 80090b0:	20000c7c 	.word	0x20000c7c
 80090b4:	20000c74 	.word	0x20000c74

080090b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80090bc:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <vTaskSuspendAll+0x18>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	4a03      	ldr	r2, [pc, #12]	; (80090d0 <vTaskSuspendAll+0x18>)
 80090c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80090c6:	bf00      	nop
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	20000c98 	.word	0x20000c98

080090d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090de:	2300      	movs	r3, #0
 80090e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090e2:	4b42      	ldr	r3, [pc, #264]	; (80091ec <xTaskResumeAll+0x118>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <xTaskResumeAll+0x2e>
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	b672      	cpsid	i
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	b662      	cpsie	i
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	e7fe      	b.n	8009100 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009102:	f001 f9f9 	bl	800a4f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009106:	4b39      	ldr	r3, [pc, #228]	; (80091ec <xTaskResumeAll+0x118>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3b01      	subs	r3, #1
 800910c:	4a37      	ldr	r2, [pc, #220]	; (80091ec <xTaskResumeAll+0x118>)
 800910e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009110:	4b36      	ldr	r3, [pc, #216]	; (80091ec <xTaskResumeAll+0x118>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d162      	bne.n	80091de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009118:	4b35      	ldr	r3, [pc, #212]	; (80091f0 <xTaskResumeAll+0x11c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d05e      	beq.n	80091de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009120:	e02f      	b.n	8009182 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009122:	4b34      	ldr	r3, [pc, #208]	; (80091f4 <xTaskResumeAll+0x120>)
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3318      	adds	r3, #24
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe fce4 	bl	8007afc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3304      	adds	r3, #4
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe fcdf 	bl	8007afc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	4b2d      	ldr	r3, [pc, #180]	; (80091f8 <xTaskResumeAll+0x124>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d903      	bls.n	8009152 <xTaskResumeAll+0x7e>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914e:	4a2a      	ldr	r2, [pc, #168]	; (80091f8 <xTaskResumeAll+0x124>)
 8009150:	6013      	str	r3, [r2, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009156:	4613      	mov	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4a27      	ldr	r2, [pc, #156]	; (80091fc <xTaskResumeAll+0x128>)
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3304      	adds	r3, #4
 8009166:	4619      	mov	r1, r3
 8009168:	4610      	mov	r0, r2
 800916a:	f7fe fc6a 	bl	8007a42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009172:	4b23      	ldr	r3, [pc, #140]	; (8009200 <xTaskResumeAll+0x12c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	429a      	cmp	r2, r3
 800917a:	d302      	bcc.n	8009182 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800917c:	4b21      	ldr	r3, [pc, #132]	; (8009204 <xTaskResumeAll+0x130>)
 800917e:	2201      	movs	r2, #1
 8009180:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009182:	4b1c      	ldr	r3, [pc, #112]	; (80091f4 <xTaskResumeAll+0x120>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1cb      	bne.n	8009122 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009190:	f000 fb56 	bl	8009840 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009194:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <xTaskResumeAll+0x134>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d010      	beq.n	80091c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091a0:	f000 f846 	bl	8009230 <xTaskIncrementTick>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80091aa:	4b16      	ldr	r3, [pc, #88]	; (8009204 <xTaskResumeAll+0x130>)
 80091ac:	2201      	movs	r2, #1
 80091ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1f1      	bne.n	80091a0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80091bc:	4b12      	ldr	r3, [pc, #72]	; (8009208 <xTaskResumeAll+0x134>)
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091c2:	4b10      	ldr	r3, [pc, #64]	; (8009204 <xTaskResumeAll+0x130>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d009      	beq.n	80091de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091ca:	2301      	movs	r3, #1
 80091cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091ce:	4b0f      	ldr	r3, [pc, #60]	; (800920c <xTaskResumeAll+0x138>)
 80091d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091de:	f001 f9bd 	bl	800a55c <vPortExitCritical>

	return xAlreadyYielded;
 80091e2:	68bb      	ldr	r3, [r7, #8]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000c98 	.word	0x20000c98
 80091f0:	20000c70 	.word	0x20000c70
 80091f4:	20000c30 	.word	0x20000c30
 80091f8:	20000c78 	.word	0x20000c78
 80091fc:	200007a0 	.word	0x200007a0
 8009200:	2000079c 	.word	0x2000079c
 8009204:	20000c84 	.word	0x20000c84
 8009208:	20000c80 	.word	0x20000c80
 800920c:	e000ed04 	.word	0xe000ed04

08009210 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009216:	4b05      	ldr	r3, [pc, #20]	; (800922c <xTaskGetTickCount+0x1c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800921c:	687b      	ldr	r3, [r7, #4]
}
 800921e:	4618      	mov	r0, r3
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	20000c74 	.word	0x20000c74

08009230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009236:	2300      	movs	r3, #0
 8009238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800923a:	4b4f      	ldr	r3, [pc, #316]	; (8009378 <xTaskIncrementTick+0x148>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f040 808a 	bne.w	8009358 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009244:	4b4d      	ldr	r3, [pc, #308]	; (800937c <xTaskIncrementTick+0x14c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3301      	adds	r3, #1
 800924a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800924c:	4a4b      	ldr	r2, [pc, #300]	; (800937c <xTaskIncrementTick+0x14c>)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d121      	bne.n	800929c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009258:	4b49      	ldr	r3, [pc, #292]	; (8009380 <xTaskIncrementTick+0x150>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00b      	beq.n	800927a <xTaskIncrementTick+0x4a>
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	b672      	cpsid	i
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	b662      	cpsie	i
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	e7fe      	b.n	8009278 <xTaskIncrementTick+0x48>
 800927a:	4b41      	ldr	r3, [pc, #260]	; (8009380 <xTaskIncrementTick+0x150>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	60fb      	str	r3, [r7, #12]
 8009280:	4b40      	ldr	r3, [pc, #256]	; (8009384 <xTaskIncrementTick+0x154>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a3e      	ldr	r2, [pc, #248]	; (8009380 <xTaskIncrementTick+0x150>)
 8009286:	6013      	str	r3, [r2, #0]
 8009288:	4a3e      	ldr	r2, [pc, #248]	; (8009384 <xTaskIncrementTick+0x154>)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	4b3e      	ldr	r3, [pc, #248]	; (8009388 <xTaskIncrementTick+0x158>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	4a3c      	ldr	r2, [pc, #240]	; (8009388 <xTaskIncrementTick+0x158>)
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	f000 fad2 	bl	8009840 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800929c:	4b3b      	ldr	r3, [pc, #236]	; (800938c <xTaskIncrementTick+0x15c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d349      	bcc.n	800933a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a6:	4b36      	ldr	r3, [pc, #216]	; (8009380 <xTaskIncrementTick+0x150>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d104      	bne.n	80092ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b0:	4b36      	ldr	r3, [pc, #216]	; (800938c <xTaskIncrementTick+0x15c>)
 80092b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092b6:	601a      	str	r2, [r3, #0]
					break;
 80092b8:	e03f      	b.n	800933a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ba:	4b31      	ldr	r3, [pc, #196]	; (8009380 <xTaskIncrementTick+0x150>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d203      	bcs.n	80092da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092d2:	4a2e      	ldr	r2, [pc, #184]	; (800938c <xTaskIncrementTick+0x15c>)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092d8:	e02f      	b.n	800933a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	3304      	adds	r3, #4
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fc0c 	bl	8007afc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	3318      	adds	r3, #24
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fe fc03 	bl	8007afc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fa:	4b25      	ldr	r3, [pc, #148]	; (8009390 <xTaskIncrementTick+0x160>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d903      	bls.n	800930a <xTaskIncrementTick+0xda>
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009306:	4a22      	ldr	r2, [pc, #136]	; (8009390 <xTaskIncrementTick+0x160>)
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4a1f      	ldr	r2, [pc, #124]	; (8009394 <xTaskIncrementTick+0x164>)
 8009318:	441a      	add	r2, r3
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	3304      	adds	r3, #4
 800931e:	4619      	mov	r1, r3
 8009320:	4610      	mov	r0, r2
 8009322:	f7fe fb8e 	bl	8007a42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932a:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <xTaskIncrementTick+0x168>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009330:	429a      	cmp	r2, r3
 8009332:	d3b8      	bcc.n	80092a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009334:	2301      	movs	r3, #1
 8009336:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009338:	e7b5      	b.n	80092a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800933a:	4b17      	ldr	r3, [pc, #92]	; (8009398 <xTaskIncrementTick+0x168>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009340:	4914      	ldr	r1, [pc, #80]	; (8009394 <xTaskIncrementTick+0x164>)
 8009342:	4613      	mov	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	440b      	add	r3, r1
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d907      	bls.n	8009362 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e004      	b.n	8009362 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009358:	4b10      	ldr	r3, [pc, #64]	; (800939c <xTaskIncrementTick+0x16c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3301      	adds	r3, #1
 800935e:	4a0f      	ldr	r2, [pc, #60]	; (800939c <xTaskIncrementTick+0x16c>)
 8009360:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009362:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <xTaskIncrementTick+0x170>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800936a:	2301      	movs	r3, #1
 800936c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800936e:	697b      	ldr	r3, [r7, #20]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000c98 	.word	0x20000c98
 800937c:	20000c74 	.word	0x20000c74
 8009380:	20000c28 	.word	0x20000c28
 8009384:	20000c2c 	.word	0x20000c2c
 8009388:	20000c88 	.word	0x20000c88
 800938c:	20000c90 	.word	0x20000c90
 8009390:	20000c78 	.word	0x20000c78
 8009394:	200007a0 	.word	0x200007a0
 8009398:	2000079c 	.word	0x2000079c
 800939c:	20000c80 	.word	0x20000c80
 80093a0:	20000c84 	.word	0x20000c84

080093a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093aa:	4b28      	ldr	r3, [pc, #160]	; (800944c <vTaskSwitchContext+0xa8>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093b2:	4b27      	ldr	r3, [pc, #156]	; (8009450 <vTaskSwitchContext+0xac>)
 80093b4:	2201      	movs	r2, #1
 80093b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093b8:	e042      	b.n	8009440 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80093ba:	4b25      	ldr	r3, [pc, #148]	; (8009450 <vTaskSwitchContext+0xac>)
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c0:	4b24      	ldr	r3, [pc, #144]	; (8009454 <vTaskSwitchContext+0xb0>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	e011      	b.n	80093ec <vTaskSwitchContext+0x48>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10b      	bne.n	80093e6 <vTaskSwitchContext+0x42>
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	b672      	cpsid	i
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	b662      	cpsie	i
 80093e2:	607b      	str	r3, [r7, #4]
 80093e4:	e7fe      	b.n	80093e4 <vTaskSwitchContext+0x40>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	491a      	ldr	r1, [pc, #104]	; (8009458 <vTaskSwitchContext+0xb4>)
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0e3      	beq.n	80093c8 <vTaskSwitchContext+0x24>
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4a13      	ldr	r2, [pc, #76]	; (8009458 <vTaskSwitchContext+0xb4>)
 800940c:	4413      	add	r3, r2
 800940e:	60bb      	str	r3, [r7, #8]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	605a      	str	r2, [r3, #4]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	3308      	adds	r3, #8
 8009422:	429a      	cmp	r2, r3
 8009424:	d104      	bne.n	8009430 <vTaskSwitchContext+0x8c>
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	605a      	str	r2, [r3, #4]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	4a09      	ldr	r2, [pc, #36]	; (800945c <vTaskSwitchContext+0xb8>)
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	4a06      	ldr	r2, [pc, #24]	; (8009454 <vTaskSwitchContext+0xb0>)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6013      	str	r3, [r2, #0]
}
 8009440:	bf00      	nop
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	20000c98 	.word	0x20000c98
 8009450:	20000c84 	.word	0x20000c84
 8009454:	20000c78 	.word	0x20000c78
 8009458:	200007a0 	.word	0x200007a0
 800945c:	2000079c 	.word	0x2000079c

08009460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10b      	bne.n	8009488 <vTaskPlaceOnEventList+0x28>
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	b672      	cpsid	i
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	b662      	cpsie	i
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	e7fe      	b.n	8009486 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009488:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <vTaskPlaceOnEventList+0x48>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3318      	adds	r3, #24
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7fe fafa 	bl	8007a8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009496:	2101      	movs	r1, #1
 8009498:	6838      	ldr	r0, [r7, #0]
 800949a:	f000 fb7f 	bl	8009b9c <prvAddCurrentTaskToDelayedList>
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	2000079c 	.word	0x2000079c

080094ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10b      	bne.n	80094d6 <vTaskPlaceOnEventListRestricted+0x2a>
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	b672      	cpsid	i
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	b662      	cpsie	i
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	e7fe      	b.n	80094d4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094d6:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <vTaskPlaceOnEventListRestricted+0x54>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3318      	adds	r3, #24
 80094dc:	4619      	mov	r1, r3
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7fe faaf 	bl	8007a42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80094ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	68b8      	ldr	r0, [r7, #8]
 80094f4:	f000 fb52 	bl	8009b9c <prvAddCurrentTaskToDelayedList>
	}
 80094f8:	bf00      	nop
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	2000079c 	.word	0x2000079c

08009504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10b      	bne.n	8009532 <xTaskRemoveFromEventList+0x2e>
 800951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951e:	b672      	cpsid	i
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	b662      	cpsie	i
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	e7fe      	b.n	8009530 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3318      	adds	r3, #24
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fae0 	bl	8007afc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800953c:	4b1d      	ldr	r3, [pc, #116]	; (80095b4 <xTaskRemoveFromEventList+0xb0>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d11d      	bne.n	8009580 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	3304      	adds	r3, #4
 8009548:	4618      	mov	r0, r3
 800954a:	f7fe fad7 	bl	8007afc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	4b19      	ldr	r3, [pc, #100]	; (80095b8 <xTaskRemoveFromEventList+0xb4>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d903      	bls.n	8009562 <xTaskRemoveFromEventList+0x5e>
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	4a16      	ldr	r2, [pc, #88]	; (80095b8 <xTaskRemoveFromEventList+0xb4>)
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4a13      	ldr	r2, [pc, #76]	; (80095bc <xTaskRemoveFromEventList+0xb8>)
 8009570:	441a      	add	r2, r3
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	3304      	adds	r3, #4
 8009576:	4619      	mov	r1, r3
 8009578:	4610      	mov	r0, r2
 800957a:	f7fe fa62 	bl	8007a42 <vListInsertEnd>
 800957e:	e005      	b.n	800958c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	3318      	adds	r3, #24
 8009584:	4619      	mov	r1, r3
 8009586:	480e      	ldr	r0, [pc, #56]	; (80095c0 <xTaskRemoveFromEventList+0xbc>)
 8009588:	f7fe fa5b 	bl	8007a42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009590:	4b0c      	ldr	r3, [pc, #48]	; (80095c4 <xTaskRemoveFromEventList+0xc0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009596:	429a      	cmp	r2, r3
 8009598:	d905      	bls.n	80095a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800959a:	2301      	movs	r3, #1
 800959c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800959e:	4b0a      	ldr	r3, [pc, #40]	; (80095c8 <xTaskRemoveFromEventList+0xc4>)
 80095a0:	2201      	movs	r2, #1
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	e001      	b.n	80095aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095aa:	697b      	ldr	r3, [r7, #20]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000c98 	.word	0x20000c98
 80095b8:	20000c78 	.word	0x20000c78
 80095bc:	200007a0 	.word	0x200007a0
 80095c0:	20000c30 	.word	0x20000c30
 80095c4:	2000079c 	.word	0x2000079c
 80095c8:	20000c84 	.word	0x20000c84

080095cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095d4:	4b06      	ldr	r3, [pc, #24]	; (80095f0 <vTaskInternalSetTimeOutState+0x24>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095dc:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <vTaskInternalSetTimeOutState+0x28>)
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	605a      	str	r2, [r3, #4]
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	20000c88 	.word	0x20000c88
 80095f4:	20000c74 	.word	0x20000c74

080095f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10b      	bne.n	8009620 <xTaskCheckForTimeOut+0x28>
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	b672      	cpsid	i
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	b662      	cpsie	i
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	e7fe      	b.n	800961e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10b      	bne.n	800963e <xTaskCheckForTimeOut+0x46>
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	b672      	cpsid	i
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	b662      	cpsie	i
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	e7fe      	b.n	800963c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800963e:	f000 ff5b 	bl	800a4f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009642:	4b1d      	ldr	r3, [pc, #116]	; (80096b8 <xTaskCheckForTimeOut+0xc0>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800965a:	d102      	bne.n	8009662 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800965c:	2300      	movs	r3, #0
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	e023      	b.n	80096aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	4b15      	ldr	r3, [pc, #84]	; (80096bc <xTaskCheckForTimeOut+0xc4>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d007      	beq.n	800967e <xTaskCheckForTimeOut+0x86>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	429a      	cmp	r2, r3
 8009676:	d302      	bcc.n	800967e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	61fb      	str	r3, [r7, #28]
 800967c:	e015      	b.n	80096aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	429a      	cmp	r2, r3
 8009686:	d20b      	bcs.n	80096a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	1ad2      	subs	r2, r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ff99 	bl	80095cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800969a:	2300      	movs	r3, #0
 800969c:	61fb      	str	r3, [r7, #28]
 800969e:	e004      	b.n	80096aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096a6:	2301      	movs	r3, #1
 80096a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096aa:	f000 ff57 	bl	800a55c <vPortExitCritical>

	return xReturn;
 80096ae:	69fb      	ldr	r3, [r7, #28]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3720      	adds	r7, #32
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20000c74 	.word	0x20000c74
 80096bc:	20000c88 	.word	0x20000c88

080096c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096c0:	b480      	push	{r7}
 80096c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096c4:	4b03      	ldr	r3, [pc, #12]	; (80096d4 <vTaskMissedYield+0x14>)
 80096c6:	2201      	movs	r2, #1
 80096c8:	601a      	str	r2, [r3, #0]
}
 80096ca:	bf00      	nop
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	20000c84 	.word	0x20000c84

080096d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096e0:	f000 f852 	bl	8009788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096e4:	4b06      	ldr	r3, [pc, #24]	; (8009700 <prvIdleTask+0x28>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d9f9      	bls.n	80096e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096ec:	4b05      	ldr	r3, [pc, #20]	; (8009704 <prvIdleTask+0x2c>)
 80096ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096fc:	e7f0      	b.n	80096e0 <prvIdleTask+0x8>
 80096fe:	bf00      	nop
 8009700:	200007a0 	.word	0x200007a0
 8009704:	e000ed04 	.word	0xe000ed04

08009708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800970e:	2300      	movs	r3, #0
 8009710:	607b      	str	r3, [r7, #4]
 8009712:	e00c      	b.n	800972e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4a12      	ldr	r2, [pc, #72]	; (8009768 <prvInitialiseTaskLists+0x60>)
 8009720:	4413      	add	r3, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe f960 	bl	80079e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3301      	adds	r3, #1
 800972c:	607b      	str	r3, [r7, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b37      	cmp	r3, #55	; 0x37
 8009732:	d9ef      	bls.n	8009714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009734:	480d      	ldr	r0, [pc, #52]	; (800976c <prvInitialiseTaskLists+0x64>)
 8009736:	f7fe f957 	bl	80079e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800973a:	480d      	ldr	r0, [pc, #52]	; (8009770 <prvInitialiseTaskLists+0x68>)
 800973c:	f7fe f954 	bl	80079e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009740:	480c      	ldr	r0, [pc, #48]	; (8009774 <prvInitialiseTaskLists+0x6c>)
 8009742:	f7fe f951 	bl	80079e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009746:	480c      	ldr	r0, [pc, #48]	; (8009778 <prvInitialiseTaskLists+0x70>)
 8009748:	f7fe f94e 	bl	80079e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800974c:	480b      	ldr	r0, [pc, #44]	; (800977c <prvInitialiseTaskLists+0x74>)
 800974e:	f7fe f94b 	bl	80079e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009752:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <prvInitialiseTaskLists+0x78>)
 8009754:	4a05      	ldr	r2, [pc, #20]	; (800976c <prvInitialiseTaskLists+0x64>)
 8009756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <prvInitialiseTaskLists+0x7c>)
 800975a:	4a05      	ldr	r2, [pc, #20]	; (8009770 <prvInitialiseTaskLists+0x68>)
 800975c:	601a      	str	r2, [r3, #0]
}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	200007a0 	.word	0x200007a0
 800976c:	20000c00 	.word	0x20000c00
 8009770:	20000c14 	.word	0x20000c14
 8009774:	20000c30 	.word	0x20000c30
 8009778:	20000c44 	.word	0x20000c44
 800977c:	20000c5c 	.word	0x20000c5c
 8009780:	20000c28 	.word	0x20000c28
 8009784:	20000c2c 	.word	0x20000c2c

08009788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800978e:	e019      	b.n	80097c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009790:	f000 feb2 	bl	800a4f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009794:	4b0f      	ldr	r3, [pc, #60]	; (80097d4 <prvCheckTasksWaitingTermination+0x4c>)
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3304      	adds	r3, #4
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe f9ab 	bl	8007afc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097a6:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <prvCheckTasksWaitingTermination+0x50>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	4a0a      	ldr	r2, [pc, #40]	; (80097d8 <prvCheckTasksWaitingTermination+0x50>)
 80097ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <prvCheckTasksWaitingTermination+0x54>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	4a09      	ldr	r2, [pc, #36]	; (80097dc <prvCheckTasksWaitingTermination+0x54>)
 80097b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097ba:	f000 fecf 	bl	800a55c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f80e 	bl	80097e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097c4:	4b05      	ldr	r3, [pc, #20]	; (80097dc <prvCheckTasksWaitingTermination+0x54>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e1      	bne.n	8009790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097cc:	bf00      	nop
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20000c44 	.word	0x20000c44
 80097d8:	20000c70 	.word	0x20000c70
 80097dc:	20000c58 	.word	0x20000c58

080097e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d108      	bne.n	8009804 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f6:	4618      	mov	r0, r3
 80097f8:	f001 f868 	bl	800a8cc <vPortFree>
				vPortFree( pxTCB );
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 f865 	bl	800a8cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009802:	e019      	b.n	8009838 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800980a:	2b01      	cmp	r3, #1
 800980c:	d103      	bne.n	8009816 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f001 f85c 	bl	800a8cc <vPortFree>
	}
 8009814:	e010      	b.n	8009838 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800981c:	2b02      	cmp	r3, #2
 800981e:	d00b      	beq.n	8009838 <prvDeleteTCB+0x58>
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	b672      	cpsid	i
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	b662      	cpsie	i
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	e7fe      	b.n	8009836 <prvDeleteTCB+0x56>
	}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009846:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <prvResetNextTaskUnblockTime+0x38>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <prvResetNextTaskUnblockTime+0x3c>)
 8009852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009856:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009858:	e008      	b.n	800986c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800985a:	4b07      	ldr	r3, [pc, #28]	; (8009878 <prvResetNextTaskUnblockTime+0x38>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4a04      	ldr	r2, [pc, #16]	; (800987c <prvResetNextTaskUnblockTime+0x3c>)
 800986a:	6013      	str	r3, [r2, #0]
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	20000c28 	.word	0x20000c28
 800987c:	20000c90 	.word	0x20000c90

08009880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009886:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <xTaskGetSchedulerState+0x34>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d102      	bne.n	8009894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800988e:	2301      	movs	r3, #1
 8009890:	607b      	str	r3, [r7, #4]
 8009892:	e008      	b.n	80098a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009894:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <xTaskGetSchedulerState+0x38>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d102      	bne.n	80098a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800989c:	2302      	movs	r3, #2
 800989e:	607b      	str	r3, [r7, #4]
 80098a0:	e001      	b.n	80098a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098a2:	2300      	movs	r3, #0
 80098a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098a6:	687b      	ldr	r3, [r7, #4]
	}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	20000c7c 	.word	0x20000c7c
 80098b8:	20000c98 	.word	0x20000c98

080098bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d051      	beq.n	8009976 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d6:	4b2a      	ldr	r3, [pc, #168]	; (8009980 <xTaskPriorityInherit+0xc4>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	429a      	cmp	r2, r3
 80098de:	d241      	bcs.n	8009964 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	db06      	blt.n	80098f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098e8:	4b25      	ldr	r3, [pc, #148]	; (8009980 <xTaskPriorityInherit+0xc4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	6959      	ldr	r1, [r3, #20]
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4a1f      	ldr	r2, [pc, #124]	; (8009984 <xTaskPriorityInherit+0xc8>)
 8009908:	4413      	add	r3, r2
 800990a:	4299      	cmp	r1, r3
 800990c:	d122      	bne.n	8009954 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	3304      	adds	r3, #4
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe f8f2 	bl	8007afc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009918:	4b19      	ldr	r3, [pc, #100]	; (8009980 <xTaskPriorityInherit+0xc4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009926:	4b18      	ldr	r3, [pc, #96]	; (8009988 <xTaskPriorityInherit+0xcc>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	429a      	cmp	r2, r3
 800992c:	d903      	bls.n	8009936 <xTaskPriorityInherit+0x7a>
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009932:	4a15      	ldr	r2, [pc, #84]	; (8009988 <xTaskPriorityInherit+0xcc>)
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993a:	4613      	mov	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4a10      	ldr	r2, [pc, #64]	; (8009984 <xTaskPriorityInherit+0xc8>)
 8009944:	441a      	add	r2, r3
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	3304      	adds	r3, #4
 800994a:	4619      	mov	r1, r3
 800994c:	4610      	mov	r0, r2
 800994e:	f7fe f878 	bl	8007a42 <vListInsertEnd>
 8009952:	e004      	b.n	800995e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <xTaskPriorityInherit+0xc4>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800995e:	2301      	movs	r3, #1
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	e008      	b.n	8009976 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <xTaskPriorityInherit+0xc4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996e:	429a      	cmp	r2, r3
 8009970:	d201      	bcs.n	8009976 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009972:	2301      	movs	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009976:	68fb      	ldr	r3, [r7, #12]
	}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	2000079c 	.word	0x2000079c
 8009984:	200007a0 	.word	0x200007a0
 8009988:	20000c78 	.word	0x20000c78

0800998c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d058      	beq.n	8009a54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099a2:	4b2f      	ldr	r3, [pc, #188]	; (8009a60 <xTaskPriorityDisinherit+0xd4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d00b      	beq.n	80099c4 <xTaskPriorityDisinherit+0x38>
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	b672      	cpsid	i
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	b662      	cpsie	i
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	e7fe      	b.n	80099c2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10b      	bne.n	80099e4 <xTaskPriorityDisinherit+0x58>
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	b672      	cpsid	i
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	b662      	cpsie	i
 80099e0:	60bb      	str	r3, [r7, #8]
 80099e2:	e7fe      	b.n	80099e2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e8:	1e5a      	subs	r2, r3, #1
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d02c      	beq.n	8009a54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d128      	bne.n	8009a54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe f878 	bl	8007afc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <xTaskPriorityDisinherit+0xd8>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d903      	bls.n	8009a34 <xTaskPriorityDisinherit+0xa8>
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a30:	4a0c      	ldr	r2, [pc, #48]	; (8009a64 <xTaskPriorityDisinherit+0xd8>)
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4a09      	ldr	r2, [pc, #36]	; (8009a68 <xTaskPriorityDisinherit+0xdc>)
 8009a42:	441a      	add	r2, r3
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	3304      	adds	r3, #4
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f7fd fff9 	bl	8007a42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a50:	2301      	movs	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a54:	697b      	ldr	r3, [r7, #20]
	}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	2000079c 	.word	0x2000079c
 8009a64:	20000c78 	.word	0x20000c78
 8009a68:	200007a0 	.word	0x200007a0

08009a6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d06c      	beq.n	8009b5e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10b      	bne.n	8009aa4 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	b672      	cpsid	i
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	b662      	cpsie	i
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	e7fe      	b.n	8009aa2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d902      	bls.n	8009ab4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	61fb      	str	r3, [r7, #28]
 8009ab2:	e002      	b.n	8009aba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	69fa      	ldr	r2, [r7, #28]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d04c      	beq.n	8009b5e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d147      	bne.n	8009b5e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009ace:	4b26      	ldr	r3, [pc, #152]	; (8009b68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69ba      	ldr	r2, [r7, #24]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d10b      	bne.n	8009af0 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	b672      	cpsid	i
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	b662      	cpsie	i
 8009aec:	60bb      	str	r3, [r7, #8]
 8009aee:	e7fe      	b.n	8009aee <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	69fa      	ldr	r2, [r7, #28]
 8009afa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	db04      	blt.n	8009b0e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	6959      	ldr	r1, [r3, #20]
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4a13      	ldr	r2, [pc, #76]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b1e:	4413      	add	r3, r2
 8009b20:	4299      	cmp	r1, r3
 8009b22:	d11c      	bne.n	8009b5e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fd ffe7 	bl	8007afc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b32:	4b0f      	ldr	r3, [pc, #60]	; (8009b70 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d903      	bls.n	8009b42 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	4a0c      	ldr	r2, [pc, #48]	; (8009b70 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009b40:	6013      	str	r3, [r2, #0]
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4a07      	ldr	r2, [pc, #28]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b50:	441a      	add	r2, r3
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	3304      	adds	r3, #4
 8009b56:	4619      	mov	r1, r3
 8009b58:	4610      	mov	r0, r2
 8009b5a:	f7fd ff72 	bl	8007a42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b5e:	bf00      	nop
 8009b60:	3720      	adds	r7, #32
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	2000079c 	.word	0x2000079c
 8009b6c:	200007a0 	.word	0x200007a0
 8009b70:	20000c78 	.word	0x20000c78

08009b74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009b78:	4b07      	ldr	r3, [pc, #28]	; (8009b98 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d004      	beq.n	8009b8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b80:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b86:	3201      	adds	r2, #1
 8009b88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009b8a:	4b03      	ldr	r3, [pc, #12]	; (8009b98 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
	}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	2000079c 	.word	0x2000079c

08009b9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ba6:	4b21      	ldr	r3, [pc, #132]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x90>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bac:	4b20      	ldr	r3, [pc, #128]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fd ffa2 	bl	8007afc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bbe:	d10a      	bne.n	8009bd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bc6:	4b1a      	ldr	r3, [pc, #104]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4819      	ldr	r0, [pc, #100]	; (8009c34 <prvAddCurrentTaskToDelayedList+0x98>)
 8009bd0:	f7fd ff37 	bl	8007a42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bd4:	e026      	b.n	8009c24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4413      	add	r3, r2
 8009bdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bde:	4b14      	ldr	r3, [pc, #80]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d209      	bcs.n	8009c02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	4b0f      	ldr	r3, [pc, #60]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	f7fd ff45 	bl	8007a8a <vListInsert>
}
 8009c00:	e010      	b.n	8009c24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c02:	4b0e      	ldr	r3, [pc, #56]	; (8009c3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b0a      	ldr	r3, [pc, #40]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4610      	mov	r0, r2
 8009c10:	f7fd ff3b 	bl	8007a8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c14:	4b0a      	ldr	r3, [pc, #40]	; (8009c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d202      	bcs.n	8009c24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c1e:	4a08      	ldr	r2, [pc, #32]	; (8009c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6013      	str	r3, [r2, #0]
}
 8009c24:	bf00      	nop
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20000c74 	.word	0x20000c74
 8009c30:	2000079c 	.word	0x2000079c
 8009c34:	20000c5c 	.word	0x20000c5c
 8009c38:	20000c2c 	.word	0x20000c2c
 8009c3c:	20000c28 	.word	0x20000c28
 8009c40:	20000c90 	.word	0x20000c90

08009c44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08a      	sub	sp, #40	; 0x28
 8009c48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c4e:	f000 fb0d 	bl	800a26c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c52:	4b1d      	ldr	r3, [pc, #116]	; (8009cc8 <xTimerCreateTimerTask+0x84>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d021      	beq.n	8009c9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c62:	1d3a      	adds	r2, r7, #4
 8009c64:	f107 0108 	add.w	r1, r7, #8
 8009c68:	f107 030c 	add.w	r3, r7, #12
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd fea1 	bl	80079b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	9202      	str	r2, [sp, #8]
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	2332      	movs	r3, #50	; 0x32
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	2300      	movs	r3, #0
 8009c82:	460a      	mov	r2, r1
 8009c84:	4911      	ldr	r1, [pc, #68]	; (8009ccc <xTimerCreateTimerTask+0x88>)
 8009c86:	4812      	ldr	r0, [pc, #72]	; (8009cd0 <xTimerCreateTimerTask+0x8c>)
 8009c88:	f7fe ffd2 	bl	8008c30 <xTaskCreateStatic>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <xTimerCreateTimerTask+0x90>)
 8009c90:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c92:	4b10      	ldr	r3, [pc, #64]	; (8009cd4 <xTimerCreateTimerTask+0x90>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10b      	bne.n	8009cbc <xTimerCreateTimerTask+0x78>
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	b672      	cpsid	i
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	b662      	cpsie	i
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	e7fe      	b.n	8009cba <xTimerCreateTimerTask+0x76>
	return xReturn;
 8009cbc:	697b      	ldr	r3, [r7, #20]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000ccc 	.word	0x20000ccc
 8009ccc:	0800b604 	.word	0x0800b604
 8009cd0:	08009e11 	.word	0x08009e11
 8009cd4:	20000cd0 	.word	0x20000cd0

08009cd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08a      	sub	sp, #40	; 0x28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10b      	bne.n	8009d08 <xTimerGenericCommand+0x30>
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	b672      	cpsid	i
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	b662      	cpsie	i
 8009d04:	623b      	str	r3, [r7, #32]
 8009d06:	e7fe      	b.n	8009d06 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d08:	4b19      	ldr	r3, [pc, #100]	; (8009d70 <xTimerGenericCommand+0x98>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d02a      	beq.n	8009d66 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b05      	cmp	r3, #5
 8009d20:	dc18      	bgt.n	8009d54 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d22:	f7ff fdad 	bl	8009880 <xTaskGetSchedulerState>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d109      	bne.n	8009d40 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d2c:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <xTimerGenericCommand+0x98>)
 8009d2e:	6818      	ldr	r0, [r3, #0]
 8009d30:	f107 0110 	add.w	r1, r7, #16
 8009d34:	2300      	movs	r3, #0
 8009d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d38:	f7fe f8c4 	bl	8007ec4 <xQueueGenericSend>
 8009d3c:	6278      	str	r0, [r7, #36]	; 0x24
 8009d3e:	e012      	b.n	8009d66 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d40:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <xTimerGenericCommand+0x98>)
 8009d42:	6818      	ldr	r0, [r3, #0]
 8009d44:	f107 0110 	add.w	r1, r7, #16
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f7fe f8ba 	bl	8007ec4 <xQueueGenericSend>
 8009d50:	6278      	str	r0, [r7, #36]	; 0x24
 8009d52:	e008      	b.n	8009d66 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d54:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <xTimerGenericCommand+0x98>)
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	f107 0110 	add.w	r1, r7, #16
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	f7fe f9b2 	bl	80080c8 <xQueueGenericSendFromISR>
 8009d64:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3728      	adds	r7, #40	; 0x28
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20000ccc 	.word	0x20000ccc

08009d74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d7e:	4b23      	ldr	r3, [pc, #140]	; (8009e0c <prvProcessExpiredTimer+0x98>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fd feb5 	bl	8007afc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d023      	beq.n	8009de8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	699a      	ldr	r2, [r3, #24]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	18d1      	adds	r1, r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	6978      	ldr	r0, [r7, #20]
 8009dae:	f000 f8d3 	bl	8009f58 <prvInsertTimerInActiveList>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d020      	beq.n	8009dfa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db8:	2300      	movs	r3, #0
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	6978      	ldr	r0, [r7, #20]
 8009dc4:	f7ff ff88 	bl	8009cd8 <xTimerGenericCommand>
 8009dc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d114      	bne.n	8009dfa <prvProcessExpiredTimer+0x86>
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	b672      	cpsid	i
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	b662      	cpsie	i
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	e7fe      	b.n	8009de6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dee:	f023 0301 	bic.w	r3, r3, #1
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	6978      	ldr	r0, [r7, #20]
 8009e00:	4798      	blx	r3
}
 8009e02:	bf00      	nop
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20000cc4 	.word	0x20000cc4

08009e10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e18:	f107 0308 	add.w	r3, r7, #8
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f857 	bl	8009ed0 <prvGetNextExpireTime>
 8009e22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	4619      	mov	r1, r3
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 f803 	bl	8009e34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e2e:	f000 f8d5 	bl	8009fdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e32:	e7f1      	b.n	8009e18 <prvTimerTask+0x8>

08009e34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e3e:	f7ff f93b 	bl	80090b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e42:	f107 0308 	add.w	r3, r7, #8
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 f866 	bl	8009f18 <prvSampleTimeNow>
 8009e4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d130      	bne.n	8009eb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10a      	bne.n	8009e70 <prvProcessTimerOrBlockTask+0x3c>
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d806      	bhi.n	8009e70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e62:	f7ff f937 	bl	80090d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e66:	68f9      	ldr	r1, [r7, #12]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff ff83 	bl	8009d74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e6e:	e024      	b.n	8009eba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d008      	beq.n	8009e88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e76:	4b13      	ldr	r3, [pc, #76]	; (8009ec4 <prvProcessTimerOrBlockTask+0x90>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <prvProcessTimerOrBlockTask+0x50>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e000      	b.n	8009e86 <prvProcessTimerOrBlockTask+0x52>
 8009e84:	2300      	movs	r3, #0
 8009e86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e88:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <prvProcessTimerOrBlockTask+0x94>)
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	4619      	mov	r1, r3
 8009e96:	f7fe fe97 	bl	8008bc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e9a:	f7ff f91b 	bl	80090d4 <xTaskResumeAll>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10a      	bne.n	8009eba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ea4:	4b09      	ldr	r3, [pc, #36]	; (8009ecc <prvProcessTimerOrBlockTask+0x98>)
 8009ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	f3bf 8f6f 	isb	sy
}
 8009eb4:	e001      	b.n	8009eba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009eb6:	f7ff f90d 	bl	80090d4 <xTaskResumeAll>
}
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000cc8 	.word	0x20000cc8
 8009ec8:	20000ccc 	.word	0x20000ccc
 8009ecc:	e000ed04 	.word	0xe000ed04

08009ed0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ed8:	4b0e      	ldr	r3, [pc, #56]	; (8009f14 <prvGetNextExpireTime+0x44>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <prvGetNextExpireTime+0x16>
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	e000      	b.n	8009ee8 <prvGetNextExpireTime+0x18>
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d105      	bne.n	8009f00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ef4:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <prvGetNextExpireTime+0x44>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	e001      	b.n	8009f04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f04:	68fb      	ldr	r3, [r7, #12]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20000cc4 	.word	0x20000cc4

08009f18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f20:	f7ff f976 	bl	8009210 <xTaskGetTickCount>
 8009f24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f26:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <prvSampleTimeNow+0x3c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d205      	bcs.n	8009f3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f30:	f000 f936 	bl	800a1a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	e002      	b.n	8009f42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f42:	4a04      	ldr	r2, [pc, #16]	; (8009f54 <prvSampleTimeNow+0x3c>)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f48:	68fb      	ldr	r3, [r7, #12]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20000cd4 	.word	0x20000cd4

08009f58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d812      	bhi.n	8009fa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	1ad2      	subs	r2, r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d302      	bcc.n	8009f92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	e01b      	b.n	8009fca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f92:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <prvInsertTimerInActiveList+0x7c>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	f7fd fd74 	bl	8007a8a <vListInsert>
 8009fa2:	e012      	b.n	8009fca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d206      	bcs.n	8009fba <prvInsertTimerInActiveList+0x62>
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d302      	bcc.n	8009fba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	617b      	str	r3, [r7, #20]
 8009fb8:	e007      	b.n	8009fca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fba:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <prvInsertTimerInActiveList+0x80>)
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	f7fd fd60 	bl	8007a8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fca:	697b      	ldr	r3, [r7, #20]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000cc8 	.word	0x20000cc8
 8009fd8:	20000cc4 	.word	0x20000cc4

08009fdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08e      	sub	sp, #56	; 0x38
 8009fe0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fe2:	e0cc      	b.n	800a17e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	da19      	bge.n	800a01e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fea:	1d3b      	adds	r3, r7, #4
 8009fec:	3304      	adds	r3, #4
 8009fee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10b      	bne.n	800a00e <prvProcessReceivedCommands+0x32>
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	b672      	cpsid	i
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	b662      	cpsie	i
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	e7fe      	b.n	800a00c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a014:	6850      	ldr	r0, [r2, #4]
 800a016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a018:	6892      	ldr	r2, [r2, #8]
 800a01a:	4611      	mov	r1, r2
 800a01c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	f2c0 80ab 	blt.w	800a17c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d004      	beq.n	800a03c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a034:	3304      	adds	r3, #4
 800a036:	4618      	mov	r0, r3
 800a038:	f7fd fd60 	bl	8007afc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a03c:	463b      	mov	r3, r7
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff ff6a 	bl	8009f18 <prvSampleTimeNow>
 800a044:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b09      	cmp	r3, #9
 800a04a:	f200 8098 	bhi.w	800a17e <prvProcessReceivedCommands+0x1a2>
 800a04e:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <prvProcessReceivedCommands+0x78>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a07d 	.word	0x0800a07d
 800a058:	0800a07d 	.word	0x0800a07d
 800a05c:	0800a07d 	.word	0x0800a07d
 800a060:	0800a0f3 	.word	0x0800a0f3
 800a064:	0800a107 	.word	0x0800a107
 800a068:	0800a153 	.word	0x0800a153
 800a06c:	0800a07d 	.word	0x0800a07d
 800a070:	0800a07d 	.word	0x0800a07d
 800a074:	0800a0f3 	.word	0x0800a0f3
 800a078:	0800a107 	.word	0x0800a107
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a082:	f043 0301 	orr.w	r3, r3, #1
 800a086:	b2da      	uxtb	r2, r3
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	18d1      	adds	r1, r2, r3
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a09c:	f7ff ff5c 	bl	8009f58 <prvInsertTimerInActiveList>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d06b      	beq.n	800a17e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d060      	beq.n	800a17e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	441a      	add	r2, r3
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ce:	f7ff fe03 	bl	8009cd8 <xTimerGenericCommand>
 800a0d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d151      	bne.n	800a17e <prvProcessReceivedCommands+0x1a2>
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	b672      	cpsid	i
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	b662      	cpsie	i
 800a0ee:	61bb      	str	r3, [r7, #24]
 800a0f0:	e7fe      	b.n	800a0f0 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0f8:	f023 0301 	bic.w	r3, r3, #1
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a100:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a104:	e03b      	b.n	800a17e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a10c:	f043 0301 	orr.w	r3, r3, #1
 800a110:	b2da      	uxtb	r2, r3
 800a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a114:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10b      	bne.n	800a13e <prvProcessReceivedCommands+0x162>
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	b672      	cpsid	i
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	b662      	cpsie	i
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	e7fe      	b.n	800a13c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	699a      	ldr	r2, [r3, #24]
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	18d1      	adds	r1, r2, r3
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a14c:	f7ff ff04 	bl	8009f58 <prvInsertTimerInActiveList>
					break;
 800a150:	e015      	b.n	800a17e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a158:	f003 0302 	and.w	r3, r3, #2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d103      	bne.n	800a168 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a162:	f000 fbb3 	bl	800a8cc <vPortFree>
 800a166:	e00a      	b.n	800a17e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a16e:	f023 0301 	bic.w	r3, r3, #1
 800a172:	b2da      	uxtb	r2, r3
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a17a:	e000      	b.n	800a17e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a17c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a17e:	4b07      	ldr	r3, [pc, #28]	; (800a19c <prvProcessReceivedCommands+0x1c0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	1d39      	adds	r1, r7, #4
 800a184:	2200      	movs	r2, #0
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe f8cc 	bl	8008324 <xQueueReceive>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f47f af28 	bne.w	8009fe4 <prvProcessReceivedCommands+0x8>
	}
}
 800a194:	bf00      	nop
 800a196:	3730      	adds	r7, #48	; 0x30
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20000ccc 	.word	0x20000ccc

0800a1a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1a6:	e049      	b.n	800a23c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1a8:	4b2e      	ldr	r3, [pc, #184]	; (800a264 <prvSwitchTimerLists+0xc4>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b2:	4b2c      	ldr	r3, [pc, #176]	; (800a264 <prvSwitchTimerLists+0xc4>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	3304      	adds	r3, #4
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fd fc9b 	bl	8007afc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d02f      	beq.n	800a23c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d90e      	bls.n	800a20c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1fa:	4b1a      	ldr	r3, [pc, #104]	; (800a264 <prvSwitchTimerLists+0xc4>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3304      	adds	r3, #4
 800a202:	4619      	mov	r1, r3
 800a204:	4610      	mov	r0, r2
 800a206:	f7fd fc40 	bl	8007a8a <vListInsert>
 800a20a:	e017      	b.n	800a23c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a20c:	2300      	movs	r3, #0
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	2300      	movs	r3, #0
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	2100      	movs	r1, #0
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7ff fd5e 	bl	8009cd8 <xTimerGenericCommand>
 800a21c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10b      	bne.n	800a23c <prvSwitchTimerLists+0x9c>
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	b672      	cpsid	i
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	b662      	cpsie	i
 800a238:	603b      	str	r3, [r7, #0]
 800a23a:	e7fe      	b.n	800a23a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a23c:	4b09      	ldr	r3, [pc, #36]	; (800a264 <prvSwitchTimerLists+0xc4>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1b0      	bne.n	800a1a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <prvSwitchTimerLists+0xc4>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a24c:	4b06      	ldr	r3, [pc, #24]	; (800a268 <prvSwitchTimerLists+0xc8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a04      	ldr	r2, [pc, #16]	; (800a264 <prvSwitchTimerLists+0xc4>)
 800a252:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a254:	4a04      	ldr	r2, [pc, #16]	; (800a268 <prvSwitchTimerLists+0xc8>)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6013      	str	r3, [r2, #0]
}
 800a25a:	bf00      	nop
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000cc4 	.word	0x20000cc4
 800a268:	20000cc8 	.word	0x20000cc8

0800a26c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a272:	f000 f941 	bl	800a4f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a276:	4b15      	ldr	r3, [pc, #84]	; (800a2cc <prvCheckForValidListAndQueue+0x60>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d120      	bne.n	800a2c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a27e:	4814      	ldr	r0, [pc, #80]	; (800a2d0 <prvCheckForValidListAndQueue+0x64>)
 800a280:	f7fd fbb2 	bl	80079e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a284:	4813      	ldr	r0, [pc, #76]	; (800a2d4 <prvCheckForValidListAndQueue+0x68>)
 800a286:	f7fd fbaf 	bl	80079e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a28a:	4b13      	ldr	r3, [pc, #76]	; (800a2d8 <prvCheckForValidListAndQueue+0x6c>)
 800a28c:	4a10      	ldr	r2, [pc, #64]	; (800a2d0 <prvCheckForValidListAndQueue+0x64>)
 800a28e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a290:	4b12      	ldr	r3, [pc, #72]	; (800a2dc <prvCheckForValidListAndQueue+0x70>)
 800a292:	4a10      	ldr	r2, [pc, #64]	; (800a2d4 <prvCheckForValidListAndQueue+0x68>)
 800a294:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a296:	2300      	movs	r3, #0
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4b11      	ldr	r3, [pc, #68]	; (800a2e0 <prvCheckForValidListAndQueue+0x74>)
 800a29c:	4a11      	ldr	r2, [pc, #68]	; (800a2e4 <prvCheckForValidListAndQueue+0x78>)
 800a29e:	2110      	movs	r1, #16
 800a2a0:	200a      	movs	r0, #10
 800a2a2:	f7fd fcbf 	bl	8007c24 <xQueueGenericCreateStatic>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	4b08      	ldr	r3, [pc, #32]	; (800a2cc <prvCheckForValidListAndQueue+0x60>)
 800a2aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a2ac:	4b07      	ldr	r3, [pc, #28]	; (800a2cc <prvCheckForValidListAndQueue+0x60>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2b4:	4b05      	ldr	r3, [pc, #20]	; (800a2cc <prvCheckForValidListAndQueue+0x60>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	490b      	ldr	r1, [pc, #44]	; (800a2e8 <prvCheckForValidListAndQueue+0x7c>)
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fe fc32 	bl	8008b24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2c0:	f000 f94c 	bl	800a55c <vPortExitCritical>
}
 800a2c4:	bf00      	nop
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20000ccc 	.word	0x20000ccc
 800a2d0:	20000c9c 	.word	0x20000c9c
 800a2d4:	20000cb0 	.word	0x20000cb0
 800a2d8:	20000cc4 	.word	0x20000cc4
 800a2dc:	20000cc8 	.word	0x20000cc8
 800a2e0:	20000d78 	.word	0x20000d78
 800a2e4:	20000cd8 	.word	0x20000cd8
 800a2e8:	0800b60c 	.word	0x0800b60c

0800a2ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3b04      	subs	r3, #4
 800a2fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b04      	subs	r3, #4
 800a30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f023 0201 	bic.w	r2, r3, #1
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3b04      	subs	r3, #4
 800a31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a31c:	4a0c      	ldr	r2, [pc, #48]	; (800a350 <pxPortInitialiseStack+0x64>)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3b14      	subs	r3, #20
 800a326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3b04      	subs	r3, #4
 800a332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f06f 0202 	mvn.w	r2, #2
 800a33a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3b20      	subs	r3, #32
 800a340:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	0800a355 	.word	0x0800a355

0800a354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a35e:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <prvTaskExitError+0x58>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a366:	d00b      	beq.n	800a380 <prvTaskExitError+0x2c>
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	b672      	cpsid	i
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	b662      	cpsie	i
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	e7fe      	b.n	800a37e <prvTaskExitError+0x2a>
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	b672      	cpsid	i
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	b662      	cpsie	i
 800a394:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a396:	bf00      	nop
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0fc      	beq.n	800a398 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a39e:	bf00      	nop
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	2000004c 	.word	0x2000004c

0800a3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3b0:	4b07      	ldr	r3, [pc, #28]	; (800a3d0 <pxCurrentTCBConst2>)
 800a3b2:	6819      	ldr	r1, [r3, #0]
 800a3b4:	6808      	ldr	r0, [r1, #0]
 800a3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ba:	f380 8809 	msr	PSP, r0
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f04f 0000 	mov.w	r0, #0
 800a3c6:	f380 8811 	msr	BASEPRI, r0
 800a3ca:	4770      	bx	lr
 800a3cc:	f3af 8000 	nop.w

0800a3d0 <pxCurrentTCBConst2>:
 800a3d0:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop

0800a3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3d8:	4808      	ldr	r0, [pc, #32]	; (800a3fc <prvPortStartFirstTask+0x24>)
 800a3da:	6800      	ldr	r0, [r0, #0]
 800a3dc:	6800      	ldr	r0, [r0, #0]
 800a3de:	f380 8808 	msr	MSP, r0
 800a3e2:	f04f 0000 	mov.w	r0, #0
 800a3e6:	f380 8814 	msr	CONTROL, r0
 800a3ea:	b662      	cpsie	i
 800a3ec:	b661      	cpsie	f
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	df00      	svc	0
 800a3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3fa:	bf00      	nop
 800a3fc:	e000ed08 	.word	0xe000ed08

0800a400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a406:	4b36      	ldr	r3, [pc, #216]	; (800a4e0 <xPortStartScheduler+0xe0>)
 800a408:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	4b2e      	ldr	r3, [pc, #184]	; (800a4e4 <xPortStartScheduler+0xe4>)
 800a42c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a42e:	4b2e      	ldr	r3, [pc, #184]	; (800a4e8 <xPortStartScheduler+0xe8>)
 800a430:	2207      	movs	r2, #7
 800a432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a434:	e009      	b.n	800a44a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a436:	4b2c      	ldr	r3, [pc, #176]	; (800a4e8 <xPortStartScheduler+0xe8>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	4a2a      	ldr	r2, [pc, #168]	; (800a4e8 <xPortStartScheduler+0xe8>)
 800a43e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	b2db      	uxtb	r3, r3
 800a448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a44a:	78fb      	ldrb	r3, [r7, #3]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b80      	cmp	r3, #128	; 0x80
 800a454:	d0ef      	beq.n	800a436 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a456:	4b24      	ldr	r3, [pc, #144]	; (800a4e8 <xPortStartScheduler+0xe8>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f1c3 0307 	rsb	r3, r3, #7
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d00b      	beq.n	800a47a <xPortStartScheduler+0x7a>
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	b672      	cpsid	i
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	b662      	cpsie	i
 800a476:	60bb      	str	r3, [r7, #8]
 800a478:	e7fe      	b.n	800a478 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a47a:	4b1b      	ldr	r3, [pc, #108]	; (800a4e8 <xPortStartScheduler+0xe8>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	4a19      	ldr	r2, [pc, #100]	; (800a4e8 <xPortStartScheduler+0xe8>)
 800a482:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a484:	4b18      	ldr	r3, [pc, #96]	; (800a4e8 <xPortStartScheduler+0xe8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a48c:	4a16      	ldr	r2, [pc, #88]	; (800a4e8 <xPortStartScheduler+0xe8>)
 800a48e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	b2da      	uxtb	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a498:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <xPortStartScheduler+0xec>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a13      	ldr	r2, [pc, #76]	; (800a4ec <xPortStartScheduler+0xec>)
 800a49e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4a4:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <xPortStartScheduler+0xec>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a10      	ldr	r2, [pc, #64]	; (800a4ec <xPortStartScheduler+0xec>)
 800a4aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a4ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4b0:	f000 f8d4 	bl	800a65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4b4:	4b0e      	ldr	r3, [pc, #56]	; (800a4f0 <xPortStartScheduler+0xf0>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4ba:	f000 f8f3 	bl	800a6a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4be:	4b0d      	ldr	r3, [pc, #52]	; (800a4f4 <xPortStartScheduler+0xf4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a0c      	ldr	r2, [pc, #48]	; (800a4f4 <xPortStartScheduler+0xf4>)
 800a4c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4ca:	f7ff ff85 	bl	800a3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4ce:	f7fe ff69 	bl	80093a4 <vTaskSwitchContext>
	prvTaskExitError();
 800a4d2:	f7ff ff3f 	bl	800a354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	e000e400 	.word	0xe000e400
 800a4e4:	20000dc8 	.word	0x20000dc8
 800a4e8:	20000dcc 	.word	0x20000dcc
 800a4ec:	e000ed20 	.word	0xe000ed20
 800a4f0:	2000004c 	.word	0x2000004c
 800a4f4:	e000ef34 	.word	0xe000ef34

0800a4f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	b672      	cpsid	i
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	b662      	cpsie	i
 800a512:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <vPortEnterCritical+0x5c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3301      	adds	r3, #1
 800a51a:	4a0e      	ldr	r2, [pc, #56]	; (800a554 <vPortEnterCritical+0x5c>)
 800a51c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a51e:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <vPortEnterCritical+0x5c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d110      	bne.n	800a548 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a526:	4b0c      	ldr	r3, [pc, #48]	; (800a558 <vPortEnterCritical+0x60>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00b      	beq.n	800a548 <vPortEnterCritical+0x50>
 800a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a534:	b672      	cpsid	i
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	b662      	cpsie	i
 800a544:	603b      	str	r3, [r7, #0]
 800a546:	e7fe      	b.n	800a546 <vPortEnterCritical+0x4e>
	}
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr
 800a554:	2000004c 	.word	0x2000004c
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a562:	4b12      	ldr	r3, [pc, #72]	; (800a5ac <vPortExitCritical+0x50>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10b      	bne.n	800a582 <vPortExitCritical+0x26>
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	b672      	cpsid	i
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	b662      	cpsie	i
 800a57e:	607b      	str	r3, [r7, #4]
 800a580:	e7fe      	b.n	800a580 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800a582:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <vPortExitCritical+0x50>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3b01      	subs	r3, #1
 800a588:	4a08      	ldr	r2, [pc, #32]	; (800a5ac <vPortExitCritical+0x50>)
 800a58a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a58c:	4b07      	ldr	r3, [pc, #28]	; (800a5ac <vPortExitCritical+0x50>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d104      	bne.n	800a59e <vPortExitCritical+0x42>
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a59e:	bf00      	nop
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	2000004c 	.word	0x2000004c

0800a5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5b0:	f3ef 8009 	mrs	r0, PSP
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	4b15      	ldr	r3, [pc, #84]	; (800a610 <pxCurrentTCBConst>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	f01e 0f10 	tst.w	lr, #16
 800a5c0:	bf08      	it	eq
 800a5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	6010      	str	r0, [r2, #0]
 800a5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5d4:	b672      	cpsid	i
 800a5d6:	f380 8811 	msr	BASEPRI, r0
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	b662      	cpsie	i
 800a5e4:	f7fe fede 	bl	80093a4 <vTaskSwitchContext>
 800a5e8:	f04f 0000 	mov.w	r0, #0
 800a5ec:	f380 8811 	msr	BASEPRI, r0
 800a5f0:	bc09      	pop	{r0, r3}
 800a5f2:	6819      	ldr	r1, [r3, #0]
 800a5f4:	6808      	ldr	r0, [r1, #0]
 800a5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fa:	f01e 0f10 	tst.w	lr, #16
 800a5fe:	bf08      	it	eq
 800a600:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a604:	f380 8809 	msr	PSP, r0
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <pxCurrentTCBConst>:
 800a610:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop

0800a618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	b672      	cpsid	i
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	b662      	cpsie	i
 800a632:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a634:	f7fe fdfc 	bl	8009230 <xTaskIncrementTick>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a63e:	4b06      	ldr	r3, [pc, #24]	; (800a658 <SysTick_Handler+0x40>)
 800a640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	2300      	movs	r3, #0
 800a648:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a660:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <vPortSetupTimerInterrupt+0x34>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a666:	4b0b      	ldr	r3, [pc, #44]	; (800a694 <vPortSetupTimerInterrupt+0x38>)
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a66c:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <vPortSetupTimerInterrupt+0x3c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <vPortSetupTimerInterrupt+0x40>)
 800a672:	fba2 2303 	umull	r2, r3, r2, r3
 800a676:	099b      	lsrs	r3, r3, #6
 800a678:	4a09      	ldr	r2, [pc, #36]	; (800a6a0 <vPortSetupTimerInterrupt+0x44>)
 800a67a:	3b01      	subs	r3, #1
 800a67c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a67e:	4b04      	ldr	r3, [pc, #16]	; (800a690 <vPortSetupTimerInterrupt+0x34>)
 800a680:	2207      	movs	r2, #7
 800a682:	601a      	str	r2, [r3, #0]
}
 800a684:	bf00      	nop
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	e000e010 	.word	0xe000e010
 800a694:	e000e018 	.word	0xe000e018
 800a698:	20000040 	.word	0x20000040
 800a69c:	10624dd3 	.word	0x10624dd3
 800a6a0:	e000e014 	.word	0xe000e014

0800a6a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6b4 <vPortEnableVFP+0x10>
 800a6a8:	6801      	ldr	r1, [r0, #0]
 800a6aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6ae:	6001      	str	r1, [r0, #0]
 800a6b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6b2:	bf00      	nop
 800a6b4:	e000ed88 	.word	0xe000ed88

0800a6b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6be:	f3ef 8305 	mrs	r3, IPSR
 800a6c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b0f      	cmp	r3, #15
 800a6c8:	d915      	bls.n	800a6f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6ca:	4a18      	ldr	r2, [pc, #96]	; (800a72c <vPortValidateInterruptPriority+0x74>)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6d4:	4b16      	ldr	r3, [pc, #88]	; (800a730 <vPortValidateInterruptPriority+0x78>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	7afa      	ldrb	r2, [r7, #11]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d20b      	bcs.n	800a6f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	b672      	cpsid	i
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	b662      	cpsie	i
 800a6f2:	607b      	str	r3, [r7, #4]
 800a6f4:	e7fe      	b.n	800a6f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <vPortValidateInterruptPriority+0x7c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6fe:	4b0e      	ldr	r3, [pc, #56]	; (800a738 <vPortValidateInterruptPriority+0x80>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d90b      	bls.n	800a71e <vPortValidateInterruptPriority+0x66>
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	b672      	cpsid	i
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	b662      	cpsie	i
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	e7fe      	b.n	800a71c <vPortValidateInterruptPriority+0x64>
	}
 800a71e:	bf00      	nop
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	e000e3f0 	.word	0xe000e3f0
 800a730:	20000dc8 	.word	0x20000dc8
 800a734:	e000ed0c 	.word	0xe000ed0c
 800a738:	20000dcc 	.word	0x20000dcc

0800a73c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08a      	sub	sp, #40	; 0x28
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a744:	2300      	movs	r3, #0
 800a746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a748:	f7fe fcb6 	bl	80090b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a74c:	4b5a      	ldr	r3, [pc, #360]	; (800a8b8 <pvPortMalloc+0x17c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a754:	f000 f916 	bl	800a984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a758:	4b58      	ldr	r3, [pc, #352]	; (800a8bc <pvPortMalloc+0x180>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4013      	ands	r3, r2
 800a760:	2b00      	cmp	r3, #0
 800a762:	f040 8090 	bne.w	800a886 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01e      	beq.n	800a7aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a76c:	2208      	movs	r2, #8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4413      	add	r3, r2
 800a772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d015      	beq.n	800a7aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f023 0307 	bic.w	r3, r3, #7
 800a784:	3308      	adds	r3, #8
 800a786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f003 0307 	and.w	r3, r3, #7
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00b      	beq.n	800a7aa <pvPortMalloc+0x6e>
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	b672      	cpsid	i
 800a798:	f383 8811 	msr	BASEPRI, r3
 800a79c:	f3bf 8f6f 	isb	sy
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	b662      	cpsie	i
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	e7fe      	b.n	800a7a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d06a      	beq.n	800a886 <pvPortMalloc+0x14a>
 800a7b0:	4b43      	ldr	r3, [pc, #268]	; (800a8c0 <pvPortMalloc+0x184>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d865      	bhi.n	800a886 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7ba:	4b42      	ldr	r3, [pc, #264]	; (800a8c4 <pvPortMalloc+0x188>)
 800a7bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7be:	4b41      	ldr	r3, [pc, #260]	; (800a8c4 <pvPortMalloc+0x188>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7c4:	e004      	b.n	800a7d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d903      	bls.n	800a7e2 <pvPortMalloc+0xa6>
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1f1      	bne.n	800a7c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7e2:	4b35      	ldr	r3, [pc, #212]	; (800a8b8 <pvPortMalloc+0x17c>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d04c      	beq.n	800a886 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2208      	movs	r2, #8
 800a7f2:	4413      	add	r3, r2
 800a7f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	1ad2      	subs	r2, r2, r3
 800a806:	2308      	movs	r3, #8
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d920      	bls.n	800a850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a80e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4413      	add	r3, r2
 800a814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <pvPortMalloc+0xfc>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	b672      	cpsid	i
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	b662      	cpsie	i
 800a834:	613b      	str	r3, [r7, #16]
 800a836:	e7fe      	b.n	800a836 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a84a:	69b8      	ldr	r0, [r7, #24]
 800a84c:	f000 f8fc 	bl	800aa48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a850:	4b1b      	ldr	r3, [pc, #108]	; (800a8c0 <pvPortMalloc+0x184>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	4a19      	ldr	r2, [pc, #100]	; (800a8c0 <pvPortMalloc+0x184>)
 800a85c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a85e:	4b18      	ldr	r3, [pc, #96]	; (800a8c0 <pvPortMalloc+0x184>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	4b19      	ldr	r3, [pc, #100]	; (800a8c8 <pvPortMalloc+0x18c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d203      	bcs.n	800a872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <pvPortMalloc+0x184>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a16      	ldr	r2, [pc, #88]	; (800a8c8 <pvPortMalloc+0x18c>)
 800a870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	4b11      	ldr	r3, [pc, #68]	; (800a8bc <pvPortMalloc+0x180>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	431a      	orrs	r2, r3
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a886:	f7fe fc25 	bl	80090d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	f003 0307 	and.w	r3, r3, #7
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00b      	beq.n	800a8ac <pvPortMalloc+0x170>
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	b672      	cpsid	i
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	b662      	cpsie	i
 800a8a8:	60fb      	str	r3, [r7, #12]
 800a8aa:	e7fe      	b.n	800a8aa <pvPortMalloc+0x16e>
	return pvReturn;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3728      	adds	r7, #40	; 0x28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	200049d8 	.word	0x200049d8
 800a8bc:	200049e4 	.word	0x200049e4
 800a8c0:	200049dc 	.word	0x200049dc
 800a8c4:	200049d0 	.word	0x200049d0
 800a8c8:	200049e0 	.word	0x200049e0

0800a8cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d04a      	beq.n	800a974 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8de:	2308      	movs	r3, #8
 800a8e0:	425b      	negs	r3, r3
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	4b22      	ldr	r3, [pc, #136]	; (800a97c <vPortFree+0xb0>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10b      	bne.n	800a912 <vPortFree+0x46>
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	b672      	cpsid	i
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	b662      	cpsie	i
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	e7fe      	b.n	800a910 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00b      	beq.n	800a932 <vPortFree+0x66>
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	b672      	cpsid	i
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	b662      	cpsie	i
 800a92e:	60bb      	str	r3, [r7, #8]
 800a930:	e7fe      	b.n	800a930 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	4b11      	ldr	r3, [pc, #68]	; (800a97c <vPortFree+0xb0>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4013      	ands	r3, r2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d019      	beq.n	800a974 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d115      	bne.n	800a974 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <vPortFree+0xb0>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	43db      	mvns	r3, r3
 800a952:	401a      	ands	r2, r3
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a958:	f7fe fbae 	bl	80090b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	4b07      	ldr	r3, [pc, #28]	; (800a980 <vPortFree+0xb4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4413      	add	r3, r2
 800a966:	4a06      	ldr	r2, [pc, #24]	; (800a980 <vPortFree+0xb4>)
 800a968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a96a:	6938      	ldr	r0, [r7, #16]
 800a96c:	f000 f86c 	bl	800aa48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a970:	f7fe fbb0 	bl	80090d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a974:	bf00      	nop
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	200049e4 	.word	0x200049e4
 800a980:	200049dc 	.word	0x200049dc

0800a984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a98a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a98e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a990:	4b27      	ldr	r3, [pc, #156]	; (800aa30 <prvHeapInit+0xac>)
 800a992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00c      	beq.n	800a9b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3307      	adds	r3, #7
 800a9a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0307 	bic.w	r3, r3, #7
 800a9aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	4a1f      	ldr	r2, [pc, #124]	; (800aa30 <prvHeapInit+0xac>)
 800a9b4:	4413      	add	r3, r2
 800a9b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9bc:	4a1d      	ldr	r2, [pc, #116]	; (800aa34 <prvHeapInit+0xb0>)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9c2:	4b1c      	ldr	r3, [pc, #112]	; (800aa34 <prvHeapInit+0xb0>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9d0:	2208      	movs	r2, #8
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	1a9b      	subs	r3, r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f023 0307 	bic.w	r3, r3, #7
 800a9de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4a15      	ldr	r2, [pc, #84]	; (800aa38 <prvHeapInit+0xb4>)
 800a9e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9e6:	4b14      	ldr	r3, [pc, #80]	; (800aa38 <prvHeapInit+0xb4>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9ee:	4b12      	ldr	r3, [pc, #72]	; (800aa38 <prvHeapInit+0xb4>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa04:	4b0c      	ldr	r3, [pc, #48]	; (800aa38 <prvHeapInit+0xb4>)
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	4a0a      	ldr	r2, [pc, #40]	; (800aa3c <prvHeapInit+0xb8>)
 800aa12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <prvHeapInit+0xbc>)
 800aa1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa1c:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <prvHeapInit+0xc0>)
 800aa1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa22:	601a      	str	r2, [r3, #0]
}
 800aa24:	bf00      	nop
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	20000dd0 	.word	0x20000dd0
 800aa34:	200049d0 	.word	0x200049d0
 800aa38:	200049d8 	.word	0x200049d8
 800aa3c:	200049e0 	.word	0x200049e0
 800aa40:	200049dc 	.word	0x200049dc
 800aa44:	200049e4 	.word	0x200049e4

0800aa48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa50:	4b28      	ldr	r3, [pc, #160]	; (800aaf4 <prvInsertBlockIntoFreeList+0xac>)
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e002      	b.n	800aa5c <prvInsertBlockIntoFreeList+0x14>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d8f7      	bhi.n	800aa56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	4413      	add	r3, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d108      	bne.n	800aa8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	441a      	add	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	441a      	add	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d118      	bne.n	800aad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	4b15      	ldr	r3, [pc, #84]	; (800aaf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d00d      	beq.n	800aac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	441a      	add	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	e008      	b.n	800aad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aac6:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	e003      	b.n	800aad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d002      	beq.n	800aae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aae6:	bf00      	nop
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	200049d0 	.word	0x200049d0
 800aaf8:	200049d8 	.word	0x200049d8

0800aafc <__errno>:
 800aafc:	4b01      	ldr	r3, [pc, #4]	; (800ab04 <__errno+0x8>)
 800aafe:	6818      	ldr	r0, [r3, #0]
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	20000050 	.word	0x20000050

0800ab08 <__libc_init_array>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	4e0d      	ldr	r6, [pc, #52]	; (800ab40 <__libc_init_array+0x38>)
 800ab0c:	4c0d      	ldr	r4, [pc, #52]	; (800ab44 <__libc_init_array+0x3c>)
 800ab0e:	1ba4      	subs	r4, r4, r6
 800ab10:	10a4      	asrs	r4, r4, #2
 800ab12:	2500      	movs	r5, #0
 800ab14:	42a5      	cmp	r5, r4
 800ab16:	d109      	bne.n	800ab2c <__libc_init_array+0x24>
 800ab18:	4e0b      	ldr	r6, [pc, #44]	; (800ab48 <__libc_init_array+0x40>)
 800ab1a:	4c0c      	ldr	r4, [pc, #48]	; (800ab4c <__libc_init_array+0x44>)
 800ab1c:	f000 fc30 	bl	800b380 <_init>
 800ab20:	1ba4      	subs	r4, r4, r6
 800ab22:	10a4      	asrs	r4, r4, #2
 800ab24:	2500      	movs	r5, #0
 800ab26:	42a5      	cmp	r5, r4
 800ab28:	d105      	bne.n	800ab36 <__libc_init_array+0x2e>
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}
 800ab2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab30:	4798      	blx	r3
 800ab32:	3501      	adds	r5, #1
 800ab34:	e7ee      	b.n	800ab14 <__libc_init_array+0xc>
 800ab36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab3a:	4798      	blx	r3
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	e7f2      	b.n	800ab26 <__libc_init_array+0x1e>
 800ab40:	0800b6b8 	.word	0x0800b6b8
 800ab44:	0800b6b8 	.word	0x0800b6b8
 800ab48:	0800b6b8 	.word	0x0800b6b8
 800ab4c:	0800b6bc 	.word	0x0800b6bc

0800ab50 <malloc>:
 800ab50:	4b02      	ldr	r3, [pc, #8]	; (800ab5c <malloc+0xc>)
 800ab52:	4601      	mov	r1, r0
 800ab54:	6818      	ldr	r0, [r3, #0]
 800ab56:	f000 b865 	b.w	800ac24 <_malloc_r>
 800ab5a:	bf00      	nop
 800ab5c:	20000050 	.word	0x20000050

0800ab60 <memcpy>:
 800ab60:	b510      	push	{r4, lr}
 800ab62:	1e43      	subs	r3, r0, #1
 800ab64:	440a      	add	r2, r1
 800ab66:	4291      	cmp	r1, r2
 800ab68:	d100      	bne.n	800ab6c <memcpy+0xc>
 800ab6a:	bd10      	pop	{r4, pc}
 800ab6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab74:	e7f7      	b.n	800ab66 <memcpy+0x6>

0800ab76 <memset>:
 800ab76:	4402      	add	r2, r0
 800ab78:	4603      	mov	r3, r0
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d100      	bne.n	800ab80 <memset+0xa>
 800ab7e:	4770      	bx	lr
 800ab80:	f803 1b01 	strb.w	r1, [r3], #1
 800ab84:	e7f9      	b.n	800ab7a <memset+0x4>
	...

0800ab88 <_free_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	2900      	cmp	r1, #0
 800ab8e:	d045      	beq.n	800ac1c <_free_r+0x94>
 800ab90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab94:	1f0c      	subs	r4, r1, #4
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	bfb8      	it	lt
 800ab9a:	18e4      	addlt	r4, r4, r3
 800ab9c:	f000 f8cc 	bl	800ad38 <__malloc_lock>
 800aba0:	4a1f      	ldr	r2, [pc, #124]	; (800ac20 <_free_r+0x98>)
 800aba2:	6813      	ldr	r3, [r2, #0]
 800aba4:	4610      	mov	r0, r2
 800aba6:	b933      	cbnz	r3, 800abb6 <_free_r+0x2e>
 800aba8:	6063      	str	r3, [r4, #4]
 800abaa:	6014      	str	r4, [r2, #0]
 800abac:	4628      	mov	r0, r5
 800abae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb2:	f000 b8c2 	b.w	800ad3a <__malloc_unlock>
 800abb6:	42a3      	cmp	r3, r4
 800abb8:	d90c      	bls.n	800abd4 <_free_r+0x4c>
 800abba:	6821      	ldr	r1, [r4, #0]
 800abbc:	1862      	adds	r2, r4, r1
 800abbe:	4293      	cmp	r3, r2
 800abc0:	bf04      	itt	eq
 800abc2:	681a      	ldreq	r2, [r3, #0]
 800abc4:	685b      	ldreq	r3, [r3, #4]
 800abc6:	6063      	str	r3, [r4, #4]
 800abc8:	bf04      	itt	eq
 800abca:	1852      	addeq	r2, r2, r1
 800abcc:	6022      	streq	r2, [r4, #0]
 800abce:	6004      	str	r4, [r0, #0]
 800abd0:	e7ec      	b.n	800abac <_free_r+0x24>
 800abd2:	4613      	mov	r3, r2
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	b10a      	cbz	r2, 800abdc <_free_r+0x54>
 800abd8:	42a2      	cmp	r2, r4
 800abda:	d9fa      	bls.n	800abd2 <_free_r+0x4a>
 800abdc:	6819      	ldr	r1, [r3, #0]
 800abde:	1858      	adds	r0, r3, r1
 800abe0:	42a0      	cmp	r0, r4
 800abe2:	d10b      	bne.n	800abfc <_free_r+0x74>
 800abe4:	6820      	ldr	r0, [r4, #0]
 800abe6:	4401      	add	r1, r0
 800abe8:	1858      	adds	r0, r3, r1
 800abea:	4282      	cmp	r2, r0
 800abec:	6019      	str	r1, [r3, #0]
 800abee:	d1dd      	bne.n	800abac <_free_r+0x24>
 800abf0:	6810      	ldr	r0, [r2, #0]
 800abf2:	6852      	ldr	r2, [r2, #4]
 800abf4:	605a      	str	r2, [r3, #4]
 800abf6:	4401      	add	r1, r0
 800abf8:	6019      	str	r1, [r3, #0]
 800abfa:	e7d7      	b.n	800abac <_free_r+0x24>
 800abfc:	d902      	bls.n	800ac04 <_free_r+0x7c>
 800abfe:	230c      	movs	r3, #12
 800ac00:	602b      	str	r3, [r5, #0]
 800ac02:	e7d3      	b.n	800abac <_free_r+0x24>
 800ac04:	6820      	ldr	r0, [r4, #0]
 800ac06:	1821      	adds	r1, r4, r0
 800ac08:	428a      	cmp	r2, r1
 800ac0a:	bf04      	itt	eq
 800ac0c:	6811      	ldreq	r1, [r2, #0]
 800ac0e:	6852      	ldreq	r2, [r2, #4]
 800ac10:	6062      	str	r2, [r4, #4]
 800ac12:	bf04      	itt	eq
 800ac14:	1809      	addeq	r1, r1, r0
 800ac16:	6021      	streq	r1, [r4, #0]
 800ac18:	605c      	str	r4, [r3, #4]
 800ac1a:	e7c7      	b.n	800abac <_free_r+0x24>
 800ac1c:	bd38      	pop	{r3, r4, r5, pc}
 800ac1e:	bf00      	nop
 800ac20:	200049e8 	.word	0x200049e8

0800ac24 <_malloc_r>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	1ccd      	adds	r5, r1, #3
 800ac28:	f025 0503 	bic.w	r5, r5, #3
 800ac2c:	3508      	adds	r5, #8
 800ac2e:	2d0c      	cmp	r5, #12
 800ac30:	bf38      	it	cc
 800ac32:	250c      	movcc	r5, #12
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	4606      	mov	r6, r0
 800ac38:	db01      	blt.n	800ac3e <_malloc_r+0x1a>
 800ac3a:	42a9      	cmp	r1, r5
 800ac3c:	d903      	bls.n	800ac46 <_malloc_r+0x22>
 800ac3e:	230c      	movs	r3, #12
 800ac40:	6033      	str	r3, [r6, #0]
 800ac42:	2000      	movs	r0, #0
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
 800ac46:	f000 f877 	bl	800ad38 <__malloc_lock>
 800ac4a:	4a21      	ldr	r2, [pc, #132]	; (800acd0 <_malloc_r+0xac>)
 800ac4c:	6814      	ldr	r4, [r2, #0]
 800ac4e:	4621      	mov	r1, r4
 800ac50:	b991      	cbnz	r1, 800ac78 <_malloc_r+0x54>
 800ac52:	4c20      	ldr	r4, [pc, #128]	; (800acd4 <_malloc_r+0xb0>)
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	b91b      	cbnz	r3, 800ac60 <_malloc_r+0x3c>
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f000 f83d 	bl	800acd8 <_sbrk_r>
 800ac5e:	6020      	str	r0, [r4, #0]
 800ac60:	4629      	mov	r1, r5
 800ac62:	4630      	mov	r0, r6
 800ac64:	f000 f838 	bl	800acd8 <_sbrk_r>
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	d124      	bne.n	800acb6 <_malloc_r+0x92>
 800ac6c:	230c      	movs	r3, #12
 800ac6e:	6033      	str	r3, [r6, #0]
 800ac70:	4630      	mov	r0, r6
 800ac72:	f000 f862 	bl	800ad3a <__malloc_unlock>
 800ac76:	e7e4      	b.n	800ac42 <_malloc_r+0x1e>
 800ac78:	680b      	ldr	r3, [r1, #0]
 800ac7a:	1b5b      	subs	r3, r3, r5
 800ac7c:	d418      	bmi.n	800acb0 <_malloc_r+0x8c>
 800ac7e:	2b0b      	cmp	r3, #11
 800ac80:	d90f      	bls.n	800aca2 <_malloc_r+0x7e>
 800ac82:	600b      	str	r3, [r1, #0]
 800ac84:	50cd      	str	r5, [r1, r3]
 800ac86:	18cc      	adds	r4, r1, r3
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f000 f856 	bl	800ad3a <__malloc_unlock>
 800ac8e:	f104 000b 	add.w	r0, r4, #11
 800ac92:	1d23      	adds	r3, r4, #4
 800ac94:	f020 0007 	bic.w	r0, r0, #7
 800ac98:	1ac3      	subs	r3, r0, r3
 800ac9a:	d0d3      	beq.n	800ac44 <_malloc_r+0x20>
 800ac9c:	425a      	negs	r2, r3
 800ac9e:	50e2      	str	r2, [r4, r3]
 800aca0:	e7d0      	b.n	800ac44 <_malloc_r+0x20>
 800aca2:	428c      	cmp	r4, r1
 800aca4:	684b      	ldr	r3, [r1, #4]
 800aca6:	bf16      	itet	ne
 800aca8:	6063      	strne	r3, [r4, #4]
 800acaa:	6013      	streq	r3, [r2, #0]
 800acac:	460c      	movne	r4, r1
 800acae:	e7eb      	b.n	800ac88 <_malloc_r+0x64>
 800acb0:	460c      	mov	r4, r1
 800acb2:	6849      	ldr	r1, [r1, #4]
 800acb4:	e7cc      	b.n	800ac50 <_malloc_r+0x2c>
 800acb6:	1cc4      	adds	r4, r0, #3
 800acb8:	f024 0403 	bic.w	r4, r4, #3
 800acbc:	42a0      	cmp	r0, r4
 800acbe:	d005      	beq.n	800accc <_malloc_r+0xa8>
 800acc0:	1a21      	subs	r1, r4, r0
 800acc2:	4630      	mov	r0, r6
 800acc4:	f000 f808 	bl	800acd8 <_sbrk_r>
 800acc8:	3001      	adds	r0, #1
 800acca:	d0cf      	beq.n	800ac6c <_malloc_r+0x48>
 800accc:	6025      	str	r5, [r4, #0]
 800acce:	e7db      	b.n	800ac88 <_malloc_r+0x64>
 800acd0:	200049e8 	.word	0x200049e8
 800acd4:	200049ec 	.word	0x200049ec

0800acd8 <_sbrk_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4c06      	ldr	r4, [pc, #24]	; (800acf4 <_sbrk_r+0x1c>)
 800acdc:	2300      	movs	r3, #0
 800acde:	4605      	mov	r5, r0
 800ace0:	4608      	mov	r0, r1
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	f7f8 f986 	bl	8002ff4 <_sbrk>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d102      	bne.n	800acf2 <_sbrk_r+0x1a>
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	b103      	cbz	r3, 800acf2 <_sbrk_r+0x1a>
 800acf0:	602b      	str	r3, [r5, #0]
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	20004d0c 	.word	0x20004d0c

0800acf8 <siprintf>:
 800acf8:	b40e      	push	{r1, r2, r3}
 800acfa:	b500      	push	{lr}
 800acfc:	b09c      	sub	sp, #112	; 0x70
 800acfe:	ab1d      	add	r3, sp, #116	; 0x74
 800ad00:	9002      	str	r0, [sp, #8]
 800ad02:	9006      	str	r0, [sp, #24]
 800ad04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad08:	4809      	ldr	r0, [pc, #36]	; (800ad30 <siprintf+0x38>)
 800ad0a:	9107      	str	r1, [sp, #28]
 800ad0c:	9104      	str	r1, [sp, #16]
 800ad0e:	4909      	ldr	r1, [pc, #36]	; (800ad34 <siprintf+0x3c>)
 800ad10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad14:	9105      	str	r1, [sp, #20]
 800ad16:	6800      	ldr	r0, [r0, #0]
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	a902      	add	r1, sp, #8
 800ad1c:	f000 f868 	bl	800adf0 <_svfiprintf_r>
 800ad20:	9b02      	ldr	r3, [sp, #8]
 800ad22:	2200      	movs	r2, #0
 800ad24:	701a      	strb	r2, [r3, #0]
 800ad26:	b01c      	add	sp, #112	; 0x70
 800ad28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad2c:	b003      	add	sp, #12
 800ad2e:	4770      	bx	lr
 800ad30:	20000050 	.word	0x20000050
 800ad34:	ffff0208 	.word	0xffff0208

0800ad38 <__malloc_lock>:
 800ad38:	4770      	bx	lr

0800ad3a <__malloc_unlock>:
 800ad3a:	4770      	bx	lr

0800ad3c <__ssputs_r>:
 800ad3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad40:	688e      	ldr	r6, [r1, #8]
 800ad42:	429e      	cmp	r6, r3
 800ad44:	4682      	mov	sl, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	4690      	mov	r8, r2
 800ad4a:	4699      	mov	r9, r3
 800ad4c:	d837      	bhi.n	800adbe <__ssputs_r+0x82>
 800ad4e:	898a      	ldrh	r2, [r1, #12]
 800ad50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad54:	d031      	beq.n	800adba <__ssputs_r+0x7e>
 800ad56:	6825      	ldr	r5, [r4, #0]
 800ad58:	6909      	ldr	r1, [r1, #16]
 800ad5a:	1a6f      	subs	r7, r5, r1
 800ad5c:	6965      	ldr	r5, [r4, #20]
 800ad5e:	2302      	movs	r3, #2
 800ad60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad64:	fb95 f5f3 	sdiv	r5, r5, r3
 800ad68:	f109 0301 	add.w	r3, r9, #1
 800ad6c:	443b      	add	r3, r7
 800ad6e:	429d      	cmp	r5, r3
 800ad70:	bf38      	it	cc
 800ad72:	461d      	movcc	r5, r3
 800ad74:	0553      	lsls	r3, r2, #21
 800ad76:	d530      	bpl.n	800adda <__ssputs_r+0x9e>
 800ad78:	4629      	mov	r1, r5
 800ad7a:	f7ff ff53 	bl	800ac24 <_malloc_r>
 800ad7e:	4606      	mov	r6, r0
 800ad80:	b950      	cbnz	r0, 800ad98 <__ssputs_r+0x5c>
 800ad82:	230c      	movs	r3, #12
 800ad84:	f8ca 3000 	str.w	r3, [sl]
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad8e:	81a3      	strh	r3, [r4, #12]
 800ad90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad98:	463a      	mov	r2, r7
 800ad9a:	6921      	ldr	r1, [r4, #16]
 800ad9c:	f7ff fee0 	bl	800ab60 <memcpy>
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ada6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adaa:	81a3      	strh	r3, [r4, #12]
 800adac:	6126      	str	r6, [r4, #16]
 800adae:	6165      	str	r5, [r4, #20]
 800adb0:	443e      	add	r6, r7
 800adb2:	1bed      	subs	r5, r5, r7
 800adb4:	6026      	str	r6, [r4, #0]
 800adb6:	60a5      	str	r5, [r4, #8]
 800adb8:	464e      	mov	r6, r9
 800adba:	454e      	cmp	r6, r9
 800adbc:	d900      	bls.n	800adc0 <__ssputs_r+0x84>
 800adbe:	464e      	mov	r6, r9
 800adc0:	4632      	mov	r2, r6
 800adc2:	4641      	mov	r1, r8
 800adc4:	6820      	ldr	r0, [r4, #0]
 800adc6:	f000 fa93 	bl	800b2f0 <memmove>
 800adca:	68a3      	ldr	r3, [r4, #8]
 800adcc:	1b9b      	subs	r3, r3, r6
 800adce:	60a3      	str	r3, [r4, #8]
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	441e      	add	r6, r3
 800add4:	6026      	str	r6, [r4, #0]
 800add6:	2000      	movs	r0, #0
 800add8:	e7dc      	b.n	800ad94 <__ssputs_r+0x58>
 800adda:	462a      	mov	r2, r5
 800addc:	f000 faa1 	bl	800b322 <_realloc_r>
 800ade0:	4606      	mov	r6, r0
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d1e2      	bne.n	800adac <__ssputs_r+0x70>
 800ade6:	6921      	ldr	r1, [r4, #16]
 800ade8:	4650      	mov	r0, sl
 800adea:	f7ff fecd 	bl	800ab88 <_free_r>
 800adee:	e7c8      	b.n	800ad82 <__ssputs_r+0x46>

0800adf0 <_svfiprintf_r>:
 800adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	461d      	mov	r5, r3
 800adf6:	898b      	ldrh	r3, [r1, #12]
 800adf8:	061f      	lsls	r7, r3, #24
 800adfa:	b09d      	sub	sp, #116	; 0x74
 800adfc:	4680      	mov	r8, r0
 800adfe:	460c      	mov	r4, r1
 800ae00:	4616      	mov	r6, r2
 800ae02:	d50f      	bpl.n	800ae24 <_svfiprintf_r+0x34>
 800ae04:	690b      	ldr	r3, [r1, #16]
 800ae06:	b96b      	cbnz	r3, 800ae24 <_svfiprintf_r+0x34>
 800ae08:	2140      	movs	r1, #64	; 0x40
 800ae0a:	f7ff ff0b 	bl	800ac24 <_malloc_r>
 800ae0e:	6020      	str	r0, [r4, #0]
 800ae10:	6120      	str	r0, [r4, #16]
 800ae12:	b928      	cbnz	r0, 800ae20 <_svfiprintf_r+0x30>
 800ae14:	230c      	movs	r3, #12
 800ae16:	f8c8 3000 	str.w	r3, [r8]
 800ae1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae1e:	e0c8      	b.n	800afb2 <_svfiprintf_r+0x1c2>
 800ae20:	2340      	movs	r3, #64	; 0x40
 800ae22:	6163      	str	r3, [r4, #20]
 800ae24:	2300      	movs	r3, #0
 800ae26:	9309      	str	r3, [sp, #36]	; 0x24
 800ae28:	2320      	movs	r3, #32
 800ae2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae2e:	2330      	movs	r3, #48	; 0x30
 800ae30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae34:	9503      	str	r5, [sp, #12]
 800ae36:	f04f 0b01 	mov.w	fp, #1
 800ae3a:	4637      	mov	r7, r6
 800ae3c:	463d      	mov	r5, r7
 800ae3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae42:	b10b      	cbz	r3, 800ae48 <_svfiprintf_r+0x58>
 800ae44:	2b25      	cmp	r3, #37	; 0x25
 800ae46:	d13e      	bne.n	800aec6 <_svfiprintf_r+0xd6>
 800ae48:	ebb7 0a06 	subs.w	sl, r7, r6
 800ae4c:	d00b      	beq.n	800ae66 <_svfiprintf_r+0x76>
 800ae4e:	4653      	mov	r3, sl
 800ae50:	4632      	mov	r2, r6
 800ae52:	4621      	mov	r1, r4
 800ae54:	4640      	mov	r0, r8
 800ae56:	f7ff ff71 	bl	800ad3c <__ssputs_r>
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	f000 80a4 	beq.w	800afa8 <_svfiprintf_r+0x1b8>
 800ae60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae62:	4453      	add	r3, sl
 800ae64:	9309      	str	r3, [sp, #36]	; 0x24
 800ae66:	783b      	ldrb	r3, [r7, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 809d 	beq.w	800afa8 <_svfiprintf_r+0x1b8>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	9307      	str	r3, [sp, #28]
 800ae7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae80:	931a      	str	r3, [sp, #104]	; 0x68
 800ae82:	462f      	mov	r7, r5
 800ae84:	2205      	movs	r2, #5
 800ae86:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ae8a:	4850      	ldr	r0, [pc, #320]	; (800afcc <_svfiprintf_r+0x1dc>)
 800ae8c:	f7f5 f9d8 	bl	8000240 <memchr>
 800ae90:	9b04      	ldr	r3, [sp, #16]
 800ae92:	b9d0      	cbnz	r0, 800aeca <_svfiprintf_r+0xda>
 800ae94:	06d9      	lsls	r1, r3, #27
 800ae96:	bf44      	itt	mi
 800ae98:	2220      	movmi	r2, #32
 800ae9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae9e:	071a      	lsls	r2, r3, #28
 800aea0:	bf44      	itt	mi
 800aea2:	222b      	movmi	r2, #43	; 0x2b
 800aea4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aea8:	782a      	ldrb	r2, [r5, #0]
 800aeaa:	2a2a      	cmp	r2, #42	; 0x2a
 800aeac:	d015      	beq.n	800aeda <_svfiprintf_r+0xea>
 800aeae:	9a07      	ldr	r2, [sp, #28]
 800aeb0:	462f      	mov	r7, r5
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	250a      	movs	r5, #10
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aebc:	3b30      	subs	r3, #48	; 0x30
 800aebe:	2b09      	cmp	r3, #9
 800aec0:	d94d      	bls.n	800af5e <_svfiprintf_r+0x16e>
 800aec2:	b1b8      	cbz	r0, 800aef4 <_svfiprintf_r+0x104>
 800aec4:	e00f      	b.n	800aee6 <_svfiprintf_r+0xf6>
 800aec6:	462f      	mov	r7, r5
 800aec8:	e7b8      	b.n	800ae3c <_svfiprintf_r+0x4c>
 800aeca:	4a40      	ldr	r2, [pc, #256]	; (800afcc <_svfiprintf_r+0x1dc>)
 800aecc:	1a80      	subs	r0, r0, r2
 800aece:	fa0b f000 	lsl.w	r0, fp, r0
 800aed2:	4318      	orrs	r0, r3
 800aed4:	9004      	str	r0, [sp, #16]
 800aed6:	463d      	mov	r5, r7
 800aed8:	e7d3      	b.n	800ae82 <_svfiprintf_r+0x92>
 800aeda:	9a03      	ldr	r2, [sp, #12]
 800aedc:	1d11      	adds	r1, r2, #4
 800aede:	6812      	ldr	r2, [r2, #0]
 800aee0:	9103      	str	r1, [sp, #12]
 800aee2:	2a00      	cmp	r2, #0
 800aee4:	db01      	blt.n	800aeea <_svfiprintf_r+0xfa>
 800aee6:	9207      	str	r2, [sp, #28]
 800aee8:	e004      	b.n	800aef4 <_svfiprintf_r+0x104>
 800aeea:	4252      	negs	r2, r2
 800aeec:	f043 0302 	orr.w	r3, r3, #2
 800aef0:	9207      	str	r2, [sp, #28]
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	783b      	ldrb	r3, [r7, #0]
 800aef6:	2b2e      	cmp	r3, #46	; 0x2e
 800aef8:	d10c      	bne.n	800af14 <_svfiprintf_r+0x124>
 800aefa:	787b      	ldrb	r3, [r7, #1]
 800aefc:	2b2a      	cmp	r3, #42	; 0x2a
 800aefe:	d133      	bne.n	800af68 <_svfiprintf_r+0x178>
 800af00:	9b03      	ldr	r3, [sp, #12]
 800af02:	1d1a      	adds	r2, r3, #4
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	9203      	str	r2, [sp, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	bfb8      	it	lt
 800af0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af10:	3702      	adds	r7, #2
 800af12:	9305      	str	r3, [sp, #20]
 800af14:	4d2e      	ldr	r5, [pc, #184]	; (800afd0 <_svfiprintf_r+0x1e0>)
 800af16:	7839      	ldrb	r1, [r7, #0]
 800af18:	2203      	movs	r2, #3
 800af1a:	4628      	mov	r0, r5
 800af1c:	f7f5 f990 	bl	8000240 <memchr>
 800af20:	b138      	cbz	r0, 800af32 <_svfiprintf_r+0x142>
 800af22:	2340      	movs	r3, #64	; 0x40
 800af24:	1b40      	subs	r0, r0, r5
 800af26:	fa03 f000 	lsl.w	r0, r3, r0
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	4303      	orrs	r3, r0
 800af2e:	3701      	adds	r7, #1
 800af30:	9304      	str	r3, [sp, #16]
 800af32:	7839      	ldrb	r1, [r7, #0]
 800af34:	4827      	ldr	r0, [pc, #156]	; (800afd4 <_svfiprintf_r+0x1e4>)
 800af36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af3a:	2206      	movs	r2, #6
 800af3c:	1c7e      	adds	r6, r7, #1
 800af3e:	f7f5 f97f 	bl	8000240 <memchr>
 800af42:	2800      	cmp	r0, #0
 800af44:	d038      	beq.n	800afb8 <_svfiprintf_r+0x1c8>
 800af46:	4b24      	ldr	r3, [pc, #144]	; (800afd8 <_svfiprintf_r+0x1e8>)
 800af48:	bb13      	cbnz	r3, 800af90 <_svfiprintf_r+0x1a0>
 800af4a:	9b03      	ldr	r3, [sp, #12]
 800af4c:	3307      	adds	r3, #7
 800af4e:	f023 0307 	bic.w	r3, r3, #7
 800af52:	3308      	adds	r3, #8
 800af54:	9303      	str	r3, [sp, #12]
 800af56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af58:	444b      	add	r3, r9
 800af5a:	9309      	str	r3, [sp, #36]	; 0x24
 800af5c:	e76d      	b.n	800ae3a <_svfiprintf_r+0x4a>
 800af5e:	fb05 3202 	mla	r2, r5, r2, r3
 800af62:	2001      	movs	r0, #1
 800af64:	460f      	mov	r7, r1
 800af66:	e7a6      	b.n	800aeb6 <_svfiprintf_r+0xc6>
 800af68:	2300      	movs	r3, #0
 800af6a:	3701      	adds	r7, #1
 800af6c:	9305      	str	r3, [sp, #20]
 800af6e:	4619      	mov	r1, r3
 800af70:	250a      	movs	r5, #10
 800af72:	4638      	mov	r0, r7
 800af74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af78:	3a30      	subs	r2, #48	; 0x30
 800af7a:	2a09      	cmp	r2, #9
 800af7c:	d903      	bls.n	800af86 <_svfiprintf_r+0x196>
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0c8      	beq.n	800af14 <_svfiprintf_r+0x124>
 800af82:	9105      	str	r1, [sp, #20]
 800af84:	e7c6      	b.n	800af14 <_svfiprintf_r+0x124>
 800af86:	fb05 2101 	mla	r1, r5, r1, r2
 800af8a:	2301      	movs	r3, #1
 800af8c:	4607      	mov	r7, r0
 800af8e:	e7f0      	b.n	800af72 <_svfiprintf_r+0x182>
 800af90:	ab03      	add	r3, sp, #12
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	4622      	mov	r2, r4
 800af96:	4b11      	ldr	r3, [pc, #68]	; (800afdc <_svfiprintf_r+0x1ec>)
 800af98:	a904      	add	r1, sp, #16
 800af9a:	4640      	mov	r0, r8
 800af9c:	f3af 8000 	nop.w
 800afa0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800afa4:	4681      	mov	r9, r0
 800afa6:	d1d6      	bne.n	800af56 <_svfiprintf_r+0x166>
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	065b      	lsls	r3, r3, #25
 800afac:	f53f af35 	bmi.w	800ae1a <_svfiprintf_r+0x2a>
 800afb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afb2:	b01d      	add	sp, #116	; 0x74
 800afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb8:	ab03      	add	r3, sp, #12
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4622      	mov	r2, r4
 800afbe:	4b07      	ldr	r3, [pc, #28]	; (800afdc <_svfiprintf_r+0x1ec>)
 800afc0:	a904      	add	r1, sp, #16
 800afc2:	4640      	mov	r0, r8
 800afc4:	f000 f882 	bl	800b0cc <_printf_i>
 800afc8:	e7ea      	b.n	800afa0 <_svfiprintf_r+0x1b0>
 800afca:	bf00      	nop
 800afcc:	0800b67c 	.word	0x0800b67c
 800afd0:	0800b682 	.word	0x0800b682
 800afd4:	0800b686 	.word	0x0800b686
 800afd8:	00000000 	.word	0x00000000
 800afdc:	0800ad3d 	.word	0x0800ad3d

0800afe0 <_printf_common>:
 800afe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe4:	4691      	mov	r9, r2
 800afe6:	461f      	mov	r7, r3
 800afe8:	688a      	ldr	r2, [r1, #8]
 800afea:	690b      	ldr	r3, [r1, #16]
 800afec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aff0:	4293      	cmp	r3, r2
 800aff2:	bfb8      	it	lt
 800aff4:	4613      	movlt	r3, r2
 800aff6:	f8c9 3000 	str.w	r3, [r9]
 800affa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800affe:	4606      	mov	r6, r0
 800b000:	460c      	mov	r4, r1
 800b002:	b112      	cbz	r2, 800b00a <_printf_common+0x2a>
 800b004:	3301      	adds	r3, #1
 800b006:	f8c9 3000 	str.w	r3, [r9]
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	0699      	lsls	r1, r3, #26
 800b00e:	bf42      	ittt	mi
 800b010:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b014:	3302      	addmi	r3, #2
 800b016:	f8c9 3000 	strmi.w	r3, [r9]
 800b01a:	6825      	ldr	r5, [r4, #0]
 800b01c:	f015 0506 	ands.w	r5, r5, #6
 800b020:	d107      	bne.n	800b032 <_printf_common+0x52>
 800b022:	f104 0a19 	add.w	sl, r4, #25
 800b026:	68e3      	ldr	r3, [r4, #12]
 800b028:	f8d9 2000 	ldr.w	r2, [r9]
 800b02c:	1a9b      	subs	r3, r3, r2
 800b02e:	42ab      	cmp	r3, r5
 800b030:	dc28      	bgt.n	800b084 <_printf_common+0xa4>
 800b032:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b036:	6822      	ldr	r2, [r4, #0]
 800b038:	3300      	adds	r3, #0
 800b03a:	bf18      	it	ne
 800b03c:	2301      	movne	r3, #1
 800b03e:	0692      	lsls	r2, r2, #26
 800b040:	d42d      	bmi.n	800b09e <_printf_common+0xbe>
 800b042:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b046:	4639      	mov	r1, r7
 800b048:	4630      	mov	r0, r6
 800b04a:	47c0      	blx	r8
 800b04c:	3001      	adds	r0, #1
 800b04e:	d020      	beq.n	800b092 <_printf_common+0xb2>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	68e5      	ldr	r5, [r4, #12]
 800b054:	f8d9 2000 	ldr.w	r2, [r9]
 800b058:	f003 0306 	and.w	r3, r3, #6
 800b05c:	2b04      	cmp	r3, #4
 800b05e:	bf08      	it	eq
 800b060:	1aad      	subeq	r5, r5, r2
 800b062:	68a3      	ldr	r3, [r4, #8]
 800b064:	6922      	ldr	r2, [r4, #16]
 800b066:	bf0c      	ite	eq
 800b068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b06c:	2500      	movne	r5, #0
 800b06e:	4293      	cmp	r3, r2
 800b070:	bfc4      	itt	gt
 800b072:	1a9b      	subgt	r3, r3, r2
 800b074:	18ed      	addgt	r5, r5, r3
 800b076:	f04f 0900 	mov.w	r9, #0
 800b07a:	341a      	adds	r4, #26
 800b07c:	454d      	cmp	r5, r9
 800b07e:	d11a      	bne.n	800b0b6 <_printf_common+0xd6>
 800b080:	2000      	movs	r0, #0
 800b082:	e008      	b.n	800b096 <_printf_common+0xb6>
 800b084:	2301      	movs	r3, #1
 800b086:	4652      	mov	r2, sl
 800b088:	4639      	mov	r1, r7
 800b08a:	4630      	mov	r0, r6
 800b08c:	47c0      	blx	r8
 800b08e:	3001      	adds	r0, #1
 800b090:	d103      	bne.n	800b09a <_printf_common+0xba>
 800b092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09a:	3501      	adds	r5, #1
 800b09c:	e7c3      	b.n	800b026 <_printf_common+0x46>
 800b09e:	18e1      	adds	r1, r4, r3
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	2030      	movs	r0, #48	; 0x30
 800b0a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0a8:	4422      	add	r2, r4
 800b0aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0b2:	3302      	adds	r3, #2
 800b0b4:	e7c5      	b.n	800b042 <_printf_common+0x62>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	4630      	mov	r0, r6
 800b0be:	47c0      	blx	r8
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d0e6      	beq.n	800b092 <_printf_common+0xb2>
 800b0c4:	f109 0901 	add.w	r9, r9, #1
 800b0c8:	e7d8      	b.n	800b07c <_printf_common+0x9c>
	...

0800b0cc <_printf_i>:
 800b0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b0d4:	460c      	mov	r4, r1
 800b0d6:	7e09      	ldrb	r1, [r1, #24]
 800b0d8:	b085      	sub	sp, #20
 800b0da:	296e      	cmp	r1, #110	; 0x6e
 800b0dc:	4617      	mov	r7, r2
 800b0de:	4606      	mov	r6, r0
 800b0e0:	4698      	mov	r8, r3
 800b0e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0e4:	f000 80b3 	beq.w	800b24e <_printf_i+0x182>
 800b0e8:	d822      	bhi.n	800b130 <_printf_i+0x64>
 800b0ea:	2963      	cmp	r1, #99	; 0x63
 800b0ec:	d036      	beq.n	800b15c <_printf_i+0x90>
 800b0ee:	d80a      	bhi.n	800b106 <_printf_i+0x3a>
 800b0f0:	2900      	cmp	r1, #0
 800b0f2:	f000 80b9 	beq.w	800b268 <_printf_i+0x19c>
 800b0f6:	2958      	cmp	r1, #88	; 0x58
 800b0f8:	f000 8083 	beq.w	800b202 <_printf_i+0x136>
 800b0fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b100:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b104:	e032      	b.n	800b16c <_printf_i+0xa0>
 800b106:	2964      	cmp	r1, #100	; 0x64
 800b108:	d001      	beq.n	800b10e <_printf_i+0x42>
 800b10a:	2969      	cmp	r1, #105	; 0x69
 800b10c:	d1f6      	bne.n	800b0fc <_printf_i+0x30>
 800b10e:	6820      	ldr	r0, [r4, #0]
 800b110:	6813      	ldr	r3, [r2, #0]
 800b112:	0605      	lsls	r5, r0, #24
 800b114:	f103 0104 	add.w	r1, r3, #4
 800b118:	d52a      	bpl.n	800b170 <_printf_i+0xa4>
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6011      	str	r1, [r2, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	da03      	bge.n	800b12a <_printf_i+0x5e>
 800b122:	222d      	movs	r2, #45	; 0x2d
 800b124:	425b      	negs	r3, r3
 800b126:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b12a:	486f      	ldr	r0, [pc, #444]	; (800b2e8 <_printf_i+0x21c>)
 800b12c:	220a      	movs	r2, #10
 800b12e:	e039      	b.n	800b1a4 <_printf_i+0xd8>
 800b130:	2973      	cmp	r1, #115	; 0x73
 800b132:	f000 809d 	beq.w	800b270 <_printf_i+0x1a4>
 800b136:	d808      	bhi.n	800b14a <_printf_i+0x7e>
 800b138:	296f      	cmp	r1, #111	; 0x6f
 800b13a:	d020      	beq.n	800b17e <_printf_i+0xb2>
 800b13c:	2970      	cmp	r1, #112	; 0x70
 800b13e:	d1dd      	bne.n	800b0fc <_printf_i+0x30>
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	f043 0320 	orr.w	r3, r3, #32
 800b146:	6023      	str	r3, [r4, #0]
 800b148:	e003      	b.n	800b152 <_printf_i+0x86>
 800b14a:	2975      	cmp	r1, #117	; 0x75
 800b14c:	d017      	beq.n	800b17e <_printf_i+0xb2>
 800b14e:	2978      	cmp	r1, #120	; 0x78
 800b150:	d1d4      	bne.n	800b0fc <_printf_i+0x30>
 800b152:	2378      	movs	r3, #120	; 0x78
 800b154:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b158:	4864      	ldr	r0, [pc, #400]	; (800b2ec <_printf_i+0x220>)
 800b15a:	e055      	b.n	800b208 <_printf_i+0x13c>
 800b15c:	6813      	ldr	r3, [r2, #0]
 800b15e:	1d19      	adds	r1, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6011      	str	r1, [r2, #0]
 800b164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b16c:	2301      	movs	r3, #1
 800b16e:	e08c      	b.n	800b28a <_printf_i+0x1be>
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6011      	str	r1, [r2, #0]
 800b174:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b178:	bf18      	it	ne
 800b17a:	b21b      	sxthne	r3, r3
 800b17c:	e7cf      	b.n	800b11e <_printf_i+0x52>
 800b17e:	6813      	ldr	r3, [r2, #0]
 800b180:	6825      	ldr	r5, [r4, #0]
 800b182:	1d18      	adds	r0, r3, #4
 800b184:	6010      	str	r0, [r2, #0]
 800b186:	0628      	lsls	r0, r5, #24
 800b188:	d501      	bpl.n	800b18e <_printf_i+0xc2>
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	e002      	b.n	800b194 <_printf_i+0xc8>
 800b18e:	0668      	lsls	r0, r5, #25
 800b190:	d5fb      	bpl.n	800b18a <_printf_i+0xbe>
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	4854      	ldr	r0, [pc, #336]	; (800b2e8 <_printf_i+0x21c>)
 800b196:	296f      	cmp	r1, #111	; 0x6f
 800b198:	bf14      	ite	ne
 800b19a:	220a      	movne	r2, #10
 800b19c:	2208      	moveq	r2, #8
 800b19e:	2100      	movs	r1, #0
 800b1a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1a4:	6865      	ldr	r5, [r4, #4]
 800b1a6:	60a5      	str	r5, [r4, #8]
 800b1a8:	2d00      	cmp	r5, #0
 800b1aa:	f2c0 8095 	blt.w	800b2d8 <_printf_i+0x20c>
 800b1ae:	6821      	ldr	r1, [r4, #0]
 800b1b0:	f021 0104 	bic.w	r1, r1, #4
 800b1b4:	6021      	str	r1, [r4, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d13d      	bne.n	800b236 <_printf_i+0x16a>
 800b1ba:	2d00      	cmp	r5, #0
 800b1bc:	f040 808e 	bne.w	800b2dc <_printf_i+0x210>
 800b1c0:	4665      	mov	r5, ip
 800b1c2:	2a08      	cmp	r2, #8
 800b1c4:	d10b      	bne.n	800b1de <_printf_i+0x112>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	07db      	lsls	r3, r3, #31
 800b1ca:	d508      	bpl.n	800b1de <_printf_i+0x112>
 800b1cc:	6923      	ldr	r3, [r4, #16]
 800b1ce:	6862      	ldr	r2, [r4, #4]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	bfde      	ittt	le
 800b1d4:	2330      	movle	r3, #48	; 0x30
 800b1d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b1de:	ebac 0305 	sub.w	r3, ip, r5
 800b1e2:	6123      	str	r3, [r4, #16]
 800b1e4:	f8cd 8000 	str.w	r8, [sp]
 800b1e8:	463b      	mov	r3, r7
 800b1ea:	aa03      	add	r2, sp, #12
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7ff fef6 	bl	800afe0 <_printf_common>
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d14d      	bne.n	800b294 <_printf_i+0x1c8>
 800b1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1fc:	b005      	add	sp, #20
 800b1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b202:	4839      	ldr	r0, [pc, #228]	; (800b2e8 <_printf_i+0x21c>)
 800b204:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b208:	6813      	ldr	r3, [r2, #0]
 800b20a:	6821      	ldr	r1, [r4, #0]
 800b20c:	1d1d      	adds	r5, r3, #4
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6015      	str	r5, [r2, #0]
 800b212:	060a      	lsls	r2, r1, #24
 800b214:	d50b      	bpl.n	800b22e <_printf_i+0x162>
 800b216:	07ca      	lsls	r2, r1, #31
 800b218:	bf44      	itt	mi
 800b21a:	f041 0120 	orrmi.w	r1, r1, #32
 800b21e:	6021      	strmi	r1, [r4, #0]
 800b220:	b91b      	cbnz	r3, 800b22a <_printf_i+0x15e>
 800b222:	6822      	ldr	r2, [r4, #0]
 800b224:	f022 0220 	bic.w	r2, r2, #32
 800b228:	6022      	str	r2, [r4, #0]
 800b22a:	2210      	movs	r2, #16
 800b22c:	e7b7      	b.n	800b19e <_printf_i+0xd2>
 800b22e:	064d      	lsls	r5, r1, #25
 800b230:	bf48      	it	mi
 800b232:	b29b      	uxthmi	r3, r3
 800b234:	e7ef      	b.n	800b216 <_printf_i+0x14a>
 800b236:	4665      	mov	r5, ip
 800b238:	fbb3 f1f2 	udiv	r1, r3, r2
 800b23c:	fb02 3311 	mls	r3, r2, r1, r3
 800b240:	5cc3      	ldrb	r3, [r0, r3]
 800b242:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b246:	460b      	mov	r3, r1
 800b248:	2900      	cmp	r1, #0
 800b24a:	d1f5      	bne.n	800b238 <_printf_i+0x16c>
 800b24c:	e7b9      	b.n	800b1c2 <_printf_i+0xf6>
 800b24e:	6813      	ldr	r3, [r2, #0]
 800b250:	6825      	ldr	r5, [r4, #0]
 800b252:	6961      	ldr	r1, [r4, #20]
 800b254:	1d18      	adds	r0, r3, #4
 800b256:	6010      	str	r0, [r2, #0]
 800b258:	0628      	lsls	r0, r5, #24
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	d501      	bpl.n	800b262 <_printf_i+0x196>
 800b25e:	6019      	str	r1, [r3, #0]
 800b260:	e002      	b.n	800b268 <_printf_i+0x19c>
 800b262:	066a      	lsls	r2, r5, #25
 800b264:	d5fb      	bpl.n	800b25e <_printf_i+0x192>
 800b266:	8019      	strh	r1, [r3, #0]
 800b268:	2300      	movs	r3, #0
 800b26a:	6123      	str	r3, [r4, #16]
 800b26c:	4665      	mov	r5, ip
 800b26e:	e7b9      	b.n	800b1e4 <_printf_i+0x118>
 800b270:	6813      	ldr	r3, [r2, #0]
 800b272:	1d19      	adds	r1, r3, #4
 800b274:	6011      	str	r1, [r2, #0]
 800b276:	681d      	ldr	r5, [r3, #0]
 800b278:	6862      	ldr	r2, [r4, #4]
 800b27a:	2100      	movs	r1, #0
 800b27c:	4628      	mov	r0, r5
 800b27e:	f7f4 ffdf 	bl	8000240 <memchr>
 800b282:	b108      	cbz	r0, 800b288 <_printf_i+0x1bc>
 800b284:	1b40      	subs	r0, r0, r5
 800b286:	6060      	str	r0, [r4, #4]
 800b288:	6863      	ldr	r3, [r4, #4]
 800b28a:	6123      	str	r3, [r4, #16]
 800b28c:	2300      	movs	r3, #0
 800b28e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b292:	e7a7      	b.n	800b1e4 <_printf_i+0x118>
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	462a      	mov	r2, r5
 800b298:	4639      	mov	r1, r7
 800b29a:	4630      	mov	r0, r6
 800b29c:	47c0      	blx	r8
 800b29e:	3001      	adds	r0, #1
 800b2a0:	d0aa      	beq.n	800b1f8 <_printf_i+0x12c>
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	079b      	lsls	r3, r3, #30
 800b2a6:	d413      	bmi.n	800b2d0 <_printf_i+0x204>
 800b2a8:	68e0      	ldr	r0, [r4, #12]
 800b2aa:	9b03      	ldr	r3, [sp, #12]
 800b2ac:	4298      	cmp	r0, r3
 800b2ae:	bfb8      	it	lt
 800b2b0:	4618      	movlt	r0, r3
 800b2b2:	e7a3      	b.n	800b1fc <_printf_i+0x130>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	464a      	mov	r2, r9
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	47c0      	blx	r8
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d09a      	beq.n	800b1f8 <_printf_i+0x12c>
 800b2c2:	3501      	adds	r5, #1
 800b2c4:	68e3      	ldr	r3, [r4, #12]
 800b2c6:	9a03      	ldr	r2, [sp, #12]
 800b2c8:	1a9b      	subs	r3, r3, r2
 800b2ca:	42ab      	cmp	r3, r5
 800b2cc:	dcf2      	bgt.n	800b2b4 <_printf_i+0x1e8>
 800b2ce:	e7eb      	b.n	800b2a8 <_printf_i+0x1dc>
 800b2d0:	2500      	movs	r5, #0
 800b2d2:	f104 0919 	add.w	r9, r4, #25
 800b2d6:	e7f5      	b.n	800b2c4 <_printf_i+0x1f8>
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1ac      	bne.n	800b236 <_printf_i+0x16a>
 800b2dc:	7803      	ldrb	r3, [r0, #0]
 800b2de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2e6:	e76c      	b.n	800b1c2 <_printf_i+0xf6>
 800b2e8:	0800b68d 	.word	0x0800b68d
 800b2ec:	0800b69e 	.word	0x0800b69e

0800b2f0 <memmove>:
 800b2f0:	4288      	cmp	r0, r1
 800b2f2:	b510      	push	{r4, lr}
 800b2f4:	eb01 0302 	add.w	r3, r1, r2
 800b2f8:	d807      	bhi.n	800b30a <memmove+0x1a>
 800b2fa:	1e42      	subs	r2, r0, #1
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	d00a      	beq.n	800b316 <memmove+0x26>
 800b300:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b304:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b308:	e7f8      	b.n	800b2fc <memmove+0xc>
 800b30a:	4283      	cmp	r3, r0
 800b30c:	d9f5      	bls.n	800b2fa <memmove+0xa>
 800b30e:	1881      	adds	r1, r0, r2
 800b310:	1ad2      	subs	r2, r2, r3
 800b312:	42d3      	cmn	r3, r2
 800b314:	d100      	bne.n	800b318 <memmove+0x28>
 800b316:	bd10      	pop	{r4, pc}
 800b318:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b31c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b320:	e7f7      	b.n	800b312 <memmove+0x22>

0800b322 <_realloc_r>:
 800b322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b324:	4607      	mov	r7, r0
 800b326:	4614      	mov	r4, r2
 800b328:	460e      	mov	r6, r1
 800b32a:	b921      	cbnz	r1, 800b336 <_realloc_r+0x14>
 800b32c:	4611      	mov	r1, r2
 800b32e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b332:	f7ff bc77 	b.w	800ac24 <_malloc_r>
 800b336:	b922      	cbnz	r2, 800b342 <_realloc_r+0x20>
 800b338:	f7ff fc26 	bl	800ab88 <_free_r>
 800b33c:	4625      	mov	r5, r4
 800b33e:	4628      	mov	r0, r5
 800b340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b342:	f000 f814 	bl	800b36e <_malloc_usable_size_r>
 800b346:	42a0      	cmp	r0, r4
 800b348:	d20f      	bcs.n	800b36a <_realloc_r+0x48>
 800b34a:	4621      	mov	r1, r4
 800b34c:	4638      	mov	r0, r7
 800b34e:	f7ff fc69 	bl	800ac24 <_malloc_r>
 800b352:	4605      	mov	r5, r0
 800b354:	2800      	cmp	r0, #0
 800b356:	d0f2      	beq.n	800b33e <_realloc_r+0x1c>
 800b358:	4631      	mov	r1, r6
 800b35a:	4622      	mov	r2, r4
 800b35c:	f7ff fc00 	bl	800ab60 <memcpy>
 800b360:	4631      	mov	r1, r6
 800b362:	4638      	mov	r0, r7
 800b364:	f7ff fc10 	bl	800ab88 <_free_r>
 800b368:	e7e9      	b.n	800b33e <_realloc_r+0x1c>
 800b36a:	4635      	mov	r5, r6
 800b36c:	e7e7      	b.n	800b33e <_realloc_r+0x1c>

0800b36e <_malloc_usable_size_r>:
 800b36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b372:	1f18      	subs	r0, r3, #4
 800b374:	2b00      	cmp	r3, #0
 800b376:	bfbc      	itt	lt
 800b378:	580b      	ldrlt	r3, [r1, r0]
 800b37a:	18c0      	addlt	r0, r0, r3
 800b37c:	4770      	bx	lr
	...

0800b380 <_init>:
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	bf00      	nop
 800b384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b386:	bc08      	pop	{r3}
 800b388:	469e      	mov	lr, r3
 800b38a:	4770      	bx	lr

0800b38c <_fini>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	bf00      	nop
 800b390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b392:	bc08      	pop	{r3}
 800b394:	469e      	mov	lr, r3
 800b396:	4770      	bx	lr
