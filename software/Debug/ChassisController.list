
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004874  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad4  08004ad4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004adc  08004adc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d4  20000010  08004af4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049e4  08004af4  000249e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ef3  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ea0  00000000  00000000  00037f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  0003add8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003c048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000034f9  00000000  00000000  0003d150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f513  00000000  00000000  00040649  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbf24  00000000  00000000  0004fb5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ba80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c88  00000000  00000000  0014bafc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08004a5c 	.word	0x08004a5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08004a5c 	.word	0x08004a5c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <MX_CAN1_Init+0x60>)
 8000546:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <MX_CAN1_Init+0x64>)
 8000548:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_CAN1_Init+0x60>)
 800054c:	2210      	movs	r2, #16
 800054e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <MX_CAN1_Init+0x60>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_CAN1_Init+0x60>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <MX_CAN1_Init+0x60>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_CAN1_Init+0x60>)
 8000564:	2200      	movs	r2, #0
 8000566:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <MX_CAN1_Init+0x60>)
 800056a:	2200      	movs	r2, #0
 800056c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_CAN1_Init+0x60>)
 8000570:	2200      	movs	r2, #0
 8000572:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <MX_CAN1_Init+0x60>)
 8000576:	2200      	movs	r2, #0
 8000578:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_CAN1_Init+0x60>)
 800057c:	2200      	movs	r2, #0
 800057e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <MX_CAN1_Init+0x60>)
 8000582:	2200      	movs	r2, #0
 8000584:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_CAN1_Init+0x60>)
 8000588:	2200      	movs	r2, #0
 800058a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_CAN1_Init+0x60>)
 800058e:	f000 fa13 	bl	80009b8 <HAL_CAN_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000598:	f000 f8fc 	bl	8000794 <Error_Handler>
  }

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20004934 	.word	0x20004934
 80005a4:	40006400 	.word	0x40006400

080005a8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <HAL_CAN_MspInit+0x7c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d128      	bne.n	800061c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <HAL_CAN_MspInit+0x80>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <HAL_CAN_MspInit+0x80>)
 80005d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <HAL_CAN_MspInit+0x80>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_CAN_MspInit+0x80>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a10      	ldr	r2, [pc, #64]	; (8000628 <HAL_CAN_MspInit+0x80>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <HAL_CAN_MspInit+0x80>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800060c:	2309      	movs	r3, #9
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_CAN_MspInit+0x84>)
 8000618:	f000 fbac 	bl	8000d74 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40006400 	.word	0x40006400
 8000628:	40023800 	.word	0x40023800
 800062c:	40020000 	.word	0x40020000

08000630 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <MX_FREERTOS_Init+0x18>)
 8000636:	2100      	movs	r1, #0
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_FREERTOS_Init+0x1c>)
 800063a:	f001 fcbb 	bl	8001fb4 <osThreadNew>
 800063e:	4602      	mov	r2, r0
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <MX_FREERTOS_Init+0x20>)
 8000642:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	08004a98 	.word	0x08004a98
 800064c:	08000655 	.word	0x08000655
 8000650:	2000495c 	.word	0x2000495c

08000654 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f001 fd4f 	bl	8002100 <osDelay>
 8000662:	e7fb      	b.n	800065c <StartDefaultTask+0x8>

08000664 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_GPIO_Init+0x2c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <MX_GPIO_Init+0x2c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_GPIO_Init+0x2c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 f961 	bl	800095e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f80c 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f7ff ffe0 	bl	8000664 <MX_GPIO_Init>
  MX_CAN1_Init();
 80006a4:	f7ff ff4c 	bl	8000540 <MX_CAN1_Init>
  //fsm_t *fsm = fsm_new(&userDefinedInitialState);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006a8:	f001 fc1a 	bl	8001ee0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006ac:	f7ff ffc0 	bl	8000630 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006b0:	f001 fc4a 	bl	8001f48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x20>
	...

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f9bf 	bl	8004a4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xb0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xb0>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xb0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <SystemClock_Config+0xb4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <SystemClock_Config+0xb4>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <SystemClock_Config+0xb4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fccf 	bl	80010c8 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000730:	f000 f830 	bl	8000794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ff68 	bl	8001624 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800075a:	f000 f81b 	bl	8000794 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d101      	bne.n	8000786 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000782:	f000 f8f9 	bl	8000978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40001400 	.word	0x40001400

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	2037      	movs	r0, #55	; 0x37
 8000802:	f000 fa8d 	bl	8000d20 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000806:	2037      	movs	r0, #55	; 0x37
 8000808:	f000 faa6 	bl	8000d58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <HAL_InitTick+0x9c>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <HAL_InitTick+0x9c>)
 8000812:	f043 0320 	orr.w	r3, r3, #32
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <HAL_InitTick+0x9c>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 0320 	and.w	r3, r3, #32
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000824:	f107 0210 	add.w	r2, r7, #16
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f001 f8b6 	bl	80019a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000834:	f001 f8a0 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 8000838:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800083a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <HAL_InitTick+0xa0>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	0c9b      	lsrs	r3, r3, #18
 8000844:	3b01      	subs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_InitTick+0xa4>)
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <HAL_InitTick+0xa8>)
 800084c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_InitTick+0xa4>)
 8000850:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000854:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_InitTick+0xa4>)
 8000858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_InitTick+0xa4>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_InitTick+0xa4>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <HAL_InitTick+0xa4>)
 800086a:	f001 f8cb 	bl	8001a04 <HAL_TIM_Base_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d104      	bne.n	800087e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <HAL_InitTick+0xa4>)
 8000876:	f001 f8fb 	bl	8001a70 <HAL_TIM_Base_Start_IT>
 800087a:	4603      	mov	r3, r0
 800087c:	e000      	b.n	8000880 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	3730      	adds	r7, #48	; 0x30
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	431bde83 	.word	0x431bde83
 8000890:	20004960 	.word	0x20004960
 8000894:	40001400 	.word	0x40001400

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <TIM7_IRQHandler+0x10>)
 80008d2:	f001 f8f7 	bl	8001ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20004960 	.word	0x20004960

080008e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <SystemInit+0x28>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <SystemInit+0x28>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SystemInit+0x28>)
 80008f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fa:	609a      	str	r2, [r3, #8]
#endif
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000944 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000910:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000912:	e003      	b.n	800091c <LoopCopyDataInit>

08000914 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000916:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000918:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800091a:	3104      	adds	r1, #4

0800091c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000920:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000922:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000924:	d3f6      	bcc.n	8000914 <CopyDataInit>
  ldr  r2, =_sbss
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000928:	e002      	b.n	8000930 <LoopFillZerobss>

0800092a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800092a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800092c:	f842 3b04 	str.w	r3, [r2], #4

08000930 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000932:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000934:	d3f9      	bcc.n	800092a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000936:	f7ff ffd3 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f004 f857 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093e:	f7ff fea9 	bl	8000694 <main>
  bx  lr    
 8000942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000948:	08004ae4 	.word	0x08004ae4
  ldr  r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000950:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000954:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000958:	200049e4 	.word	0x200049e4

0800095c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC_IRQHandler>

0800095e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000962:	2003      	movs	r0, #3
 8000964:	f000 f9d1 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff ff3f 	bl	80007ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800096e:	f7ff ff19 	bl	80007a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	200049a0 	.word	0x200049a0

080009a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200049a0 	.word	0x200049a0

080009b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e0ed      	b.n	8000ba6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d102      	bne.n	80009dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fde6 	bl	80005a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 0202 	bic.w	r2, r2, #2
 80009ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ec:	f7ff ffd8 	bl	80009a0 <HAL_GetTick>
 80009f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009f2:	e012      	b.n	8000a1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009f4:	f7ff ffd4 	bl	80009a0 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	2b0a      	cmp	r3, #10
 8000a00:	d90b      	bls.n	8000a1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2205      	movs	r2, #5
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e0c5      	b.n	8000ba6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1e5      	bne.n	80009f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f042 0201 	orr.w	r2, r2, #1
 8000a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a38:	f7ff ffb2 	bl	80009a0 <HAL_GetTick>
 8000a3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a3e:	e012      	b.n	8000a66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a40:	f7ff ffae 	bl	80009a0 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b0a      	cmp	r3, #10
 8000a4c:	d90b      	bls.n	8000a66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e09f      	b.n	8000ba6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0e5      	beq.n	8000a40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7e1b      	ldrb	r3, [r3, #24]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d108      	bne.n	8000a8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	e007      	b.n	8000a9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	7e5b      	ldrb	r3, [r3, #25]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d108      	bne.n	8000ab8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e007      	b.n	8000ac8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ac6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7e9b      	ldrb	r3, [r3, #26]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d108      	bne.n	8000ae2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 0220 	orr.w	r2, r2, #32
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e007      	b.n	8000af2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f022 0220 	bic.w	r2, r2, #32
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	7edb      	ldrb	r3, [r3, #27]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d108      	bne.n	8000b0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 0210 	bic.w	r2, r2, #16
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	e007      	b.n	8000b1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 0210 	orr.w	r2, r2, #16
 8000b1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7f1b      	ldrb	r3, [r3, #28]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d108      	bne.n	8000b36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f042 0208 	orr.w	r2, r2, #8
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	e007      	b.n	8000b46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0208 	bic.w	r2, r2, #8
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7f5b      	ldrb	r3, [r3, #29]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d108      	bne.n	8000b60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f042 0204 	orr.w	r2, r2, #4
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e007      	b.n	8000b70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 0204 	bic.w	r2, r2, #4
 8000b6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	ea42 0103 	orr.w	r1, r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	1e5a      	subs	r2, r3, #1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	05fa0000 	.word	0x05fa0000

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e175      	b.n	8001080 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8164 	bne.w	800107a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d00b      	beq.n	8000dd2 <HAL_GPIO_Init+0x5e>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc6:	2b11      	cmp	r3, #17
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b12      	cmp	r3, #18
 8000dd0:	d130      	bne.n	8000e34 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x100>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80be 	beq.w	800107a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b65      	ldr	r3, [pc, #404]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a64      	ldr	r2, [pc, #400]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b62      	ldr	r3, [pc, #392]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f16:	4a60      	ldr	r2, [pc, #384]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a57      	ldr	r2, [pc, #348]	; (800109c <HAL_GPIO_Init+0x328>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d037      	beq.n	8000fb2 <HAL_GPIO_Init+0x23e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a56      	ldr	r2, [pc, #344]	; (80010a0 <HAL_GPIO_Init+0x32c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d031      	beq.n	8000fae <HAL_GPIO_Init+0x23a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a55      	ldr	r2, [pc, #340]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d02b      	beq.n	8000faa <HAL_GPIO_Init+0x236>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a54      	ldr	r2, [pc, #336]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x232>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a53      	ldr	r2, [pc, #332]	; (80010ac <HAL_GPIO_Init+0x338>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x22e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a52      	ldr	r2, [pc, #328]	; (80010b0 <HAL_GPIO_Init+0x33c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x22a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a51      	ldr	r2, [pc, #324]	; (80010b4 <HAL_GPIO_Init+0x340>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x226>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a50      	ldr	r2, [pc, #320]	; (80010b8 <HAL_GPIO_Init+0x344>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x222>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	; (80010bc <HAL_GPIO_Init+0x348>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x21e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4e      	ldr	r2, [pc, #312]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	e012      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f8e:	230a      	movs	r3, #10
 8000f90:	e010      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f92:	2308      	movs	r3, #8
 8000f94:	e00e      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00c      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e00a      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fc4:	4934      	ldr	r1, [pc, #208]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff6:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001020:	4a28      	ldr	r2, [pc, #160]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104a:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <HAL_GPIO_Init+0x350>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f ae86 	bls.w	8000d94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	3724      	adds	r7, #36	; 0x24
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40023800 	.word	0x40023800
 8001098:	40013800 	.word	0x40013800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020c00 	.word	0x40020c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40021400 	.word	0x40021400
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40021c00 	.word	0x40021c00
 80010bc:	40022000 	.word	0x40022000
 80010c0:	40022400 	.word	0x40022400
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e29b      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8087 	beq.w	80011fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ec:	4b96      	ldr	r3, [pc, #600]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d00c      	beq.n	8001112 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f8:	4b93      	ldr	r3, [pc, #588]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d112      	bne.n	800112a <HAL_RCC_OscConfig+0x62>
 8001104:	4b90      	ldr	r3, [pc, #576]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001110:	d10b      	bne.n	800112a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001112:	4b8d      	ldr	r3, [pc, #564]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d06c      	beq.n	80011f8 <HAL_RCC_OscConfig+0x130>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d168      	bne.n	80011f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e275      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001132:	d106      	bne.n	8001142 <HAL_RCC_OscConfig+0x7a>
 8001134:	4b84      	ldr	r3, [pc, #528]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a83      	ldr	r2, [pc, #524]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 800113a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e02e      	b.n	80011a0 <HAL_RCC_OscConfig+0xd8>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x9c>
 800114a:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7e      	ldr	r2, [pc, #504]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b7c      	ldr	r3, [pc, #496]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7b      	ldr	r2, [pc, #492]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 800115c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xd8>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0xc0>
 800116e:	4b76      	ldr	r3, [pc, #472]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a75      	ldr	r2, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b73      	ldr	r3, [pc, #460]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a72      	ldr	r2, [pc, #456]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xd8>
 8001188:	4b6f      	ldr	r3, [pc, #444]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a6e      	ldr	r2, [pc, #440]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b6c      	ldr	r3, [pc, #432]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a6b      	ldr	r2, [pc, #428]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fbfa 	bl	80009a0 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fbf6 	bl	80009a0 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e229      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b61      	ldr	r3, [pc, #388]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xe8>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fbe6 	bl	80009a0 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fbe2 	bl	80009a0 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e215      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b57      	ldr	r3, [pc, #348]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x110>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d069      	beq.n	80012da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001206:	4b50      	ldr	r3, [pc, #320]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x190>
 800121e:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x17a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1e9      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	493d      	ldr	r1, [pc, #244]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e040      	b.n	80012da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d023      	beq.n	80012a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b39      	ldr	r3, [pc, #228]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a38      	ldr	r2, [pc, #224]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff fb98 	bl	80009a0 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fb94 	bl	80009a0 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e1c7      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4929      	ldr	r1, [pc, #164]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
 80012a6:	e018      	b.n	80012da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a26      	ldr	r2, [pc, #152]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80012ae:	f023 0301 	bic.w	r3, r3, #1
 80012b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fb74 	bl	80009a0 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fb70 	bl	80009a0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1a3      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d038      	beq.n	8001358 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d019      	beq.n	8001322 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80012f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f2:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb51 	bl	80009a0 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001302:	f7ff fb4d 	bl	80009a0 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e180      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x23a>
 8001320:	e01a      	b.n	8001358 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_RCC_OscConfig+0x280>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132e:	f7ff fb37 	bl	80009a0 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	e00a      	b.n	800134c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001336:	f7ff fb33 	bl	80009a0 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d903      	bls.n	800134c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e166      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
 8001348:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	4b92      	ldr	r3, [pc, #584]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 800134e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ee      	bne.n	8001336 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80a4 	beq.w	80014ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10d      	bne.n	800138e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b89      	ldr	r3, [pc, #548]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a88      	ldr	r2, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b86      	ldr	r3, [pc, #536]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138a:	2301      	movs	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800138e:	4b83      	ldr	r3, [pc, #524]	; (800159c <HAL_RCC_OscConfig+0x4d4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800139a:	4b80      	ldr	r3, [pc, #512]	; (800159c <HAL_RCC_OscConfig+0x4d4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a7f      	ldr	r2, [pc, #508]	; (800159c <HAL_RCC_OscConfig+0x4d4>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fafb 	bl	80009a0 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ae:	f7ff faf7 	bl	80009a0 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b64      	cmp	r3, #100	; 0x64
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e12a      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c0:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x4d4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x31a>
 80013d4:	4b70      	ldr	r3, [pc, #448]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d8:	4a6f      	ldr	r2, [pc, #444]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6713      	str	r3, [r2, #112]	; 0x70
 80013e0:	e02d      	b.n	800143e <HAL_RCC_OscConfig+0x376>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x33c>
 80013ea:	4b6b      	ldr	r3, [pc, #428]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ee:	4a6a      	ldr	r2, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6713      	str	r3, [r2, #112]	; 0x70
 80013f6:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	4a67      	ldr	r2, [pc, #412]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	6713      	str	r3, [r2, #112]	; 0x70
 8001402:	e01c      	b.n	800143e <HAL_RCC_OscConfig+0x376>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b05      	cmp	r3, #5
 800140a:	d10c      	bne.n	8001426 <HAL_RCC_OscConfig+0x35e>
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	4a61      	ldr	r2, [pc, #388]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6713      	str	r3, [r2, #112]	; 0x70
 8001418:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	4a5e      	ldr	r2, [pc, #376]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6713      	str	r3, [r2, #112]	; 0x70
 8001424:	e00b      	b.n	800143e <HAL_RCC_OscConfig+0x376>
 8001426:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142a:	4a5b      	ldr	r2, [pc, #364]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6713      	str	r3, [r2, #112]	; 0x70
 8001432:	4b59      	ldr	r3, [pc, #356]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	4a58      	ldr	r2, [pc, #352]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d015      	beq.n	8001472 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001446:	f7ff faab 	bl	80009a0 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff faa7 	bl	80009a0 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0d8      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ee      	beq.n	800144e <HAL_RCC_OscConfig+0x386>
 8001470:	e014      	b.n	800149c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fa95 	bl	80009a0 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fa91 	bl	80009a0 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0c2      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ee      	bne.n	800147a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a3c      	ldr	r2, [pc, #240]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80014a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80ae 	beq.w	8001614 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b8:	4b37      	ldr	r3, [pc, #220]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d06d      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d14b      	bne.n	8001564 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a31      	ldr	r2, [pc, #196]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80014d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fa62 	bl	80009a0 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fa5e 	bl	80009a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e091      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69da      	ldr	r2, [r3, #28]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	3b01      	subs	r3, #1
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	071b      	lsls	r3, r3, #28
 800152a:	491b      	ldr	r1, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800153a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fa30 	bl	80009a0 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fa2c 	bl	80009a0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e05f      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x47c>
 8001562:	e057      	b.n	8001614 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 800156a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800156e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fa16 	bl	80009a0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fa12 	bl	80009a0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e045      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_RCC_OscConfig+0x4d0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x4b0>
 8001596:	e03d      	b.n	8001614 <HAL_RCC_OscConfig+0x54c>
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_RCC_OscConfig+0x558>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d030      	beq.n	8001610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d129      	bne.n	8001610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d122      	bne.n	8001610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d8:	4293      	cmp	r3, r2
 80015da:	d119      	bne.n	8001610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d10f      	bne.n	8001610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0d0      	b.n	80017de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d910      	bls.n	800166c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 020f 	bic.w	r2, r3, #15
 8001652:	4965      	ldr	r1, [pc, #404]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 800168a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800168e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80016a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d040      	beq.n	8001748 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d115      	bne.n	8001706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e073      	b.n	80017de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06b      	b.n	80017de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4936      	ldr	r1, [pc, #216]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001718:	f7ff f942 	bl	80009a0 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f93e 	bl	80009a0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e053      	b.n	80017de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 020c 	and.w	r2, r3, #12
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1eb      	bne.n	8001720 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d210      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 020f 	bic.w	r2, r3, #15
 800175e:	4922      	ldr	r1, [pc, #136]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f821 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017ba:	4601      	mov	r1, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x1cc>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	fa21 f303 	lsr.w	r3, r1, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_RCC_ClockConfig+0x1d0>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1d4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f808 	bl	80007ec <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	08004abc 	.word	0x08004abc
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001812:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_GetSysClockFreq+0x158>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b04      	cmp	r3, #4
 800181c:	d007      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x32>
 800181e:	2b08      	cmp	r3, #8
 8001820:	d008      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x38>
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 808d 	bne.w	8001942 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <HAL_RCC_GetSysClockFreq+0x15c>)
 800182a:	60bb      	str	r3, [r7, #8]
      break;
 800182c:	e08c      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4b4b      	ldr	r3, [pc, #300]	; (800195c <HAL_RCC_GetSysClockFreq+0x160>)
 8001830:	60bb      	str	r3, [r7, #8]
      break;
 8001832:	e089      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001834:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_GetSysClockFreq+0x158>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800183c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800183e:	4b45      	ldr	r3, [pc, #276]	; (8001954 <HAL_RCC_GetSysClockFreq+0x158>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d023      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4b42      	ldr	r3, [pc, #264]	; (8001954 <HAL_RCC_GetSysClockFreq+0x158>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	f04f 0400 	mov.w	r4, #0
 8001854:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	ea03 0501 	and.w	r5, r3, r1
 8001860:	ea04 0602 	and.w	r6, r4, r2
 8001864:	4a3d      	ldr	r2, [pc, #244]	; (800195c <HAL_RCC_GetSysClockFreq+0x160>)
 8001866:	fb02 f106 	mul.w	r1, r2, r6
 800186a:	2200      	movs	r2, #0
 800186c:	fb02 f205 	mul.w	r2, r2, r5
 8001870:	440a      	add	r2, r1
 8001872:	493a      	ldr	r1, [pc, #232]	; (800195c <HAL_RCC_GetSysClockFreq+0x160>)
 8001874:	fba5 0101 	umull	r0, r1, r5, r1
 8001878:	1853      	adds	r3, r2, r1
 800187a:	4619      	mov	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f04f 0400 	mov.w	r4, #0
 8001882:	461a      	mov	r2, r3
 8001884:	4623      	mov	r3, r4
 8001886:	f7fe fcdb 	bl	8000240 <__aeabi_uldivmod>
 800188a:	4603      	mov	r3, r0
 800188c:	460c      	mov	r4, r1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e049      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_GetSysClockFreq+0x158>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	099b      	lsrs	r3, r3, #6
 8001898:	f04f 0400 	mov.w	r4, #0
 800189c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	ea03 0501 	and.w	r5, r3, r1
 80018a8:	ea04 0602 	and.w	r6, r4, r2
 80018ac:	4629      	mov	r1, r5
 80018ae:	4632      	mov	r2, r6
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	f04f 0400 	mov.w	r4, #0
 80018b8:	0154      	lsls	r4, r2, #5
 80018ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018be:	014b      	lsls	r3, r1, #5
 80018c0:	4619      	mov	r1, r3
 80018c2:	4622      	mov	r2, r4
 80018c4:	1b49      	subs	r1, r1, r5
 80018c6:	eb62 0206 	sbc.w	r2, r2, r6
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	f04f 0400 	mov.w	r4, #0
 80018d2:	0194      	lsls	r4, r2, #6
 80018d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018d8:	018b      	lsls	r3, r1, #6
 80018da:	1a5b      	subs	r3, r3, r1
 80018dc:	eb64 0402 	sbc.w	r4, r4, r2
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	00e2      	lsls	r2, r4, #3
 80018ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ee:	00d9      	lsls	r1, r3, #3
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	195b      	adds	r3, r3, r5
 80018f6:	eb44 0406 	adc.w	r4, r4, r6
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	02a2      	lsls	r2, r4, #10
 8001904:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001908:	0299      	lsls	r1, r3, #10
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	4618      	mov	r0, r3
 8001910:	4621      	mov	r1, r4
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f04f 0400 	mov.w	r4, #0
 8001918:	461a      	mov	r2, r3
 800191a:	4623      	mov	r3, r4
 800191c:	f7fe fc90 	bl	8000240 <__aeabi_uldivmod>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_GetSysClockFreq+0x158>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	0c1b      	lsrs	r3, r3, #16
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	3301      	adds	r3, #1
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	60bb      	str	r3, [r7, #8]
      break;
 8001940:	e002      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001944:	60bb      	str	r3, [r7, #8]
      break;
 8001946:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001948:	68bb      	ldr	r3, [r7, #8]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400
 800195c:	017d7840 	.word	0x017d7840

08001960 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_RCC_GetHCLKFreq+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800197c:	f7ff fff0 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 8001980:	4601      	mov	r1, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0a9b      	lsrs	r3, r3, #10
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4a03      	ldr	r2, [pc, #12]	; (800199c <HAL_RCC_GetPCLK1Freq+0x24>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	08004acc 	.word	0x08004acc

080019a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	220f      	movs	r2, #15
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_RCC_GetClockConfig+0x60>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 020f 	and.w	r2, r3, #15
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	601a      	str	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40023c00 	.word	0x40023c00

08001a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e01d      	b.n	8001a52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f815 	bl	8001a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f000 f986 	bl	8001d54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_TIM_Base_Start_IT+0x50>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d00b      	beq.n	8001ab2 <HAL_TIM_Base_Start_IT+0x42>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d007      	beq.n	8001ab2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	00010007 	.word	0x00010007

08001ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d122      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d11b      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0202 	mvn.w	r2, #2
 8001af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f905 	bl	8001d16 <HAL_TIM_IC_CaptureCallback>
 8001b0c:	e005      	b.n	8001b1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8f7 	bl	8001d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f908 	bl	8001d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d122      	bne.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d11b      	bne.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0204 	mvn.w	r2, #4
 8001b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8db 	bl	8001d16 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8cd 	bl	8001d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8de 	bl	8001d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d122      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0208 	mvn.w	r2, #8
 8001b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8b1 	bl	8001d16 <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f8a3 	bl	8001d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f8b4 	bl	8001d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d122      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d11b      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0210 	mvn.w	r2, #16
 8001bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f887 	bl	8001d16 <HAL_TIM_IC_CaptureCallback>
 8001c08:	e005      	b.n	8001c16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f879 	bl	8001d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f88a 	bl	8001d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d10e      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0201 	mvn.w	r2, #1
 8001c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fd94 	bl	8000770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	2b80      	cmp	r3, #128	; 0x80
 8001c54:	d10e      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c60:	2b80      	cmp	r3, #128	; 0x80
 8001c62:	d107      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f91a 	bl	8001ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c82:	d10e      	bne.n	8001ca2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8e:	2b80      	cmp	r3, #128	; 0x80
 8001c90:	d107      	bne.n	8001ca2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f90d 	bl	8001ebc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cac:	2b40      	cmp	r3, #64	; 0x40
 8001cae:	d10e      	bne.n	8001cce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	2b40      	cmp	r3, #64	; 0x40
 8001cbc:	d107      	bne.n	8001cce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f838 	bl	8001d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d10e      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d107      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f06f 0220 	mvn.w	r2, #32
 8001cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8cd 	bl	8001e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a40      	ldr	r2, [pc, #256]	; (8001e68 <TIM_Base_SetConfig+0x114>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d72:	d00f      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3d      	ldr	r2, [pc, #244]	; (8001e6c <TIM_Base_SetConfig+0x118>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00b      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3c      	ldr	r2, [pc, #240]	; (8001e70 <TIM_Base_SetConfig+0x11c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d007      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3b      	ldr	r2, [pc, #236]	; (8001e74 <TIM_Base_SetConfig+0x120>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d003      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3a      	ldr	r2, [pc, #232]	; (8001e78 <TIM_Base_SetConfig+0x124>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d108      	bne.n	8001da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a2f      	ldr	r2, [pc, #188]	; (8001e68 <TIM_Base_SetConfig+0x114>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02b      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d027      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <TIM_Base_SetConfig+0x118>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d023      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	; (8001e70 <TIM_Base_SetConfig+0x11c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01f      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a2a      	ldr	r2, [pc, #168]	; (8001e74 <TIM_Base_SetConfig+0x120>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01b      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a29      	ldr	r2, [pc, #164]	; (8001e78 <TIM_Base_SetConfig+0x124>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d017      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a28      	ldr	r2, [pc, #160]	; (8001e7c <TIM_Base_SetConfig+0x128>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <TIM_Base_SetConfig+0x12c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00f      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <TIM_Base_SetConfig+0x130>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00b      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <TIM_Base_SetConfig+0x134>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <TIM_Base_SetConfig+0x138>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d003      	beq.n	8001e06 <TIM_Base_SetConfig+0xb2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <TIM_Base_SetConfig+0x13c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d108      	bne.n	8001e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <TIM_Base_SetConfig+0x114>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d003      	beq.n	8001e4c <TIM_Base_SetConfig+0xf8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <TIM_Base_SetConfig+0x124>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d103      	bne.n	8001e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	615a      	str	r2, [r3, #20]
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800
 8001e74:	40000c00 	.word	0x40000c00
 8001e78:	40010400 	.word	0x40010400
 8001e7c:	40014000 	.word	0x40014000
 8001e80:	40014400 	.word	0x40014400
 8001e84:	40014800 	.word	0x40014800
 8001e88:	40001800 	.word	0x40001800
 8001e8c:	40001c00 	.word	0x40001c00
 8001e90:	40002000 	.word	0x40002000

08001e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ee6:	f3ef 8305 	mrs	r3, IPSR
 8001eea:	60bb      	str	r3, [r7, #8]
  return(result);
 8001eec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ef6:	607b      	str	r3, [r7, #4]
  return(result);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d105      	bne.n	8001f0a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001efe:	f3ef 8311 	mrs	r3, BASEPRI
 8001f02:	603b      	str	r3, [r7, #0]
  return(result);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <osKernelInitialize+0x3a>
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <osKernelInitialize+0x64>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d103      	bne.n	8001f1a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001f12:	f06f 0305 	mvn.w	r3, #5
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	e00c      	b.n	8001f34 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <osKernelInitialize+0x64>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <osKernelInitialize+0x64>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e002      	b.n	8001f34 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001f34:	68fb      	ldr	r3, [r7, #12]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	2000002c 	.word	0x2000002c

08001f48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f4e:	f3ef 8305 	mrs	r3, IPSR
 8001f52:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f5e:	607b      	str	r3, [r7, #4]
  return(result);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f66:	f3ef 8311 	mrs	r3, BASEPRI
 8001f6a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <osKernelStart+0x3a>
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <osKernelStart+0x68>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d103      	bne.n	8001f82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001f7a:	f06f 0305 	mvn.w	r3, #5
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e010      	b.n	8001fa4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <osKernelStart+0x68>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d109      	bne.n	8001f9e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f8a:	f7ff ffa1 	bl	8001ed0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <osKernelStart+0x68>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f94:	f001 f89c 	bl	80030d0 <vTaskStartScheduler>
      stat = osOK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e002      	b.n	8001fa4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fa2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000002c 	.word	0x2000002c

08001fb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b090      	sub	sp, #64	; 0x40
 8001fb8:	af04      	add	r7, sp, #16
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fc4:	f3ef 8305 	mrs	r3, IPSR
 8001fc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001fca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 808f 	bne.w	80020f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fde:	f3ef 8311 	mrs	r3, BASEPRI
 8001fe2:	617b      	str	r3, [r7, #20]
  return(result);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <osThreadNew+0x3e>
 8001fea:	4b44      	ldr	r3, [pc, #272]	; (80020fc <osThreadNew+0x148>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d07e      	beq.n	80020f0 <osThreadNew+0x13c>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d07b      	beq.n	80020f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001ffc:	2318      	movs	r3, #24
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002008:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d045      	beq.n	800209c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <osThreadNew+0x6a>
        name = attr->name;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <osThreadNew+0x90>
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	2b38      	cmp	r3, #56	; 0x38
 8002036:	d805      	bhi.n	8002044 <osThreadNew+0x90>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <osThreadNew+0x94>
        return (NULL);
 8002044:	2300      	movs	r3, #0
 8002046:	e054      	b.n	80020f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00e      	beq.n	800207e <osThreadNew+0xca>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b5b      	cmp	r3, #91	; 0x5b
 8002066:	d90a      	bls.n	800207e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <osThreadNew+0xca>
        mem = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	e010      	b.n	80020a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <osThreadNew+0xec>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <osThreadNew+0xec>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <osThreadNew+0xec>
          mem = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
 800209a:	e001      	b.n	80020a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d110      	bne.n	80020c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020ae:	9202      	str	r2, [sp, #8]
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fe2b 	bl	8002d18 <xTaskCreateStatic>
 80020c2:	4603      	mov	r3, r0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e013      	b.n	80020f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d110      	bne.n	80020f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fe79 	bl	8002dd8 <xTaskCreate>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d001      	beq.n	80020f0 <osThreadNew+0x13c>
          hTask = NULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020f0:	693b      	ldr	r3, [r7, #16]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3730      	adds	r7, #48	; 0x30
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000002c 	.word	0x2000002c

08002100 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002108:	f3ef 8305 	mrs	r3, IPSR
 800210c:	613b      	str	r3, [r7, #16]
  return(result);
 800210e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10f      	bne.n	8002134 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002114:	f3ef 8310 	mrs	r3, PRIMASK
 8002118:	60fb      	str	r3, [r7, #12]
  return(result);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002120:	f3ef 8311 	mrs	r3, BASEPRI
 8002124:	60bb      	str	r3, [r7, #8]
  return(result);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <osDelay+0x3c>
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <osDelay+0x58>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d103      	bne.n	800213c <osDelay+0x3c>
    stat = osErrorISR;
 8002134:	f06f 0305 	mvn.w	r3, #5
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e007      	b.n	800214c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 ff8c 	bl	8003064 <vTaskDelay>
    }
  }

  return (stat);
 800214c:	697b      	ldr	r3, [r7, #20]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000002c 	.word	0x2000002c

0800215c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <vApplicationGetIdleTaskMemory+0x2c>)
 800216c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <vApplicationGetIdleTaskMemory+0x30>)
 8002172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	601a      	str	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000030 	.word	0x20000030
 800218c:	2000008c 	.word	0x2000008c

08002190 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a07      	ldr	r2, [pc, #28]	; (80021bc <vApplicationGetTimerTaskMemory+0x2c>)
 80021a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <vApplicationGetTimerTaskMemory+0x30>)
 80021a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	2000028c 	.word	0x2000028c
 80021c0:	200002e8 	.word	0x200002e8

080021c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f103 0208 	add.w	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f103 0208 	add.w	r2, r3, #8
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f103 0208 	add.w	r2, r3, #8
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	601a      	str	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800227c:	d103      	bne.n	8002286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e00c      	b.n	80022a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3308      	adds	r3, #8
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e002      	b.n	8002294 <vListInsert+0x2e>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	429a      	cmp	r2, r3
 800229e:	d2f6      	bcs.n	800228e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6892      	ldr	r2, [r2, #8]
 80022ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6852      	ldr	r2, [r2, #4]
 80022f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	d103      	bne.n	800230c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1e5a      	subs	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10b      	bne.n	8002358 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	b672      	cpsid	i
 8002346:	f383 8811 	msr	BASEPRI, r3
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	b662      	cpsie	i
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	e7fe      	b.n	8002356 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8002358:	f002 f846 	bl	80043e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	68f9      	ldr	r1, [r7, #12]
 8002366:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	441a      	add	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	3b01      	subs	r3, #1
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	441a      	add	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d114      	bne.n	80023d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01a      	beq.n	80023ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3310      	adds	r3, #16
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 f916 	bl	80035ec <xTaskRemoveFromEventList>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d012      	beq.n	80023ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <xQueueGenericReset+0xd0>)
 80023c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	e009      	b.n	80023ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3310      	adds	r3, #16
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fef1 	bl	80021c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3324      	adds	r3, #36	; 0x24
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff feec 	bl	80021c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023ec:	f002 f82e 	bl	800444c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023f0:	2301      	movs	r3, #1
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000ed04 	.word	0xe000ed04

08002400 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08e      	sub	sp, #56	; 0x38
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <xQueueGenericCreateStatic+0x2c>
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	b672      	cpsid	i
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	b662      	cpsie	i
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
 800242a:	e7fe      	b.n	800242a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10b      	bne.n	800244a <xQueueGenericCreateStatic+0x4a>
 8002432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002436:	b672      	cpsid	i
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	b662      	cpsie	i
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
 8002448:	e7fe      	b.n	8002448 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <xQueueGenericCreateStatic+0x56>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <xQueueGenericCreateStatic+0x5a>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <xQueueGenericCreateStatic+0x5c>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <xQueueGenericCreateStatic+0x78>
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	b672      	cpsid	i
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	b662      	cpsie	i
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	e7fe      	b.n	8002476 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <xQueueGenericCreateStatic+0x84>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <xQueueGenericCreateStatic+0x88>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <xQueueGenericCreateStatic+0x8a>
 8002488:	2300      	movs	r3, #0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <xQueueGenericCreateStatic+0xa6>
 800248e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002492:	b672      	cpsid	i
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	b662      	cpsie	i
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	e7fe      	b.n	80024a4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80024a6:	2350      	movs	r3, #80	; 0x50
 80024a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b50      	cmp	r3, #80	; 0x50
 80024ae:	d00b      	beq.n	80024c8 <xQueueGenericCreateStatic+0xc8>
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	b672      	cpsid	i
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	b662      	cpsie	i
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	e7fe      	b.n	80024c6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80024c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00d      	beq.n	80024f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f805 	bl	80024fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3730      	adds	r7, #48	; 0x30
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e002      	b.n	800251c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002528:	2101      	movs	r1, #1
 800252a:	69b8      	ldr	r0, [r7, #24]
 800252c:	f7ff fefe 	bl	800232c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08e      	sub	sp, #56	; 0x38
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10b      	bne.n	8002574 <xQueueGenericSend+0x34>
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	b672      	cpsid	i
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	b662      	cpsie	i
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
 8002572:	e7fe      	b.n	8002572 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <xQueueGenericSend+0x42>
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <xQueueGenericSend+0x46>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <xQueueGenericSend+0x48>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <xQueueGenericSend+0x64>
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	b672      	cpsid	i
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	b662      	cpsie	i
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	e7fe      	b.n	80025a2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d103      	bne.n	80025b2 <xQueueGenericSend+0x72>
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <xQueueGenericSend+0x76>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <xQueueGenericSend+0x78>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <xQueueGenericSend+0x94>
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	b672      	cpsid	i
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	b662      	cpsie	i
 80025d0:	623b      	str	r3, [r7, #32]
 80025d2:	e7fe      	b.n	80025d2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025d4:	f001 f9c8 	bl	8003968 <xTaskGetSchedulerState>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <xQueueGenericSend+0xa4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <xQueueGenericSend+0xa8>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <xQueueGenericSend+0xaa>
 80025e8:	2300      	movs	r3, #0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <xQueueGenericSend+0xc6>
 80025ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f2:	b672      	cpsid	i
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	b662      	cpsie	i
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	e7fe      	b.n	8002604 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002606:	f001 feef 	bl	80043e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <xQueueGenericSend+0xdc>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d129      	bne.n	8002670 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002622:	f000 fa0d 	bl	8002a40 <prvCopyDataToQueue>
 8002626:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	2b00      	cmp	r3, #0
 800262e:	d010      	beq.n	8002652 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	3324      	adds	r3, #36	; 0x24
 8002634:	4618      	mov	r0, r3
 8002636:	f000 ffd9 	bl	80035ec <xTaskRemoveFromEventList>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002640:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <xQueueGenericSend+0x200>)
 8002642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	e00a      	b.n	8002668 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002658:	4b39      	ldr	r3, [pc, #228]	; (8002740 <xQueueGenericSend+0x200>)
 800265a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002668:	f001 fef0 	bl	800444c <vPortExitCritical>
				return pdPASS;
 800266c:	2301      	movs	r3, #1
 800266e:	e063      	b.n	8002738 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002676:	f001 fee9 	bl	800444c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800267a:	2300      	movs	r3, #0
 800267c:	e05c      	b.n	8002738 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800267e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002680:	2b00      	cmp	r3, #0
 8002682:	d106      	bne.n	8002692 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4618      	mov	r0, r3
 800268a:	f001 f813 	bl	80036b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800268e:	2301      	movs	r3, #1
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002692:	f001 fedb 	bl	800444c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002696:	f000 fd83 	bl	80031a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800269a:	f001 fea5 	bl	80043e8 <vPortEnterCritical>
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026a4:	b25b      	sxtb	r3, r3
 80026a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026aa:	d103      	bne.n	80026b4 <xQueueGenericSend+0x174>
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c0:	d103      	bne.n	80026ca <xQueueGenericSend+0x18a>
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026ca:	f001 febf 	bl	800444c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026ce:	1d3a      	adds	r2, r7, #4
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 f802 	bl	80036e0 <xTaskCheckForTimeOut>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d124      	bne.n	800272c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e4:	f000 faa4 	bl	8002c30 <prvIsQueueFull>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d018      	beq.n	8002720 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	3310      	adds	r3, #16
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 ff26 	bl	8003548 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026fe:	f000 fa2f 	bl	8002b60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002702:	f000 fd5b 	bl	80031bc <xTaskResumeAll>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	f47f af7c 	bne.w	8002606 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <xQueueGenericSend+0x200>)
 8002710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	e772      	b.n	8002606 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002722:	f000 fa1d 	bl	8002b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002726:	f000 fd49 	bl	80031bc <xTaskResumeAll>
 800272a:	e76c      	b.n	8002606 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800272c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800272e:	f000 fa17 	bl	8002b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002732:	f000 fd43 	bl	80031bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002738:	4618      	mov	r0, r3
 800273a:	3738      	adds	r7, #56	; 0x38
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	e000ed04 	.word	0xe000ed04

08002744 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08e      	sub	sp, #56	; 0x38
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <xQueueGenericSendFromISR+0x30>
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	b672      	cpsid	i
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	b662      	cpsie	i
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	e7fe      	b.n	8002772 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <xQueueGenericSendFromISR+0x3e>
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <xQueueGenericSendFromISR+0x42>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <xQueueGenericSendFromISR+0x44>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <xQueueGenericSendFromISR+0x60>
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	b672      	cpsid	i
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	b662      	cpsie	i
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	e7fe      	b.n	80027a2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d103      	bne.n	80027b2 <xQueueGenericSendFromISR+0x6e>
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <xQueueGenericSendFromISR+0x72>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <xQueueGenericSendFromISR+0x74>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10b      	bne.n	80027d4 <xQueueGenericSendFromISR+0x90>
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	b672      	cpsid	i
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	b662      	cpsie	i
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e7fe      	b.n	80027d2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027d4:	f001 fee8 	bl	80045a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80027d8:	f3ef 8211 	mrs	r2, BASEPRI
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	b672      	cpsid	i
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	b662      	cpsie	i
 80027f0:	61ba      	str	r2, [r7, #24]
 80027f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	429a      	cmp	r2, r3
 8002802:	d302      	bcc.n	800280a <xQueueGenericSendFromISR+0xc6>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d12c      	bne.n	8002864 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800281a:	f000 f911 	bl	8002a40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800281e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002826:	d112      	bne.n	800284e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d016      	beq.n	800285e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	3324      	adds	r3, #36	; 0x24
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fed9 	bl	80035ec <xTaskRemoveFromEventList>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00e      	beq.n	800285e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e007      	b.n	800285e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800284e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002852:	3301      	adds	r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	b25a      	sxtb	r2, r3
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800285e:	2301      	movs	r3, #1
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002862:	e001      	b.n	8002868 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002864:	2300      	movs	r3, #0
 8002866:	637b      	str	r3, [r7, #52]	; 0x34
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002874:	4618      	mov	r0, r3
 8002876:	3738      	adds	r7, #56	; 0x38
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <xQueueReceive+0x32>
	__asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	b672      	cpsid	i
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	b662      	cpsie	i
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	e7fe      	b.n	80028ac <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d103      	bne.n	80028bc <xQueueReceive+0x40>
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <xQueueReceive+0x44>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <xQueueReceive+0x46>
 80028c0:	2300      	movs	r3, #0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <xQueueReceive+0x62>
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	b672      	cpsid	i
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	b662      	cpsie	i
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	e7fe      	b.n	80028dc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028de:	f001 f843 	bl	8003968 <xTaskGetSchedulerState>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <xQueueReceive+0x72>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <xQueueReceive+0x76>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <xQueueReceive+0x78>
 80028f2:	2300      	movs	r3, #0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <xQueueReceive+0x94>
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	b672      	cpsid	i
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	b662      	cpsie	i
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e7fe      	b.n	800290e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002910:	f001 fd6a 	bl	80043e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01f      	beq.n	8002960 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002924:	f000 f8f6 	bl	8002b14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	1e5a      	subs	r2, r3, #1
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00f      	beq.n	8002958 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	3310      	adds	r3, #16
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fe55 	bl	80035ec <xTaskRemoveFromEventList>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002948:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <xQueueReceive+0x1c0>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002958:	f001 fd78 	bl	800444c <vPortExitCritical>
				return pdPASS;
 800295c:	2301      	movs	r3, #1
 800295e:	e069      	b.n	8002a34 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002966:	f001 fd71 	bl	800444c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800296a:	2300      	movs	r3, #0
 800296c:	e062      	b.n	8002a34 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fe9b 	bl	80036b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800297e:	2301      	movs	r3, #1
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002982:	f001 fd63 	bl	800444c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002986:	f000 fc0b 	bl	80031a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800298a:	f001 fd2d 	bl	80043e8 <vPortEnterCritical>
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002994:	b25b      	sxtb	r3, r3
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299a:	d103      	bne.n	80029a4 <xQueueReceive+0x128>
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029aa:	b25b      	sxtb	r3, r3
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b0:	d103      	bne.n	80029ba <xQueueReceive+0x13e>
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029ba:	f001 fd47 	bl	800444c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029be:	1d3a      	adds	r2, r7, #4
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fe8a 	bl	80036e0 <xTaskCheckForTimeOut>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d123      	bne.n	8002a1a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d4:	f000 f916 	bl	8002c04 <prvIsQueueEmpty>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d017      	beq.n	8002a0e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	3324      	adds	r3, #36	; 0x24
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fdae 	bl	8003548 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ee:	f000 f8b7 	bl	8002b60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029f2:	f000 fbe3 	bl	80031bc <xTaskResumeAll>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d189      	bne.n	8002910 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <xQueueReceive+0x1c0>)
 80029fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	e780      	b.n	8002910 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a10:	f000 f8a6 	bl	8002b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a14:	f000 fbd2 	bl	80031bc <xTaskResumeAll>
 8002a18:	e77a      	b.n	8002910 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a1c:	f000 f8a0 	bl	8002b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a20:	f000 fbcc 	bl	80031bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a26:	f000 f8ed 	bl	8002c04 <prvIsQueueEmpty>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f43f af6f 	beq.w	8002910 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3730      	adds	r7, #48	; 0x30
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d14d      	bne.n	8002b02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 ff9a 	bl	80039a4 <xTaskPriorityDisinherit>
 8002a70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	e043      	b.n	8002b02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d119      	bne.n	8002ab4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6858      	ldr	r0, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	f001 ffd2 	bl	8004a34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	441a      	add	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d32b      	bcc.n	8002b02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	e026      	b.n	8002b02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68d8      	ldr	r0, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	461a      	mov	r2, r3
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	f001 ffb8 	bl	8004a34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	425b      	negs	r3, r3
 8002ace:	441a      	add	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d207      	bcs.n	8002af0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	425b      	negs	r3, r3
 8002aea:	441a      	add	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d105      	bne.n	8002b02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b0a:	697b      	ldr	r3, [r7, #20]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d018      	beq.n	8002b58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d303      	bcc.n	8002b48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68d9      	ldr	r1, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	461a      	mov	r2, r3
 8002b52:	6838      	ldr	r0, [r7, #0]
 8002b54:	f001 ff6e 	bl	8004a34 <memcpy>
	}
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b68:	f001 fc3e 	bl	80043e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b74:	e011      	b.n	8002b9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3324      	adds	r3, #36	; 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd32 	bl	80035ec <xTaskRemoveFromEventList>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b8e:	f000 fe0b 	bl	80037a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	dce9      	bgt.n	8002b76 <prvUnlockQueue+0x16>
 8002ba2:	e000      	b.n	8002ba6 <prvUnlockQueue+0x46>
					break;
 8002ba4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002bae:	f001 fc4d 	bl	800444c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002bb2:	f001 fc19 	bl	80043e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bbe:	e011      	b.n	8002be4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d012      	beq.n	8002bee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3310      	adds	r3, #16
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fd0d 	bl	80035ec <xTaskRemoveFromEventList>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002bd8:	f000 fde6 	bl	80037a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002bdc:	7bbb      	ldrb	r3, [r7, #14]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	dce9      	bgt.n	8002bc0 <prvUnlockQueue+0x60>
 8002bec:	e000      	b.n	8002bf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002bee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	22ff      	movs	r2, #255	; 0xff
 8002bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002bf8:	f001 fc28 	bl	800444c <vPortExitCritical>
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c0c:	f001 fbec 	bl	80043e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e001      	b.n	8002c22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c22:	f001 fc13 	bl	800444c <vPortExitCritical>

	return xReturn;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c38:	f001 fbd6 	bl	80043e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d102      	bne.n	8002c4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e001      	b.n	8002c52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c52:	f001 fbfb 	bl	800444c <vPortExitCritical>

	return xReturn;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e014      	b.n	8002c9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c70:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <vQueueAddToRegistry+0x4c>)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10b      	bne.n	8002c94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c7c:	490b      	ldr	r1, [pc, #44]	; (8002cac <vQueueAddToRegistry+0x4c>)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <vQueueAddToRegistry+0x4c>)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c92:	e005      	b.n	8002ca0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b07      	cmp	r3, #7
 8002c9e:	d9e7      	bls.n	8002c70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	200049a4 	.word	0x200049a4

08002cb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002cc0:	f001 fb92 	bl	80043e8 <vPortEnterCritical>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cca:	b25b      	sxtb	r3, r3
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd0:	d103      	bne.n	8002cda <vQueueWaitForMessageRestricted+0x2a>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce0:	b25b      	sxtb	r3, r3
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce6:	d103      	bne.n	8002cf0 <vQueueWaitForMessageRestricted+0x40>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cf0:	f001 fbac 	bl	800444c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3324      	adds	r3, #36	; 0x24
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fc45 	bl	8003594 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f7ff ff28 	bl	8002b60 <prvUnlockQueue>
	}
 8002d10:	bf00      	nop
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08e      	sub	sp, #56	; 0x38
 8002d1c:	af04      	add	r7, sp, #16
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <xTaskCreateStatic+0x2c>
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	b672      	cpsid	i
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	b662      	cpsie	i
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	e7fe      	b.n	8002d42 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <xTaskCreateStatic+0x4a>
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	b672      	cpsid	i
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	b662      	cpsie	i
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e7fe      	b.n	8002d60 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d62:	235c      	movs	r3, #92	; 0x5c
 8002d64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b5c      	cmp	r3, #92	; 0x5c
 8002d6a:	d00b      	beq.n	8002d84 <xTaskCreateStatic+0x6c>
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	b672      	cpsid	i
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	b662      	cpsie	i
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	e7fe      	b.n	8002d82 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01e      	beq.n	8002dca <xTaskCreateStatic+0xb2>
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01b      	beq.n	8002dca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002da4:	2300      	movs	r3, #0
 8002da6:	9303      	str	r3, [sp, #12]
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	9302      	str	r3, [sp, #8]
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f850 	bl	8002e62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dc4:	f000 f8de 	bl	8002f84 <prvAddNewTaskToReadyList>
 8002dc8:	e001      	b.n	8002dce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002dce:	697b      	ldr	r3, [r7, #20]
	}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af04      	add	r7, sp, #16
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 fc1d 	bl	800462c <pvPortMalloc>
 8002df2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dfa:	205c      	movs	r0, #92	; 0x5c
 8002dfc:	f001 fc16 	bl	800462c <pvPortMalloc>
 8002e00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e0e:	e005      	b.n	8002e1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e10:	6978      	ldr	r0, [r7, #20]
 8002e12:	f001 fcd3 	bl	80047bc <vPortFree>
 8002e16:	e001      	b.n	8002e1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d017      	beq.n	8002e52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e2a:	88fa      	ldrh	r2, [r7, #6]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9303      	str	r3, [sp, #12]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	9302      	str	r3, [sp, #8]
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f80e 	bl	8002e62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e46:	69f8      	ldr	r0, [r7, #28]
 8002e48:	f000 f89c 	bl	8002f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	e002      	b.n	8002e58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e58:	69bb      	ldr	r3, [r7, #24]
	}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b088      	sub	sp, #32
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	21a5      	movs	r1, #165	; 0xa5
 8002e7c:	f001 fde5 	bl	8004a4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002e8a:	440b      	add	r3, r1
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f023 0307 	bic.w	r3, r3, #7
 8002e98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <prvInitialiseNewTask+0x5a>
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	b672      	cpsid	i
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	b662      	cpsie	i
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e7fe      	b.n	8002eba <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01f      	beq.n	8002f02 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	e012      	b.n	8002eee <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	7819      	ldrb	r1, [r3, #0]
 8002ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3334      	adds	r3, #52	; 0x34
 8002ed8:	460a      	mov	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3301      	adds	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d9e9      	bls.n	8002ec8 <prvInitialiseNewTask+0x66>
 8002ef4:	e000      	b.n	8002ef8 <prvInitialiseNewTask+0x96>
			{
				break;
 8002ef6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f00:	e003      	b.n	8002f0a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	2b37      	cmp	r3, #55	; 0x37
 8002f0e:	d901      	bls.n	8002f14 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f10:	2337      	movs	r3, #55	; 0x37
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	2200      	movs	r2, #0
 8002f24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f96a 	bl	8002204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	3318      	adds	r3, #24
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f965 	bl	8002204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	2200      	movs	r2, #0
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	69b8      	ldr	r0, [r7, #24]
 8002f64:	f001 f936 	bl	80041d4 <pxPortInitialiseStack>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f7a:	bf00      	nop
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f8c:	f001 fa2c 	bl	80043e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <prvAddNewTaskToReadyList+0xc4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4a2c      	ldr	r2, [pc, #176]	; (8003048 <prvAddNewTaskToReadyList+0xc4>)
 8002f98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	; (800304c <prvAddNewTaskToReadyList+0xc8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fa2:	4a2a      	ldr	r2, [pc, #168]	; (800304c <prvAddNewTaskToReadyList+0xc8>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <prvAddNewTaskToReadyList+0xc4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d110      	bne.n	8002fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fb0:	f000 fc1e 	bl	80037f0 <prvInitialiseTaskLists>
 8002fb4:	e00d      	b.n	8002fd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fb6:	4b26      	ldr	r3, [pc, #152]	; (8003050 <prvAddNewTaskToReadyList+0xcc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <prvAddNewTaskToReadyList+0xc8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d802      	bhi.n	8002fd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fcc:	4a1f      	ldr	r2, [pc, #124]	; (800304c <prvAddNewTaskToReadyList+0xc8>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <prvAddNewTaskToReadyList+0xd0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <prvAddNewTaskToReadyList+0xd0>)
 8002fda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <prvAddNewTaskToReadyList+0xd0>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <prvAddNewTaskToReadyList+0xd4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d903      	bls.n	8002ff8 <prvAddNewTaskToReadyList+0x74>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	4a18      	ldr	r2, [pc, #96]	; (8003058 <prvAddNewTaskToReadyList+0xd4>)
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4a15      	ldr	r2, [pc, #84]	; (800305c <prvAddNewTaskToReadyList+0xd8>)
 8003006:	441a      	add	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f7ff f905 	bl	800221e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003014:	f001 fa1a 	bl	800444c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <prvAddNewTaskToReadyList+0xcc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00e      	beq.n	800303e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <prvAddNewTaskToReadyList+0xc8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	429a      	cmp	r2, r3
 800302c:	d207      	bcs.n	800303e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <prvAddNewTaskToReadyList+0xdc>)
 8003030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000bbc 	.word	0x20000bbc
 800304c:	200006e8 	.word	0x200006e8
 8003050:	20000bc8 	.word	0x20000bc8
 8003054:	20000bd8 	.word	0x20000bd8
 8003058:	20000bc4 	.word	0x20000bc4
 800305c:	200006ec 	.word	0x200006ec
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <vTaskDelay+0x64>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <vTaskDelay+0x32>
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	b672      	cpsid	i
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	b662      	cpsie	i
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	e7fe      	b.n	8003094 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003096:	f000 f883 	bl	80031a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800309a:	2100      	movs	r1, #0
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fcf1 	bl	8003a84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030a2:	f000 f88b 	bl	80031bc <xTaskResumeAll>
 80030a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d107      	bne.n	80030be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <vTaskDelay+0x68>)
 80030b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000be4 	.word	0x20000be4
 80030cc:	e000ed04 	.word	0xe000ed04

080030d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030de:	463a      	mov	r2, r7
 80030e0:	1d39      	adds	r1, r7, #4
 80030e2:	f107 0308 	add.w	r3, r7, #8
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f838 	bl	800215c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	9202      	str	r2, [sp, #8]
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	2300      	movs	r3, #0
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2300      	movs	r3, #0
 80030fc:	460a      	mov	r2, r1
 80030fe:	4922      	ldr	r1, [pc, #136]	; (8003188 <vTaskStartScheduler+0xb8>)
 8003100:	4822      	ldr	r0, [pc, #136]	; (800318c <vTaskStartScheduler+0xbc>)
 8003102:	f7ff fe09 	bl	8002d18 <xTaskCreateStatic>
 8003106:	4602      	mov	r2, r0
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <vTaskStartScheduler+0xc0>)
 800310a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800310c:	4b20      	ldr	r3, [pc, #128]	; (8003190 <vTaskStartScheduler+0xc0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003114:	2301      	movs	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	e001      	b.n	800311e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d102      	bne.n	800312a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003124:	f000 fd02 	bl	8003b2c <xTimerCreateTimerTask>
 8003128:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d117      	bne.n	8003160 <vTaskStartScheduler+0x90>
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	b672      	cpsid	i
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	b662      	cpsie	i
 8003144:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <vTaskStartScheduler+0xc4>)
 8003148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800314c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <vTaskStartScheduler+0xc8>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <vTaskStartScheduler+0xcc>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800315a:	f001 f8c9 	bl	80042f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800315e:	e00f      	b.n	8003180 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003166:	d10b      	bne.n	8003180 <vTaskStartScheduler+0xb0>
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	b672      	cpsid	i
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	b662      	cpsie	i
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e7fe      	b.n	800317e <vTaskStartScheduler+0xae>
}
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	08004a80 	.word	0x08004a80
 800318c:	080037c1 	.word	0x080037c1
 8003190:	20000be0 	.word	0x20000be0
 8003194:	20000bdc 	.word	0x20000bdc
 8003198:	20000bc8 	.word	0x20000bc8
 800319c:	20000bc0 	.word	0x20000bc0

080031a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <vTaskSuspendAll+0x18>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4a03      	ldr	r2, [pc, #12]	; (80031b8 <vTaskSuspendAll+0x18>)
 80031ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	20000be4 	.word	0x20000be4

080031bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031ca:	4b42      	ldr	r3, [pc, #264]	; (80032d4 <xTaskResumeAll+0x118>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <xTaskResumeAll+0x2e>
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	b672      	cpsid	i
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	b662      	cpsie	i
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	e7fe      	b.n	80031e8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031ea:	f001 f8fd 	bl	80043e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <xTaskResumeAll+0x118>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	4a37      	ldr	r2, [pc, #220]	; (80032d4 <xTaskResumeAll+0x118>)
 80031f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <xTaskResumeAll+0x118>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d162      	bne.n	80032c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <xTaskResumeAll+0x11c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d05e      	beq.n	80032c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003208:	e02f      	b.n	800326a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <xTaskResumeAll+0x120>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3318      	adds	r3, #24
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff f85e 	bl	80022d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3304      	adds	r3, #4
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff f859 	bl	80022d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322a:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <xTaskResumeAll+0x124>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d903      	bls.n	800323a <xTaskResumeAll+0x7e>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <xTaskResumeAll+0x124>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <xTaskResumeAll+0x128>)
 8003248:	441a      	add	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7fe ffe4 	bl	800221e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <xTaskResumeAll+0x12c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <xTaskResumeAll+0x130>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <xTaskResumeAll+0x120>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1cb      	bne.n	800320a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003278:	f000 fb56 	bl	8003928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <xTaskResumeAll+0x134>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003288:	f000 f846 	bl	8003318 <xTaskIncrementTick>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <xTaskResumeAll+0x130>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f1      	bne.n	8003288 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <xTaskResumeAll+0x134>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <xTaskResumeAll+0x130>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032b2:	2301      	movs	r3, #1
 80032b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <xTaskResumeAll+0x138>)
 80032b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032c6:	f001 f8c1 	bl	800444c <vPortExitCritical>

	return xAlreadyYielded;
 80032ca:	68bb      	ldr	r3, [r7, #8]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000be4 	.word	0x20000be4
 80032d8:	20000bbc 	.word	0x20000bbc
 80032dc:	20000b7c 	.word	0x20000b7c
 80032e0:	20000bc4 	.word	0x20000bc4
 80032e4:	200006ec 	.word	0x200006ec
 80032e8:	200006e8 	.word	0x200006e8
 80032ec:	20000bd0 	.word	0x20000bd0
 80032f0:	20000bcc 	.word	0x20000bcc
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <xTaskGetTickCount+0x1c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003304:	687b      	ldr	r3, [r7, #4]
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000bc0 	.word	0x20000bc0

08003318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003322:	4b4f      	ldr	r3, [pc, #316]	; (8003460 <xTaskIncrementTick+0x148>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 808a 	bne.w	8003440 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800332c:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <xTaskIncrementTick+0x14c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3301      	adds	r3, #1
 8003332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003334:	4a4b      	ldr	r2, [pc, #300]	; (8003464 <xTaskIncrementTick+0x14c>)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d121      	bne.n	8003384 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <xTaskIncrementTick+0x150>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <xTaskIncrementTick+0x4a>
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	b672      	cpsid	i
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	b662      	cpsie	i
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	e7fe      	b.n	8003360 <xTaskIncrementTick+0x48>
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <xTaskIncrementTick+0x150>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	4b40      	ldr	r3, [pc, #256]	; (800346c <xTaskIncrementTick+0x154>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3e      	ldr	r2, [pc, #248]	; (8003468 <xTaskIncrementTick+0x150>)
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4a3e      	ldr	r2, [pc, #248]	; (800346c <xTaskIncrementTick+0x154>)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <xTaskIncrementTick+0x158>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3301      	adds	r3, #1
 800337c:	4a3c      	ldr	r2, [pc, #240]	; (8003470 <xTaskIncrementTick+0x158>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	f000 fad2 	bl	8003928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003384:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <xTaskIncrementTick+0x15c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	429a      	cmp	r2, r3
 800338c:	d349      	bcc.n	8003422 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <xTaskIncrementTick+0x150>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003398:	4b36      	ldr	r3, [pc, #216]	; (8003474 <xTaskIncrementTick+0x15c>)
 800339a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800339e:	601a      	str	r2, [r3, #0]
					break;
 80033a0:	e03f      	b.n	8003422 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a2:	4b31      	ldr	r3, [pc, #196]	; (8003468 <xTaskIncrementTick+0x150>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d203      	bcs.n	80033c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033ba:	4a2e      	ldr	r2, [pc, #184]	; (8003474 <xTaskIncrementTick+0x15c>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033c0:	e02f      	b.n	8003422 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3304      	adds	r3, #4
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe ff86 	bl	80022d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3318      	adds	r3, #24
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe ff7d 	bl	80022d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <xTaskIncrementTick+0x160>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d903      	bls.n	80033f2 <xTaskIncrementTick+0xda>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	4a22      	ldr	r2, [pc, #136]	; (8003478 <xTaskIncrementTick+0x160>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <xTaskIncrementTick+0x164>)
 8003400:	441a      	add	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3304      	adds	r3, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f7fe ff08 	bl	800221e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <xTaskIncrementTick+0x168>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	429a      	cmp	r2, r3
 800341a:	d3b8      	bcc.n	800338e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003420:	e7b5      	b.n	800338e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <xTaskIncrementTick+0x168>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003428:	4914      	ldr	r1, [pc, #80]	; (800347c <xTaskIncrementTick+0x164>)
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d907      	bls.n	800344a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800343a:	2301      	movs	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e004      	b.n	800344a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <xTaskIncrementTick+0x16c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <xTaskIncrementTick+0x16c>)
 8003448:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800344a:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <xTaskIncrementTick+0x170>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003456:	697b      	ldr	r3, [r7, #20]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000be4 	.word	0x20000be4
 8003464:	20000bc0 	.word	0x20000bc0
 8003468:	20000b74 	.word	0x20000b74
 800346c:	20000b78 	.word	0x20000b78
 8003470:	20000bd4 	.word	0x20000bd4
 8003474:	20000bdc 	.word	0x20000bdc
 8003478:	20000bc4 	.word	0x20000bc4
 800347c:	200006ec 	.word	0x200006ec
 8003480:	200006e8 	.word	0x200006e8
 8003484:	20000bcc 	.word	0x20000bcc
 8003488:	20000bd0 	.word	0x20000bd0

0800348c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003492:	4b28      	ldr	r3, [pc, #160]	; (8003534 <vTaskSwitchContext+0xa8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800349a:	4b27      	ldr	r3, [pc, #156]	; (8003538 <vTaskSwitchContext+0xac>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034a0:	e042      	b.n	8003528 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <vTaskSwitchContext+0xac>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <vTaskSwitchContext+0xb0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	e011      	b.n	80034d4 <vTaskSwitchContext+0x48>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <vTaskSwitchContext+0x42>
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	b672      	cpsid	i
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	b662      	cpsie	i
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e7fe      	b.n	80034cc <vTaskSwitchContext+0x40>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	491a      	ldr	r1, [pc, #104]	; (8003540 <vTaskSwitchContext+0xb4>)
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0e3      	beq.n	80034b0 <vTaskSwitchContext+0x24>
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4a13      	ldr	r2, [pc, #76]	; (8003540 <vTaskSwitchContext+0xb4>)
 80034f4:	4413      	add	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3308      	adds	r3, #8
 800350a:	429a      	cmp	r2, r3
 800350c:	d104      	bne.n	8003518 <vTaskSwitchContext+0x8c>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <vTaskSwitchContext+0xb8>)
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4a06      	ldr	r2, [pc, #24]	; (800353c <vTaskSwitchContext+0xb0>)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	20000be4 	.word	0x20000be4
 8003538:	20000bd0 	.word	0x20000bd0
 800353c:	20000bc4 	.word	0x20000bc4
 8003540:	200006ec 	.word	0x200006ec
 8003544:	200006e8 	.word	0x200006e8

08003548 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <vTaskPlaceOnEventList+0x28>
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	b672      	cpsid	i
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	b662      	cpsie	i
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e7fe      	b.n	800356e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <vTaskPlaceOnEventList+0x48>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3318      	adds	r3, #24
 8003576:	4619      	mov	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fe fe74 	bl	8002266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800357e:	2101      	movs	r1, #1
 8003580:	6838      	ldr	r0, [r7, #0]
 8003582:	f000 fa7f 	bl	8003a84 <prvAddCurrentTaskToDelayedList>
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200006e8 	.word	0x200006e8

08003594 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <vTaskPlaceOnEventListRestricted+0x2a>
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	b672      	cpsid	i
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	b662      	cpsie	i
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e7fe      	b.n	80035bc <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3318      	adds	r3, #24
 80035c4:	4619      	mov	r1, r3
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7fe fe29 	bl	800221e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	68b8      	ldr	r0, [r7, #8]
 80035dc:	f000 fa52 	bl	8003a84 <prvAddCurrentTaskToDelayedList>
	}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200006e8 	.word	0x200006e8

080035ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <xTaskRemoveFromEventList+0x2e>
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	b672      	cpsid	i
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	b662      	cpsie	i
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e7fe      	b.n	8003618 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	3318      	adds	r3, #24
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe fe5a 	bl	80022d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <xTaskRemoveFromEventList+0xb0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11d      	bne.n	8003668 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fe51 	bl	80022d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <xTaskRemoveFromEventList+0xb4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d903      	bls.n	800364a <xTaskRemoveFromEventList+0x5e>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <xTaskRemoveFromEventList+0xb4>)
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <xTaskRemoveFromEventList+0xb8>)
 8003658:	441a      	add	r2, r3
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	3304      	adds	r3, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f7fe fddc 	bl	800221e <vListInsertEnd>
 8003666:	e005      	b.n	8003674 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	3318      	adds	r3, #24
 800366c:	4619      	mov	r1, r3
 800366e:	480e      	ldr	r0, [pc, #56]	; (80036a8 <xTaskRemoveFromEventList+0xbc>)
 8003670:	f7fe fdd5 	bl	800221e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <xTaskRemoveFromEventList+0xc0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	429a      	cmp	r2, r3
 8003680:	d905      	bls.n	800368e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003682:	2301      	movs	r3, #1
 8003684:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <xTaskRemoveFromEventList+0xc4>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e001      	b.n	8003692 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003692:	697b      	ldr	r3, [r7, #20]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20000be4 	.word	0x20000be4
 80036a0:	20000bc4 	.word	0x20000bc4
 80036a4:	200006ec 	.word	0x200006ec
 80036a8:	20000b7c 	.word	0x20000b7c
 80036ac:	200006e8 	.word	0x200006e8
 80036b0:	20000bd0 	.word	0x20000bd0

080036b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <vTaskInternalSetTimeOutState+0x24>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <vTaskInternalSetTimeOutState+0x28>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	605a      	str	r2, [r3, #4]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	20000bd4 	.word	0x20000bd4
 80036dc:	20000bc0 	.word	0x20000bc0

080036e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <xTaskCheckForTimeOut+0x28>
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	b672      	cpsid	i
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	b662      	cpsie	i
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	e7fe      	b.n	8003706 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <xTaskCheckForTimeOut+0x46>
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	b672      	cpsid	i
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	b662      	cpsie	i
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e7fe      	b.n	8003724 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8003726:	f000 fe5f 	bl	80043e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <xTaskCheckForTimeOut+0xc0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003742:	d102      	bne.n	800374a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	e023      	b.n	8003792 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <xTaskCheckForTimeOut+0xc4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d007      	beq.n	8003766 <xTaskCheckForTimeOut+0x86>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	429a      	cmp	r2, r3
 800375e:	d302      	bcc.n	8003766 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	e015      	b.n	8003792 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	d20b      	bcs.n	8003788 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	1ad2      	subs	r2, r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff99 	bl	80036b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e004      	b.n	8003792 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800378e:	2301      	movs	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003792:	f000 fe5b 	bl	800444c <vPortExitCritical>

	return xReturn;
 8003796:	69fb      	ldr	r3, [r7, #28]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000bc0 	.word	0x20000bc0
 80037a4:	20000bd4 	.word	0x20000bd4

080037a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <vTaskMissedYield+0x14>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20000bd0 	.word	0x20000bd0

080037c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037c8:	f000 f852 	bl	8003870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <prvIdleTask+0x28>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d9f9      	bls.n	80037c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <prvIdleTask+0x2c>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037e4:	e7f0      	b.n	80037c8 <prvIdleTask+0x8>
 80037e6:	bf00      	nop
 80037e8:	200006ec 	.word	0x200006ec
 80037ec:	e000ed04 	.word	0xe000ed04

080037f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	e00c      	b.n	8003816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <prvInitialiseTaskLists+0x60>)
 8003808:	4413      	add	r3, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fcda 	bl	80021c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3301      	adds	r3, #1
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b37      	cmp	r3, #55	; 0x37
 800381a:	d9ef      	bls.n	80037fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800381c:	480d      	ldr	r0, [pc, #52]	; (8003854 <prvInitialiseTaskLists+0x64>)
 800381e:	f7fe fcd1 	bl	80021c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003822:	480d      	ldr	r0, [pc, #52]	; (8003858 <prvInitialiseTaskLists+0x68>)
 8003824:	f7fe fcce 	bl	80021c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003828:	480c      	ldr	r0, [pc, #48]	; (800385c <prvInitialiseTaskLists+0x6c>)
 800382a:	f7fe fccb 	bl	80021c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800382e:	480c      	ldr	r0, [pc, #48]	; (8003860 <prvInitialiseTaskLists+0x70>)
 8003830:	f7fe fcc8 	bl	80021c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003834:	480b      	ldr	r0, [pc, #44]	; (8003864 <prvInitialiseTaskLists+0x74>)
 8003836:	f7fe fcc5 	bl	80021c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <prvInitialiseTaskLists+0x78>)
 800383c:	4a05      	ldr	r2, [pc, #20]	; (8003854 <prvInitialiseTaskLists+0x64>)
 800383e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <prvInitialiseTaskLists+0x7c>)
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <prvInitialiseTaskLists+0x68>)
 8003844:	601a      	str	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	200006ec 	.word	0x200006ec
 8003854:	20000b4c 	.word	0x20000b4c
 8003858:	20000b60 	.word	0x20000b60
 800385c:	20000b7c 	.word	0x20000b7c
 8003860:	20000b90 	.word	0x20000b90
 8003864:	20000ba8 	.word	0x20000ba8
 8003868:	20000b74 	.word	0x20000b74
 800386c:	20000b78 	.word	0x20000b78

08003870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003876:	e019      	b.n	80038ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003878:	f000 fdb6 	bl	80043e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <prvCheckTasksWaitingTermination+0x4c>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	4618      	mov	r0, r3
 800388a:	f7fe fd25 	bl	80022d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <prvCheckTasksWaitingTermination+0x50>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3b01      	subs	r3, #1
 8003894:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <prvCheckTasksWaitingTermination+0x50>)
 8003896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <prvCheckTasksWaitingTermination+0x54>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3b01      	subs	r3, #1
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <prvCheckTasksWaitingTermination+0x54>)
 80038a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038a2:	f000 fdd3 	bl	800444c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f80e 	bl	80038c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <prvCheckTasksWaitingTermination+0x54>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e1      	bne.n	8003878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000b90 	.word	0x20000b90
 80038c0:	20000bbc 	.word	0x20000bbc
 80038c4:	20000ba4 	.word	0x20000ba4

080038c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 ff6c 	bl	80047bc <vPortFree>
				vPortFree( pxTCB );
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 ff69 	bl	80047bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038ea:	e019      	b.n	8003920 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d103      	bne.n	80038fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 ff60 	bl	80047bc <vPortFree>
	}
 80038fc:	e010      	b.n	8003920 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003904:	2b02      	cmp	r3, #2
 8003906:	d00b      	beq.n	8003920 <prvDeleteTCB+0x58>
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	b672      	cpsid	i
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	b662      	cpsie	i
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e7fe      	b.n	800391e <prvDeleteTCB+0x56>
	}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <prvResetNextTaskUnblockTime+0x38>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <prvResetNextTaskUnblockTime+0x3c>)
 800393a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800393e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003940:	e008      	b.n	8003954 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <prvResetNextTaskUnblockTime+0x38>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <prvResetNextTaskUnblockTime+0x3c>)
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	20000b74 	.word	0x20000b74
 8003964:	20000bdc 	.word	0x20000bdc

08003968 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <xTaskGetSchedulerState+0x34>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003976:	2301      	movs	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	e008      	b.n	800398e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <xTaskGetSchedulerState+0x38>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003984:	2302      	movs	r3, #2
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	e001      	b.n	800398e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800398e:	687b      	ldr	r3, [r7, #4]
	}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	20000bc8 	.word	0x20000bc8
 80039a0:	20000be4 	.word	0x20000be4

080039a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d058      	beq.n	8003a6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039ba:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <xTaskPriorityDisinherit+0xd4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d00b      	beq.n	80039dc <xTaskPriorityDisinherit+0x38>
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	b672      	cpsid	i
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	b662      	cpsie	i
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e7fe      	b.n	80039da <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <xTaskPriorityDisinherit+0x58>
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	b672      	cpsid	i
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	b662      	cpsie	i
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	e7fe      	b.n	80039fa <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	1e5a      	subs	r2, r3, #1
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d02c      	beq.n	8003a6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d128      	bne.n	8003a6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fc5a 	bl	80022d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <xTaskPriorityDisinherit+0xd8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d903      	bls.n	8003a4c <xTaskPriorityDisinherit+0xa8>
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <xTaskPriorityDisinherit+0xd8>)
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <xTaskPriorityDisinherit+0xdc>)
 8003a5a:	441a      	add	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f7fe fbdb 	bl	800221e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a6c:	697b      	ldr	r3, [r7, #20]
	}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200006e8 	.word	0x200006e8
 8003a7c:	20000bc4 	.word	0x20000bc4
 8003a80:	200006ec 	.word	0x200006ec

08003a84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a8e:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a94:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fc1c 	bl	80022d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa6:	d10a      	bne.n	8003abe <prvAddCurrentTaskToDelayedList+0x3a>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aae:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4819      	ldr	r0, [pc, #100]	; (8003b1c <prvAddCurrentTaskToDelayedList+0x98>)
 8003ab8:	f7fe fbb1 	bl	800221e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003abc:	e026      	b.n	8003b0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ac6:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d209      	bcs.n	8003aea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fe fbbf 	bl	8002266 <vListInsert>
}
 8003ae8:	e010      	b.n	8003b0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7fe fbb5 	bl	8002266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d202      	bcs.n	8003b0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6013      	str	r3, [r2, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000bc0 	.word	0x20000bc0
 8003b18:	200006e8 	.word	0x200006e8
 8003b1c:	20000ba8 	.word	0x20000ba8
 8003b20:	20000b78 	.word	0x20000b78
 8003b24:	20000b74 	.word	0x20000b74
 8003b28:	20000bdc 	.word	0x20000bdc

08003b2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b36:	f000 fb0d 	bl	8004154 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b3a:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <xTimerCreateTimerTask+0x84>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d021      	beq.n	8003b86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b4a:	1d3a      	adds	r2, r7, #4
 8003b4c:	f107 0108 	add.w	r1, r7, #8
 8003b50:	f107 030c 	add.w	r3, r7, #12
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fb1b 	bl	8002190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	9202      	str	r2, [sp, #8]
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	2302      	movs	r3, #2
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	4911      	ldr	r1, [pc, #68]	; (8003bb4 <xTimerCreateTimerTask+0x88>)
 8003b6e:	4812      	ldr	r0, [pc, #72]	; (8003bb8 <xTimerCreateTimerTask+0x8c>)
 8003b70:	f7ff f8d2 	bl	8002d18 <xTaskCreateStatic>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <xTimerCreateTimerTask+0x90>)
 8003b78:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <xTimerCreateTimerTask+0x90>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b82:	2301      	movs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <xTimerCreateTimerTask+0x78>
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	b672      	cpsid	i
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	b662      	cpsie	i
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e7fe      	b.n	8003ba2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8003ba4:	697b      	ldr	r3, [r7, #20]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000c18 	.word	0x20000c18
 8003bb4:	08004a88 	.word	0x08004a88
 8003bb8:	08003cf9 	.word	0x08003cf9
 8003bbc:	20000c1c 	.word	0x20000c1c

08003bc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <xTimerGenericCommand+0x30>
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	b672      	cpsid	i
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	b662      	cpsie	i
 8003bec:	623b      	str	r3, [r7, #32]
 8003bee:	e7fe      	b.n	8003bee <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003bf0:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <xTimerGenericCommand+0x98>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02a      	beq.n	8003c4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b05      	cmp	r3, #5
 8003c08:	dc18      	bgt.n	8003c3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c0a:	f7ff fead 	bl	8003968 <xTaskGetSchedulerState>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d109      	bne.n	8003c28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <xTimerGenericCommand+0x98>)
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	f107 0110 	add.w	r1, r7, #16
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c20:	f7fe fc8e 	bl	8002540 <xQueueGenericSend>
 8003c24:	6278      	str	r0, [r7, #36]	; 0x24
 8003c26:	e012      	b.n	8003c4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <xTimerGenericCommand+0x98>)
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	f107 0110 	add.w	r1, r7, #16
 8003c30:	2300      	movs	r3, #0
 8003c32:	2200      	movs	r2, #0
 8003c34:	f7fe fc84 	bl	8002540 <xQueueGenericSend>
 8003c38:	6278      	str	r0, [r7, #36]	; 0x24
 8003c3a:	e008      	b.n	8003c4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <xTimerGenericCommand+0x98>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	f107 0110 	add.w	r1, r7, #16
 8003c44:	2300      	movs	r3, #0
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	f7fe fd7c 	bl	8002744 <xQueueGenericSendFromISR>
 8003c4c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3728      	adds	r7, #40	; 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000c18 	.word	0x20000c18

08003c5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <prvProcessExpiredTimer+0x98>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fb2f 	bl	80022d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d023      	beq.n	8003cd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	18d1      	adds	r1, r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	6978      	ldr	r0, [r7, #20]
 8003c96:	f000 f8d3 	bl	8003e40 <prvInsertTimerInActiveList>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	2100      	movs	r1, #0
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f7ff ff88 	bl	8003bc0 <xTimerGenericCommand>
 8003cb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d114      	bne.n	8003ce2 <prvProcessExpiredTimer+0x86>
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	b672      	cpsid	i
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	b662      	cpsie	i
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e7fe      	b.n	8003cce <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	6978      	ldr	r0, [r7, #20]
 8003ce8:	4798      	blx	r3
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000c10 	.word	0x20000c10

08003cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d00:	f107 0308 	add.w	r3, r7, #8
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f857 	bl	8003db8 <prvGetNextExpireTime>
 8003d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f803 	bl	8003d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d16:	f000 f8d5 	bl	8003ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d1a:	e7f1      	b.n	8003d00 <prvTimerTask+0x8>

08003d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d26:	f7ff fa3b 	bl	80031a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d2a:	f107 0308 	add.w	r3, r7, #8
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f866 	bl	8003e00 <prvSampleTimeNow>
 8003d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d130      	bne.n	8003d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <prvProcessTimerOrBlockTask+0x3c>
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d806      	bhi.n	8003d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d4a:	f7ff fa37 	bl	80031bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff83 	bl	8003c5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d56:	e024      	b.n	8003da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <prvProcessTimerOrBlockTask+0x90>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <prvProcessTimerOrBlockTask+0x50>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <prvProcessTimerOrBlockTask+0x52>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <prvProcessTimerOrBlockTask+0x94>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f7fe ff97 	bl	8002cb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d82:	f7ff fa1b 	bl	80031bc <xTaskResumeAll>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <prvProcessTimerOrBlockTask+0x98>)
 8003d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	f3bf 8f6f 	isb	sy
}
 8003d9c:	e001      	b.n	8003da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d9e:	f7ff fa0d 	bl	80031bc <xTaskResumeAll>
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000c14 	.word	0x20000c14
 8003db0:	20000c18 	.word	0x20000c18
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <prvGetNextExpireTime+0x44>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <prvGetNextExpireTime+0x16>
 8003dca:	2201      	movs	r2, #1
 8003dcc:	e000      	b.n	8003dd0 <prvGetNextExpireTime+0x18>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <prvGetNextExpireTime+0x44>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	e001      	b.n	8003dec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003dec:	68fb      	ldr	r3, [r7, #12]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000c10 	.word	0x20000c10

08003e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e08:	f7ff fa76 	bl	80032f8 <xTaskGetTickCount>
 8003e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <prvSampleTimeNow+0x3c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d205      	bcs.n	8003e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e18:	f000 f936 	bl	8004088 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e002      	b.n	8003e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e2a:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <prvSampleTimeNow+0x3c>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e30:	68fb      	ldr	r3, [r7, #12]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000c20 	.word	0x20000c20

08003e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d812      	bhi.n	8003e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e01b      	b.n	8003eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <prvInsertTimerInActiveList+0x7c>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7fe f9ee 	bl	8002266 <vListInsert>
 8003e8a:	e012      	b.n	8003eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d206      	bcs.n	8003ea2 <prvInsertTimerInActiveList+0x62>
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e007      	b.n	8003eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <prvInsertTimerInActiveList+0x80>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fe f9da 	bl	8002266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003eb2:	697b      	ldr	r3, [r7, #20]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000c14 	.word	0x20000c14
 8003ec0:	20000c10 	.word	0x20000c10

08003ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08e      	sub	sp, #56	; 0x38
 8003ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eca:	e0cc      	b.n	8004066 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	da19      	bge.n	8003f06 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10b      	bne.n	8003ef6 <prvProcessReceivedCommands+0x32>
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	b672      	cpsid	i
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	b662      	cpsie	i
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	e7fe      	b.n	8003ef4 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efc:	6850      	ldr	r0, [r2, #4]
 8003efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f00:	6892      	ldr	r2, [r2, #8]
 8003f02:	4611      	mov	r1, r2
 8003f04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f2c0 80ab 	blt.w	8004064 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe f9da 	bl	80022d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f24:	463b      	mov	r3, r7
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff ff6a 	bl	8003e00 <prvSampleTimeNow>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b09      	cmp	r3, #9
 8003f32:	f200 8098 	bhi.w	8004066 <prvProcessReceivedCommands+0x1a2>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <prvProcessReceivedCommands+0x78>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003f65 	.word	0x08003f65
 8003f48:	08003fdb 	.word	0x08003fdb
 8003f4c:	08003fef 	.word	0x08003fef
 8003f50:	0800403b 	.word	0x0800403b
 8003f54:	08003f65 	.word	0x08003f65
 8003f58:	08003f65 	.word	0x08003f65
 8003f5c:	08003fdb 	.word	0x08003fdb
 8003f60:	08003fef 	.word	0x08003fef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	18d1      	adds	r1, r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f84:	f7ff ff5c 	bl	8003e40 <prvInsertTimerInActiveList>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d06b      	beq.n	8004066 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d060      	beq.n	8004066 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	441a      	add	r2, r3
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fb6:	f7ff fe03 	bl	8003bc0 <xTimerGenericCommand>
 8003fba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d151      	bne.n	8004066 <prvProcessReceivedCommands+0x1a2>
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	b672      	cpsid	i
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	b662      	cpsie	i
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e7fe      	b.n	8003fd8 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003fec:	e03b      	b.n	8004066 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <prvProcessReceivedCommands+0x162>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	b672      	cpsid	i
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	b662      	cpsie	i
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e7fe      	b.n	8004024 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	18d1      	adds	r1, r2, r3
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004034:	f7ff ff04 	bl	8003e40 <prvInsertTimerInActiveList>
					break;
 8004038:	e015      	b.n	8004066 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800404a:	f000 fbb7 	bl	80047bc <vPortFree>
 800404e:	e00a      	b.n	8004066 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004062:	e000      	b.n	8004066 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004064:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <prvProcessReceivedCommands+0x1c0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1d39      	adds	r1, r7, #4
 800406c:	2200      	movs	r2, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fc04 	bl	800287c <xQueueReceive>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	f47f af28 	bne.w	8003ecc <prvProcessReceivedCommands+0x8>
	}
}
 800407c:	bf00      	nop
 800407e:	3730      	adds	r7, #48	; 0x30
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000c18 	.word	0x20000c18

08004088 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800408e:	e049      	b.n	8004124 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004090:	4b2e      	ldr	r3, [pc, #184]	; (800414c <prvSwitchTimerLists+0xc4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800409a:	4b2c      	ldr	r3, [pc, #176]	; (800414c <prvSwitchTimerLists+0xc4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe f915 	bl	80022d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02f      	beq.n	8004124 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d90e      	bls.n	80040f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <prvSwitchTimerLists+0xc4>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3304      	adds	r3, #4
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f7fe f8ba 	bl	8002266 <vListInsert>
 80040f2:	e017      	b.n	8004124 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040f4:	2300      	movs	r3, #0
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2300      	movs	r3, #0
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	2100      	movs	r1, #0
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7ff fd5e 	bl	8003bc0 <xTimerGenericCommand>
 8004104:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <prvSwitchTimerLists+0x9c>
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	b672      	cpsid	i
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	b662      	cpsie	i
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	e7fe      	b.n	8004122 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <prvSwitchTimerLists+0xc4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1b0      	bne.n	8004090 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <prvSwitchTimerLists+0xc4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <prvSwitchTimerLists+0xc8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <prvSwitchTimerLists+0xc4>)
 800413a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800413c:	4a04      	ldr	r2, [pc, #16]	; (8004150 <prvSwitchTimerLists+0xc8>)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6013      	str	r3, [r2, #0]
}
 8004142:	bf00      	nop
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000c10 	.word	0x20000c10
 8004150:	20000c14 	.word	0x20000c14

08004154 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800415a:	f000 f945 	bl	80043e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <prvCheckForValidListAndQueue+0x60>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d120      	bne.n	80041a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004166:	4814      	ldr	r0, [pc, #80]	; (80041b8 <prvCheckForValidListAndQueue+0x64>)
 8004168:	f7fe f82c 	bl	80021c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800416c:	4813      	ldr	r0, [pc, #76]	; (80041bc <prvCheckForValidListAndQueue+0x68>)
 800416e:	f7fe f829 	bl	80021c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <prvCheckForValidListAndQueue+0x6c>)
 8004174:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <prvCheckForValidListAndQueue+0x64>)
 8004176:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004178:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <prvCheckForValidListAndQueue+0x70>)
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <prvCheckForValidListAndQueue+0x68>)
 800417c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800417e:	2300      	movs	r3, #0
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <prvCheckForValidListAndQueue+0x74>)
 8004184:	4a11      	ldr	r2, [pc, #68]	; (80041cc <prvCheckForValidListAndQueue+0x78>)
 8004186:	2110      	movs	r1, #16
 8004188:	200a      	movs	r0, #10
 800418a:	f7fe f939 	bl	8002400 <xQueueGenericCreateStatic>
 800418e:	4602      	mov	r2, r0
 8004190:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <prvCheckForValidListAndQueue+0x60>)
 8004192:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004194:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <prvCheckForValidListAndQueue+0x60>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <prvCheckForValidListAndQueue+0x60>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	490b      	ldr	r1, [pc, #44]	; (80041d0 <prvCheckForValidListAndQueue+0x7c>)
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe fd5c 	bl	8002c60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041a8:	f000 f950 	bl	800444c <vPortExitCritical>
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000c18 	.word	0x20000c18
 80041b8:	20000be8 	.word	0x20000be8
 80041bc:	20000bfc 	.word	0x20000bfc
 80041c0:	20000c10 	.word	0x20000c10
 80041c4:	20000c14 	.word	0x20000c14
 80041c8:	20000cc4 	.word	0x20000cc4
 80041cc:	20000c24 	.word	0x20000c24
 80041d0:	08004a90 	.word	0x08004a90

080041d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3b04      	subs	r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b04      	subs	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3b04      	subs	r3, #4
 8004202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004204:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <pxPortInitialiseStack+0x64>)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3b14      	subs	r3, #20
 800420e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b04      	subs	r3, #4
 800421a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f06f 0202 	mvn.w	r2, #2
 8004222:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3b20      	subs	r3, #32
 8004228:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	0800423d 	.word	0x0800423d

0800423c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <prvTaskExitError+0x58>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800424e:	d00b      	beq.n	8004268 <prvTaskExitError+0x2c>
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	b672      	cpsid	i
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	b662      	cpsie	i
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e7fe      	b.n	8004266 <prvTaskExitError+0x2a>
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	b672      	cpsid	i
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	b662      	cpsie	i
 800427c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800427e:	bf00      	nop
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0fc      	beq.n	8004280 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	2000000c 	.word	0x2000000c
	...

080042a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <pxCurrentTCBConst2>)
 80042a2:	6819      	ldr	r1, [r3, #0]
 80042a4:	6808      	ldr	r0, [r1, #0]
 80042a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042aa:	f380 8809 	msr	PSP, r0
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f380 8811 	msr	BASEPRI, r0
 80042ba:	4770      	bx	lr
 80042bc:	f3af 8000 	nop.w

080042c0 <pxCurrentTCBConst2>:
 80042c0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop

080042c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042c8:	4808      	ldr	r0, [pc, #32]	; (80042ec <prvPortStartFirstTask+0x24>)
 80042ca:	6800      	ldr	r0, [r0, #0]
 80042cc:	6800      	ldr	r0, [r0, #0]
 80042ce:	f380 8808 	msr	MSP, r0
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8814 	msr	CONTROL, r0
 80042da:	b662      	cpsie	i
 80042dc:	b661      	cpsie	f
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	df00      	svc	0
 80042e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042ea:	bf00      	nop
 80042ec:	e000ed08 	.word	0xe000ed08

080042f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <xPortStartScheduler+0xe0>)
 80042f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b2e      	ldr	r3, [pc, #184]	; (80043d4 <xPortStartScheduler+0xe4>)
 800431c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800431e:	4b2e      	ldr	r3, [pc, #184]	; (80043d8 <xPortStartScheduler+0xe8>)
 8004320:	2207      	movs	r2, #7
 8004322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004324:	e009      	b.n	800433a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004326:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <xPortStartScheduler+0xe8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3b01      	subs	r3, #1
 800432c:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <xPortStartScheduler+0xe8>)
 800432e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	b2db      	uxtb	r3, r3
 8004338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b80      	cmp	r3, #128	; 0x80
 8004344:	d0ef      	beq.n	8004326 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <xPortStartScheduler+0xe8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1c3 0307 	rsb	r3, r3, #7
 800434e:	2b04      	cmp	r3, #4
 8004350:	d00b      	beq.n	800436a <xPortStartScheduler+0x7a>
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	b672      	cpsid	i
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	b662      	cpsie	i
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	e7fe      	b.n	8004368 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800436a:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <xPortStartScheduler+0xe8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <xPortStartScheduler+0xe8>)
 8004372:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004374:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <xPortStartScheduler+0xe8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800437c:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <xPortStartScheduler+0xe8>)
 800437e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <xPortStartScheduler+0xec>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <xPortStartScheduler+0xec>)
 800438e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004392:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <xPortStartScheduler+0xec>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a10      	ldr	r2, [pc, #64]	; (80043dc <xPortStartScheduler+0xec>)
 800439a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800439e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043a0:	f000 f8d4 	bl	800454c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <xPortStartScheduler+0xf0>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043aa:	f000 f8f3 	bl	8004594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <xPortStartScheduler+0xf4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <xPortStartScheduler+0xf4>)
 80043b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043ba:	f7ff ff85 	bl	80042c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043be:	f7ff f865 	bl	800348c <vTaskSwitchContext>
	prvTaskExitError();
 80043c2:	f7ff ff3b 	bl	800423c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	e000e400 	.word	0xe000e400
 80043d4:	20000d14 	.word	0x20000d14
 80043d8:	20000d18 	.word	0x20000d18
 80043dc:	e000ed20 	.word	0xe000ed20
 80043e0:	2000000c 	.word	0x2000000c
 80043e4:	e000ef34 	.word	0xe000ef34

080043e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	b672      	cpsid	i
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	b662      	cpsie	i
 8004402:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <vPortEnterCritical+0x5c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	4a0e      	ldr	r2, [pc, #56]	; (8004444 <vPortEnterCritical+0x5c>)
 800440c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <vPortEnterCritical+0x5c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d110      	bne.n	8004438 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <vPortEnterCritical+0x60>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <vPortEnterCritical+0x50>
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	b672      	cpsid	i
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	b662      	cpsie	i
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	e7fe      	b.n	8004436 <vPortEnterCritical+0x4e>
	}
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	2000000c 	.word	0x2000000c
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <vPortExitCritical+0x50>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <vPortExitCritical+0x26>
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	b672      	cpsid	i
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	b662      	cpsie	i
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	e7fe      	b.n	8004470 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <vPortExitCritical+0x50>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3b01      	subs	r3, #1
 8004478:	4a08      	ldr	r2, [pc, #32]	; (800449c <vPortExitCritical+0x50>)
 800447a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <vPortExitCritical+0x50>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <vPortExitCritical+0x42>
 8004484:	2300      	movs	r3, #0
 8004486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	2000000c 	.word	0x2000000c

080044a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044a0:	f3ef 8009 	mrs	r0, PSP
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <pxCurrentTCBConst>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	f01e 0f10 	tst.w	lr, #16
 80044b0:	bf08      	it	eq
 80044b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	6010      	str	r0, [r2, #0]
 80044bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044c4:	b672      	cpsid	i
 80044c6:	f380 8811 	msr	BASEPRI, r0
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	b662      	cpsie	i
 80044d4:	f7fe ffda 	bl	800348c <vTaskSwitchContext>
 80044d8:	f04f 0000 	mov.w	r0, #0
 80044dc:	f380 8811 	msr	BASEPRI, r0
 80044e0:	bc09      	pop	{r0, r3}
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	6808      	ldr	r0, [r1, #0]
 80044e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ea:	f01e 0f10 	tst.w	lr, #16
 80044ee:	bf08      	it	eq
 80044f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044f4:	f380 8809 	msr	PSP, r0
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop

08004500 <pxCurrentTCBConst>:
 8004500:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop

08004508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	b672      	cpsid	i
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	b662      	cpsie	i
 8004522:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004524:	f7fe fef8 	bl	8003318 <xTaskIncrementTick>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <SysTick_Handler+0x40>)
 8004530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	2300      	movs	r3, #0
 8004538:	603b      	str	r3, [r7, #0]
	__asm volatile
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <vPortSetupTimerInterrupt+0x34>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <vPortSetupTimerInterrupt+0x38>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <vPortSetupTimerInterrupt+0x3c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <vPortSetupTimerInterrupt+0x40>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <vPortSetupTimerInterrupt+0x44>)
 800456a:	3b01      	subs	r3, #1
 800456c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <vPortSetupTimerInterrupt+0x34>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	e000e010 	.word	0xe000e010
 8004584:	e000e018 	.word	0xe000e018
 8004588:	20000000 	.word	0x20000000
 800458c:	10624dd3 	.word	0x10624dd3
 8004590:	e000e014 	.word	0xe000e014

08004594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045a4 <vPortEnableVFP+0x10>
 8004598:	6801      	ldr	r1, [r0, #0]
 800459a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800459e:	6001      	str	r1, [r0, #0]
 80045a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045a2:	bf00      	nop
 80045a4:	e000ed88 	.word	0xe000ed88

080045a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045ae:	f3ef 8305 	mrs	r3, IPSR
 80045b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d915      	bls.n	80045e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ba:	4a18      	ldr	r2, [pc, #96]	; (800461c <vPortValidateInterruptPriority+0x74>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045c4:	4b16      	ldr	r3, [pc, #88]	; (8004620 <vPortValidateInterruptPriority+0x78>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	7afa      	ldrb	r2, [r7, #11]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d20b      	bcs.n	80045e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	b672      	cpsid	i
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	b662      	cpsie	i
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	e7fe      	b.n	80045e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <vPortValidateInterruptPriority+0x7c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <vPortValidateInterruptPriority+0x80>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d90b      	bls.n	800460e <vPortValidateInterruptPriority+0x66>
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	b672      	cpsid	i
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	b662      	cpsie	i
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	e7fe      	b.n	800460c <vPortValidateInterruptPriority+0x64>
	}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000e3f0 	.word	0xe000e3f0
 8004620:	20000d14 	.word	0x20000d14
 8004624:	e000ed0c 	.word	0xe000ed0c
 8004628:	20000d18 	.word	0x20000d18

0800462c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004638:	f7fe fdb2 	bl	80031a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800463c:	4b5a      	ldr	r3, [pc, #360]	; (80047a8 <pvPortMalloc+0x17c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004644:	f000 f916 	bl	8004874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004648:	4b58      	ldr	r3, [pc, #352]	; (80047ac <pvPortMalloc+0x180>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	f040 8090 	bne.w	8004776 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01e      	beq.n	800469a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800465c:	2208      	movs	r2, #8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2b00      	cmp	r3, #0
 800466c:	d015      	beq.n	800469a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f023 0307 	bic.w	r3, r3, #7
 8004674:	3308      	adds	r3, #8
 8004676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <pvPortMalloc+0x6e>
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	b672      	cpsid	i
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	b662      	cpsie	i
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	e7fe      	b.n	8004698 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d06a      	beq.n	8004776 <pvPortMalloc+0x14a>
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <pvPortMalloc+0x184>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d865      	bhi.n	8004776 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046aa:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <pvPortMalloc+0x188>)
 80046ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <pvPortMalloc+0x188>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046b4:	e004      	b.n	80046c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d903      	bls.n	80046d2 <pvPortMalloc+0xa6>
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f1      	bne.n	80046b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046d2:	4b35      	ldr	r3, [pc, #212]	; (80047a8 <pvPortMalloc+0x17c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	429a      	cmp	r2, r3
 80046da:	d04c      	beq.n	8004776 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2208      	movs	r2, #8
 80046e2:	4413      	add	r3, r2
 80046e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	1ad2      	subs	r2, r2, r3
 80046f6:	2308      	movs	r3, #8
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d920      	bls.n	8004740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <pvPortMalloc+0xfc>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	b672      	cpsid	i
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	b662      	cpsie	i
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e7fe      	b.n	8004726 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1ad2      	subs	r2, r2, r3
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800473a:	69b8      	ldr	r0, [r7, #24]
 800473c:	f000 f8fc 	bl	8004938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <pvPortMalloc+0x184>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <pvPortMalloc+0x184>)
 800474c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800474e:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <pvPortMalloc+0x184>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <pvPortMalloc+0x18c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d203      	bcs.n	8004762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <pvPortMalloc+0x184>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <pvPortMalloc+0x18c>)
 8004760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	4b11      	ldr	r3, [pc, #68]	; (80047ac <pvPortMalloc+0x180>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	431a      	orrs	r2, r3
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004776:	f7fe fd21 	bl	80031bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00b      	beq.n	800479c <pvPortMalloc+0x170>
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	b672      	cpsid	i
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	b662      	cpsie	i
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e7fe      	b.n	800479a <pvPortMalloc+0x16e>
	return pvReturn;
 800479c:	69fb      	ldr	r3, [r7, #28]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3728      	adds	r7, #40	; 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20004924 	.word	0x20004924
 80047ac:	20004930 	.word	0x20004930
 80047b0:	20004928 	.word	0x20004928
 80047b4:	2000491c 	.word	0x2000491c
 80047b8:	2000492c 	.word	0x2000492c

080047bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d04a      	beq.n	8004864 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047ce:	2308      	movs	r3, #8
 80047d0:	425b      	negs	r3, r3
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4413      	add	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	4b22      	ldr	r3, [pc, #136]	; (800486c <vPortFree+0xb0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <vPortFree+0x46>
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	b672      	cpsid	i
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	b662      	cpsie	i
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e7fe      	b.n	8004800 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <vPortFree+0x66>
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	b672      	cpsid	i
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	b662      	cpsie	i
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	e7fe      	b.n	8004820 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <vPortFree+0xb0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d019      	beq.n	8004864 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d115      	bne.n	8004864 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <vPortFree+0xb0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	43db      	mvns	r3, r3
 8004842:	401a      	ands	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004848:	f7fe fcaa 	bl	80031a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <vPortFree+0xb4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4413      	add	r3, r2
 8004856:	4a06      	ldr	r2, [pc, #24]	; (8004870 <vPortFree+0xb4>)
 8004858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800485a:	6938      	ldr	r0, [r7, #16]
 800485c:	f000 f86c 	bl	8004938 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004860:	f7fe fcac 	bl	80031bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004864:	bf00      	nop
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20004930 	.word	0x20004930
 8004870:	20004928 	.word	0x20004928

08004874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800487a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800487e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <prvHeapInit+0xac>)
 8004882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00c      	beq.n	80048a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3307      	adds	r3, #7
 8004892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0307 	bic.w	r3, r3, #7
 800489a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <prvHeapInit+0xac>)
 80048a4:	4413      	add	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048ac:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <prvHeapInit+0xb0>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <prvHeapInit+0xb0>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	4413      	add	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048c0:	2208      	movs	r2, #8
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0307 	bic.w	r3, r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <prvHeapInit+0xb4>)
 80048d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <prvHeapInit+0xb4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2200      	movs	r2, #0
 80048dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <prvHeapInit+0xb4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <prvHeapInit+0xb4>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4a0a      	ldr	r2, [pc, #40]	; (800492c <prvHeapInit+0xb8>)
 8004902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a09      	ldr	r2, [pc, #36]	; (8004930 <prvHeapInit+0xbc>)
 800490a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800490c:	4b09      	ldr	r3, [pc, #36]	; (8004934 <prvHeapInit+0xc0>)
 800490e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004912:	601a      	str	r2, [r3, #0]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20000d1c 	.word	0x20000d1c
 8004924:	2000491c 	.word	0x2000491c
 8004928:	20004924 	.word	0x20004924
 800492c:	2000492c 	.word	0x2000492c
 8004930:	20004928 	.word	0x20004928
 8004934:	20004930 	.word	0x20004930

08004938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004940:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <prvInsertBlockIntoFreeList+0xac>)
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e002      	b.n	800494c <prvInsertBlockIntoFreeList+0x14>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d8f7      	bhi.n	8004946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4413      	add	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d108      	bne.n	800497a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	441a      	add	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	441a      	add	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d118      	bne.n	80049c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d00d      	beq.n	80049b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	441a      	add	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	e008      	b.n	80049c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <prvInsertBlockIntoFreeList+0xb0>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e003      	b.n	80049c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d002      	beq.n	80049d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	2000491c 	.word	0x2000491c
 80049e8:	20004924 	.word	0x20004924

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4e0d      	ldr	r6, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1ba4      	subs	r4, r4, r6
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2500      	movs	r5, #0
 80049f8:	42a5      	cmp	r5, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4e0b      	ldr	r6, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 f82c 	bl	8004a5c <_init>
 8004a04:	1ba4      	subs	r4, r4, r6
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2500      	movs	r5, #0
 8004a0a:	42a5      	cmp	r5, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a14:	4798      	blx	r3
 8004a16:	3501      	adds	r5, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a1e:	4798      	blx	r3
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08004adc 	.word	0x08004adc
 8004a28:	08004adc 	.word	0x08004adc
 8004a2c:	08004adc 	.word	0x08004adc
 8004a30:	08004ae0 	.word	0x08004ae0

08004a34 <memcpy>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	1e43      	subs	r3, r0, #1
 8004a38:	440a      	add	r2, r1
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	d100      	bne.n	8004a40 <memcpy+0xc>
 8004a3e:	bd10      	pop	{r4, pc}
 8004a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a48:	e7f7      	b.n	8004a3a <memcpy+0x6>

08004a4a <memset>:
 8004a4a:	4402      	add	r2, r0
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d100      	bne.n	8004a54 <memset+0xa>
 8004a52:	4770      	bx	lr
 8004a54:	f803 1b01 	strb.w	r1, [r3], #1
 8004a58:	e7f9      	b.n	8004a4e <memset+0x4>
	...

08004a5c <_init>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr

08004a68 <_fini>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr
