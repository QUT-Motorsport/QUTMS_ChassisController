
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009988  08009988  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08009988  08009988  00019988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009990  08009990  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009990  08009990  00019990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08009998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b0c  200000a4  08009a3c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bb0  08009a3c  00024bb0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026078  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049cf  00000000  00000000  0004614a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e0  00000000  00000000  0004ab20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a8  00000000  00000000  0004c400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c6e5  00000000  00000000  0004daa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017fea  00000000  00000000  0007a18d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001079ef  00000000  00000000  00092177  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00199b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006950  00000000  00000000  00199be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	080096c0 	.word	0x080096c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	080096c0 	.word	0x080096c0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Parse_AMS_HeartbeatResponse>:

	return p;
}

void Parse_AMS_HeartbeatResponse(AMS_HeartbeatResponse_t packet, bool* HVAn, bool* HVBn, bool* precharge, bool* HVAp, bool* HVBp, uint16_t* averageVoltage, uint16_t* runtime)
{
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	1d3c      	adds	r4, r7, #4
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005ec:	603b      	str	r3, [r7, #0]
	*HVAn = (bool)(packet.data[0] & 0x1);
 80005ee:	7a3b      	ldrb	r3, [r7, #8]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	701a      	strb	r2, [r3, #0]
	*HVBn = (bool)(packet.data[0] & 0x2);
 8000602:	7a3b      	ldrb	r3, [r7, #8]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2da      	uxtb	r2, r3
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	701a      	strb	r2, [r3, #0]
	*precharge = (bool)(packet.data[0] & 0x4);
 8000616:	7a3b      	ldrb	r3, [r7, #8]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	701a      	strb	r2, [r3, #0]

	*HVAp = (bool)(packet.data[0] & 0x10);
 800062a:	7a3b      	ldrb	r3, [r7, #8]
 800062c:	f003 0310 	and.w	r3, r3, #16
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf14      	ite	ne
 8000634:	2301      	movne	r3, #1
 8000636:	2300      	moveq	r3, #0
 8000638:	b2da      	uxtb	r2, r3
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	701a      	strb	r2, [r3, #0]
	*HVBp = (bool)(packet.data[0] & 0x20);
 800063e:	7a3b      	ldrb	r3, [r7, #8]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2da      	uxtb	r2, r3
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	701a      	strb	r2, [r3, #0]

	*averageVoltage = (uint16_t)((packet.data[1] & 0x3F) << 6 | (packet.data[0]));
 8000652:	7a7b      	ldrb	r3, [r7, #9]
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	b21b      	sxth	r3, r3
 8000658:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800065c:	b21a      	sxth	r2, r3
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	b21b      	sxth	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29a      	uxth	r2, r3
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	801a      	strh	r2, [r3, #0]
	*runtime = (uint16_t)(packet.data[3] << 8 | packet.data[2]);
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21a      	sxth	r2, r3
 8000672:	7abb      	ldrb	r3, [r7, #10]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21b      	sxth	r3, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bc90      	pop	{r4, r7}
 8000688:	4770      	bx	lr

0800068a <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2200      	movs	r2, #0
 800069c:	2116      	movs	r1, #22
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f9a4 	bl	80009ec <Compose_CANId>
 80006a4:	4603      	mov	r3, r0
 80006a6:	607b      	str	r3, [r7, #4]
	return p;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x17, 0x0, 0x0, 0x0, 0x0);
 80006b8:	2300      	movs	r3, #0
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2300      	movs	r3, #0
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2200      	movs	r2, #0
 80006c4:	2117      	movs	r1, #23
 80006c6:	2002      	movs	r0, #2
 80006c8:	f000 f990 	bl	80009ec <Compose_CANId>
 80006cc:	4603      	mov	r3, r0
 80006ce:	607b      	str	r3, [r7, #4]
	return p;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <fsm_new>:
#ifdef QUTMS_FSM

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 80006e2:	2010      	movs	r0, #16
 80006e4:	f008 fbd4 	bl	8008e90 <malloc>
 80006e8:	4603      	mov	r3, r0
 80006ea:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 80006ec:	2210      	movs	r2, #16
 80006ee:	2100      	movs	r1, #0
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f008 fbe0 	bl	8008eb6 <memset>
	fsm->currentState = beginState;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2103      	movs	r1, #3
 8000700:	2003      	movs	r0, #3
 8000702:	f004 ffdf 	bl	80056c4 <osSemaphoreNew>
 8000706:	4602      	mov	r2, r0
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 800070c:	2200      	movs	r2, #0
 800070e:	2103      	movs	r1, #3
 8000710:	2003      	movs	r0, #3
 8000712:	f004 ffd7 	bl	80056c4 <osSemaphoreNew>
 8000716:	4602      	mov	r2, r0
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2120      	movs	r1, #32
 8000722:	4618      	mov	r0, r3
 8000724:	f005 f86c 	bl	8005800 <osSemaphoreAcquire>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d109      	bne.n	8000742 <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	4618      	mov	r0, r3
 800073e:	f005 f8c5 	bl	80058cc <osSemaphoreRelease>
	}

	return fsm;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	2120      	movs	r1, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f005 f850 	bl	8005800 <osSemaphoreAcquire>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d10a      	bne.n	800077c <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	4618      	mov	r0, r3
 8000776:	f005 f8a9 	bl	80058cc <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 800077a:	e004      	b.n	8000786 <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 800077c:	2225      	movs	r2, #37	; 0x25
 800077e:	4904      	ldr	r1, [pc, #16]	; (8000790 <fsm_iterate+0x44>)
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f8ab 	bl	80008dc <fsm_log>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	080096d8 	.word	0x080096d8

08000794 <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af02      	add	r7, sp, #8
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d036      	beq.n	8000818 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	2120      	movs	r1, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 f825 	bl	8005800 <osSemaphoreAcquire>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d127      	bne.n	800080c <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	68d9      	ldr	r1, [r3, #12]
 80007c6:	f107 0014 	add.w	r0, r7, #20
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	460b      	mov	r3, r1
 80007d0:	4913      	ldr	r1, [pc, #76]	; (8000820 <fsm_changeState+0x8c>)
 80007d2:	f008 fc31 	bl	8009038 <siprintf>
 80007d6:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 80007d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f000 f87b 	bl	80008dc <fsm_log>
		fsm->currentState->exit(fsm);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	4798      	blx	r3

		fsm->currentState = newState;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4618      	mov	r0, r3
 8000806:	f005 f861 	bl	80058cc <osSemaphoreRelease>
 800080a:	e006      	b.n	800081a <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 800080c:	2220      	movs	r2, #32
 800080e:	4905      	ldr	r1, [pc, #20]	; (8000824 <fsm_changeState+0x90>)
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f000 f863 	bl	80008dc <fsm_log>
 8000816:	e000      	b.n	800081a <fsm_changeState+0x86>
		return;
 8000818:	bf00      	nop
	}
}
 800081a:	3768      	adds	r7, #104	; 0x68
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08009700 	.word	0x08009700
 8000824:	08009724 	.word	0x08009724

08000828 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b098      	sub	sp, #96	; 0x60
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4920      	ldr	r1, [pc, #128]	; (80008bc <fsm_reset+0x94>)
 800083c:	4618      	mov	r0, r3
 800083e:	f008 fbfb 	bl	8009038 <siprintf>
 8000842:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 8000844:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f845 	bl	80008dc <fsm_log>
	fsm_log_function f = fsm->log;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 8000858:	2210      	movs	r2, #16
 800085a:	2100      	movs	r1, #0
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f008 fb2a 	bl	8008eb6 <memset>
	fsm->log = f;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000866:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 800086e:	2200      	movs	r2, #0
 8000870:	2103      	movs	r1, #3
 8000872:	2003      	movs	r0, #3
 8000874:	f004 ff26 	bl	80056c4 <osSemaphoreNew>
 8000878:	4602      	mov	r2, r0
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 800087e:	2200      	movs	r2, #0
 8000880:	2103      	movs	r1, #3
 8000882:	2003      	movs	r0, #3
 8000884:	f004 ff1e 	bl	80056c4 <osSemaphoreNew>
 8000888:	4602      	mov	r2, r0
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2120      	movs	r1, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f004 ffb3 	bl	8005800 <osSemaphoreAcquire>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d109      	bne.n	80008b4 <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 f80c 	bl	80058cc <osSemaphoreRelease>
	}
}
 80008b4:	bf00      	nop
 80008b6:	3760      	adds	r7, #96	; 0x60
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08009748 	.word	0x08009748

080008c0 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	605a      	str	r2, [r3, #4]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	68b8      	ldr	r0, [r7, #8]
 80008f0:	4798      	blx	r3
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <Compose_PDM_InitiateStartup>:
#ifdef QUTMS_CAN_PDM

#include "PDM_CAN_Messages.h"

PDM_InitiateStartup_t Compose_PDM_InitiateStartup(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af02      	add	r7, sp, #8
	PDM_InitiateStartup_t p;
	p.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x00, 0x0);
 8000900:	2300      	movs	r3, #0
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	2300      	movs	r3, #0
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2302      	movs	r3, #2
 800090a:	2200      	movs	r2, #0
 800090c:	2114      	movs	r1, #20
 800090e:	2002      	movs	r0, #2
 8000910:	f000 f86c 	bl	80009ec <Compose_CANId>
 8000914:	4603      	mov	r3, r0
 8000916:	607b      	str	r3, [r7, #4]
	return p;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <Parse_PDM_StartupOk>:

	return packet;
}

void Parse_PDM_StartupOk(PDM_StartupOk_t packet, uint32_t* powerChannels)
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000930:	607a      	str	r2, [r7, #4]
	*powerChannels = (packet.data[0] << 24) + (packet.data[1] << 16) + (packet.data[2] << 8) + packet.data[3];
 8000932:	7b3b      	ldrb	r3, [r7, #12]
 8000934:	061a      	lsls	r2, r3, #24
 8000936:	7b7b      	ldrb	r3, [r7, #13]
 8000938:	041b      	lsls	r3, r3, #16
 800093a:	441a      	add	r2, r3
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	4413      	add	r3, r2
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	4413      	add	r3, r2
 8000946:	461a      	mov	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	601a      	str	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <Compose_PDM_SelectStartup>:

PDM_SelectStartup_t Compose_PDM_SelectStartup(uint32_t powerChannels)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af02      	add	r7, sp, #8
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	PDM_SelectStartup_t packet;
	packet.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x01, 0x0);
 8000962:	2300      	movs	r3, #0
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	2301      	movs	r3, #1
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2302      	movs	r3, #2
 800096c:	2200      	movs	r2, #0
 800096e:	2114      	movs	r1, #20
 8000970:	2002      	movs	r0, #2
 8000972:	f000 f83b 	bl	80009ec <Compose_CANId>
 8000976:	4603      	mov	r3, r0
 8000978:	613b      	str	r3, [r7, #16]

	uint8_t d[4] = {0};
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<4 ;++i)
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
 8000982:	e00f      	b.n	80009a4 <Compose_PDM_SelectStartup+0x4c>
		d[i] = ((uint8_t*)&powerChannels)[3-i];
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0303 	rsb	r3, r3, #3
 800098a:	461a      	mov	r2, r3
 800098c:	463b      	mov	r3, r7
 800098e:	4413      	add	r3, r2
 8000990:	7819      	ldrb	r1, [r3, #0]
 8000992:	f107 020c 	add.w	r2, r7, #12
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	4413      	add	r3, r2
 800099a:	460a      	mov	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3301      	adds	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	ddec      	ble.n	8000984 <Compose_PDM_SelectStartup+0x2c>

	for (int i=0; i<4 ;++i)
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	e00d      	b.n	80009cc <Compose_PDM_SelectStartup+0x74>
		packet.data[i] = (uint8_t)(d[i] & 0xFF);
 80009b0:	f107 020c 	add.w	r2, r7, #12
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	4413      	add	r3, r2
 80009b8:	7819      	ldrb	r1, [r3, #0]
 80009ba:	f107 0214 	add.w	r2, r7, #20
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	4413      	add	r3, r2
 80009c2:	460a      	mov	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	3301      	adds	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	ddee      	ble.n	80009b0 <Compose_PDM_SelectStartup+0x58>

	return packet;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	461a      	mov	r2, r3
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <Compose_CANId>:

/* USER CODE BEGIN 0 */

/* CANId */
uint32_t Compose_CANId(uint8_t priority, uint16_t sourceId, uint8_t autonomous, uint8_t type, uint16_t extra, uint8_t BMSId)
{
 80009ec:	b490      	push	{r4, r7}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	71bb      	strb	r3, [r7, #6]
 8000a06:	4613      	mov	r3, r2
 8000a08:	70fb      	strb	r3, [r7, #3]
	uint32_t id = (priority & 0x3) << 27
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	06db      	lsls	r3, r3, #27
 8000a0e:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
				| (sourceId & 0x1FF) << 18
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	0499      	lsls	r1, r3, #18
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <Compose_CANId+0x68>)
 8000a18:	400b      	ands	r3, r1
 8000a1a:	431a      	orrs	r2, r3
				| (autonomous & 0x1) << 17
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	045b      	lsls	r3, r3, #17
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	431a      	orrs	r2, r3
				| (type & 0x7) << 14
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	039b      	lsls	r3, r3, #14
 8000a2a:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000a2e:	431a      	orrs	r2, r3
				| (extra & 0x3FF) << 4
 8000a30:	8b3b      	ldrh	r3, [r7, #24]
 8000a32:	0119      	lsls	r1, r3, #4
 8000a34:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000a38:	400b      	ands	r3, r1
 8000a3a:	431a      	orrs	r2, r3
				| (BMSId & 0xF);
 8000a3c:	7f3b      	ldrb	r3, [r7, #28]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	4313      	orrs	r3, r2
	uint32_t id = (priority & 0x3) << 27
 8000a44:	60fb      	str	r3, [r7, #12]
	return id;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc90      	pop	{r4, r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	07fc0000 	.word	0x07fc0000

08000a58 <Parse_SHDN_IMD_HeartbeatResponse>:
	p.data = pwmState;
	return p;
}

void Parse_SHDN_IMD_HeartbeatResponse(SHDN_IMD_HeartbeatResponse_t packet, uint8_t* pwmState)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a66:	607a      	str	r2, [r7, #4]
	*pwmState = packet.data;
 8000a68:	7b3a      	ldrb	r2, [r7, #12]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	701a      	strb	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b08b      	sub	sp, #44	; 0x2c
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <state_start_enter+0xf8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d146      	bne.n	8000b1a <state_start_enter+0x9e>
	{
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000a8c:	2048      	movs	r0, #72	; 0x48
 8000a8e:	f008 f9ff 	bl	8008e90 <malloc>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <state_start_enter+0xf8>)
 8000a98:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000a9a:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <state_start_enter+0xf8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2248      	movs	r2, #72	; 0x48
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fa07 	bl	8008eb6 <memset>

		// As CC_GlobalState is accessible across threads, we need to use a semaphore to access it
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000aa8:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <state_start_enter+0xf8>)
 8000aaa:	681c      	ldr	r4, [r3, #0]
 8000aac:	2200      	movs	r2, #0
 8000aae:	2103      	movs	r1, #3
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f004 fe07 	bl	80056c4 <osSemaphoreNew>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	63a3      	str	r3, [r4, #56]	; 0x38
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <state_start_enter+0xf8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 fe9c 	bl	8005800 <osSemaphoreAcquire>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d115      	bne.n	8000afa <state_start_enter+0x7e>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <state_start_enter+0xf8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->AMS_Debug = false;
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <state_start_enter+0xf8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2200      	movs	r2, #0
 8000adc:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <state_start_enter+0xf8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->RTD_Debug = true;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <state_start_enter+0xf8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2201      	movs	r2, #1
 8000aec:	761a      	strb	r2, [r3, #24]
			//CC_GlobalState->brakePressure;
			osSemaphoreRelease(CC_GlobalState->sem);
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <state_start_enter+0xf8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 fee9 	bl	80058cc <osSemaphoreRelease>
		}

		CC_GlobalState->CANQueue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <state_start_enter+0xf8>)
 8000afc:	681c      	ldr	r4, [r3, #0]
 8000afe:	2200      	movs	r2, #0
 8000b00:	2128      	movs	r1, #40	; 0x28
 8000b02:	200a      	movs	r0, #10
 8000b04:	f004 ff3a 	bl	800597c <osMessageQueueNew>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	62e3      	str	r3, [r4, #44]	; 0x2c
		if(CC_GlobalState->CANQueue == NULL)
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <state_start_enter+0xf8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <state_start_enter+0x9e>
		{
			Error_Handler();
 8000b16:	f001 f841 	bl	8001b9c <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	4815      	ldr	r0, [pc, #84]	; (8000b78 <state_start_enter+0xfc>)
 8000b22:	f002 fc59 	bl	80033d8 <HAL_GPIO_WritePin>
	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t pdmStartup = Compose_PDM_InitiateStartup();
 8000b26:	f7ff fee8 	bl	80008fa <Compose_PDM_InitiateStartup>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	615a      	str	r2, [r3, #20]
	{
			.ExtId = pdmStartup.id,
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	2304      	movs	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <state_start_enter+0xf8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3308      	adds	r3, #8
 8000b56:	f107 0208 	add.w	r2, r7, #8
 8000b5a:	f107 010c 	add.w	r1, r7, #12
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <state_start_enter+0x100>)
 8000b60:	f001 ff80 	bl	8002a64 <HAL_CAN_AddTxMessage>

	/* Debug Tracing */
	CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
 8000b64:	210d      	movs	r1, #13
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <state_start_enter+0x104>)
 8000b68:	f000 ff2e 	bl	80019c8 <CC_LogInfo>
	return;
 8000b6c:	bf00      	nop
}
 8000b6e:	372c      	adds	r7, #44	; 0x2c
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	200049e0 	.word	0x200049e0
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	20004a54 	.word	0x20004a54
 8000b80:	0800978c 	.word	0x0800978c

08000b84 <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b09b      	sub	sp, #108	; 0x6c
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000b8c:	4b4a      	ldr	r3, [pc, #296]	; (8000cb8 <state_start_iterate+0x134>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	7e5b      	ldrb	r3, [r3, #25]
 8000b92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000b9e:	e027      	b.n	8000bf0 <state_start_iterate+0x6c>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000ba0:	4b45      	ldr	r3, [pc, #276]	; (8000cb8 <state_start_iterate+0x134>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ba6:	f107 010c 	add.w	r1, r7, #12
 8000baa:	2300      	movs	r3, #0
 8000bac:	2200      	movs	r2, #0
 8000bae:	f004 ffdf 	bl	8005b70 <osMessageQueueGet>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d11b      	bne.n	8000bf0 <state_start_iterate+0x6c>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(0x2, 0x14, 0x0, 0x3, 0x00, 0x0))
 8000bb8:	693c      	ldr	r4, [r7, #16]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2114      	movs	r1, #20
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f7ff ff0f 	bl	80009ec <Compose_CANId>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	d10d      	bne.n	8000bf0 <state_start_iterate+0x6c>
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(*((PDM_StartupOk_t*)&(msg.data)), &getPowerChannels);
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	331c      	adds	r3, #28
 8000bde:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000be2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000be6:	f7ff fe9c 	bl	8000922 <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000bf0:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <state_start_iterate+0x134>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f005 f82c 	bl	8005c54 <osMessageQueueGetCount>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1ce      	bne.n	8000ba0 <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d051      	beq.n	8000cae <state_start_iterate+0x12a>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c16:	4313      	orrs	r3, r2
 8000c18:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000c1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fe99 	bl	8000958 <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000c26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
 8000c36:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c40:	2304      	movs	r3, #4
 8000c42:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <state_start_iterate+0x134>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f103 0008 	add.w	r0, r3, #8
 8000c4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c50:	1d1a      	adds	r2, r3, #4
 8000c52:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000c56:	4603      	mov	r3, r0
 8000c58:	4818      	ldr	r0, [pc, #96]	; (8000cbc <state_start_iterate+0x138>)
 8000c5a:	f001 ff03 	bl	8002a64 <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <state_start_iterate+0x134>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c64:	2120      	movs	r1, #32
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fdca 	bl	8005800 <osSemaphoreAcquire>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d117      	bne.n	8000ca2 <state_start_iterate+0x11e>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <state_start_iterate+0x134>)
 8000c74:	681c      	ldr	r4, [r3, #0]
 8000c76:	f001 f967 	bl	8001f48 <HAL_GetTick>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	61e3      	str	r3, [r4, #28]
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <state_start_iterate+0x134>)
 8000c80:	681c      	ldr	r4, [r3, #0]
 8000c82:	f001 f961 	bl	8001f48 <HAL_GetTick>
 8000c86:	4603      	mov	r3, r0
 8000c88:	6223      	str	r3, [r4, #32]
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <state_start_iterate+0x134>)
 8000c8c:	681c      	ldr	r4, [r3, #0]
 8000c8e:	f001 f95b 	bl	8001f48 <HAL_GetTick>
 8000c92:	4603      	mov	r3, r0
 8000c94:	6263      	str	r3, [r4, #36]	; 0x24
			osSemaphoreRelease(CC_GlobalState->sem);
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <state_start_iterate+0x134>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 fe15 	bl	80058cc <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <state_start_iterate+0x13c>)
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <state_start_iterate+0x140>)
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fd74 	bl	8000794 <fsm_changeState>
	}
	return;
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
}
 8000cb0:	3764      	adds	r7, #100	; 0x64
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200049e0 	.word	0x200049e0
 8000cbc:	20004a54 	.word	0x20004a54
 8000cc0:	0800979c 	.word	0x0800979c
 8000cc4:	20000010 	.word	0x20000010

08000cc8 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	/* Wake/Ready to Idle over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8000cd0:	bf00      	nop
}
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	0000      	movs	r0, r0
	...

08000ce0 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8000ce8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cec:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <state_idle_enter+0x70>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f004 fd82 	bl	8005800 <osSemaphoreAcquire>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d11a      	bne.n	8000d38 <state_idle_enter+0x58>
	{
		CC_GlobalState->brakeThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d0c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000d40 <state_idle_enter+0x60>
 8000d10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d14:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000d48 <state_idle_enter+0x68>
 8000d18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <state_idle_enter+0x70>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d24:	ee17 2a90 	vmov	r2, s15
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
		osSemaphoreRelease(CC_GlobalState->sem);
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <state_idle_enter+0x70>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fdcb 	bl	80058cc <osSemaphoreRelease>
	}
	return;
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
}
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	9999999a 	.word	0x9999999a
 8000d44:	3fc99999 	.word	0x3fc99999
 8000d48:	00000000 	.word	0x00000000
 8000d4c:	40790000 	.word	0x40790000
 8000d50:	200049e0 	.word	0x200049e0
 8000d54:	00000000 	.word	0x00000000

08000d58 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b0a9      	sub	sp, #164	; 0xa4
 8000d5c:	af06      	add	r7, sp, #24
 8000d5e:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */

	/* AMS Heartbeat Expiry - Fatal Shutdown */
	if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8000d60:	f001 f8f2 	bl	8001f48 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	4bb2      	ldr	r3, [pc, #712]	; (8001030 <state_idle_iterate+0x2d8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	; 0x64
 8000d70:	d93e      	bls.n	8000df0 <state_idle_iterate+0x98>
 8000d72:	4baf      	ldr	r3, [pc, #700]	; (8001030 <state_idle_iterate+0x2d8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	7e9b      	ldrb	r3, [r3, #26]
 8000d78:	f083 0301 	eor.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d036      	beq.n	8000df0 <state_idle_iterate+0x98>
	{
		CC_LogInfo("Fatal Shutdown AMS\r\n", strlen("Fatal Shutdown AMS\r\n"));
 8000d82:	2114      	movs	r1, #20
 8000d84:	48ab      	ldr	r0, [pc, #684]	; (8001034 <state_idle_iterate+0x2dc>)
 8000d86:	f000 fe1f 	bl	80019c8 <CC_LogInfo>
		CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000d8a:	f7ff fc92 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	67fb      	str	r3, [r7, #124]	; 0x7c
		CAN_TxHeaderTypeDef header =
 8000d92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	615a      	str	r2, [r3, #20]
		{
				.ExtId = fatalShutdown.id,
 8000da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		CAN_TxHeaderTypeDef header =
 8000da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8000da8:	2304      	movs	r3, #4
 8000daa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000dac:	2301      	movs	r3, #1
 8000dae:	677b      	str	r3, [r7, #116]	; 0x74
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8000db0:	230f      	movs	r3, #15
 8000db2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000db6:	4b9e      	ldr	r3, [pc, #632]	; (8001030 <state_idle_iterate+0x2d8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000dbe:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000dc2:	489d      	ldr	r0, [pc, #628]	; (8001038 <state_idle_iterate+0x2e0>)
 8000dc4:	f001 fe4e 	bl	8002a64 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000dc8:	4b99      	ldr	r3, [pc, #612]	; (8001030 <state_idle_iterate+0x2d8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3308      	adds	r3, #8
 8000dce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000dd2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000dd6:	4899      	ldr	r0, [pc, #612]	; (800103c <state_idle_iterate+0x2e4>)
 8000dd8:	f001 fe44 	bl	8002a64 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000ddc:	4b94      	ldr	r3, [pc, #592]	; (8001030 <state_idle_iterate+0x2d8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3310      	adds	r3, #16
 8000de2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000de6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000dea:	4895      	ldr	r0, [pc, #596]	; (8001040 <state_idle_iterate+0x2e8>)
 8000dec:	f001 fe3a 	bl	8002a64 <HAL_CAN_AddTxMessage>
	}
	/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
	if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8000df0:	f001 f8aa 	bl	8001f48 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	4b8e      	ldr	r3, [pc, #568]	; (8001030 <state_idle_iterate+0x2d8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	f240 809b 	bls.w	8000f3a <state_idle_iterate+0x1e2>
 8000e04:	4b8a      	ldr	r3, [pc, #552]	; (8001030 <state_idle_iterate+0x2d8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	7edb      	ldrb	r3, [r3, #27]
 8000e0a:	f083 0301 	eor.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 8092 	beq.w	8000f3a <state_idle_iterate+0x1e2>
	{
		CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000e16:	f7ff fc4c 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
		CAN_TxHeaderTypeDef header =
 8000e1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	615a      	str	r2, [r3, #20]
		{
				.ExtId = fatalShutdown.id,
 8000e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		CAN_TxHeaderTypeDef header =
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e34:	2304      	movs	r3, #4
 8000e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e38:	2301      	movs	r3, #1
 8000e3a:	657b      	str	r3, [r7, #84]	; 0x54
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000e42:	4b7b      	ldr	r3, [pc, #492]	; (8001030 <state_idle_iterate+0x2d8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e4a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000e4e:	487a      	ldr	r0, [pc, #488]	; (8001038 <state_idle_iterate+0x2e0>)
 8000e50:	f001 fe08 	bl	8002a64 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000e54:	4b76      	ldr	r3, [pc, #472]	; (8001030 <state_idle_iterate+0x2d8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3308      	adds	r3, #8
 8000e5a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e5e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000e62:	4876      	ldr	r0, [pc, #472]	; (800103c <state_idle_iterate+0x2e4>)
 8000e64:	f001 fdfe 	bl	8002a64 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000e68:	4b71      	ldr	r3, [pc, #452]	; (8001030 <state_idle_iterate+0x2d8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3310      	adds	r3, #16
 8000e6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e72:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000e76:	4872      	ldr	r0, [pc, #456]	; (8001040 <state_idle_iterate+0x2e8>)
 8000e78:	f001 fdf4 	bl	8002a64 <HAL_CAN_AddTxMessage>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000e7c:	e05d      	b.n	8000f3a <state_idle_iterate+0x1e2>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000e7e:	4b6c      	ldr	r3, [pc, #432]	; (8001030 <state_idle_iterate+0x2d8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000e84:	f107 010c 	add.w	r1, r7, #12
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f004 fe70 	bl	8005b70 <osMessageQueueGet>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d151      	bne.n	8000f3a <state_idle_iterate+0x1e2>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000e96:	693c      	ldr	r4, [r7, #16]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2110      	movs	r1, #16
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff fda0 	bl	80009ec <Compose_CANId>
 8000eac:	4603      	mov	r3, r0
 8000eae:	429c      	cmp	r4, r3
 8000eb0:	d126      	bne.n	8000f00 <state_idle_iterate+0x1a8>
			{
				CC_LogInfo("AMS Heartbeat\r\n", strlen("AMS Heartbeat\r\n"));
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	4863      	ldr	r0, [pc, #396]	; (8001044 <state_idle_iterate+0x2ec>)
 8000eb6:	f000 fd87 	bl	80019c8 <CC_LogInfo>
				bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
				Parse_AMS_HeartbeatResponse(*((AMS_HeartbeatResponse_t*)&(msg.data)), &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	f103 021c 	add.w	r2, r3, #28
 8000ec2:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000ec6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000eca:	9305      	str	r3, [sp, #20]
 8000ecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed0:	9304      	str	r3, [sp, #16]
 8000ed2:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000ed6:	9303      	str	r3, [sp, #12]
 8000ed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	460b      	mov	r3, r1
 8000eec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eee:	f7ff fb77 	bl	80005e0 <Parse_AMS_HeartbeatResponse>
				CC_GlobalState->amsTicks = HAL_GetTick();
 8000ef2:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <state_idle_iterate+0x2d8>)
 8000ef4:	681c      	ldr	r4, [r3, #0]
 8000ef6:	f001 f827 	bl	8001f48 <HAL_GetTick>
 8000efa:	4603      	mov	r3, r0
 8000efc:	6223      	str	r3, [r4, #32]
 8000efe:	e01c      	b.n	8000f3a <state_idle_iterate+0x1e2>
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000f00:	693c      	ldr	r4, [r7, #16]
 8000f02:	2300      	movs	r3, #0
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2301      	movs	r3, #1
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2110      	movs	r1, #16
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fd6b 	bl	80009ec <Compose_CANId>
 8000f16:	4603      	mov	r3, r0
 8000f18:	429c      	cmp	r4, r3
 8000f1a:	d10e      	bne.n	8000f3a <state_idle_iterate+0x1e2>
			{
				uint8_t pwmState;
				Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	331c      	adds	r3, #28
 8000f22:	f107 0235 	add.w	r2, r7, #53	; 0x35
 8000f26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f2a:	f7ff fd95 	bl	8000a58 <Parse_SHDN_IMD_HeartbeatResponse>
				CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000f2e:	4b40      	ldr	r3, [pc, #256]	; (8001030 <state_idle_iterate+0x2d8>)
 8000f30:	681c      	ldr	r4, [r3, #0]
 8000f32:	f001 f809 	bl	8001f48 <HAL_GetTick>
 8000f36:	4603      	mov	r3, r0
 8000f38:	6263      	str	r3, [r4, #36]	; 0x24
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <state_idle_iterate+0x2d8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 fe87 	bl	8005c54 <osMessageQueueGetCount>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d198      	bne.n	8000e7e <state_idle_iterate+0x126>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 8000f4c:	4b38      	ldr	r3, [pc, #224]	; (8001030 <state_idle_iterate+0x2d8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	7e1b      	ldrb	r3, [r3, #24]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d018      	beq.n	8000f88 <state_idle_iterate+0x230>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 8000f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f6a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001020 <state_idle_iterate+0x2c8>
 8000f6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f72:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001028 <state_idle_iterate+0x2d0>
 8000f76:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f7e:	ee17 3a90 	vmov	r3, s15
 8000f82:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8000f86:	e008      	b.n	8000f9a <state_idle_iterate+0x242>
	}
	else
	{
		HAL_ADC_Start(&hadc1);
 8000f88:	482f      	ldr	r0, [pc, #188]	; (8001048 <state_idle_iterate+0x2f0>)
 8000f8a:	f001 f82d 	bl	8001fe8 <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc1);
 8000f8e:	482e      	ldr	r0, [pc, #184]	; (8001048 <state_idle_iterate+0x2f0>)
 8000f90:	f001 f8ea 	bl	8002168 <HAL_ADC_GetValue>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		//char x[80];
		//int len = sprintf(x, "Read ADC Value of: %hu\r\n", raw);
	}
	if(raw > CC_GlobalState->brakeThreshold)
 8000f9a:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <state_idle_iterate+0x2d8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dd2e      	ble.n	8001006 <state_idle_iterate+0x2ae>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fae:	4827      	ldr	r0, [pc, #156]	; (800104c <state_idle_iterate+0x2f4>)
 8000fb0:	f002 fa12 	bl	80033d8 <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <state_idle_iterate+0x2d8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fba:	2120      	movs	r1, #32
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fc1f 	bl	8005800 <osSemaphoreAcquire>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d124      	bne.n	8001012 <state_idle_iterate+0x2ba>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 8000fc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fcc:	481f      	ldr	r0, [pc, #124]	; (800104c <state_idle_iterate+0x2f4>)
 8000fce:	f002 f9eb 	bl	80033a8 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00f      	beq.n	8000ff8 <state_idle_iterate+0x2a0>
 8000fd8:	f000 ffb6 	bl	8001f48 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <state_idle_iterate+0x2d8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	f241 3287 	movw	r2, #4999	; 0x1387
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d904      	bls.n	8000ff8 <state_idle_iterate+0x2a0>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <state_idle_iterate+0x2f8>)
 8000ff0:	4918      	ldr	r1, [pc, #96]	; (8001054 <state_idle_iterate+0x2fc>)
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fbce 	bl	8000794 <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <state_idle_iterate+0x2d8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fc64 	bl	80058cc <osSemaphoreRelease>
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
	}
}
 8001004:	e005      	b.n	8001012 <state_idle_iterate+0x2ba>
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100c:	480f      	ldr	r0, [pc, #60]	; (800104c <state_idle_iterate+0x2f4>)
 800100e:	f002 f9e3 	bl	80033d8 <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	378c      	adds	r7, #140	; 0x8c
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	33333333 	.word	0x33333333
 8001024:	3fd33333 	.word	0x3fd33333
 8001028:	00000000 	.word	0x00000000
 800102c:	40790000 	.word	0x40790000
 8001030:	200049e0 	.word	0x200049e0
 8001034:	080097b8 	.word	0x080097b8
 8001038:	20004a7c 	.word	0x20004a7c
 800103c:	20004a54 	.word	0x20004a54
 8001040:	20004a2c 	.word	0x20004a2c
 8001044:	080097d0 	.word	0x080097d0
 8001048:	200049e4 	.word	0x200049e4
 800104c:	40021000 	.word	0x40021000
 8001050:	080097e0 	.word	0x080097e0
 8001054:	20000020 	.word	0x20000020

08001058 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 8001060:	f7ff fb13 	bl	800068a <Compose_CC_ReadyToDrive>
 8001064:	4603      	mov	r3, r0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	2304      	movs	r3, #4
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	2301      	movs	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8001086:	230f      	movs	r3, #15
 8001088:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <state_idle_exit+0x74>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f107 0208 	add.w	r2, r7, #8
 8001092:	f107 010c 	add.w	r1, r7, #12
 8001096:	480e      	ldr	r0, [pc, #56]	; (80010d0 <state_idle_exit+0x78>)
 8001098:	f001 fce4 	bl	8002a64 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <state_idle_exit+0x74>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3308      	adds	r3, #8
 80010a2:	f107 0208 	add.w	r2, r7, #8
 80010a6:	f107 010c 	add.w	r1, r7, #12
 80010aa:	480a      	ldr	r0, [pc, #40]	; (80010d4 <state_idle_exit+0x7c>)
 80010ac:	f001 fcda 	bl	8002a64 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <state_idle_exit+0x74>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3310      	adds	r3, #16
 80010b6:	f107 0208 	add.w	r2, r7, #8
 80010ba:	f107 010c 	add.w	r1, r7, #12
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <state_idle_exit+0x80>)
 80010c0:	f001 fcd0 	bl	8002a64 <HAL_CAN_AddTxMessage>
	return;
 80010c4:	bf00      	nop
}
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200049e0 	.word	0x200049e0
 80010d0:	20004a7c 	.word	0x20004a7c
 80010d4:	20004a54 	.word	0x20004a54
 80010d8:	20004a2c 	.word	0x20004a2c

080010dc <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	/* Flash RTD */
	for (int i = 0; i < 15; i++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e014      	b.n	8001114 <state_driving_enter+0x38>
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <state_driving_enter+0x48>)
 80010f2:	f002 f971 	bl	80033d8 <HAL_GPIO_WritePin>
		osDelay(60);
 80010f6:	203c      	movs	r0, #60	; 0x3c
 80010f8:	f004 fab6 	bl	8005668 <osDelay>
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <state_driving_enter+0x48>)
 8001104:	f002 f968 	bl	80033d8 <HAL_GPIO_WritePin>
		osDelay(60);
 8001108:	203c      	movs	r0, #60	; 0x3c
 800110a:	f004 faad 	bl	8005668 <osDelay>
	for (int i = 0; i < 15; i++)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3301      	adds	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b0e      	cmp	r3, #14
 8001118:	dde7      	ble.n	80010ea <state_driving_enter+0xe>
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	/* Else */

	/* Hard Shutdown Power Off */
	return;
 800111a:	bf00      	nop
}
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Drivin Drivin\r\n", strlen("Drivin Drivin\r\n"));
 8001130:	210f      	movs	r1, #15
 8001132:	4826      	ldr	r0, [pc, #152]	; (80011cc <state_driving_iterate+0xa4>)
 8001134:	f000 fc48 	bl	80019c8 <CC_LogInfo>

	/* Compose Test CAN Message */
	CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8001138:	f7ff fabb 	bl	80006b2 <Compose_CC_FatalShutdown>
 800113c:	4603      	mov	r3, r0
 800113e:	64fb      	str	r3, [r7, #76]	; 0x4c
	CAN_TxHeaderTypeDef header =
 8001140:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]
	{
			.ExtId = fatalShutdown.id,
 8001152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	CAN_TxHeaderTypeDef header =
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
 8001156:	2304      	movs	r3, #4
 8001158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800115a:	2301      	movs	r3, #1
 800115c:	647b      	str	r3, [r7, #68]	; 0x44
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 800115e:	230f      	movs	r3, #15
 8001160:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <state_driving_iterate+0xa8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800116c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <state_driving_iterate+0xac>)
 8001172:	f001 fc77 	bl	8002a64 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <state_driving_iterate+0xa8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3308      	adds	r3, #8
 800117c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001180:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001184:	4814      	ldr	r0, [pc, #80]	; (80011d8 <state_driving_iterate+0xb0>)
 8001186:	f001 fc6d 	bl	8002a64 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <state_driving_iterate+0xa8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3310      	adds	r3, #16
 8001190:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001194:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <state_driving_iterate+0xb4>)
 800119a:	f001 fc63 	bl	8002a64 <HAL_CAN_AddTxMessage>

	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 800119e:	e008      	b.n	80011b2 <state_driving_iterate+0x8a>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U))
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <state_driving_iterate+0xa8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80011a6:	f107 0108 	add.w	r1, r7, #8
 80011aa:	2300      	movs	r3, #0
 80011ac:	2200      	movs	r2, #0
 80011ae:	f004 fcdf 	bl	8005b70 <osMessageQueueGet>
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <state_driving_iterate+0xa8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fd4b 	bl	8005c54 <osMessageQueueGetCount>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1ed      	bne.n	80011a0 <state_driving_iterate+0x78>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	; 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	080097ec 	.word	0x080097ec
 80011d0:	200049e0 	.word	0x200049e0
 80011d4:	20004a7c 	.word	0x20004a7c
 80011d8:	20004a54 	.word	0x20004a54
 80011dc:	20004a2c 	.word	0x20004a2c

080011e0 <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 80011e8:	bf00      	nop
}
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <MX_ADC1_Init+0x98>)
 8001208:	4a21      	ldr	r2, [pc, #132]	; (8001290 <MX_ADC1_Init+0x9c>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_ADC1_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <MX_ADC1_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_ADC1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_ADC1_Init+0x98>)
 8001220:	2201      	movs	r2, #1
 8001222:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_ADC1_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_ADC1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_ADC1_Init+0x98>)
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <MX_ADC1_Init+0xa0>)
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_ADC1_Init+0x98>)
 8001240:	2201      	movs	r2, #1
 8001242:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_ADC1_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_ADC1_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001252:	480e      	ldr	r0, [pc, #56]	; (800128c <MX_ADC1_Init+0x98>)
 8001254:	f000 fe84 	bl	8001f60 <HAL_ADC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 fc9d 	bl	8001b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001262:	2302      	movs	r3, #2
 8001264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001266:	2301      	movs	r3, #1
 8001268:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <MX_ADC1_Init+0x98>)
 8001274:	f000 ff86 	bl	8002184 <HAL_ADC_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800127e:	f000 fc8d 	bl	8001b9c <Error_Handler>
  }

}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200049e4 	.word	0x200049e4
 8001290:	40012000 	.word	0x40012000
 8001294:	0f000001 	.word	0x0f000001

08001298 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <HAL_ADC_MspInit+0x74>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d123      	bne.n	8001302 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_ADC_MspInit+0x78>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <HAL_ADC_MspInit+0x78>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_ADC_MspInit+0x78>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_ADC_MspInit+0x78>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_ADC_MspInit+0x78>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_ADC_MspInit+0x78>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ea:	2304      	movs	r3, #4
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_ADC_MspInit+0x7c>)
 80012fe:	f001 fea9 	bl	8003054 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012000 	.word	0x40012000
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_CAN1_Init+0x60>)
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <MX_CAN1_Init+0x64>)
 8001320:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_CAN1_Init+0x60>)
 8001324:	2210      	movs	r2, #16
 8001326:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_CAN1_Init+0x60>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_CAN1_Init+0x60>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_CAN1_Init+0x60>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_CAN1_Init+0x60>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <MX_CAN1_Init+0x60>)
 8001342:	2200      	movs	r2, #0
 8001344:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_CAN1_Init+0x60>)
 8001348:	2200      	movs	r2, #0
 800134a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <MX_CAN1_Init+0x60>)
 800134e:	2200      	movs	r2, #0
 8001350:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_CAN1_Init+0x60>)
 8001354:	2200      	movs	r2, #0
 8001356:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_CAN1_Init+0x60>)
 800135a:	2200      	movs	r2, #0
 800135c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_CAN1_Init+0x60>)
 8001360:	2200      	movs	r2, #0
 8001362:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_CAN1_Init+0x60>)
 8001366:	f001 f951 	bl	800260c <HAL_CAN_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 fc14 	bl	8001b9c <Error_Handler>
  }

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20004a7c 	.word	0x20004a7c
 800137c:	40006400 	.word	0x40006400

08001380 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_CAN2_Init+0x64>)
 8001386:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <MX_CAN2_Init+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_CAN2_Init+0x64>)
 800138c:	2202      	movs	r2, #2
 800138e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_CAN2_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_CAN2_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_CAN2_Init+0x64>)
 800139e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80013a2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_CAN2_Init+0x64>)
 80013a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_CAN2_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_CAN2_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <MX_CAN2_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_CAN2_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <MX_CAN2_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_CAN2_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_CAN2_Init+0x64>)
 80013d2:	f001 f91b 	bl	800260c <HAL_CAN_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80013dc:	f000 fbde 	bl	8001b9c <Error_Handler>
  }

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20004a54 	.word	0x20004a54
 80013e8:	40006800 	.word	0x40006800

080013ec <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_CAN3_Init+0x60>)
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <MX_CAN3_Init+0x64>)
 80013f4:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 16;
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_CAN3_Init+0x60>)
 80013f8:	2210      	movs	r2, #16
 80013fa:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_CAN3_Init+0x60>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_CAN3_Init+0x60>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_CAN3_Init+0x60>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_CAN3_Init+0x60>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <MX_CAN3_Init+0x60>)
 8001416:	2200      	movs	r2, #0
 8001418:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_CAN3_Init+0x60>)
 800141c:	2200      	movs	r2, #0
 800141e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <MX_CAN3_Init+0x60>)
 8001422:	2200      	movs	r2, #0
 8001424:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_CAN3_Init+0x60>)
 8001428:	2200      	movs	r2, #0
 800142a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <MX_CAN3_Init+0x60>)
 800142e:	2200      	movs	r2, #0
 8001430:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_CAN3_Init+0x60>)
 8001434:	2200      	movs	r2, #0
 8001436:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_CAN3_Init+0x60>)
 800143a:	f001 f8e7 	bl	800260c <HAL_CAN_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_CAN3_Init+0x5c>
  {
    Error_Handler();
 8001444:	f000 fbaa 	bl	8001b9c <Error_Handler>
  }

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20004a2c 	.word	0x20004a2c
 8001450:	40003400 	.word	0x40003400

08001454 <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b092      	sub	sp, #72	; 0x48
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a7e      	ldr	r2, [pc, #504]	; (800166c <HAL_CAN_MspInit+0x218>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d132      	bne.n	80014dc <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001476:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <HAL_CAN_MspInit+0x21c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_CAN_MspInit+0x21c>)
 800147e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001480:	4b7b      	ldr	r3, [pc, #492]	; (8001670 <HAL_CAN_MspInit+0x21c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10b      	bne.n	80014a0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001488:	4b7a      	ldr	r3, [pc, #488]	; (8001674 <HAL_CAN_MspInit+0x220>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a79      	ldr	r2, [pc, #484]	; (8001674 <HAL_CAN_MspInit+0x220>)
 800148e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b77      	ldr	r3, [pc, #476]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
 800149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b74      	ldr	r3, [pc, #464]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b71      	ldr	r3, [pc, #452]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014ca:	2309      	movs	r3, #9
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014d2:	4619      	mov	r1, r3
 80014d4:	4868      	ldr	r0, [pc, #416]	; (8001678 <HAL_CAN_MspInit+0x224>)
 80014d6:	f001 fdbd 	bl	8003054 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80014da:	e0c2      	b.n	8001662 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a66      	ldr	r2, [pc, #408]	; (800167c <HAL_CAN_MspInit+0x228>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d15c      	bne.n	80015a0 <HAL_CAN_MspInit+0x14c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 80014e6:	4b66      	ldr	r3, [pc, #408]	; (8001680 <HAL_CAN_MspInit+0x22c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a64      	ldr	r2, [pc, #400]	; (8001680 <HAL_CAN_MspInit+0x22c>)
 80014ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 80014f0:	4b63      	ldr	r3, [pc, #396]	; (8001680 <HAL_CAN_MspInit+0x22c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10b      	bne.n	8001510 <HAL_CAN_MspInit+0xbc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 80014f8:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a5d      	ldr	r2, [pc, #372]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80014fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 8001510:	4b5c      	ldr	r3, [pc, #368]	; (8001684 <HAL_CAN_MspInit+0x230>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a5b      	ldr	r2, [pc, #364]	; (8001684 <HAL_CAN_MspInit+0x230>)
 8001518:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 800151a:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <HAL_CAN_MspInit+0x230>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10b      	bne.n	800153a <HAL_CAN_MspInit+0xe6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8001522:	4b54      	ldr	r3, [pc, #336]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a53      	ldr	r2, [pc, #332]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 800153a:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <HAL_CAN_MspInit+0x21c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a4b      	ldr	r2, [pc, #300]	; (8001670 <HAL_CAN_MspInit+0x21c>)
 8001542:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_CAN_MspInit+0x21c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10b      	bne.n	8001564 <HAL_CAN_MspInit+0x110>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800154c:	4b49      	ldr	r3, [pc, #292]	; (8001674 <HAL_CAN_MspInit+0x220>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a48      	ldr	r2, [pc, #288]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b46      	ldr	r3, [pc, #280]	; (8001674 <HAL_CAN_MspInit+0x220>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	4b43      	ldr	r3, [pc, #268]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	4a42      	ldr	r2, [pc, #264]	; (8001674 <HAL_CAN_MspInit+0x220>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	6313      	str	r3, [r2, #48]	; 0x30
 8001570:	4b40      	ldr	r3, [pc, #256]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 800157c:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800158e:	2309      	movs	r3, #9
 8001590:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001596:	4619      	mov	r1, r3
 8001598:	483b      	ldr	r0, [pc, #236]	; (8001688 <HAL_CAN_MspInit+0x234>)
 800159a:	f001 fd5b 	bl	8003054 <HAL_GPIO_Init>
}
 800159e:	e060      	b.n	8001662 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN3)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a39      	ldr	r2, [pc, #228]	; (800168c <HAL_CAN_MspInit+0x238>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d15b      	bne.n	8001662 <HAL_CAN_MspInit+0x20e>
    HAL_RCC_CAN3_CLK_ENABLED++;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_CAN_MspInit+0x22c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a33      	ldr	r2, [pc, #204]	; (8001680 <HAL_CAN_MspInit+0x22c>)
 80015b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 80015b4:	4b32      	ldr	r3, [pc, #200]	; (8001680 <HAL_CAN_MspInit+0x22c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d10b      	bne.n	80015d4 <HAL_CAN_MspInit+0x180>
      __HAL_RCC_CAN3_CLK_ENABLE();
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80015c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_CAN_MspInit+0x230>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <HAL_CAN_MspInit+0x230>)
 80015dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 80015de:	4b29      	ldr	r3, [pc, #164]	; (8001684 <HAL_CAN_MspInit+0x230>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d10b      	bne.n	80015fe <HAL_CAN_MspInit+0x1aa>
      __HAL_RCC_CAN2_CLK_ENABLE();
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80015ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_CAN_MspInit+0x220>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_CAN_MspInit+0x21c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <HAL_CAN_MspInit+0x21c>)
 8001606:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_CAN_MspInit+0x21c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d10b      	bne.n	8001628 <HAL_CAN_MspInit+0x1d4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_CAN_MspInit+0x220>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_CAN_MspInit+0x220>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_CAN_MspInit+0x220>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6313      	str	r3, [r2, #48]	; 0x30
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_CAN_MspInit+0x220>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001640:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001652:	230b      	movs	r3, #11
 8001654:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800165a:	4619      	mov	r1, r3
 800165c:	4806      	ldr	r0, [pc, #24]	; (8001678 <HAL_CAN_MspInit+0x224>)
 800165e:	f001 fcf9 	bl	8003054 <HAL_GPIO_Init>
}
 8001662:	bf00      	nop
 8001664:	3748      	adds	r7, #72	; 0x48
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40006400 	.word	0x40006400
 8001670:	200000c0 	.word	0x200000c0
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000
 800167c:	40006800 	.word	0x40006800
 8001680:	200000c4 	.word	0x200000c4
 8001684:	200000c8 	.word	0x200000c8
 8001688:	40020400 	.word	0x40020400
 800168c:	40003400 	.word	0x40003400

08001690 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <MX_FREERTOS_Init+0x18>)
 8001696:	2100      	movs	r1, #0
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_FREERTOS_Init+0x1c>)
 800169a:	f003 ff3f 	bl	800551c <osThreadNew>
 800169e:	4602      	mov	r2, r0
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <MX_FREERTOS_Init+0x20>)
 80016a2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	080098f4 	.word	0x080098f4
 80016ac:	080016b5 	.word	0x080016b5
 80016b0:	20004aa4 	.word	0x20004aa4

080016b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016bc:	2001      	movs	r0, #1
 80016be:	f003 ffd3 	bl	8005668 <osDelay>
 80016c2:	e7fb      	b.n	80016bc <StartDefaultTask+0x8>

080016c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a28      	ldr	r2, [pc, #160]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a22      	ldr	r2, [pc, #136]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_GPIO_Init+0xbc>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_GPIO_Init+0xbc>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <MX_GPIO_Init+0xbc>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_GPIO_Init+0xbc>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001728:	4816      	ldr	r0, [pc, #88]	; (8001784 <MX_GPIO_Init+0xc0>)
 800172a:	f001 fe55 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HSOUT_RTD_LED_Pin;
 800172e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HSOUT_RTD_LED_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4619      	mov	r1, r3
 8001746:	480f      	ldr	r0, [pc, #60]	; (8001784 <MX_GPIO_Init+0xc0>)
 8001748:	f001 fc84 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_INPUT_Pin;
 800174c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <MX_GPIO_Init+0xc4>)
 8001754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RTD_INPUT_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	4808      	ldr	r0, [pc, #32]	; (8001784 <MX_GPIO_Init+0xc0>)
 8001762:	f001 fc77 	bl	8003054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2103      	movs	r1, #3
 800176a:	2028      	movs	r0, #40	; 0x28
 800176c:	f001 fc48 	bl	8003000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001770:	2028      	movs	r0, #40	; 0x28
 8001772:	f001 fc61 	bl	8003038 <HAL_NVIC_EnableIRQ>

}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40021000 	.word	0x40021000
 8001788:	10110000 	.word	0x10110000

0800178c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0a0      	sub	sp, #128	; 0x80
 8001790:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001792:	f000 fbb8 	bl	8001f06 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001796:	f000 f89d 	bl	80018d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800179a:	f7ff ff93 	bl	80016c4 <MX_GPIO_Init>
	MX_CAN1_Init();
 800179e:	f7ff fdbb 	bl	8001318 <MX_CAN1_Init>
	MX_USART3_UART_Init();
 80017a2:	f000 fb13 	bl	8001dcc <MX_USART3_UART_Init>
	MX_CAN2_Init();
 80017a6:	f7ff fdeb 	bl	8001380 <MX_CAN2_Init>
	MX_CAN3_Init();
 80017aa:	f7ff fe1f 	bl	80013ec <MX_CAN3_Init>
	MX_ADC1_Init();
 80017ae:	f7ff fd21 	bl	80011f4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80017b2:	4842      	ldr	r0, [pc, #264]	; (80018bc <main+0x130>)
 80017b4:	f001 f912 	bl	80029dc <HAL_CAN_Start>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <main+0x36>
	{
		Error_Handler();
 80017be:	f000 f9ed 	bl	8001b9c <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 80017c2:	483f      	ldr	r0, [pc, #252]	; (80018c0 <main+0x134>)
 80017c4:	f001 f90a 	bl	80029dc <HAL_CAN_Start>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <main+0x46>
	{
		Error_Handler();
 80017ce:	f000 f9e5 	bl	8001b9c <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 80017d2:	483b      	ldr	r0, [pc, #236]	; (80018c0 <main+0x134>)
 80017d4:	f001 f902 	bl	80029dc <HAL_CAN_Start>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <main+0x56>
	{
		Error_Handler();
 80017de:	f000 f9dd 	bl	8001b9c <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80017ea:	2301      	movs	r3, #1
 80017ec:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 80017ee:	2300      	movs	r3, #0
 80017f0:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 80017f2:	2301      	movs	r3, #1
 80017f4:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 80017f6:	2300      	movs	r3, #0
 80017f8:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 80017fa:	2300      	movs	r3, #0
 80017fc:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80017fe:	2300      	movs	r3, #0
 8001800:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 8001802:	2301      	movs	r3, #1
 8001804:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 8001806:	230e      	movs	r3, #14
 8001808:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 800180a:	230e      	movs	r3, #14
 800180c:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 800180e:	2300      	movs	r3, #0
 8001810:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001812:	2301      	movs	r3, #1
 8001814:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 800181a:	2301      	movs	r3, #1
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 8001822:	2300      	movs	r3, #0
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001826:	2300      	movs	r3, #0
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 800182a:	2301      	movs	r3, #1
 800182c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 800182e:	230e      	movs	r3, #14
 8001830:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 8001842:	2301      	movs	r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 8001852:	2301      	movs	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 8001856:	230e      	movs	r3, #14
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 800185a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800185e:	4619      	mov	r1, r3
 8001860:	4816      	ldr	r0, [pc, #88]	; (80018bc <main+0x130>)
 8001862:	f000 ffcf 	bl	8002804 <HAL_CAN_ConfigFilter>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <main+0xe4>
	{
		/* Filter configuration Error */
		Error_Handler();
 800186c:	f000 f996 	bl	8001b9c <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8001870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <main+0x134>)
 8001878:	f000 ffc4 	bl	8002804 <HAL_CAN_ConfigFilter>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <main+0xfa>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001882:	f000 f98b 	bl	8001b9c <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4619      	mov	r1, r3
 800188a:	480e      	ldr	r0, [pc, #56]	; (80018c4 <main+0x138>)
 800188c:	f000 ffba 	bl	8002804 <HAL_CAN_ConfigFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <main+0x10e>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001896:	f000 f981 	bl	8001b9c <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <main+0x13c>)
 800189c:	f7fe ff1d 	bl	80006da <fsm_new>
 80018a0:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <main+0x140>)
 80018a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <main+0x144>)
 80018a8:	f003 fe38 	bl	800551c <osThreadNew>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80018ac:	f003 fdcc 	bl	8005448 <osKernelInitialize>
	MX_FREERTOS_Init();
 80018b0:	f7ff feee 	bl	8001690 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80018b4:	f003 fdfc 	bl	80054b0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80018b8:	e7fe      	b.n	80018b8 <main+0x12c>
 80018ba:	bf00      	nop
 80018bc:	20004a7c 	.word	0x20004a7c
 80018c0:	20004a54 	.word	0x20004a54
 80018c4:	20004a2c 	.word	0x20004a2c
 80018c8:	20000000 	.word	0x20000000
 80018cc:	08009918 	.word	0x08009918
 80018d0:	080019f1 	.word	0x080019f1

080018d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0b8      	sub	sp, #224	; 0xe0
 80018d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018de:	2234      	movs	r2, #52	; 0x34
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f007 fae7 	bl	8008eb6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	2290      	movs	r2, #144	; 0x90
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f007 fad8 	bl	8008eb6 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <SystemClock_Config+0xec>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a2d      	ldr	r2, [pc, #180]	; (80019c0 <SystemClock_Config+0xec>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <SystemClock_Config+0xec>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <SystemClock_Config+0xf0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001926:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <SystemClock_Config+0xf0>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <SystemClock_Config+0xf0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001940:	2301      	movs	r3, #1
 8001942:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001946:	2310      	movs	r3, #16
 8001948:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001952:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fd7c 	bl	8003454 <HAL_RCC_OscConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8001962:	f000 f91b 	bl	8001b9c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001966:	230f      	movs	r3, #15
 8001968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001984:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f002 f810 	bl	80039b0 <HAL_RCC_ClockConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001996:	f000 f901 	bl	8001b9c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800199a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fa05 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 80019b4:	f000 f8f2 	bl	8001b9c <Error_Handler>
	}
}
 80019b8:	bf00      	nop
 80019ba:	37e0      	adds	r7, #224	; 0xe0
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000

080019c8 <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <CC_LogInfo+0x24>)
 80019de:	f003 f88d 	bl	8004afc <HAL_UART_Transmit>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20004ae8 	.word	0x20004ae8

080019f0 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0a4      	sub	sp, #144	; 0x90
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 80019f8:	2115      	movs	r1, #21
 80019fa:	4854      	ldr	r0, [pc, #336]	; (8001b4c <fsm_thread_mainLoop+0x15c>)
 80019fc:	f7ff ffe4 	bl	80019c8 <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 8001a00:	4953      	ldr	r1, [pc, #332]	; (8001b50 <fsm_thread_mainLoop+0x160>)
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe ff5c 	bl	80008c0 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 8001a08:	4952      	ldr	r1, [pc, #328]	; (8001b54 <fsm_thread_mainLoop+0x164>)
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe ff0c 	bl	8000828 <fsm_reset>
	//fsm_changeState(fsm, &debugState, "Forcing debug state");
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8001a10:	e02c      	b.n	8001a6c <fsm_thread_mainLoop+0x7c>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	331c      	adds	r3, #28
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	484e      	ldr	r0, [pc, #312]	; (8001b58 <fsm_thread_mainLoop+0x168>)
 8001a20:	f001 f8fb 	bl	8002c1a <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8001a24:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <fsm_thread_mainLoop+0x16c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001a2a:	f107 010c 	add.w	r1, r7, #12
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2200      	movs	r2, #0
 8001a32:	f004 f829 	bl	8005a88 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8001a36:	f000 fa87 	bl	8001f48 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <fsm_thread_mainLoop+0x16c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a46      	ldr	r2, [pc, #280]	; (8001b60 <fsm_thread_mainLoop+0x170>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	099a      	lsrs	r2, r3, #6
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001a52:	4944      	ldr	r1, [pc, #272]	; (8001b64 <fsm_thread_mainLoop+0x174>)
 8001a54:	f007 faf0 	bl	8009038 <siprintf>
 8001a58:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			CC_LogInfo(x, len);
 8001a5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ffae 	bl	80019c8 <CC_LogInfo>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	483a      	ldr	r0, [pc, #232]	; (8001b58 <fsm_thread_mainLoop+0x168>)
 8001a70:	f001 f9e5 	bl	8002e3e <HAL_CAN_GetRxFifoFillLevel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1cb      	bne.n	8001a12 <fsm_thread_mainLoop+0x22>
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8001a7a:	e024      	b.n	8001ac6 <fsm_thread_mainLoop+0xd6>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	331c      	adds	r3, #28
 8001a82:	f107 020c 	add.w	r2, r7, #12
 8001a86:	2100      	movs	r1, #0
 8001a88:	4837      	ldr	r0, [pc, #220]	; (8001b68 <fsm_thread_mainLoop+0x178>)
 8001a8a:	f001 f8c6 	bl	8002c1a <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8001a8e:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <fsm_thread_mainLoop+0x16c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001a94:	f107 010c 	add.w	r1, r7, #12
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f003 fff4 	bl	8005a88 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8001aa0:	f000 fa52 	bl	8001f48 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <fsm_thread_mainLoop+0x16c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	4a2c      	ldr	r2, [pc, #176]	; (8001b60 <fsm_thread_mainLoop+0x170>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	099a      	lsrs	r2, r3, #6
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001abc:	492b      	ldr	r1, [pc, #172]	; (8001b6c <fsm_thread_mainLoop+0x17c>)
 8001abe:	f007 fabb 	bl	8009038 <siprintf>
 8001ac2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4827      	ldr	r0, [pc, #156]	; (8001b68 <fsm_thread_mainLoop+0x178>)
 8001aca:	f001 f9b8 	bl	8002e3e <HAL_CAN_GetRxFifoFillLevel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1d3      	bne.n	8001a7c <fsm_thread_mainLoop+0x8c>
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8001ad4:	e02c      	b.n	8001b30 <fsm_thread_mainLoop+0x140>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	331c      	adds	r3, #28
 8001adc:	f107 020c 	add.w	r2, r7, #12
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4823      	ldr	r0, [pc, #140]	; (8001b70 <fsm_thread_mainLoop+0x180>)
 8001ae4:	f001 f899 	bl	8002c1a <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <fsm_thread_mainLoop+0x16c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001aee:	f107 010c 	add.w	r1, r7, #12
 8001af2:	2300      	movs	r3, #0
 8001af4:	2200      	movs	r2, #0
 8001af6:	f003 ffc7 	bl	8005a88 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8001afa:	f000 fa25 	bl	8001f48 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <fsm_thread_mainLoop+0x16c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <fsm_thread_mainLoop+0x170>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	099a      	lsrs	r2, r3, #6
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001b16:	4917      	ldr	r1, [pc, #92]	; (8001b74 <fsm_thread_mainLoop+0x184>)
 8001b18:	f007 fa8e 	bl	8009038 <siprintf>
 8001b1c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			CC_LogInfo(x, len);
 8001b20:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001b24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff4c 	bl	80019c8 <CC_LogInfo>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8001b30:	2100      	movs	r1, #0
 8001b32:	480f      	ldr	r0, [pc, #60]	; (8001b70 <fsm_thread_mainLoop+0x180>)
 8001b34:	f001 f983 	bl	8002e3e <HAL_CAN_GetRxFifoFillLevel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1cb      	bne.n	8001ad6 <fsm_thread_mainLoop+0xe6>
		}

		osDelay(20);
 8001b3e:	2014      	movs	r0, #20
 8001b40:	f003 fd92 	bl	8005668 <osDelay>
		fsm_iterate(fsm);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe fe01 	bl	800074c <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8001b4a:	e78f      	b.n	8001a6c <fsm_thread_mainLoop+0x7c>
 8001b4c:	0800984c 	.word	0x0800984c
 8001b50:	080019c9 	.word	0x080019c9
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20004a7c 	.word	0x20004a7c
 8001b5c:	200049e0 	.word	0x200049e0
 8001b60:	10624dd3 	.word	0x10624dd3
 8001b64:	08009864 	.word	0x08009864
 8001b68:	20004a54 	.word	0x20004a54
 8001b6c:	0800988c 	.word	0x0800988c
 8001b70:	20004a2c 	.word	0x20004a2c
 8001b74:	080098b4 	.word	0x080098b4

08001b78 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001b8a:	f000 f9c9 	bl	8001f20 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40001400 	.word	0x40001400

08001b9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_MspInit+0x44>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_MspInit+0x44>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_MspInit+0x44>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_MspInit+0x44>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_MspInit+0x44>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_MspInit+0x44>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	; 0x30
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	2037      	movs	r0, #55	; 0x37
 8001c0a:	f001 f9f9 	bl	8003000 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c0e:	2037      	movs	r0, #55	; 0x37
 8001c10:	f001 fa12 	bl	8003038 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_InitTick+0x9c>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_InitTick+0x9c>)
 8001c1a:	f043 0320 	orr.w	r3, r3, #32
 8001c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_InitTick+0x9c>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c2c:	f107 0210 	add.w	r2, r7, #16
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 f88c 	bl	8003d54 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c3c:	f002 f862 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8001c40:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_InitTick+0xa0>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9b      	lsrs	r3, r3, #18
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <HAL_InitTick+0xa8>)
 8001c54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c5c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001c70:	4809      	ldr	r0, [pc, #36]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c72:	f002 fc8f 	bl	8004594 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001c7c:	4806      	ldr	r0, [pc, #24]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c7e:	f002 fcbf 	bl	8004600 <HAL_TIM_Base_Start_IT>
 8001c82:	4603      	mov	r3, r0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3730      	adds	r7, #48	; 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	431bde83 	.word	0x431bde83
 8001c98:	20004aa8 	.word	0x20004aa8
 8001c9c:	40001400 	.word	0x40001400

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8001cd4:	b598      	push	{r3, r4, r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 8001cd8:	f000 f936 	bl	8001f48 <HAL_GetTick>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <EXTI15_10_IRQHandler+0x48>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <EXTI15_10_IRQHandler+0x48>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	1a8a      	subs	r2, r1, r2
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
	CC_GlobalState->rtdTicks = HAL_GetTick();
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <EXTI15_10_IRQHandler+0x48>)
 8001cee:	681c      	ldr	r4, [r3, #0]
 8001cf0:	f000 f92a 	bl	8001f48 <HAL_GetTick>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	63e3      	str	r3, [r4, #60]	; 0x3c
	if(CC_GlobalState->rtdTicksSpan > 10)
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <EXTI15_10_IRQHandler+0x48>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d905      	bls.n	8001d0e <EXTI15_10_IRQHandler+0x3a>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <EXTI15_10_IRQHandler+0x48>)
 8001d04:	681c      	ldr	r4, [r3, #0]
 8001d06:	f000 f91f 	bl	8001f48 <HAL_GetTick>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6463      	str	r3, [r4, #68]	; 0x44
	}
	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001d0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d12:	f001 fb7b 	bl	800340c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd98      	pop	{r3, r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200049e0 	.word	0x200049e0

08001d20 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <TIM7_IRQHandler+0x10>)
 8001d26:	f002 fc95 	bl	8004654 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20004aa8 	.word	0x20004aa8

08001d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <_sbrk+0x5c>)
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <_sbrk+0x60>)
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <_sbrk+0x64>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <_sbrk+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d207      	bcs.n	8001d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d64:	f007 f86a 	bl	8008e3c <__errno>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d72:	e009      	b.n	8001d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_sbrk+0x64>)
 8001d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20080000 	.word	0x20080000
 8001d94:	00000400 	.word	0x00000400
 8001d98:	200000cc 	.word	0x200000cc
 8001d9c:	20004bb0 	.word	0x20004bb0

08001da0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <SystemInit+0x28>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <SystemInit+0x28>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <SystemInit+0x28>)
 8001db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dba:	609a      	str	r2, [r3, #8]
#endif
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <MX_USART3_UART_Init+0x5c>)
 8001dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001df2:	220c      	movs	r2, #12
 8001df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USART3_UART_Init+0x58>)
 8001e10:	f002 fe26 	bl	8004a60 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e1a:	f7ff febf 	bl	8001b9c <Error_Handler>
  }

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20004ae8 	.word	0x20004ae8
 8001e28:	40004800 	.word	0x40004800

08001e2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_UART_MspInit+0x7c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d128      	bne.n	8001ea0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e90:	2307      	movs	r3, #7
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_UART_MspInit+0x84>)
 8001e9c:	f001 f8da 	bl	8003054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40004800 	.word	0x40004800
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001eb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eba:	e003      	b.n	8001ec4 <LoopCopyDataInit>

08001ebc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ebe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ec0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ec2:	3104      	adds	r1, #4

08001ec4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ec8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ecc:	d3f6      	bcc.n	8001ebc <CopyDataInit>
  ldr  r2, =_sbss
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ed0:	e002      	b.n	8001ed8 <LoopFillZerobss>

08001ed2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ed2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ed4:	f842 3b04 	str.w	r3, [r2], #4

08001ed8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001edc:	d3f9      	bcc.n	8001ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ede:	f7ff ff5f 	bl	8001da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f006 ffb1 	bl	8008e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7ff fc51 	bl	800178c <main>
  bx  lr    
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001ef0:	08009998 	.word	0x08009998
  ldr  r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ef8:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8001efc:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8001f00:	20004bb0 	.word	0x20004bb0

08001f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC_IRQHandler>

08001f06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f001 f86d 	bl	8002fea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fe6f 	bl	8001bf4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f16:	f7ff fe49 	bl	8001bac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x20>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_IncTick+0x24>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <HAL_IncTick+0x24>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000038 	.word	0x20000038
 8001f44:	20004b68 	.word	0x20004b68

08001f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_GetTick+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20004b68 	.word	0x20004b68

08001f60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e031      	b.n	8001fda <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff f98a 	bl	8001298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_ADC_Init+0x84>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	f043 0202 	orr.w	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fa32 	bl	8002418 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001fca:	e001      	b.n	8001fd0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	ffffeefd 	.word	0xffffeefd

08001fe8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_Start+0x1a>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e0a0      	b.n	8002144 <HAL_ADC_Start+0x15c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d018      	beq.n	800204a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002028:	4b49      	ldr	r3, [pc, #292]	; (8002150 <HAL_ADC_Start+0x168>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a49      	ldr	r2, [pc, #292]	; (8002154 <HAL_ADC_Start+0x16c>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0c9a      	lsrs	r2, r3, #18
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800203c:	e002      	b.n	8002044 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b01      	subs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f9      	bne.n	800203e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d174      	bne.n	8002142 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205c:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_ADC_Start+0x170>)
 800205e:	4013      	ands	r3, r2
 8002060:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800207e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002092:	d106      	bne.n	80020a2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	f023 0206 	bic.w	r2, r3, #6
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	645a      	str	r2, [r3, #68]	; 0x44
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020b8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <HAL_ADC_Start+0x174>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d136      	bne.n	8002142 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	e02d      	b.n	8002142 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_ADC_Start+0x178>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d10e      	bne.n	800210e <HAL_ADC_Start+0x126>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800210c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_ADC_Start+0x174>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d113      	bne.n	8002142 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_ADC_Start+0x17c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d10e      	bne.n	8002142 <HAL_ADC_Start+0x15a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002140:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	20000030 	.word	0x20000030
 8002154:	431bde83 	.word	0x431bde83
 8002158:	fffff8fe 	.word	0xfffff8fe
 800215c:	40012300 	.word	0x40012300
 8002160:	40012000 	.word	0x40012000
 8002164:	40012200 	.word	0x40012200

08002168 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1c>
 800219c:	2302      	movs	r3, #2
 800219e:	e12a      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x272>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d93a      	bls.n	8002226 <HAL_ADC_ConfigChannel+0xa2>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021b8:	d035      	beq.n	8002226 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68d9      	ldr	r1, [r3, #12]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	3b1e      	subs	r3, #30
 80021d0:	2207      	movs	r2, #7
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a87      	ldr	r2, [pc, #540]	; (8002404 <HAL_ADC_ConfigChannel+0x280>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10a      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68d9      	ldr	r1, [r3, #12]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	061a      	lsls	r2, r3, #24
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fe:	e035      	b.n	800226c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68d9      	ldr	r1, [r3, #12]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	4603      	mov	r3, r0
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4403      	add	r3, r0
 8002218:	3b1e      	subs	r3, #30
 800221a:	409a      	lsls	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002224:	e022      	b.n	800226c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6919      	ldr	r1, [r3, #16]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	2207      	movs	r2, #7
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43da      	mvns	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	400a      	ands	r2, r1
 8002248:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6919      	ldr	r1, [r3, #16]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	4603      	mov	r3, r0
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4403      	add	r3, r0
 8002262:	409a      	lsls	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b06      	cmp	r3, #6
 8002272:	d824      	bhi.n	80022be <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	3b05      	subs	r3, #5
 8002286:	221f      	movs	r2, #31
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43da      	mvns	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	400a      	ands	r2, r1
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	3b05      	subs	r3, #5
 80022b0:	fa00 f203 	lsl.w	r2, r0, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34
 80022bc:	e04c      	b.n	8002358 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d824      	bhi.n	8002310 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	3b23      	subs	r3, #35	; 0x23
 80022d8:	221f      	movs	r2, #31
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	400a      	ands	r2, r1
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	4618      	mov	r0, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	3b23      	subs	r3, #35	; 0x23
 8002302:	fa00 f203 	lsl.w	r2, r0, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
 800230e:	e023      	b.n	8002358 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	3b41      	subs	r3, #65	; 0x41
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43da      	mvns	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	400a      	ands	r2, r1
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b41      	subs	r3, #65	; 0x41
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <HAL_ADC_ConfigChannel+0x284>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10a      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1f4>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800236a:	d105      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_ADC_ConfigChannel+0x288>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <HAL_ADC_ConfigChannel+0x288>)
 8002372:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002376:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <HAL_ADC_ConfigChannel+0x284>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d109      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x212>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b12      	cmp	r3, #18
 8002388:	d105      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_ADC_ConfigChannel+0x288>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_ADC_ConfigChannel+0x288>)
 8002390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002394:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <HAL_ADC_ConfigChannel+0x284>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d125      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x268>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_ADC_ConfigChannel+0x280>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x22e>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b11      	cmp	r3, #17
 80023b0:	d11c      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_ADC_ConfigChannel+0x288>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <HAL_ADC_ConfigChannel+0x288>)
 80023b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a10      	ldr	r2, [pc, #64]	; (8002404 <HAL_ADC_ConfigChannel+0x280>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d111      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_ADC_ConfigChannel+0x28c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a11      	ldr	r2, [pc, #68]	; (8002414 <HAL_ADC_ConfigChannel+0x290>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0c9a      	lsrs	r2, r3, #18
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023de:	e002      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f9      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	10000012 	.word	0x10000012
 8002408:	40012000 	.word	0x40012000
 800240c:	40012300 	.word	0x40012300
 8002410:	20000030 	.word	0x20000030
 8002414:	431bde83 	.word	0x431bde83

08002418 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002420:	4b78      	ldr	r3, [pc, #480]	; (8002604 <ADC_Init+0x1ec>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a77      	ldr	r2, [pc, #476]	; (8002604 <ADC_Init+0x1ec>)
 8002426:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800242a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800242c:	4b75      	ldr	r3, [pc, #468]	; (8002604 <ADC_Init+0x1ec>)
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4973      	ldr	r1, [pc, #460]	; (8002604 <ADC_Init+0x1ec>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	021a      	lsls	r2, r3, #8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800246c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	4a58      	ldr	r2, [pc, #352]	; (8002608 <ADC_Init+0x1f0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d022      	beq.n	80024f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6899      	ldr	r1, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	e00f      	b.n	8002512 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002510:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0202 	bic.w	r2, r2, #2
 8002520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6899      	ldr	r1, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	005a      	lsls	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800255e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	3b01      	subs	r3, #1
 800256c:	035a      	lsls	r2, r3, #13
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	e007      	b.n	8002588 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002586:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	051a      	lsls	r2, r3, #20
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6899      	ldr	r1, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ca:	025a      	lsls	r2, r3, #9
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	029a      	lsls	r2, r3, #10
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40012300 	.word	0x40012300
 8002608:	0f000001 	.word	0x0f000001

0800260c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0ed      	b.n	80027fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe ff12 	bl	8001454 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0202 	bic.w	r2, r2, #2
 800263e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002640:	f7ff fc82 	bl	8001f48 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002646:	e012      	b.n	800266e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002648:	f7ff fc7e 	bl	8001f48 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b0a      	cmp	r3, #10
 8002654:	d90b      	bls.n	800266e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2205      	movs	r2, #5
 8002666:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0c5      	b.n	80027fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e5      	bne.n	8002648 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268c:	f7ff fc5c 	bl	8001f48 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002692:	e012      	b.n	80026ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002694:	f7ff fc58 	bl	8001f48 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b0a      	cmp	r3, #10
 80026a0:	d90b      	bls.n	80026ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2205      	movs	r2, #5
 80026b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e09f      	b.n	80027fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0e5      	beq.n	8002694 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7e1b      	ldrb	r3, [r3, #24]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d108      	bne.n	80026e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e007      	b.n	80026f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7e5b      	ldrb	r3, [r3, #25]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d108      	bne.n	800270c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e007      	b.n	800271c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7e9b      	ldrb	r3, [r3, #26]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d108      	bne.n	8002736 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0220 	orr.w	r2, r2, #32
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e007      	b.n	8002746 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0220 	bic.w	r2, r2, #32
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7edb      	ldrb	r3, [r3, #27]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d108      	bne.n	8002760 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0210 	bic.w	r2, r2, #16
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e007      	b.n	8002770 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0210 	orr.w	r2, r2, #16
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7f1b      	ldrb	r3, [r3, #28]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d108      	bne.n	800278a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0208 	orr.w	r2, r2, #8
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e007      	b.n	800279a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0208 	bic.w	r2, r2, #8
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7f5b      	ldrb	r3, [r3, #29]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d108      	bne.n	80027b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0204 	orr.w	r2, r2, #4
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e007      	b.n	80027c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0204 	bic.w	r2, r2, #4
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	ea42 0103 	orr.w	r1, r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d003      	beq.n	800282a <HAL_CAN_ConfigFilter+0x26>
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b02      	cmp	r3, #2
 8002826:	f040 80c7 	bne.w	80029b8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a69      	ldr	r2, [pc, #420]	; (80029d4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d001      	beq.n	8002838 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002834:	4b68      	ldr	r3, [pc, #416]	; (80029d8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002836:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	4a63      	ldr	r2, [pc, #396]	; (80029d8 <HAL_CAN_ConfigFilter+0x1d4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d111      	bne.n	8002874 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002856:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	431a      	orrs	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2201      	movs	r2, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d123      	bne.n	80028e6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3248      	adds	r2, #72	; 0x48
 80028c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028dc:	6979      	ldr	r1, [r7, #20]
 80028de:	3348      	adds	r3, #72	; 0x48
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d122      	bne.n	8002934 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800290e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3248      	adds	r2, #72	; 0x48
 8002914:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002928:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800292a:	6979      	ldr	r1, [r7, #20]
 800292c:	3348      	adds	r3, #72	; 0x48
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43db      	mvns	r3, r3
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800294e:	e007      	b.n	8002960 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	431a      	orrs	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800297a:	e007      	b.n	800298c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	431a      	orrs	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	431a      	orrs	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029aa:	f023 0201 	bic.w	r2, r3, #1
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e006      	b.n	80029c6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40003400 	.word	0x40003400
 80029d8:	40006400 	.word	0x40006400

080029dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d12e      	bne.n	8002a4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a08:	f7ff fa9e 	bl	8001f48 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a0e:	e012      	b.n	8002a36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a10:	f7ff fa9a 	bl	8001f48 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b0a      	cmp	r3, #10
 8002a1c:	d90b      	bls.n	8002a36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e012      	b.n	8002a5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e006      	b.n	8002a5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a78:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a82:	7ffb      	ldrb	r3, [r7, #31]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d003      	beq.n	8002a90 <HAL_CAN_AddTxMessage+0x2c>
 8002a88:	7ffb      	ldrb	r3, [r7, #31]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	f040 80b8 	bne.w	8002c00 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a0 	beq.w	8002bf0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	0e1b      	lsrs	r3, r3, #24
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d907      	bls.n	8002ad0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e09e      	b.n	8002c0e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10d      	bne.n	8002afe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	6809      	ldr	r1, [r1, #0]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3318      	adds	r3, #24
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	440b      	add	r3, r1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e00f      	b.n	8002b1e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b08:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b12:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3318      	adds	r3, #24
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	440b      	add	r3, r1
 8002b1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3318      	adds	r3, #24
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3304      	adds	r3, #4
 8002b30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	7d1b      	ldrb	r3, [r3, #20]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d111      	bne.n	8002b5e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3318      	adds	r3, #24
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	6811      	ldr	r1, [r2, #0]
 8002b4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3318      	adds	r3, #24
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	440b      	add	r3, r1
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3307      	adds	r3, #7
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	061a      	lsls	r2, r3, #24
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3306      	adds	r3, #6
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3305      	adds	r3, #5
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	3204      	adds	r2, #4
 8002b7e:	7812      	ldrb	r2, [r2, #0]
 8002b80:	4610      	mov	r0, r2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6811      	ldr	r1, [r2, #0]
 8002b86:	ea43 0200 	orr.w	r2, r3, r0
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3303      	adds	r3, #3
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	061a      	lsls	r2, r3, #24
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	6811      	ldr	r1, [r2, #0]
 8002bbc:	ea43 0200 	orr.w	r2, r3, r0
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002bca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	6811      	ldr	r1, [r2, #0]
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3318      	adds	r3, #24
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	440b      	add	r3, r1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e00e      	b.n	8002c0e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e006      	b.n	8002c0e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d003      	beq.n	8002c3e <HAL_CAN_GetRxMessage+0x24>
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	f040 80f3 	bne.w	8002e24 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10e      	bne.n	8002c62 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d116      	bne.n	8002c80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0e7      	b.n	8002e32 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0d8      	b.n	8002e32 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	331b      	adds	r3, #27
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0204 	and.w	r2, r3, #4
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	331b      	adds	r3, #27
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	4413      	add	r3, r2
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0d5b      	lsrs	r3, r3, #21
 8002cae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	331b      	adds	r3, #27
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	4413      	add	r3, r2
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	08db      	lsrs	r3, r3, #3
 8002cc8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	331b      	adds	r3, #27
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	4413      	add	r3, r2
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0202 	and.w	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	331b      	adds	r3, #27
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	331b      	adds	r3, #27
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	331b      	adds	r3, #27
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4413      	add	r3, r2
 8002d22:	3304      	adds	r3, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0a1a      	lsrs	r2, r3, #8
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0c1a      	lsrs	r2, r3, #16
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	3302      	adds	r3, #2
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e1a      	lsrs	r2, r3, #24
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	3303      	adds	r3, #3
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	3304      	adds	r3, #4
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0a1a      	lsrs	r2, r3, #8
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	3305      	adds	r3, #5
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0c1a      	lsrs	r2, r3, #16
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3306      	adds	r3, #6
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	0e1a      	lsrs	r2, r3, #24
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	3307      	adds	r3, #7
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0220 	orr.w	r2, r2, #32
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	e007      	b.n	8002e20 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e006      	b.n	8002e32 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e52:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e54:	7afb      	ldrb	r3, [r7, #11]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d002      	beq.n	8002e60 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d10f      	bne.n	8002e80 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e005      	b.n	8002e80 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002e80:	68fb      	ldr	r3, [r7, #12]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eac:	4013      	ands	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	60d3      	str	r3, [r2, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00
 8002ed4:	05fa0000 	.word	0x05fa0000

08002ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	f003 0307 	and.w	r3, r3, #7
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db0b      	blt.n	8002f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4907      	ldr	r1, [pc, #28]	; (8002f2c <__NVIC_EnableIRQ+0x38>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2001      	movs	r0, #1
 8002f16:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000e100 	.word	0xe000e100

08002f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	db0a      	blt.n	8002f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	490c      	ldr	r1, [pc, #48]	; (8002f7c <__NVIC_SetPriority+0x4c>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	440b      	add	r3, r1
 8002f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f58:	e00a      	b.n	8002f70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4908      	ldr	r1, [pc, #32]	; (8002f80 <__NVIC_SetPriority+0x50>)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	3b04      	subs	r3, #4
 8002f68:	0112      	lsls	r2, r2, #4
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	761a      	strb	r2, [r3, #24]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000e100 	.word	0xe000e100
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f1c3 0307 	rsb	r3, r3, #7
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	bf28      	it	cs
 8002fa2:	2304      	movcs	r3, #4
 8002fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d902      	bls.n	8002fb4 <NVIC_EncodePriority+0x30>
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3b03      	subs	r3, #3
 8002fb2:	e000      	b.n	8002fb6 <NVIC_EncodePriority+0x32>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43d9      	mvns	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	4313      	orrs	r3, r2
         );
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ff4c 	bl	8002e90 <__NVIC_SetPriorityGrouping>
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003012:	f7ff ff61 	bl	8002ed8 <__NVIC_GetPriorityGrouping>
 8003016:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	6978      	ldr	r0, [r7, #20]
 800301e:	f7ff ffb1 	bl	8002f84 <NVIC_EncodePriority>
 8003022:	4602      	mov	r2, r0
 8003024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff80 	bl	8002f30 <__NVIC_SetPriority>
}
 8003030:	bf00      	nop
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff54 	bl	8002ef4 <__NVIC_EnableIRQ>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e175      	b.n	8003360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	f040 8164 	bne.w	800335a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d00b      	beq.n	80030b2 <HAL_GPIO_Init+0x5e>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030a6:	2b11      	cmp	r3, #17
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b12      	cmp	r3, #18
 80030b0:	d130      	bne.n	8003114 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2203      	movs	r2, #3
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 0201 	and.w	r2, r3, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x100>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b12      	cmp	r3, #18
 8003152:	d123      	bne.n	800319c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	08da      	lsrs	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3208      	adds	r2, #8
 800315c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	220f      	movs	r2, #15
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	08da      	lsrs	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3208      	adds	r2, #8
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0203 	and.w	r2, r3, #3
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80be 	beq.w	800335a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031de:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a64      	ldr	r2, [pc, #400]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b62      	ldr	r3, [pc, #392]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031f6:	4a60      	ldr	r2, [pc, #384]	; (8003378 <HAL_GPIO_Init+0x324>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_GPIO_Init+0x328>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d037      	beq.n	8003292 <HAL_GPIO_Init+0x23e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_GPIO_Init+0x32c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d031      	beq.n	800328e <HAL_GPIO_Init+0x23a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a55      	ldr	r2, [pc, #340]	; (8003384 <HAL_GPIO_Init+0x330>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d02b      	beq.n	800328a <HAL_GPIO_Init+0x236>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a54      	ldr	r2, [pc, #336]	; (8003388 <HAL_GPIO_Init+0x334>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d025      	beq.n	8003286 <HAL_GPIO_Init+0x232>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a53      	ldr	r2, [pc, #332]	; (800338c <HAL_GPIO_Init+0x338>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01f      	beq.n	8003282 <HAL_GPIO_Init+0x22e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_GPIO_Init+0x33c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d019      	beq.n	800327e <HAL_GPIO_Init+0x22a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a51      	ldr	r2, [pc, #324]	; (8003394 <HAL_GPIO_Init+0x340>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_GPIO_Init+0x226>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a50      	ldr	r2, [pc, #320]	; (8003398 <HAL_GPIO_Init+0x344>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00d      	beq.n	8003276 <HAL_GPIO_Init+0x222>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4f      	ldr	r2, [pc, #316]	; (800339c <HAL_GPIO_Init+0x348>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <HAL_GPIO_Init+0x21e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4e      	ldr	r2, [pc, #312]	; (80033a0 <HAL_GPIO_Init+0x34c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_GPIO_Init+0x21a>
 800326a:	2309      	movs	r3, #9
 800326c:	e012      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800326e:	230a      	movs	r3, #10
 8003270:	e010      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003272:	2308      	movs	r3, #8
 8003274:	e00e      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003276:	2307      	movs	r3, #7
 8003278:	e00c      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800327a:	2306      	movs	r3, #6
 800327c:	e00a      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800327e:	2305      	movs	r3, #5
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003282:	2304      	movs	r3, #4
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003292:	2300      	movs	r3, #0
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032a4:	4934      	ldr	r1, [pc, #208]	; (8003378 <HAL_GPIO_Init+0x324>)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b2:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d6:	4a33      	ldr	r2, [pc, #204]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003300:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332a:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <HAL_GPIO_Init+0x350>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	f67f ae86 	bls.w	8003074 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3724      	adds	r7, #36	; 0x24
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40023800 	.word	0x40023800
 8003378:	40013800 	.word	0x40013800
 800337c:	40020000 	.word	0x40020000
 8003380:	40020400 	.word	0x40020400
 8003384:	40020800 	.word	0x40020800
 8003388:	40020c00 	.word	0x40020c00
 800338c:	40021000 	.word	0x40021000
 8003390:	40021400 	.word	0x40021400
 8003394:	40021800 	.word	0x40021800
 8003398:	40021c00 	.word	0x40021c00
 800339c:	40022000 	.word	0x40022000
 80033a0:	40022400 	.word	0x40022400
 80033a4:	40013c00 	.word	0x40013c00

080033a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e001      	b.n	80033ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033f4:	e003      	b.n	80033fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003422:	4a05      	ldr	r2, [pc, #20]	; (8003438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f806 	bl	800343c <HAL_GPIO_EXTI_Callback>
  }
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e29b      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8087 	beq.w	8003586 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003478:	4b96      	ldr	r3, [pc, #600]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b04      	cmp	r3, #4
 8003482:	d00c      	beq.n	800349e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003484:	4b93      	ldr	r3, [pc, #588]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d112      	bne.n	80034b6 <HAL_RCC_OscConfig+0x62>
 8003490:	4b90      	ldr	r3, [pc, #576]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349c:	d10b      	bne.n	80034b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	4b8d      	ldr	r3, [pc, #564]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d06c      	beq.n	8003584 <HAL_RCC_OscConfig+0x130>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d168      	bne.n	8003584 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e275      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x7a>
 80034c0:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a83      	ldr	r2, [pc, #524]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e02e      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x9c>
 80034d6:	4b7f      	ldr	r3, [pc, #508]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7e      	ldr	r2, [pc, #504]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b7c      	ldr	r3, [pc, #496]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7b      	ldr	r2, [pc, #492]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0xc0>
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b73      	ldr	r3, [pc, #460]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a72      	ldr	r2, [pc, #456]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6b      	ldr	r2, [pc, #428]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fd08 	bl	8001f48 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe fd04 	bl	8001f48 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e229      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xe8>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fcf4 	bl	8001f48 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe fcf0 	bl	8001f48 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e215      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b57      	ldr	r3, [pc, #348]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x110>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d069      	beq.n	8003666 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003592:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b4d      	ldr	r3, [pc, #308]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x190>
 80035aa:	4b4a      	ldr	r3, [pc, #296]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x17a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1e9      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	493d      	ldr	r1, [pc, #244]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	e040      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a38      	ldr	r2, [pc, #224]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe fca6 	bl	8001f48 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003600:	f7fe fca2 	bl	8001f48 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1c7      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4929      	ldr	r1, [pc, #164]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fc82 	bl	8001f48 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003648:	f7fe fc7e 	bl	8001f48 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1a3      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d038      	beq.n	80036e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe fc5f 	bl	8001f48 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fe fc5b 	bl	8001f48 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e180      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x23a>
 80036ac:	e01a      	b.n	80036e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe fc45 	bl	8001f48 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c2:	f7fe fc41 	bl	8001f48 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d903      	bls.n	80036d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e166      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
 80036d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	4b92      	ldr	r3, [pc, #584]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ee      	bne.n	80036c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a4 	beq.w	800383a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4b8c      	ldr	r3, [pc, #560]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b89      	ldr	r3, [pc, #548]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4a88      	ldr	r2, [pc, #544]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6413      	str	r3, [r2, #64]	; 0x40
 800370a:	4b86      	ldr	r3, [pc, #536]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371a:	4b83      	ldr	r3, [pc, #524]	; (8003928 <HAL_RCC_OscConfig+0x4d4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d118      	bne.n	8003758 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003726:	4b80      	ldr	r3, [pc, #512]	; (8003928 <HAL_RCC_OscConfig+0x4d4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7f      	ldr	r2, [pc, #508]	; (8003928 <HAL_RCC_OscConfig+0x4d4>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003732:	f7fe fc09 	bl	8001f48 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373a:	f7fe fc05 	bl	8001f48 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b64      	cmp	r3, #100	; 0x64
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e12a      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374c:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x4d4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x31a>
 8003760:	4b70      	ldr	r3, [pc, #448]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a6f      	ldr	r2, [pc, #444]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	e02d      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0x33c>
 8003776:	4b6b      	ldr	r3, [pc, #428]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4a6a      	ldr	r2, [pc, #424]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6713      	str	r3, [r2, #112]	; 0x70
 8003782:	4b68      	ldr	r3, [pc, #416]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	4a67      	ldr	r2, [pc, #412]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	6713      	str	r3, [r2, #112]	; 0x70
 800378e:	e01c      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d10c      	bne.n	80037b2 <HAL_RCC_OscConfig+0x35e>
 8003798:	4b62      	ldr	r3, [pc, #392]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	4a61      	ldr	r2, [pc, #388]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	6713      	str	r3, [r2, #112]	; 0x70
 80037a4:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a5e      	ldr	r2, [pc, #376]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	e00b      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 80037b2:	4b5c      	ldr	r3, [pc, #368]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a5b      	ldr	r2, [pc, #364]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	f023 0304 	bic.w	r3, r3, #4
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d015      	beq.n	80037fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe fbb9 	bl	8001f48 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fe fbb5 	bl	8001f48 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0d8      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	4b4c      	ldr	r3, [pc, #304]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ee      	beq.n	80037da <HAL_RCC_OscConfig+0x386>
 80037fc:	e014      	b.n	8003828 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fe fba3 	bl	8001f48 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe fb9f 	bl	8001f48 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0c2      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ee      	bne.n	8003806 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d105      	bne.n	800383a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003838:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80ae 	beq.w	80039a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003844:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d06d      	beq.n	800392c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d14b      	bne.n	80038f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003858:	4b32      	ldr	r3, [pc, #200]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a31      	ldr	r2, [pc, #196]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe fb70 	bl	8001f48 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe fb6c 	bl	8001f48 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e091      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	019b      	lsls	r3, r3, #6
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	3b01      	subs	r3, #1
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	071b      	lsls	r3, r3, #28
 80038b6:	491b      	ldr	r1, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a18      	ldr	r2, [pc, #96]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe fb3e 	bl	8001f48 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fe fb3a 	bl	8001f48 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e05f      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x47c>
 80038ee:	e057      	b.n	80039a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fe fb24 	bl	8001f48 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fe fb20 	bl	8001f48 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e045      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x4b0>
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x54c>
 8003924:	40023800 	.word	0x40023800
 8003928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800392c:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <HAL_RCC_OscConfig+0x558>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d030      	beq.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d129      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d122      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003962:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003964:	4293      	cmp	r3, r2
 8003966:	d119      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	3b01      	subs	r3, #1
 8003976:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d10f      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0d0      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 020f 	bic.w	r2, r3, #15
 80039de:	4965      	ldr	r1, [pc, #404]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a10:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a28:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	494d      	ldr	r1, [pc, #308]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d040      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d115      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e073      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e06b      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f023 0203 	bic.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4936      	ldr	r1, [pc, #216]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa4:	f7fe fa50 	bl	8001f48 <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fe fa4c 	bl	8001f48 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e053      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 020c 	and.w	r2, r3, #12
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d1eb      	bne.n	8003aac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d210      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 020f 	bic.w	r2, r3, #15
 8003aea:	4922      	ldr	r1, [pc, #136]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e032      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4916      	ldr	r1, [pc, #88]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	490e      	ldr	r1, [pc, #56]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b42:	f000 f821 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b46:	4601      	mov	r1, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_RCC_ClockConfig+0x1cc>)
 8003b54:	5cd3      	ldrb	r3, [r2, r3]
 8003b56:	fa21 f303 	lsr.w	r3, r1, r3
 8003b5a:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1d0>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1d4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe f846 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023c00 	.word	0x40023c00
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800993c 	.word	0x0800993c
 8003b80:	20000030 	.word	0x20000030
 8003b84:	20000034 	.word	0x20000034

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	2300      	movs	r3, #0
 8003b98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9e:	4b50      	ldr	r3, [pc, #320]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d007      	beq.n	8003bba <HAL_RCC_GetSysClockFreq+0x32>
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x38>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 808d 	bne.w	8003cce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003bb6:	60bb      	str	r3, [r7, #8]
      break;
 8003bb8:	e08c      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bba:	4b4b      	ldr	r3, [pc, #300]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bbc:	60bb      	str	r3, [r7, #8]
      break;
 8003bbe:	e089      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc0:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bca:	4b45      	ldr	r3, [pc, #276]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d023      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd6:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	099b      	lsrs	r3, r3, #6
 8003bdc:	f04f 0400 	mov.w	r4, #0
 8003be0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	ea03 0501 	and.w	r5, r3, r1
 8003bec:	ea04 0602 	and.w	r6, r4, r2
 8003bf0:	4a3d      	ldr	r2, [pc, #244]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bf2:	fb02 f106 	mul.w	r1, r2, r6
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	fb02 f205 	mul.w	r2, r2, r5
 8003bfc:	440a      	add	r2, r1
 8003bfe:	493a      	ldr	r1, [pc, #232]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c00:	fba5 0101 	umull	r0, r1, r5, r1
 8003c04:	1853      	adds	r3, r2, r1
 8003c06:	4619      	mov	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f04f 0400 	mov.w	r4, #0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4623      	mov	r3, r4
 8003c12:	f7fc fb65 	bl	80002e0 <__aeabi_uldivmod>
 8003c16:	4603      	mov	r3, r0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e049      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1e:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	099b      	lsrs	r3, r3, #6
 8003c24:	f04f 0400 	mov.w	r4, #0
 8003c28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	ea03 0501 	and.w	r5, r3, r1
 8003c34:	ea04 0602 	and.w	r6, r4, r2
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4632      	mov	r2, r6
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	f04f 0400 	mov.w	r4, #0
 8003c44:	0154      	lsls	r4, r2, #5
 8003c46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c4a:	014b      	lsls	r3, r1, #5
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4622      	mov	r2, r4
 8003c50:	1b49      	subs	r1, r1, r5
 8003c52:	eb62 0206 	sbc.w	r2, r2, r6
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	f04f 0400 	mov.w	r4, #0
 8003c5e:	0194      	lsls	r4, r2, #6
 8003c60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c64:	018b      	lsls	r3, r1, #6
 8003c66:	1a5b      	subs	r3, r3, r1
 8003c68:	eb64 0402 	sbc.w	r4, r4, r2
 8003c6c:	f04f 0100 	mov.w	r1, #0
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	00e2      	lsls	r2, r4, #3
 8003c76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c7a:	00d9      	lsls	r1, r3, #3
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4614      	mov	r4, r2
 8003c80:	195b      	adds	r3, r3, r5
 8003c82:	eb44 0406 	adc.w	r4, r4, r6
 8003c86:	f04f 0100 	mov.w	r1, #0
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	02a2      	lsls	r2, r4, #10
 8003c90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c94:	0299      	lsls	r1, r3, #10
 8003c96:	460b      	mov	r3, r1
 8003c98:	4614      	mov	r4, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f04f 0400 	mov.w	r4, #0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	f7fc fb1a 	bl	80002e0 <__aeabi_uldivmod>
 8003cac:	4603      	mov	r3, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	0c1b      	lsrs	r3, r3, #16
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	60bb      	str	r3, [r7, #8]
      break;
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003cd0:	60bb      	str	r3, [r7, #8]
      break;
 8003cd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	017d7840 	.word	0x017d7840

08003cec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000030 	.word	0x20000030

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d08:	f7ff fff0 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d0c:	4601      	mov	r1, r0
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	0a9b      	lsrs	r3, r3, #10
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4a03      	ldr	r2, [pc, #12]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40023800 	.word	0x40023800
 8003d28:	0800994c 	.word	0x0800994c

08003d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d30:	f7ff ffdc 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d34:	4601      	mov	r1, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	0b5b      	lsrs	r3, r3, #13
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4a03      	ldr	r2, [pc, #12]	; (8003d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
 8003d44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	0800994c 	.word	0x0800994c

08003d54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	220f      	movs	r2, #15
 8003d62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0203 	and.w	r2, r3, #3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	08db      	lsrs	r3, r3, #3
 8003d8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_RCC_GetClockConfig+0x60>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 020f 	and.w	r2, r3, #15
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	601a      	str	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40023c00 	.word	0x40023c00

08003db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003de0:	4b69      	ldr	r3, [pc, #420]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4a68      	ldr	r2, [pc, #416]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dea:	6093      	str	r3, [r2, #8]
 8003dec:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	4964      	ldr	r1, [pc, #400]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d017      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e12:	4b5d      	ldr	r3, [pc, #372]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	4959      	ldr	r1, [pc, #356]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e30:	d101      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d017      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e4e:	4b4e      	ldr	r3, [pc, #312]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	494a      	ldr	r1, [pc, #296]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 808b 	beq.w	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	4a39      	ldr	r2, [pc, #228]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea8:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003eb4:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a34      	ldr	r2, [pc, #208]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fe f842 	bl	8001f48 <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fe f83e 	bl	8001f48 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e356      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eda:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ee6:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d035      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d02e      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f04:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f26:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d114      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe f806 	bl	8001f48 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fe f802 	bl	8001f48 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e318      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0ee      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f6e:	d111      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f7c:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f7e:	400b      	ands	r3, r1
 8003f80:	4901      	ldr	r1, [pc, #4]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	0ffffcff 	.word	0x0ffffcff
 8003f94:	4bb1      	ldr	r3, [pc, #708]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4ab0      	ldr	r2, [pc, #704]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f9e:	6093      	str	r3, [r2, #8]
 8003fa0:	4bae      	ldr	r3, [pc, #696]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	49ab      	ldr	r1, [pc, #684]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d010      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fbe:	4ba7      	ldr	r3, [pc, #668]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc4:	4aa5      	ldr	r2, [pc, #660]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fce:	4ba3      	ldr	r3, [pc, #652]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	49a0      	ldr	r1, [pc, #640]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fec:	4b9b      	ldr	r3, [pc, #620]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ffa:	4998      	ldr	r1, [pc, #608]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800400e:	4b93      	ldr	r3, [pc, #588]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800401c:	498f      	ldr	r1, [pc, #572]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004030:	4b8a      	ldr	r3, [pc, #552]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	4987      	ldr	r1, [pc, #540]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004052:	4b82      	ldr	r3, [pc, #520]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	497e      	ldr	r1, [pc, #504]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004074:	4b79      	ldr	r3, [pc, #484]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	4976      	ldr	r1, [pc, #472]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004096:	4b71      	ldr	r3, [pc, #452]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f023 020c 	bic.w	r2, r3, #12
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a4:	496d      	ldr	r1, [pc, #436]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040b8:	4b68      	ldr	r3, [pc, #416]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	4965      	ldr	r1, [pc, #404]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040da:	4b60      	ldr	r3, [pc, #384]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	495c      	ldr	r1, [pc, #368]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040fc:	4b57      	ldr	r3, [pc, #348]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	4954      	ldr	r1, [pc, #336]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800411e:	4b4f      	ldr	r3, [pc, #316]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412c:	494b      	ldr	r1, [pc, #300]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004140:	4b46      	ldr	r3, [pc, #280]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414e:	4943      	ldr	r1, [pc, #268]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004162:	4b3e      	ldr	r3, [pc, #248]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004170:	493a      	ldr	r1, [pc, #232]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004184:	4b35      	ldr	r3, [pc, #212]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004192:	4932      	ldr	r1, [pc, #200]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d011      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041a6:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b4:	4929      	ldr	r1, [pc, #164]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041c4:	d101      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d6:	4b21      	ldr	r3, [pc, #132]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e4:	491d      	ldr	r1, [pc, #116]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041f8:	4b18      	ldr	r3, [pc, #96]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004208:	4914      	ldr	r1, [pc, #80]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422c:	490b      	ldr	r1, [pc, #44]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00f      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004246:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	4902      	ldr	r1, [pc, #8]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8004258:	e002      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800426c:	4b80      	ldr	r3, [pc, #512]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800426e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004272:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800427c:	497c      	ldr	r1, [pc, #496]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d005      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004292:	f040 80d6 	bne.w	8004442 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004296:	4b76      	ldr	r3, [pc, #472]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a75      	ldr	r2, [pc, #468]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800429c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a2:	f7fd fe51 	bl	8001f48 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042aa:	f7fd fe4d 	bl	8001f48 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b64      	cmp	r3, #100	; 0x64
 80042b6:	d901      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e165      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042bc:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d021      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d11d      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042dc:	4b64      	ldr	r3, [pc, #400]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ea:	4b61      	ldr	r3, [pc, #388]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80042ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f0:	0e1b      	lsrs	r3, r3, #24
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	019a      	lsls	r2, r3, #6
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	061b      	lsls	r3, r3, #24
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	071b      	lsls	r3, r3, #28
 8004310:	4957      	ldr	r1, [pc, #348]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x576>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02e      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004342:	d129      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004344:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004358:	0f1b      	lsrs	r3, r3, #28
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	019a      	lsls	r2, r3, #6
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	071b      	lsls	r3, r3, #28
 8004378:	493d      	ldr	r1, [pc, #244]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004380:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004386:	f023 021f 	bic.w	r2, r3, #31
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	3b01      	subs	r3, #1
 8004390:	4937      	ldr	r1, [pc, #220]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01d      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043a4:	4b32      	ldr	r3, [pc, #200]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043aa:	0e1b      	lsrs	r3, r3, #24
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043b2:	4b2f      	ldr	r3, [pc, #188]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b8:	0f1b      	lsrs	r3, r3, #28
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	019a      	lsls	r2, r3, #6
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	431a      	orrs	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	071b      	lsls	r3, r3, #28
 80043d8:	4925      	ldr	r1, [pc, #148]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d011      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	019a      	lsls	r2, r3, #6
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	071b      	lsls	r3, r3, #28
 8004408:	4919      	ldr	r1, [pc, #100]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800441a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441c:	f7fd fd94 	bl	8001f48 <HAL_GetTick>
 8004420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004424:	f7fd fd90 	bl	8001f48 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0a8      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b01      	cmp	r3, #1
 8004446:	f040 809e 	bne.w	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004456:	f7fd fd77 	bl	8001f48 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800445e:	f7fd fd73 	bl	8001f48 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b64      	cmp	r3, #100	; 0x64
 800446a:	d903      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e08b      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8004470:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004474:	4b46      	ldr	r3, [pc, #280]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800447c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004480:	d0ed      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d02e      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d12a      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044b8:	4b35      	ldr	r3, [pc, #212]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	0f1b      	lsrs	r3, r3, #28
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	019a      	lsls	r2, r3, #6
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	431a      	orrs	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	071b      	lsls	r3, r3, #28
 80044de:	492c      	ldr	r1, [pc, #176]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044e6:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	4925      	ldr	r1, [pc, #148]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d022      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004514:	d11d      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004516:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	0e1b      	lsrs	r3, r3, #24
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	0f1b      	lsrs	r3, r3, #28
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	019a      	lsls	r2, r3, #6
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	431a      	orrs	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	4911      	ldr	r1, [pc, #68]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455e:	f7fd fcf3 	bl	8001f48 <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004566:	f7fd fcef 	bl	8001f48 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b64      	cmp	r3, #100	; 0x64
 8004572:	d901      	bls.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e007      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004584:	d1ef      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800

08004594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e01d      	b.n	80045e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f815 	bl	80045ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f000 f986 	bl	80048e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <HAL_TIM_Base_Start_IT+0x50>)
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b06      	cmp	r3, #6
 8004628:	d00b      	beq.n	8004642 <HAL_TIM_Base_Start_IT+0x42>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d007      	beq.n	8004642 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	00010007 	.word	0x00010007

08004654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d122      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b02      	cmp	r3, #2
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0202 	mvn.w	r2, #2
 8004680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f905 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8f7 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f908 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d122      	bne.n	8004704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0204 	mvn.w	r2, #4
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8db 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8cd 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8de 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b08      	cmp	r3, #8
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0208 	mvn.w	r2, #8
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2204      	movs	r2, #4
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8b1 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f8a3 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8b4 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b10      	cmp	r3, #16
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b10      	cmp	r3, #16
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0210 	mvn.w	r2, #16
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2208      	movs	r2, #8
 8004782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f887 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f879 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f88a 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d10e      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0201 	mvn.w	r2, #1
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fd f9d0 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b80      	cmp	r3, #128	; 0x80
 80047e4:	d10e      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	2b80      	cmp	r3, #128	; 0x80
 80047f2:	d107      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f91a 	bl	8004a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004812:	d10e      	bne.n	8004832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d107      	bne.n	8004832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800482a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f90d 	bl	8004a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d10e      	bne.n	800485e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d107      	bne.n	800485e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f838 	bl	80048ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b20      	cmp	r3, #32
 800486a:	d10e      	bne.n	800488a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b20      	cmp	r3, #32
 8004878:	d107      	bne.n	800488a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0220 	mvn.w	r2, #32
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8cd 	bl	8004a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d013      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d00f      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3d      	ldr	r2, [pc, #244]	; (80049fc <TIM_Base_SetConfig+0x118>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00b      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <TIM_Base_SetConfig+0x11c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3b      	ldr	r2, [pc, #236]	; (8004a04 <TIM_Base_SetConfig+0x120>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3a      	ldr	r2, [pc, #232]	; (8004a08 <TIM_Base_SetConfig+0x124>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d108      	bne.n	8004936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02b      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d027      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <TIM_Base_SetConfig+0x118>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d023      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2b      	ldr	r2, [pc, #172]	; (8004a00 <TIM_Base_SetConfig+0x11c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01f      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <TIM_Base_SetConfig+0x120>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01b      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <TIM_Base_SetConfig+0x124>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d017      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a28      	ldr	r2, [pc, #160]	; (8004a0c <TIM_Base_SetConfig+0x128>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <TIM_Base_SetConfig+0x12c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00f      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <TIM_Base_SetConfig+0x130>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00b      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a25      	ldr	r2, [pc, #148]	; (8004a18 <TIM_Base_SetConfig+0x134>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a24      	ldr	r2, [pc, #144]	; (8004a1c <TIM_Base_SetConfig+0x138>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a23      	ldr	r2, [pc, #140]	; (8004a20 <TIM_Base_SetConfig+0x13c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d108      	bne.n	80049a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_Base_SetConfig+0xf8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <TIM_Base_SetConfig+0x124>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d103      	bne.n	80049e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	615a      	str	r2, [r3, #20]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800
 8004a04:	40000c00 	.word	0x40000c00
 8004a08:	40010400 	.word	0x40010400
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40014400 	.word	0x40014400
 8004a14:	40014800 	.word	0x40014800
 8004a18:	40001800 	.word	0x40001800
 8004a1c:	40001c00 	.word	0x40001c00
 8004a20:	40002000 	.word	0x40002000

08004a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e040      	b.n	8004af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fd f9d2 	bl	8001e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	; 0x24
 8004a8c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8be 	bl	8004c20 <UART_SetConfig>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e022      	b.n	8004af4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fb5c 	bl	8005174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fbe3 	bl	80052b8 <UART_CheckIdleState>
 8004af2:	4603      	mov	r3, r0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d17f      	bne.n	8004c14 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Transmit+0x24>
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e078      	b.n	8004c16 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_UART_Transmit+0x36>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e071      	b.n	8004c16 <HAL_UART_Transmit+0x11a>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2221      	movs	r2, #33	; 0x21
 8004b44:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004b46:	f7fd f9ff 	bl	8001f48 <HAL_GetTick>
 8004b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	d108      	bne.n	8004b78 <HAL_UART_Transmit+0x7c>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	e003      	b.n	8004b80 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004b88:	e02c      	b.n	8004be4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	; 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fbd4 	bl	8005342 <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e038      	b.n	8004c16 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	e007      	b.n	8004bd2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1cc      	bne.n	8004b8a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2140      	movs	r1, #64	; 0x40
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fba1 	bl	8005342 <UART_WaitOnFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e005      	b.n	8004c16 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	e000      	b.n	8004c16 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004c14:	2302      	movs	r3, #2
  }
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4bb1      	ldr	r3, [pc, #708]	; (8004f14 <UART_SetConfig+0x2f4>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	6939      	ldr	r1, [r7, #16]
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a9f      	ldr	r2, [pc, #636]	; (8004f18 <UART_SetConfig+0x2f8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d121      	bne.n	8004ce4 <UART_SetConfig+0xc4>
 8004ca0:	4b9e      	ldr	r3, [pc, #632]	; (8004f1c <UART_SetConfig+0x2fc>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d816      	bhi.n	8004cdc <UART_SetConfig+0xbc>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x94>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004cc5 	.word	0x08004cc5
 8004cb8:	08004cd1 	.word	0x08004cd1
 8004cbc:	08004ccb 	.word	0x08004ccb
 8004cc0:	08004cd7 	.word	0x08004cd7
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e151      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e14e      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e14b      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e148      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	bf00      	nop
 8004ce2:	e144      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a8d      	ldr	r2, [pc, #564]	; (8004f20 <UART_SetConfig+0x300>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d134      	bne.n	8004d58 <UART_SetConfig+0x138>
 8004cee:	4b8b      	ldr	r3, [pc, #556]	; (8004f1c <UART_SetConfig+0x2fc>)
 8004cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf4:	f003 030c 	and.w	r3, r3, #12
 8004cf8:	2b0c      	cmp	r3, #12
 8004cfa:	d829      	bhi.n	8004d50 <UART_SetConfig+0x130>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0xe4>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d39 	.word	0x08004d39
 8004d08:	08004d51 	.word	0x08004d51
 8004d0c:	08004d51 	.word	0x08004d51
 8004d10:	08004d51 	.word	0x08004d51
 8004d14:	08004d45 	.word	0x08004d45
 8004d18:	08004d51 	.word	0x08004d51
 8004d1c:	08004d51 	.word	0x08004d51
 8004d20:	08004d51 	.word	0x08004d51
 8004d24:	08004d3f 	.word	0x08004d3f
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d51 	.word	0x08004d51
 8004d34:	08004d4b 	.word	0x08004d4b
 8004d38:	2300      	movs	r3, #0
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e117      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e114      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004d44:	2304      	movs	r3, #4
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e111      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e10e      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004d50:	2310      	movs	r3, #16
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	bf00      	nop
 8004d56:	e10a      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a71      	ldr	r2, [pc, #452]	; (8004f24 <UART_SetConfig+0x304>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d120      	bne.n	8004da4 <UART_SetConfig+0x184>
 8004d62:	4b6e      	ldr	r3, [pc, #440]	; (8004f1c <UART_SetConfig+0x2fc>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d00f      	beq.n	8004d90 <UART_SetConfig+0x170>
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d802      	bhi.n	8004d7a <UART_SetConfig+0x15a>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <UART_SetConfig+0x164>
 8004d78:	e010      	b.n	8004d9c <UART_SetConfig+0x17c>
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d005      	beq.n	8004d8a <UART_SetConfig+0x16a>
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d009      	beq.n	8004d96 <UART_SetConfig+0x176>
 8004d82:	e00b      	b.n	8004d9c <UART_SetConfig+0x17c>
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]
 8004d88:	e0f1      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	77fb      	strb	r3, [r7, #31]
 8004d8e:	e0ee      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004d90:	2304      	movs	r3, #4
 8004d92:	77fb      	strb	r3, [r7, #31]
 8004d94:	e0eb      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004d96:	2308      	movs	r3, #8
 8004d98:	77fb      	strb	r3, [r7, #31]
 8004d9a:	e0e8      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	bf00      	nop
 8004da2:	e0e4      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a5f      	ldr	r2, [pc, #380]	; (8004f28 <UART_SetConfig+0x308>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d120      	bne.n	8004df0 <UART_SetConfig+0x1d0>
 8004dae:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <UART_SetConfig+0x2fc>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d00f      	beq.n	8004ddc <UART_SetConfig+0x1bc>
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d802      	bhi.n	8004dc6 <UART_SetConfig+0x1a6>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <UART_SetConfig+0x1b0>
 8004dc4:	e010      	b.n	8004de8 <UART_SetConfig+0x1c8>
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d005      	beq.n	8004dd6 <UART_SetConfig+0x1b6>
 8004dca:	2bc0      	cmp	r3, #192	; 0xc0
 8004dcc:	d009      	beq.n	8004de2 <UART_SetConfig+0x1c2>
 8004dce:	e00b      	b.n	8004de8 <UART_SetConfig+0x1c8>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e0cb      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e0c8      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e0c5      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004de2:	2308      	movs	r3, #8
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e0c2      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004de8:	2310      	movs	r3, #16
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	bf00      	nop
 8004dee:	e0be      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a4d      	ldr	r2, [pc, #308]	; (8004f2c <UART_SetConfig+0x30c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d124      	bne.n	8004e44 <UART_SetConfig+0x224>
 8004dfa:	4b48      	ldr	r3, [pc, #288]	; (8004f1c <UART_SetConfig+0x2fc>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e08:	d012      	beq.n	8004e30 <UART_SetConfig+0x210>
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	d802      	bhi.n	8004e16 <UART_SetConfig+0x1f6>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <UART_SetConfig+0x204>
 8004e14:	e012      	b.n	8004e3c <UART_SetConfig+0x21c>
 8004e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1a:	d006      	beq.n	8004e2a <UART_SetConfig+0x20a>
 8004e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e20:	d009      	beq.n	8004e36 <UART_SetConfig+0x216>
 8004e22:	e00b      	b.n	8004e3c <UART_SetConfig+0x21c>
 8004e24:	2300      	movs	r3, #0
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e0a1      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e09e      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e30:	2304      	movs	r3, #4
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e09b      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e36:	2308      	movs	r3, #8
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e098      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	bf00      	nop
 8004e42:	e094      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a39      	ldr	r2, [pc, #228]	; (8004f30 <UART_SetConfig+0x310>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d124      	bne.n	8004e98 <UART_SetConfig+0x278>
 8004e4e:	4b33      	ldr	r3, [pc, #204]	; (8004f1c <UART_SetConfig+0x2fc>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5c:	d012      	beq.n	8004e84 <UART_SetConfig+0x264>
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e62:	d802      	bhi.n	8004e6a <UART_SetConfig+0x24a>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <UART_SetConfig+0x258>
 8004e68:	e012      	b.n	8004e90 <UART_SetConfig+0x270>
 8004e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6e:	d006      	beq.n	8004e7e <UART_SetConfig+0x25e>
 8004e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e74:	d009      	beq.n	8004e8a <UART_SetConfig+0x26a>
 8004e76:	e00b      	b.n	8004e90 <UART_SetConfig+0x270>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e077      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e074      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e84:	2304      	movs	r3, #4
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e071      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e06e      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e90:	2310      	movs	r3, #16
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	bf00      	nop
 8004e96:	e06a      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <UART_SetConfig+0x314>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d124      	bne.n	8004eec <UART_SetConfig+0x2cc>
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <UART_SetConfig+0x2fc>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb0:	d012      	beq.n	8004ed8 <UART_SetConfig+0x2b8>
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	d802      	bhi.n	8004ebe <UART_SetConfig+0x29e>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <UART_SetConfig+0x2ac>
 8004ebc:	e012      	b.n	8004ee4 <UART_SetConfig+0x2c4>
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec2:	d006      	beq.n	8004ed2 <UART_SetConfig+0x2b2>
 8004ec4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ec8:	d009      	beq.n	8004ede <UART_SetConfig+0x2be>
 8004eca:	e00b      	b.n	8004ee4 <UART_SetConfig+0x2c4>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e04d      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e04a      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e047      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e044      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	bf00      	nop
 8004eea:	e040      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a11      	ldr	r2, [pc, #68]	; (8004f38 <UART_SetConfig+0x318>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d139      	bne.n	8004f6a <UART_SetConfig+0x34a>
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <UART_SetConfig+0x2fc>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f04:	d027      	beq.n	8004f56 <UART_SetConfig+0x336>
 8004f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f0a:	d817      	bhi.n	8004f3c <UART_SetConfig+0x31c>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01c      	beq.n	8004f4a <UART_SetConfig+0x32a>
 8004f10:	e027      	b.n	8004f62 <UART_SetConfig+0x342>
 8004f12:	bf00      	nop
 8004f14:	efff69f3 	.word	0xefff69f3
 8004f18:	40011000 	.word	0x40011000
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40004400 	.word	0x40004400
 8004f24:	40004800 	.word	0x40004800
 8004f28:	40004c00 	.word	0x40004c00
 8004f2c:	40005000 	.word	0x40005000
 8004f30:	40011400 	.word	0x40011400
 8004f34:	40007800 	.word	0x40007800
 8004f38:	40007c00 	.word	0x40007c00
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f40:	d006      	beq.n	8004f50 <UART_SetConfig+0x330>
 8004f42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f46:	d009      	beq.n	8004f5c <UART_SetConfig+0x33c>
 8004f48:	e00b      	b.n	8004f62 <UART_SetConfig+0x342>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e00e      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004f50:	2302      	movs	r3, #2
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e00b      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004f56:	2304      	movs	r3, #4
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e008      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	e005      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004f62:	2310      	movs	r3, #16
 8004f64:	77fb      	strb	r3, [r7, #31]
 8004f66:	bf00      	nop
 8004f68:	e001      	b.n	8004f6e <UART_SetConfig+0x34e>
 8004f6a:	2310      	movs	r3, #16
 8004f6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f76:	d17f      	bne.n	8005078 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004f78:	7ffb      	ldrb	r3, [r7, #31]
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d85c      	bhi.n	8005038 <UART_SetConfig+0x418>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0x364>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fc9 	.word	0x08004fc9
 8004f8c:	08004fe9 	.word	0x08004fe9
 8004f90:	08005039 	.word	0x08005039
 8004f94:	08005001 	.word	0x08005001
 8004f98:	08005039 	.word	0x08005039
 8004f9c:	08005039 	.word	0x08005039
 8004fa0:	08005039 	.word	0x08005039
 8004fa4:	08005021 	.word	0x08005021
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fe feac 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8004fac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	005a      	lsls	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	441a      	add	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	61bb      	str	r3, [r7, #24]
        break;
 8004fc6:	e03a      	b.n	800503e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fe feb0 	bl	8003d2c <HAL_RCC_GetPCLK2Freq>
 8004fcc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	005a      	lsls	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	61bb      	str	r3, [r7, #24]
        break;
 8004fe6:	e02a      	b.n	800503e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	085a      	lsrs	r2, r3, #1
 8004fee:	4b5f      	ldr	r3, [pc, #380]	; (800516c <UART_SetConfig+0x54c>)
 8004ff0:	4413      	add	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6852      	ldr	r2, [r2, #4]
 8004ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	61bb      	str	r3, [r7, #24]
        break;
 8004ffe:	e01e      	b.n	800503e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005000:	f7fe fdc2 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8005004:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	005a      	lsls	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	441a      	add	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	fbb2 f3f3 	udiv	r3, r2, r3
 800501a:	b29b      	uxth	r3, r3
 800501c:	61bb      	str	r3, [r7, #24]
        break;
 800501e:	e00e      	b.n	800503e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	b29b      	uxth	r3, r3
 8005034:	61bb      	str	r3, [r7, #24]
        break;
 8005036:	e002      	b.n	800503e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
        break;
 800503c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b0f      	cmp	r3, #15
 8005042:	d916      	bls.n	8005072 <UART_SetConfig+0x452>
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504a:	d212      	bcs.n	8005072 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f023 030f 	bic.w	r3, r3, #15
 8005054:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	b29b      	uxth	r3, r3
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	b29a      	uxth	r2, r3
 8005062:	897b      	ldrh	r3, [r7, #10]
 8005064:	4313      	orrs	r3, r2
 8005066:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	897a      	ldrh	r2, [r7, #10]
 800506e:	60da      	str	r2, [r3, #12]
 8005070:	e070      	b.n	8005154 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	75fb      	strb	r3, [r7, #23]
 8005076:	e06d      	b.n	8005154 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005078:	7ffb      	ldrb	r3, [r7, #31]
 800507a:	2b08      	cmp	r3, #8
 800507c:	d859      	bhi.n	8005132 <UART_SetConfig+0x512>
 800507e:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <UART_SetConfig+0x464>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050c7 	.word	0x080050c7
 800508c:	080050e5 	.word	0x080050e5
 8005090:	08005133 	.word	0x08005133
 8005094:	080050fd 	.word	0x080050fd
 8005098:	08005133 	.word	0x08005133
 800509c:	08005133 	.word	0x08005133
 80050a0:	08005133 	.word	0x08005133
 80050a4:	0800511b 	.word	0x0800511b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a8:	f7fe fe2c 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80050ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	085a      	lsrs	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	441a      	add	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	61bb      	str	r3, [r7, #24]
        break;
 80050c4:	e038      	b.n	8005138 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c6:	f7fe fe31 	bl	8003d2c <HAL_RCC_GetPCLK2Freq>
 80050ca:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	085a      	lsrs	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	441a      	add	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	b29b      	uxth	r3, r3
 80050e0:	61bb      	str	r3, [r7, #24]
        break;
 80050e2:	e029      	b.n	8005138 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	085a      	lsrs	r2, r3, #1
 80050ea:	4b21      	ldr	r3, [pc, #132]	; (8005170 <UART_SetConfig+0x550>)
 80050ec:	4413      	add	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6852      	ldr	r2, [r2, #4]
 80050f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	61bb      	str	r3, [r7, #24]
        break;
 80050fa:	e01d      	b.n	8005138 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fc:	f7fe fd44 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8005100:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	085a      	lsrs	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	441a      	add	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	b29b      	uxth	r3, r3
 8005116:	61bb      	str	r3, [r7, #24]
        break;
 8005118:	e00e      	b.n	8005138 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	b29b      	uxth	r3, r3
 800512e:	61bb      	str	r3, [r7, #24]
        break;
 8005130:	e002      	b.n	8005138 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
        break;
 8005136:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d908      	bls.n	8005150 <UART_SetConfig+0x530>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d204      	bcs.n	8005150 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	60da      	str	r2, [r3, #12]
 800514e:	e001      	b.n	8005154 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005160:	7dfb      	ldrb	r3, [r7, #23]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	01e84800 	.word	0x01e84800
 8005170:	00f42400 	.word	0x00f42400

08005174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01a      	beq.n	800528a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005272:	d10a      	bne.n	800528a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80052c6:	f7fc fe3f 	bl	8001f48 <HAL_GetTick>
 80052ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d10e      	bne.n	80052f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f82a 	bl	8005342 <UART_WaitOnFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e020      	b.n	800533a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b04      	cmp	r3, #4
 8005304:	d10e      	bne.n	8005324 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005306:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f814 	bl	8005342 <UART_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e00a      	b.n	800533a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4613      	mov	r3, r2
 8005350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005352:	e05d      	b.n	8005410 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535a:	d059      	beq.n	8005410 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535c:	f7fc fdf4 	bl	8001f48 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <UART_WaitOnFlagUntilTimeout+0x30>
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d11b      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005380:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e042      	b.n	8005430 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02b      	beq.n	8005410 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c6:	d123      	bne.n	8005410 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e00f      	b.n	8005430 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69da      	ldr	r2, [r3, #28]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4013      	ands	r3, r2
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	429a      	cmp	r2, r3
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	429a      	cmp	r2, r3
 800542c:	d092      	beq.n	8005354 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800543c:	bf00      	nop
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800544e:	f3ef 8305 	mrs	r3, IPSR
 8005452:	60bb      	str	r3, [r7, #8]
  return(result);
 8005454:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10f      	bne.n	800547a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545a:	f3ef 8310 	mrs	r3, PRIMASK
 800545e:	607b      	str	r3, [r7, #4]
  return(result);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005466:	f3ef 8311 	mrs	r3, BASEPRI
 800546a:	603b      	str	r3, [r7, #0]
  return(result);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <osKernelInitialize+0x3a>
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <osKernelInitialize+0x64>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d103      	bne.n	8005482 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800547a:	f06f 0305 	mvn.w	r3, #5
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	e00c      	b.n	800549c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <osKernelInitialize+0x64>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <osKernelInitialize+0x64>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e002      	b.n	800549c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800549a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800549c:	68fb      	ldr	r3, [r7, #12]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	200000d0 	.word	0x200000d0

080054b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054b6:	f3ef 8305 	mrs	r3, IPSR
 80054ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80054bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10f      	bne.n	80054e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054c2:	f3ef 8310 	mrs	r3, PRIMASK
 80054c6:	607b      	str	r3, [r7, #4]
  return(result);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d105      	bne.n	80054da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054ce:	f3ef 8311 	mrs	r3, BASEPRI
 80054d2:	603b      	str	r3, [r7, #0]
  return(result);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <osKernelStart+0x3a>
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <osKernelStart+0x68>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d103      	bne.n	80054ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80054e2:	f06f 0305 	mvn.w	r3, #5
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e010      	b.n	800550c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054ea:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <osKernelStart+0x68>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d109      	bne.n	8005506 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054f2:	f7ff ffa1 	bl	8005438 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <osKernelStart+0x68>)
 80054f8:	2202      	movs	r2, #2
 80054fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054fc:	f001 ff10 	bl	8007320 <vTaskStartScheduler>
      stat = osOK;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e002      	b.n	800550c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800550a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800550c:	68fb      	ldr	r3, [r7, #12]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	200000d0 	.word	0x200000d0

0800551c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b090      	sub	sp, #64	; 0x40
 8005520:	af04      	add	r7, sp, #16
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800552c:	f3ef 8305 	mrs	r3, IPSR
 8005530:	61fb      	str	r3, [r7, #28]
  return(result);
 8005532:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 808f 	bne.w	8005658 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553a:	f3ef 8310 	mrs	r3, PRIMASK
 800553e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d105      	bne.n	8005552 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005546:	f3ef 8311 	mrs	r3, BASEPRI
 800554a:	617b      	str	r3, [r7, #20]
  return(result);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <osThreadNew+0x3e>
 8005552:	4b44      	ldr	r3, [pc, #272]	; (8005664 <osThreadNew+0x148>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d07e      	beq.n	8005658 <osThreadNew+0x13c>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d07b      	beq.n	8005658 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005564:	2318      	movs	r3, #24
 8005566:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005568:	2300      	movs	r3, #0
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800556c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005570:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d045      	beq.n	8005604 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <osThreadNew+0x6a>
        name = attr->name;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <osThreadNew+0x90>
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	2b38      	cmp	r3, #56	; 0x38
 800559e:	d805      	bhi.n	80055ac <osThreadNew+0x90>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <osThreadNew+0x94>
        return (NULL);
 80055ac:	2300      	movs	r3, #0
 80055ae:	e054      	b.n	800565a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	089b      	lsrs	r3, r3, #2
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00e      	beq.n	80055e6 <osThreadNew+0xca>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b5b      	cmp	r3, #91	; 0x5b
 80055ce:	d90a      	bls.n	80055e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d006      	beq.n	80055e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <osThreadNew+0xca>
        mem = 1;
 80055e0:	2301      	movs	r3, #1
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	e010      	b.n	8005608 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10c      	bne.n	8005608 <osThreadNew+0xec>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d108      	bne.n	8005608 <osThreadNew+0xec>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <osThreadNew+0xec>
          mem = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	623b      	str	r3, [r7, #32]
 8005602:	e001      	b.n	8005608 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d110      	bne.n	8005630 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005616:	9202      	str	r2, [sp, #8]
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f001 fc9f 	bl	8006f68 <xTaskCreateStatic>
 800562a:	4603      	mov	r3, r0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	e013      	b.n	8005658 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d110      	bne.n	8005658 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	b29a      	uxth	r2, r3
 800563a:	f107 0310 	add.w	r3, r7, #16
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f001 fced 	bl	8007028 <xTaskCreate>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d001      	beq.n	8005658 <osThreadNew+0x13c>
          hTask = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005658:	693b      	ldr	r3, [r7, #16]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3730      	adds	r7, #48	; 0x30
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	200000d0 	.word	0x200000d0

08005668 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005670:	f3ef 8305 	mrs	r3, IPSR
 8005674:	613b      	str	r3, [r7, #16]
  return(result);
 8005676:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10f      	bne.n	800569c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800567c:	f3ef 8310 	mrs	r3, PRIMASK
 8005680:	60fb      	str	r3, [r7, #12]
  return(result);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d105      	bne.n	8005694 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005688:	f3ef 8311 	mrs	r3, BASEPRI
 800568c:	60bb      	str	r3, [r7, #8]
  return(result);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <osDelay+0x3c>
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <osDelay+0x58>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d103      	bne.n	80056a4 <osDelay+0x3c>
    stat = osErrorISR;
 800569c:	f06f 0305 	mvn.w	r3, #5
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e007      	b.n	80056b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f001 fe00 	bl	80072b4 <vTaskDelay>
    }
  }

  return (stat);
 80056b4:	697b      	ldr	r3, [r7, #20]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	200000d0 	.word	0x200000d0

080056c4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08c      	sub	sp, #48	; 0x30
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d4:	f3ef 8305 	mrs	r3, IPSR
 80056d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80056da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f040 8087 	bne.w	80057f0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e2:	f3ef 8310 	mrs	r3, PRIMASK
 80056e6:	617b      	str	r3, [r7, #20]
  return(result);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d105      	bne.n	80056fa <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056ee:	f3ef 8311 	mrs	r3, BASEPRI
 80056f2:	613b      	str	r3, [r7, #16]
  return(result);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <osSemaphoreNew+0x3e>
 80056fa:	4b40      	ldr	r3, [pc, #256]	; (80057fc <osSemaphoreNew+0x138>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d076      	beq.n	80057f0 <osSemaphoreNew+0x12c>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d073      	beq.n	80057f0 <osSemaphoreNew+0x12c>
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	429a      	cmp	r2, r3
 800570e:	d86f      	bhi.n	80057f0 <osSemaphoreNew+0x12c>
    mem = -1;
 8005710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005714:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d006      	beq.n	8005732 <osSemaphoreNew+0x6e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2b4f      	cmp	r3, #79	; 0x4f
 800572a:	d902      	bls.n	8005732 <osSemaphoreNew+0x6e>
        mem = 1;
 800572c:	2301      	movs	r3, #1
 800572e:	623b      	str	r3, [r7, #32]
 8005730:	e00c      	b.n	800574c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d108      	bne.n	800574c <osSemaphoreNew+0x88>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <osSemaphoreNew+0x88>
          mem = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	623b      	str	r3, [r7, #32]
 8005746:	e001      	b.n	800574c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005752:	d04d      	beq.n	80057f0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d129      	bne.n	80057ae <osSemaphoreNew+0xea>
        if (mem == 1) {
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10b      	bne.n	8005778 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	2303      	movs	r3, #3
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	2200      	movs	r2, #0
 800576c:	2100      	movs	r1, #0
 800576e:	2001      	movs	r0, #1
 8005770:	f000 fbf4 	bl	8005f5c <xQueueGenericCreateStatic>
 8005774:	6278      	str	r0, [r7, #36]	; 0x24
 8005776:	e005      	b.n	8005784 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005778:	2203      	movs	r2, #3
 800577a:	2100      	movs	r1, #0
 800577c:	2001      	movs	r0, #1
 800577e:	f000 fc6a 	bl	8006056 <xQueueGenericCreate>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d022      	beq.n	80057d0 <osSemaphoreNew+0x10c>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01f      	beq.n	80057d0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005790:	2300      	movs	r3, #0
 8005792:	2200      	movs	r2, #0
 8005794:	2100      	movs	r1, #0
 8005796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005798:	f000 fd30 	bl	80061fc <xQueueGenericSend>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d016      	beq.n	80057d0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80057a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057a4:	f001 fa0d 	bl	8006bc2 <vQueueDelete>
            hSemaphore = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
 80057ac:	e010      	b.n	80057d0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d108      	bne.n	80057c6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	461a      	mov	r2, r3
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fcae 	bl	800611e <xQueueCreateCountingSemaphoreStatic>
 80057c2:	6278      	str	r0, [r7, #36]	; 0x24
 80057c4:	e004      	b.n	80057d0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 fce1 	bl	8006190 <xQueueCreateCountingSemaphore>
 80057ce:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00c      	beq.n	80057f0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <osSemaphoreNew+0x120>
          name = attr->name;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	e001      	b.n	80057e8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ec:	f001 fb36 	bl	8006e5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3728      	adds	r7, #40	; 0x28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200000d0 	.word	0x200000d0

08005800 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005818:	f06f 0303 	mvn.w	r3, #3
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	e04b      	b.n	80058b8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005820:	f3ef 8305 	mrs	r3, IPSR
 8005824:	617b      	str	r3, [r7, #20]
  return(result);
 8005826:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10f      	bne.n	800584c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582c:	f3ef 8310 	mrs	r3, PRIMASK
 8005830:	613b      	str	r3, [r7, #16]
  return(result);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005838:	f3ef 8311 	mrs	r3, BASEPRI
 800583c:	60fb      	str	r3, [r7, #12]
  return(result);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d026      	beq.n	8005892 <osSemaphoreAcquire+0x92>
 8005844:	4b1f      	ldr	r3, [pc, #124]	; (80058c4 <osSemaphoreAcquire+0xc4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d122      	bne.n	8005892 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005852:	f06f 0303 	mvn.w	r3, #3
 8005856:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005858:	e02d      	b.n	80058b6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800585e:	f107 0308 	add.w	r3, r7, #8
 8005862:	461a      	mov	r2, r3
 8005864:	2100      	movs	r1, #0
 8005866:	69b8      	ldr	r0, [r7, #24]
 8005868:	f001 f8ea 	bl	8006a40 <xQueueReceiveFromISR>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d003      	beq.n	800587a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005872:	f06f 0302 	mvn.w	r3, #2
 8005876:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005878:	e01d      	b.n	80058b6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01a      	beq.n	80058b6 <osSemaphoreAcquire+0xb6>
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <osSemaphoreAcquire+0xc8>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005890:	e011      	b.n	80058b6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	69b8      	ldr	r0, [r7, #24]
 8005896:	f000 ffc3 	bl	8006820 <xQueueSemaphoreTake>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d00b      	beq.n	80058b8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80058a6:	f06f 0301 	mvn.w	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e004      	b.n	80058b8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80058ae:	f06f 0302 	mvn.w	r3, #2
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	e000      	b.n	80058b8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80058b6:	bf00      	nop
      }
    }
  }

  return (stat);
 80058b8:	69fb      	ldr	r3, [r7, #28]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	200000d0 	.word	0x200000d0
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80058e2:	f06f 0303 	mvn.w	r3, #3
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	e03e      	b.n	8005968 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ea:	f3ef 8305 	mrs	r3, IPSR
 80058ee:	617b      	str	r3, [r7, #20]
  return(result);
 80058f0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10f      	bne.n	8005916 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f6:	f3ef 8310 	mrs	r3, PRIMASK
 80058fa:	613b      	str	r3, [r7, #16]
  return(result);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d105      	bne.n	800590e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005902:	f3ef 8311 	mrs	r3, BASEPRI
 8005906:	60fb      	str	r3, [r7, #12]
  return(result);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01e      	beq.n	800594c <osSemaphoreRelease+0x80>
 800590e:	4b19      	ldr	r3, [pc, #100]	; (8005974 <osSemaphoreRelease+0xa8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d11a      	bne.n	800594c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800591a:	f107 0308 	add.w	r3, r7, #8
 800591e:	4619      	mov	r1, r3
 8005920:	69b8      	ldr	r0, [r7, #24]
 8005922:	f000 fe09 	bl	8006538 <xQueueGiveFromISR>
 8005926:	4603      	mov	r3, r0
 8005928:	2b01      	cmp	r3, #1
 800592a:	d003      	beq.n	8005934 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800592c:	f06f 0302 	mvn.w	r3, #2
 8005930:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005932:	e018      	b.n	8005966 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d015      	beq.n	8005966 <osSemaphoreRelease+0x9a>
 800593a:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <osSemaphoreRelease+0xac>)
 800593c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800594a:	e00c      	b.n	8005966 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800594c:	2300      	movs	r3, #0
 800594e:	2200      	movs	r2, #0
 8005950:	2100      	movs	r1, #0
 8005952:	69b8      	ldr	r0, [r7, #24]
 8005954:	f000 fc52 	bl	80061fc <xQueueGenericSend>
 8005958:	4603      	mov	r3, r0
 800595a:	2b01      	cmp	r3, #1
 800595c:	d004      	beq.n	8005968 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800595e:	f06f 0302 	mvn.w	r3, #2
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e000      	b.n	8005968 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005966:	bf00      	nop
    }
  }

  return (stat);
 8005968:	69fb      	ldr	r3, [r7, #28]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	200000d0 	.word	0x200000d0
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	; 0x30
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800598c:	f3ef 8305 	mrs	r3, IPSR
 8005990:	61bb      	str	r3, [r7, #24]
  return(result);
 8005992:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005994:	2b00      	cmp	r3, #0
 8005996:	d170      	bne.n	8005a7a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005998:	f3ef 8310 	mrs	r3, PRIMASK
 800599c:	617b      	str	r3, [r7, #20]
  return(result);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059a4:	f3ef 8311 	mrs	r3, BASEPRI
 80059a8:	613b      	str	r3, [r7, #16]
  return(result);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <osMessageQueueNew+0x3c>
 80059b0:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <osMessageQueueNew+0x108>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d060      	beq.n	8005a7a <osMessageQueueNew+0xfe>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d05d      	beq.n	8005a7a <osMessageQueueNew+0xfe>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d05a      	beq.n	8005a7a <osMessageQueueNew+0xfe>
    mem = -1;
 80059c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d029      	beq.n	8005a24 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d012      	beq.n	80059fe <osMessageQueueNew+0x82>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b4f      	cmp	r3, #79	; 0x4f
 80059de:	d90e      	bls.n	80059fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d302      	bcc.n	80059fe <osMessageQueueNew+0x82>
        mem = 1;
 80059f8:	2301      	movs	r3, #1
 80059fa:	623b      	str	r3, [r7, #32]
 80059fc:	e014      	b.n	8005a28 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d110      	bne.n	8005a28 <osMessageQueueNew+0xac>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10c      	bne.n	8005a28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d108      	bne.n	8005a28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <osMessageQueueNew+0xac>
          mem = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	623b      	str	r3, [r7, #32]
 8005a22:	e001      	b.n	8005a28 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d10c      	bne.n	8005a48 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6899      	ldr	r1, [r3, #8]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa8c 	bl	8005f5c <xQueueGenericCreateStatic>
 8005a44:	6278      	str	r0, [r7, #36]	; 0x24
 8005a46:	e008      	b.n	8005a5a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d105      	bne.n	8005a5a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005a4e:	2200      	movs	r2, #0
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 faff 	bl	8006056 <xQueueGenericCreate>
 8005a58:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00c      	beq.n	8005a7a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <osMessageQueueNew+0xf2>
        name = attr->name;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e001      	b.n	8005a72 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a72:	69f9      	ldr	r1, [r7, #28]
 8005a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a76:	f001 f9f1 	bl	8006e5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3728      	adds	r7, #40	; 0x28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200000d0 	.word	0x200000d0

08005a88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa0:	f3ef 8305 	mrs	r3, IPSR
 8005aa4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005aa6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10f      	bne.n	8005acc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aac:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8005abc:	617b      	str	r3, [r7, #20]
  return(result);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d02c      	beq.n	8005b1e <osMessageQueuePut+0x96>
 8005ac4:	4b28      	ldr	r3, [pc, #160]	; (8005b68 <osMessageQueuePut+0xe0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d128      	bne.n	8005b1e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <osMessageQueuePut+0x56>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <osMessageQueuePut+0x56>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005ade:	f06f 0303 	mvn.w	r3, #3
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ae4:	e039      	b.n	8005b5a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005aea:	f107 0210 	add.w	r2, r7, #16
 8005aee:	2300      	movs	r3, #0
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	6a38      	ldr	r0, [r7, #32]
 8005af4:	f000 fc84 	bl	8006400 <xQueueGenericSendFromISR>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d003      	beq.n	8005b06 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005afe:	f06f 0302 	mvn.w	r3, #2
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b04:	e029      	b.n	8005b5a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d026      	beq.n	8005b5a <osMessageQueuePut+0xd2>
 8005b0c:	4b17      	ldr	r3, [pc, #92]	; (8005b6c <osMessageQueuePut+0xe4>)
 8005b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b1c:	e01d      	b.n	8005b5a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <osMessageQueuePut+0xa2>
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005b2a:	f06f 0303 	mvn.w	r3, #3
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b30:	e014      	b.n	8005b5c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b32:	2300      	movs	r3, #0
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	6a38      	ldr	r0, [r7, #32]
 8005b3a:	f000 fb5f 	bl	80061fc <xQueueGenericSend>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d00b      	beq.n	8005b5c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005b4a:	f06f 0301 	mvn.w	r3, #1
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b50:	e004      	b.n	8005b5c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005b52:	f06f 0302 	mvn.w	r3, #2
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
 8005b58:	e000      	b.n	8005b5c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b5a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3728      	adds	r7, #40	; 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200000d0 	.word	0x200000d0
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b86:	f3ef 8305 	mrs	r3, IPSR
 8005b8a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b8c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10f      	bne.n	8005bb2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b92:	f3ef 8310 	mrs	r3, PRIMASK
 8005b96:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba2:	617b      	str	r3, [r7, #20]
  return(result);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d02c      	beq.n	8005c04 <osMessageQueueGet+0x94>
 8005baa:	4b28      	ldr	r3, [pc, #160]	; (8005c4c <osMessageQueueGet+0xdc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d128      	bne.n	8005c04 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <osMessageQueueGet+0x54>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <osMessageQueueGet+0x54>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005bc4:	f06f 0303 	mvn.w	r3, #3
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bca:	e038      	b.n	8005c3e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005bd0:	f107 0310 	add.w	r3, r7, #16
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	6a38      	ldr	r0, [r7, #32]
 8005bda:	f000 ff31 	bl	8006a40 <xQueueReceiveFromISR>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d003      	beq.n	8005bec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005be4:	f06f 0302 	mvn.w	r3, #2
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bea:	e028      	b.n	8005c3e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d025      	beq.n	8005c3e <osMessageQueueGet+0xce>
 8005bf2:	4b17      	ldr	r3, [pc, #92]	; (8005c50 <osMessageQueueGet+0xe0>)
 8005bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c02:	e01c      	b.n	8005c3e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <osMessageQueueGet+0xa0>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d103      	bne.n	8005c18 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005c10:	f06f 0303 	mvn.w	r3, #3
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
 8005c16:	e013      	b.n	8005c40 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	6a38      	ldr	r0, [r7, #32]
 8005c1e:	f000 fd1d 	bl	800665c <xQueueReceive>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d00b      	beq.n	8005c40 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005c2e:	f06f 0301 	mvn.w	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
 8005c34:	e004      	b.n	8005c40 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005c36:	f06f 0302 	mvn.w	r3, #2
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3c:	e000      	b.n	8005c40 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3728      	adds	r7, #40	; 0x28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200000d0 	.word	0x200000d0
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <osMessageQueueGetCount+0x18>
    count = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	e01e      	b.n	8005caa <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c6c:	f3ef 8305 	mrs	r3, IPSR
 8005c70:	617b      	str	r3, [r7, #20]
  return(result);
 8005c72:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10f      	bne.n	8005c98 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c78:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7c:	613b      	str	r3, [r7, #16]
  return(result);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c84:	f3ef 8311 	mrs	r3, BASEPRI
 8005c88:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <osMessageQueueGetCount+0x4e>
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <osMessageQueueGetCount+0x60>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d104      	bne.n	8005ca2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005c98:	69b8      	ldr	r0, [r7, #24]
 8005c9a:	f000 ff73 	bl	8006b84 <uxQueueMessagesWaitingFromISR>
 8005c9e:	61f8      	str	r0, [r7, #28]
 8005ca0:	e003      	b.n	8005caa <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005ca2:	69b8      	ldr	r0, [r7, #24]
 8005ca4:	f000 ff4f 	bl	8006b46 <uxQueueMessagesWaiting>
 8005ca8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8005caa:	69fb      	ldr	r3, [r7, #28]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3720      	adds	r7, #32
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200000d0 	.word	0x200000d0

08005cb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	4a06      	ldr	r2, [pc, #24]	; (8005ce8 <vApplicationGetIdleTaskMemory+0x30>)
 8005cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	601a      	str	r2, [r3, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	200000d4 	.word	0x200000d4
 8005ce8:	20000130 	.word	0x20000130

08005cec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a07      	ldr	r2, [pc, #28]	; (8005d18 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4a06      	ldr	r2, [pc, #24]	; (8005d1c <vApplicationGetTimerTaskMemory+0x30>)
 8005d02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d0a:	601a      	str	r2, [r3, #0]
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	20000330 	.word	0x20000330
 8005d1c:	2000038c 	.word	0x2000038c

08005d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f103 0208 	add.w	r2, r3, #8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f103 0208 	add.w	r2, r3, #8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f103 0208 	add.w	r2, r3, #8
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd8:	d103      	bne.n	8005de2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e00c      	b.n	8005dfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3308      	adds	r3, #8
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e002      	b.n	8005df0 <vListInsert+0x2e>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d2f6      	bcs.n	8005dea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6892      	ldr	r2, [r2, #8]
 8005e4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6852      	ldr	r2, [r2, #4]
 8005e54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d103      	bne.n	8005e68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	1e5a      	subs	r2, r3, #1
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	b672      	cpsid	i
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	b662      	cpsie	i
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	e7fe      	b.n	8005eb2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005eb4:	f002 fcc0 	bl	8008838 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec0:	68f9      	ldr	r1, [r7, #12]
 8005ec2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	68f9      	ldr	r1, [r7, #12]
 8005ee8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	441a      	add	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	22ff      	movs	r2, #255	; 0xff
 8005ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	22ff      	movs	r2, #255	; 0xff
 8005f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d114      	bne.n	8005f34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01a      	beq.n	8005f48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3310      	adds	r3, #16
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 fc90 	bl	800783c <xTaskRemoveFromEventList>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d012      	beq.n	8005f48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f22:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <xQueueGenericReset+0xd0>)
 8005f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	e009      	b.n	8005f48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3310      	adds	r3, #16
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff fef1 	bl	8005d20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3324      	adds	r3, #36	; 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff feec 	bl	8005d20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f48:	f002 fca8 	bl	800889c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f4c:	2301      	movs	r3, #1
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08e      	sub	sp, #56	; 0x38
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <xQueueGenericCreateStatic+0x2c>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	b672      	cpsid	i
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	b662      	cpsie	i
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f86:	e7fe      	b.n	8005f86 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10b      	bne.n	8005fa6 <xQueueGenericCreateStatic+0x4a>
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	b672      	cpsid	i
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	b662      	cpsie	i
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <xQueueGenericCreateStatic+0x56>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <xQueueGenericCreateStatic+0x5a>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueGenericCreateStatic+0x5c>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10b      	bne.n	8005fd4 <xQueueGenericCreateStatic+0x78>
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	b672      	cpsid	i
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	b662      	cpsie	i
 8005fd0:	623b      	str	r3, [r7, #32]
 8005fd2:	e7fe      	b.n	8005fd2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <xQueueGenericCreateStatic+0x84>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <xQueueGenericCreateStatic+0x88>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <xQueueGenericCreateStatic+0x8a>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10b      	bne.n	8006002 <xQueueGenericCreateStatic+0xa6>
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	b672      	cpsid	i
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	b662      	cpsie	i
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	e7fe      	b.n	8006000 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006002:	2350      	movs	r3, #80	; 0x50
 8006004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b50      	cmp	r3, #80	; 0x50
 800600a:	d00b      	beq.n	8006024 <xQueueGenericCreateStatic+0xc8>
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	b672      	cpsid	i
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	b662      	cpsie	i
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e7fe      	b.n	8006022 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006024:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006038:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f846 	bl	80060d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800604e:	4618      	mov	r0, r3
 8006050:	3730      	adds	r7, #48	; 0x30
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006056:	b580      	push	{r7, lr}
 8006058:	b08a      	sub	sp, #40	; 0x28
 800605a:	af02      	add	r7, sp, #8
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	4613      	mov	r3, r2
 8006062:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10b      	bne.n	8006082 <xQueueGenericCreate+0x2c>
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	b672      	cpsid	i
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	b662      	cpsie	i
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	e7fe      	b.n	8006080 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e004      	b.n	8006098 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	3350      	adds	r3, #80	; 0x50
 800609c:	4618      	mov	r0, r3
 800609e:	f002 fced 	bl	8008a7c <pvPortMalloc>
 80060a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d011      	beq.n	80060ce <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	3350      	adds	r3, #80	; 0x50
 80060b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060bc:	79fa      	ldrb	r2, [r7, #7]
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	4613      	mov	r3, r2
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f805 	bl	80060d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060ce:	69bb      	ldr	r3, [r7, #24]
	}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	e002      	b.n	80060fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006106:	2101      	movs	r1, #1
 8006108:	69b8      	ldr	r0, [r7, #24]
 800610a:	f7ff febd 	bl	8005e88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	78fa      	ldrb	r2, [r7, #3]
 8006112:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800611e:	b580      	push	{r7, lr}
 8006120:	b08a      	sub	sp, #40	; 0x28
 8006122:	af02      	add	r7, sp, #8
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	b672      	cpsid	i
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	b662      	cpsie	i
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	e7fe      	b.n	8006146 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	429a      	cmp	r2, r3
 800614e:	d90b      	bls.n	8006168 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	b672      	cpsid	i
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	b662      	cpsie	i
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	e7fe      	b.n	8006166 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006168:	2302      	movs	r3, #2
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff fef2 	bl	8005f5c <xQueueGenericCreateStatic>
 8006178:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006186:	69fb      	ldr	r3, [r7, #28]
	}
 8006188:	4618      	mov	r0, r3
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <xQueueCreateCountingSemaphore+0x28>
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	b672      	cpsid	i
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	b662      	cpsie	i
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	e7fe      	b.n	80061b6 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d90b      	bls.n	80061d8 <xQueueCreateCountingSemaphore+0x48>
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	b672      	cpsid	i
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	b662      	cpsie	i
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	e7fe      	b.n	80061d6 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80061d8:	2202      	movs	r2, #2
 80061da:	2100      	movs	r1, #0
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ff3a 	bl	8006056 <xQueueGenericCreate>
 80061e2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80061f0:	697b      	ldr	r3, [r7, #20]
	}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08e      	sub	sp, #56	; 0x38
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800620a:	2300      	movs	r3, #0
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <xQueueGenericSend+0x34>
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	b672      	cpsid	i
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	b662      	cpsie	i
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
 800622e:	e7fe      	b.n	800622e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <xQueueGenericSend+0x42>
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <xQueueGenericSend+0x46>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueGenericSend+0x48>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <xQueueGenericSend+0x64>
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	b672      	cpsid	i
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	b662      	cpsie	i
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
 800625e:	e7fe      	b.n	800625e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d103      	bne.n	800626e <xQueueGenericSend+0x72>
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <xQueueGenericSend+0x76>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueGenericSend+0x78>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10b      	bne.n	8006290 <xQueueGenericSend+0x94>
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	b672      	cpsid	i
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	b662      	cpsie	i
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	e7fe      	b.n	800628e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006290:	f001 fc92 	bl	8007bb8 <xTaskGetSchedulerState>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <xQueueGenericSend+0xa4>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <xQueueGenericSend+0xa8>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <xQueueGenericSend+0xaa>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <xQueueGenericSend+0xc6>
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	b672      	cpsid	i
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	b662      	cpsie	i
 80062be:	61fb      	str	r3, [r7, #28]
 80062c0:	e7fe      	b.n	80062c0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062c2:	f002 fab9 	bl	8008838 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d302      	bcc.n	80062d8 <xQueueGenericSend+0xdc>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d129      	bne.n	800632c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062de:	f000 fcac 	bl	8006c3a <prvCopyDataToQueue>
 80062e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d010      	beq.n	800630e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	3324      	adds	r3, #36	; 0x24
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 faa3 	bl	800783c <xTaskRemoveFromEventList>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d013      	beq.n	8006324 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062fc:	4b3f      	ldr	r3, [pc, #252]	; (80063fc <xQueueGenericSend+0x200>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	e00a      	b.n	8006324 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d007      	beq.n	8006324 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006314:	4b39      	ldr	r3, [pc, #228]	; (80063fc <xQueueGenericSend+0x200>)
 8006316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006324:	f002 faba 	bl	800889c <vPortExitCritical>
				return pdPASS;
 8006328:	2301      	movs	r3, #1
 800632a:	e063      	b.n	80063f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d103      	bne.n	800633a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006332:	f002 fab3 	bl	800889c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006336:	2300      	movs	r3, #0
 8006338:	e05c      	b.n	80063f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800633a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633c:	2b00      	cmp	r3, #0
 800633e:	d106      	bne.n	800634e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fadd 	bl	8007904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800634a:	2301      	movs	r3, #1
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800634e:	f002 faa5 	bl	800889c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006352:	f001 f84d 	bl	80073f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006356:	f002 fa6f 	bl	8008838 <vPortEnterCritical>
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006360:	b25b      	sxtb	r3, r3
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006366:	d103      	bne.n	8006370 <xQueueGenericSend+0x174>
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006376:	b25b      	sxtb	r3, r3
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800637c:	d103      	bne.n	8006386 <xQueueGenericSend+0x18a>
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006386:	f002 fa89 	bl	800889c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800638a:	1d3a      	adds	r2, r7, #4
 800638c:	f107 0314 	add.w	r3, r7, #20
 8006390:	4611      	mov	r1, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f001 facc 	bl	8007930 <xTaskCheckForTimeOut>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d124      	bne.n	80063e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800639e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063a0:	f000 fd43 	bl	8006e2a <prvIsQueueFull>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d018      	beq.n	80063dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	3310      	adds	r3, #16
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 f9f0 	bl	8007798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ba:	f000 fcce 	bl	8006d5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063be:	f001 f825 	bl	800740c <xTaskResumeAll>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f47f af7c 	bne.w	80062c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <xQueueGenericSend+0x200>)
 80063cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	e772      	b.n	80062c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063de:	f000 fcbc 	bl	8006d5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063e2:	f001 f813 	bl	800740c <xTaskResumeAll>
 80063e6:	e76c      	b.n	80062c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ea:	f000 fcb6 	bl	8006d5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ee:	f001 f80d 	bl	800740c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3738      	adds	r7, #56	; 0x38
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08e      	sub	sp, #56	; 0x38
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <xQueueGenericSendFromISR+0x30>
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	b672      	cpsid	i
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	b662      	cpsie	i
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
 800642e:	e7fe      	b.n	800642e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <xQueueGenericSendFromISR+0x3e>
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <xQueueGenericSendFromISR+0x42>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <xQueueGenericSendFromISR+0x44>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10b      	bne.n	8006460 <xQueueGenericSendFromISR+0x60>
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	b672      	cpsid	i
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	b662      	cpsie	i
 800645c:	623b      	str	r3, [r7, #32]
 800645e:	e7fe      	b.n	800645e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d103      	bne.n	800646e <xQueueGenericSendFromISR+0x6e>
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <xQueueGenericSendFromISR+0x72>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <xQueueGenericSendFromISR+0x74>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10b      	bne.n	8006490 <xQueueGenericSendFromISR+0x90>
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	b672      	cpsid	i
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	b662      	cpsie	i
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	e7fe      	b.n	800648e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006490:	f002 fab2 	bl	80089f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006494:	f3ef 8211 	mrs	r2, BASEPRI
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	b672      	cpsid	i
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	b662      	cpsie	i
 80064ac:	61ba      	str	r2, [r7, #24]
 80064ae:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	429a      	cmp	r2, r3
 80064be:	d302      	bcc.n	80064c6 <xQueueGenericSendFromISR+0xc6>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d12c      	bne.n	8006520 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064d6:	f000 fbb0 	bl	8006c3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064da:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e2:	d112      	bne.n	800650a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d016      	beq.n	800651a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 f9a3 	bl	800783c <xTaskRemoveFromEventList>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00e      	beq.n	800651a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00b      	beq.n	800651a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	e007      	b.n	800651a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800650a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800650e:	3301      	adds	r3, #1
 8006510:	b2db      	uxtb	r3, r3
 8006512:	b25a      	sxtb	r2, r3
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800651a:	2301      	movs	r3, #1
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800651e:	e001      	b.n	8006524 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006520:	2300      	movs	r3, #0
 8006522:	637b      	str	r3, [r7, #52]	; 0x34
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006530:	4618      	mov	r0, r3
 8006532:	3738      	adds	r7, #56	; 0x38
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08e      	sub	sp, #56	; 0x38
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	b672      	cpsid	i
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	b662      	cpsie	i
 8006560:	623b      	str	r3, [r7, #32]
 8006562:	e7fe      	b.n	8006562 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <xQueueGiveFromISR+0x4c>
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	b672      	cpsid	i
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	b662      	cpsie	i
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	e7fe      	b.n	8006582 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d103      	bne.n	8006594 <xQueueGiveFromISR+0x5c>
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <xQueueGiveFromISR+0x60>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <xQueueGiveFromISR+0x62>
 8006598:	2300      	movs	r3, #0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <xQueueGiveFromISR+0x7e>
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	b672      	cpsid	i
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	b662      	cpsie	i
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	e7fe      	b.n	80065b4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065b6:	f002 fa1f 	bl	80089f8 <vPortValidateInterruptPriority>
	__asm volatile
 80065ba:	f3ef 8211 	mrs	r2, BASEPRI
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	b672      	cpsid	i
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	b662      	cpsie	i
 80065d2:	617a      	str	r2, [r7, #20]
 80065d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80065d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d22b      	bcs.n	8006642 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006604:	d112      	bne.n	800662c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d016      	beq.n	800663c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	3324      	adds	r3, #36	; 0x24
 8006612:	4618      	mov	r0, r3
 8006614:	f001 f912 	bl	800783c <xTaskRemoveFromEventList>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00e      	beq.n	800663c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e007      	b.n	800663c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800662c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006630:	3301      	adds	r3, #1
 8006632:	b2db      	uxtb	r3, r3
 8006634:	b25a      	sxtb	r2, r3
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800663c:	2301      	movs	r3, #1
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
 8006640:	e001      	b.n	8006646 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006642:	2300      	movs	r3, #0
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006652:	4618      	mov	r0, r3
 8006654:	3738      	adds	r7, #56	; 0x38
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08c      	sub	sp, #48	; 0x30
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10b      	bne.n	800668e <xQueueReceive+0x32>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	b672      	cpsid	i
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	b662      	cpsie	i
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	e7fe      	b.n	800668c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <xQueueReceive+0x40>
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <xQueueReceive+0x44>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <xQueueReceive+0x46>
 80066a0:	2300      	movs	r3, #0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10b      	bne.n	80066be <xQueueReceive+0x62>
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	b672      	cpsid	i
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	b662      	cpsie	i
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e7fe      	b.n	80066bc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066be:	f001 fa7b 	bl	8007bb8 <xTaskGetSchedulerState>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <xQueueReceive+0x72>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <xQueueReceive+0x76>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <xQueueReceive+0x78>
 80066d2:	2300      	movs	r3, #0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10b      	bne.n	80066f0 <xQueueReceive+0x94>
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	b672      	cpsid	i
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	b662      	cpsie	i
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	e7fe      	b.n	80066ee <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066f0:	f002 f8a2 	bl	8008838 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01f      	beq.n	8006740 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006704:	f000 fb03 	bl	8006d0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	1e5a      	subs	r2, r3, #1
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00f      	beq.n	8006738 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	3310      	adds	r3, #16
 800671c:	4618      	mov	r0, r3
 800671e:	f001 f88d 	bl	800783c <xTaskRemoveFromEventList>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006728:	4b3c      	ldr	r3, [pc, #240]	; (800681c <xQueueReceive+0x1c0>)
 800672a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006738:	f002 f8b0 	bl	800889c <vPortExitCritical>
				return pdPASS;
 800673c:	2301      	movs	r3, #1
 800673e:	e069      	b.n	8006814 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d103      	bne.n	800674e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006746:	f002 f8a9 	bl	800889c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800674a:	2300      	movs	r3, #0
 800674c:	e062      	b.n	8006814 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006754:	f107 0310 	add.w	r3, r7, #16
 8006758:	4618      	mov	r0, r3
 800675a:	f001 f8d3 	bl	8007904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800675e:	2301      	movs	r3, #1
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006762:	f002 f89b 	bl	800889c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006766:	f000 fe43 	bl	80073f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800676a:	f002 f865 	bl	8008838 <vPortEnterCritical>
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006774:	b25b      	sxtb	r3, r3
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800677a:	d103      	bne.n	8006784 <xQueueReceive+0x128>
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800678a:	b25b      	sxtb	r3, r3
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006790:	d103      	bne.n	800679a <xQueueReceive+0x13e>
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800679a:	f002 f87f 	bl	800889c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800679e:	1d3a      	adds	r2, r7, #4
 80067a0:	f107 0310 	add.w	r3, r7, #16
 80067a4:	4611      	mov	r1, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 f8c2 	bl	8007930 <xTaskCheckForTimeOut>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d123      	bne.n	80067fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b4:	f000 fb23 	bl	8006dfe <prvIsQueueEmpty>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d017      	beq.n	80067ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	3324      	adds	r3, #36	; 0x24
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4611      	mov	r1, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 ffe6 	bl	8007798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ce:	f000 fac4 	bl	8006d5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067d2:	f000 fe1b 	bl	800740c <xTaskResumeAll>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d189      	bne.n	80066f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80067dc:	4b0f      	ldr	r3, [pc, #60]	; (800681c <xQueueReceive+0x1c0>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	e780      	b.n	80066f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f0:	f000 fab3 	bl	8006d5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067f4:	f000 fe0a 	bl	800740c <xTaskResumeAll>
 80067f8:	e77a      	b.n	80066f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fc:	f000 faad 	bl	8006d5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006800:	f000 fe04 	bl	800740c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006806:	f000 fafa 	bl	8006dfe <prvIsQueueEmpty>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	f43f af6f 	beq.w	80066f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006812:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006814:	4618      	mov	r0, r3
 8006816:	3730      	adds	r7, #48	; 0x30
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	e000ed04 	.word	0xe000ed04

08006820 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08e      	sub	sp, #56	; 0x38
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800682a:	2300      	movs	r3, #0
 800682c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006832:	2300      	movs	r3, #0
 8006834:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <xQueueSemaphoreTake+0x34>
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	b672      	cpsid	i
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	b662      	cpsie	i
 8006850:	623b      	str	r3, [r7, #32]
 8006852:	e7fe      	b.n	8006852 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <xQueueSemaphoreTake+0x54>
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	b672      	cpsid	i
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	b662      	cpsie	i
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	e7fe      	b.n	8006872 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006874:	f001 f9a0 	bl	8007bb8 <xTaskGetSchedulerState>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <xQueueSemaphoreTake+0x64>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <xQueueSemaphoreTake+0x68>
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <xQueueSemaphoreTake+0x6a>
 8006888:	2300      	movs	r3, #0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <xQueueSemaphoreTake+0x86>
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	b672      	cpsid	i
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	b662      	cpsie	i
 80068a2:	61bb      	str	r3, [r7, #24]
 80068a4:	e7fe      	b.n	80068a4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068a6:	f001 ffc7 	bl	8008838 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d024      	beq.n	8006900 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80068c6:	f001 faf1 	bl	8007eac <pvTaskIncrementMutexHeldCount>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00f      	beq.n	80068f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	3310      	adds	r3, #16
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 ffad 	bl	800783c <xTaskRemoveFromEventList>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068e8:	4b54      	ldr	r3, [pc, #336]	; (8006a3c <xQueueSemaphoreTake+0x21c>)
 80068ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068f8:	f001 ffd0 	bl	800889c <vPortExitCritical>
				return pdPASS;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e098      	b.n	8006a32 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d112      	bne.n	800692c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <xQueueSemaphoreTake+0x104>
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	b672      	cpsid	i
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	b662      	cpsie	i
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	e7fe      	b.n	8006922 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006924:	f001 ffba 	bl	800889c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006928:	2300      	movs	r3, #0
 800692a:	e082      	b.n	8006a32 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	4618      	mov	r0, r3
 8006938:	f000 ffe4 	bl	8007904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006940:	f001 ffac 	bl	800889c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006944:	f000 fd54 	bl	80073f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006948:	f001 ff76 	bl	8008838 <vPortEnterCritical>
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006952:	b25b      	sxtb	r3, r3
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006958:	d103      	bne.n	8006962 <xQueueSemaphoreTake+0x142>
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006968:	b25b      	sxtb	r3, r3
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800696e:	d103      	bne.n	8006978 <xQueueSemaphoreTake+0x158>
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006978:	f001 ff90 	bl	800889c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800697c:	463a      	mov	r2, r7
 800697e:	f107 030c 	add.w	r3, r7, #12
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f000 ffd3 	bl	8007930 <xTaskCheckForTimeOut>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d132      	bne.n	80069f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006992:	f000 fa34 	bl	8006dfe <prvIsQueueEmpty>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d026      	beq.n	80069ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80069a4:	f001 ff48 	bl	8008838 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 f921 	bl	8007bf4 <xTaskPriorityInherit>
 80069b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80069b4:	f001 ff72 	bl	800889c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	3324      	adds	r3, #36	; 0x24
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	4611      	mov	r1, r2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fee9 	bl	8007798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069c8:	f000 f9c7 	bl	8006d5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069cc:	f000 fd1e 	bl	800740c <xTaskResumeAll>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f47f af67 	bne.w	80068a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80069d8:	4b18      	ldr	r3, [pc, #96]	; (8006a3c <xQueueSemaphoreTake+0x21c>)
 80069da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	e75d      	b.n	80068a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80069ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069ec:	f000 f9b5 	bl	8006d5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069f0:	f000 fd0c 	bl	800740c <xTaskResumeAll>
 80069f4:	e757      	b.n	80068a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80069f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069f8:	f000 f9af 	bl	8006d5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069fc:	f000 fd06 	bl	800740c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a02:	f000 f9fc 	bl	8006dfe <prvIsQueueEmpty>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f43f af4c 	beq.w	80068a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00d      	beq.n	8006a30 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006a14:	f001 ff10 	bl	8008838 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a1a:	f000 f8f6 	bl	8006c0a <prvGetDisinheritPriorityAfterTimeout>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 f9bc 	bl	8007da4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a2c:	f001 ff36 	bl	800889c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3738      	adds	r7, #56	; 0x38
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	e000ed04 	.word	0xe000ed04

08006a40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08e      	sub	sp, #56	; 0x38
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10b      	bne.n	8006a6e <xQueueReceiveFromISR+0x2e>
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	b672      	cpsid	i
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	b662      	cpsie	i
 8006a6a:	623b      	str	r3, [r7, #32]
 8006a6c:	e7fe      	b.n	8006a6c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d103      	bne.n	8006a7c <xQueueReceiveFromISR+0x3c>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <xQueueReceiveFromISR+0x40>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <xQueueReceiveFromISR+0x42>
 8006a80:	2300      	movs	r3, #0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <xQueueReceiveFromISR+0x5e>
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	b672      	cpsid	i
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	b662      	cpsie	i
 8006a9a:	61fb      	str	r3, [r7, #28]
 8006a9c:	e7fe      	b.n	8006a9c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a9e:	f001 ffab 	bl	80089f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	b672      	cpsid	i
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	b662      	cpsie	i
 8006aba:	61ba      	str	r2, [r7, #24]
 8006abc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006abe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d02f      	beq.n	8006b2e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006adc:	f000 f917 	bl	8006d0e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	1e5a      	subs	r2, r3, #1
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006af0:	d112      	bne.n	8006b18 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d016      	beq.n	8006b28 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	3310      	adds	r3, #16
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fe9c 	bl	800783c <xTaskRemoveFromEventList>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	e007      	b.n	8006b28 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	b25a      	sxtb	r2, r3
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2c:	e001      	b.n	8006b32 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3738      	adds	r7, #56	; 0x38
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	b672      	cpsid	i
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	b662      	cpsie	i
 8006b68:	60bb      	str	r3, [r7, #8]
 8006b6a:	e7fe      	b.n	8006b6a <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8006b6c:	f001 fe64 	bl	8008838 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006b76:	f001 fe91 	bl	800889c <vPortExitCritical>

	return uxReturn;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <uxQueueMessagesWaitingFromISR+0x2a>
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	b672      	cpsid	i
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	b662      	cpsie	i
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e7fe      	b.n	8006bac <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006bb4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10b      	bne.n	8006bec <vQueueDelete+0x2a>
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	b672      	cpsid	i
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	b662      	cpsie	i
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	e7fe      	b.n	8006bea <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f95d 	bl	8006eac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f002 f805 	bl	8008c0c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d006      	beq.n	8006c28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e001      	b.n	8006c2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
	}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b086      	sub	sp, #24
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10d      	bne.n	8006c74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d14d      	bne.n	8006cfc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 f82d 	bl	8007cc4 <xTaskPriorityDisinherit>
 8006c6a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	609a      	str	r2, [r3, #8]
 8006c72:	e043      	b.n	8006cfc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d119      	bne.n	8006cae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6858      	ldr	r0, [r3, #4]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	461a      	mov	r2, r3
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	f002 f90b 	bl	8008ea0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	441a      	add	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d32b      	bcc.n	8006cfc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	605a      	str	r2, [r3, #4]
 8006cac:	e026      	b.n	8006cfc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68d8      	ldr	r0, [r3, #12]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	f002 f8f1 	bl	8008ea0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	425b      	negs	r3, r3
 8006cc8:	441a      	add	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d207      	bcs.n	8006cea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	425b      	negs	r3, r3
 8006ce4:	441a      	add	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d105      	bne.n	8006cfc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d04:	697b      	ldr	r3, [r7, #20]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d018      	beq.n	8006d52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	441a      	add	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d303      	bcc.n	8006d42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68d9      	ldr	r1, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6838      	ldr	r0, [r7, #0]
 8006d4e:	f002 f8a7 	bl	8008ea0 <memcpy>
	}
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d62:	f001 fd69 	bl	8008838 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d6e:	e011      	b.n	8006d94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d012      	beq.n	8006d9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3324      	adds	r3, #36	; 0x24
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fd5d 	bl	800783c <xTaskRemoveFromEventList>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d88:	f000 fe36 	bl	80079f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	dce9      	bgt.n	8006d70 <prvUnlockQueue+0x16>
 8006d9c:	e000      	b.n	8006da0 <prvUnlockQueue+0x46>
					break;
 8006d9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	22ff      	movs	r2, #255	; 0xff
 8006da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006da8:	f001 fd78 	bl	800889c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dac:	f001 fd44 	bl	8008838 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006db6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006db8:	e011      	b.n	8006dde <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d012      	beq.n	8006de8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3310      	adds	r3, #16
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fd38 	bl	800783c <xTaskRemoveFromEventList>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dd2:	f000 fe11 	bl	80079f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dce9      	bgt.n	8006dba <prvUnlockQueue+0x60>
 8006de6:	e000      	b.n	8006dea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006de8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	22ff      	movs	r2, #255	; 0xff
 8006dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006df2:	f001 fd53 	bl	800889c <vPortExitCritical>
}
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e06:	f001 fd17 	bl	8008838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d102      	bne.n	8006e18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e12:	2301      	movs	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e001      	b.n	8006e1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e1c:	f001 fd3e 	bl	800889c <vPortExitCritical>

	return xReturn;
 8006e20:	68fb      	ldr	r3, [r7, #12]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e32:	f001 fd01 	bl	8008838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d102      	bne.n	8006e48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e42:	2301      	movs	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e001      	b.n	8006e4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e4c:	f001 fd26 	bl	800889c <vPortExitCritical>

	return xReturn;
 8006e50:	68fb      	ldr	r3, [r7, #12]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	e014      	b.n	8006e96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e6c:	4a0e      	ldr	r2, [pc, #56]	; (8006ea8 <vQueueAddToRegistry+0x4c>)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10b      	bne.n	8006e90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e78:	490b      	ldr	r1, [pc, #44]	; (8006ea8 <vQueueAddToRegistry+0x4c>)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e82:	4a09      	ldr	r2, [pc, #36]	; (8006ea8 <vQueueAddToRegistry+0x4c>)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	4413      	add	r3, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e8e:	e005      	b.n	8006e9c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b07      	cmp	r3, #7
 8006e9a:	d9e7      	bls.n	8006e6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20004b6c 	.word	0x20004b6c

08006eac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e016      	b.n	8006ee8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006eba:	4a10      	ldr	r2, [pc, #64]	; (8006efc <vQueueUnregisterQueue+0x50>)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d10b      	bne.n	8006ee2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006eca:	4a0c      	ldr	r2, [pc, #48]	; (8006efc <vQueueUnregisterQueue+0x50>)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2100      	movs	r1, #0
 8006ed0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006ed4:	4a09      	ldr	r2, [pc, #36]	; (8006efc <vQueueUnregisterQueue+0x50>)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4413      	add	r3, r2
 8006edc:	2200      	movs	r2, #0
 8006ede:	605a      	str	r2, [r3, #4]
				break;
 8006ee0:	e005      	b.n	8006eee <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b07      	cmp	r3, #7
 8006eec:	d9e5      	bls.n	8006eba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006eee:	bf00      	nop
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20004b6c 	.word	0x20004b6c

08006f00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f10:	f001 fc92 	bl	8008838 <vPortEnterCritical>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f1a:	b25b      	sxtb	r3, r3
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f20:	d103      	bne.n	8006f2a <vQueueWaitForMessageRestricted+0x2a>
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f30:	b25b      	sxtb	r3, r3
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f36:	d103      	bne.n	8006f40 <vQueueWaitForMessageRestricted+0x40>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f40:	f001 fcac 	bl	800889c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d106      	bne.n	8006f5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fc45 	bl	80077e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f5a:	6978      	ldr	r0, [r7, #20]
 8006f5c:	f7ff fefd 	bl	8006d5a <prvUnlockQueue>
	}
 8006f60:	bf00      	nop
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08e      	sub	sp, #56	; 0x38
 8006f6c:	af04      	add	r7, sp, #16
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10b      	bne.n	8006f94 <xTaskCreateStatic+0x2c>
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	b672      	cpsid	i
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	b662      	cpsie	i
 8006f90:	623b      	str	r3, [r7, #32]
 8006f92:	e7fe      	b.n	8006f92 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <xTaskCreateStatic+0x4a>
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	b672      	cpsid	i
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	b662      	cpsie	i
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	e7fe      	b.n	8006fb0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fb2:	235c      	movs	r3, #92	; 0x5c
 8006fb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b5c      	cmp	r3, #92	; 0x5c
 8006fba:	d00b      	beq.n	8006fd4 <xTaskCreateStatic+0x6c>
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	b672      	cpsid	i
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	b662      	cpsie	i
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	e7fe      	b.n	8006fd2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01e      	beq.n	800701a <xTaskCreateStatic+0xb2>
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01b      	beq.n	800701a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9303      	str	r3, [sp, #12]
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	9302      	str	r3, [sp, #8]
 8006ffc:	f107 0314 	add.w	r3, r7, #20
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f850 	bl	80070b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007014:	f000 f8de 	bl	80071d4 <prvAddNewTaskToReadyList>
 8007018:	e001      	b.n	800701e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800701e:	697b      	ldr	r3, [r7, #20]
	}
 8007020:	4618      	mov	r0, r3
 8007022:	3728      	adds	r7, #40	; 0x28
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08c      	sub	sp, #48	; 0x30
 800702c:	af04      	add	r7, sp, #16
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	4613      	mov	r3, r2
 8007036:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4618      	mov	r0, r3
 800703e:	f001 fd1d 	bl	8008a7c <pvPortMalloc>
 8007042:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00e      	beq.n	8007068 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800704a:	205c      	movs	r0, #92	; 0x5c
 800704c:	f001 fd16 	bl	8008a7c <pvPortMalloc>
 8007050:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	631a      	str	r2, [r3, #48]	; 0x30
 800705e:	e005      	b.n	800706c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007060:	6978      	ldr	r0, [r7, #20]
 8007062:	f001 fdd3 	bl	8008c0c <vPortFree>
 8007066:	e001      	b.n	800706c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d017      	beq.n	80070a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	2300      	movs	r3, #0
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	9302      	str	r3, [sp, #8]
 8007084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68b9      	ldr	r1, [r7, #8]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f80e 	bl	80070b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007096:	69f8      	ldr	r0, [r7, #28]
 8007098:	f000 f89c 	bl	80071d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800709c:	2301      	movs	r3, #1
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	e002      	b.n	80070a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070a8:	69bb      	ldr	r3, [r7, #24]
	}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b088      	sub	sp, #32
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	461a      	mov	r2, r3
 80070ca:	21a5      	movs	r1, #165	; 0xa5
 80070cc:	f001 fef3 	bl	8008eb6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80070da:	440b      	add	r3, r1
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f023 0307 	bic.w	r3, r3, #7
 80070e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <prvInitialiseNewTask+0x5a>
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	b672      	cpsid	i
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	b662      	cpsie	i
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	e7fe      	b.n	800710a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01f      	beq.n	8007152 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007112:	2300      	movs	r3, #0
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	e012      	b.n	800713e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	7819      	ldrb	r1, [r3, #0]
 8007120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	3334      	adds	r3, #52	; 0x34
 8007128:	460a      	mov	r2, r1
 800712a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4413      	add	r3, r2
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d006      	beq.n	8007146 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	3301      	adds	r3, #1
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	2b0f      	cmp	r3, #15
 8007142:	d9e9      	bls.n	8007118 <prvInitialiseNewTask+0x66>
 8007144:	e000      	b.n	8007148 <prvInitialiseNewTask+0x96>
			{
				break;
 8007146:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007150:	e003      	b.n	800715a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	2b37      	cmp	r3, #55	; 0x37
 800715e:	d901      	bls.n	8007164 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007160:	2337      	movs	r3, #55	; 0x37
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007168:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800716e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	2200      	movs	r2, #0
 8007174:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	3304      	adds	r3, #4
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fdf0 	bl	8005d60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	3318      	adds	r3, #24
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fdeb 	bl	8005d60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800718e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	2200      	movs	r2, #0
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	68f9      	ldr	r1, [r7, #12]
 80071b2:	69b8      	ldr	r0, [r7, #24]
 80071b4:	f001 fa36 	bl	8008624 <pxPortInitialiseStack>
 80071b8:	4602      	mov	r2, r0
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071ca:	bf00      	nop
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071dc:	f001 fb2c 	bl	8008838 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071e0:	4b2d      	ldr	r3, [pc, #180]	; (8007298 <prvAddNewTaskToReadyList+0xc4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3301      	adds	r3, #1
 80071e6:	4a2c      	ldr	r2, [pc, #176]	; (8007298 <prvAddNewTaskToReadyList+0xc4>)
 80071e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071ea:	4b2c      	ldr	r3, [pc, #176]	; (800729c <prvAddNewTaskToReadyList+0xc8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071f2:	4a2a      	ldr	r2, [pc, #168]	; (800729c <prvAddNewTaskToReadyList+0xc8>)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071f8:	4b27      	ldr	r3, [pc, #156]	; (8007298 <prvAddNewTaskToReadyList+0xc4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d110      	bne.n	8007222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007200:	f000 fc1e 	bl	8007a40 <prvInitialiseTaskLists>
 8007204:	e00d      	b.n	8007222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007206:	4b26      	ldr	r3, [pc, #152]	; (80072a0 <prvAddNewTaskToReadyList+0xcc>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d109      	bne.n	8007222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800720e:	4b23      	ldr	r3, [pc, #140]	; (800729c <prvAddNewTaskToReadyList+0xc8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	429a      	cmp	r2, r3
 800721a:	d802      	bhi.n	8007222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800721c:	4a1f      	ldr	r2, [pc, #124]	; (800729c <prvAddNewTaskToReadyList+0xc8>)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007222:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <prvAddNewTaskToReadyList+0xd0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3301      	adds	r3, #1
 8007228:	4a1e      	ldr	r2, [pc, #120]	; (80072a4 <prvAddNewTaskToReadyList+0xd0>)
 800722a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800722c:	4b1d      	ldr	r3, [pc, #116]	; (80072a4 <prvAddNewTaskToReadyList+0xd0>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007238:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <prvAddNewTaskToReadyList+0xd4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d903      	bls.n	8007248 <prvAddNewTaskToReadyList+0x74>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <prvAddNewTaskToReadyList+0xd4>)
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724c:	4613      	mov	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4a15      	ldr	r2, [pc, #84]	; (80072ac <prvAddNewTaskToReadyList+0xd8>)
 8007256:	441a      	add	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	4619      	mov	r1, r3
 800725e:	4610      	mov	r0, r2
 8007260:	f7fe fd8b 	bl	8005d7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007264:	f001 fb1a 	bl	800889c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007268:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <prvAddNewTaskToReadyList+0xcc>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00e      	beq.n	800728e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <prvAddNewTaskToReadyList+0xc8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	429a      	cmp	r2, r3
 800727c:	d207      	bcs.n	800728e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <prvAddNewTaskToReadyList+0xdc>)
 8007280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000c60 	.word	0x20000c60
 800729c:	2000078c 	.word	0x2000078c
 80072a0:	20000c6c 	.word	0x20000c6c
 80072a4:	20000c7c 	.word	0x20000c7c
 80072a8:	20000c68 	.word	0x20000c68
 80072ac:	20000790 	.word	0x20000790
 80072b0:	e000ed04 	.word	0xe000ed04

080072b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d018      	beq.n	80072f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <vTaskDelay+0x64>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <vTaskDelay+0x32>
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	b672      	cpsid	i
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	b662      	cpsie	i
 80072e2:	60bb      	str	r3, [r7, #8]
 80072e4:	e7fe      	b.n	80072e4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80072e6:	f000 f883 	bl	80073f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072ea:	2100      	movs	r1, #0
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fdf1 	bl	8007ed4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072f2:	f000 f88b 	bl	800740c <xTaskResumeAll>
 80072f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d107      	bne.n	800730e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80072fe:	4b07      	ldr	r3, [pc, #28]	; (800731c <vTaskDelay+0x68>)
 8007300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000c88 	.word	0x20000c88
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800732e:	463a      	mov	r2, r7
 8007330:	1d39      	adds	r1, r7, #4
 8007332:	f107 0308 	add.w	r3, r7, #8
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fcbe 	bl	8005cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	9202      	str	r2, [sp, #8]
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	2300      	movs	r3, #0
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	2300      	movs	r3, #0
 800734c:	460a      	mov	r2, r1
 800734e:	4922      	ldr	r1, [pc, #136]	; (80073d8 <vTaskStartScheduler+0xb8>)
 8007350:	4822      	ldr	r0, [pc, #136]	; (80073dc <vTaskStartScheduler+0xbc>)
 8007352:	f7ff fe09 	bl	8006f68 <xTaskCreateStatic>
 8007356:	4602      	mov	r2, r0
 8007358:	4b21      	ldr	r3, [pc, #132]	; (80073e0 <vTaskStartScheduler+0xc0>)
 800735a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800735c:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <vTaskStartScheduler+0xc0>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007364:	2301      	movs	r3, #1
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e001      	b.n	800736e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d102      	bne.n	800737a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007374:	f000 fe02 	bl	8007f7c <xTimerCreateTimerTask>
 8007378:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d117      	bne.n	80073b0 <vTaskStartScheduler+0x90>
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	b672      	cpsid	i
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	b662      	cpsie	i
 8007394:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <vTaskStartScheduler+0xc4>)
 8007398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800739c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <vTaskStartScheduler+0xc8>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <vTaskStartScheduler+0xcc>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073aa:	f001 f9c9 	bl	8008740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073ae:	e00f      	b.n	80073d0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b6:	d10b      	bne.n	80073d0 <vTaskStartScheduler+0xb0>
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	b672      	cpsid	i
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	b662      	cpsie	i
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	e7fe      	b.n	80073ce <vTaskStartScheduler+0xae>
}
 80073d0:	bf00      	nop
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	080098dc 	.word	0x080098dc
 80073dc:	08007a11 	.word	0x08007a11
 80073e0:	20000c84 	.word	0x20000c84
 80073e4:	20000c80 	.word	0x20000c80
 80073e8:	20000c6c 	.word	0x20000c6c
 80073ec:	20000c64 	.word	0x20000c64

080073f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80073f4:	4b04      	ldr	r3, [pc, #16]	; (8007408 <vTaskSuspendAll+0x18>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3301      	adds	r3, #1
 80073fa:	4a03      	ldr	r2, [pc, #12]	; (8007408 <vTaskSuspendAll+0x18>)
 80073fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80073fe:	bf00      	nop
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	20000c88 	.word	0x20000c88

0800740c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007416:	2300      	movs	r3, #0
 8007418:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800741a:	4b42      	ldr	r3, [pc, #264]	; (8007524 <xTaskResumeAll+0x118>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10b      	bne.n	800743a <xTaskResumeAll+0x2e>
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	b672      	cpsid	i
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	b662      	cpsie	i
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	e7fe      	b.n	8007438 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800743a:	f001 f9fd 	bl	8008838 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800743e:	4b39      	ldr	r3, [pc, #228]	; (8007524 <xTaskResumeAll+0x118>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3b01      	subs	r3, #1
 8007444:	4a37      	ldr	r2, [pc, #220]	; (8007524 <xTaskResumeAll+0x118>)
 8007446:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007448:	4b36      	ldr	r3, [pc, #216]	; (8007524 <xTaskResumeAll+0x118>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d162      	bne.n	8007516 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007450:	4b35      	ldr	r3, [pc, #212]	; (8007528 <xTaskResumeAll+0x11c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d05e      	beq.n	8007516 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007458:	e02f      	b.n	80074ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800745a:	4b34      	ldr	r3, [pc, #208]	; (800752c <xTaskResumeAll+0x120>)
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3318      	adds	r3, #24
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fce4 	bl	8005e34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3304      	adds	r3, #4
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe fcdf 	bl	8005e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747a:	4b2d      	ldr	r3, [pc, #180]	; (8007530 <xTaskResumeAll+0x124>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d903      	bls.n	800748a <xTaskResumeAll+0x7e>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <xTaskResumeAll+0x124>)
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4a27      	ldr	r2, [pc, #156]	; (8007534 <xTaskResumeAll+0x128>)
 8007498:	441a      	add	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3304      	adds	r3, #4
 800749e:	4619      	mov	r1, r3
 80074a0:	4610      	mov	r0, r2
 80074a2:	f7fe fc6a 	bl	8005d7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074aa:	4b23      	ldr	r3, [pc, #140]	; (8007538 <xTaskResumeAll+0x12c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d302      	bcc.n	80074ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80074b4:	4b21      	ldr	r3, [pc, #132]	; (800753c <xTaskResumeAll+0x130>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074ba:	4b1c      	ldr	r3, [pc, #112]	; (800752c <xTaskResumeAll+0x120>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1cb      	bne.n	800745a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074c8:	f000 fb56 	bl	8007b78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80074cc:	4b1c      	ldr	r3, [pc, #112]	; (8007540 <xTaskResumeAll+0x134>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d010      	beq.n	80074fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074d8:	f000 f846 	bl	8007568 <xTaskIncrementTick>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80074e2:	4b16      	ldr	r3, [pc, #88]	; (800753c <xTaskResumeAll+0x130>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f1      	bne.n	80074d8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80074f4:	4b12      	ldr	r3, [pc, #72]	; (8007540 <xTaskResumeAll+0x134>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074fa:	4b10      	ldr	r3, [pc, #64]	; (800753c <xTaskResumeAll+0x130>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d009      	beq.n	8007516 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007502:	2301      	movs	r3, #1
 8007504:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007506:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <xTaskResumeAll+0x138>)
 8007508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007516:	f001 f9c1 	bl	800889c <vPortExitCritical>

	return xAlreadyYielded;
 800751a:	68bb      	ldr	r3, [r7, #8]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000c88 	.word	0x20000c88
 8007528:	20000c60 	.word	0x20000c60
 800752c:	20000c20 	.word	0x20000c20
 8007530:	20000c68 	.word	0x20000c68
 8007534:	20000790 	.word	0x20000790
 8007538:	2000078c 	.word	0x2000078c
 800753c:	20000c74 	.word	0x20000c74
 8007540:	20000c70 	.word	0x20000c70
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <xTaskGetTickCount+0x1c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007554:	687b      	ldr	r3, [r7, #4]
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	20000c64 	.word	0x20000c64

08007568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007572:	4b4f      	ldr	r3, [pc, #316]	; (80076b0 <xTaskIncrementTick+0x148>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 808a 	bne.w	8007690 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800757c:	4b4d      	ldr	r3, [pc, #308]	; (80076b4 <xTaskIncrementTick+0x14c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007584:	4a4b      	ldr	r2, [pc, #300]	; (80076b4 <xTaskIncrementTick+0x14c>)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d121      	bne.n	80075d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007590:	4b49      	ldr	r3, [pc, #292]	; (80076b8 <xTaskIncrementTick+0x150>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <xTaskIncrementTick+0x4a>
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	b672      	cpsid	i
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	b662      	cpsie	i
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	e7fe      	b.n	80075b0 <xTaskIncrementTick+0x48>
 80075b2:	4b41      	ldr	r3, [pc, #260]	; (80076b8 <xTaskIncrementTick+0x150>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	4b40      	ldr	r3, [pc, #256]	; (80076bc <xTaskIncrementTick+0x154>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a3e      	ldr	r2, [pc, #248]	; (80076b8 <xTaskIncrementTick+0x150>)
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	4a3e      	ldr	r2, [pc, #248]	; (80076bc <xTaskIncrementTick+0x154>)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	4b3e      	ldr	r3, [pc, #248]	; (80076c0 <xTaskIncrementTick+0x158>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3301      	adds	r3, #1
 80075cc:	4a3c      	ldr	r2, [pc, #240]	; (80076c0 <xTaskIncrementTick+0x158>)
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	f000 fad2 	bl	8007b78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075d4:	4b3b      	ldr	r3, [pc, #236]	; (80076c4 <xTaskIncrementTick+0x15c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d349      	bcc.n	8007672 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075de:	4b36      	ldr	r3, [pc, #216]	; (80076b8 <xTaskIncrementTick+0x150>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d104      	bne.n	80075f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e8:	4b36      	ldr	r3, [pc, #216]	; (80076c4 <xTaskIncrementTick+0x15c>)
 80075ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075ee:	601a      	str	r2, [r3, #0]
					break;
 80075f0:	e03f      	b.n	8007672 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f2:	4b31      	ldr	r3, [pc, #196]	; (80076b8 <xTaskIncrementTick+0x150>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	429a      	cmp	r2, r3
 8007608:	d203      	bcs.n	8007612 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800760a:	4a2e      	ldr	r2, [pc, #184]	; (80076c4 <xTaskIncrementTick+0x15c>)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007610:	e02f      	b.n	8007672 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	3304      	adds	r3, #4
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fc0c 	bl	8005e34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	3318      	adds	r3, #24
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fc03 	bl	8005e34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007632:	4b25      	ldr	r3, [pc, #148]	; (80076c8 <xTaskIncrementTick+0x160>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d903      	bls.n	8007642 <xTaskIncrementTick+0xda>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	4a22      	ldr	r2, [pc, #136]	; (80076c8 <xTaskIncrementTick+0x160>)
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <xTaskIncrementTick+0x164>)
 8007650:	441a      	add	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7fe fb8e 	bl	8005d7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <xTaskIncrementTick+0x168>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	429a      	cmp	r2, r3
 800766a:	d3b8      	bcc.n	80075de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800766c:	2301      	movs	r3, #1
 800766e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007670:	e7b5      	b.n	80075de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007672:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <xTaskIncrementTick+0x168>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007678:	4914      	ldr	r1, [pc, #80]	; (80076cc <xTaskIncrementTick+0x164>)
 800767a:	4613      	mov	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	440b      	add	r3, r1
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d907      	bls.n	800769a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800768a:	2301      	movs	r3, #1
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	e004      	b.n	800769a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007690:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <xTaskIncrementTick+0x16c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3301      	adds	r3, #1
 8007696:	4a0f      	ldr	r2, [pc, #60]	; (80076d4 <xTaskIncrementTick+0x16c>)
 8007698:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800769a:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <xTaskIncrementTick+0x170>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80076a6:	697b      	ldr	r3, [r7, #20]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20000c88 	.word	0x20000c88
 80076b4:	20000c64 	.word	0x20000c64
 80076b8:	20000c18 	.word	0x20000c18
 80076bc:	20000c1c 	.word	0x20000c1c
 80076c0:	20000c78 	.word	0x20000c78
 80076c4:	20000c80 	.word	0x20000c80
 80076c8:	20000c68 	.word	0x20000c68
 80076cc:	20000790 	.word	0x20000790
 80076d0:	2000078c 	.word	0x2000078c
 80076d4:	20000c70 	.word	0x20000c70
 80076d8:	20000c74 	.word	0x20000c74

080076dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076e2:	4b28      	ldr	r3, [pc, #160]	; (8007784 <vTaskSwitchContext+0xa8>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076ea:	4b27      	ldr	r3, [pc, #156]	; (8007788 <vTaskSwitchContext+0xac>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076f0:	e042      	b.n	8007778 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80076f2:	4b25      	ldr	r3, [pc, #148]	; (8007788 <vTaskSwitchContext+0xac>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f8:	4b24      	ldr	r3, [pc, #144]	; (800778c <vTaskSwitchContext+0xb0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	e011      	b.n	8007724 <vTaskSwitchContext+0x48>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <vTaskSwitchContext+0x42>
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	b672      	cpsid	i
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	b662      	cpsie	i
 800771a:	607b      	str	r3, [r7, #4]
 800771c:	e7fe      	b.n	800771c <vTaskSwitchContext+0x40>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3b01      	subs	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	491a      	ldr	r1, [pc, #104]	; (8007790 <vTaskSwitchContext+0xb4>)
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0e3      	beq.n	8007700 <vTaskSwitchContext+0x24>
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4a13      	ldr	r2, [pc, #76]	; (8007790 <vTaskSwitchContext+0xb4>)
 8007744:	4413      	add	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3308      	adds	r3, #8
 800775a:	429a      	cmp	r2, r3
 800775c:	d104      	bne.n	8007768 <vTaskSwitchContext+0x8c>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	605a      	str	r2, [r3, #4]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	4a09      	ldr	r2, [pc, #36]	; (8007794 <vTaskSwitchContext+0xb8>)
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	4a06      	ldr	r2, [pc, #24]	; (800778c <vTaskSwitchContext+0xb0>)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6013      	str	r3, [r2, #0]
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	20000c88 	.word	0x20000c88
 8007788:	20000c74 	.word	0x20000c74
 800778c:	20000c68 	.word	0x20000c68
 8007790:	20000790 	.word	0x20000790
 8007794:	2000078c 	.word	0x2000078c

08007798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <vTaskPlaceOnEventList+0x28>
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	b672      	cpsid	i
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	b662      	cpsie	i
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	e7fe      	b.n	80077be <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <vTaskPlaceOnEventList+0x48>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3318      	adds	r3, #24
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7fe fafa 	bl	8005dc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077ce:	2101      	movs	r1, #1
 80077d0:	6838      	ldr	r0, [r7, #0]
 80077d2:	f000 fb7f 	bl	8007ed4 <prvAddCurrentTaskToDelayedList>
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	2000078c 	.word	0x2000078c

080077e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10b      	bne.n	800780e <vTaskPlaceOnEventListRestricted+0x2a>
 80077f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fa:	b672      	cpsid	i
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	b662      	cpsie	i
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	e7fe      	b.n	800780c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800780e:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <vTaskPlaceOnEventListRestricted+0x54>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3318      	adds	r3, #24
 8007814:	4619      	mov	r1, r3
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7fe faaf 	bl	8005d7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007826:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	68b8      	ldr	r0, [r7, #8]
 800782c:	f000 fb52 	bl	8007ed4 <prvAddCurrentTaskToDelayedList>
	}
 8007830:	bf00      	nop
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	2000078c 	.word	0x2000078c

0800783c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <xTaskRemoveFromEventList+0x2e>
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	b672      	cpsid	i
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	b662      	cpsie	i
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	e7fe      	b.n	8007868 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	3318      	adds	r3, #24
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fae0 	bl	8005e34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007874:	4b1d      	ldr	r3, [pc, #116]	; (80078ec <xTaskRemoveFromEventList+0xb0>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11d      	bne.n	80078b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	3304      	adds	r3, #4
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe fad7 	bl	8005e34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788a:	4b19      	ldr	r3, [pc, #100]	; (80078f0 <xTaskRemoveFromEventList+0xb4>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d903      	bls.n	800789a <xTaskRemoveFromEventList+0x5e>
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	4a16      	ldr	r2, [pc, #88]	; (80078f0 <xTaskRemoveFromEventList+0xb4>)
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4a13      	ldr	r2, [pc, #76]	; (80078f4 <xTaskRemoveFromEventList+0xb8>)
 80078a8:	441a      	add	r2, r3
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	3304      	adds	r3, #4
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f7fe fa62 	bl	8005d7a <vListInsertEnd>
 80078b6:	e005      	b.n	80078c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	3318      	adds	r3, #24
 80078bc:	4619      	mov	r1, r3
 80078be:	480e      	ldr	r0, [pc, #56]	; (80078f8 <xTaskRemoveFromEventList+0xbc>)
 80078c0:	f7fe fa5b 	bl	8005d7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4b0c      	ldr	r3, [pc, #48]	; (80078fc <xTaskRemoveFromEventList+0xc0>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d905      	bls.n	80078de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078d2:	2301      	movs	r3, #1
 80078d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078d6:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <xTaskRemoveFromEventList+0xc4>)
 80078d8:	2201      	movs	r2, #1
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e001      	b.n	80078e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078e2:	697b      	ldr	r3, [r7, #20]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000c88 	.word	0x20000c88
 80078f0:	20000c68 	.word	0x20000c68
 80078f4:	20000790 	.word	0x20000790
 80078f8:	20000c20 	.word	0x20000c20
 80078fc:	2000078c 	.word	0x2000078c
 8007900:	20000c74 	.word	0x20000c74

08007904 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <vTaskInternalSetTimeOutState+0x24>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <vTaskInternalSetTimeOutState+0x28>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	605a      	str	r2, [r3, #4]
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	20000c78 	.word	0x20000c78
 800792c:	20000c64 	.word	0x20000c64

08007930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10b      	bne.n	8007958 <xTaskCheckForTimeOut+0x28>
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	b672      	cpsid	i
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	b662      	cpsie	i
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	e7fe      	b.n	8007956 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10b      	bne.n	8007976 <xTaskCheckForTimeOut+0x46>
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	b672      	cpsid	i
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	b662      	cpsie	i
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e7fe      	b.n	8007974 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8007976:	f000 ff5f 	bl	8008838 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800797a:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <xTaskCheckForTimeOut+0xc0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007992:	d102      	bne.n	800799a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	e023      	b.n	80079e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b15      	ldr	r3, [pc, #84]	; (80079f4 <xTaskCheckForTimeOut+0xc4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d007      	beq.n	80079b6 <xTaskCheckForTimeOut+0x86>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d302      	bcc.n	80079b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	e015      	b.n	80079e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d20b      	bcs.n	80079d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ff99 	bl	8007904 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
 80079d6:	e004      	b.n	80079e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079de:	2301      	movs	r3, #1
 80079e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079e2:	f000 ff5b 	bl	800889c <vPortExitCritical>

	return xReturn;
 80079e6:	69fb      	ldr	r3, [r7, #28]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3720      	adds	r7, #32
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20000c64 	.word	0x20000c64
 80079f4:	20000c78 	.word	0x20000c78

080079f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079fc:	4b03      	ldr	r3, [pc, #12]	; (8007a0c <vTaskMissedYield+0x14>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
}
 8007a02:	bf00      	nop
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20000c74 	.word	0x20000c74

08007a10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a18:	f000 f852 	bl	8007ac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <prvIdleTask+0x28>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d9f9      	bls.n	8007a18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a24:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <prvIdleTask+0x2c>)
 8007a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a34:	e7f0      	b.n	8007a18 <prvIdleTask+0x8>
 8007a36:	bf00      	nop
 8007a38:	20000790 	.word	0x20000790
 8007a3c:	e000ed04 	.word	0xe000ed04

08007a40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a46:	2300      	movs	r3, #0
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	e00c      	b.n	8007a66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4a12      	ldr	r2, [pc, #72]	; (8007aa0 <prvInitialiseTaskLists+0x60>)
 8007a58:	4413      	add	r3, r2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe f960 	bl	8005d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3301      	adds	r3, #1
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b37      	cmp	r3, #55	; 0x37
 8007a6a:	d9ef      	bls.n	8007a4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a6c:	480d      	ldr	r0, [pc, #52]	; (8007aa4 <prvInitialiseTaskLists+0x64>)
 8007a6e:	f7fe f957 	bl	8005d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a72:	480d      	ldr	r0, [pc, #52]	; (8007aa8 <prvInitialiseTaskLists+0x68>)
 8007a74:	f7fe f954 	bl	8005d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a78:	480c      	ldr	r0, [pc, #48]	; (8007aac <prvInitialiseTaskLists+0x6c>)
 8007a7a:	f7fe f951 	bl	8005d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a7e:	480c      	ldr	r0, [pc, #48]	; (8007ab0 <prvInitialiseTaskLists+0x70>)
 8007a80:	f7fe f94e 	bl	8005d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a84:	480b      	ldr	r0, [pc, #44]	; (8007ab4 <prvInitialiseTaskLists+0x74>)
 8007a86:	f7fe f94b 	bl	8005d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <prvInitialiseTaskLists+0x78>)
 8007a8c:	4a05      	ldr	r2, [pc, #20]	; (8007aa4 <prvInitialiseTaskLists+0x64>)
 8007a8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <prvInitialiseTaskLists+0x7c>)
 8007a92:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <prvInitialiseTaskLists+0x68>)
 8007a94:	601a      	str	r2, [r3, #0]
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000790 	.word	0x20000790
 8007aa4:	20000bf0 	.word	0x20000bf0
 8007aa8:	20000c04 	.word	0x20000c04
 8007aac:	20000c20 	.word	0x20000c20
 8007ab0:	20000c34 	.word	0x20000c34
 8007ab4:	20000c4c 	.word	0x20000c4c
 8007ab8:	20000c18 	.word	0x20000c18
 8007abc:	20000c1c 	.word	0x20000c1c

08007ac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ac6:	e019      	b.n	8007afc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ac8:	f000 feb6 	bl	8008838 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007acc:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <prvCheckTasksWaitingTermination+0x4c>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe f9ab 	bl	8005e34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ade:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <prvCheckTasksWaitingTermination+0x50>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	4a0a      	ldr	r2, [pc, #40]	; (8007b10 <prvCheckTasksWaitingTermination+0x50>)
 8007ae6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <prvCheckTasksWaitingTermination+0x54>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <prvCheckTasksWaitingTermination+0x54>)
 8007af0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007af2:	f000 fed3 	bl	800889c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f80e 	bl	8007b18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007afc:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <prvCheckTasksWaitingTermination+0x54>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e1      	bne.n	8007ac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20000c34 	.word	0x20000c34
 8007b10:	20000c60 	.word	0x20000c60
 8007b14:	20000c48 	.word	0x20000c48

08007b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d108      	bne.n	8007b3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 f86c 	bl	8008c0c <vPortFree>
				vPortFree( pxTCB );
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 f869 	bl	8008c0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b3a:	e019      	b.n	8007b70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d103      	bne.n	8007b4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 f860 	bl	8008c0c <vPortFree>
	}
 8007b4c:	e010      	b.n	8007b70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d00b      	beq.n	8007b70 <prvDeleteTCB+0x58>
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	b672      	cpsid	i
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	b662      	cpsie	i
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	e7fe      	b.n	8007b6e <prvDeleteTCB+0x56>
	}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b7e:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <prvResetNextTaskUnblockTime+0x38>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d104      	bne.n	8007b92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b88:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <prvResetNextTaskUnblockTime+0x3c>)
 8007b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b90:	e008      	b.n	8007ba4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <prvResetNextTaskUnblockTime+0x38>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	4a04      	ldr	r2, [pc, #16]	; (8007bb4 <prvResetNextTaskUnblockTime+0x3c>)
 8007ba2:	6013      	str	r3, [r2, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	20000c18 	.word	0x20000c18
 8007bb4:	20000c80 	.word	0x20000c80

08007bb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <xTaskGetSchedulerState+0x34>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	607b      	str	r3, [r7, #4]
 8007bca:	e008      	b.n	8007bde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <xTaskGetSchedulerState+0x38>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	607b      	str	r3, [r7, #4]
 8007bd8:	e001      	b.n	8007bde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bde:	687b      	ldr	r3, [r7, #4]
	}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	20000c6c 	.word	0x20000c6c
 8007bf0:	20000c88 	.word	0x20000c88

08007bf4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d051      	beq.n	8007cae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0e:	4b2a      	ldr	r3, [pc, #168]	; (8007cb8 <xTaskPriorityInherit+0xc4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d241      	bcs.n	8007c9c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	db06      	blt.n	8007c2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c20:	4b25      	ldr	r3, [pc, #148]	; (8007cb8 <xTaskPriorityInherit+0xc4>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6959      	ldr	r1, [r3, #20]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4a1f      	ldr	r2, [pc, #124]	; (8007cbc <xTaskPriorityInherit+0xc8>)
 8007c40:	4413      	add	r3, r2
 8007c42:	4299      	cmp	r1, r3
 8007c44:	d122      	bne.n	8007c8c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe f8f2 	bl	8005e34 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c50:	4b19      	ldr	r3, [pc, #100]	; (8007cb8 <xTaskPriorityInherit+0xc4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5e:	4b18      	ldr	r3, [pc, #96]	; (8007cc0 <xTaskPriorityInherit+0xcc>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d903      	bls.n	8007c6e <xTaskPriorityInherit+0x7a>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	4a15      	ldr	r2, [pc, #84]	; (8007cc0 <xTaskPriorityInherit+0xcc>)
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4a10      	ldr	r2, [pc, #64]	; (8007cbc <xTaskPriorityInherit+0xc8>)
 8007c7c:	441a      	add	r2, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4619      	mov	r1, r3
 8007c84:	4610      	mov	r0, r2
 8007c86:	f7fe f878 	bl	8005d7a <vListInsertEnd>
 8007c8a:	e004      	b.n	8007c96 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <xTaskPriorityInherit+0xc4>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c96:	2301      	movs	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	e008      	b.n	8007cae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ca0:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <xTaskPriorityInherit+0xc4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d201      	bcs.n	8007cae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007caa:	2301      	movs	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cae:	68fb      	ldr	r3, [r7, #12]
	}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	2000078c 	.word	0x2000078c
 8007cbc:	20000790 	.word	0x20000790
 8007cc0:	20000c68 	.word	0x20000c68

08007cc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d058      	beq.n	8007d8c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cda:	4b2f      	ldr	r3, [pc, #188]	; (8007d98 <xTaskPriorityDisinherit+0xd4>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d00b      	beq.n	8007cfc <xTaskPriorityDisinherit+0x38>
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	b672      	cpsid	i
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	b662      	cpsie	i
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e7fe      	b.n	8007cfa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10b      	bne.n	8007d1c <xTaskPriorityDisinherit+0x58>
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	b672      	cpsid	i
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	b662      	cpsie	i
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	e7fe      	b.n	8007d1a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d20:	1e5a      	subs	r2, r3, #1
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d02c      	beq.n	8007d8c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d128      	bne.n	8007d8c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe f878 	bl	8005e34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <xTaskPriorityDisinherit+0xd8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d903      	bls.n	8007d6c <xTaskPriorityDisinherit+0xa8>
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	4a0c      	ldr	r2, [pc, #48]	; (8007d9c <xTaskPriorityDisinherit+0xd8>)
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4a09      	ldr	r2, [pc, #36]	; (8007da0 <xTaskPriorityDisinherit+0xdc>)
 8007d7a:	441a      	add	r2, r3
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4619      	mov	r1, r3
 8007d82:	4610      	mov	r0, r2
 8007d84:	f7fd fff9 	bl	8005d7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d8c:	697b      	ldr	r3, [r7, #20]
	}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	2000078c 	.word	0x2000078c
 8007d9c:	20000c68 	.word	0x20000c68
 8007da0:	20000790 	.word	0x20000790

08007da4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007db2:	2301      	movs	r3, #1
 8007db4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d06c      	beq.n	8007e96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <vTaskPriorityDisinheritAfterTimeout+0x38>
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	b672      	cpsid	i
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	b662      	cpsie	i
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e7fe      	b.n	8007dda <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d902      	bls.n	8007dec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	e002      	b.n	8007df2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	69fa      	ldr	r2, [r7, #28]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d04c      	beq.n	8007e96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d147      	bne.n	8007e96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e06:	4b26      	ldr	r3, [pc, #152]	; (8007ea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d10b      	bne.n	8007e28 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	b672      	cpsid	i
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	b662      	cpsie	i
 8007e24:	60bb      	str	r3, [r7, #8]
 8007e26:	e7fe      	b.n	8007e26 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	db04      	blt.n	8007e46 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	6959      	ldr	r1, [r3, #20]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e56:	4413      	add	r3, r2
 8007e58:	4299      	cmp	r1, r3
 8007e5a:	d11c      	bne.n	8007e96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fd ffe7 	bl	8005e34 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d903      	bls.n	8007e7a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	4a0c      	ldr	r2, [pc, #48]	; (8007ea8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7e:	4613      	mov	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4a07      	ldr	r2, [pc, #28]	; (8007ea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e88:	441a      	add	r2, r3
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f7fd ff72 	bl	8005d7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e96:	bf00      	nop
 8007e98:	3720      	adds	r7, #32
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	2000078c 	.word	0x2000078c
 8007ea4:	20000790 	.word	0x20000790
 8007ea8:	20000c68 	.word	0x20000c68

08007eac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d004      	beq.n	8007ec2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ebe:	3201      	adds	r2, #1
 8007ec0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007ec2:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
	}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	2000078c 	.word	0x2000078c

08007ed4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ede:	4b21      	ldr	r3, [pc, #132]	; (8007f64 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ee4:	4b20      	ldr	r3, [pc, #128]	; (8007f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fd ffa2 	bl	8005e34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef6:	d10a      	bne.n	8007f0e <prvAddCurrentTaskToDelayedList+0x3a>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007efe:	4b1a      	ldr	r3, [pc, #104]	; (8007f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4619      	mov	r1, r3
 8007f06:	4819      	ldr	r0, [pc, #100]	; (8007f6c <prvAddCurrentTaskToDelayedList+0x98>)
 8007f08:	f7fd ff37 	bl	8005d7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f0c:	e026      	b.n	8007f5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4413      	add	r3, r2
 8007f14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f16:	4b14      	ldr	r3, [pc, #80]	; (8007f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d209      	bcs.n	8007f3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f26:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4b0f      	ldr	r3, [pc, #60]	; (8007f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f7fd ff45 	bl	8005dc2 <vListInsert>
}
 8007f38:	e010      	b.n	8007f5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f3a:	4b0e      	ldr	r3, [pc, #56]	; (8007f74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f7fd ff3b 	bl	8005dc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d202      	bcs.n	8007f5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f56:	4a08      	ldr	r2, [pc, #32]	; (8007f78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	6013      	str	r3, [r2, #0]
}
 8007f5c:	bf00      	nop
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000c64 	.word	0x20000c64
 8007f68:	2000078c 	.word	0x2000078c
 8007f6c:	20000c4c 	.word	0x20000c4c
 8007f70:	20000c1c 	.word	0x20000c1c
 8007f74:	20000c18 	.word	0x20000c18
 8007f78:	20000c80 	.word	0x20000c80

08007f7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	; 0x28
 8007f80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f86:	f000 fb0d 	bl	80085a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f8a:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <xTimerCreateTimerTask+0x84>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d021      	beq.n	8007fd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f9a:	1d3a      	adds	r2, r7, #4
 8007f9c:	f107 0108 	add.w	r1, r7, #8
 8007fa0:	f107 030c 	add.w	r3, r7, #12
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fd fea1 	bl	8005cec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	9202      	str	r2, [sp, #8]
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	2332      	movs	r3, #50	; 0x32
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	460a      	mov	r2, r1
 8007fbc:	4911      	ldr	r1, [pc, #68]	; (8008004 <xTimerCreateTimerTask+0x88>)
 8007fbe:	4812      	ldr	r0, [pc, #72]	; (8008008 <xTimerCreateTimerTask+0x8c>)
 8007fc0:	f7fe ffd2 	bl	8006f68 <xTaskCreateStatic>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	4b11      	ldr	r3, [pc, #68]	; (800800c <xTimerCreateTimerTask+0x90>)
 8007fc8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fca:	4b10      	ldr	r3, [pc, #64]	; (800800c <xTimerCreateTimerTask+0x90>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <xTimerCreateTimerTask+0x78>
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	b672      	cpsid	i
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	b662      	cpsie	i
 8007ff0:	613b      	str	r3, [r7, #16]
 8007ff2:	e7fe      	b.n	8007ff2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8007ff4:	697b      	ldr	r3, [r7, #20]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000cbc 	.word	0x20000cbc
 8008004:	080098e4 	.word	0x080098e4
 8008008:	08008149 	.word	0x08008149
 800800c:	20000cc0 	.word	0x20000cc0

08008010 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800801e:	2300      	movs	r3, #0
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <xTimerGenericCommand+0x30>
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	b672      	cpsid	i
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	b662      	cpsie	i
 800803c:	623b      	str	r3, [r7, #32]
 800803e:	e7fe      	b.n	800803e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008040:	4b19      	ldr	r3, [pc, #100]	; (80080a8 <xTimerGenericCommand+0x98>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d02a      	beq.n	800809e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b05      	cmp	r3, #5
 8008058:	dc18      	bgt.n	800808c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800805a:	f7ff fdad 	bl	8007bb8 <xTaskGetSchedulerState>
 800805e:	4603      	mov	r3, r0
 8008060:	2b02      	cmp	r3, #2
 8008062:	d109      	bne.n	8008078 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008064:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <xTimerGenericCommand+0x98>)
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	f107 0110 	add.w	r1, r7, #16
 800806c:	2300      	movs	r3, #0
 800806e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008070:	f7fe f8c4 	bl	80061fc <xQueueGenericSend>
 8008074:	6278      	str	r0, [r7, #36]	; 0x24
 8008076:	e012      	b.n	800809e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <xTimerGenericCommand+0x98>)
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	f107 0110 	add.w	r1, r7, #16
 8008080:	2300      	movs	r3, #0
 8008082:	2200      	movs	r2, #0
 8008084:	f7fe f8ba 	bl	80061fc <xQueueGenericSend>
 8008088:	6278      	str	r0, [r7, #36]	; 0x24
 800808a:	e008      	b.n	800809e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800808c:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <xTimerGenericCommand+0x98>)
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	f107 0110 	add.w	r1, r7, #16
 8008094:	2300      	movs	r3, #0
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	f7fe f9b2 	bl	8006400 <xQueueGenericSendFromISR>
 800809c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3728      	adds	r7, #40	; 0x28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000cbc 	.word	0x20000cbc

080080ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b6:	4b23      	ldr	r3, [pc, #140]	; (8008144 <prvProcessExpiredTimer+0x98>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fd feb5 	bl	8005e34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d023      	beq.n	8008120 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	18d1      	adds	r1, r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	6978      	ldr	r0, [r7, #20]
 80080e6:	f000 f8d3 	bl	8008290 <prvInsertTimerInActiveList>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d020      	beq.n	8008132 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080f0:	2300      	movs	r3, #0
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	2100      	movs	r1, #0
 80080fa:	6978      	ldr	r0, [r7, #20]
 80080fc:	f7ff ff88 	bl	8008010 <xTimerGenericCommand>
 8008100:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d114      	bne.n	8008132 <prvProcessExpiredTimer+0x86>
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e7fe      	b.n	800811e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008126:	f023 0301 	bic.w	r3, r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	6978      	ldr	r0, [r7, #20]
 8008138:	4798      	blx	r3
}
 800813a:	bf00      	nop
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20000cb4 	.word	0x20000cb4

08008148 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008150:	f107 0308 	add.w	r3, r7, #8
 8008154:	4618      	mov	r0, r3
 8008156:	f000 f857 	bl	8008208 <prvGetNextExpireTime>
 800815a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	4619      	mov	r1, r3
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 f803 	bl	800816c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008166:	f000 f8d5 	bl	8008314 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800816a:	e7f1      	b.n	8008150 <prvTimerTask+0x8>

0800816c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008176:	f7ff f93b 	bl	80073f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	4618      	mov	r0, r3
 8008180:	f000 f866 	bl	8008250 <prvSampleTimeNow>
 8008184:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d130      	bne.n	80081ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <prvProcessTimerOrBlockTask+0x3c>
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	429a      	cmp	r2, r3
 8008198:	d806      	bhi.n	80081a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800819a:	f7ff f937 	bl	800740c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800819e:	68f9      	ldr	r1, [r7, #12]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ff83 	bl	80080ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081a6:	e024      	b.n	80081f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d008      	beq.n	80081c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081ae:	4b13      	ldr	r3, [pc, #76]	; (80081fc <prvProcessTimerOrBlockTask+0x90>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <prvProcessTimerOrBlockTask+0x50>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <prvProcessTimerOrBlockTask+0x52>
 80081bc:	2300      	movs	r3, #0
 80081be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081c0:	4b0f      	ldr	r3, [pc, #60]	; (8008200 <prvProcessTimerOrBlockTask+0x94>)
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	4619      	mov	r1, r3
 80081ce:	f7fe fe97 	bl	8006f00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081d2:	f7ff f91b 	bl	800740c <xTaskResumeAll>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <prvProcessTimerOrBlockTask+0x98>)
 80081de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	f3bf 8f6f 	isb	sy
}
 80081ec:	e001      	b.n	80081f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081ee:	f7ff f90d 	bl	800740c <xTaskResumeAll>
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000cb8 	.word	0x20000cb8
 8008200:	20000cbc 	.word	0x20000cbc
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008210:	4b0e      	ldr	r3, [pc, #56]	; (800824c <prvGetNextExpireTime+0x44>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <prvGetNextExpireTime+0x16>
 800821a:	2201      	movs	r2, #1
 800821c:	e000      	b.n	8008220 <prvGetNextExpireTime+0x18>
 800821e:	2200      	movs	r2, #0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d105      	bne.n	8008238 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <prvGetNextExpireTime+0x44>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	e001      	b.n	800823c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800823c:	68fb      	ldr	r3, [r7, #12]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20000cb4 	.word	0x20000cb4

08008250 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008258:	f7ff f976 	bl	8007548 <xTaskGetTickCount>
 800825c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800825e:	4b0b      	ldr	r3, [pc, #44]	; (800828c <prvSampleTimeNow+0x3c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	429a      	cmp	r2, r3
 8008266:	d205      	bcs.n	8008274 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008268:	f000 f936 	bl	80084d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	e002      	b.n	800827a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800827a:	4a04      	ldr	r2, [pc, #16]	; (800828c <prvSampleTimeNow+0x3c>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008280:	68fb      	ldr	r3, [r7, #12]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000cc4 	.word	0x20000cc4

08008290 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d812      	bhi.n	80082dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	1ad2      	subs	r2, r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d302      	bcc.n	80082ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082c4:	2301      	movs	r3, #1
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	e01b      	b.n	8008302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082ca:	4b10      	ldr	r3, [pc, #64]	; (800830c <prvInsertTimerInActiveList+0x7c>)
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fd fd74 	bl	8005dc2 <vListInsert>
 80082da:	e012      	b.n	8008302 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d206      	bcs.n	80082f2 <prvInsertTimerInActiveList+0x62>
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d302      	bcc.n	80082f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	e007      	b.n	8008302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082f2:	4b07      	ldr	r3, [pc, #28]	; (8008310 <prvInsertTimerInActiveList+0x80>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7fd fd60 	bl	8005dc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008302:	697b      	ldr	r3, [r7, #20]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000cb8 	.word	0x20000cb8
 8008310:	20000cb4 	.word	0x20000cb4

08008314 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08e      	sub	sp, #56	; 0x38
 8008318:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800831a:	e0cc      	b.n	80084b6 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	da19      	bge.n	8008356 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008322:	1d3b      	adds	r3, r7, #4
 8008324:	3304      	adds	r3, #4
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10b      	bne.n	8008346 <prvProcessReceivedCommands+0x32>
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	b672      	cpsid	i
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	b662      	cpsie	i
 8008342:	61fb      	str	r3, [r7, #28]
 8008344:	e7fe      	b.n	8008344 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800834c:	6850      	ldr	r0, [r2, #4]
 800834e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008350:	6892      	ldr	r2, [r2, #8]
 8008352:	4611      	mov	r1, r2
 8008354:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f2c0 80ab 	blt.w	80084b4 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d004      	beq.n	8008374 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	3304      	adds	r3, #4
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd fd60 	bl	8005e34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008374:	463b      	mov	r3, r7
 8008376:	4618      	mov	r0, r3
 8008378:	f7ff ff6a 	bl	8008250 <prvSampleTimeNow>
 800837c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b09      	cmp	r3, #9
 8008382:	f200 8098 	bhi.w	80084b6 <prvProcessReceivedCommands+0x1a2>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <prvProcessReceivedCommands+0x78>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083b5 	.word	0x080083b5
 8008390:	080083b5 	.word	0x080083b5
 8008394:	080083b5 	.word	0x080083b5
 8008398:	0800842b 	.word	0x0800842b
 800839c:	0800843f 	.word	0x0800843f
 80083a0:	0800848b 	.word	0x0800848b
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083b5 	.word	0x080083b5
 80083ac:	0800842b 	.word	0x0800842b
 80083b0:	0800843f 	.word	0x0800843f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	18d1      	adds	r1, r2, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083d4:	f7ff ff5c 	bl	8008290 <prvInsertTimerInActiveList>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d06b      	beq.n	80084b6 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d060      	beq.n	80084b6 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	441a      	add	r2, r3
 80083fc:	2300      	movs	r3, #0
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	2100      	movs	r1, #0
 8008404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008406:	f7ff fe03 	bl	8008010 <xTimerGenericCommand>
 800840a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d151      	bne.n	80084b6 <prvProcessReceivedCommands+0x1a2>
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	b672      	cpsid	i
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	b662      	cpsie	i
 8008426:	61bb      	str	r3, [r7, #24]
 8008428:	e7fe      	b.n	8008428 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	b2da      	uxtb	r2, r3
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800843c:	e03b      	b.n	80084b6 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008444:	f043 0301 	orr.w	r3, r3, #1
 8008448:	b2da      	uxtb	r2, r3
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10b      	bne.n	8008476 <prvProcessReceivedCommands+0x162>
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	b672      	cpsid	i
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	b662      	cpsie	i
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	e7fe      	b.n	8008474 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	18d1      	adds	r1, r2, r3
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008484:	f7ff ff04 	bl	8008290 <prvInsertTimerInActiveList>
					break;
 8008488:	e015      	b.n	80084b6 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800849a:	f000 fbb7 	bl	8008c0c <vPortFree>
 800849e:	e00a      	b.n	80084b6 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084a6:	f023 0301 	bic.w	r3, r3, #1
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084b2:	e000      	b.n	80084b6 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084b6:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <prvProcessReceivedCommands+0x1c0>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	1d39      	adds	r1, r7, #4
 80084bc:	2200      	movs	r2, #0
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe f8cc 	bl	800665c <xQueueReceive>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f47f af28 	bne.w	800831c <prvProcessReceivedCommands+0x8>
	}
}
 80084cc:	bf00      	nop
 80084ce:	3730      	adds	r7, #48	; 0x30
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20000cbc 	.word	0x20000cbc

080084d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084de:	e049      	b.n	8008574 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084e0:	4b2e      	ldr	r3, [pc, #184]	; (800859c <prvSwitchTimerLists+0xc4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ea:	4b2c      	ldr	r3, [pc, #176]	; (800859c <prvSwitchTimerLists+0xc4>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3304      	adds	r3, #4
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fd fc9b 	bl	8005e34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d02f      	beq.n	8008574 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	4413      	add	r3, r2
 800851c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	429a      	cmp	r2, r3
 8008524:	d90e      	bls.n	8008544 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008532:	4b1a      	ldr	r3, [pc, #104]	; (800859c <prvSwitchTimerLists+0xc4>)
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3304      	adds	r3, #4
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f7fd fc40 	bl	8005dc2 <vListInsert>
 8008542:	e017      	b.n	8008574 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008544:	2300      	movs	r3, #0
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	2300      	movs	r3, #0
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	2100      	movs	r1, #0
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff fd5e 	bl	8008010 <xTimerGenericCommand>
 8008554:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10b      	bne.n	8008574 <prvSwitchTimerLists+0x9c>
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	b672      	cpsid	i
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	b662      	cpsie	i
 8008570:	603b      	str	r3, [r7, #0]
 8008572:	e7fe      	b.n	8008572 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008574:	4b09      	ldr	r3, [pc, #36]	; (800859c <prvSwitchTimerLists+0xc4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1b0      	bne.n	80084e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800857e:	4b07      	ldr	r3, [pc, #28]	; (800859c <prvSwitchTimerLists+0xc4>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008584:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <prvSwitchTimerLists+0xc8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a04      	ldr	r2, [pc, #16]	; (800859c <prvSwitchTimerLists+0xc4>)
 800858a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800858c:	4a04      	ldr	r2, [pc, #16]	; (80085a0 <prvSwitchTimerLists+0xc8>)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	6013      	str	r3, [r2, #0]
}
 8008592:	bf00      	nop
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000cb4 	.word	0x20000cb4
 80085a0:	20000cb8 	.word	0x20000cb8

080085a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085aa:	f000 f945 	bl	8008838 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085ae:	4b15      	ldr	r3, [pc, #84]	; (8008604 <prvCheckForValidListAndQueue+0x60>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d120      	bne.n	80085f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085b6:	4814      	ldr	r0, [pc, #80]	; (8008608 <prvCheckForValidListAndQueue+0x64>)
 80085b8:	f7fd fbb2 	bl	8005d20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085bc:	4813      	ldr	r0, [pc, #76]	; (800860c <prvCheckForValidListAndQueue+0x68>)
 80085be:	f7fd fbaf 	bl	8005d20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085c2:	4b13      	ldr	r3, [pc, #76]	; (8008610 <prvCheckForValidListAndQueue+0x6c>)
 80085c4:	4a10      	ldr	r2, [pc, #64]	; (8008608 <prvCheckForValidListAndQueue+0x64>)
 80085c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085c8:	4b12      	ldr	r3, [pc, #72]	; (8008614 <prvCheckForValidListAndQueue+0x70>)
 80085ca:	4a10      	ldr	r2, [pc, #64]	; (800860c <prvCheckForValidListAndQueue+0x68>)
 80085cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085ce:	2300      	movs	r3, #0
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	4b11      	ldr	r3, [pc, #68]	; (8008618 <prvCheckForValidListAndQueue+0x74>)
 80085d4:	4a11      	ldr	r2, [pc, #68]	; (800861c <prvCheckForValidListAndQueue+0x78>)
 80085d6:	2110      	movs	r1, #16
 80085d8:	200a      	movs	r0, #10
 80085da:	f7fd fcbf 	bl	8005f5c <xQueueGenericCreateStatic>
 80085de:	4602      	mov	r2, r0
 80085e0:	4b08      	ldr	r3, [pc, #32]	; (8008604 <prvCheckForValidListAndQueue+0x60>)
 80085e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085e4:	4b07      	ldr	r3, [pc, #28]	; (8008604 <prvCheckForValidListAndQueue+0x60>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085ec:	4b05      	ldr	r3, [pc, #20]	; (8008604 <prvCheckForValidListAndQueue+0x60>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	490b      	ldr	r1, [pc, #44]	; (8008620 <prvCheckForValidListAndQueue+0x7c>)
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fc32 	bl	8006e5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085f8:	f000 f950 	bl	800889c <vPortExitCritical>
}
 80085fc:	bf00      	nop
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000cbc 	.word	0x20000cbc
 8008608:	20000c8c 	.word	0x20000c8c
 800860c:	20000ca0 	.word	0x20000ca0
 8008610:	20000cb4 	.word	0x20000cb4
 8008614:	20000cb8 	.word	0x20000cb8
 8008618:	20000d68 	.word	0x20000d68
 800861c:	20000cc8 	.word	0x20000cc8
 8008620:	080098ec 	.word	0x080098ec

08008624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3b04      	subs	r3, #4
 8008634:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800863c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3b04      	subs	r3, #4
 8008642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f023 0201 	bic.w	r2, r3, #1
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3b04      	subs	r3, #4
 8008652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008654:	4a0c      	ldr	r2, [pc, #48]	; (8008688 <pxPortInitialiseStack+0x64>)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3b14      	subs	r3, #20
 800865e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3b04      	subs	r3, #4
 800866a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f06f 0202 	mvn.w	r2, #2
 8008672:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3b20      	subs	r3, #32
 8008678:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800867a:	68fb      	ldr	r3, [r7, #12]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	0800868d 	.word	0x0800868d

0800868c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008696:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <prvTaskExitError+0x58>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800869e:	d00b      	beq.n	80086b8 <prvTaskExitError+0x2c>
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	b672      	cpsid	i
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	b662      	cpsie	i
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e7fe      	b.n	80086b6 <prvTaskExitError+0x2a>
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	b672      	cpsid	i
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	b662      	cpsie	i
 80086cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086ce:	bf00      	nop
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0fc      	beq.n	80086d0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086d6:	bf00      	nop
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	2000003c 	.word	0x2000003c
	...

080086f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <pxCurrentTCBConst2>)
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	6808      	ldr	r0, [r1, #0]
 80086f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	f380 8809 	msr	PSP, r0
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f380 8811 	msr	BASEPRI, r0
 800870a:	4770      	bx	lr
 800870c:	f3af 8000 	nop.w

08008710 <pxCurrentTCBConst2>:
 8008710:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008718:	4808      	ldr	r0, [pc, #32]	; (800873c <prvPortStartFirstTask+0x24>)
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	6800      	ldr	r0, [r0, #0]
 800871e:	f380 8808 	msr	MSP, r0
 8008722:	f04f 0000 	mov.w	r0, #0
 8008726:	f380 8814 	msr	CONTROL, r0
 800872a:	b662      	cpsie	i
 800872c:	b661      	cpsie	f
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	df00      	svc	0
 8008738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800873a:	bf00      	nop
 800873c:	e000ed08 	.word	0xe000ed08

08008740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008746:	4b36      	ldr	r3, [pc, #216]	; (8008820 <xPortStartScheduler+0xe0>)
 8008748:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	b2db      	uxtb	r3, r3
 8008750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	22ff      	movs	r2, #255	; 0xff
 8008756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008768:	b2da      	uxtb	r2, r3
 800876a:	4b2e      	ldr	r3, [pc, #184]	; (8008824 <xPortStartScheduler+0xe4>)
 800876c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800876e:	4b2e      	ldr	r3, [pc, #184]	; (8008828 <xPortStartScheduler+0xe8>)
 8008770:	2207      	movs	r2, #7
 8008772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008774:	e009      	b.n	800878a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008776:	4b2c      	ldr	r3, [pc, #176]	; (8008828 <xPortStartScheduler+0xe8>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3b01      	subs	r3, #1
 800877c:	4a2a      	ldr	r2, [pc, #168]	; (8008828 <xPortStartScheduler+0xe8>)
 800877e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	b2db      	uxtb	r3, r3
 8008788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008792:	2b80      	cmp	r3, #128	; 0x80
 8008794:	d0ef      	beq.n	8008776 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008796:	4b24      	ldr	r3, [pc, #144]	; (8008828 <xPortStartScheduler+0xe8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1c3 0307 	rsb	r3, r3, #7
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d00b      	beq.n	80087ba <xPortStartScheduler+0x7a>
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	b672      	cpsid	i
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	b662      	cpsie	i
 80087b6:	60bb      	str	r3, [r7, #8]
 80087b8:	e7fe      	b.n	80087b8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087ba:	4b1b      	ldr	r3, [pc, #108]	; (8008828 <xPortStartScheduler+0xe8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	4a19      	ldr	r2, [pc, #100]	; (8008828 <xPortStartScheduler+0xe8>)
 80087c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087c4:	4b18      	ldr	r3, [pc, #96]	; (8008828 <xPortStartScheduler+0xe8>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087cc:	4a16      	ldr	r2, [pc, #88]	; (8008828 <xPortStartScheduler+0xe8>)
 80087ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087d8:	4b14      	ldr	r3, [pc, #80]	; (800882c <xPortStartScheduler+0xec>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a13      	ldr	r2, [pc, #76]	; (800882c <xPortStartScheduler+0xec>)
 80087de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087e4:	4b11      	ldr	r3, [pc, #68]	; (800882c <xPortStartScheduler+0xec>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a10      	ldr	r2, [pc, #64]	; (800882c <xPortStartScheduler+0xec>)
 80087ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087f0:	f000 f8d4 	bl	800899c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087f4:	4b0e      	ldr	r3, [pc, #56]	; (8008830 <xPortStartScheduler+0xf0>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087fa:	f000 f8f3 	bl	80089e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087fe:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <xPortStartScheduler+0xf4>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a0c      	ldr	r2, [pc, #48]	; (8008834 <xPortStartScheduler+0xf4>)
 8008804:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008808:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800880a:	f7ff ff85 	bl	8008718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800880e:	f7fe ff65 	bl	80076dc <vTaskSwitchContext>
	prvTaskExitError();
 8008812:	f7ff ff3b 	bl	800868c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	e000e400 	.word	0xe000e400
 8008824:	20000db8 	.word	0x20000db8
 8008828:	20000dbc 	.word	0x20000dbc
 800882c:	e000ed20 	.word	0xe000ed20
 8008830:	2000003c 	.word	0x2000003c
 8008834:	e000ef34 	.word	0xe000ef34

08008838 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	b672      	cpsid	i
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	b662      	cpsie	i
 8008852:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008854:	4b0f      	ldr	r3, [pc, #60]	; (8008894 <vPortEnterCritical+0x5c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	4a0e      	ldr	r2, [pc, #56]	; (8008894 <vPortEnterCritical+0x5c>)
 800885c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800885e:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <vPortEnterCritical+0x5c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d110      	bne.n	8008888 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008866:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <vPortEnterCritical+0x60>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <vPortEnterCritical+0x50>
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	b672      	cpsid	i
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	b662      	cpsie	i
 8008884:	603b      	str	r3, [r7, #0]
 8008886:	e7fe      	b.n	8008886 <vPortEnterCritical+0x4e>
	}
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	2000003c 	.word	0x2000003c
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088a2:	4b12      	ldr	r3, [pc, #72]	; (80088ec <vPortExitCritical+0x50>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10b      	bne.n	80088c2 <vPortExitCritical+0x26>
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	b672      	cpsid	i
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	b662      	cpsie	i
 80088be:	607b      	str	r3, [r7, #4]
 80088c0:	e7fe      	b.n	80088c0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80088c2:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <vPortExitCritical+0x50>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	4a08      	ldr	r2, [pc, #32]	; (80088ec <vPortExitCritical+0x50>)
 80088ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088cc:	4b07      	ldr	r3, [pc, #28]	; (80088ec <vPortExitCritical+0x50>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d104      	bne.n	80088de <vPortExitCritical+0x42>
 80088d4:	2300      	movs	r3, #0
 80088d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80088de:	bf00      	nop
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	2000003c 	.word	0x2000003c

080088f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088f0:	f3ef 8009 	mrs	r0, PSP
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	4b15      	ldr	r3, [pc, #84]	; (8008950 <pxCurrentTCBConst>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	f01e 0f10 	tst.w	lr, #16
 8008900:	bf08      	it	eq
 8008902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890a:	6010      	str	r0, [r2, #0]
 800890c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008914:	b672      	cpsid	i
 8008916:	f380 8811 	msr	BASEPRI, r0
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	b662      	cpsie	i
 8008924:	f7fe feda 	bl	80076dc <vTaskSwitchContext>
 8008928:	f04f 0000 	mov.w	r0, #0
 800892c:	f380 8811 	msr	BASEPRI, r0
 8008930:	bc09      	pop	{r0, r3}
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	6808      	ldr	r0, [r1, #0]
 8008936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893a:	f01e 0f10 	tst.w	lr, #16
 800893e:	bf08      	it	eq
 8008940:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008944:	f380 8809 	msr	PSP, r0
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop

08008950 <pxCurrentTCBConst>:
 8008950:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop

08008958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	b672      	cpsid	i
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	b662      	cpsie	i
 8008972:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008974:	f7fe fdf8 	bl	8007568 <xTaskIncrementTick>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <SysTick_Handler+0x40>)
 8008980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	2300      	movs	r3, #0
 8008988:	603b      	str	r3, [r7, #0]
	__asm volatile
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <vPortSetupTimerInterrupt+0x34>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089a6:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <vPortSetupTimerInterrupt+0x38>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <vPortSetupTimerInterrupt+0x3c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a0a      	ldr	r2, [pc, #40]	; (80089dc <vPortSetupTimerInterrupt+0x40>)
 80089b2:	fba2 2303 	umull	r2, r3, r2, r3
 80089b6:	099b      	lsrs	r3, r3, #6
 80089b8:	4a09      	ldr	r2, [pc, #36]	; (80089e0 <vPortSetupTimerInterrupt+0x44>)
 80089ba:	3b01      	subs	r3, #1
 80089bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089be:	4b04      	ldr	r3, [pc, #16]	; (80089d0 <vPortSetupTimerInterrupt+0x34>)
 80089c0:	2207      	movs	r2, #7
 80089c2:	601a      	str	r2, [r3, #0]
}
 80089c4:	bf00      	nop
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	e000e010 	.word	0xe000e010
 80089d4:	e000e018 	.word	0xe000e018
 80089d8:	20000030 	.word	0x20000030
 80089dc:	10624dd3 	.word	0x10624dd3
 80089e0:	e000e014 	.word	0xe000e014

080089e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089f4 <vPortEnableVFP+0x10>
 80089e8:	6801      	ldr	r1, [r0, #0]
 80089ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089ee:	6001      	str	r1, [r0, #0]
 80089f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089f2:	bf00      	nop
 80089f4:	e000ed88 	.word	0xe000ed88

080089f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089fe:	f3ef 8305 	mrs	r3, IPSR
 8008a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b0f      	cmp	r3, #15
 8008a08:	d915      	bls.n	8008a36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a0a:	4a18      	ldr	r2, [pc, #96]	; (8008a6c <vPortValidateInterruptPriority+0x74>)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4413      	add	r3, r2
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a14:	4b16      	ldr	r3, [pc, #88]	; (8008a70 <vPortValidateInterruptPriority+0x78>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	7afa      	ldrb	r2, [r7, #11]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d20b      	bcs.n	8008a36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	b672      	cpsid	i
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	b662      	cpsie	i
 8008a32:	607b      	str	r3, [r7, #4]
 8008a34:	e7fe      	b.n	8008a34 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a36:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <vPortValidateInterruptPriority+0x7c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a3e:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <vPortValidateInterruptPriority+0x80>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d90b      	bls.n	8008a5e <vPortValidateInterruptPriority+0x66>
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	b672      	cpsid	i
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	b662      	cpsie	i
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	e7fe      	b.n	8008a5c <vPortValidateInterruptPriority+0x64>
	}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	e000e3f0 	.word	0xe000e3f0
 8008a70:	20000db8 	.word	0x20000db8
 8008a74:	e000ed0c 	.word	0xe000ed0c
 8008a78:	20000dbc 	.word	0x20000dbc

08008a7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08a      	sub	sp, #40	; 0x28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a88:	f7fe fcb2 	bl	80073f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a8c:	4b5a      	ldr	r3, [pc, #360]	; (8008bf8 <pvPortMalloc+0x17c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a94:	f000 f916 	bl	8008cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a98:	4b58      	ldr	r3, [pc, #352]	; (8008bfc <pvPortMalloc+0x180>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f040 8090 	bne.w	8008bc6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d01e      	beq.n	8008aea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008aac:	2208      	movs	r2, #8
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d015      	beq.n	8008aea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f023 0307 	bic.w	r3, r3, #7
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00b      	beq.n	8008aea <pvPortMalloc+0x6e>
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	b672      	cpsid	i
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	b662      	cpsie	i
 8008ae6:	617b      	str	r3, [r7, #20]
 8008ae8:	e7fe      	b.n	8008ae8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d06a      	beq.n	8008bc6 <pvPortMalloc+0x14a>
 8008af0:	4b43      	ldr	r3, [pc, #268]	; (8008c00 <pvPortMalloc+0x184>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d865      	bhi.n	8008bc6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008afa:	4b42      	ldr	r3, [pc, #264]	; (8008c04 <pvPortMalloc+0x188>)
 8008afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008afe:	4b41      	ldr	r3, [pc, #260]	; (8008c04 <pvPortMalloc+0x188>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b04:	e004      	b.n	8008b10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d903      	bls.n	8008b22 <pvPortMalloc+0xa6>
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1f1      	bne.n	8008b06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b22:	4b35      	ldr	r3, [pc, #212]	; (8008bf8 <pvPortMalloc+0x17c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d04c      	beq.n	8008bc6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2208      	movs	r2, #8
 8008b32:	4413      	add	r3, r2
 8008b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	1ad2      	subs	r2, r2, r3
 8008b46:	2308      	movs	r3, #8
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d920      	bls.n	8008b90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4413      	add	r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <pvPortMalloc+0xfc>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	b672      	cpsid	i
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	b662      	cpsie	i
 8008b74:	613b      	str	r3, [r7, #16]
 8008b76:	e7fe      	b.n	8008b76 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b8a:	69b8      	ldr	r0, [r7, #24]
 8008b8c:	f000 f8fc 	bl	8008d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b90:	4b1b      	ldr	r3, [pc, #108]	; (8008c00 <pvPortMalloc+0x184>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	4a19      	ldr	r2, [pc, #100]	; (8008c00 <pvPortMalloc+0x184>)
 8008b9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b9e:	4b18      	ldr	r3, [pc, #96]	; (8008c00 <pvPortMalloc+0x184>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	4b19      	ldr	r3, [pc, #100]	; (8008c08 <pvPortMalloc+0x18c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d203      	bcs.n	8008bb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008baa:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <pvPortMalloc+0x184>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a16      	ldr	r2, [pc, #88]	; (8008c08 <pvPortMalloc+0x18c>)
 8008bb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <pvPortMalloc+0x180>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bc6:	f7fe fc21 	bl	800740c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00b      	beq.n	8008bec <pvPortMalloc+0x170>
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	b672      	cpsid	i
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	b662      	cpsie	i
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	e7fe      	b.n	8008bea <pvPortMalloc+0x16e>
	return pvReturn;
 8008bec:	69fb      	ldr	r3, [r7, #28]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3728      	adds	r7, #40	; 0x28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	200049c8 	.word	0x200049c8
 8008bfc:	200049d4 	.word	0x200049d4
 8008c00:	200049cc 	.word	0x200049cc
 8008c04:	200049c0 	.word	0x200049c0
 8008c08:	200049d0 	.word	0x200049d0

08008c0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d04a      	beq.n	8008cb4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c1e:	2308      	movs	r3, #8
 8008c20:	425b      	negs	r3, r3
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4413      	add	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	4b22      	ldr	r3, [pc, #136]	; (8008cbc <vPortFree+0xb0>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4013      	ands	r3, r2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10b      	bne.n	8008c52 <vPortFree+0x46>
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	b672      	cpsid	i
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	b662      	cpsie	i
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	e7fe      	b.n	8008c50 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <vPortFree+0x66>
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	b672      	cpsid	i
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	b662      	cpsie	i
 8008c6e:	60bb      	str	r3, [r7, #8]
 8008c70:	e7fe      	b.n	8008c70 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	4b11      	ldr	r3, [pc, #68]	; (8008cbc <vPortFree+0xb0>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d019      	beq.n	8008cb4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d115      	bne.n	8008cb4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <vPortFree+0xb0>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	43db      	mvns	r3, r3
 8008c92:	401a      	ands	r2, r3
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c98:	f7fe fbaa 	bl	80073f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <vPortFree+0xb4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	4a06      	ldr	r2, [pc, #24]	; (8008cc0 <vPortFree+0xb4>)
 8008ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008caa:	6938      	ldr	r0, [r7, #16]
 8008cac:	f000 f86c 	bl	8008d88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008cb0:	f7fe fbac 	bl	800740c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cb4:	bf00      	nop
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	200049d4 	.word	0x200049d4
 8008cc0:	200049cc 	.word	0x200049cc

08008cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cd0:	4b27      	ldr	r3, [pc, #156]	; (8008d70 <prvHeapInit+0xac>)
 8008cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00c      	beq.n	8008cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0307 	bic.w	r3, r3, #7
 8008cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	4a1f      	ldr	r2, [pc, #124]	; (8008d70 <prvHeapInit+0xac>)
 8008cf4:	4413      	add	r3, r2
 8008cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cfc:	4a1d      	ldr	r2, [pc, #116]	; (8008d74 <prvHeapInit+0xb0>)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d02:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <prvHeapInit+0xb0>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d10:	2208      	movs	r2, #8
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0307 	bic.w	r3, r3, #7
 8008d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <prvHeapInit+0xb4>)
 8008d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d26:	4b14      	ldr	r3, [pc, #80]	; (8008d78 <prvHeapInit+0xb4>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d2e:	4b12      	ldr	r3, [pc, #72]	; (8008d78 <prvHeapInit+0xb4>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d44:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <prvHeapInit+0xb4>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4a0a      	ldr	r2, [pc, #40]	; (8008d7c <prvHeapInit+0xb8>)
 8008d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	4a09      	ldr	r2, [pc, #36]	; (8008d80 <prvHeapInit+0xbc>)
 8008d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d5c:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <prvHeapInit+0xc0>)
 8008d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d62:	601a      	str	r2, [r3, #0]
}
 8008d64:	bf00      	nop
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	20000dc0 	.word	0x20000dc0
 8008d74:	200049c0 	.word	0x200049c0
 8008d78:	200049c8 	.word	0x200049c8
 8008d7c:	200049d0 	.word	0x200049d0
 8008d80:	200049cc 	.word	0x200049cc
 8008d84:	200049d4 	.word	0x200049d4

08008d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d90:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <prvInsertBlockIntoFreeList+0xac>)
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e002      	b.n	8008d9c <prvInsertBlockIntoFreeList+0x14>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d8f7      	bhi.n	8008d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	4413      	add	r3, r2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d108      	bne.n	8008dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	441a      	add	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d118      	bne.n	8008e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <prvInsertBlockIntoFreeList+0xb0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d00d      	beq.n	8008e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	e008      	b.n	8008e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <prvInsertBlockIntoFreeList+0xb0>)
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	e003      	b.n	8008e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d002      	beq.n	8008e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e26:	bf00      	nop
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	200049c0 	.word	0x200049c0
 8008e38:	200049c8 	.word	0x200049c8

08008e3c <__errno>:
 8008e3c:	4b01      	ldr	r3, [pc, #4]	; (8008e44 <__errno+0x8>)
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20000040 	.word	0x20000040

08008e48 <__libc_init_array>:
 8008e48:	b570      	push	{r4, r5, r6, lr}
 8008e4a:	4e0d      	ldr	r6, [pc, #52]	; (8008e80 <__libc_init_array+0x38>)
 8008e4c:	4c0d      	ldr	r4, [pc, #52]	; (8008e84 <__libc_init_array+0x3c>)
 8008e4e:	1ba4      	subs	r4, r4, r6
 8008e50:	10a4      	asrs	r4, r4, #2
 8008e52:	2500      	movs	r5, #0
 8008e54:	42a5      	cmp	r5, r4
 8008e56:	d109      	bne.n	8008e6c <__libc_init_array+0x24>
 8008e58:	4e0b      	ldr	r6, [pc, #44]	; (8008e88 <__libc_init_array+0x40>)
 8008e5a:	4c0c      	ldr	r4, [pc, #48]	; (8008e8c <__libc_init_array+0x44>)
 8008e5c:	f000 fc30 	bl	80096c0 <_init>
 8008e60:	1ba4      	subs	r4, r4, r6
 8008e62:	10a4      	asrs	r4, r4, #2
 8008e64:	2500      	movs	r5, #0
 8008e66:	42a5      	cmp	r5, r4
 8008e68:	d105      	bne.n	8008e76 <__libc_init_array+0x2e>
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e70:	4798      	blx	r3
 8008e72:	3501      	adds	r5, #1
 8008e74:	e7ee      	b.n	8008e54 <__libc_init_array+0xc>
 8008e76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e7a:	4798      	blx	r3
 8008e7c:	3501      	adds	r5, #1
 8008e7e:	e7f2      	b.n	8008e66 <__libc_init_array+0x1e>
 8008e80:	08009990 	.word	0x08009990
 8008e84:	08009990 	.word	0x08009990
 8008e88:	08009990 	.word	0x08009990
 8008e8c:	08009994 	.word	0x08009994

08008e90 <malloc>:
 8008e90:	4b02      	ldr	r3, [pc, #8]	; (8008e9c <malloc+0xc>)
 8008e92:	4601      	mov	r1, r0
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	f000 b865 	b.w	8008f64 <_malloc_r>
 8008e9a:	bf00      	nop
 8008e9c:	20000040 	.word	0x20000040

08008ea0 <memcpy>:
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	1e43      	subs	r3, r0, #1
 8008ea4:	440a      	add	r2, r1
 8008ea6:	4291      	cmp	r1, r2
 8008ea8:	d100      	bne.n	8008eac <memcpy+0xc>
 8008eaa:	bd10      	pop	{r4, pc}
 8008eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eb4:	e7f7      	b.n	8008ea6 <memcpy+0x6>

08008eb6 <memset>:
 8008eb6:	4402      	add	r2, r0
 8008eb8:	4603      	mov	r3, r0
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d100      	bne.n	8008ec0 <memset+0xa>
 8008ebe:	4770      	bx	lr
 8008ec0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec4:	e7f9      	b.n	8008eba <memset+0x4>
	...

08008ec8 <_free_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4605      	mov	r5, r0
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	d045      	beq.n	8008f5c <_free_r+0x94>
 8008ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed4:	1f0c      	subs	r4, r1, #4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bfb8      	it	lt
 8008eda:	18e4      	addlt	r4, r4, r3
 8008edc:	f000 f8cc 	bl	8009078 <__malloc_lock>
 8008ee0:	4a1f      	ldr	r2, [pc, #124]	; (8008f60 <_free_r+0x98>)
 8008ee2:	6813      	ldr	r3, [r2, #0]
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	b933      	cbnz	r3, 8008ef6 <_free_r+0x2e>
 8008ee8:	6063      	str	r3, [r4, #4]
 8008eea:	6014      	str	r4, [r2, #0]
 8008eec:	4628      	mov	r0, r5
 8008eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ef2:	f000 b8c2 	b.w	800907a <__malloc_unlock>
 8008ef6:	42a3      	cmp	r3, r4
 8008ef8:	d90c      	bls.n	8008f14 <_free_r+0x4c>
 8008efa:	6821      	ldr	r1, [r4, #0]
 8008efc:	1862      	adds	r2, r4, r1
 8008efe:	4293      	cmp	r3, r2
 8008f00:	bf04      	itt	eq
 8008f02:	681a      	ldreq	r2, [r3, #0]
 8008f04:	685b      	ldreq	r3, [r3, #4]
 8008f06:	6063      	str	r3, [r4, #4]
 8008f08:	bf04      	itt	eq
 8008f0a:	1852      	addeq	r2, r2, r1
 8008f0c:	6022      	streq	r2, [r4, #0]
 8008f0e:	6004      	str	r4, [r0, #0]
 8008f10:	e7ec      	b.n	8008eec <_free_r+0x24>
 8008f12:	4613      	mov	r3, r2
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	b10a      	cbz	r2, 8008f1c <_free_r+0x54>
 8008f18:	42a2      	cmp	r2, r4
 8008f1a:	d9fa      	bls.n	8008f12 <_free_r+0x4a>
 8008f1c:	6819      	ldr	r1, [r3, #0]
 8008f1e:	1858      	adds	r0, r3, r1
 8008f20:	42a0      	cmp	r0, r4
 8008f22:	d10b      	bne.n	8008f3c <_free_r+0x74>
 8008f24:	6820      	ldr	r0, [r4, #0]
 8008f26:	4401      	add	r1, r0
 8008f28:	1858      	adds	r0, r3, r1
 8008f2a:	4282      	cmp	r2, r0
 8008f2c:	6019      	str	r1, [r3, #0]
 8008f2e:	d1dd      	bne.n	8008eec <_free_r+0x24>
 8008f30:	6810      	ldr	r0, [r2, #0]
 8008f32:	6852      	ldr	r2, [r2, #4]
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	4401      	add	r1, r0
 8008f38:	6019      	str	r1, [r3, #0]
 8008f3a:	e7d7      	b.n	8008eec <_free_r+0x24>
 8008f3c:	d902      	bls.n	8008f44 <_free_r+0x7c>
 8008f3e:	230c      	movs	r3, #12
 8008f40:	602b      	str	r3, [r5, #0]
 8008f42:	e7d3      	b.n	8008eec <_free_r+0x24>
 8008f44:	6820      	ldr	r0, [r4, #0]
 8008f46:	1821      	adds	r1, r4, r0
 8008f48:	428a      	cmp	r2, r1
 8008f4a:	bf04      	itt	eq
 8008f4c:	6811      	ldreq	r1, [r2, #0]
 8008f4e:	6852      	ldreq	r2, [r2, #4]
 8008f50:	6062      	str	r2, [r4, #4]
 8008f52:	bf04      	itt	eq
 8008f54:	1809      	addeq	r1, r1, r0
 8008f56:	6021      	streq	r1, [r4, #0]
 8008f58:	605c      	str	r4, [r3, #4]
 8008f5a:	e7c7      	b.n	8008eec <_free_r+0x24>
 8008f5c:	bd38      	pop	{r3, r4, r5, pc}
 8008f5e:	bf00      	nop
 8008f60:	200049d8 	.word	0x200049d8

08008f64 <_malloc_r>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	1ccd      	adds	r5, r1, #3
 8008f68:	f025 0503 	bic.w	r5, r5, #3
 8008f6c:	3508      	adds	r5, #8
 8008f6e:	2d0c      	cmp	r5, #12
 8008f70:	bf38      	it	cc
 8008f72:	250c      	movcc	r5, #12
 8008f74:	2d00      	cmp	r5, #0
 8008f76:	4606      	mov	r6, r0
 8008f78:	db01      	blt.n	8008f7e <_malloc_r+0x1a>
 8008f7a:	42a9      	cmp	r1, r5
 8008f7c:	d903      	bls.n	8008f86 <_malloc_r+0x22>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	6033      	str	r3, [r6, #0]
 8008f82:	2000      	movs	r0, #0
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	f000 f877 	bl	8009078 <__malloc_lock>
 8008f8a:	4a21      	ldr	r2, [pc, #132]	; (8009010 <_malloc_r+0xac>)
 8008f8c:	6814      	ldr	r4, [r2, #0]
 8008f8e:	4621      	mov	r1, r4
 8008f90:	b991      	cbnz	r1, 8008fb8 <_malloc_r+0x54>
 8008f92:	4c20      	ldr	r4, [pc, #128]	; (8009014 <_malloc_r+0xb0>)
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	b91b      	cbnz	r3, 8008fa0 <_malloc_r+0x3c>
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f000 f83d 	bl	8009018 <_sbrk_r>
 8008f9e:	6020      	str	r0, [r4, #0]
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f000 f838 	bl	8009018 <_sbrk_r>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d124      	bne.n	8008ff6 <_malloc_r+0x92>
 8008fac:	230c      	movs	r3, #12
 8008fae:	6033      	str	r3, [r6, #0]
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f000 f862 	bl	800907a <__malloc_unlock>
 8008fb6:	e7e4      	b.n	8008f82 <_malloc_r+0x1e>
 8008fb8:	680b      	ldr	r3, [r1, #0]
 8008fba:	1b5b      	subs	r3, r3, r5
 8008fbc:	d418      	bmi.n	8008ff0 <_malloc_r+0x8c>
 8008fbe:	2b0b      	cmp	r3, #11
 8008fc0:	d90f      	bls.n	8008fe2 <_malloc_r+0x7e>
 8008fc2:	600b      	str	r3, [r1, #0]
 8008fc4:	50cd      	str	r5, [r1, r3]
 8008fc6:	18cc      	adds	r4, r1, r3
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 f856 	bl	800907a <__malloc_unlock>
 8008fce:	f104 000b 	add.w	r0, r4, #11
 8008fd2:	1d23      	adds	r3, r4, #4
 8008fd4:	f020 0007 	bic.w	r0, r0, #7
 8008fd8:	1ac3      	subs	r3, r0, r3
 8008fda:	d0d3      	beq.n	8008f84 <_malloc_r+0x20>
 8008fdc:	425a      	negs	r2, r3
 8008fde:	50e2      	str	r2, [r4, r3]
 8008fe0:	e7d0      	b.n	8008f84 <_malloc_r+0x20>
 8008fe2:	428c      	cmp	r4, r1
 8008fe4:	684b      	ldr	r3, [r1, #4]
 8008fe6:	bf16      	itet	ne
 8008fe8:	6063      	strne	r3, [r4, #4]
 8008fea:	6013      	streq	r3, [r2, #0]
 8008fec:	460c      	movne	r4, r1
 8008fee:	e7eb      	b.n	8008fc8 <_malloc_r+0x64>
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	6849      	ldr	r1, [r1, #4]
 8008ff4:	e7cc      	b.n	8008f90 <_malloc_r+0x2c>
 8008ff6:	1cc4      	adds	r4, r0, #3
 8008ff8:	f024 0403 	bic.w	r4, r4, #3
 8008ffc:	42a0      	cmp	r0, r4
 8008ffe:	d005      	beq.n	800900c <_malloc_r+0xa8>
 8009000:	1a21      	subs	r1, r4, r0
 8009002:	4630      	mov	r0, r6
 8009004:	f000 f808 	bl	8009018 <_sbrk_r>
 8009008:	3001      	adds	r0, #1
 800900a:	d0cf      	beq.n	8008fac <_malloc_r+0x48>
 800900c:	6025      	str	r5, [r4, #0]
 800900e:	e7db      	b.n	8008fc8 <_malloc_r+0x64>
 8009010:	200049d8 	.word	0x200049d8
 8009014:	200049dc 	.word	0x200049dc

08009018 <_sbrk_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4c06      	ldr	r4, [pc, #24]	; (8009034 <_sbrk_r+0x1c>)
 800901c:	2300      	movs	r3, #0
 800901e:	4605      	mov	r5, r0
 8009020:	4608      	mov	r0, r1
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	f7f8 fe86 	bl	8001d34 <_sbrk>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	d102      	bne.n	8009032 <_sbrk_r+0x1a>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	b103      	cbz	r3, 8009032 <_sbrk_r+0x1a>
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	20004bac 	.word	0x20004bac

08009038 <siprintf>:
 8009038:	b40e      	push	{r1, r2, r3}
 800903a:	b500      	push	{lr}
 800903c:	b09c      	sub	sp, #112	; 0x70
 800903e:	ab1d      	add	r3, sp, #116	; 0x74
 8009040:	9002      	str	r0, [sp, #8]
 8009042:	9006      	str	r0, [sp, #24]
 8009044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009048:	4809      	ldr	r0, [pc, #36]	; (8009070 <siprintf+0x38>)
 800904a:	9107      	str	r1, [sp, #28]
 800904c:	9104      	str	r1, [sp, #16]
 800904e:	4909      	ldr	r1, [pc, #36]	; (8009074 <siprintf+0x3c>)
 8009050:	f853 2b04 	ldr.w	r2, [r3], #4
 8009054:	9105      	str	r1, [sp, #20]
 8009056:	6800      	ldr	r0, [r0, #0]
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	a902      	add	r1, sp, #8
 800905c:	f000 f868 	bl	8009130 <_svfiprintf_r>
 8009060:	9b02      	ldr	r3, [sp, #8]
 8009062:	2200      	movs	r2, #0
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	b01c      	add	sp, #112	; 0x70
 8009068:	f85d eb04 	ldr.w	lr, [sp], #4
 800906c:	b003      	add	sp, #12
 800906e:	4770      	bx	lr
 8009070:	20000040 	.word	0x20000040
 8009074:	ffff0208 	.word	0xffff0208

08009078 <__malloc_lock>:
 8009078:	4770      	bx	lr

0800907a <__malloc_unlock>:
 800907a:	4770      	bx	lr

0800907c <__ssputs_r>:
 800907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	688e      	ldr	r6, [r1, #8]
 8009082:	429e      	cmp	r6, r3
 8009084:	4682      	mov	sl, r0
 8009086:	460c      	mov	r4, r1
 8009088:	4690      	mov	r8, r2
 800908a:	4699      	mov	r9, r3
 800908c:	d837      	bhi.n	80090fe <__ssputs_r+0x82>
 800908e:	898a      	ldrh	r2, [r1, #12]
 8009090:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009094:	d031      	beq.n	80090fa <__ssputs_r+0x7e>
 8009096:	6825      	ldr	r5, [r4, #0]
 8009098:	6909      	ldr	r1, [r1, #16]
 800909a:	1a6f      	subs	r7, r5, r1
 800909c:	6965      	ldr	r5, [r4, #20]
 800909e:	2302      	movs	r3, #2
 80090a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80090a8:	f109 0301 	add.w	r3, r9, #1
 80090ac:	443b      	add	r3, r7
 80090ae:	429d      	cmp	r5, r3
 80090b0:	bf38      	it	cc
 80090b2:	461d      	movcc	r5, r3
 80090b4:	0553      	lsls	r3, r2, #21
 80090b6:	d530      	bpl.n	800911a <__ssputs_r+0x9e>
 80090b8:	4629      	mov	r1, r5
 80090ba:	f7ff ff53 	bl	8008f64 <_malloc_r>
 80090be:	4606      	mov	r6, r0
 80090c0:	b950      	cbnz	r0, 80090d8 <__ssputs_r+0x5c>
 80090c2:	230c      	movs	r3, #12
 80090c4:	f8ca 3000 	str.w	r3, [sl]
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d8:	463a      	mov	r2, r7
 80090da:	6921      	ldr	r1, [r4, #16]
 80090dc:	f7ff fee0 	bl	8008ea0 <memcpy>
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	6126      	str	r6, [r4, #16]
 80090ee:	6165      	str	r5, [r4, #20]
 80090f0:	443e      	add	r6, r7
 80090f2:	1bed      	subs	r5, r5, r7
 80090f4:	6026      	str	r6, [r4, #0]
 80090f6:	60a5      	str	r5, [r4, #8]
 80090f8:	464e      	mov	r6, r9
 80090fa:	454e      	cmp	r6, r9
 80090fc:	d900      	bls.n	8009100 <__ssputs_r+0x84>
 80090fe:	464e      	mov	r6, r9
 8009100:	4632      	mov	r2, r6
 8009102:	4641      	mov	r1, r8
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	f000 fa93 	bl	8009630 <memmove>
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	1b9b      	subs	r3, r3, r6
 800910e:	60a3      	str	r3, [r4, #8]
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	441e      	add	r6, r3
 8009114:	6026      	str	r6, [r4, #0]
 8009116:	2000      	movs	r0, #0
 8009118:	e7dc      	b.n	80090d4 <__ssputs_r+0x58>
 800911a:	462a      	mov	r2, r5
 800911c:	f000 faa1 	bl	8009662 <_realloc_r>
 8009120:	4606      	mov	r6, r0
 8009122:	2800      	cmp	r0, #0
 8009124:	d1e2      	bne.n	80090ec <__ssputs_r+0x70>
 8009126:	6921      	ldr	r1, [r4, #16]
 8009128:	4650      	mov	r0, sl
 800912a:	f7ff fecd 	bl	8008ec8 <_free_r>
 800912e:	e7c8      	b.n	80090c2 <__ssputs_r+0x46>

08009130 <_svfiprintf_r>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	461d      	mov	r5, r3
 8009136:	898b      	ldrh	r3, [r1, #12]
 8009138:	061f      	lsls	r7, r3, #24
 800913a:	b09d      	sub	sp, #116	; 0x74
 800913c:	4680      	mov	r8, r0
 800913e:	460c      	mov	r4, r1
 8009140:	4616      	mov	r6, r2
 8009142:	d50f      	bpl.n	8009164 <_svfiprintf_r+0x34>
 8009144:	690b      	ldr	r3, [r1, #16]
 8009146:	b96b      	cbnz	r3, 8009164 <_svfiprintf_r+0x34>
 8009148:	2140      	movs	r1, #64	; 0x40
 800914a:	f7ff ff0b 	bl	8008f64 <_malloc_r>
 800914e:	6020      	str	r0, [r4, #0]
 8009150:	6120      	str	r0, [r4, #16]
 8009152:	b928      	cbnz	r0, 8009160 <_svfiprintf_r+0x30>
 8009154:	230c      	movs	r3, #12
 8009156:	f8c8 3000 	str.w	r3, [r8]
 800915a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800915e:	e0c8      	b.n	80092f2 <_svfiprintf_r+0x1c2>
 8009160:	2340      	movs	r3, #64	; 0x40
 8009162:	6163      	str	r3, [r4, #20]
 8009164:	2300      	movs	r3, #0
 8009166:	9309      	str	r3, [sp, #36]	; 0x24
 8009168:	2320      	movs	r3, #32
 800916a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800916e:	2330      	movs	r3, #48	; 0x30
 8009170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009174:	9503      	str	r5, [sp, #12]
 8009176:	f04f 0b01 	mov.w	fp, #1
 800917a:	4637      	mov	r7, r6
 800917c:	463d      	mov	r5, r7
 800917e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009182:	b10b      	cbz	r3, 8009188 <_svfiprintf_r+0x58>
 8009184:	2b25      	cmp	r3, #37	; 0x25
 8009186:	d13e      	bne.n	8009206 <_svfiprintf_r+0xd6>
 8009188:	ebb7 0a06 	subs.w	sl, r7, r6
 800918c:	d00b      	beq.n	80091a6 <_svfiprintf_r+0x76>
 800918e:	4653      	mov	r3, sl
 8009190:	4632      	mov	r2, r6
 8009192:	4621      	mov	r1, r4
 8009194:	4640      	mov	r0, r8
 8009196:	f7ff ff71 	bl	800907c <__ssputs_r>
 800919a:	3001      	adds	r0, #1
 800919c:	f000 80a4 	beq.w	80092e8 <_svfiprintf_r+0x1b8>
 80091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a2:	4453      	add	r3, sl
 80091a4:	9309      	str	r3, [sp, #36]	; 0x24
 80091a6:	783b      	ldrb	r3, [r7, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 809d 	beq.w	80092e8 <_svfiprintf_r+0x1b8>
 80091ae:	2300      	movs	r3, #0
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c0:	931a      	str	r3, [sp, #104]	; 0x68
 80091c2:	462f      	mov	r7, r5
 80091c4:	2205      	movs	r2, #5
 80091c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80091ca:	4850      	ldr	r0, [pc, #320]	; (800930c <_svfiprintf_r+0x1dc>)
 80091cc:	f7f7 f838 	bl	8000240 <memchr>
 80091d0:	9b04      	ldr	r3, [sp, #16]
 80091d2:	b9d0      	cbnz	r0, 800920a <_svfiprintf_r+0xda>
 80091d4:	06d9      	lsls	r1, r3, #27
 80091d6:	bf44      	itt	mi
 80091d8:	2220      	movmi	r2, #32
 80091da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80091de:	071a      	lsls	r2, r3, #28
 80091e0:	bf44      	itt	mi
 80091e2:	222b      	movmi	r2, #43	; 0x2b
 80091e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80091e8:	782a      	ldrb	r2, [r5, #0]
 80091ea:	2a2a      	cmp	r2, #42	; 0x2a
 80091ec:	d015      	beq.n	800921a <_svfiprintf_r+0xea>
 80091ee:	9a07      	ldr	r2, [sp, #28]
 80091f0:	462f      	mov	r7, r5
 80091f2:	2000      	movs	r0, #0
 80091f4:	250a      	movs	r5, #10
 80091f6:	4639      	mov	r1, r7
 80091f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091fc:	3b30      	subs	r3, #48	; 0x30
 80091fe:	2b09      	cmp	r3, #9
 8009200:	d94d      	bls.n	800929e <_svfiprintf_r+0x16e>
 8009202:	b1b8      	cbz	r0, 8009234 <_svfiprintf_r+0x104>
 8009204:	e00f      	b.n	8009226 <_svfiprintf_r+0xf6>
 8009206:	462f      	mov	r7, r5
 8009208:	e7b8      	b.n	800917c <_svfiprintf_r+0x4c>
 800920a:	4a40      	ldr	r2, [pc, #256]	; (800930c <_svfiprintf_r+0x1dc>)
 800920c:	1a80      	subs	r0, r0, r2
 800920e:	fa0b f000 	lsl.w	r0, fp, r0
 8009212:	4318      	orrs	r0, r3
 8009214:	9004      	str	r0, [sp, #16]
 8009216:	463d      	mov	r5, r7
 8009218:	e7d3      	b.n	80091c2 <_svfiprintf_r+0x92>
 800921a:	9a03      	ldr	r2, [sp, #12]
 800921c:	1d11      	adds	r1, r2, #4
 800921e:	6812      	ldr	r2, [r2, #0]
 8009220:	9103      	str	r1, [sp, #12]
 8009222:	2a00      	cmp	r2, #0
 8009224:	db01      	blt.n	800922a <_svfiprintf_r+0xfa>
 8009226:	9207      	str	r2, [sp, #28]
 8009228:	e004      	b.n	8009234 <_svfiprintf_r+0x104>
 800922a:	4252      	negs	r2, r2
 800922c:	f043 0302 	orr.w	r3, r3, #2
 8009230:	9207      	str	r2, [sp, #28]
 8009232:	9304      	str	r3, [sp, #16]
 8009234:	783b      	ldrb	r3, [r7, #0]
 8009236:	2b2e      	cmp	r3, #46	; 0x2e
 8009238:	d10c      	bne.n	8009254 <_svfiprintf_r+0x124>
 800923a:	787b      	ldrb	r3, [r7, #1]
 800923c:	2b2a      	cmp	r3, #42	; 0x2a
 800923e:	d133      	bne.n	80092a8 <_svfiprintf_r+0x178>
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	1d1a      	adds	r2, r3, #4
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	9203      	str	r2, [sp, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	bfb8      	it	lt
 800924c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009250:	3702      	adds	r7, #2
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	4d2e      	ldr	r5, [pc, #184]	; (8009310 <_svfiprintf_r+0x1e0>)
 8009256:	7839      	ldrb	r1, [r7, #0]
 8009258:	2203      	movs	r2, #3
 800925a:	4628      	mov	r0, r5
 800925c:	f7f6 fff0 	bl	8000240 <memchr>
 8009260:	b138      	cbz	r0, 8009272 <_svfiprintf_r+0x142>
 8009262:	2340      	movs	r3, #64	; 0x40
 8009264:	1b40      	subs	r0, r0, r5
 8009266:	fa03 f000 	lsl.w	r0, r3, r0
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	4303      	orrs	r3, r0
 800926e:	3701      	adds	r7, #1
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	7839      	ldrb	r1, [r7, #0]
 8009274:	4827      	ldr	r0, [pc, #156]	; (8009314 <_svfiprintf_r+0x1e4>)
 8009276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800927a:	2206      	movs	r2, #6
 800927c:	1c7e      	adds	r6, r7, #1
 800927e:	f7f6 ffdf 	bl	8000240 <memchr>
 8009282:	2800      	cmp	r0, #0
 8009284:	d038      	beq.n	80092f8 <_svfiprintf_r+0x1c8>
 8009286:	4b24      	ldr	r3, [pc, #144]	; (8009318 <_svfiprintf_r+0x1e8>)
 8009288:	bb13      	cbnz	r3, 80092d0 <_svfiprintf_r+0x1a0>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	3307      	adds	r3, #7
 800928e:	f023 0307 	bic.w	r3, r3, #7
 8009292:	3308      	adds	r3, #8
 8009294:	9303      	str	r3, [sp, #12]
 8009296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009298:	444b      	add	r3, r9
 800929a:	9309      	str	r3, [sp, #36]	; 0x24
 800929c:	e76d      	b.n	800917a <_svfiprintf_r+0x4a>
 800929e:	fb05 3202 	mla	r2, r5, r2, r3
 80092a2:	2001      	movs	r0, #1
 80092a4:	460f      	mov	r7, r1
 80092a6:	e7a6      	b.n	80091f6 <_svfiprintf_r+0xc6>
 80092a8:	2300      	movs	r3, #0
 80092aa:	3701      	adds	r7, #1
 80092ac:	9305      	str	r3, [sp, #20]
 80092ae:	4619      	mov	r1, r3
 80092b0:	250a      	movs	r5, #10
 80092b2:	4638      	mov	r0, r7
 80092b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b8:	3a30      	subs	r2, #48	; 0x30
 80092ba:	2a09      	cmp	r2, #9
 80092bc:	d903      	bls.n	80092c6 <_svfiprintf_r+0x196>
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0c8      	beq.n	8009254 <_svfiprintf_r+0x124>
 80092c2:	9105      	str	r1, [sp, #20]
 80092c4:	e7c6      	b.n	8009254 <_svfiprintf_r+0x124>
 80092c6:	fb05 2101 	mla	r1, r5, r1, r2
 80092ca:	2301      	movs	r3, #1
 80092cc:	4607      	mov	r7, r0
 80092ce:	e7f0      	b.n	80092b2 <_svfiprintf_r+0x182>
 80092d0:	ab03      	add	r3, sp, #12
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	4622      	mov	r2, r4
 80092d6:	4b11      	ldr	r3, [pc, #68]	; (800931c <_svfiprintf_r+0x1ec>)
 80092d8:	a904      	add	r1, sp, #16
 80092da:	4640      	mov	r0, r8
 80092dc:	f3af 8000 	nop.w
 80092e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80092e4:	4681      	mov	r9, r0
 80092e6:	d1d6      	bne.n	8009296 <_svfiprintf_r+0x166>
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	065b      	lsls	r3, r3, #25
 80092ec:	f53f af35 	bmi.w	800915a <_svfiprintf_r+0x2a>
 80092f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092f2:	b01d      	add	sp, #116	; 0x74
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	ab03      	add	r3, sp, #12
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	4622      	mov	r2, r4
 80092fe:	4b07      	ldr	r3, [pc, #28]	; (800931c <_svfiprintf_r+0x1ec>)
 8009300:	a904      	add	r1, sp, #16
 8009302:	4640      	mov	r0, r8
 8009304:	f000 f882 	bl	800940c <_printf_i>
 8009308:	e7ea      	b.n	80092e0 <_svfiprintf_r+0x1b0>
 800930a:	bf00      	nop
 800930c:	08009954 	.word	0x08009954
 8009310:	0800995a 	.word	0x0800995a
 8009314:	0800995e 	.word	0x0800995e
 8009318:	00000000 	.word	0x00000000
 800931c:	0800907d 	.word	0x0800907d

08009320 <_printf_common>:
 8009320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009324:	4691      	mov	r9, r2
 8009326:	461f      	mov	r7, r3
 8009328:	688a      	ldr	r2, [r1, #8]
 800932a:	690b      	ldr	r3, [r1, #16]
 800932c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009330:	4293      	cmp	r3, r2
 8009332:	bfb8      	it	lt
 8009334:	4613      	movlt	r3, r2
 8009336:	f8c9 3000 	str.w	r3, [r9]
 800933a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800933e:	4606      	mov	r6, r0
 8009340:	460c      	mov	r4, r1
 8009342:	b112      	cbz	r2, 800934a <_printf_common+0x2a>
 8009344:	3301      	adds	r3, #1
 8009346:	f8c9 3000 	str.w	r3, [r9]
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	0699      	lsls	r1, r3, #26
 800934e:	bf42      	ittt	mi
 8009350:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009354:	3302      	addmi	r3, #2
 8009356:	f8c9 3000 	strmi.w	r3, [r9]
 800935a:	6825      	ldr	r5, [r4, #0]
 800935c:	f015 0506 	ands.w	r5, r5, #6
 8009360:	d107      	bne.n	8009372 <_printf_common+0x52>
 8009362:	f104 0a19 	add.w	sl, r4, #25
 8009366:	68e3      	ldr	r3, [r4, #12]
 8009368:	f8d9 2000 	ldr.w	r2, [r9]
 800936c:	1a9b      	subs	r3, r3, r2
 800936e:	42ab      	cmp	r3, r5
 8009370:	dc28      	bgt.n	80093c4 <_printf_common+0xa4>
 8009372:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	3300      	adds	r3, #0
 800937a:	bf18      	it	ne
 800937c:	2301      	movne	r3, #1
 800937e:	0692      	lsls	r2, r2, #26
 8009380:	d42d      	bmi.n	80093de <_printf_common+0xbe>
 8009382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009386:	4639      	mov	r1, r7
 8009388:	4630      	mov	r0, r6
 800938a:	47c0      	blx	r8
 800938c:	3001      	adds	r0, #1
 800938e:	d020      	beq.n	80093d2 <_printf_common+0xb2>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	68e5      	ldr	r5, [r4, #12]
 8009394:	f8d9 2000 	ldr.w	r2, [r9]
 8009398:	f003 0306 	and.w	r3, r3, #6
 800939c:	2b04      	cmp	r3, #4
 800939e:	bf08      	it	eq
 80093a0:	1aad      	subeq	r5, r5, r2
 80093a2:	68a3      	ldr	r3, [r4, #8]
 80093a4:	6922      	ldr	r2, [r4, #16]
 80093a6:	bf0c      	ite	eq
 80093a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093ac:	2500      	movne	r5, #0
 80093ae:	4293      	cmp	r3, r2
 80093b0:	bfc4      	itt	gt
 80093b2:	1a9b      	subgt	r3, r3, r2
 80093b4:	18ed      	addgt	r5, r5, r3
 80093b6:	f04f 0900 	mov.w	r9, #0
 80093ba:	341a      	adds	r4, #26
 80093bc:	454d      	cmp	r5, r9
 80093be:	d11a      	bne.n	80093f6 <_printf_common+0xd6>
 80093c0:	2000      	movs	r0, #0
 80093c2:	e008      	b.n	80093d6 <_printf_common+0xb6>
 80093c4:	2301      	movs	r3, #1
 80093c6:	4652      	mov	r2, sl
 80093c8:	4639      	mov	r1, r7
 80093ca:	4630      	mov	r0, r6
 80093cc:	47c0      	blx	r8
 80093ce:	3001      	adds	r0, #1
 80093d0:	d103      	bne.n	80093da <_printf_common+0xba>
 80093d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093da:	3501      	adds	r5, #1
 80093dc:	e7c3      	b.n	8009366 <_printf_common+0x46>
 80093de:	18e1      	adds	r1, r4, r3
 80093e0:	1c5a      	adds	r2, r3, #1
 80093e2:	2030      	movs	r0, #48	; 0x30
 80093e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093e8:	4422      	add	r2, r4
 80093ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093f2:	3302      	adds	r3, #2
 80093f4:	e7c5      	b.n	8009382 <_printf_common+0x62>
 80093f6:	2301      	movs	r3, #1
 80093f8:	4622      	mov	r2, r4
 80093fa:	4639      	mov	r1, r7
 80093fc:	4630      	mov	r0, r6
 80093fe:	47c0      	blx	r8
 8009400:	3001      	adds	r0, #1
 8009402:	d0e6      	beq.n	80093d2 <_printf_common+0xb2>
 8009404:	f109 0901 	add.w	r9, r9, #1
 8009408:	e7d8      	b.n	80093bc <_printf_common+0x9c>
	...

0800940c <_printf_i>:
 800940c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009410:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009414:	460c      	mov	r4, r1
 8009416:	7e09      	ldrb	r1, [r1, #24]
 8009418:	b085      	sub	sp, #20
 800941a:	296e      	cmp	r1, #110	; 0x6e
 800941c:	4617      	mov	r7, r2
 800941e:	4606      	mov	r6, r0
 8009420:	4698      	mov	r8, r3
 8009422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009424:	f000 80b3 	beq.w	800958e <_printf_i+0x182>
 8009428:	d822      	bhi.n	8009470 <_printf_i+0x64>
 800942a:	2963      	cmp	r1, #99	; 0x63
 800942c:	d036      	beq.n	800949c <_printf_i+0x90>
 800942e:	d80a      	bhi.n	8009446 <_printf_i+0x3a>
 8009430:	2900      	cmp	r1, #0
 8009432:	f000 80b9 	beq.w	80095a8 <_printf_i+0x19c>
 8009436:	2958      	cmp	r1, #88	; 0x58
 8009438:	f000 8083 	beq.w	8009542 <_printf_i+0x136>
 800943c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009440:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009444:	e032      	b.n	80094ac <_printf_i+0xa0>
 8009446:	2964      	cmp	r1, #100	; 0x64
 8009448:	d001      	beq.n	800944e <_printf_i+0x42>
 800944a:	2969      	cmp	r1, #105	; 0x69
 800944c:	d1f6      	bne.n	800943c <_printf_i+0x30>
 800944e:	6820      	ldr	r0, [r4, #0]
 8009450:	6813      	ldr	r3, [r2, #0]
 8009452:	0605      	lsls	r5, r0, #24
 8009454:	f103 0104 	add.w	r1, r3, #4
 8009458:	d52a      	bpl.n	80094b0 <_printf_i+0xa4>
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6011      	str	r1, [r2, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	da03      	bge.n	800946a <_printf_i+0x5e>
 8009462:	222d      	movs	r2, #45	; 0x2d
 8009464:	425b      	negs	r3, r3
 8009466:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800946a:	486f      	ldr	r0, [pc, #444]	; (8009628 <_printf_i+0x21c>)
 800946c:	220a      	movs	r2, #10
 800946e:	e039      	b.n	80094e4 <_printf_i+0xd8>
 8009470:	2973      	cmp	r1, #115	; 0x73
 8009472:	f000 809d 	beq.w	80095b0 <_printf_i+0x1a4>
 8009476:	d808      	bhi.n	800948a <_printf_i+0x7e>
 8009478:	296f      	cmp	r1, #111	; 0x6f
 800947a:	d020      	beq.n	80094be <_printf_i+0xb2>
 800947c:	2970      	cmp	r1, #112	; 0x70
 800947e:	d1dd      	bne.n	800943c <_printf_i+0x30>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	f043 0320 	orr.w	r3, r3, #32
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	e003      	b.n	8009492 <_printf_i+0x86>
 800948a:	2975      	cmp	r1, #117	; 0x75
 800948c:	d017      	beq.n	80094be <_printf_i+0xb2>
 800948e:	2978      	cmp	r1, #120	; 0x78
 8009490:	d1d4      	bne.n	800943c <_printf_i+0x30>
 8009492:	2378      	movs	r3, #120	; 0x78
 8009494:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009498:	4864      	ldr	r0, [pc, #400]	; (800962c <_printf_i+0x220>)
 800949a:	e055      	b.n	8009548 <_printf_i+0x13c>
 800949c:	6813      	ldr	r3, [r2, #0]
 800949e:	1d19      	adds	r1, r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6011      	str	r1, [r2, #0]
 80094a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094ac:	2301      	movs	r3, #1
 80094ae:	e08c      	b.n	80095ca <_printf_i+0x1be>
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6011      	str	r1, [r2, #0]
 80094b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094b8:	bf18      	it	ne
 80094ba:	b21b      	sxthne	r3, r3
 80094bc:	e7cf      	b.n	800945e <_printf_i+0x52>
 80094be:	6813      	ldr	r3, [r2, #0]
 80094c0:	6825      	ldr	r5, [r4, #0]
 80094c2:	1d18      	adds	r0, r3, #4
 80094c4:	6010      	str	r0, [r2, #0]
 80094c6:	0628      	lsls	r0, r5, #24
 80094c8:	d501      	bpl.n	80094ce <_printf_i+0xc2>
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	e002      	b.n	80094d4 <_printf_i+0xc8>
 80094ce:	0668      	lsls	r0, r5, #25
 80094d0:	d5fb      	bpl.n	80094ca <_printf_i+0xbe>
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	4854      	ldr	r0, [pc, #336]	; (8009628 <_printf_i+0x21c>)
 80094d6:	296f      	cmp	r1, #111	; 0x6f
 80094d8:	bf14      	ite	ne
 80094da:	220a      	movne	r2, #10
 80094dc:	2208      	moveq	r2, #8
 80094de:	2100      	movs	r1, #0
 80094e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094e4:	6865      	ldr	r5, [r4, #4]
 80094e6:	60a5      	str	r5, [r4, #8]
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	f2c0 8095 	blt.w	8009618 <_printf_i+0x20c>
 80094ee:	6821      	ldr	r1, [r4, #0]
 80094f0:	f021 0104 	bic.w	r1, r1, #4
 80094f4:	6021      	str	r1, [r4, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d13d      	bne.n	8009576 <_printf_i+0x16a>
 80094fa:	2d00      	cmp	r5, #0
 80094fc:	f040 808e 	bne.w	800961c <_printf_i+0x210>
 8009500:	4665      	mov	r5, ip
 8009502:	2a08      	cmp	r2, #8
 8009504:	d10b      	bne.n	800951e <_printf_i+0x112>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	07db      	lsls	r3, r3, #31
 800950a:	d508      	bpl.n	800951e <_printf_i+0x112>
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	6862      	ldr	r2, [r4, #4]
 8009510:	429a      	cmp	r2, r3
 8009512:	bfde      	ittt	le
 8009514:	2330      	movle	r3, #48	; 0x30
 8009516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800951a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800951e:	ebac 0305 	sub.w	r3, ip, r5
 8009522:	6123      	str	r3, [r4, #16]
 8009524:	f8cd 8000 	str.w	r8, [sp]
 8009528:	463b      	mov	r3, r7
 800952a:	aa03      	add	r2, sp, #12
 800952c:	4621      	mov	r1, r4
 800952e:	4630      	mov	r0, r6
 8009530:	f7ff fef6 	bl	8009320 <_printf_common>
 8009534:	3001      	adds	r0, #1
 8009536:	d14d      	bne.n	80095d4 <_printf_i+0x1c8>
 8009538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800953c:	b005      	add	sp, #20
 800953e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009542:	4839      	ldr	r0, [pc, #228]	; (8009628 <_printf_i+0x21c>)
 8009544:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009548:	6813      	ldr	r3, [r2, #0]
 800954a:	6821      	ldr	r1, [r4, #0]
 800954c:	1d1d      	adds	r5, r3, #4
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6015      	str	r5, [r2, #0]
 8009552:	060a      	lsls	r2, r1, #24
 8009554:	d50b      	bpl.n	800956e <_printf_i+0x162>
 8009556:	07ca      	lsls	r2, r1, #31
 8009558:	bf44      	itt	mi
 800955a:	f041 0120 	orrmi.w	r1, r1, #32
 800955e:	6021      	strmi	r1, [r4, #0]
 8009560:	b91b      	cbnz	r3, 800956a <_printf_i+0x15e>
 8009562:	6822      	ldr	r2, [r4, #0]
 8009564:	f022 0220 	bic.w	r2, r2, #32
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	2210      	movs	r2, #16
 800956c:	e7b7      	b.n	80094de <_printf_i+0xd2>
 800956e:	064d      	lsls	r5, r1, #25
 8009570:	bf48      	it	mi
 8009572:	b29b      	uxthmi	r3, r3
 8009574:	e7ef      	b.n	8009556 <_printf_i+0x14a>
 8009576:	4665      	mov	r5, ip
 8009578:	fbb3 f1f2 	udiv	r1, r3, r2
 800957c:	fb02 3311 	mls	r3, r2, r1, r3
 8009580:	5cc3      	ldrb	r3, [r0, r3]
 8009582:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009586:	460b      	mov	r3, r1
 8009588:	2900      	cmp	r1, #0
 800958a:	d1f5      	bne.n	8009578 <_printf_i+0x16c>
 800958c:	e7b9      	b.n	8009502 <_printf_i+0xf6>
 800958e:	6813      	ldr	r3, [r2, #0]
 8009590:	6825      	ldr	r5, [r4, #0]
 8009592:	6961      	ldr	r1, [r4, #20]
 8009594:	1d18      	adds	r0, r3, #4
 8009596:	6010      	str	r0, [r2, #0]
 8009598:	0628      	lsls	r0, r5, #24
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	d501      	bpl.n	80095a2 <_printf_i+0x196>
 800959e:	6019      	str	r1, [r3, #0]
 80095a0:	e002      	b.n	80095a8 <_printf_i+0x19c>
 80095a2:	066a      	lsls	r2, r5, #25
 80095a4:	d5fb      	bpl.n	800959e <_printf_i+0x192>
 80095a6:	8019      	strh	r1, [r3, #0]
 80095a8:	2300      	movs	r3, #0
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	4665      	mov	r5, ip
 80095ae:	e7b9      	b.n	8009524 <_printf_i+0x118>
 80095b0:	6813      	ldr	r3, [r2, #0]
 80095b2:	1d19      	adds	r1, r3, #4
 80095b4:	6011      	str	r1, [r2, #0]
 80095b6:	681d      	ldr	r5, [r3, #0]
 80095b8:	6862      	ldr	r2, [r4, #4]
 80095ba:	2100      	movs	r1, #0
 80095bc:	4628      	mov	r0, r5
 80095be:	f7f6 fe3f 	bl	8000240 <memchr>
 80095c2:	b108      	cbz	r0, 80095c8 <_printf_i+0x1bc>
 80095c4:	1b40      	subs	r0, r0, r5
 80095c6:	6060      	str	r0, [r4, #4]
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	6123      	str	r3, [r4, #16]
 80095cc:	2300      	movs	r3, #0
 80095ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095d2:	e7a7      	b.n	8009524 <_printf_i+0x118>
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	462a      	mov	r2, r5
 80095d8:	4639      	mov	r1, r7
 80095da:	4630      	mov	r0, r6
 80095dc:	47c0      	blx	r8
 80095de:	3001      	adds	r0, #1
 80095e0:	d0aa      	beq.n	8009538 <_printf_i+0x12c>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	079b      	lsls	r3, r3, #30
 80095e6:	d413      	bmi.n	8009610 <_printf_i+0x204>
 80095e8:	68e0      	ldr	r0, [r4, #12]
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	4298      	cmp	r0, r3
 80095ee:	bfb8      	it	lt
 80095f0:	4618      	movlt	r0, r3
 80095f2:	e7a3      	b.n	800953c <_printf_i+0x130>
 80095f4:	2301      	movs	r3, #1
 80095f6:	464a      	mov	r2, r9
 80095f8:	4639      	mov	r1, r7
 80095fa:	4630      	mov	r0, r6
 80095fc:	47c0      	blx	r8
 80095fe:	3001      	adds	r0, #1
 8009600:	d09a      	beq.n	8009538 <_printf_i+0x12c>
 8009602:	3501      	adds	r5, #1
 8009604:	68e3      	ldr	r3, [r4, #12]
 8009606:	9a03      	ldr	r2, [sp, #12]
 8009608:	1a9b      	subs	r3, r3, r2
 800960a:	42ab      	cmp	r3, r5
 800960c:	dcf2      	bgt.n	80095f4 <_printf_i+0x1e8>
 800960e:	e7eb      	b.n	80095e8 <_printf_i+0x1dc>
 8009610:	2500      	movs	r5, #0
 8009612:	f104 0919 	add.w	r9, r4, #25
 8009616:	e7f5      	b.n	8009604 <_printf_i+0x1f8>
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1ac      	bne.n	8009576 <_printf_i+0x16a>
 800961c:	7803      	ldrb	r3, [r0, #0]
 800961e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009626:	e76c      	b.n	8009502 <_printf_i+0xf6>
 8009628:	08009965 	.word	0x08009965
 800962c:	08009976 	.word	0x08009976

08009630 <memmove>:
 8009630:	4288      	cmp	r0, r1
 8009632:	b510      	push	{r4, lr}
 8009634:	eb01 0302 	add.w	r3, r1, r2
 8009638:	d807      	bhi.n	800964a <memmove+0x1a>
 800963a:	1e42      	subs	r2, r0, #1
 800963c:	4299      	cmp	r1, r3
 800963e:	d00a      	beq.n	8009656 <memmove+0x26>
 8009640:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009644:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009648:	e7f8      	b.n	800963c <memmove+0xc>
 800964a:	4283      	cmp	r3, r0
 800964c:	d9f5      	bls.n	800963a <memmove+0xa>
 800964e:	1881      	adds	r1, r0, r2
 8009650:	1ad2      	subs	r2, r2, r3
 8009652:	42d3      	cmn	r3, r2
 8009654:	d100      	bne.n	8009658 <memmove+0x28>
 8009656:	bd10      	pop	{r4, pc}
 8009658:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800965c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009660:	e7f7      	b.n	8009652 <memmove+0x22>

08009662 <_realloc_r>:
 8009662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009664:	4607      	mov	r7, r0
 8009666:	4614      	mov	r4, r2
 8009668:	460e      	mov	r6, r1
 800966a:	b921      	cbnz	r1, 8009676 <_realloc_r+0x14>
 800966c:	4611      	mov	r1, r2
 800966e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009672:	f7ff bc77 	b.w	8008f64 <_malloc_r>
 8009676:	b922      	cbnz	r2, 8009682 <_realloc_r+0x20>
 8009678:	f7ff fc26 	bl	8008ec8 <_free_r>
 800967c:	4625      	mov	r5, r4
 800967e:	4628      	mov	r0, r5
 8009680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009682:	f000 f814 	bl	80096ae <_malloc_usable_size_r>
 8009686:	42a0      	cmp	r0, r4
 8009688:	d20f      	bcs.n	80096aa <_realloc_r+0x48>
 800968a:	4621      	mov	r1, r4
 800968c:	4638      	mov	r0, r7
 800968e:	f7ff fc69 	bl	8008f64 <_malloc_r>
 8009692:	4605      	mov	r5, r0
 8009694:	2800      	cmp	r0, #0
 8009696:	d0f2      	beq.n	800967e <_realloc_r+0x1c>
 8009698:	4631      	mov	r1, r6
 800969a:	4622      	mov	r2, r4
 800969c:	f7ff fc00 	bl	8008ea0 <memcpy>
 80096a0:	4631      	mov	r1, r6
 80096a2:	4638      	mov	r0, r7
 80096a4:	f7ff fc10 	bl	8008ec8 <_free_r>
 80096a8:	e7e9      	b.n	800967e <_realloc_r+0x1c>
 80096aa:	4635      	mov	r5, r6
 80096ac:	e7e7      	b.n	800967e <_realloc_r+0x1c>

080096ae <_malloc_usable_size_r>:
 80096ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b2:	1f18      	subs	r0, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bfbc      	itt	lt
 80096b8:	580b      	ldrlt	r3, [r1, r0]
 80096ba:	18c0      	addlt	r0, r0, r3
 80096bc:	4770      	bx	lr
	...

080096c0 <_init>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	bf00      	nop
 80096c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c6:	bc08      	pop	{r3}
 80096c8:	469e      	mov	lr, r3
 80096ca:	4770      	bx	lr

080096cc <_fini>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	bf00      	nop
 80096d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d2:	bc08      	pop	{r3}
 80096d4:	469e      	mov	lr, r3
 80096d6:	4770      	bx	lr
