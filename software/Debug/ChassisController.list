
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007278  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075ec  080075ec  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080075ec  080075ec  000175ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075f4  080075f4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f4  080075f4  000175f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080075fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a68  20000084  08007680  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aec  08007680  00024aec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6b5  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a6f  00000000  00000000  0003d767  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  000411d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  000427d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006e73  00000000  00000000  00043c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132ea  00000000  00000000  0004aa73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101a79  00000000  00000000  0005dd5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015f7d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e44  00000000  00000000  0015f854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	08007460 	.word	0x08007460

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	08007460 	.word	0x08007460

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <fsm_new>:
 */

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 80005e8:	2010      	movs	r0, #16
 80005ea:	f006 fb21 	bl	8006c30 <malloc>
 80005ee:	4603      	mov	r3, r0
 80005f0:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 80005f2:	2210      	movs	r2, #16
 80005f4:	2100      	movs	r1, #0
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f006 fb2d 	bl	8006c56 <memset>
	fsm->currentState = beginState;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000602:	2200      	movs	r2, #0
 8000604:	2103      	movs	r1, #3
 8000606:	2003      	movs	r0, #3
 8000608:	f003 f90c 	bl	8003824 <osSemaphoreNew>
 800060c:	4602      	mov	r2, r0
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 8000612:	2200      	movs	r2, #0
 8000614:	2103      	movs	r1, #3
 8000616:	2003      	movs	r0, #3
 8000618:	f003 f904 	bl	8003824 <osSemaphoreNew>
 800061c:	4602      	mov	r2, r0
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	2120      	movs	r1, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f003 f999 	bl	8003960 <osSemaphoreAcquire>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d109      	bne.n	8000648 <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4618      	mov	r0, r3
 8000644:	f003 f9f2 	bl	8003a2c <osSemaphoreRelease>
	}

	return fsm;
 8000648:	68fb      	ldr	r3, [r7, #12]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	2120      	movs	r1, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f97c 	bl	8003960 <osSemaphoreAcquire>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10a      	bne.n	8000684 <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	4618      	mov	r0, r3
 800067e:	f003 f9d5 	bl	8003a2c <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 8000682:	e004      	b.n	800068e <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 8000684:	2225      	movs	r2, #37	; 0x25
 8000686:	4904      	ldr	r1, [pc, #16]	; (8000698 <fsm_iterate+0x44>)
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f861 	bl	8000750 <fsm_log>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08007478 	.word	0x08007478

0800069c <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b098      	sub	sp, #96	; 0x60
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	68da      	ldr	r2, [r3, #12]
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	4920      	ldr	r1, [pc, #128]	; (8000730 <fsm_reset+0x94>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 fb91 	bl	8006dd8 <siprintf>
 80006b6:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 80006b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f845 	bl	8000750 <fsm_log>
	fsm_log_function f = fsm->log;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 80006cc:	2210      	movs	r2, #16
 80006ce:	2100      	movs	r1, #0
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f006 fac0 	bl	8006c56 <memset>
	fsm->log = f;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80006da:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2103      	movs	r1, #3
 80006e6:	2003      	movs	r0, #3
 80006e8:	f003 f89c 	bl	8003824 <osSemaphoreNew>
 80006ec:	4602      	mov	r2, r0
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2103      	movs	r1, #3
 80006f6:	2003      	movs	r0, #3
 80006f8:	f003 f894 	bl	8003824 <osSemaphoreNew>
 80006fc:	4602      	mov	r2, r0
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	2120      	movs	r1, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f003 f929 	bl	8003960 <osSemaphoreAcquire>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d109      	bne.n	8000728 <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	4618      	mov	r0, r3
 8000724:	f003 f982 	bl	8003a2c <osSemaphoreRelease>
	}
}
 8000728:	bf00      	nop
 800072a:	3760      	adds	r7, #96	; 0x60
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	080074e8 	.word	0x080074e8

08000734 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	6879      	ldr	r1, [r7, #4]
 8000762:	68b8      	ldr	r0, [r7, #8]
 8000764:	4798      	blx	r3
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <state_idle_enter>:
}

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <state_idle_enter+0x68>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d126      	bne.n	80007ce <state_idle_enter+0x5e>
	{
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000780:	202c      	movs	r0, #44	; 0x2c
 8000782:	f006 fa55 	bl	8006c30 <malloc>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <state_idle_enter+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <state_idle_enter+0x68>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	222c      	movs	r2, #44	; 0x2c
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f006 fa5d 	bl	8006c56 <memset>

		// As CC_GlobalState is accessible across threads, we need to use a semaphore to access it
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <state_idle_enter+0x68>)
 800079e:	681c      	ldr	r4, [r3, #0]
 80007a0:	2200      	movs	r2, #0
 80007a2:	2103      	movs	r1, #3
 80007a4:	2003      	movs	r0, #3
 80007a6:	f003 f83d 	bl	8003824 <osSemaphoreNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	62a3      	str	r3, [r4, #40]	; 0x28
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <state_idle_enter+0x68>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b4:	2120      	movs	r1, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 f8d2 	bl	8003960 <osSemaphoreAcquire>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d105      	bne.n	80007ce <state_idle_enter+0x5e>
		{
			// TODO Bind and configure initial global states

			osSemaphoreRelease(CC_GlobalState->sem);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <state_idle_enter+0x68>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 f92f 	bl	8003a2c <osSemaphoreRelease>
	 */

	/* Within 100 Seconds, ensure Heartbeats are ok
	 * and shutdown loop closed
	 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200049b4 	.word	0x200049b4

080007dc <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

		/* If RTD Button Engaged */

			/* Enter Driving State */
			//fsm_changeState(fsm, &drivingState, "RTD Engaged");
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */

	return;
 80007f8:	bf00      	nop
}
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_CAN1_Init+0x60>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_CAN1_Init+0x64>)
 800080c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_CAN1_Init+0x60>)
 8000810:	2210      	movs	r2, #16
 8000812:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_CAN1_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_CAN1_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_CAN1_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_CAN1_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_CAN1_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_CAN1_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_CAN1_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_CAN1_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_CAN1_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_CAN1_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_CAN1_Init+0x60>)
 8000852:	f000 fb27 	bl	8000ea4 <HAL_CAN_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 f966 	bl	8000b2c <Error_Handler>
  }

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200049b8 	.word	0x200049b8
 8000868:	40006400 	.word	0x40006400

0800086c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_CAN_MspInit+0x7c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d128      	bne.n	80008e0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_CAN_MspInit+0x80>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <HAL_CAN_MspInit+0x80>)
 8000894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_CAN_MspInit+0x80>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_CAN_MspInit+0x80>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_CAN_MspInit+0x80>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_CAN_MspInit+0x80>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008d0:	2309      	movs	r3, #9
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_CAN_MspInit+0x84>)
 80008dc:	f000 fcc0 	bl	8001260 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40006400 	.word	0x40006400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <MX_FREERTOS_Init+0x18>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_FREERTOS_Init+0x1c>)
 80008fe:	f002 febd 	bl	800367c <osThreadNew>
 8000902:	4602      	mov	r2, r0
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <MX_FREERTOS_Init+0x20>)
 8000906:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08007558 	.word	0x08007558
 8000910:	08000919 	.word	0x08000919
 8000914:	200049e0 	.word	0x200049e0

08000918 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f002 ff51 	bl	80037c8 <osDelay>
 8000926:	e7fb      	b.n	8000920 <StartDefaultTask+0x8>

08000928 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_GPIO_Init+0x44>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <MX_GPIO_Init+0x44>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_GPIO_Init+0x44>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_GPIO_Init+0x44>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <MX_GPIO_Init+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_GPIO_Init+0x44>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000976:	f000 fa68 	bl	8000e4a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800097a:	f000 f81d 	bl	80009b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800097e:	f7ff ffd3 	bl	8000928 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000982:	f7ff ff3f 	bl	8000804 <MX_CAN1_Init>
	MX_USART3_UART_Init();
 8000986:	f000 f9c3 	bl	8000d10 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	//Create FSM instance
	fsm_t *fsm = fsm_new(&idleState);
 800098a:	4808      	ldr	r0, [pc, #32]	; (80009ac <main+0x3c>)
 800098c:	f7ff fe28 	bl	80005e0 <fsm_new>
 8000990:	6078      	str	r0, [r7, #4]

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <main+0x40>)
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <main+0x44>)
 8000998:	f002 fe70 	bl	800367c <osThreadNew>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800099c:	f002 fe04 	bl	80035a8 <osKernelInitialize>
	MX_FREERTOS_Init();
 80009a0:	f7ff ffa8 	bl	80008f4 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80009a4:	f002 fe34 	bl	8003610 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80009a8:	e7fe      	b.n	80009a8 <main+0x38>
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	0800757c 	.word	0x0800757c
 80009b4:	08000ad5 	.word	0x08000ad5

080009b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0b8      	sub	sp, #224	; 0xe0
 80009bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009c2:	2234      	movs	r2, #52	; 0x34
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f006 f945 	bl	8006c56 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	2290      	movs	r2, #144	; 0x90
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f006 f936 	bl	8006c56 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <SystemClock_Config+0xec>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <SystemClock_Config+0xec>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <SystemClock_Config+0xec>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <SystemClock_Config+0xf0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0a:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <SystemClock_Config+0xf0>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <SystemClock_Config+0xf0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fdba 	bl	80015b4 <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000a46:	f000 f871 	bl	8000b2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f84e 	bl	8001b10 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000a7a:	f000 f857 	bl	8000b2c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a82:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fa43 	bl	8001f18 <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8000a98:	f000 f848 	bl	8000b2c <Error_Handler>
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	37e0      	adds	r7, #224	; 0xe0
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <CC_LogInfo+0x24>)
 8000ac2:	f002 f8cb 	bl	8002c5c <HAL_UART_Transmit>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20004a24 	.word	0x20004a24

08000ad4 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 8000adc:	2115      	movs	r1, #21
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <fsm_thread_mainLoop+0x28>)
 8000ae0:	f7ff ffe4 	bl	8000aac <CC_LogInfo>
	// Reset our FSM in idleState, as we are just starting
	fsm_setLogFunction(fsm, &CC_LogInfo);
 8000ae4:	4906      	ldr	r1, [pc, #24]	; (8000b00 <fsm_thread_mainLoop+0x2c>)
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff fe24 	bl	8000734 <fsm_setLogFunction>
	fsm_reset(fsm, &idleState);
 8000aec:	4905      	ldr	r1, [pc, #20]	; (8000b04 <fsm_thread_mainLoop+0x30>)
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fdd4 	bl	800069c <fsm_reset>
	for(;;)
	{
		fsm_iterate(fsm);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fdad 	bl	8000654 <fsm_iterate>
 8000afa:	e7fb      	b.n	8000af4 <fsm_thread_mainLoop+0x20>
 8000afc:	08007528 	.word	0x08007528
 8000b00:	08000aad 	.word	0x08000aad
 8000b04:	20000000 	.word	0x20000000

08000b08 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b1a:	f000 f9a3 	bl	8000e64 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40001400 	.word	0x40001400

08000b2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x44>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x44>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x44>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	2037      	movs	r0, #55	; 0x37
 8000b9a:	f000 fb37 	bl	800120c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b9e:	2037      	movs	r0, #55	; 0x37
 8000ba0:	f000 fb50 	bl	8001244 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_InitTick+0x9c>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <HAL_InitTick+0x9c>)
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_InitTick+0x9c>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f003 0320 	and.w	r3, r3, #32
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bbc:	f107 0210 	add.w	r2, r7, #16
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f974 	bl	8001eb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bcc:	f001 f94a 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8000bd0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <HAL_InitTick+0xa0>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	0c9b      	lsrs	r3, r3, #18
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_InitTick+0xa4>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <HAL_InitTick+0xa8>)
 8000be4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_InitTick+0xa4>)
 8000be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bec:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_InitTick+0xa4>)
 8000bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_InitTick+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_InitTick+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <HAL_InitTick+0xa4>)
 8000c02:	f001 fd77 	bl	80026f4 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <HAL_InitTick+0xa4>)
 8000c0e:	f001 fda7 	bl	8002760 <HAL_TIM_Base_Start_IT>
 8000c12:	4603      	mov	r3, r0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3730      	adds	r7, #48	; 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	431bde83 	.word	0x431bde83
 8000c28:	200049e4 	.word	0x200049e4
 8000c2c:	40001400 	.word	0x40001400

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM7_IRQHandler+0x10>)
 8000c6a:	f001 fda3 	bl	80027b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200049e4 	.word	0x200049e4

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f005 ff98 	bl	8006bdc <__errno>
 8000cac:	4602      	mov	r2, r0
 8000cae:	230c      	movs	r3, #12
 8000cb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20080000 	.word	0x20080000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	200000a0 	.word	0x200000a0
 8000ce0:	20004af0 	.word	0x20004af0

08000ce4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <SystemInit+0x28>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <SystemInit+0x28>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SystemInit+0x28>)
 8000cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d16:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <MX_USART3_UART_Init+0x5c>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d54:	f001 ff34 	bl	8002bc0 <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d5e:	f7ff fee5 	bl	8000b2c <Error_Handler>
  }

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20004a24 	.word	0x20004a24
 8000d6c:	40004800 	.word	0x40004800

08000d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_UART_MspInit+0x7c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d128      	bne.n	8000de4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_UART_MspInit+0x80>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a16      	ldr	r2, [pc, #88]	; (8000df0 <HAL_UART_MspInit+0x80>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_UART_MspInit+0x80>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_UART_MspInit+0x80>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <HAL_UART_MspInit+0x80>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_UART_MspInit+0x80>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <HAL_UART_MspInit+0x84>)
 8000de0:	f000 fa3e 	bl	8001260 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40004800 	.word	0x40004800
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dfe:	e003      	b.n	8000e08 <LoopCopyDataInit>

08000e00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e06:	3104      	adds	r1, #4

08000e08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e10:	d3f6      	bcc.n	8000e00 <CopyDataInit>
  ldr  r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e14:	e002      	b.n	8000e1c <LoopFillZerobss>

08000e16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e18:	f842 3b04 	str.w	r3, [r2], #4

08000e1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e20:	d3f9      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e22:	f7ff ff5f 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f005 fedf 	bl	8006be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fda1 	bl	8000970 <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e34:	080075fc 	.word	0x080075fc
  ldr  r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e3c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000e40:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000e44:	20004aec 	.word	0x20004aec

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>

08000e4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f9d1 	bl	80011f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fe95 	bl	8000b84 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e5a:	f7ff fe6f 	bl	8000b3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000018 	.word	0x20000018
 8000e88:	20004aa4 	.word	0x20004aa4

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20004aa4 	.word	0x20004aa4

08000ea4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e0ed      	b.n	8001092 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fcd2 	bl	800086c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0202 	bic.w	r2, r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed8:	f7ff ffd8 	bl	8000e8c <HAL_GetTick>
 8000edc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ede:	e012      	b.n	8000f06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee0:	f7ff ffd4 	bl	8000e8c <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b0a      	cmp	r3, #10
 8000eec:	d90b      	bls.n	8000f06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2205      	movs	r2, #5
 8000efe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e0c5      	b.n	8001092 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1e5      	bne.n	8000ee0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f24:	f7ff ffb2 	bl	8000e8c <HAL_GetTick>
 8000f28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f2a:	e012      	b.n	8000f52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f2c:	f7ff ffae 	bl	8000e8c <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	d90b      	bls.n	8000f52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2205      	movs	r2, #5
 8000f4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e09f      	b.n	8001092 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0e5      	beq.n	8000f2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7e1b      	ldrb	r3, [r3, #24]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d108      	bne.n	8000f7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e007      	b.n	8000f8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7e5b      	ldrb	r3, [r3, #25]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d108      	bne.n	8000fa4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e007      	b.n	8000fb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7e9b      	ldrb	r3, [r3, #26]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d108      	bne.n	8000fce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0220 	orr.w	r2, r2, #32
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e007      	b.n	8000fde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0220 	bic.w	r2, r2, #32
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7edb      	ldrb	r3, [r3, #27]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d108      	bne.n	8000ff8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0210 	bic.w	r2, r2, #16
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e007      	b.n	8001008 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0210 	orr.w	r2, r2, #16
 8001006:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d108      	bne.n	8001022 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0208 	orr.w	r2, r2, #8
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e007      	b.n	8001032 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0208 	bic.w	r2, r2, #8
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7f5b      	ldrb	r3, [r3, #29]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 0204 	orr.w	r2, r2, #4
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	e007      	b.n	800105c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0204 	bic.w	r2, r2, #4
 800105a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	ea42 0103 	orr.w	r1, r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	1e5a      	subs	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <__NVIC_SetPriorityGrouping+0x40>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <__NVIC_SetPriorityGrouping+0x40>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	05fa0000 	.word	0x05fa0000

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff4c 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121e:	f7ff ff61 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001222:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	6978      	ldr	r0, [r7, #20]
 800122a:	f7ff ffb1 	bl	8001190 <NVIC_EncodePriority>
 800122e:	4602      	mov	r2, r0
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff80 	bl	800113c <__NVIC_SetPriority>
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff54 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e175      	b.n	800156c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8164 	bne.w	8001566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d00b      	beq.n	80012be <HAL_GPIO_Init+0x5e>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b2:	2b11      	cmp	r3, #17
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x100>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b12      	cmp	r3, #18
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80be 	beq.w	8001566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_GPIO_Init+0x320>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a64      	ldr	r2, [pc, #400]	; (8001580 <HAL_GPIO_Init+0x320>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b62      	ldr	r3, [pc, #392]	; (8001580 <HAL_GPIO_Init+0x320>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001402:	4a60      	ldr	r2, [pc, #384]	; (8001584 <HAL_GPIO_Init+0x324>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a57      	ldr	r2, [pc, #348]	; (8001588 <HAL_GPIO_Init+0x328>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d037      	beq.n	800149e <HAL_GPIO_Init+0x23e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a56      	ldr	r2, [pc, #344]	; (800158c <HAL_GPIO_Init+0x32c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d031      	beq.n	800149a <HAL_GPIO_Init+0x23a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a55      	ldr	r2, [pc, #340]	; (8001590 <HAL_GPIO_Init+0x330>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d02b      	beq.n	8001496 <HAL_GPIO_Init+0x236>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a54      	ldr	r2, [pc, #336]	; (8001594 <HAL_GPIO_Init+0x334>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d025      	beq.n	8001492 <HAL_GPIO_Init+0x232>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a53      	ldr	r2, [pc, #332]	; (8001598 <HAL_GPIO_Init+0x338>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d01f      	beq.n	800148e <HAL_GPIO_Init+0x22e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a52      	ldr	r2, [pc, #328]	; (800159c <HAL_GPIO_Init+0x33c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d019      	beq.n	800148a <HAL_GPIO_Init+0x22a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a51      	ldr	r2, [pc, #324]	; (80015a0 <HAL_GPIO_Init+0x340>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0x226>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a50      	ldr	r2, [pc, #320]	; (80015a4 <HAL_GPIO_Init+0x344>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_GPIO_Init+0x222>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4f      	ldr	r2, [pc, #316]	; (80015a8 <HAL_GPIO_Init+0x348>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_Init+0x21e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4e      	ldr	r2, [pc, #312]	; (80015ac <HAL_GPIO_Init+0x34c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_GPIO_Init+0x21a>
 8001476:	2309      	movs	r3, #9
 8001478:	e012      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800147a:	230a      	movs	r3, #10
 800147c:	e010      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800147e:	2308      	movs	r3, #8
 8001480:	e00e      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 8001482:	2307      	movs	r3, #7
 8001484:	e00c      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 8001486:	2306      	movs	r3, #6
 8001488:	e00a      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800148a:	2305      	movs	r3, #5
 800148c:	e008      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800148e:	2304      	movs	r3, #4
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 8001492:	2303      	movs	r3, #3
 8001494:	e004      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 8001496:	2302      	movs	r3, #2
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800149e:	2300      	movs	r3, #0
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	f002 0203 	and.w	r2, r2, #3
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014b0:	4934      	ldr	r1, [pc, #208]	; (8001584 <HAL_GPIO_Init+0x324>)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <HAL_GPIO_Init+0x350>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e2:	4a33      	ldr	r2, [pc, #204]	; (80015b0 <HAL_GPIO_Init+0x350>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_GPIO_Init+0x350>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150c:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <HAL_GPIO_Init+0x350>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_GPIO_Init+0x350>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_GPIO_Init+0x350>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_GPIO_Init+0x350>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001560:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <HAL_GPIO_Init+0x350>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3301      	adds	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	2b0f      	cmp	r3, #15
 8001570:	f67f ae86 	bls.w	8001280 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001574:	bf00      	nop
 8001576:	3724      	adds	r7, #36	; 0x24
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40023800 	.word	0x40023800
 8001584:	40013800 	.word	0x40013800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020800 	.word	0x40020800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40021000 	.word	0x40021000
 800159c:	40021400 	.word	0x40021400
 80015a0:	40021800 	.word	0x40021800
 80015a4:	40021c00 	.word	0x40021c00
 80015a8:	40022000 	.word	0x40022000
 80015ac:	40022400 	.word	0x40022400
 80015b0:	40013c00 	.word	0x40013c00

080015b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e29b      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8087 	beq.w	80016e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d8:	4b96      	ldr	r3, [pc, #600]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d00c      	beq.n	80015fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e4:	4b93      	ldr	r3, [pc, #588]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d112      	bne.n	8001616 <HAL_RCC_OscConfig+0x62>
 80015f0:	4b90      	ldr	r3, [pc, #576]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015fc:	d10b      	bne.n	8001616 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fe:	4b8d      	ldr	r3, [pc, #564]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d06c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x130>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d168      	bne.n	80016e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e275      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x7a>
 8001620:	4b84      	ldr	r3, [pc, #528]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a83      	ldr	r2, [pc, #524]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e02e      	b.n	800168c <HAL_RCC_OscConfig+0xd8>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x9c>
 8001636:	4b7f      	ldr	r3, [pc, #508]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a7e      	ldr	r2, [pc, #504]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 800163c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7b      	ldr	r2, [pc, #492]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0xd8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0xc0>
 800165a:	4b76      	ldr	r3, [pc, #472]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a75      	ldr	r2, [pc, #468]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a72      	ldr	r2, [pc, #456]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0xd8>
 8001674:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a6e      	ldr	r2, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b6c      	ldr	r3, [pc, #432]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6b      	ldr	r2, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fbfa 	bl	8000e8c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fbf6 	bl	8000e8c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e229      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0xe8>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fbe6 	bl	8000e8c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fbe2 	bl	8000e8c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e215      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x110>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d069      	beq.n	80017c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f2:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00b      	beq.n	8001716 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b08      	cmp	r3, #8
 8001708:	d11c      	bne.n	8001744 <HAL_RCC_OscConfig+0x190>
 800170a:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x17a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e1e9      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	493d      	ldr	r1, [pc, #244]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e040      	b.n	80017c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d023      	beq.n	8001794 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b39      	ldr	r3, [pc, #228]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a38      	ldr	r2, [pc, #224]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fb98 	bl	8000e8c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fb94 	bl	8000e8c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1c7      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4929      	ldr	r1, [pc, #164]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
 8001792:	e018      	b.n	80017c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb74 	bl	8000e8c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fb70 	bl	8000e8c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1a3      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d038      	beq.n	8001844 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d019      	beq.n	800180e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 80017dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017de:	4a15      	ldr	r2, [pc, #84]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb51 	bl	8000e8c <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fb4d 	bl	8000e8c <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e180      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x23a>
 800180c:	e01a      	b.n	8001844 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_RCC_OscConfig+0x280>)
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fb37 	bl	8000e8c <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff fb33 	bl	8000e8c <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d903      	bls.n	8001838 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e166      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
 8001834:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 800183a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ee      	bne.n	8001822 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a4 	beq.w	800199a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001852:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a88      	ldr	r2, [pc, #544]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b86      	ldr	r3, [pc, #536]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187a:	4b83      	ldr	r3, [pc, #524]	; (8001a88 <HAL_RCC_OscConfig+0x4d4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d118      	bne.n	80018b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001886:	4b80      	ldr	r3, [pc, #512]	; (8001a88 <HAL_RCC_OscConfig+0x4d4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7f      	ldr	r2, [pc, #508]	; (8001a88 <HAL_RCC_OscConfig+0x4d4>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff fafb 	bl	8000e8c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff faf7 	bl	8000e8c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	; 0x64
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e12a      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ac:	4b76      	ldr	r3, [pc, #472]	; (8001a88 <HAL_RCC_OscConfig+0x4d4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x31a>
 80018c0:	4b70      	ldr	r3, [pc, #448]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a6f      	ldr	r2, [pc, #444]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
 80018cc:	e02d      	b.n	800192a <HAL_RCC_OscConfig+0x376>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x33c>
 80018d6:	4b6b      	ldr	r3, [pc, #428]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	4a6a      	ldr	r2, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
 80018e2:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a67      	ldr	r2, [pc, #412]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
 80018ee:	e01c      	b.n	800192a <HAL_RCC_OscConfig+0x376>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x35e>
 80018f8:	4b62      	ldr	r3, [pc, #392]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a61      	ldr	r2, [pc, #388]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
 8001904:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a5e      	ldr	r2, [pc, #376]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	e00b      	b.n	800192a <HAL_RCC_OscConfig+0x376>
 8001912:	4b5c      	ldr	r3, [pc, #368]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	4b59      	ldr	r3, [pc, #356]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a58      	ldr	r2, [pc, #352]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d015      	beq.n	800195e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001932:	f7ff faab 	bl	8000e8c <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff faa7 	bl	8000e8c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e0d8      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ee      	beq.n	800193a <HAL_RCC_OscConfig+0x386>
 800195c:	e014      	b.n	8001988 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7ff fa95 	bl	8000e8c <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff fa91 	bl	8000e8c <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0c2      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d105      	bne.n	800199a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a3c      	ldr	r2, [pc, #240]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80ae 	beq.w	8001b00 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d06d      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d14b      	bne.n	8001a50 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b8:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a31      	ldr	r2, [pc, #196]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80019be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fa62 	bl	8000e8c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff fa5e 	bl	8000e8c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e091      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	019b      	lsls	r3, r3, #6
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	085b      	lsrs	r3, r3, #1
 8001a02:	3b01      	subs	r3, #1
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	071b      	lsls	r3, r3, #28
 8001a16:	491b      	ldr	r1, [pc, #108]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa30 	bl	8000e8c <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff fa2c 	bl	8000e8c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e05f      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x47c>
 8001a4e:	e057      	b.n	8001b00 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fa16 	bl	8000e8c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff fa12 	bl	8000e8c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e045      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_RCC_OscConfig+0x4d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4b0>
 8001a82:	e03d      	b.n	8001b00 <HAL_RCC_OscConfig+0x54c>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_RCC_OscConfig+0x558>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d030      	beq.n	8001afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d129      	bne.n	8001afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d122      	bne.n	8001afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ac2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d119      	bne.n	8001afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d10f      	bne.n	8001afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0d0      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d910      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 020f 	bic.w	r2, r3, #15
 8001b3e:	4965      	ldr	r1, [pc, #404]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0b8      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b70:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	494d      	ldr	r1, [pc, #308]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d040      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d115      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e07f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e073      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06b      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4936      	ldr	r1, [pc, #216]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c04:	f7ff f942 	bl	8000e8c <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff f93e 	bl	8000e8c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e053      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d210      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 020f 	bic.w	r2, r3, #15
 8001c4a:	4922      	ldr	r1, [pc, #136]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e032      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4916      	ldr	r1, [pc, #88]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca2:	f000 f821 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <HAL_RCC_ClockConfig+0x1cc>)
 8001cb4:	5cd3      	ldrb	r3, [r2, r3]
 8001cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x1d4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe ff5e 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023c00 	.word	0x40023c00
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	080075a0 	.word	0x080075a0
 8001ce0:	20000010 	.word	0x20000010
 8001ce4:	20000014 	.word	0x20000014

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d007      	beq.n	8001d1a <HAL_RCC_GetSysClockFreq+0x32>
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d008      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x38>
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 808d 	bne.w	8001e2e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d16:	60bb      	str	r3, [r7, #8]
      break;
 8001d18:	e08c      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d1a:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d1c:	60bb      	str	r3, [r7, #8]
      break;
 8001d1e:	e089      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d20:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d28:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d2a:	4b45      	ldr	r3, [pc, #276]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d023      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	f04f 0400 	mov.w	r4, #0
 8001d40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	ea03 0501 	and.w	r5, r3, r1
 8001d4c:	ea04 0602 	and.w	r6, r4, r2
 8001d50:	4a3d      	ldr	r2, [pc, #244]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d52:	fb02 f106 	mul.w	r1, r2, r6
 8001d56:	2200      	movs	r2, #0
 8001d58:	fb02 f205 	mul.w	r2, r2, r5
 8001d5c:	440a      	add	r2, r1
 8001d5e:	493a      	ldr	r1, [pc, #232]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d60:	fba5 0101 	umull	r0, r1, r5, r1
 8001d64:	1853      	adds	r3, r2, r1
 8001d66:	4619      	mov	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f04f 0400 	mov.w	r4, #0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4623      	mov	r3, r4
 8001d72:	f7fe fab5 	bl	80002e0 <__aeabi_uldivmod>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	e049      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	f04f 0400 	mov.w	r4, #0
 8001d88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	ea03 0501 	and.w	r5, r3, r1
 8001d94:	ea04 0602 	and.w	r6, r4, r2
 8001d98:	4629      	mov	r1, r5
 8001d9a:	4632      	mov	r2, r6
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	f04f 0400 	mov.w	r4, #0
 8001da4:	0154      	lsls	r4, r2, #5
 8001da6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001daa:	014b      	lsls	r3, r1, #5
 8001dac:	4619      	mov	r1, r3
 8001dae:	4622      	mov	r2, r4
 8001db0:	1b49      	subs	r1, r1, r5
 8001db2:	eb62 0206 	sbc.w	r2, r2, r6
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	f04f 0400 	mov.w	r4, #0
 8001dbe:	0194      	lsls	r4, r2, #6
 8001dc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dc4:	018b      	lsls	r3, r1, #6
 8001dc6:	1a5b      	subs	r3, r3, r1
 8001dc8:	eb64 0402 	sbc.w	r4, r4, r2
 8001dcc:	f04f 0100 	mov.w	r1, #0
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	00e2      	lsls	r2, r4, #3
 8001dd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dda:	00d9      	lsls	r1, r3, #3
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4614      	mov	r4, r2
 8001de0:	195b      	adds	r3, r3, r5
 8001de2:	eb44 0406 	adc.w	r4, r4, r6
 8001de6:	f04f 0100 	mov.w	r1, #0
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	02a2      	lsls	r2, r4, #10
 8001df0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001df4:	0299      	lsls	r1, r3, #10
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f04f 0400 	mov.w	r4, #0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4623      	mov	r3, r4
 8001e08:	f7fe fa6a 	bl	80002e0 <__aeabi_uldivmod>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	460c      	mov	r4, r1
 8001e10:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	60bb      	str	r3, [r7, #8]
      break;
 8001e2c:	e002      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e30:	60bb      	str	r3, [r7, #8]
      break;
 8001e32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e34:	68bb      	ldr	r3, [r7, #8]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	017d7840 	.word	0x017d7840

08001e4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000010 	.word	0x20000010

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	080075b0 	.word	0x080075b0

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffdc 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e94:	4601      	mov	r1, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0b5b      	lsrs	r3, r3, #13
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	080075b0 	.word	0x080075b0

08001eb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_RCC_GetClockConfig+0x60>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40023c00 	.word	0x40023c00

08001f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d012      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f40:	4b69      	ldr	r3, [pc, #420]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a68      	ldr	r2, [pc, #416]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f4a:	6093      	str	r3, [r2, #8]
 8001f4c:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f54:	4964      	ldr	r1, [pc, #400]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d017      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f72:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	4959      	ldr	r1, [pc, #356]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f90:	d101      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d017      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	494a      	ldr	r1, [pc, #296]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 808b 	beq.w	8002112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	4a39      	ldr	r2, [pc, #228]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6413      	str	r3, [r2, #64]	; 0x40
 8002008:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002014:	4b35      	ldr	r3, [pc, #212]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a34      	ldr	r2, [pc, #208]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002020:	f7fe ff34 	bl	8000e8c <HAL_GetTick>
 8002024:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7fe ff30 	bl	8000e8c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e356      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d035      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d02e      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002064:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002084:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002086:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d114      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe fef8 	bl	8000e8c <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209e:	e00a      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7fe fef4 	bl	8000e8c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e318      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ee      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020ce:	d111      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020de:	400b      	ands	r3, r1
 80020e0:	4901      	ldr	r1, [pc, #4]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
 80020e6:	e00b      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000
 80020f0:	0ffffcff 	.word	0x0ffffcff
 80020f4:	4bb1      	ldr	r3, [pc, #708]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4ab0      	ldr	r2, [pc, #704]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	4bae      	ldr	r3, [pc, #696]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	49ab      	ldr	r1, [pc, #684]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800210e:	4313      	orrs	r3, r2
 8002110:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d010      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800211e:	4ba7      	ldr	r3, [pc, #668]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002124:	4aa5      	ldr	r2, [pc, #660]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800212a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800212e:	4ba3      	ldr	r3, [pc, #652]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002130:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002138:	49a0      	ldr	r1, [pc, #640]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800214c:	4b9b      	ldr	r3, [pc, #620]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800215a:	4998      	ldr	r1, [pc, #608]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800216e:	4b93      	ldr	r3, [pc, #588]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800217c:	498f      	ldr	r1, [pc, #572]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002190:	4b8a      	ldr	r3, [pc, #552]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219e:	4987      	ldr	r1, [pc, #540]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021b2:	4b82      	ldr	r3, [pc, #520]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	497e      	ldr	r1, [pc, #504]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4976      	ldr	r1, [pc, #472]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f6:	4b71      	ldr	r3, [pc, #452]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fc:	f023 020c 	bic.w	r2, r3, #12
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002204:	496d      	ldr	r1, [pc, #436]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	4965      	ldr	r1, [pc, #404]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800223a:	4b60      	ldr	r3, [pc, #384]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002248:	495c      	ldr	r1, [pc, #368]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800225c:	4b57      	ldr	r3, [pc, #348]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	4954      	ldr	r1, [pc, #336]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	494b      	ldr	r1, [pc, #300]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80022a0:	4b46      	ldr	r3, [pc, #280]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	4943      	ldr	r1, [pc, #268]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80022c2:	4b3e      	ldr	r3, [pc, #248]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d0:	493a      	ldr	r1, [pc, #232]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f2:	4932      	ldr	r1, [pc, #200]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d011      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002314:	4929      	ldr	r1, [pc, #164]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002324:	d101      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002344:	491d      	ldr	r1, [pc, #116]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002358:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002368:	4914      	ldr	r1, [pc, #80]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238c:	490b      	ldr	r1, [pc, #44]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00f      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	4902      	ldr	r1, [pc, #8]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80023b8:	e002      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023cc:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80023ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023dc:	497c      	ldr	r1, [pc, #496]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d005      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023f2:	f040 80d6 	bne.w	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023f6:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a75      	ldr	r2, [pc, #468]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80023fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002402:	f7fe fd43 	bl	8000e8c <HAL_GetTick>
 8002406:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002408:	e008      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800240a:	f7fe fd3f 	bl	8000e8c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e165      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800241c:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d021      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002438:	2b00      	cmp	r3, #0
 800243a:	d11d      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800243c:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800243e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002442:	0c1b      	lsrs	r3, r3, #16
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800244a:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800244c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002450:	0e1b      	lsrs	r3, r3, #24
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	019a      	lsls	r2, r3, #6
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	061b      	lsls	r3, r3, #24
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	071b      	lsls	r3, r3, #28
 8002470:	4957      	ldr	r1, [pc, #348]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x576>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002496:	2b00      	cmp	r3, #0
 8002498:	d02e      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a2:	d129      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024a4:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024b2:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b8:	0f1b      	lsrs	r3, r3, #28
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	019a      	lsls	r2, r3, #6
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	071b      	lsls	r3, r3, #28
 80024d8:	493d      	ldr	r1, [pc, #244]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024e0:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e6:	f023 021f 	bic.w	r2, r3, #31
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	3b01      	subs	r3, #1
 80024f0:	4937      	ldr	r1, [pc, #220]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01d      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002504:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250a:	0e1b      	lsrs	r3, r3, #24
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002512:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002518:	0f1b      	lsrs	r3, r3, #28
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	019a      	lsls	r2, r3, #6
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	431a      	orrs	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	431a      	orrs	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	071b      	lsls	r3, r3, #28
 8002538:	4925      	ldr	r1, [pc, #148]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d011      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	019a      	lsls	r2, r3, #6
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	061b      	lsls	r3, r3, #24
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	071b      	lsls	r3, r3, #28
 8002568:	4919      	ldr	r1, [pc, #100]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002576:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800257a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257c:	f7fe fc86 	bl	8000e8c <HAL_GetTick>
 8002580:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002584:	f7fe fc82 	bl	8000e8c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e0a8      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	f040 809e 	bne.w	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b6:	f7fe fc69 	bl	8000e8c <HAL_GetTick>
 80025ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025be:	f7fe fc65 	bl	8000e8c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b64      	cmp	r3, #100	; 0x64
 80025ca:	d903      	bls.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e08b      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80025d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025d4:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e0:	d0ed      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d02e      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d12a      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800260a:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	0f1b      	lsrs	r3, r3, #28
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	019a      	lsls	r2, r3, #6
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	041b      	lsls	r3, r3, #16
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	061b      	lsls	r3, r3, #24
 8002638:	431a      	orrs	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	071b      	lsls	r3, r3, #28
 800263e:	492c      	ldr	r1, [pc, #176]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800264c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	4925      	ldr	r1, [pc, #148]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d022      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002674:	d11d      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	0e1b      	lsrs	r3, r3, #24
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	0f1b      	lsrs	r3, r3, #28
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	019a      	lsls	r2, r3, #6
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	431a      	orrs	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	061b      	lsls	r3, r3, #24
 80026a4:	431a      	orrs	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	071b      	lsls	r3, r3, #28
 80026aa:	4911      	ldr	r1, [pc, #68]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026be:	f7fe fbe5 	bl	8000e8c <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026c6:	f7fe fbe1 	bl	8000e8c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	; 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e007      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026e4:	d1ef      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800

080026f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e01d      	b.n	8002742 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f815 	bl	800274a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f000 f986 	bl	8002a44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_TIM_Base_Start_IT+0x50>)
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b06      	cmp	r3, #6
 8002788:	d00b      	beq.n	80027a2 <HAL_TIM_Base_Start_IT+0x42>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d007      	beq.n	80027a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	00010007 	.word	0x00010007

080027b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d122      	bne.n	8002810 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d11b      	bne.n	8002810 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0202 	mvn.w	r2, #2
 80027e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f905 	bl	8002a06 <HAL_TIM_IC_CaptureCallback>
 80027fc:	e005      	b.n	800280a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f8f7 	bl	80029f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f908 	bl	8002a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b04      	cmp	r3, #4
 800281c:	d122      	bne.n	8002864 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b04      	cmp	r3, #4
 800282a:	d11b      	bne.n	8002864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0204 	mvn.w	r2, #4
 8002834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2202      	movs	r2, #2
 800283a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8db 	bl	8002a06 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8cd 	bl	80029f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f8de 	bl	8002a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b08      	cmp	r3, #8
 8002870:	d122      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b08      	cmp	r3, #8
 800287e:	d11b      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0208 	mvn.w	r2, #8
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2204      	movs	r2, #4
 800288e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8b1 	bl	8002a06 <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8a3 	bl	80029f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f8b4 	bl	8002a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d122      	bne.n	800290c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d11b      	bne.n	800290c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0210 	mvn.w	r2, #16
 80028dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2208      	movs	r2, #8
 80028e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f887 	bl	8002a06 <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f879 	bl	80029f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f88a 	bl	8002a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10e      	bne.n	8002938 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d107      	bne.n	8002938 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0201 	mvn.w	r2, #1
 8002930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe f8e8 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d10e      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002950:	2b80      	cmp	r3, #128	; 0x80
 8002952:	d107      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f91a 	bl	8002b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002972:	d10e      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d107      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800298a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f90d 	bl	8002bac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d10e      	bne.n	80029be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d107      	bne.n	80029be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f838 	bl	8002a2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d10e      	bne.n	80029ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d107      	bne.n	80029ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f06f 0220 	mvn.w	r2, #32
 80029e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8cd 	bl	8002b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a40      	ldr	r2, [pc, #256]	; (8002b58 <TIM_Base_SetConfig+0x114>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d013      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a62:	d00f      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3d      	ldr	r2, [pc, #244]	; (8002b5c <TIM_Base_SetConfig+0x118>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00b      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3c      	ldr	r2, [pc, #240]	; (8002b60 <TIM_Base_SetConfig+0x11c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d007      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3b      	ldr	r2, [pc, #236]	; (8002b64 <TIM_Base_SetConfig+0x120>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a3a      	ldr	r2, [pc, #232]	; (8002b68 <TIM_Base_SetConfig+0x124>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d108      	bne.n	8002a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <TIM_Base_SetConfig+0x114>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02b      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d027      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a2c      	ldr	r2, [pc, #176]	; (8002b5c <TIM_Base_SetConfig+0x118>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d023      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a2b      	ldr	r2, [pc, #172]	; (8002b60 <TIM_Base_SetConfig+0x11c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a2a      	ldr	r2, [pc, #168]	; (8002b64 <TIM_Base_SetConfig+0x120>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01b      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <TIM_Base_SetConfig+0x124>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d017      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <TIM_Base_SetConfig+0x128>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <TIM_Base_SetConfig+0x12c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00f      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <TIM_Base_SetConfig+0x130>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <TIM_Base_SetConfig+0x134>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <TIM_Base_SetConfig+0x138>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <TIM_Base_SetConfig+0x13c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d108      	bne.n	8002b08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <TIM_Base_SetConfig+0x114>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <TIM_Base_SetConfig+0xf8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <TIM_Base_SetConfig+0x124>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d103      	bne.n	8002b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	615a      	str	r2, [r3, #20]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00
 8002b68:	40010400 	.word	0x40010400
 8002b6c:	40014000 	.word	0x40014000
 8002b70:	40014400 	.word	0x40014400
 8002b74:	40014800 	.word	0x40014800
 8002b78:	40001800 	.word	0x40001800
 8002b7c:	40001c00 	.word	0x40001c00
 8002b80:	40002000 	.word	0x40002000

08002b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e040      	b.n	8002c54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe f8c4 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2224      	movs	r2, #36	; 0x24
 8002bec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8be 	bl	8002d80 <UART_SetConfig>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e022      	b.n	8002c54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fb5c 	bl	80032d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fbe3 	bl	8003418 <UART_CheckIdleState>
 8002c52:	4603      	mov	r3, r0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d17f      	bne.n	8002d74 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_UART_Transmit+0x24>
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e078      	b.n	8002d76 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Transmit+0x36>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e071      	b.n	8002d76 <HAL_UART_Transmit+0x11a>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2221      	movs	r2, #33	; 0x21
 8002ca4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002ca6:	f7fe f8f1 	bl	8000e8c <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	88fa      	ldrh	r2, [r7, #6]
 8002cb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc4:	d108      	bne.n	8002cd8 <HAL_UART_Transmit+0x7c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	e003      	b.n	8002ce0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002ce8:	e02c      	b.n	8002d44 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fbd4 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e038      	b.n	8002d76 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10b      	bne.n	8002d22 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e007      	b.n	8002d32 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1cc      	bne.n	8002cea <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2200      	movs	r2, #0
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fba1 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e005      	b.n	8002d76 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4bb1      	ldr	r3, [pc, #708]	; (8003074 <UART_SetConfig+0x2f4>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	6939      	ldr	r1, [r7, #16]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a9f      	ldr	r2, [pc, #636]	; (8003078 <UART_SetConfig+0x2f8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d121      	bne.n	8002e44 <UART_SetConfig+0xc4>
 8002e00:	4b9e      	ldr	r3, [pc, #632]	; (800307c <UART_SetConfig+0x2fc>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d816      	bhi.n	8002e3c <UART_SetConfig+0xbc>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <UART_SetConfig+0x94>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e31 	.word	0x08002e31
 8002e1c:	08002e2b 	.word	0x08002e2b
 8002e20:	08002e37 	.word	0x08002e37
 8002e24:	2301      	movs	r3, #1
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e151      	b.n	80030ce <UART_SetConfig+0x34e>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e14e      	b.n	80030ce <UART_SetConfig+0x34e>
 8002e30:	2304      	movs	r3, #4
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e14b      	b.n	80030ce <UART_SetConfig+0x34e>
 8002e36:	2308      	movs	r3, #8
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e148      	b.n	80030ce <UART_SetConfig+0x34e>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	bf00      	nop
 8002e42:	e144      	b.n	80030ce <UART_SetConfig+0x34e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a8d      	ldr	r2, [pc, #564]	; (8003080 <UART_SetConfig+0x300>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d134      	bne.n	8002eb8 <UART_SetConfig+0x138>
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	; (800307c <UART_SetConfig+0x2fc>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d829      	bhi.n	8002eb0 <UART_SetConfig+0x130>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <UART_SetConfig+0xe4>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002eb1 	.word	0x08002eb1
 8002e6c:	08002eb1 	.word	0x08002eb1
 8002e70:	08002eb1 	.word	0x08002eb1
 8002e74:	08002ea5 	.word	0x08002ea5
 8002e78:	08002eb1 	.word	0x08002eb1
 8002e7c:	08002eb1 	.word	0x08002eb1
 8002e80:	08002eb1 	.word	0x08002eb1
 8002e84:	08002e9f 	.word	0x08002e9f
 8002e88:	08002eb1 	.word	0x08002eb1
 8002e8c:	08002eb1 	.word	0x08002eb1
 8002e90:	08002eb1 	.word	0x08002eb1
 8002e94:	08002eab 	.word	0x08002eab
 8002e98:	2300      	movs	r3, #0
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e117      	b.n	80030ce <UART_SetConfig+0x34e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	77fb      	strb	r3, [r7, #31]
 8002ea2:	e114      	b.n	80030ce <UART_SetConfig+0x34e>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e111      	b.n	80030ce <UART_SetConfig+0x34e>
 8002eaa:	2308      	movs	r3, #8
 8002eac:	77fb      	strb	r3, [r7, #31]
 8002eae:	e10e      	b.n	80030ce <UART_SetConfig+0x34e>
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	bf00      	nop
 8002eb6:	e10a      	b.n	80030ce <UART_SetConfig+0x34e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a71      	ldr	r2, [pc, #452]	; (8003084 <UART_SetConfig+0x304>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d120      	bne.n	8002f04 <UART_SetConfig+0x184>
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	; (800307c <UART_SetConfig+0x2fc>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d00f      	beq.n	8002ef0 <UART_SetConfig+0x170>
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d802      	bhi.n	8002eda <UART_SetConfig+0x15a>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <UART_SetConfig+0x164>
 8002ed8:	e010      	b.n	8002efc <UART_SetConfig+0x17c>
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d005      	beq.n	8002eea <UART_SetConfig+0x16a>
 8002ede:	2b30      	cmp	r3, #48	; 0x30
 8002ee0:	d009      	beq.n	8002ef6 <UART_SetConfig+0x176>
 8002ee2:	e00b      	b.n	8002efc <UART_SetConfig+0x17c>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	e0f1      	b.n	80030ce <UART_SetConfig+0x34e>
 8002eea:	2302      	movs	r3, #2
 8002eec:	77fb      	strb	r3, [r7, #31]
 8002eee:	e0ee      	b.n	80030ce <UART_SetConfig+0x34e>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e0eb      	b.n	80030ce <UART_SetConfig+0x34e>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e0e8      	b.n	80030ce <UART_SetConfig+0x34e>
 8002efc:	2310      	movs	r3, #16
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	bf00      	nop
 8002f02:	e0e4      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a5f      	ldr	r2, [pc, #380]	; (8003088 <UART_SetConfig+0x308>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d120      	bne.n	8002f50 <UART_SetConfig+0x1d0>
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <UART_SetConfig+0x2fc>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d00f      	beq.n	8002f3c <UART_SetConfig+0x1bc>
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d802      	bhi.n	8002f26 <UART_SetConfig+0x1a6>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <UART_SetConfig+0x1b0>
 8002f24:	e010      	b.n	8002f48 <UART_SetConfig+0x1c8>
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d005      	beq.n	8002f36 <UART_SetConfig+0x1b6>
 8002f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f2c:	d009      	beq.n	8002f42 <UART_SetConfig+0x1c2>
 8002f2e:	e00b      	b.n	8002f48 <UART_SetConfig+0x1c8>
 8002f30:	2300      	movs	r3, #0
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e0cb      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f36:	2302      	movs	r3, #2
 8002f38:	77fb      	strb	r3, [r7, #31]
 8002f3a:	e0c8      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e0c5      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f42:	2308      	movs	r3, #8
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e0c2      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	bf00      	nop
 8002f4e:	e0be      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a4d      	ldr	r2, [pc, #308]	; (800308c <UART_SetConfig+0x30c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d124      	bne.n	8002fa4 <UART_SetConfig+0x224>
 8002f5a:	4b48      	ldr	r3, [pc, #288]	; (800307c <UART_SetConfig+0x2fc>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f68:	d012      	beq.n	8002f90 <UART_SetConfig+0x210>
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6e:	d802      	bhi.n	8002f76 <UART_SetConfig+0x1f6>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <UART_SetConfig+0x204>
 8002f74:	e012      	b.n	8002f9c <UART_SetConfig+0x21c>
 8002f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7a:	d006      	beq.n	8002f8a <UART_SetConfig+0x20a>
 8002f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f80:	d009      	beq.n	8002f96 <UART_SetConfig+0x216>
 8002f82:	e00b      	b.n	8002f9c <UART_SetConfig+0x21c>
 8002f84:	2300      	movs	r3, #0
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e0a1      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e09e      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f90:	2304      	movs	r3, #4
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e09b      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f96:	2308      	movs	r3, #8
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e098      	b.n	80030ce <UART_SetConfig+0x34e>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	bf00      	nop
 8002fa2:	e094      	b.n	80030ce <UART_SetConfig+0x34e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a39      	ldr	r2, [pc, #228]	; (8003090 <UART_SetConfig+0x310>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d124      	bne.n	8002ff8 <UART_SetConfig+0x278>
 8002fae:	4b33      	ldr	r3, [pc, #204]	; (800307c <UART_SetConfig+0x2fc>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbc:	d012      	beq.n	8002fe4 <UART_SetConfig+0x264>
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d802      	bhi.n	8002fca <UART_SetConfig+0x24a>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <UART_SetConfig+0x258>
 8002fc8:	e012      	b.n	8002ff0 <UART_SetConfig+0x270>
 8002fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fce:	d006      	beq.n	8002fde <UART_SetConfig+0x25e>
 8002fd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fd4:	d009      	beq.n	8002fea <UART_SetConfig+0x26a>
 8002fd6:	e00b      	b.n	8002ff0 <UART_SetConfig+0x270>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e077      	b.n	80030ce <UART_SetConfig+0x34e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	e074      	b.n	80030ce <UART_SetConfig+0x34e>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e071      	b.n	80030ce <UART_SetConfig+0x34e>
 8002fea:	2308      	movs	r3, #8
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e06e      	b.n	80030ce <UART_SetConfig+0x34e>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	bf00      	nop
 8002ff6:	e06a      	b.n	80030ce <UART_SetConfig+0x34e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <UART_SetConfig+0x314>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d124      	bne.n	800304c <UART_SetConfig+0x2cc>
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <UART_SetConfig+0x2fc>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003010:	d012      	beq.n	8003038 <UART_SetConfig+0x2b8>
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	d802      	bhi.n	800301e <UART_SetConfig+0x29e>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <UART_SetConfig+0x2ac>
 800301c:	e012      	b.n	8003044 <UART_SetConfig+0x2c4>
 800301e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003022:	d006      	beq.n	8003032 <UART_SetConfig+0x2b2>
 8003024:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003028:	d009      	beq.n	800303e <UART_SetConfig+0x2be>
 800302a:	e00b      	b.n	8003044 <UART_SetConfig+0x2c4>
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e04d      	b.n	80030ce <UART_SetConfig+0x34e>
 8003032:	2302      	movs	r3, #2
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e04a      	b.n	80030ce <UART_SetConfig+0x34e>
 8003038:	2304      	movs	r3, #4
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e047      	b.n	80030ce <UART_SetConfig+0x34e>
 800303e:	2308      	movs	r3, #8
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e044      	b.n	80030ce <UART_SetConfig+0x34e>
 8003044:	2310      	movs	r3, #16
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	bf00      	nop
 800304a:	e040      	b.n	80030ce <UART_SetConfig+0x34e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a11      	ldr	r2, [pc, #68]	; (8003098 <UART_SetConfig+0x318>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d139      	bne.n	80030ca <UART_SetConfig+0x34a>
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <UART_SetConfig+0x2fc>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003064:	d027      	beq.n	80030b6 <UART_SetConfig+0x336>
 8003066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800306a:	d817      	bhi.n	800309c <UART_SetConfig+0x31c>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01c      	beq.n	80030aa <UART_SetConfig+0x32a>
 8003070:	e027      	b.n	80030c2 <UART_SetConfig+0x342>
 8003072:	bf00      	nop
 8003074:	efff69f3 	.word	0xefff69f3
 8003078:	40011000 	.word	0x40011000
 800307c:	40023800 	.word	0x40023800
 8003080:	40004400 	.word	0x40004400
 8003084:	40004800 	.word	0x40004800
 8003088:	40004c00 	.word	0x40004c00
 800308c:	40005000 	.word	0x40005000
 8003090:	40011400 	.word	0x40011400
 8003094:	40007800 	.word	0x40007800
 8003098:	40007c00 	.word	0x40007c00
 800309c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a0:	d006      	beq.n	80030b0 <UART_SetConfig+0x330>
 80030a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030a6:	d009      	beq.n	80030bc <UART_SetConfig+0x33c>
 80030a8:	e00b      	b.n	80030c2 <UART_SetConfig+0x342>
 80030aa:	2300      	movs	r3, #0
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e00e      	b.n	80030ce <UART_SetConfig+0x34e>
 80030b0:	2302      	movs	r3, #2
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e00b      	b.n	80030ce <UART_SetConfig+0x34e>
 80030b6:	2304      	movs	r3, #4
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e008      	b.n	80030ce <UART_SetConfig+0x34e>
 80030bc:	2308      	movs	r3, #8
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e005      	b.n	80030ce <UART_SetConfig+0x34e>
 80030c2:	2310      	movs	r3, #16
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	bf00      	nop
 80030c8:	e001      	b.n	80030ce <UART_SetConfig+0x34e>
 80030ca:	2310      	movs	r3, #16
 80030cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d6:	d17f      	bne.n	80031d8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80030d8:	7ffb      	ldrb	r3, [r7, #31]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d85c      	bhi.n	8003198 <UART_SetConfig+0x418>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <UART_SetConfig+0x364>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003109 	.word	0x08003109
 80030e8:	08003129 	.word	0x08003129
 80030ec:	08003149 	.word	0x08003149
 80030f0:	08003199 	.word	0x08003199
 80030f4:	08003161 	.word	0x08003161
 80030f8:	08003199 	.word	0x08003199
 80030fc:	08003199 	.word	0x08003199
 8003100:	08003199 	.word	0x08003199
 8003104:	08003181 	.word	0x08003181
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003108:	f7fe feac 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 800310c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	005a      	lsls	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	b29b      	uxth	r3, r3
 8003124:	61bb      	str	r3, [r7, #24]
        break;
 8003126:	e03a      	b.n	800319e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003128:	f7fe feb0 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 800312c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	005a      	lsls	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	441a      	add	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	b29b      	uxth	r3, r3
 8003144:	61bb      	str	r3, [r7, #24]
        break;
 8003146:	e02a      	b.n	800319e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	085a      	lsrs	r2, r3, #1
 800314e:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <UART_SetConfig+0x54c>)
 8003150:	4413      	add	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6852      	ldr	r2, [r2, #4]
 8003156:	fbb3 f3f2 	udiv	r3, r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	61bb      	str	r3, [r7, #24]
        break;
 800315e:	e01e      	b.n	800319e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003160:	f7fe fdc2 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8003164:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	005a      	lsls	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	441a      	add	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	b29b      	uxth	r3, r3
 800317c:	61bb      	str	r3, [r7, #24]
        break;
 800317e:	e00e      	b.n	800319e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	b29b      	uxth	r3, r3
 8003194:	61bb      	str	r3, [r7, #24]
        break;
 8003196:	e002      	b.n	800319e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	75fb      	strb	r3, [r7, #23]
        break;
 800319c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d916      	bls.n	80031d2 <UART_SetConfig+0x452>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031aa:	d212      	bcs.n	80031d2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f023 030f 	bic.w	r3, r3, #15
 80031b4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	897b      	ldrh	r3, [r7, #10]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	897a      	ldrh	r2, [r7, #10]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	e070      	b.n	80032b4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
 80031d6:	e06d      	b.n	80032b4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80031d8:	7ffb      	ldrb	r3, [r7, #31]
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d859      	bhi.n	8003292 <UART_SetConfig+0x512>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x464>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003209 	.word	0x08003209
 80031e8:	08003227 	.word	0x08003227
 80031ec:	08003245 	.word	0x08003245
 80031f0:	08003293 	.word	0x08003293
 80031f4:	0800325d 	.word	0x0800325d
 80031f8:	08003293 	.word	0x08003293
 80031fc:	08003293 	.word	0x08003293
 8003200:	08003293 	.word	0x08003293
 8003204:	0800327b 	.word	0x0800327b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7fe fe2c 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 800320c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	085a      	lsrs	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	441a      	add	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	b29b      	uxth	r3, r3
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e038      	b.n	8003298 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003226:	f7fe fe31 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 800322a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	085a      	lsrs	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	b29b      	uxth	r3, r3
 8003240:	61bb      	str	r3, [r7, #24]
        break;
 8003242:	e029      	b.n	8003298 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	085a      	lsrs	r2, r3, #1
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <UART_SetConfig+0x550>)
 800324c:	4413      	add	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6852      	ldr	r2, [r2, #4]
 8003252:	fbb3 f3f2 	udiv	r3, r3, r2
 8003256:	b29b      	uxth	r3, r3
 8003258:	61bb      	str	r3, [r7, #24]
        break;
 800325a:	e01d      	b.n	8003298 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325c:	f7fe fd44 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8003260:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	085a      	lsrs	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	441a      	add	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	b29b      	uxth	r3, r3
 8003276:	61bb      	str	r3, [r7, #24]
        break;
 8003278:	e00e      	b.n	8003298 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	b29b      	uxth	r3, r3
 800328e:	61bb      	str	r3, [r7, #24]
        break;
 8003290:	e002      	b.n	8003298 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
        break;
 8003296:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	d908      	bls.n	80032b0 <UART_SetConfig+0x530>
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a4:	d204      	bcs.n	80032b0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	e001      	b.n	80032b4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	01e84800 	.word	0x01e84800
 80032d0:	00f42400 	.word	0x00f42400

080032d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01a      	beq.n	80033ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d2:	d10a      	bne.n	80033ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003426:	f7fd fd31 	bl	8000e8c <HAL_GetTick>
 800342a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b08      	cmp	r3, #8
 8003438:	d10e      	bne.n	8003458 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800343a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f82a 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e020      	b.n	800349a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d10e      	bne.n	8003484 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003466:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f814 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e00a      	b.n	800349a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b2:	e05d      	b.n	8003570 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ba:	d059      	beq.n	8003570 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034bc:	f7fd fce6 	bl	8000e8c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d302      	bcc.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d11b      	bne.n	800350a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e042      	b.n	8003590 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02b      	beq.n	8003570 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003526:	d123      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003530:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e00f      	b.n	8003590 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4013      	ands	r3, r2
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	429a      	cmp	r2, r3
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	429a      	cmp	r2, r3
 800358c:	d092      	beq.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ae:	f3ef 8305 	mrs	r3, IPSR
 80035b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80035b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ba:	f3ef 8310 	mrs	r3, PRIMASK
 80035be:	607b      	str	r3, [r7, #4]
  return(result);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d105      	bne.n	80035d2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035c6:	f3ef 8311 	mrs	r3, BASEPRI
 80035ca:	603b      	str	r3, [r7, #0]
  return(result);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <osKernelInitialize+0x3a>
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <osKernelInitialize+0x64>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d103      	bne.n	80035e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80035da:	f06f 0305 	mvn.w	r3, #5
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e00c      	b.n	80035fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <osKernelInitialize+0x64>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <osKernelInitialize+0x64>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e002      	b.n	80035fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80035fc:	68fb      	ldr	r3, [r7, #12]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	200000a4 	.word	0x200000a4

08003610 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003616:	f3ef 8305 	mrs	r3, IPSR
 800361a:	60bb      	str	r3, [r7, #8]
  return(result);
 800361c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8310 	mrs	r3, PRIMASK
 8003626:	607b      	str	r3, [r7, #4]
  return(result);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800362e:	f3ef 8311 	mrs	r3, BASEPRI
 8003632:	603b      	str	r3, [r7, #0]
  return(result);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d007      	beq.n	800364a <osKernelStart+0x3a>
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <osKernelStart+0x68>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d103      	bne.n	800364a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003642:	f06f 0305 	mvn.w	r3, #5
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e010      	b.n	800366c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <osKernelStart+0x68>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d109      	bne.n	8003666 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003652:	f7ff ffa1 	bl	8003598 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <osKernelStart+0x68>)
 8003658:	2202      	movs	r2, #2
 800365a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800365c:	f001 fd34 	bl	80050c8 <vTaskStartScheduler>
      stat = osOK;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e002      	b.n	800366c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800366a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800366c:	68fb      	ldr	r3, [r7, #12]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	200000a4 	.word	0x200000a4

0800367c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b090      	sub	sp, #64	; 0x40
 8003680:	af04      	add	r7, sp, #16
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800368c:	f3ef 8305 	mrs	r3, IPSR
 8003690:	61fb      	str	r3, [r7, #28]
  return(result);
 8003692:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 808f 	bne.w	80037b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369a:	f3ef 8310 	mrs	r3, PRIMASK
 800369e:	61bb      	str	r3, [r7, #24]
  return(result);
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d105      	bne.n	80036b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036a6:	f3ef 8311 	mrs	r3, BASEPRI
 80036aa:	617b      	str	r3, [r7, #20]
  return(result);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <osThreadNew+0x3e>
 80036b2:	4b44      	ldr	r3, [pc, #272]	; (80037c4 <osThreadNew+0x148>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d07e      	beq.n	80037b8 <osThreadNew+0x13c>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d07b      	beq.n	80037b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80036c4:	2318      	movs	r3, #24
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80036cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d045      	beq.n	8003764 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <osThreadNew+0x6a>
        name = attr->name;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <osThreadNew+0x90>
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	2b38      	cmp	r3, #56	; 0x38
 80036fe:	d805      	bhi.n	800370c <osThreadNew+0x90>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <osThreadNew+0x94>
        return (NULL);
 800370c:	2300      	movs	r3, #0
 800370e:	e054      	b.n	80037ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <osThreadNew+0xca>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b5b      	cmp	r3, #91	; 0x5b
 800372e:	d90a      	bls.n	8003746 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <osThreadNew+0xca>
        mem = 1;
 8003740:	2301      	movs	r3, #1
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	e010      	b.n	8003768 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10c      	bne.n	8003768 <osThreadNew+0xec>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <osThreadNew+0xec>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <osThreadNew+0xec>
          mem = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	e001      	b.n	8003768 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d110      	bne.n	8003790 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003776:	9202      	str	r2, [sp, #8]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f001 fac3 	bl	8004d10 <xTaskCreateStatic>
 800378a:	4603      	mov	r3, r0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	e013      	b.n	80037b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d110      	bne.n	80037b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	b29a      	uxth	r2, r3
 800379a:	f107 0310 	add.w	r3, r7, #16
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f001 fb11 	bl	8004dd0 <xTaskCreate>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d001      	beq.n	80037b8 <osThreadNew+0x13c>
          hTask = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037b8:	693b      	ldr	r3, [r7, #16]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3730      	adds	r7, #48	; 0x30
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200000a4 	.word	0x200000a4

080037c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d0:	f3ef 8305 	mrs	r3, IPSR
 80037d4:	613b      	str	r3, [r7, #16]
  return(result);
 80037d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10f      	bne.n	80037fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037dc:	f3ef 8310 	mrs	r3, PRIMASK
 80037e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037e8:	f3ef 8311 	mrs	r3, BASEPRI
 80037ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <osDelay+0x3c>
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <osDelay+0x58>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d103      	bne.n	8003804 <osDelay+0x3c>
    stat = osErrorISR;
 80037fc:	f06f 0305 	mvn.w	r3, #5
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e007      	b.n	8003814 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <osDelay+0x4c>
      vTaskDelay(ticks);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f001 fc24 	bl	800505c <vTaskDelay>
    }
  }

  return (stat);
 8003814:	697b      	ldr	r3, [r7, #20]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200000a4 	.word	0x200000a4

08003824 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b08c      	sub	sp, #48	; 0x30
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003834:	f3ef 8305 	mrs	r3, IPSR
 8003838:	61bb      	str	r3, [r7, #24]
  return(result);
 800383a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800383c:	2b00      	cmp	r3, #0
 800383e:	f040 8087 	bne.w	8003950 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003842:	f3ef 8310 	mrs	r3, PRIMASK
 8003846:	617b      	str	r3, [r7, #20]
  return(result);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d105      	bne.n	800385a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800384e:	f3ef 8311 	mrs	r3, BASEPRI
 8003852:	613b      	str	r3, [r7, #16]
  return(result);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <osSemaphoreNew+0x3e>
 800385a:	4b40      	ldr	r3, [pc, #256]	; (800395c <osSemaphoreNew+0x138>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d076      	beq.n	8003950 <osSemaphoreNew+0x12c>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d073      	beq.n	8003950 <osSemaphoreNew+0x12c>
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	429a      	cmp	r2, r3
 800386e:	d86f      	bhi.n	8003950 <osSemaphoreNew+0x12c>
    mem = -1;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003874:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d015      	beq.n	80038a8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d006      	beq.n	8003892 <osSemaphoreNew+0x6e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b4f      	cmp	r3, #79	; 0x4f
 800388a:	d902      	bls.n	8003892 <osSemaphoreNew+0x6e>
        mem = 1;
 800388c:	2301      	movs	r3, #1
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	e00c      	b.n	80038ac <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <osSemaphoreNew+0x88>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <osSemaphoreNew+0x88>
          mem = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	623b      	str	r3, [r7, #32]
 80038a6:	e001      	b.n	80038ac <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038b2:	d04d      	beq.n	8003950 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d129      	bne.n	800390e <osSemaphoreNew+0xea>
        if (mem == 1) {
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10b      	bne.n	80038d8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	2303      	movs	r3, #3
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	2200      	movs	r2, #0
 80038cc:	2100      	movs	r1, #0
 80038ce:	2001      	movs	r0, #1
 80038d0:	f000 fa56 	bl	8003d80 <xQueueGenericCreateStatic>
 80038d4:	6278      	str	r0, [r7, #36]	; 0x24
 80038d6:	e005      	b.n	80038e4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80038d8:	2203      	movs	r2, #3
 80038da:	2100      	movs	r1, #0
 80038dc:	2001      	movs	r0, #1
 80038de:	f000 facc 	bl	8003e7a <xQueueGenericCreate>
 80038e2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d022      	beq.n	8003930 <osSemaphoreNew+0x10c>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01f      	beq.n	8003930 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80038f0:	2300      	movs	r3, #0
 80038f2:	2200      	movs	r2, #0
 80038f4:	2100      	movs	r1, #0
 80038f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038f8:	f000 fb92 	bl	8004020 <xQueueGenericSend>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d016      	beq.n	8003930 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8003902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003904:	f001 f831 	bl	800496a <vQueueDelete>
            hSemaphore = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	e010      	b.n	8003930 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d108      	bne.n	8003926 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	461a      	mov	r2, r3
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fb10 	bl	8003f42 <xQueueCreateCountingSemaphoreStatic>
 8003922:	6278      	str	r0, [r7, #36]	; 0x24
 8003924:	e004      	b.n	8003930 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fb43 	bl	8003fb4 <xQueueCreateCountingSemaphore>
 800392e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00c      	beq.n	8003950 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <osSemaphoreNew+0x120>
          name = attr->name;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e001      	b.n	8003948 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003948:	69f9      	ldr	r1, [r7, #28]
 800394a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800394c:	f001 f95a 	bl	8004c04 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003952:	4618      	mov	r0, r3
 8003954:	3728      	adds	r7, #40	; 0x28
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	200000a4 	.word	0x200000a4

08003960 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003978:	f06f 0303 	mvn.w	r3, #3
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	e04b      	b.n	8003a18 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003980:	f3ef 8305 	mrs	r3, IPSR
 8003984:	617b      	str	r3, [r7, #20]
  return(result);
 8003986:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398c:	f3ef 8310 	mrs	r3, PRIMASK
 8003990:	613b      	str	r3, [r7, #16]
  return(result);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003998:	f3ef 8311 	mrs	r3, BASEPRI
 800399c:	60fb      	str	r3, [r7, #12]
  return(result);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d026      	beq.n	80039f2 <osSemaphoreAcquire+0x92>
 80039a4:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <osSemaphoreAcquire+0xc4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d122      	bne.n	80039f2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80039b2:	f06f 0303 	mvn.w	r3, #3
 80039b6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80039b8:	e02d      	b.n	8003a16 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	461a      	mov	r2, r3
 80039c4:	2100      	movs	r1, #0
 80039c6:	69b8      	ldr	r0, [r7, #24]
 80039c8:	f000 ff4c 	bl	8004864 <xQueueReceiveFromISR>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d003      	beq.n	80039da <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80039d2:	f06f 0302 	mvn.w	r3, #2
 80039d6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80039d8:	e01d      	b.n	8003a16 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01a      	beq.n	8003a16 <osSemaphoreAcquire+0xb6>
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <osSemaphoreAcquire+0xc8>)
 80039e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80039f0:	e011      	b.n	8003a16 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	69b8      	ldr	r0, [r7, #24]
 80039f6:	f000 fe25 	bl	8004644 <xQueueSemaphoreTake>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d00b      	beq.n	8003a18 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003a06:	f06f 0301 	mvn.w	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e004      	b.n	8003a18 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003a0e:	f06f 0302 	mvn.w	r3, #2
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e000      	b.n	8003a18 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003a16:	bf00      	nop
      }
    }
  }

  return (stat);
 8003a18:	69fb      	ldr	r3, [r7, #28]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	200000a4 	.word	0x200000a4
 8003a28:	e000ed04 	.word	0xe000ed04

08003a2c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003a42:	f06f 0303 	mvn.w	r3, #3
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e03e      	b.n	8003ac8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a4a:	f3ef 8305 	mrs	r3, IPSR
 8003a4e:	617b      	str	r3, [r7, #20]
  return(result);
 8003a50:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a56:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5a:	613b      	str	r3, [r7, #16]
  return(result);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a62:	f3ef 8311 	mrs	r3, BASEPRI
 8003a66:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01e      	beq.n	8003aac <osSemaphoreRelease+0x80>
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <osSemaphoreRelease+0xa8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d11a      	bne.n	8003aac <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	4619      	mov	r1, r3
 8003a80:	69b8      	ldr	r0, [r7, #24]
 8003a82:	f000 fc6b 	bl	800435c <xQueueGiveFromISR>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d003      	beq.n	8003a94 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003a8c:	f06f 0302 	mvn.w	r3, #2
 8003a90:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003a92:	e018      	b.n	8003ac6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d015      	beq.n	8003ac6 <osSemaphoreRelease+0x9a>
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <osSemaphoreRelease+0xac>)
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003aaa:	e00c      	b.n	8003ac6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003aac:	2300      	movs	r3, #0
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	69b8      	ldr	r0, [r7, #24]
 8003ab4:	f000 fab4 	bl	8004020 <xQueueGenericSend>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d004      	beq.n	8003ac8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003abe:	f06f 0302 	mvn.w	r3, #2
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	e000      	b.n	8003ac8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ac6:	bf00      	nop
    }
  }

  return (stat);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200000a4 	.word	0x200000a4
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8003aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4a06      	ldr	r2, [pc, #24]	; (8003b0c <vApplicationGetIdleTaskMemory+0x30>)
 8003af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	601a      	str	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	200000a8 	.word	0x200000a8
 8003b0c:	20000104 	.word	0x20000104

08003b10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <vApplicationGetTimerTaskMemory+0x2c>)
 8003b20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4a06      	ldr	r2, [pc, #24]	; (8003b40 <vApplicationGetTimerTaskMemory+0x30>)
 8003b26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b2e:	601a      	str	r2, [r3, #0]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20000304 	.word	0x20000304
 8003b40:	20000360 	.word	0x20000360

08003b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f103 0208 	add.w	r2, r3, #8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f103 0208 	add.w	r2, r3, #8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f103 0208 	add.w	r2, r3, #8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfc:	d103      	bne.n	8003c06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e00c      	b.n	8003c20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e002      	b.n	8003c14 <vListInsert+0x2e>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d2f6      	bcs.n	8003c0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	601a      	str	r2, [r3, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6892      	ldr	r2, [r2, #8]
 8003c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6852      	ldr	r2, [r2, #4]
 8003c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d103      	bne.n	8003c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	1e5a      	subs	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	b672      	cpsid	i
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	b662      	cpsie	i
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	e7fe      	b.n	8003cd6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8003cd8:	f002 fc7e 	bl	80065d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	441a      	add	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	441a      	add	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	22ff      	movs	r2, #255	; 0xff
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	22ff      	movs	r2, #255	; 0xff
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d114      	bne.n	8003d58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01a      	beq.n	8003d6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3310      	adds	r3, #16
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 fc52 	bl	80055e4 <xTaskRemoveFromEventList>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d012      	beq.n	8003d6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <xQueueGenericReset+0xd0>)
 8003d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	e009      	b.n	8003d6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3310      	adds	r3, #16
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fef1 	bl	8003b44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3324      	adds	r3, #36	; 0x24
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff feec 	bl	8003b44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d6c:	f002 fc66 	bl	800663c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d70:	2301      	movs	r3, #1
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08e      	sub	sp, #56	; 0x38
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <xQueueGenericCreateStatic+0x2c>
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	b672      	cpsid	i
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	b662      	cpsie	i
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003daa:	e7fe      	b.n	8003daa <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <xQueueGenericCreateStatic+0x4a>
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	b672      	cpsid	i
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	b662      	cpsie	i
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc8:	e7fe      	b.n	8003dc8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <xQueueGenericCreateStatic+0x56>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <xQueueGenericCreateStatic+0x5a>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueGenericCreateStatic+0x5c>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <xQueueGenericCreateStatic+0x78>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	b672      	cpsid	i
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	b662      	cpsie	i
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	e7fe      	b.n	8003df6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <xQueueGenericCreateStatic+0x84>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <xQueueGenericCreateStatic+0x88>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <xQueueGenericCreateStatic+0x8a>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10b      	bne.n	8003e26 <xQueueGenericCreateStatic+0xa6>
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	b672      	cpsid	i
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	b662      	cpsie	i
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e7fe      	b.n	8003e24 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e26:	2350      	movs	r3, #80	; 0x50
 8003e28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b50      	cmp	r3, #80	; 0x50
 8003e2e:	d00b      	beq.n	8003e48 <xQueueGenericCreateStatic+0xc8>
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	b672      	cpsid	i
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	b662      	cpsie	i
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	e7fe      	b.n	8003e46 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f846 	bl	8003efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3730      	adds	r7, #48	; 0x30
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b08a      	sub	sp, #40	; 0x28
 8003e7e:	af02      	add	r7, sp, #8
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	4613      	mov	r3, r2
 8003e86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10b      	bne.n	8003ea6 <xQueueGenericCreate+0x2c>
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	b672      	cpsid	i
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	b662      	cpsie	i
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	e7fe      	b.n	8003ea4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	e004      	b.n	8003ebc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	3350      	adds	r3, #80	; 0x50
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f002 fcab 	bl	800681c <pvPortMalloc>
 8003ec6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3350      	adds	r3, #80	; 0x50
 8003ed6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ee0:	79fa      	ldrb	r2, [r7, #7]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f805 	bl	8003efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3720      	adds	r7, #32
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e002      	b.n	8003f1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	69b8      	ldr	r0, [r7, #24]
 8003f2e:	f7ff febd 	bl	8003cac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b08a      	sub	sp, #40	; 0x28
 8003f46:	af02      	add	r7, sp, #8
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <xQueueCreateCountingSemaphoreStatic+0x2a>
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	b672      	cpsid	i
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	b662      	cpsie	i
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e7fe      	b.n	8003f6a <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d90b      	bls.n	8003f8c <xQueueCreateCountingSemaphoreStatic+0x4a>
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	b672      	cpsid	i
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	b662      	cpsie	i
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	e7fe      	b.n	8003f8a <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2100      	movs	r1, #0
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff fef2 	bl	8003d80 <xQueueGenericCreateStatic>
 8003f9c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003faa:	69fb      	ldr	r3, [r7, #28]
	}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <xQueueCreateCountingSemaphore+0x28>
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	b672      	cpsid	i
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	b662      	cpsie	i
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	e7fe      	b.n	8003fda <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d90b      	bls.n	8003ffc <xQueueCreateCountingSemaphore+0x48>
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	b672      	cpsid	i
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	b662      	cpsie	i
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e7fe      	b.n	8003ffa <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	2100      	movs	r1, #0
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff3a 	bl	8003e7a <xQueueGenericCreate>
 8004006:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004014:	697b      	ldr	r3, [r7, #20]
	}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08e      	sub	sp, #56	; 0x38
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800402e:	2300      	movs	r3, #0
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <xQueueGenericSend+0x34>
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	b672      	cpsid	i
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	b662      	cpsie	i
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
 8004052:	e7fe      	b.n	8004052 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d103      	bne.n	8004062 <xQueueGenericSend+0x42>
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <xQueueGenericSend+0x46>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xQueueGenericSend+0x48>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10b      	bne.n	8004084 <xQueueGenericSend+0x64>
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	b672      	cpsid	i
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	b662      	cpsie	i
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
 8004082:	e7fe      	b.n	8004082 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d103      	bne.n	8004092 <xQueueGenericSend+0x72>
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <xQueueGenericSend+0x76>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <xQueueGenericSend+0x78>
 8004096:	2300      	movs	r3, #0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <xQueueGenericSend+0x94>
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	b672      	cpsid	i
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	b662      	cpsie	i
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	e7fe      	b.n	80040b2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040b4:	f001 fc54 	bl	8005960 <xTaskGetSchedulerState>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <xQueueGenericSend+0xa4>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xQueueGenericSend+0xa8>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <xQueueGenericSend+0xaa>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <xQueueGenericSend+0xc6>
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	b672      	cpsid	i
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	b662      	cpsie	i
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	e7fe      	b.n	80040e4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040e6:	f002 fa77 	bl	80065d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <xQueueGenericSend+0xdc>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d129      	bne.n	8004150 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004102:	f000 fc6e 	bl	80049e2 <prvCopyDataToQueue>
 8004106:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d010      	beq.n	8004132 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	3324      	adds	r3, #36	; 0x24
 8004114:	4618      	mov	r0, r3
 8004116:	f001 fa65 	bl	80055e4 <xTaskRemoveFromEventList>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <xQueueGenericSend+0x200>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	e00a      	b.n	8004148 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004138:	4b39      	ldr	r3, [pc, #228]	; (8004220 <xQueueGenericSend+0x200>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004148:	f002 fa78 	bl	800663c <vPortExitCritical>
				return pdPASS;
 800414c:	2301      	movs	r3, #1
 800414e:	e063      	b.n	8004218 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004156:	f002 fa71 	bl	800663c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800415a:	2300      	movs	r3, #0
 800415c:	e05c      	b.n	8004218 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	4618      	mov	r0, r3
 800416a:	f001 fa9f 	bl	80056ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800416e:	2301      	movs	r3, #1
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004172:	f002 fa63 	bl	800663c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004176:	f001 f80f 	bl	8005198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800417a:	f002 fa2d 	bl	80065d8 <vPortEnterCritical>
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004184:	b25b      	sxtb	r3, r3
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800418a:	d103      	bne.n	8004194 <xQueueGenericSend+0x174>
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419a:	b25b      	sxtb	r3, r3
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a0:	d103      	bne.n	80041aa <xQueueGenericSend+0x18a>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041aa:	f002 fa47 	bl	800663c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ae:	1d3a      	adds	r2, r7, #4
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	4611      	mov	r1, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 fa8e 	bl	80056d8 <xTaskCheckForTimeOut>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d124      	bne.n	800420c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c4:	f000 fd05 	bl	8004bd2 <prvIsQueueFull>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	3310      	adds	r3, #16
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 f9b2 	bl	8005540 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041de:	f000 fc90 	bl	8004b02 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041e2:	f000 ffe7 	bl	80051b4 <xTaskResumeAll>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f47f af7c 	bne.w	80040e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <xQueueGenericSend+0x200>)
 80041f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	e772      	b.n	80040e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004202:	f000 fc7e 	bl	8004b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004206:	f000 ffd5 	bl	80051b4 <xTaskResumeAll>
 800420a:	e76c      	b.n	80040e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420e:	f000 fc78 	bl	8004b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004212:	f000 ffcf 	bl	80051b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004216:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004218:	4618      	mov	r0, r3
 800421a:	3738      	adds	r7, #56	; 0x38
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <xQueueGenericSendFromISR+0x30>
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	b672      	cpsid	i
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	b662      	cpsie	i
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	e7fe      	b.n	8004252 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <xQueueGenericSendFromISR+0x3e>
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <xQueueGenericSendFromISR+0x42>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <xQueueGenericSendFromISR+0x44>
 8004266:	2300      	movs	r3, #0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <xQueueGenericSendFromISR+0x60>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	b672      	cpsid	i
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	b662      	cpsie	i
 8004280:	623b      	str	r3, [r7, #32]
 8004282:	e7fe      	b.n	8004282 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d103      	bne.n	8004292 <xQueueGenericSendFromISR+0x6e>
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <xQueueGenericSendFromISR+0x72>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <xQueueGenericSendFromISR+0x74>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <xQueueGenericSendFromISR+0x90>
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	b672      	cpsid	i
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	b662      	cpsie	i
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	e7fe      	b.n	80042b2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042b4:	f002 fa70 	bl	8006798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042b8:	f3ef 8211 	mrs	r2, BASEPRI
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	b672      	cpsid	i
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	b662      	cpsie	i
 80042d0:	61ba      	str	r2, [r7, #24]
 80042d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <xQueueGenericSendFromISR+0xc6>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d12c      	bne.n	8004344 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fa:	f000 fb72 	bl	80049e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004306:	d112      	bne.n	800432e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d016      	beq.n	800433e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	3324      	adds	r3, #36	; 0x24
 8004314:	4618      	mov	r0, r3
 8004316:	f001 f965 	bl	80055e4 <xTaskRemoveFromEventList>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e007      	b.n	800433e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800432e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004332:	3301      	adds	r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	b25a      	sxtb	r2, r3
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800433e:	2301      	movs	r3, #1
 8004340:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004342:	e001      	b.n	8004348 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004344:	2300      	movs	r3, #0
 8004346:	637b      	str	r3, [r7, #52]	; 0x34
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004354:	4618      	mov	r0, r3
 8004356:	3738      	adds	r7, #56	; 0x38
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	b672      	cpsid	i
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	b662      	cpsie	i
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	e7fe      	b.n	8004386 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <xQueueGiveFromISR+0x4c>
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	b672      	cpsid	i
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	b662      	cpsie	i
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	e7fe      	b.n	80043a6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d103      	bne.n	80043b8 <xQueueGiveFromISR+0x5c>
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <xQueueGiveFromISR+0x60>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <xQueueGiveFromISR+0x62>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <xQueueGiveFromISR+0x7e>
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	b672      	cpsid	i
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	b662      	cpsie	i
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	e7fe      	b.n	80043d8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043da:	f002 f9dd 	bl	8006798 <vPortValidateInterruptPriority>
	__asm volatile
 80043de:	f3ef 8211 	mrs	r2, BASEPRI
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	b672      	cpsid	i
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	b662      	cpsie	i
 80043f6:	617a      	str	r2, [r7, #20]
 80043f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80043fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440a:	429a      	cmp	r2, r3
 800440c:	d22b      	bcs.n	8004466 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004428:	d112      	bne.n	8004450 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	2b00      	cmp	r3, #0
 8004430:	d016      	beq.n	8004460 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	3324      	adds	r3, #36	; 0x24
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f8d4 	bl	80055e4 <xTaskRemoveFromEventList>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00e      	beq.n	8004460 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e007      	b.n	8004460 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004454:	3301      	adds	r3, #1
 8004456:	b2db      	uxtb	r3, r3
 8004458:	b25a      	sxtb	r2, r3
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004460:	2301      	movs	r3, #1
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
 8004464:	e001      	b.n	800446a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004466:	2300      	movs	r3, #0
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004476:	4618      	mov	r0, r3
 8004478:	3738      	adds	r7, #56	; 0x38
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08c      	sub	sp, #48	; 0x30
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800448c:	2300      	movs	r3, #0
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <xQueueReceive+0x32>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	b672      	cpsid	i
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	b662      	cpsie	i
 80044ae:	623b      	str	r3, [r7, #32]
 80044b0:	e7fe      	b.n	80044b0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <xQueueReceive+0x40>
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <xQueueReceive+0x44>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <xQueueReceive+0x46>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <xQueueReceive+0x62>
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	b672      	cpsid	i
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	b662      	cpsie	i
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	e7fe      	b.n	80044e0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044e2:	f001 fa3d 	bl	8005960 <xTaskGetSchedulerState>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <xQueueReceive+0x72>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <xQueueReceive+0x76>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <xQueueReceive+0x78>
 80044f6:	2300      	movs	r3, #0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10b      	bne.n	8004514 <xQueueReceive+0x94>
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	b672      	cpsid	i
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	b662      	cpsie	i
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	e7fe      	b.n	8004512 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004514:	f002 f860 	bl	80065d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01f      	beq.n	8004564 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004528:	f000 fac5 	bl	8004ab6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	1e5a      	subs	r2, r3, #1
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00f      	beq.n	800455c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	3310      	adds	r3, #16
 8004540:	4618      	mov	r0, r3
 8004542:	f001 f84f 	bl	80055e4 <xTaskRemoveFromEventList>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800454c:	4b3c      	ldr	r3, [pc, #240]	; (8004640 <xQueueReceive+0x1c0>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800455c:	f002 f86e 	bl	800663c <vPortExitCritical>
				return pdPASS;
 8004560:	2301      	movs	r3, #1
 8004562:	e069      	b.n	8004638 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800456a:	f002 f867 	bl	800663c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800456e:	2300      	movs	r3, #0
 8004570:	e062      	b.n	8004638 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	4618      	mov	r0, r3
 800457e:	f001 f895 	bl	80056ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004582:	2301      	movs	r3, #1
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004586:	f002 f859 	bl	800663c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800458a:	f000 fe05 	bl	8005198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800458e:	f002 f823 	bl	80065d8 <vPortEnterCritical>
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004598:	b25b      	sxtb	r3, r3
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800459e:	d103      	bne.n	80045a8 <xQueueReceive+0x128>
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ae:	b25b      	sxtb	r3, r3
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045b4:	d103      	bne.n	80045be <xQueueReceive+0x13e>
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045be:	f002 f83d 	bl	800663c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045c2:	1d3a      	adds	r2, r7, #4
 80045c4:	f107 0310 	add.w	r3, r7, #16
 80045c8:	4611      	mov	r1, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 f884 	bl	80056d8 <xTaskCheckForTimeOut>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d123      	bne.n	800461e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d8:	f000 fae5 	bl	8004ba6 <prvIsQueueEmpty>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	3324      	adds	r3, #36	; 0x24
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 ffa8 	bl	8005540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f2:	f000 fa86 	bl	8004b02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045f6:	f000 fddd 	bl	80051b4 <xTaskResumeAll>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d189      	bne.n	8004514 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <xQueueReceive+0x1c0>)
 8004602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	e780      	b.n	8004514 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004614:	f000 fa75 	bl	8004b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004618:	f000 fdcc 	bl	80051b4 <xTaskResumeAll>
 800461c:	e77a      	b.n	8004514 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800461e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004620:	f000 fa6f 	bl	8004b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004624:	f000 fdc6 	bl	80051b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462a:	f000 fabc 	bl	8004ba6 <prvIsQueueEmpty>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	f43f af6f 	beq.w	8004514 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004636:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004638:	4618      	mov	r0, r3
 800463a:	3730      	adds	r7, #48	; 0x30
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08e      	sub	sp, #56	; 0x38
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800464e:	2300      	movs	r3, #0
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <xQueueSemaphoreTake+0x34>
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	b672      	cpsid	i
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	b662      	cpsie	i
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	e7fe      	b.n	8004676 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <xQueueSemaphoreTake+0x54>
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	b672      	cpsid	i
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	b662      	cpsie	i
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	e7fe      	b.n	8004696 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004698:	f001 f962 	bl	8005960 <xTaskGetSchedulerState>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <xQueueSemaphoreTake+0x64>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <xQueueSemaphoreTake+0x68>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <xQueueSemaphoreTake+0x6a>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <xQueueSemaphoreTake+0x86>
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	b672      	cpsid	i
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	b662      	cpsie	i
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e7fe      	b.n	80046c8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ca:	f001 ff85 	bl	80065d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d024      	beq.n	8004724 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80046ea:	f001 fab3 	bl	8005c54 <pvTaskIncrementMutexHeldCount>
 80046ee:	4602      	mov	r2, r0
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00f      	beq.n	800471c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	3310      	adds	r3, #16
 8004700:	4618      	mov	r0, r3
 8004702:	f000 ff6f 	bl	80055e4 <xTaskRemoveFromEventList>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800470c:	4b54      	ldr	r3, [pc, #336]	; (8004860 <xQueueSemaphoreTake+0x21c>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800471c:	f001 ff8e 	bl	800663c <vPortExitCritical>
				return pdPASS;
 8004720:	2301      	movs	r3, #1
 8004722:	e098      	b.n	8004856 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d112      	bne.n	8004750 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <xQueueSemaphoreTake+0x104>
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	b672      	cpsid	i
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	b662      	cpsie	i
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	e7fe      	b.n	8004746 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004748:	f001 ff78 	bl	800663c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800474c:	2300      	movs	r3, #0
 800474e:	e082      	b.n	8004856 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004756:	f107 030c 	add.w	r3, r7, #12
 800475a:	4618      	mov	r0, r3
 800475c:	f000 ffa6 	bl	80056ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004764:	f001 ff6a 	bl	800663c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004768:	f000 fd16 	bl	8005198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800476c:	f001 ff34 	bl	80065d8 <vPortEnterCritical>
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004776:	b25b      	sxtb	r3, r3
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800477c:	d103      	bne.n	8004786 <xQueueSemaphoreTake+0x142>
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800478c:	b25b      	sxtb	r3, r3
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004792:	d103      	bne.n	800479c <xQueueSemaphoreTake+0x158>
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800479c:	f001 ff4e 	bl	800663c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047a0:	463a      	mov	r2, r7
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 ff95 	bl	80056d8 <xTaskCheckForTimeOut>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d132      	bne.n	800481a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047b6:	f000 f9f6 	bl	8004ba6 <prvIsQueueEmpty>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d026      	beq.n	800480e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80047c8:	f001 ff06 	bl	80065d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 f8e3 	bl	800599c <xTaskPriorityInherit>
 80047d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80047d8:	f001 ff30 	bl	800663c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	3324      	adds	r3, #36	; 0x24
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 feab 	bl	8005540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047ec:	f000 f989 	bl	8004b02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047f0:	f000 fce0 	bl	80051b4 <xTaskResumeAll>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f47f af67 	bne.w	80046ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80047fc:	4b18      	ldr	r3, [pc, #96]	; (8004860 <xQueueSemaphoreTake+0x21c>)
 80047fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	e75d      	b.n	80046ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800480e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004810:	f000 f977 	bl	8004b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004814:	f000 fcce 	bl	80051b4 <xTaskResumeAll>
 8004818:	e757      	b.n	80046ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800481a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800481c:	f000 f971 	bl	8004b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004820:	f000 fcc8 	bl	80051b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004824:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004826:	f000 f9be 	bl	8004ba6 <prvIsQueueEmpty>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	f43f af4c 	beq.w	80046ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004838:	f001 fece 	bl	80065d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800483c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800483e:	f000 f8b8 	bl	80049b2 <prvGetDisinheritPriorityAfterTimeout>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800484a:	4618      	mov	r0, r3
 800484c:	f001 f97e 	bl	8005b4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004850:	f001 fef4 	bl	800663c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004854:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004856:	4618      	mov	r0, r3
 8004858:	3738      	adds	r7, #56	; 0x38
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08e      	sub	sp, #56	; 0x38
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <xQueueReceiveFromISR+0x2e>
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	b672      	cpsid	i
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	b662      	cpsie	i
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	e7fe      	b.n	8004890 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d103      	bne.n	80048a0 <xQueueReceiveFromISR+0x3c>
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <xQueueReceiveFromISR+0x40>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <xQueueReceiveFromISR+0x42>
 80048a4:	2300      	movs	r3, #0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <xQueueReceiveFromISR+0x5e>
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	b672      	cpsid	i
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	b662      	cpsie	i
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	e7fe      	b.n	80048c0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048c2:	f001 ff69 	bl	8006798 <vPortValidateInterruptPriority>
	__asm volatile
 80048c6:	f3ef 8211 	mrs	r2, BASEPRI
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	b672      	cpsid	i
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	b662      	cpsie	i
 80048de:	61ba      	str	r2, [r7, #24]
 80048e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80048e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02f      	beq.n	8004952 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004900:	f000 f8d9 	bl	8004ab6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800490c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004914:	d112      	bne.n	800493c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	3310      	adds	r3, #16
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fe5e 	bl	80055e4 <xTaskRemoveFromEventList>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e007      	b.n	800494c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800493c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004940:	3301      	adds	r3, #1
 8004942:	b2db      	uxtb	r3, r3
 8004944:	b25a      	sxtb	r2, r3
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800494c:	2301      	movs	r3, #1
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
 8004950:	e001      	b.n	8004956 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8004952:	2300      	movs	r3, #0
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	613b      	str	r3, [r7, #16]
	__asm volatile
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004962:	4618      	mov	r0, r3
 8004964:	3738      	adds	r7, #56	; 0x38
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <vQueueDelete+0x2a>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	b672      	cpsid	i
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	b662      	cpsie	i
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	e7fe      	b.n	8004992 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f95d 	bl	8004c54 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f002 f801 	bl	80069ac <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d006      	beq.n	80049d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e001      	b.n	80049d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80049d4:	68fb      	ldr	r3, [r7, #12]
	}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10d      	bne.n	8004a1c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d14d      	bne.n	8004aa4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 f82d 	bl	8005a6c <xTaskPriorityDisinherit>
 8004a12:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	609a      	str	r2, [r3, #8]
 8004a1a:	e043      	b.n	8004aa4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d119      	bne.n	8004a56 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6858      	ldr	r0, [r3, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	f002 f907 	bl	8006c40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d32b      	bcc.n	8004aa4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	e026      	b.n	8004aa4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	68d8      	ldr	r0, [r3, #12]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	f002 f8ed 	bl	8006c40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	425b      	negs	r3, r3
 8004a70:	441a      	add	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d207      	bcs.n	8004a92 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	425b      	negs	r3, r3
 8004a8c:	441a      	add	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d105      	bne.n	8004aa4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004aac:	697b      	ldr	r3, [r7, #20]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d018      	beq.n	8004afa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	441a      	add	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d303      	bcc.n	8004aea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68d9      	ldr	r1, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	461a      	mov	r2, r3
 8004af4:	6838      	ldr	r0, [r7, #0]
 8004af6:	f002 f8a3 	bl	8006c40 <memcpy>
	}
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b0a:	f001 fd65 	bl	80065d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b14:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b16:	e011      	b.n	8004b3c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d012      	beq.n	8004b46 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3324      	adds	r3, #36	; 0x24
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fd5d 	bl	80055e4 <xTaskRemoveFromEventList>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b30:	f000 fe36 	bl	80057a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	dce9      	bgt.n	8004b18 <prvUnlockQueue+0x16>
 8004b44:	e000      	b.n	8004b48 <prvUnlockQueue+0x46>
					break;
 8004b46:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	22ff      	movs	r2, #255	; 0xff
 8004b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b50:	f001 fd74 	bl	800663c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b54:	f001 fd40 	bl	80065d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b5e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b60:	e011      	b.n	8004b86 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d012      	beq.n	8004b90 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fd38 	bl	80055e4 <xTaskRemoveFromEventList>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b7a:	f000 fe11 	bl	80057a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b7e:	7bbb      	ldrb	r3, [r7, #14]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	dce9      	bgt.n	8004b62 <prvUnlockQueue+0x60>
 8004b8e:	e000      	b.n	8004b92 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b90:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	22ff      	movs	r2, #255	; 0xff
 8004b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b9a:	f001 fd4f 	bl	800663c <vPortExitCritical>
}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bae:	f001 fd13 	bl	80065d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d102      	bne.n	8004bc0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e001      	b.n	8004bc4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bc4:	f001 fd3a 	bl	800663c <vPortExitCritical>

	return xReturn;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bda:	f001 fcfd 	bl	80065d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d102      	bne.n	8004bf0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e001      	b.n	8004bf4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bf4:	f001 fd22 	bl	800663c <vPortExitCritical>

	return xReturn;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e014      	b.n	8004c3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c14:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <vQueueAddToRegistry+0x4c>)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c20:	490b      	ldr	r1, [pc, #44]	; (8004c50 <vQueueAddToRegistry+0x4c>)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c2a:	4a09      	ldr	r2, [pc, #36]	; (8004c50 <vQueueAddToRegistry+0x4c>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c36:	e005      	b.n	8004c44 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b07      	cmp	r3, #7
 8004c42:	d9e7      	bls.n	8004c14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	20004aa8 	.word	0x20004aa8

08004c54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e016      	b.n	8004c90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004c62:	4a10      	ldr	r2, [pc, #64]	; (8004ca4 <vQueueUnregisterQueue+0x50>)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d10b      	bne.n	8004c8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004c72:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <vQueueUnregisterQueue+0x50>)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2100      	movs	r1, #0
 8004c78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004c7c:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <vQueueUnregisterQueue+0x50>)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	2200      	movs	r2, #0
 8004c86:	605a      	str	r2, [r3, #4]
				break;
 8004c88:	e005      	b.n	8004c96 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b07      	cmp	r3, #7
 8004c94:	d9e5      	bls.n	8004c62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20004aa8 	.word	0x20004aa8

08004ca8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cb8:	f001 fc8e 	bl	80065d8 <vPortEnterCritical>
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc8:	d103      	bne.n	8004cd2 <vQueueWaitForMessageRestricted+0x2a>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd8:	b25b      	sxtb	r3, r3
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cde:	d103      	bne.n	8004ce8 <vQueueWaitForMessageRestricted+0x40>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce8:	f001 fca8 	bl	800663c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	3324      	adds	r3, #36	; 0x24
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fc45 	bl	800558c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7ff fefd 	bl	8004b02 <prvUnlockQueue>
	}
 8004d08:	bf00      	nop
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08e      	sub	sp, #56	; 0x38
 8004d14:	af04      	add	r7, sp, #16
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10b      	bne.n	8004d3c <xTaskCreateStatic+0x2c>
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	b672      	cpsid	i
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	b662      	cpsie	i
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	e7fe      	b.n	8004d3a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <xTaskCreateStatic+0x4a>
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	b672      	cpsid	i
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	b662      	cpsie	i
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	e7fe      	b.n	8004d58 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d5a:	235c      	movs	r3, #92	; 0x5c
 8004d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b5c      	cmp	r3, #92	; 0x5c
 8004d62:	d00b      	beq.n	8004d7c <xTaskCreateStatic+0x6c>
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	b672      	cpsid	i
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	b662      	cpsie	i
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	e7fe      	b.n	8004d7a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01e      	beq.n	8004dc2 <xTaskCreateStatic+0xb2>
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01b      	beq.n	8004dc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	9302      	str	r3, [sp, #8]
 8004da4:	f107 0314 	add.w	r3, r7, #20
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f850 	bl	8004e5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dbc:	f000 f8de 	bl	8004f7c <prvAddNewTaskToReadyList>
 8004dc0:	e001      	b.n	8004dc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dc6:	697b      	ldr	r3, [r7, #20]
	}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3728      	adds	r7, #40	; 0x28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af04      	add	r7, sp, #16
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 fd19 	bl	800681c <pvPortMalloc>
 8004dea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00e      	beq.n	8004e10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004df2:	205c      	movs	r0, #92	; 0x5c
 8004df4:	f001 fd12 	bl	800681c <pvPortMalloc>
 8004df8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
 8004e06:	e005      	b.n	8004e14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e08:	6978      	ldr	r0, [r7, #20]
 8004e0a:	f001 fdcf 	bl	80069ac <vPortFree>
 8004e0e:	e001      	b.n	8004e14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d017      	beq.n	8004e4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	2300      	movs	r3, #0
 8004e26:	9303      	str	r3, [sp, #12]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	9302      	str	r3, [sp, #8]
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f80e 	bl	8004e5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e3e:	69f8      	ldr	r0, [r7, #28]
 8004e40:	f000 f89c 	bl	8004f7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e44:	2301      	movs	r3, #1
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	e002      	b.n	8004e50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e50:	69bb      	ldr	r3, [r7, #24]
	}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b088      	sub	sp, #32
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	461a      	mov	r2, r3
 8004e72:	21a5      	movs	r1, #165	; 0xa5
 8004e74:	f001 feef 	bl	8006c56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004e82:	440b      	add	r3, r1
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	f023 0307 	bic.w	r3, r3, #7
 8004e90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <prvInitialiseNewTask+0x5a>
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	b672      	cpsid	i
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	b662      	cpsie	i
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e7fe      	b.n	8004eb2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01f      	beq.n	8004efa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	e012      	b.n	8004ee6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	7819      	ldrb	r1, [r3, #0]
 8004ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	3334      	adds	r3, #52	; 0x34
 8004ed0:	460a      	mov	r2, r1
 8004ed2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d006      	beq.n	8004eee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	2b0f      	cmp	r3, #15
 8004eea:	d9e9      	bls.n	8004ec0 <prvInitialiseNewTask+0x66>
 8004eec:	e000      	b.n	8004ef0 <prvInitialiseNewTask+0x96>
			{
				break;
 8004eee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef8:	e003      	b.n	8004f02 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	2b37      	cmp	r3, #55	; 0x37
 8004f06:	d901      	bls.n	8004f0c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f08:	2337      	movs	r3, #55	; 0x37
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	3304      	adds	r3, #4
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fe2e 	bl	8003b84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	3318      	adds	r3, #24
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe fe29 	bl	8003b84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	69b8      	ldr	r0, [r7, #24]
 8004f5c:	f001 fa36 	bl	80063cc <pxPortInitialiseStack>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f72:	bf00      	nop
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f84:	f001 fb28 	bl	80065d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f88:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <prvAddNewTaskToReadyList+0xc4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	4a2c      	ldr	r2, [pc, #176]	; (8005040 <prvAddNewTaskToReadyList+0xc4>)
 8004f90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f92:	4b2c      	ldr	r3, [pc, #176]	; (8005044 <prvAddNewTaskToReadyList+0xc8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <prvAddNewTaskToReadyList+0xc8>)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <prvAddNewTaskToReadyList+0xc4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d110      	bne.n	8004fca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fa8:	f000 fc1e 	bl	80057e8 <prvInitialiseTaskLists>
 8004fac:	e00d      	b.n	8004fca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fae:	4b26      	ldr	r3, [pc, #152]	; (8005048 <prvAddNewTaskToReadyList+0xcc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fb6:	4b23      	ldr	r3, [pc, #140]	; (8005044 <prvAddNewTaskToReadyList+0xc8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d802      	bhi.n	8004fca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fc4:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <prvAddNewTaskToReadyList+0xc8>)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <prvAddNewTaskToReadyList+0xd0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	4a1e      	ldr	r2, [pc, #120]	; (800504c <prvAddNewTaskToReadyList+0xd0>)
 8004fd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	; (800504c <prvAddNewTaskToReadyList+0xd0>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <prvAddNewTaskToReadyList+0xd4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d903      	bls.n	8004ff0 <prvAddNewTaskToReadyList+0x74>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	4a18      	ldr	r2, [pc, #96]	; (8005050 <prvAddNewTaskToReadyList+0xd4>)
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4a15      	ldr	r2, [pc, #84]	; (8005054 <prvAddNewTaskToReadyList+0xd8>)
 8004ffe:	441a      	add	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f7fe fdc9 	bl	8003b9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800500c:	f001 fb16 	bl	800663c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <prvAddNewTaskToReadyList+0xcc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00e      	beq.n	8005036 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <prvAddNewTaskToReadyList+0xc8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	429a      	cmp	r2, r3
 8005024:	d207      	bcs.n	8005036 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <prvAddNewTaskToReadyList+0xdc>)
 8005028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000c34 	.word	0x20000c34
 8005044:	20000760 	.word	0x20000760
 8005048:	20000c40 	.word	0x20000c40
 800504c:	20000c50 	.word	0x20000c50
 8005050:	20000c3c 	.word	0x20000c3c
 8005054:	20000764 	.word	0x20000764
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d018      	beq.n	80050a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800506e:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <vTaskDelay+0x64>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <vTaskDelay+0x32>
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	b672      	cpsid	i
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	b662      	cpsie	i
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	e7fe      	b.n	800508c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800508e:	f000 f883 	bl	8005198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005092:	2100      	movs	r1, #0
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fdf1 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800509a:	f000 f88b 	bl	80051b4 <xTaskResumeAll>
 800509e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <vTaskDelay+0x68>)
 80050a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050b6:	bf00      	nop
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000c5c 	.word	0x20000c5c
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050d6:	463a      	mov	r2, r7
 80050d8:	1d39      	adds	r1, r7, #4
 80050da:	f107 0308 	add.w	r3, r7, #8
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe fcfc 	bl	8003adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	9202      	str	r2, [sp, #8]
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2300      	movs	r3, #0
 80050f4:	460a      	mov	r2, r1
 80050f6:	4922      	ldr	r1, [pc, #136]	; (8005180 <vTaskStartScheduler+0xb8>)
 80050f8:	4822      	ldr	r0, [pc, #136]	; (8005184 <vTaskStartScheduler+0xbc>)
 80050fa:	f7ff fe09 	bl	8004d10 <xTaskCreateStatic>
 80050fe:	4602      	mov	r2, r0
 8005100:	4b21      	ldr	r3, [pc, #132]	; (8005188 <vTaskStartScheduler+0xc0>)
 8005102:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <vTaskStartScheduler+0xc0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800510c:	2301      	movs	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	e001      	b.n	8005116 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d102      	bne.n	8005122 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800511c:	f000 fe02 	bl	8005d24 <xTimerCreateTimerTask>
 8005120:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d117      	bne.n	8005158 <vTaskStartScheduler+0x90>
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	b672      	cpsid	i
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	b662      	cpsie	i
 800513c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <vTaskStartScheduler+0xc4>)
 8005140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005144:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <vTaskStartScheduler+0xc8>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800514c:	4b11      	ldr	r3, [pc, #68]	; (8005194 <vTaskStartScheduler+0xcc>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005152:	f001 f9c5 	bl	80064e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005156:	e00f      	b.n	8005178 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515e:	d10b      	bne.n	8005178 <vTaskStartScheduler+0xb0>
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	b672      	cpsid	i
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	b662      	cpsie	i
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e7fe      	b.n	8005176 <vTaskStartScheduler+0xae>
}
 8005178:	bf00      	nop
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	08007540 	.word	0x08007540
 8005184:	080057b9 	.word	0x080057b9
 8005188:	20000c58 	.word	0x20000c58
 800518c:	20000c54 	.word	0x20000c54
 8005190:	20000c40 	.word	0x20000c40
 8005194:	20000c38 	.word	0x20000c38

08005198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <vTaskSuspendAll+0x18>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a03      	ldr	r2, [pc, #12]	; (80051b0 <vTaskSuspendAll+0x18>)
 80051a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	20000c5c 	.word	0x20000c5c

080051b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051c2:	4b42      	ldr	r3, [pc, #264]	; (80052cc <xTaskResumeAll+0x118>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <xTaskResumeAll+0x2e>
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	b672      	cpsid	i
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	b662      	cpsie	i
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	e7fe      	b.n	80051e0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051e2:	f001 f9f9 	bl	80065d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051e6:	4b39      	ldr	r3, [pc, #228]	; (80052cc <xTaskResumeAll+0x118>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	4a37      	ldr	r2, [pc, #220]	; (80052cc <xTaskResumeAll+0x118>)
 80051ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f0:	4b36      	ldr	r3, [pc, #216]	; (80052cc <xTaskResumeAll+0x118>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d162      	bne.n	80052be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051f8:	4b35      	ldr	r3, [pc, #212]	; (80052d0 <xTaskResumeAll+0x11c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d05e      	beq.n	80052be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005200:	e02f      	b.n	8005262 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005202:	4b34      	ldr	r3, [pc, #208]	; (80052d4 <xTaskResumeAll+0x120>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3318      	adds	r3, #24
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fd22 	bl	8003c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3304      	adds	r3, #4
 8005218:	4618      	mov	r0, r3
 800521a:	f7fe fd1d 	bl	8003c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005222:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <xTaskResumeAll+0x124>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d903      	bls.n	8005232 <xTaskResumeAll+0x7e>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <xTaskResumeAll+0x124>)
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4a27      	ldr	r2, [pc, #156]	; (80052dc <xTaskResumeAll+0x128>)
 8005240:	441a      	add	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3304      	adds	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f7fe fca8 	bl	8003b9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005252:	4b23      	ldr	r3, [pc, #140]	; (80052e0 <xTaskResumeAll+0x12c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	429a      	cmp	r2, r3
 800525a:	d302      	bcc.n	8005262 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800525c:	4b21      	ldr	r3, [pc, #132]	; (80052e4 <xTaskResumeAll+0x130>)
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <xTaskResumeAll+0x120>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1cb      	bne.n	8005202 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005270:	f000 fb56 	bl	8005920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005274:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <xTaskResumeAll+0x134>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d010      	beq.n	80052a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005280:	f000 f846 	bl	8005310 <xTaskIncrementTick>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800528a:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <xTaskResumeAll+0x130>)
 800528c:	2201      	movs	r2, #1
 800528e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3b01      	subs	r3, #1
 8005294:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f1      	bne.n	8005280 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800529c:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <xTaskResumeAll+0x134>)
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <xTaskResumeAll+0x130>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <xTaskResumeAll+0x138>)
 80052b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052be:	f001 f9bd 	bl	800663c <vPortExitCritical>

	return xAlreadyYielded;
 80052c2:	68bb      	ldr	r3, [r7, #8]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000c5c 	.word	0x20000c5c
 80052d0:	20000c34 	.word	0x20000c34
 80052d4:	20000bf4 	.word	0x20000bf4
 80052d8:	20000c3c 	.word	0x20000c3c
 80052dc:	20000764 	.word	0x20000764
 80052e0:	20000760 	.word	0x20000760
 80052e4:	20000c48 	.word	0x20000c48
 80052e8:	20000c44 	.word	0x20000c44
 80052ec:	e000ed04 	.word	0xe000ed04

080052f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <xTaskGetTickCount+0x1c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052fc:	687b      	ldr	r3, [r7, #4]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000c38 	.word	0x20000c38

08005310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800531a:	4b4f      	ldr	r3, [pc, #316]	; (8005458 <xTaskIncrementTick+0x148>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 808a 	bne.w	8005438 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005324:	4b4d      	ldr	r3, [pc, #308]	; (800545c <xTaskIncrementTick+0x14c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800532c:	4a4b      	ldr	r2, [pc, #300]	; (800545c <xTaskIncrementTick+0x14c>)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d121      	bne.n	800537c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005338:	4b49      	ldr	r3, [pc, #292]	; (8005460 <xTaskIncrementTick+0x150>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <xTaskIncrementTick+0x4a>
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	b672      	cpsid	i
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	b662      	cpsie	i
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	e7fe      	b.n	8005358 <xTaskIncrementTick+0x48>
 800535a:	4b41      	ldr	r3, [pc, #260]	; (8005460 <xTaskIncrementTick+0x150>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	4b40      	ldr	r3, [pc, #256]	; (8005464 <xTaskIncrementTick+0x154>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a3e      	ldr	r2, [pc, #248]	; (8005460 <xTaskIncrementTick+0x150>)
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	4a3e      	ldr	r2, [pc, #248]	; (8005464 <xTaskIncrementTick+0x154>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b3e      	ldr	r3, [pc, #248]	; (8005468 <xTaskIncrementTick+0x158>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3301      	adds	r3, #1
 8005374:	4a3c      	ldr	r2, [pc, #240]	; (8005468 <xTaskIncrementTick+0x158>)
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	f000 fad2 	bl	8005920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800537c:	4b3b      	ldr	r3, [pc, #236]	; (800546c <xTaskIncrementTick+0x15c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	429a      	cmp	r2, r3
 8005384:	d349      	bcc.n	800541a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005386:	4b36      	ldr	r3, [pc, #216]	; (8005460 <xTaskIncrementTick+0x150>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005390:	4b36      	ldr	r3, [pc, #216]	; (800546c <xTaskIncrementTick+0x15c>)
 8005392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005396:	601a      	str	r2, [r3, #0]
					break;
 8005398:	e03f      	b.n	800541a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539a:	4b31      	ldr	r3, [pc, #196]	; (8005460 <xTaskIncrementTick+0x150>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d203      	bcs.n	80053ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053b2:	4a2e      	ldr	r2, [pc, #184]	; (800546c <xTaskIncrementTick+0x15c>)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053b8:	e02f      	b.n	800541a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	3304      	adds	r3, #4
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe fc4a 	bl	8003c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3318      	adds	r3, #24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fc41 	bl	8003c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053da:	4b25      	ldr	r3, [pc, #148]	; (8005470 <xTaskIncrementTick+0x160>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d903      	bls.n	80053ea <xTaskIncrementTick+0xda>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	4a22      	ldr	r2, [pc, #136]	; (8005470 <xTaskIncrementTick+0x160>)
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4a1f      	ldr	r2, [pc, #124]	; (8005474 <xTaskIncrementTick+0x164>)
 80053f8:	441a      	add	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f7fe fbcc 	bl	8003b9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <xTaskIncrementTick+0x168>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	429a      	cmp	r2, r3
 8005412:	d3b8      	bcc.n	8005386 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005418:	e7b5      	b.n	8005386 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800541a:	4b17      	ldr	r3, [pc, #92]	; (8005478 <xTaskIncrementTick+0x168>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	4914      	ldr	r1, [pc, #80]	; (8005474 <xTaskIncrementTick+0x164>)
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d907      	bls.n	8005442 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005432:	2301      	movs	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e004      	b.n	8005442 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005438:	4b10      	ldr	r3, [pc, #64]	; (800547c <xTaskIncrementTick+0x16c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	4a0f      	ldr	r2, [pc, #60]	; (800547c <xTaskIncrementTick+0x16c>)
 8005440:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005442:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <xTaskIncrementTick+0x170>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800544a:	2301      	movs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800544e:	697b      	ldr	r3, [r7, #20]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000c5c 	.word	0x20000c5c
 800545c:	20000c38 	.word	0x20000c38
 8005460:	20000bec 	.word	0x20000bec
 8005464:	20000bf0 	.word	0x20000bf0
 8005468:	20000c4c 	.word	0x20000c4c
 800546c:	20000c54 	.word	0x20000c54
 8005470:	20000c3c 	.word	0x20000c3c
 8005474:	20000764 	.word	0x20000764
 8005478:	20000760 	.word	0x20000760
 800547c:	20000c44 	.word	0x20000c44
 8005480:	20000c48 	.word	0x20000c48

08005484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800548a:	4b28      	ldr	r3, [pc, #160]	; (800552c <vTaskSwitchContext+0xa8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005492:	4b27      	ldr	r3, [pc, #156]	; (8005530 <vTaskSwitchContext+0xac>)
 8005494:	2201      	movs	r2, #1
 8005496:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005498:	e042      	b.n	8005520 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800549a:	4b25      	ldr	r3, [pc, #148]	; (8005530 <vTaskSwitchContext+0xac>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <vTaskSwitchContext+0xb0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e011      	b.n	80054cc <vTaskSwitchContext+0x48>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <vTaskSwitchContext+0x42>
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	b672      	cpsid	i
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	b662      	cpsie	i
 80054c2:	607b      	str	r3, [r7, #4]
 80054c4:	e7fe      	b.n	80054c4 <vTaskSwitchContext+0x40>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	491a      	ldr	r1, [pc, #104]	; (8005538 <vTaskSwitchContext+0xb4>)
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0e3      	beq.n	80054a8 <vTaskSwitchContext+0x24>
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4a13      	ldr	r2, [pc, #76]	; (8005538 <vTaskSwitchContext+0xb4>)
 80054ec:	4413      	add	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3308      	adds	r3, #8
 8005502:	429a      	cmp	r2, r3
 8005504:	d104      	bne.n	8005510 <vTaskSwitchContext+0x8c>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <vTaskSwitchContext+0xb8>)
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	4a06      	ldr	r2, [pc, #24]	; (8005534 <vTaskSwitchContext+0xb0>)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6013      	str	r3, [r2, #0]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	20000c5c 	.word	0x20000c5c
 8005530:	20000c48 	.word	0x20000c48
 8005534:	20000c3c 	.word	0x20000c3c
 8005538:	20000764 	.word	0x20000764
 800553c:	20000760 	.word	0x20000760

08005540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <vTaskPlaceOnEventList+0x28>
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	b672      	cpsid	i
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	b662      	cpsie	i
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e7fe      	b.n	8005566 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <vTaskPlaceOnEventList+0x48>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3318      	adds	r3, #24
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fe fb38 	bl	8003be6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005576:	2101      	movs	r1, #1
 8005578:	6838      	ldr	r0, [r7, #0]
 800557a:	f000 fb7f 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
}
 800557e:	bf00      	nop
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000760 	.word	0x20000760

0800558c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10b      	bne.n	80055b6 <vTaskPlaceOnEventListRestricted+0x2a>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	b672      	cpsid	i
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	b662      	cpsie	i
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e7fe      	b.n	80055b4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3318      	adds	r3, #24
 80055bc:	4619      	mov	r1, r3
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7fe faed 	bl	8003b9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80055ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	68b8      	ldr	r0, [r7, #8]
 80055d4:	f000 fb52 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
	}
 80055d8:	bf00      	nop
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000760 	.word	0x20000760

080055e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <xTaskRemoveFromEventList+0x2e>
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	b672      	cpsid	i
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	b662      	cpsie	i
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e7fe      	b.n	8005610 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3318      	adds	r3, #24
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe fb1e 	bl	8003c58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800561c:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <xTaskRemoveFromEventList+0xb0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d11d      	bne.n	8005660 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	3304      	adds	r3, #4
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe fb15 	bl	8003c58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005632:	4b19      	ldr	r3, [pc, #100]	; (8005698 <xTaskRemoveFromEventList+0xb4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d903      	bls.n	8005642 <xTaskRemoveFromEventList+0x5e>
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	4a16      	ldr	r2, [pc, #88]	; (8005698 <xTaskRemoveFromEventList+0xb4>)
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4a13      	ldr	r2, [pc, #76]	; (800569c <xTaskRemoveFromEventList+0xb8>)
 8005650:	441a      	add	r2, r3
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	3304      	adds	r3, #4
 8005656:	4619      	mov	r1, r3
 8005658:	4610      	mov	r0, r2
 800565a:	f7fe faa0 	bl	8003b9e <vListInsertEnd>
 800565e:	e005      	b.n	800566c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	3318      	adds	r3, #24
 8005664:	4619      	mov	r1, r3
 8005666:	480e      	ldr	r0, [pc, #56]	; (80056a0 <xTaskRemoveFromEventList+0xbc>)
 8005668:	f7fe fa99 	bl	8003b9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <xTaskRemoveFromEventList+0xc0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	429a      	cmp	r2, r3
 8005678:	d905      	bls.n	8005686 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800567a:	2301      	movs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800567e:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <xTaskRemoveFromEventList+0xc4>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e001      	b.n	800568a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800568a:	697b      	ldr	r3, [r7, #20]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000c5c 	.word	0x20000c5c
 8005698:	20000c3c 	.word	0x20000c3c
 800569c:	20000764 	.word	0x20000764
 80056a0:	20000bf4 	.word	0x20000bf4
 80056a4:	20000760 	.word	0x20000760
 80056a8:	20000c48 	.word	0x20000c48

080056ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <vTaskInternalSetTimeOutState+0x24>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <vTaskInternalSetTimeOutState+0x28>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	605a      	str	r2, [r3, #4]
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	20000c4c 	.word	0x20000c4c
 80056d4:	20000c38 	.word	0x20000c38

080056d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <xTaskCheckForTimeOut+0x28>
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	b672      	cpsid	i
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	b662      	cpsie	i
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	e7fe      	b.n	80056fe <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <xTaskCheckForTimeOut+0x46>
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	b672      	cpsid	i
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	b662      	cpsie	i
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e7fe      	b.n	800571c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800571e:	f000 ff5b 	bl	80065d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <xTaskCheckForTimeOut+0xc0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800573a:	d102      	bne.n	8005742 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	e023      	b.n	800578a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b15      	ldr	r3, [pc, #84]	; (800579c <xTaskCheckForTimeOut+0xc4>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d007      	beq.n	800575e <xTaskCheckForTimeOut+0x86>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	429a      	cmp	r2, r3
 8005756:	d302      	bcc.n	800575e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005758:	2301      	movs	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	e015      	b.n	800578a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	429a      	cmp	r2, r3
 8005766:	d20b      	bcs.n	8005780 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ff99 	bl	80056ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e004      	b.n	800578a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005786:	2301      	movs	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800578a:	f000 ff57 	bl	800663c <vPortExitCritical>

	return xReturn;
 800578e:	69fb      	ldr	r3, [r7, #28]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000c38 	.word	0x20000c38
 800579c:	20000c4c 	.word	0x20000c4c

080057a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <vTaskMissedYield+0x14>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	20000c48 	.word	0x20000c48

080057b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057c0:	f000 f852 	bl	8005868 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <prvIdleTask+0x28>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d9f9      	bls.n	80057c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <prvIdleTask+0x2c>)
 80057ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057dc:	e7f0      	b.n	80057c0 <prvIdleTask+0x8>
 80057de:	bf00      	nop
 80057e0:	20000764 	.word	0x20000764
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ee:	2300      	movs	r3, #0
 80057f0:	607b      	str	r3, [r7, #4]
 80057f2:	e00c      	b.n	800580e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4a12      	ldr	r2, [pc, #72]	; (8005848 <prvInitialiseTaskLists+0x60>)
 8005800:	4413      	add	r3, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f7fe f99e 	bl	8003b44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3301      	adds	r3, #1
 800580c:	607b      	str	r3, [r7, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b37      	cmp	r3, #55	; 0x37
 8005812:	d9ef      	bls.n	80057f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005814:	480d      	ldr	r0, [pc, #52]	; (800584c <prvInitialiseTaskLists+0x64>)
 8005816:	f7fe f995 	bl	8003b44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800581a:	480d      	ldr	r0, [pc, #52]	; (8005850 <prvInitialiseTaskLists+0x68>)
 800581c:	f7fe f992 	bl	8003b44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005820:	480c      	ldr	r0, [pc, #48]	; (8005854 <prvInitialiseTaskLists+0x6c>)
 8005822:	f7fe f98f 	bl	8003b44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005826:	480c      	ldr	r0, [pc, #48]	; (8005858 <prvInitialiseTaskLists+0x70>)
 8005828:	f7fe f98c 	bl	8003b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800582c:	480b      	ldr	r0, [pc, #44]	; (800585c <prvInitialiseTaskLists+0x74>)
 800582e:	f7fe f989 	bl	8003b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005832:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <prvInitialiseTaskLists+0x78>)
 8005834:	4a05      	ldr	r2, [pc, #20]	; (800584c <prvInitialiseTaskLists+0x64>)
 8005836:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <prvInitialiseTaskLists+0x7c>)
 800583a:	4a05      	ldr	r2, [pc, #20]	; (8005850 <prvInitialiseTaskLists+0x68>)
 800583c:	601a      	str	r2, [r3, #0]
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000764 	.word	0x20000764
 800584c:	20000bc4 	.word	0x20000bc4
 8005850:	20000bd8 	.word	0x20000bd8
 8005854:	20000bf4 	.word	0x20000bf4
 8005858:	20000c08 	.word	0x20000c08
 800585c:	20000c20 	.word	0x20000c20
 8005860:	20000bec 	.word	0x20000bec
 8005864:	20000bf0 	.word	0x20000bf0

08005868 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800586e:	e019      	b.n	80058a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005870:	f000 feb2 	bl	80065d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <prvCheckTasksWaitingTermination+0x4c>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe f9e9 	bl	8003c58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <prvCheckTasksWaitingTermination+0x50>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3b01      	subs	r3, #1
 800588c:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <prvCheckTasksWaitingTermination+0x50>)
 800588e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <prvCheckTasksWaitingTermination+0x54>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3b01      	subs	r3, #1
 8005896:	4a09      	ldr	r2, [pc, #36]	; (80058bc <prvCheckTasksWaitingTermination+0x54>)
 8005898:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800589a:	f000 fecf 	bl	800663c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f80e 	bl	80058c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <prvCheckTasksWaitingTermination+0x54>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e1      	bne.n	8005870 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000c08 	.word	0x20000c08
 80058b8:	20000c34 	.word	0x20000c34
 80058bc:	20000c1c 	.word	0x20000c1c

080058c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d108      	bne.n	80058e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 f868 	bl	80069ac <vPortFree>
				vPortFree( pxTCB );
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 f865 	bl	80069ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058e2:	e019      	b.n	8005918 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d103      	bne.n	80058f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 f85c 	bl	80069ac <vPortFree>
	}
 80058f4:	e010      	b.n	8005918 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d00b      	beq.n	8005918 <prvDeleteTCB+0x58>
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	b672      	cpsid	i
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	b662      	cpsie	i
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e7fe      	b.n	8005916 <prvDeleteTCB+0x56>
	}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005926:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <prvResetNextTaskUnblockTime+0x38>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005930:	4b0a      	ldr	r3, [pc, #40]	; (800595c <prvResetNextTaskUnblockTime+0x3c>)
 8005932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005938:	e008      	b.n	800594c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593a:	4b07      	ldr	r3, [pc, #28]	; (8005958 <prvResetNextTaskUnblockTime+0x38>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a04      	ldr	r2, [pc, #16]	; (800595c <prvResetNextTaskUnblockTime+0x3c>)
 800594a:	6013      	str	r3, [r2, #0]
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	20000bec 	.word	0x20000bec
 800595c:	20000c54 	.word	0x20000c54

08005960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <xTaskGetSchedulerState+0x34>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800596e:	2301      	movs	r3, #1
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	e008      	b.n	8005986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005974:	4b08      	ldr	r3, [pc, #32]	; (8005998 <xTaskGetSchedulerState+0x38>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800597c:	2302      	movs	r3, #2
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	e001      	b.n	8005986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005986:	687b      	ldr	r3, [r7, #4]
	}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	20000c40 	.word	0x20000c40
 8005998:	20000c5c 	.word	0x20000c5c

0800599c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d051      	beq.n	8005a56 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b6:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <xTaskPriorityInherit+0xc4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	429a      	cmp	r2, r3
 80059be:	d241      	bcs.n	8005a44 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	db06      	blt.n	80059d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c8:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <xTaskPriorityInherit+0xc4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6959      	ldr	r1, [r3, #20]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <xTaskPriorityInherit+0xc8>)
 80059e8:	4413      	add	r3, r2
 80059ea:	4299      	cmp	r1, r3
 80059ec:	d122      	bne.n	8005a34 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	3304      	adds	r3, #4
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe f930 	bl	8003c58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059f8:	4b19      	ldr	r3, [pc, #100]	; (8005a60 <xTaskPriorityInherit+0xc4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <xTaskPriorityInherit+0xcc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d903      	bls.n	8005a16 <xTaskPriorityInherit+0x7a>
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <xTaskPriorityInherit+0xcc>)
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4a10      	ldr	r2, [pc, #64]	; (8005a64 <xTaskPriorityInherit+0xc8>)
 8005a24:	441a      	add	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	f7fe f8b6 	bl	8003b9e <vListInsertEnd>
 8005a32:	e004      	b.n	8005a3e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <xTaskPriorityInherit+0xc4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e008      	b.n	8005a56 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <xTaskPriorityInherit+0xc4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d201      	bcs.n	8005a56 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a52:	2301      	movs	r3, #1
 8005a54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a56:	68fb      	ldr	r3, [r7, #12]
	}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000760 	.word	0x20000760
 8005a64:	20000764 	.word	0x20000764
 8005a68:	20000c3c 	.word	0x20000c3c

08005a6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d058      	beq.n	8005b34 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a82:	4b2f      	ldr	r3, [pc, #188]	; (8005b40 <xTaskPriorityDisinherit+0xd4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d00b      	beq.n	8005aa4 <xTaskPriorityDisinherit+0x38>
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	b672      	cpsid	i
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	b662      	cpsie	i
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e7fe      	b.n	8005aa2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10b      	bne.n	8005ac4 <xTaskPriorityDisinherit+0x58>
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	b672      	cpsid	i
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	b662      	cpsie	i
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	e7fe      	b.n	8005ac2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	1e5a      	subs	r2, r3, #1
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d02c      	beq.n	8005b34 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d128      	bne.n	8005b34 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe f8b6 	bl	8003c58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <xTaskPriorityDisinherit+0xd8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d903      	bls.n	8005b14 <xTaskPriorityDisinherit+0xa8>
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <xTaskPriorityDisinherit+0xd8>)
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <xTaskPriorityDisinherit+0xdc>)
 8005b22:	441a      	add	r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f7fe f837 	bl	8003b9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b34:	697b      	ldr	r3, [r7, #20]
	}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000760 	.word	0x20000760
 8005b44:	20000c3c 	.word	0x20000c3c
 8005b48:	20000764 	.word	0x20000764

08005b4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d06c      	beq.n	8005c3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	b672      	cpsid	i
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	b662      	cpsie	i
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e7fe      	b.n	8005b82 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d902      	bls.n	8005b94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e002      	b.n	8005b9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d04c      	beq.n	8005c3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d147      	bne.n	8005c3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005bae:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d10b      	bne.n	8005bd0 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	b672      	cpsid	i
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	b662      	cpsie	i
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	e7fe      	b.n	8005bce <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	db04      	blt.n	8005bee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	6959      	ldr	r1, [r3, #20]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005bfe:	4413      	add	r3, r2
 8005c00:	4299      	cmp	r1, r3
 8005c02:	d11c      	bne.n	8005c3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe f825 	bl	8003c58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d903      	bls.n	8005c22 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	4a0c      	ldr	r2, [pc, #48]	; (8005c50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4a07      	ldr	r2, [pc, #28]	; (8005c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c30:	441a      	add	r2, r3
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f7fd ffb0 	bl	8003b9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c3e:	bf00      	nop
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000760 	.word	0x20000760
 8005c4c:	20000764 	.word	0x20000764
 8005c50:	20000c3c 	.word	0x20000c3c

08005c54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c66:	3201      	adds	r2, #1
 8005c68:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005c6a:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
	}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	20000760 	.word	0x20000760

08005c7c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c86:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <prvAddCurrentTaskToDelayedList+0x90>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c8c:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fd ffe0 	bl	8003c58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c9e:	d10a      	bne.n	8005cb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca6:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4819      	ldr	r0, [pc, #100]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cb0:	f7fd ff75 	bl	8003b9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cb4:	e026      	b.n	8005d04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cbe:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d209      	bcs.n	8005ce2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f7fd ff83 	bl	8003be6 <vListInsert>
}
 8005ce0:	e010      	b.n	8005d04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f7fd ff79 	bl	8003be6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d202      	bcs.n	8005d04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cfe:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6013      	str	r3, [r2, #0]
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000c38 	.word	0x20000c38
 8005d10:	20000760 	.word	0x20000760
 8005d14:	20000c20 	.word	0x20000c20
 8005d18:	20000bf0 	.word	0x20000bf0
 8005d1c:	20000bec 	.word	0x20000bec
 8005d20:	20000c54 	.word	0x20000c54

08005d24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d2e:	f000 fb0d 	bl	800634c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d32:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <xTimerCreateTimerTask+0x84>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d021      	beq.n	8005d7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d42:	1d3a      	adds	r2, r7, #4
 8005d44:	f107 0108 	add.w	r1, r7, #8
 8005d48:	f107 030c 	add.w	r3, r7, #12
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fd fedf 	bl	8003b10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	9202      	str	r2, [sp, #8]
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2300      	movs	r3, #0
 8005d62:	460a      	mov	r2, r1
 8005d64:	4911      	ldr	r1, [pc, #68]	; (8005dac <xTimerCreateTimerTask+0x88>)
 8005d66:	4812      	ldr	r0, [pc, #72]	; (8005db0 <xTimerCreateTimerTask+0x8c>)
 8005d68:	f7fe ffd2 	bl	8004d10 <xTaskCreateStatic>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <xTimerCreateTimerTask+0x90>)
 8005d70:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d72:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <xTimerCreateTimerTask+0x90>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10b      	bne.n	8005d9c <xTimerCreateTimerTask+0x78>
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	b672      	cpsid	i
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	b662      	cpsie	i
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	e7fe      	b.n	8005d9a <xTimerCreateTimerTask+0x76>
	return xReturn;
 8005d9c:	697b      	ldr	r3, [r7, #20]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000c90 	.word	0x20000c90
 8005dac:	08007548 	.word	0x08007548
 8005db0:	08005ef1 	.word	0x08005ef1
 8005db4:	20000c94 	.word	0x20000c94

08005db8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10b      	bne.n	8005de8 <xTimerGenericCommand+0x30>
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	b672      	cpsid	i
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	b662      	cpsie	i
 8005de4:	623b      	str	r3, [r7, #32]
 8005de6:	e7fe      	b.n	8005de6 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005de8:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <xTimerGenericCommand+0x98>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02a      	beq.n	8005e46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	dc18      	bgt.n	8005e34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e02:	f7ff fdad 	bl	8005960 <xTaskGetSchedulerState>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d109      	bne.n	8005e20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e0c:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <xTimerGenericCommand+0x98>)
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	f107 0110 	add.w	r1, r7, #16
 8005e14:	2300      	movs	r3, #0
 8005e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e18:	f7fe f902 	bl	8004020 <xQueueGenericSend>
 8005e1c:	6278      	str	r0, [r7, #36]	; 0x24
 8005e1e:	e012      	b.n	8005e46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e20:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <xTimerGenericCommand+0x98>)
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	f107 0110 	add.w	r1, r7, #16
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f7fe f8f8 	bl	8004020 <xQueueGenericSend>
 8005e30:	6278      	str	r0, [r7, #36]	; 0x24
 8005e32:	e008      	b.n	8005e46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <xTimerGenericCommand+0x98>)
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	f107 0110 	add.w	r1, r7, #16
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	f7fe f9f0 	bl	8004224 <xQueueGenericSendFromISR>
 8005e44:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3728      	adds	r7, #40	; 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000c90 	.word	0x20000c90

08005e54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <prvProcessExpiredTimer+0x98>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fd fef3 	bl	8003c58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d023      	beq.n	8005ec8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	18d1      	adds	r1, r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	6978      	ldr	r0, [r7, #20]
 8005e8e:	f000 f8d3 	bl	8006038 <prvInsertTimerInActiveList>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d020      	beq.n	8005eda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	6978      	ldr	r0, [r7, #20]
 8005ea4:	f7ff ff88 	bl	8005db8 <xTimerGenericCommand>
 8005ea8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d114      	bne.n	8005eda <prvProcessExpiredTimer+0x86>
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	b672      	cpsid	i
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	b662      	cpsie	i
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	e7fe      	b.n	8005ec6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ece:	f023 0301 	bic.w	r3, r3, #1
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	6978      	ldr	r0, [r7, #20]
 8005ee0:	4798      	blx	r3
}
 8005ee2:	bf00      	nop
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000c88 	.word	0x20000c88

08005ef0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ef8:	f107 0308 	add.w	r3, r7, #8
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f857 	bl	8005fb0 <prvGetNextExpireTime>
 8005f02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4619      	mov	r1, r3
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f803 	bl	8005f14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f0e:	f000 f8d5 	bl	80060bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f12:	e7f1      	b.n	8005ef8 <prvTimerTask+0x8>

08005f14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f1e:	f7ff f93b 	bl	8005198 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f866 	bl	8005ff8 <prvSampleTimeNow>
 8005f2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d130      	bne.n	8005f96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <prvProcessTimerOrBlockTask+0x3c>
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d806      	bhi.n	8005f50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f42:	f7ff f937 	bl	80051b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ff83 	bl	8005e54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f4e:	e024      	b.n	8005f9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f56:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <prvProcessTimerOrBlockTask+0x90>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <prvProcessTimerOrBlockTask+0x50>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <prvProcessTimerOrBlockTask+0x52>
 8005f64:	2300      	movs	r3, #0
 8005f66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f68:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <prvProcessTimerOrBlockTask+0x94>)
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	4619      	mov	r1, r3
 8005f76:	f7fe fe97 	bl	8004ca8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f7a:	f7ff f91b 	bl	80051b4 <xTaskResumeAll>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f84:	4b09      	ldr	r3, [pc, #36]	; (8005fac <prvProcessTimerOrBlockTask+0x98>)
 8005f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	f3bf 8f6f 	isb	sy
}
 8005f94:	e001      	b.n	8005f9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f96:	f7ff f90d 	bl	80051b4 <xTaskResumeAll>
}
 8005f9a:	bf00      	nop
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000c8c 	.word	0x20000c8c
 8005fa8:	20000c90 	.word	0x20000c90
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <prvGetNextExpireTime+0x44>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <prvGetNextExpireTime+0x16>
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	e000      	b.n	8005fc8 <prvGetNextExpireTime+0x18>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <prvGetNextExpireTime+0x44>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e001      	b.n	8005fe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20000c88 	.word	0x20000c88

08005ff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006000:	f7ff f976 	bl	80052f0 <xTaskGetTickCount>
 8006004:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <prvSampleTimeNow+0x3c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	429a      	cmp	r2, r3
 800600e:	d205      	bcs.n	800601c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006010:	f000 f936 	bl	8006280 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e002      	b.n	8006022 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006022:	4a04      	ldr	r2, [pc, #16]	; (8006034 <prvSampleTimeNow+0x3c>)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006028:	68fb      	ldr	r3, [r7, #12]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000c98 	.word	0x20000c98

08006038 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	d812      	bhi.n	8006084 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	1ad2      	subs	r2, r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	429a      	cmp	r2, r3
 800606a:	d302      	bcc.n	8006072 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e01b      	b.n	80060aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <prvInsertTimerInActiveList+0x7c>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3304      	adds	r3, #4
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f7fd fdb2 	bl	8003be6 <vListInsert>
 8006082:	e012      	b.n	80060aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d206      	bcs.n	800609a <prvInsertTimerInActiveList+0x62>
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d302      	bcc.n	800609a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006094:	2301      	movs	r3, #1
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	e007      	b.n	80060aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800609a:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <prvInsertTimerInActiveList+0x80>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f7fd fd9e 	bl	8003be6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060aa:	697b      	ldr	r3, [r7, #20]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20000c8c 	.word	0x20000c8c
 80060b8:	20000c88 	.word	0x20000c88

080060bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08e      	sub	sp, #56	; 0x38
 80060c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060c2:	e0cc      	b.n	800625e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da19      	bge.n	80060fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060ca:	1d3b      	adds	r3, r7, #4
 80060cc:	3304      	adds	r3, #4
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10b      	bne.n	80060ee <prvProcessReceivedCommands+0x32>
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	b672      	cpsid	i
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	b662      	cpsie	i
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	e7fe      	b.n	80060ec <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f4:	6850      	ldr	r0, [r2, #4]
 80060f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f8:	6892      	ldr	r2, [r2, #8]
 80060fa:	4611      	mov	r1, r2
 80060fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f2c0 80ab 	blt.w	800625c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	3304      	adds	r3, #4
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd fd9e 	bl	8003c58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800611c:	463b      	mov	r3, r7
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ff6a 	bl	8005ff8 <prvSampleTimeNow>
 8006124:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b09      	cmp	r3, #9
 800612a:	f200 8098 	bhi.w	800625e <prvProcessReceivedCommands+0x1a2>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <prvProcessReceivedCommands+0x78>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	0800615d 	.word	0x0800615d
 8006138:	0800615d 	.word	0x0800615d
 800613c:	0800615d 	.word	0x0800615d
 8006140:	080061d3 	.word	0x080061d3
 8006144:	080061e7 	.word	0x080061e7
 8006148:	08006233 	.word	0x08006233
 800614c:	0800615d 	.word	0x0800615d
 8006150:	0800615d 	.word	0x0800615d
 8006154:	080061d3 	.word	0x080061d3
 8006158:	080061e7 	.word	0x080061e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	b2da      	uxtb	r2, r3
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	18d1      	adds	r1, r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800617c:	f7ff ff5c 	bl	8006038 <prvInsertTimerInActiveList>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d06b      	beq.n	800625e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d060      	beq.n	800625e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	441a      	add	r2, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	2300      	movs	r3, #0
 80061aa:	2100      	movs	r1, #0
 80061ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ae:	f7ff fe03 	bl	8005db8 <xTimerGenericCommand>
 80061b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d151      	bne.n	800625e <prvProcessReceivedCommands+0x1a2>
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	b672      	cpsid	i
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	b662      	cpsie	i
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e7fe      	b.n	80061d0 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061d8:	f023 0301 	bic.w	r3, r3, #1
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80061e4:	e03b      	b.n	800625e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ec:	f043 0301 	orr.w	r3, r3, #1
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <prvProcessReceivedCommands+0x162>
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	b672      	cpsid	i
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	b662      	cpsie	i
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e7fe      	b.n	800621c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	18d1      	adds	r1, r2, r3
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622c:	f7ff ff04 	bl	8006038 <prvInsertTimerInActiveList>
					break;
 8006230:	e015      	b.n	800625e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006242:	f000 fbb3 	bl	80069ac <vPortFree>
 8006246:	e00a      	b.n	800625e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800625a:	e000      	b.n	800625e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800625c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800625e:	4b07      	ldr	r3, [pc, #28]	; (800627c <prvProcessReceivedCommands+0x1c0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	1d39      	adds	r1, r7, #4
 8006264:	2200      	movs	r2, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe f90a 	bl	8004480 <xQueueReceive>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	f47f af28 	bne.w	80060c4 <prvProcessReceivedCommands+0x8>
	}
}
 8006274:	bf00      	nop
 8006276:	3730      	adds	r7, #48	; 0x30
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20000c90 	.word	0x20000c90

08006280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006286:	e049      	b.n	800631c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006288:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <prvSwitchTimerLists+0xc4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006292:	4b2c      	ldr	r3, [pc, #176]	; (8006344 <prvSwitchTimerLists+0xc4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3304      	adds	r3, #4
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fd fcd9 	bl	8003c58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d02f      	beq.n	800631c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d90e      	bls.n	80062ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062da:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <prvSwitchTimerLists+0xc4>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f7fd fc7e 	bl	8003be6 <vListInsert>
 80062ea:	e017      	b.n	800631c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	2100      	movs	r1, #0
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff fd5e 	bl	8005db8 <xTimerGenericCommand>
 80062fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10b      	bne.n	800631c <prvSwitchTimerLists+0x9c>
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	b672      	cpsid	i
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	b662      	cpsie	i
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	e7fe      	b.n	800631a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800631c:	4b09      	ldr	r3, [pc, #36]	; (8006344 <prvSwitchTimerLists+0xc4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1b0      	bne.n	8006288 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006326:	4b07      	ldr	r3, [pc, #28]	; (8006344 <prvSwitchTimerLists+0xc4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <prvSwitchTimerLists+0xc8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a04      	ldr	r2, [pc, #16]	; (8006344 <prvSwitchTimerLists+0xc4>)
 8006332:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006334:	4a04      	ldr	r2, [pc, #16]	; (8006348 <prvSwitchTimerLists+0xc8>)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	6013      	str	r3, [r2, #0]
}
 800633a:	bf00      	nop
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000c88 	.word	0x20000c88
 8006348:	20000c8c 	.word	0x20000c8c

0800634c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006352:	f000 f941 	bl	80065d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006356:	4b15      	ldr	r3, [pc, #84]	; (80063ac <prvCheckForValidListAndQueue+0x60>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d120      	bne.n	80063a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800635e:	4814      	ldr	r0, [pc, #80]	; (80063b0 <prvCheckForValidListAndQueue+0x64>)
 8006360:	f7fd fbf0 	bl	8003b44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006364:	4813      	ldr	r0, [pc, #76]	; (80063b4 <prvCheckForValidListAndQueue+0x68>)
 8006366:	f7fd fbed 	bl	8003b44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800636a:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <prvCheckForValidListAndQueue+0x6c>)
 800636c:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <prvCheckForValidListAndQueue+0x64>)
 800636e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <prvCheckForValidListAndQueue+0x70>)
 8006372:	4a10      	ldr	r2, [pc, #64]	; (80063b4 <prvCheckForValidListAndQueue+0x68>)
 8006374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006376:	2300      	movs	r3, #0
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <prvCheckForValidListAndQueue+0x74>)
 800637c:	4a11      	ldr	r2, [pc, #68]	; (80063c4 <prvCheckForValidListAndQueue+0x78>)
 800637e:	2110      	movs	r1, #16
 8006380:	200a      	movs	r0, #10
 8006382:	f7fd fcfd 	bl	8003d80 <xQueueGenericCreateStatic>
 8006386:	4602      	mov	r2, r0
 8006388:	4b08      	ldr	r3, [pc, #32]	; (80063ac <prvCheckForValidListAndQueue+0x60>)
 800638a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <prvCheckForValidListAndQueue+0x60>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <prvCheckForValidListAndQueue+0x60>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	490b      	ldr	r1, [pc, #44]	; (80063c8 <prvCheckForValidListAndQueue+0x7c>)
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fc32 	bl	8004c04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063a0:	f000 f94c 	bl	800663c <vPortExitCritical>
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000c90 	.word	0x20000c90
 80063b0:	20000c60 	.word	0x20000c60
 80063b4:	20000c74 	.word	0x20000c74
 80063b8:	20000c88 	.word	0x20000c88
 80063bc:	20000c8c 	.word	0x20000c8c
 80063c0:	20000d3c 	.word	0x20000d3c
 80063c4:	20000c9c 	.word	0x20000c9c
 80063c8:	08007550 	.word	0x08007550

080063cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3b04      	subs	r3, #4
 80063dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3b04      	subs	r3, #4
 80063ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f023 0201 	bic.w	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3b04      	subs	r3, #4
 80063fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063fc:	4a0c      	ldr	r2, [pc, #48]	; (8006430 <pxPortInitialiseStack+0x64>)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3b14      	subs	r3, #20
 8006406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3b04      	subs	r3, #4
 8006412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f06f 0202 	mvn.w	r2, #2
 800641a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3b20      	subs	r3, #32
 8006420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006422:	68fb      	ldr	r3, [r7, #12]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	08006435 	.word	0x08006435

08006434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <prvTaskExitError+0x58>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006446:	d00b      	beq.n	8006460 <prvTaskExitError+0x2c>
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	b672      	cpsid	i
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	b662      	cpsie	i
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e7fe      	b.n	800645e <prvTaskExitError+0x2a>
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	b672      	cpsid	i
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	b662      	cpsie	i
 8006474:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006476:	bf00      	nop
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0fc      	beq.n	8006478 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	2000001c 	.word	0x2000001c

08006490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <pxCurrentTCBConst2>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649a:	f380 8809 	msr	PSP, r0
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8811 	msr	BASEPRI, r0
 80064aa:	4770      	bx	lr
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst2>:
 80064b0:	20000760 	.word	0x20000760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064b8:	4808      	ldr	r0, [pc, #32]	; (80064dc <prvPortStartFirstTask+0x24>)
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f380 8808 	msr	MSP, r0
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8814 	msr	CONTROL, r0
 80064ca:	b662      	cpsie	i
 80064cc:	b661      	cpsie	f
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	df00      	svc	0
 80064d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064da:	bf00      	nop
 80064dc:	e000ed08 	.word	0xe000ed08

080064e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064e6:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <xPortStartScheduler+0xe0>)
 80064e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006508:	b2da      	uxtb	r2, r3
 800650a:	4b2e      	ldr	r3, [pc, #184]	; (80065c4 <xPortStartScheduler+0xe4>)
 800650c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800650e:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <xPortStartScheduler+0xe8>)
 8006510:	2207      	movs	r2, #7
 8006512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006514:	e009      	b.n	800652a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006516:	4b2c      	ldr	r3, [pc, #176]	; (80065c8 <xPortStartScheduler+0xe8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3b01      	subs	r3, #1
 800651c:	4a2a      	ldr	r2, [pc, #168]	; (80065c8 <xPortStartScheduler+0xe8>)
 800651e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b80      	cmp	r3, #128	; 0x80
 8006534:	d0ef      	beq.n	8006516 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006536:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <xPortStartScheduler+0xe8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f1c3 0307 	rsb	r3, r3, #7
 800653e:	2b04      	cmp	r3, #4
 8006540:	d00b      	beq.n	800655a <xPortStartScheduler+0x7a>
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	b672      	cpsid	i
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	b662      	cpsie	i
 8006556:	60bb      	str	r3, [r7, #8]
 8006558:	e7fe      	b.n	8006558 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <xPortStartScheduler+0xe8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	4a19      	ldr	r2, [pc, #100]	; (80065c8 <xPortStartScheduler+0xe8>)
 8006562:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006564:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <xPortStartScheduler+0xe8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800656c:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <xPortStartScheduler+0xe8>)
 800656e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	b2da      	uxtb	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006578:	4b14      	ldr	r3, [pc, #80]	; (80065cc <xPortStartScheduler+0xec>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a13      	ldr	r2, [pc, #76]	; (80065cc <xPortStartScheduler+0xec>)
 800657e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006582:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006584:	4b11      	ldr	r3, [pc, #68]	; (80065cc <xPortStartScheduler+0xec>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a10      	ldr	r2, [pc, #64]	; (80065cc <xPortStartScheduler+0xec>)
 800658a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800658e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006590:	f000 f8d4 	bl	800673c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <xPortStartScheduler+0xf0>)
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800659a:	f000 f8f3 	bl	8006784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <xPortStartScheduler+0xf4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a0c      	ldr	r2, [pc, #48]	; (80065d4 <xPortStartScheduler+0xf4>)
 80065a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065a8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065aa:	f7ff ff85 	bl	80064b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065ae:	f7fe ff69 	bl	8005484 <vTaskSwitchContext>
	prvTaskExitError();
 80065b2:	f7ff ff3f 	bl	8006434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	e000e400 	.word	0xe000e400
 80065c4:	20000d8c 	.word	0x20000d8c
 80065c8:	20000d90 	.word	0x20000d90
 80065cc:	e000ed20 	.word	0xe000ed20
 80065d0:	2000001c 	.word	0x2000001c
 80065d4:	e000ef34 	.word	0xe000ef34

080065d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	b672      	cpsid	i
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	b662      	cpsie	i
 80065f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065f4:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <vPortEnterCritical+0x5c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	4a0e      	ldr	r2, [pc, #56]	; (8006634 <vPortEnterCritical+0x5c>)
 80065fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065fe:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <vPortEnterCritical+0x5c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d110      	bne.n	8006628 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006606:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <vPortEnterCritical+0x60>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <vPortEnterCritical+0x50>
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	b672      	cpsid	i
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	b662      	cpsie	i
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	e7fe      	b.n	8006626 <vPortEnterCritical+0x4e>
	}
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	2000001c 	.word	0x2000001c
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <vPortExitCritical+0x26>
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	b672      	cpsid	i
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	b662      	cpsie	i
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	e7fe      	b.n	8006660 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006662:	4b0a      	ldr	r3, [pc, #40]	; (800668c <vPortExitCritical+0x50>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3b01      	subs	r3, #1
 8006668:	4a08      	ldr	r2, [pc, #32]	; (800668c <vPortExitCritical+0x50>)
 800666a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800666c:	4b07      	ldr	r3, [pc, #28]	; (800668c <vPortExitCritical+0x50>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <vPortExitCritical+0x42>
 8006674:	2300      	movs	r3, #0
 8006676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	2000001c 	.word	0x2000001c

08006690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006690:	f3ef 8009 	mrs	r0, PSP
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <pxCurrentTCBConst>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	f01e 0f10 	tst.w	lr, #16
 80066a0:	bf08      	it	eq
 80066a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066aa:	6010      	str	r0, [r2, #0]
 80066ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066b4:	b672      	cpsid	i
 80066b6:	f380 8811 	msr	BASEPRI, r0
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	b662      	cpsie	i
 80066c4:	f7fe fede 	bl	8005484 <vTaskSwitchContext>
 80066c8:	f04f 0000 	mov.w	r0, #0
 80066cc:	f380 8811 	msr	BASEPRI, r0
 80066d0:	bc09      	pop	{r0, r3}
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	6808      	ldr	r0, [r1, #0]
 80066d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	f01e 0f10 	tst.w	lr, #16
 80066de:	bf08      	it	eq
 80066e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066e4:	f380 8809 	msr	PSP, r0
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop

080066f0 <pxCurrentTCBConst>:
 80066f0:	20000760 	.word	0x20000760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	b672      	cpsid	i
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	b662      	cpsie	i
 8006712:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006714:	f7fe fdfc 	bl	8005310 <xTaskIncrementTick>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800671e:	4b06      	ldr	r3, [pc, #24]	; (8006738 <SysTick_Handler+0x40>)
 8006720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	2300      	movs	r3, #0
 8006728:	603b      	str	r3, [r7, #0]
	__asm volatile
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <vPortSetupTimerInterrupt+0x34>)
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <vPortSetupTimerInterrupt+0x38>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <vPortSetupTimerInterrupt+0x3c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a0a      	ldr	r2, [pc, #40]	; (800677c <vPortSetupTimerInterrupt+0x40>)
 8006752:	fba2 2303 	umull	r2, r3, r2, r3
 8006756:	099b      	lsrs	r3, r3, #6
 8006758:	4a09      	ldr	r2, [pc, #36]	; (8006780 <vPortSetupTimerInterrupt+0x44>)
 800675a:	3b01      	subs	r3, #1
 800675c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800675e:	4b04      	ldr	r3, [pc, #16]	; (8006770 <vPortSetupTimerInterrupt+0x34>)
 8006760:	2207      	movs	r2, #7
 8006762:	601a      	str	r2, [r3, #0]
}
 8006764:	bf00      	nop
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	e000e010 	.word	0xe000e010
 8006774:	e000e018 	.word	0xe000e018
 8006778:	20000010 	.word	0x20000010
 800677c:	10624dd3 	.word	0x10624dd3
 8006780:	e000e014 	.word	0xe000e014

08006784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006794 <vPortEnableVFP+0x10>
 8006788:	6801      	ldr	r1, [r0, #0]
 800678a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800678e:	6001      	str	r1, [r0, #0]
 8006790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006792:	bf00      	nop
 8006794:	e000ed88 	.word	0xe000ed88

08006798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800679e:	f3ef 8305 	mrs	r3, IPSR
 80067a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b0f      	cmp	r3, #15
 80067a8:	d915      	bls.n	80067d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067aa:	4a18      	ldr	r2, [pc, #96]	; (800680c <vPortValidateInterruptPriority+0x74>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067b4:	4b16      	ldr	r3, [pc, #88]	; (8006810 <vPortValidateInterruptPriority+0x78>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	7afa      	ldrb	r2, [r7, #11]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d20b      	bcs.n	80067d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	b672      	cpsid	i
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	b662      	cpsie	i
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e7fe      	b.n	80067d4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067d6:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <vPortValidateInterruptPriority+0x7c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067de:	4b0e      	ldr	r3, [pc, #56]	; (8006818 <vPortValidateInterruptPriority+0x80>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d90b      	bls.n	80067fe <vPortValidateInterruptPriority+0x66>
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	b672      	cpsid	i
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	b662      	cpsie	i
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	e7fe      	b.n	80067fc <vPortValidateInterruptPriority+0x64>
	}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	e000e3f0 	.word	0xe000e3f0
 8006810:	20000d8c 	.word	0x20000d8c
 8006814:	e000ed0c 	.word	0xe000ed0c
 8006818:	20000d90 	.word	0x20000d90

0800681c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006824:	2300      	movs	r3, #0
 8006826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006828:	f7fe fcb6 	bl	8005198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800682c:	4b5a      	ldr	r3, [pc, #360]	; (8006998 <pvPortMalloc+0x17c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006834:	f000 f916 	bl	8006a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006838:	4b58      	ldr	r3, [pc, #352]	; (800699c <pvPortMalloc+0x180>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4013      	ands	r3, r2
 8006840:	2b00      	cmp	r3, #0
 8006842:	f040 8090 	bne.w	8006966 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01e      	beq.n	800688a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800684c:	2208      	movs	r2, #8
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	2b00      	cmp	r3, #0
 800685c:	d015      	beq.n	800688a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f023 0307 	bic.w	r3, r3, #7
 8006864:	3308      	adds	r3, #8
 8006866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00b      	beq.n	800688a <pvPortMalloc+0x6e>
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	b672      	cpsid	i
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	b662      	cpsie	i
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e7fe      	b.n	8006888 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d06a      	beq.n	8006966 <pvPortMalloc+0x14a>
 8006890:	4b43      	ldr	r3, [pc, #268]	; (80069a0 <pvPortMalloc+0x184>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d865      	bhi.n	8006966 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800689a:	4b42      	ldr	r3, [pc, #264]	; (80069a4 <pvPortMalloc+0x188>)
 800689c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800689e:	4b41      	ldr	r3, [pc, #260]	; (80069a4 <pvPortMalloc+0x188>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068a4:	e004      	b.n	80068b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d903      	bls.n	80068c2 <pvPortMalloc+0xa6>
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1f1      	bne.n	80068a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068c2:	4b35      	ldr	r3, [pc, #212]	; (8006998 <pvPortMalloc+0x17c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d04c      	beq.n	8006966 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2208      	movs	r2, #8
 80068d2:	4413      	add	r3, r2
 80068d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	1ad2      	subs	r2, r2, r3
 80068e6:	2308      	movs	r3, #8
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d920      	bls.n	8006930 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4413      	add	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00b      	beq.n	8006918 <pvPortMalloc+0xfc>
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	b672      	cpsid	i
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	b662      	cpsie	i
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	e7fe      	b.n	8006916 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800692a:	69b8      	ldr	r0, [r7, #24]
 800692c:	f000 f8fc 	bl	8006b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006930:	4b1b      	ldr	r3, [pc, #108]	; (80069a0 <pvPortMalloc+0x184>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <pvPortMalloc+0x184>)
 800693c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800693e:	4b18      	ldr	r3, [pc, #96]	; (80069a0 <pvPortMalloc+0x184>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <pvPortMalloc+0x18c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d203      	bcs.n	8006952 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800694a:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <pvPortMalloc+0x184>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a16      	ldr	r2, [pc, #88]	; (80069a8 <pvPortMalloc+0x18c>)
 8006950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <pvPortMalloc+0x180>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	431a      	orrs	r2, r3
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006966:	f7fe fc25 	bl	80051b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <pvPortMalloc+0x170>
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	b672      	cpsid	i
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	b662      	cpsie	i
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e7fe      	b.n	800698a <pvPortMalloc+0x16e>
	return pvReturn;
 800698c:	69fb      	ldr	r3, [r7, #28]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3728      	adds	r7, #40	; 0x28
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	2000499c 	.word	0x2000499c
 800699c:	200049a8 	.word	0x200049a8
 80069a0:	200049a0 	.word	0x200049a0
 80069a4:	20004994 	.word	0x20004994
 80069a8:	200049a4 	.word	0x200049a4

080069ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d04a      	beq.n	8006a54 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069be:	2308      	movs	r3, #8
 80069c0:	425b      	negs	r3, r3
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4413      	add	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4b22      	ldr	r3, [pc, #136]	; (8006a5c <vPortFree+0xb0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <vPortFree+0x46>
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	b672      	cpsid	i
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	b662      	cpsie	i
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e7fe      	b.n	80069f0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <vPortFree+0x66>
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	b672      	cpsid	i
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	b662      	cpsie	i
 8006a0e:	60bb      	str	r3, [r7, #8]
 8006a10:	e7fe      	b.n	8006a10 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <vPortFree+0xb0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d019      	beq.n	8006a54 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d115      	bne.n	8006a54 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <vPortFree+0xb0>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	43db      	mvns	r3, r3
 8006a32:	401a      	ands	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a38:	f7fe fbae 	bl	8005198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <vPortFree+0xb4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4413      	add	r3, r2
 8006a46:	4a06      	ldr	r2, [pc, #24]	; (8006a60 <vPortFree+0xb4>)
 8006a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f000 f86c 	bl	8006b28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a50:	f7fe fbb0 	bl	80051b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a54:	bf00      	nop
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	200049a8 	.word	0x200049a8
 8006a60:	200049a0 	.word	0x200049a0

08006a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a70:	4b27      	ldr	r3, [pc, #156]	; (8006b10 <prvHeapInit+0xac>)
 8006a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00c      	beq.n	8006a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3307      	adds	r3, #7
 8006a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 0307 	bic.w	r3, r3, #7
 8006a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	4a1f      	ldr	r2, [pc, #124]	; (8006b10 <prvHeapInit+0xac>)
 8006a94:	4413      	add	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <prvHeapInit+0xb0>)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aa2:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <prvHeapInit+0xb0>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4413      	add	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0307 	bic.w	r3, r3, #7
 8006abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <prvHeapInit+0xb4>)
 8006ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <prvHeapInit+0xb4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ace:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <prvHeapInit+0xb4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <prvHeapInit+0xb4>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <prvHeapInit+0xb8>)
 8006af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <prvHeapInit+0xbc>)
 8006afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006afc:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <prvHeapInit+0xc0>)
 8006afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b02:	601a      	str	r2, [r3, #0]
}
 8006b04:	bf00      	nop
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	20000d94 	.word	0x20000d94
 8006b14:	20004994 	.word	0x20004994
 8006b18:	2000499c 	.word	0x2000499c
 8006b1c:	200049a4 	.word	0x200049a4
 8006b20:	200049a0 	.word	0x200049a0
 8006b24:	200049a8 	.word	0x200049a8

08006b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b30:	4b28      	ldr	r3, [pc, #160]	; (8006bd4 <prvInsertBlockIntoFreeList+0xac>)
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	e002      	b.n	8006b3c <prvInsertBlockIntoFreeList+0x14>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d8f7      	bhi.n	8006b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	4413      	add	r3, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d108      	bne.n	8006b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	441a      	add	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	441a      	add	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d118      	bne.n	8006bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d00d      	beq.n	8006ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	441a      	add	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e008      	b.n	8006bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e003      	b.n	8006bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d002      	beq.n	8006bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bc6:	bf00      	nop
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20004994 	.word	0x20004994
 8006bd8:	2000499c 	.word	0x2000499c

08006bdc <__errno>:
 8006bdc:	4b01      	ldr	r3, [pc, #4]	; (8006be4 <__errno+0x8>)
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000020 	.word	0x20000020

08006be8 <__libc_init_array>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	4e0d      	ldr	r6, [pc, #52]	; (8006c20 <__libc_init_array+0x38>)
 8006bec:	4c0d      	ldr	r4, [pc, #52]	; (8006c24 <__libc_init_array+0x3c>)
 8006bee:	1ba4      	subs	r4, r4, r6
 8006bf0:	10a4      	asrs	r4, r4, #2
 8006bf2:	2500      	movs	r5, #0
 8006bf4:	42a5      	cmp	r5, r4
 8006bf6:	d109      	bne.n	8006c0c <__libc_init_array+0x24>
 8006bf8:	4e0b      	ldr	r6, [pc, #44]	; (8006c28 <__libc_init_array+0x40>)
 8006bfa:	4c0c      	ldr	r4, [pc, #48]	; (8006c2c <__libc_init_array+0x44>)
 8006bfc:	f000 fc30 	bl	8007460 <_init>
 8006c00:	1ba4      	subs	r4, r4, r6
 8006c02:	10a4      	asrs	r4, r4, #2
 8006c04:	2500      	movs	r5, #0
 8006c06:	42a5      	cmp	r5, r4
 8006c08:	d105      	bne.n	8006c16 <__libc_init_array+0x2e>
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c10:	4798      	blx	r3
 8006c12:	3501      	adds	r5, #1
 8006c14:	e7ee      	b.n	8006bf4 <__libc_init_array+0xc>
 8006c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c1a:	4798      	blx	r3
 8006c1c:	3501      	adds	r5, #1
 8006c1e:	e7f2      	b.n	8006c06 <__libc_init_array+0x1e>
 8006c20:	080075f4 	.word	0x080075f4
 8006c24:	080075f4 	.word	0x080075f4
 8006c28:	080075f4 	.word	0x080075f4
 8006c2c:	080075f8 	.word	0x080075f8

08006c30 <malloc>:
 8006c30:	4b02      	ldr	r3, [pc, #8]	; (8006c3c <malloc+0xc>)
 8006c32:	4601      	mov	r1, r0
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	f000 b865 	b.w	8006d04 <_malloc_r>
 8006c3a:	bf00      	nop
 8006c3c:	20000020 	.word	0x20000020

08006c40 <memcpy>:
 8006c40:	b510      	push	{r4, lr}
 8006c42:	1e43      	subs	r3, r0, #1
 8006c44:	440a      	add	r2, r1
 8006c46:	4291      	cmp	r1, r2
 8006c48:	d100      	bne.n	8006c4c <memcpy+0xc>
 8006c4a:	bd10      	pop	{r4, pc}
 8006c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c54:	e7f7      	b.n	8006c46 <memcpy+0x6>

08006c56 <memset>:
 8006c56:	4402      	add	r2, r0
 8006c58:	4603      	mov	r3, r0
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d100      	bne.n	8006c60 <memset+0xa>
 8006c5e:	4770      	bx	lr
 8006c60:	f803 1b01 	strb.w	r1, [r3], #1
 8006c64:	e7f9      	b.n	8006c5a <memset+0x4>
	...

08006c68 <_free_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	d045      	beq.n	8006cfc <_free_r+0x94>
 8006c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c74:	1f0c      	subs	r4, r1, #4
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	bfb8      	it	lt
 8006c7a:	18e4      	addlt	r4, r4, r3
 8006c7c:	f000 f8cc 	bl	8006e18 <__malloc_lock>
 8006c80:	4a1f      	ldr	r2, [pc, #124]	; (8006d00 <_free_r+0x98>)
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	4610      	mov	r0, r2
 8006c86:	b933      	cbnz	r3, 8006c96 <_free_r+0x2e>
 8006c88:	6063      	str	r3, [r4, #4]
 8006c8a:	6014      	str	r4, [r2, #0]
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c92:	f000 b8c2 	b.w	8006e1a <__malloc_unlock>
 8006c96:	42a3      	cmp	r3, r4
 8006c98:	d90c      	bls.n	8006cb4 <_free_r+0x4c>
 8006c9a:	6821      	ldr	r1, [r4, #0]
 8006c9c:	1862      	adds	r2, r4, r1
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	bf04      	itt	eq
 8006ca2:	681a      	ldreq	r2, [r3, #0]
 8006ca4:	685b      	ldreq	r3, [r3, #4]
 8006ca6:	6063      	str	r3, [r4, #4]
 8006ca8:	bf04      	itt	eq
 8006caa:	1852      	addeq	r2, r2, r1
 8006cac:	6022      	streq	r2, [r4, #0]
 8006cae:	6004      	str	r4, [r0, #0]
 8006cb0:	e7ec      	b.n	8006c8c <_free_r+0x24>
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	b10a      	cbz	r2, 8006cbc <_free_r+0x54>
 8006cb8:	42a2      	cmp	r2, r4
 8006cba:	d9fa      	bls.n	8006cb2 <_free_r+0x4a>
 8006cbc:	6819      	ldr	r1, [r3, #0]
 8006cbe:	1858      	adds	r0, r3, r1
 8006cc0:	42a0      	cmp	r0, r4
 8006cc2:	d10b      	bne.n	8006cdc <_free_r+0x74>
 8006cc4:	6820      	ldr	r0, [r4, #0]
 8006cc6:	4401      	add	r1, r0
 8006cc8:	1858      	adds	r0, r3, r1
 8006cca:	4282      	cmp	r2, r0
 8006ccc:	6019      	str	r1, [r3, #0]
 8006cce:	d1dd      	bne.n	8006c8c <_free_r+0x24>
 8006cd0:	6810      	ldr	r0, [r2, #0]
 8006cd2:	6852      	ldr	r2, [r2, #4]
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	6019      	str	r1, [r3, #0]
 8006cda:	e7d7      	b.n	8006c8c <_free_r+0x24>
 8006cdc:	d902      	bls.n	8006ce4 <_free_r+0x7c>
 8006cde:	230c      	movs	r3, #12
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	e7d3      	b.n	8006c8c <_free_r+0x24>
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	1821      	adds	r1, r4, r0
 8006ce8:	428a      	cmp	r2, r1
 8006cea:	bf04      	itt	eq
 8006cec:	6811      	ldreq	r1, [r2, #0]
 8006cee:	6852      	ldreq	r2, [r2, #4]
 8006cf0:	6062      	str	r2, [r4, #4]
 8006cf2:	bf04      	itt	eq
 8006cf4:	1809      	addeq	r1, r1, r0
 8006cf6:	6021      	streq	r1, [r4, #0]
 8006cf8:	605c      	str	r4, [r3, #4]
 8006cfa:	e7c7      	b.n	8006c8c <_free_r+0x24>
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
 8006cfe:	bf00      	nop
 8006d00:	200049ac 	.word	0x200049ac

08006d04 <_malloc_r>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	1ccd      	adds	r5, r1, #3
 8006d08:	f025 0503 	bic.w	r5, r5, #3
 8006d0c:	3508      	adds	r5, #8
 8006d0e:	2d0c      	cmp	r5, #12
 8006d10:	bf38      	it	cc
 8006d12:	250c      	movcc	r5, #12
 8006d14:	2d00      	cmp	r5, #0
 8006d16:	4606      	mov	r6, r0
 8006d18:	db01      	blt.n	8006d1e <_malloc_r+0x1a>
 8006d1a:	42a9      	cmp	r1, r5
 8006d1c:	d903      	bls.n	8006d26 <_malloc_r+0x22>
 8006d1e:	230c      	movs	r3, #12
 8006d20:	6033      	str	r3, [r6, #0]
 8006d22:	2000      	movs	r0, #0
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	f000 f877 	bl	8006e18 <__malloc_lock>
 8006d2a:	4a21      	ldr	r2, [pc, #132]	; (8006db0 <_malloc_r+0xac>)
 8006d2c:	6814      	ldr	r4, [r2, #0]
 8006d2e:	4621      	mov	r1, r4
 8006d30:	b991      	cbnz	r1, 8006d58 <_malloc_r+0x54>
 8006d32:	4c20      	ldr	r4, [pc, #128]	; (8006db4 <_malloc_r+0xb0>)
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	b91b      	cbnz	r3, 8006d40 <_malloc_r+0x3c>
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f000 f83d 	bl	8006db8 <_sbrk_r>
 8006d3e:	6020      	str	r0, [r4, #0]
 8006d40:	4629      	mov	r1, r5
 8006d42:	4630      	mov	r0, r6
 8006d44:	f000 f838 	bl	8006db8 <_sbrk_r>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d124      	bne.n	8006d96 <_malloc_r+0x92>
 8006d4c:	230c      	movs	r3, #12
 8006d4e:	6033      	str	r3, [r6, #0]
 8006d50:	4630      	mov	r0, r6
 8006d52:	f000 f862 	bl	8006e1a <__malloc_unlock>
 8006d56:	e7e4      	b.n	8006d22 <_malloc_r+0x1e>
 8006d58:	680b      	ldr	r3, [r1, #0]
 8006d5a:	1b5b      	subs	r3, r3, r5
 8006d5c:	d418      	bmi.n	8006d90 <_malloc_r+0x8c>
 8006d5e:	2b0b      	cmp	r3, #11
 8006d60:	d90f      	bls.n	8006d82 <_malloc_r+0x7e>
 8006d62:	600b      	str	r3, [r1, #0]
 8006d64:	50cd      	str	r5, [r1, r3]
 8006d66:	18cc      	adds	r4, r1, r3
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 f856 	bl	8006e1a <__malloc_unlock>
 8006d6e:	f104 000b 	add.w	r0, r4, #11
 8006d72:	1d23      	adds	r3, r4, #4
 8006d74:	f020 0007 	bic.w	r0, r0, #7
 8006d78:	1ac3      	subs	r3, r0, r3
 8006d7a:	d0d3      	beq.n	8006d24 <_malloc_r+0x20>
 8006d7c:	425a      	negs	r2, r3
 8006d7e:	50e2      	str	r2, [r4, r3]
 8006d80:	e7d0      	b.n	8006d24 <_malloc_r+0x20>
 8006d82:	428c      	cmp	r4, r1
 8006d84:	684b      	ldr	r3, [r1, #4]
 8006d86:	bf16      	itet	ne
 8006d88:	6063      	strne	r3, [r4, #4]
 8006d8a:	6013      	streq	r3, [r2, #0]
 8006d8c:	460c      	movne	r4, r1
 8006d8e:	e7eb      	b.n	8006d68 <_malloc_r+0x64>
 8006d90:	460c      	mov	r4, r1
 8006d92:	6849      	ldr	r1, [r1, #4]
 8006d94:	e7cc      	b.n	8006d30 <_malloc_r+0x2c>
 8006d96:	1cc4      	adds	r4, r0, #3
 8006d98:	f024 0403 	bic.w	r4, r4, #3
 8006d9c:	42a0      	cmp	r0, r4
 8006d9e:	d005      	beq.n	8006dac <_malloc_r+0xa8>
 8006da0:	1a21      	subs	r1, r4, r0
 8006da2:	4630      	mov	r0, r6
 8006da4:	f000 f808 	bl	8006db8 <_sbrk_r>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d0cf      	beq.n	8006d4c <_malloc_r+0x48>
 8006dac:	6025      	str	r5, [r4, #0]
 8006dae:	e7db      	b.n	8006d68 <_malloc_r+0x64>
 8006db0:	200049ac 	.word	0x200049ac
 8006db4:	200049b0 	.word	0x200049b0

08006db8 <_sbrk_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4c06      	ldr	r4, [pc, #24]	; (8006dd4 <_sbrk_r+0x1c>)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	6023      	str	r3, [r4, #0]
 8006dc4:	f7f9 ff58 	bl	8000c78 <_sbrk>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_sbrk_r+0x1a>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_sbrk_r+0x1a>
 8006dd0:	602b      	str	r3, [r5, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	20004ae8 	.word	0x20004ae8

08006dd8 <siprintf>:
 8006dd8:	b40e      	push	{r1, r2, r3}
 8006dda:	b500      	push	{lr}
 8006ddc:	b09c      	sub	sp, #112	; 0x70
 8006dde:	ab1d      	add	r3, sp, #116	; 0x74
 8006de0:	9002      	str	r0, [sp, #8]
 8006de2:	9006      	str	r0, [sp, #24]
 8006de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006de8:	4809      	ldr	r0, [pc, #36]	; (8006e10 <siprintf+0x38>)
 8006dea:	9107      	str	r1, [sp, #28]
 8006dec:	9104      	str	r1, [sp, #16]
 8006dee:	4909      	ldr	r1, [pc, #36]	; (8006e14 <siprintf+0x3c>)
 8006df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006df4:	9105      	str	r1, [sp, #20]
 8006df6:	6800      	ldr	r0, [r0, #0]
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	a902      	add	r1, sp, #8
 8006dfc:	f000 f868 	bl	8006ed0 <_svfiprintf_r>
 8006e00:	9b02      	ldr	r3, [sp, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	b01c      	add	sp, #112	; 0x70
 8006e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e0c:	b003      	add	sp, #12
 8006e0e:	4770      	bx	lr
 8006e10:	20000020 	.word	0x20000020
 8006e14:	ffff0208 	.word	0xffff0208

08006e18 <__malloc_lock>:
 8006e18:	4770      	bx	lr

08006e1a <__malloc_unlock>:
 8006e1a:	4770      	bx	lr

08006e1c <__ssputs_r>:
 8006e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e20:	688e      	ldr	r6, [r1, #8]
 8006e22:	429e      	cmp	r6, r3
 8006e24:	4682      	mov	sl, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	4690      	mov	r8, r2
 8006e2a:	4699      	mov	r9, r3
 8006e2c:	d837      	bhi.n	8006e9e <__ssputs_r+0x82>
 8006e2e:	898a      	ldrh	r2, [r1, #12]
 8006e30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e34:	d031      	beq.n	8006e9a <__ssputs_r+0x7e>
 8006e36:	6825      	ldr	r5, [r4, #0]
 8006e38:	6909      	ldr	r1, [r1, #16]
 8006e3a:	1a6f      	subs	r7, r5, r1
 8006e3c:	6965      	ldr	r5, [r4, #20]
 8006e3e:	2302      	movs	r3, #2
 8006e40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e44:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e48:	f109 0301 	add.w	r3, r9, #1
 8006e4c:	443b      	add	r3, r7
 8006e4e:	429d      	cmp	r5, r3
 8006e50:	bf38      	it	cc
 8006e52:	461d      	movcc	r5, r3
 8006e54:	0553      	lsls	r3, r2, #21
 8006e56:	d530      	bpl.n	8006eba <__ssputs_r+0x9e>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7ff ff53 	bl	8006d04 <_malloc_r>
 8006e5e:	4606      	mov	r6, r0
 8006e60:	b950      	cbnz	r0, 8006e78 <__ssputs_r+0x5c>
 8006e62:	230c      	movs	r3, #12
 8006e64:	f8ca 3000 	str.w	r3, [sl]
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e78:	463a      	mov	r2, r7
 8006e7a:	6921      	ldr	r1, [r4, #16]
 8006e7c:	f7ff fee0 	bl	8006c40 <memcpy>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	6126      	str	r6, [r4, #16]
 8006e8e:	6165      	str	r5, [r4, #20]
 8006e90:	443e      	add	r6, r7
 8006e92:	1bed      	subs	r5, r5, r7
 8006e94:	6026      	str	r6, [r4, #0]
 8006e96:	60a5      	str	r5, [r4, #8]
 8006e98:	464e      	mov	r6, r9
 8006e9a:	454e      	cmp	r6, r9
 8006e9c:	d900      	bls.n	8006ea0 <__ssputs_r+0x84>
 8006e9e:	464e      	mov	r6, r9
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	4641      	mov	r1, r8
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	f000 fa93 	bl	80073d0 <memmove>
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	1b9b      	subs	r3, r3, r6
 8006eae:	60a3      	str	r3, [r4, #8]
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	441e      	add	r6, r3
 8006eb4:	6026      	str	r6, [r4, #0]
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	e7dc      	b.n	8006e74 <__ssputs_r+0x58>
 8006eba:	462a      	mov	r2, r5
 8006ebc:	f000 faa1 	bl	8007402 <_realloc_r>
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d1e2      	bne.n	8006e8c <__ssputs_r+0x70>
 8006ec6:	6921      	ldr	r1, [r4, #16]
 8006ec8:	4650      	mov	r0, sl
 8006eca:	f7ff fecd 	bl	8006c68 <_free_r>
 8006ece:	e7c8      	b.n	8006e62 <__ssputs_r+0x46>

08006ed0 <_svfiprintf_r>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	461d      	mov	r5, r3
 8006ed6:	898b      	ldrh	r3, [r1, #12]
 8006ed8:	061f      	lsls	r7, r3, #24
 8006eda:	b09d      	sub	sp, #116	; 0x74
 8006edc:	4680      	mov	r8, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	4616      	mov	r6, r2
 8006ee2:	d50f      	bpl.n	8006f04 <_svfiprintf_r+0x34>
 8006ee4:	690b      	ldr	r3, [r1, #16]
 8006ee6:	b96b      	cbnz	r3, 8006f04 <_svfiprintf_r+0x34>
 8006ee8:	2140      	movs	r1, #64	; 0x40
 8006eea:	f7ff ff0b 	bl	8006d04 <_malloc_r>
 8006eee:	6020      	str	r0, [r4, #0]
 8006ef0:	6120      	str	r0, [r4, #16]
 8006ef2:	b928      	cbnz	r0, 8006f00 <_svfiprintf_r+0x30>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	f8c8 3000 	str.w	r3, [r8]
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006efe:	e0c8      	b.n	8007092 <_svfiprintf_r+0x1c2>
 8006f00:	2340      	movs	r3, #64	; 0x40
 8006f02:	6163      	str	r3, [r4, #20]
 8006f04:	2300      	movs	r3, #0
 8006f06:	9309      	str	r3, [sp, #36]	; 0x24
 8006f08:	2320      	movs	r3, #32
 8006f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f0e:	2330      	movs	r3, #48	; 0x30
 8006f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f14:	9503      	str	r5, [sp, #12]
 8006f16:	f04f 0b01 	mov.w	fp, #1
 8006f1a:	4637      	mov	r7, r6
 8006f1c:	463d      	mov	r5, r7
 8006f1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f22:	b10b      	cbz	r3, 8006f28 <_svfiprintf_r+0x58>
 8006f24:	2b25      	cmp	r3, #37	; 0x25
 8006f26:	d13e      	bne.n	8006fa6 <_svfiprintf_r+0xd6>
 8006f28:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f2c:	d00b      	beq.n	8006f46 <_svfiprintf_r+0x76>
 8006f2e:	4653      	mov	r3, sl
 8006f30:	4632      	mov	r2, r6
 8006f32:	4621      	mov	r1, r4
 8006f34:	4640      	mov	r0, r8
 8006f36:	f7ff ff71 	bl	8006e1c <__ssputs_r>
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f000 80a4 	beq.w	8007088 <_svfiprintf_r+0x1b8>
 8006f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f42:	4453      	add	r3, sl
 8006f44:	9309      	str	r3, [sp, #36]	; 0x24
 8006f46:	783b      	ldrb	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 809d 	beq.w	8007088 <_svfiprintf_r+0x1b8>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	9307      	str	r3, [sp, #28]
 8006f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f60:	931a      	str	r3, [sp, #104]	; 0x68
 8006f62:	462f      	mov	r7, r5
 8006f64:	2205      	movs	r2, #5
 8006f66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f6a:	4850      	ldr	r0, [pc, #320]	; (80070ac <_svfiprintf_r+0x1dc>)
 8006f6c:	f7f9 f968 	bl	8000240 <memchr>
 8006f70:	9b04      	ldr	r3, [sp, #16]
 8006f72:	b9d0      	cbnz	r0, 8006faa <_svfiprintf_r+0xda>
 8006f74:	06d9      	lsls	r1, r3, #27
 8006f76:	bf44      	itt	mi
 8006f78:	2220      	movmi	r2, #32
 8006f7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f7e:	071a      	lsls	r2, r3, #28
 8006f80:	bf44      	itt	mi
 8006f82:	222b      	movmi	r2, #43	; 0x2b
 8006f84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f88:	782a      	ldrb	r2, [r5, #0]
 8006f8a:	2a2a      	cmp	r2, #42	; 0x2a
 8006f8c:	d015      	beq.n	8006fba <_svfiprintf_r+0xea>
 8006f8e:	9a07      	ldr	r2, [sp, #28]
 8006f90:	462f      	mov	r7, r5
 8006f92:	2000      	movs	r0, #0
 8006f94:	250a      	movs	r5, #10
 8006f96:	4639      	mov	r1, r7
 8006f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f9c:	3b30      	subs	r3, #48	; 0x30
 8006f9e:	2b09      	cmp	r3, #9
 8006fa0:	d94d      	bls.n	800703e <_svfiprintf_r+0x16e>
 8006fa2:	b1b8      	cbz	r0, 8006fd4 <_svfiprintf_r+0x104>
 8006fa4:	e00f      	b.n	8006fc6 <_svfiprintf_r+0xf6>
 8006fa6:	462f      	mov	r7, r5
 8006fa8:	e7b8      	b.n	8006f1c <_svfiprintf_r+0x4c>
 8006faa:	4a40      	ldr	r2, [pc, #256]	; (80070ac <_svfiprintf_r+0x1dc>)
 8006fac:	1a80      	subs	r0, r0, r2
 8006fae:	fa0b f000 	lsl.w	r0, fp, r0
 8006fb2:	4318      	orrs	r0, r3
 8006fb4:	9004      	str	r0, [sp, #16]
 8006fb6:	463d      	mov	r5, r7
 8006fb8:	e7d3      	b.n	8006f62 <_svfiprintf_r+0x92>
 8006fba:	9a03      	ldr	r2, [sp, #12]
 8006fbc:	1d11      	adds	r1, r2, #4
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	9103      	str	r1, [sp, #12]
 8006fc2:	2a00      	cmp	r2, #0
 8006fc4:	db01      	blt.n	8006fca <_svfiprintf_r+0xfa>
 8006fc6:	9207      	str	r2, [sp, #28]
 8006fc8:	e004      	b.n	8006fd4 <_svfiprintf_r+0x104>
 8006fca:	4252      	negs	r2, r2
 8006fcc:	f043 0302 	orr.w	r3, r3, #2
 8006fd0:	9207      	str	r2, [sp, #28]
 8006fd2:	9304      	str	r3, [sp, #16]
 8006fd4:	783b      	ldrb	r3, [r7, #0]
 8006fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd8:	d10c      	bne.n	8006ff4 <_svfiprintf_r+0x124>
 8006fda:	787b      	ldrb	r3, [r7, #1]
 8006fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8006fde:	d133      	bne.n	8007048 <_svfiprintf_r+0x178>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	9203      	str	r2, [sp, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bfb8      	it	lt
 8006fec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ff0:	3702      	adds	r7, #2
 8006ff2:	9305      	str	r3, [sp, #20]
 8006ff4:	4d2e      	ldr	r5, [pc, #184]	; (80070b0 <_svfiprintf_r+0x1e0>)
 8006ff6:	7839      	ldrb	r1, [r7, #0]
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f7f9 f920 	bl	8000240 <memchr>
 8007000:	b138      	cbz	r0, 8007012 <_svfiprintf_r+0x142>
 8007002:	2340      	movs	r3, #64	; 0x40
 8007004:	1b40      	subs	r0, r0, r5
 8007006:	fa03 f000 	lsl.w	r0, r3, r0
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	4303      	orrs	r3, r0
 800700e:	3701      	adds	r7, #1
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	7839      	ldrb	r1, [r7, #0]
 8007014:	4827      	ldr	r0, [pc, #156]	; (80070b4 <_svfiprintf_r+0x1e4>)
 8007016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800701a:	2206      	movs	r2, #6
 800701c:	1c7e      	adds	r6, r7, #1
 800701e:	f7f9 f90f 	bl	8000240 <memchr>
 8007022:	2800      	cmp	r0, #0
 8007024:	d038      	beq.n	8007098 <_svfiprintf_r+0x1c8>
 8007026:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <_svfiprintf_r+0x1e8>)
 8007028:	bb13      	cbnz	r3, 8007070 <_svfiprintf_r+0x1a0>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	3307      	adds	r3, #7
 800702e:	f023 0307 	bic.w	r3, r3, #7
 8007032:	3308      	adds	r3, #8
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007038:	444b      	add	r3, r9
 800703a:	9309      	str	r3, [sp, #36]	; 0x24
 800703c:	e76d      	b.n	8006f1a <_svfiprintf_r+0x4a>
 800703e:	fb05 3202 	mla	r2, r5, r2, r3
 8007042:	2001      	movs	r0, #1
 8007044:	460f      	mov	r7, r1
 8007046:	e7a6      	b.n	8006f96 <_svfiprintf_r+0xc6>
 8007048:	2300      	movs	r3, #0
 800704a:	3701      	adds	r7, #1
 800704c:	9305      	str	r3, [sp, #20]
 800704e:	4619      	mov	r1, r3
 8007050:	250a      	movs	r5, #10
 8007052:	4638      	mov	r0, r7
 8007054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007058:	3a30      	subs	r2, #48	; 0x30
 800705a:	2a09      	cmp	r2, #9
 800705c:	d903      	bls.n	8007066 <_svfiprintf_r+0x196>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0c8      	beq.n	8006ff4 <_svfiprintf_r+0x124>
 8007062:	9105      	str	r1, [sp, #20]
 8007064:	e7c6      	b.n	8006ff4 <_svfiprintf_r+0x124>
 8007066:	fb05 2101 	mla	r1, r5, r1, r2
 800706a:	2301      	movs	r3, #1
 800706c:	4607      	mov	r7, r0
 800706e:	e7f0      	b.n	8007052 <_svfiprintf_r+0x182>
 8007070:	ab03      	add	r3, sp, #12
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	4622      	mov	r2, r4
 8007076:	4b11      	ldr	r3, [pc, #68]	; (80070bc <_svfiprintf_r+0x1ec>)
 8007078:	a904      	add	r1, sp, #16
 800707a:	4640      	mov	r0, r8
 800707c:	f3af 8000 	nop.w
 8007080:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007084:	4681      	mov	r9, r0
 8007086:	d1d6      	bne.n	8007036 <_svfiprintf_r+0x166>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	065b      	lsls	r3, r3, #25
 800708c:	f53f af35 	bmi.w	8006efa <_svfiprintf_r+0x2a>
 8007090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007092:	b01d      	add	sp, #116	; 0x74
 8007094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007098:	ab03      	add	r3, sp, #12
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4622      	mov	r2, r4
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <_svfiprintf_r+0x1ec>)
 80070a0:	a904      	add	r1, sp, #16
 80070a2:	4640      	mov	r0, r8
 80070a4:	f000 f882 	bl	80071ac <_printf_i>
 80070a8:	e7ea      	b.n	8007080 <_svfiprintf_r+0x1b0>
 80070aa:	bf00      	nop
 80070ac:	080075b8 	.word	0x080075b8
 80070b0:	080075be 	.word	0x080075be
 80070b4:	080075c2 	.word	0x080075c2
 80070b8:	00000000 	.word	0x00000000
 80070bc:	08006e1d 	.word	0x08006e1d

080070c0 <_printf_common>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	4691      	mov	r9, r2
 80070c6:	461f      	mov	r7, r3
 80070c8:	688a      	ldr	r2, [r1, #8]
 80070ca:	690b      	ldr	r3, [r1, #16]
 80070cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070d0:	4293      	cmp	r3, r2
 80070d2:	bfb8      	it	lt
 80070d4:	4613      	movlt	r3, r2
 80070d6:	f8c9 3000 	str.w	r3, [r9]
 80070da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070de:	4606      	mov	r6, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	b112      	cbz	r2, 80070ea <_printf_common+0x2a>
 80070e4:	3301      	adds	r3, #1
 80070e6:	f8c9 3000 	str.w	r3, [r9]
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	0699      	lsls	r1, r3, #26
 80070ee:	bf42      	ittt	mi
 80070f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070f4:	3302      	addmi	r3, #2
 80070f6:	f8c9 3000 	strmi.w	r3, [r9]
 80070fa:	6825      	ldr	r5, [r4, #0]
 80070fc:	f015 0506 	ands.w	r5, r5, #6
 8007100:	d107      	bne.n	8007112 <_printf_common+0x52>
 8007102:	f104 0a19 	add.w	sl, r4, #25
 8007106:	68e3      	ldr	r3, [r4, #12]
 8007108:	f8d9 2000 	ldr.w	r2, [r9]
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	42ab      	cmp	r3, r5
 8007110:	dc28      	bgt.n	8007164 <_printf_common+0xa4>
 8007112:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007116:	6822      	ldr	r2, [r4, #0]
 8007118:	3300      	adds	r3, #0
 800711a:	bf18      	it	ne
 800711c:	2301      	movne	r3, #1
 800711e:	0692      	lsls	r2, r2, #26
 8007120:	d42d      	bmi.n	800717e <_printf_common+0xbe>
 8007122:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007126:	4639      	mov	r1, r7
 8007128:	4630      	mov	r0, r6
 800712a:	47c0      	blx	r8
 800712c:	3001      	adds	r0, #1
 800712e:	d020      	beq.n	8007172 <_printf_common+0xb2>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	68e5      	ldr	r5, [r4, #12]
 8007134:	f8d9 2000 	ldr.w	r2, [r9]
 8007138:	f003 0306 	and.w	r3, r3, #6
 800713c:	2b04      	cmp	r3, #4
 800713e:	bf08      	it	eq
 8007140:	1aad      	subeq	r5, r5, r2
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	6922      	ldr	r2, [r4, #16]
 8007146:	bf0c      	ite	eq
 8007148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800714c:	2500      	movne	r5, #0
 800714e:	4293      	cmp	r3, r2
 8007150:	bfc4      	itt	gt
 8007152:	1a9b      	subgt	r3, r3, r2
 8007154:	18ed      	addgt	r5, r5, r3
 8007156:	f04f 0900 	mov.w	r9, #0
 800715a:	341a      	adds	r4, #26
 800715c:	454d      	cmp	r5, r9
 800715e:	d11a      	bne.n	8007196 <_printf_common+0xd6>
 8007160:	2000      	movs	r0, #0
 8007162:	e008      	b.n	8007176 <_printf_common+0xb6>
 8007164:	2301      	movs	r3, #1
 8007166:	4652      	mov	r2, sl
 8007168:	4639      	mov	r1, r7
 800716a:	4630      	mov	r0, r6
 800716c:	47c0      	blx	r8
 800716e:	3001      	adds	r0, #1
 8007170:	d103      	bne.n	800717a <_printf_common+0xba>
 8007172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717a:	3501      	adds	r5, #1
 800717c:	e7c3      	b.n	8007106 <_printf_common+0x46>
 800717e:	18e1      	adds	r1, r4, r3
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	2030      	movs	r0, #48	; 0x30
 8007184:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007188:	4422      	add	r2, r4
 800718a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800718e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007192:	3302      	adds	r3, #2
 8007194:	e7c5      	b.n	8007122 <_printf_common+0x62>
 8007196:	2301      	movs	r3, #1
 8007198:	4622      	mov	r2, r4
 800719a:	4639      	mov	r1, r7
 800719c:	4630      	mov	r0, r6
 800719e:	47c0      	blx	r8
 80071a0:	3001      	adds	r0, #1
 80071a2:	d0e6      	beq.n	8007172 <_printf_common+0xb2>
 80071a4:	f109 0901 	add.w	r9, r9, #1
 80071a8:	e7d8      	b.n	800715c <_printf_common+0x9c>
	...

080071ac <_printf_i>:
 80071ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071b4:	460c      	mov	r4, r1
 80071b6:	7e09      	ldrb	r1, [r1, #24]
 80071b8:	b085      	sub	sp, #20
 80071ba:	296e      	cmp	r1, #110	; 0x6e
 80071bc:	4617      	mov	r7, r2
 80071be:	4606      	mov	r6, r0
 80071c0:	4698      	mov	r8, r3
 80071c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071c4:	f000 80b3 	beq.w	800732e <_printf_i+0x182>
 80071c8:	d822      	bhi.n	8007210 <_printf_i+0x64>
 80071ca:	2963      	cmp	r1, #99	; 0x63
 80071cc:	d036      	beq.n	800723c <_printf_i+0x90>
 80071ce:	d80a      	bhi.n	80071e6 <_printf_i+0x3a>
 80071d0:	2900      	cmp	r1, #0
 80071d2:	f000 80b9 	beq.w	8007348 <_printf_i+0x19c>
 80071d6:	2958      	cmp	r1, #88	; 0x58
 80071d8:	f000 8083 	beq.w	80072e2 <_printf_i+0x136>
 80071dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071e4:	e032      	b.n	800724c <_printf_i+0xa0>
 80071e6:	2964      	cmp	r1, #100	; 0x64
 80071e8:	d001      	beq.n	80071ee <_printf_i+0x42>
 80071ea:	2969      	cmp	r1, #105	; 0x69
 80071ec:	d1f6      	bne.n	80071dc <_printf_i+0x30>
 80071ee:	6820      	ldr	r0, [r4, #0]
 80071f0:	6813      	ldr	r3, [r2, #0]
 80071f2:	0605      	lsls	r5, r0, #24
 80071f4:	f103 0104 	add.w	r1, r3, #4
 80071f8:	d52a      	bpl.n	8007250 <_printf_i+0xa4>
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6011      	str	r1, [r2, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	da03      	bge.n	800720a <_printf_i+0x5e>
 8007202:	222d      	movs	r2, #45	; 0x2d
 8007204:	425b      	negs	r3, r3
 8007206:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800720a:	486f      	ldr	r0, [pc, #444]	; (80073c8 <_printf_i+0x21c>)
 800720c:	220a      	movs	r2, #10
 800720e:	e039      	b.n	8007284 <_printf_i+0xd8>
 8007210:	2973      	cmp	r1, #115	; 0x73
 8007212:	f000 809d 	beq.w	8007350 <_printf_i+0x1a4>
 8007216:	d808      	bhi.n	800722a <_printf_i+0x7e>
 8007218:	296f      	cmp	r1, #111	; 0x6f
 800721a:	d020      	beq.n	800725e <_printf_i+0xb2>
 800721c:	2970      	cmp	r1, #112	; 0x70
 800721e:	d1dd      	bne.n	80071dc <_printf_i+0x30>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	f043 0320 	orr.w	r3, r3, #32
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	e003      	b.n	8007232 <_printf_i+0x86>
 800722a:	2975      	cmp	r1, #117	; 0x75
 800722c:	d017      	beq.n	800725e <_printf_i+0xb2>
 800722e:	2978      	cmp	r1, #120	; 0x78
 8007230:	d1d4      	bne.n	80071dc <_printf_i+0x30>
 8007232:	2378      	movs	r3, #120	; 0x78
 8007234:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007238:	4864      	ldr	r0, [pc, #400]	; (80073cc <_printf_i+0x220>)
 800723a:	e055      	b.n	80072e8 <_printf_i+0x13c>
 800723c:	6813      	ldr	r3, [r2, #0]
 800723e:	1d19      	adds	r1, r3, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6011      	str	r1, [r2, #0]
 8007244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800724c:	2301      	movs	r3, #1
 800724e:	e08c      	b.n	800736a <_printf_i+0x1be>
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6011      	str	r1, [r2, #0]
 8007254:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007258:	bf18      	it	ne
 800725a:	b21b      	sxthne	r3, r3
 800725c:	e7cf      	b.n	80071fe <_printf_i+0x52>
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	6825      	ldr	r5, [r4, #0]
 8007262:	1d18      	adds	r0, r3, #4
 8007264:	6010      	str	r0, [r2, #0]
 8007266:	0628      	lsls	r0, r5, #24
 8007268:	d501      	bpl.n	800726e <_printf_i+0xc2>
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	e002      	b.n	8007274 <_printf_i+0xc8>
 800726e:	0668      	lsls	r0, r5, #25
 8007270:	d5fb      	bpl.n	800726a <_printf_i+0xbe>
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	4854      	ldr	r0, [pc, #336]	; (80073c8 <_printf_i+0x21c>)
 8007276:	296f      	cmp	r1, #111	; 0x6f
 8007278:	bf14      	ite	ne
 800727a:	220a      	movne	r2, #10
 800727c:	2208      	moveq	r2, #8
 800727e:	2100      	movs	r1, #0
 8007280:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007284:	6865      	ldr	r5, [r4, #4]
 8007286:	60a5      	str	r5, [r4, #8]
 8007288:	2d00      	cmp	r5, #0
 800728a:	f2c0 8095 	blt.w	80073b8 <_printf_i+0x20c>
 800728e:	6821      	ldr	r1, [r4, #0]
 8007290:	f021 0104 	bic.w	r1, r1, #4
 8007294:	6021      	str	r1, [r4, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d13d      	bne.n	8007316 <_printf_i+0x16a>
 800729a:	2d00      	cmp	r5, #0
 800729c:	f040 808e 	bne.w	80073bc <_printf_i+0x210>
 80072a0:	4665      	mov	r5, ip
 80072a2:	2a08      	cmp	r2, #8
 80072a4:	d10b      	bne.n	80072be <_printf_i+0x112>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	07db      	lsls	r3, r3, #31
 80072aa:	d508      	bpl.n	80072be <_printf_i+0x112>
 80072ac:	6923      	ldr	r3, [r4, #16]
 80072ae:	6862      	ldr	r2, [r4, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	bfde      	ittt	le
 80072b4:	2330      	movle	r3, #48	; 0x30
 80072b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80072be:	ebac 0305 	sub.w	r3, ip, r5
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	f8cd 8000 	str.w	r8, [sp]
 80072c8:	463b      	mov	r3, r7
 80072ca:	aa03      	add	r2, sp, #12
 80072cc:	4621      	mov	r1, r4
 80072ce:	4630      	mov	r0, r6
 80072d0:	f7ff fef6 	bl	80070c0 <_printf_common>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d14d      	bne.n	8007374 <_printf_i+0x1c8>
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072dc:	b005      	add	sp, #20
 80072de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072e2:	4839      	ldr	r0, [pc, #228]	; (80073c8 <_printf_i+0x21c>)
 80072e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072e8:	6813      	ldr	r3, [r2, #0]
 80072ea:	6821      	ldr	r1, [r4, #0]
 80072ec:	1d1d      	adds	r5, r3, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6015      	str	r5, [r2, #0]
 80072f2:	060a      	lsls	r2, r1, #24
 80072f4:	d50b      	bpl.n	800730e <_printf_i+0x162>
 80072f6:	07ca      	lsls	r2, r1, #31
 80072f8:	bf44      	itt	mi
 80072fa:	f041 0120 	orrmi.w	r1, r1, #32
 80072fe:	6021      	strmi	r1, [r4, #0]
 8007300:	b91b      	cbnz	r3, 800730a <_printf_i+0x15e>
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	f022 0220 	bic.w	r2, r2, #32
 8007308:	6022      	str	r2, [r4, #0]
 800730a:	2210      	movs	r2, #16
 800730c:	e7b7      	b.n	800727e <_printf_i+0xd2>
 800730e:	064d      	lsls	r5, r1, #25
 8007310:	bf48      	it	mi
 8007312:	b29b      	uxthmi	r3, r3
 8007314:	e7ef      	b.n	80072f6 <_printf_i+0x14a>
 8007316:	4665      	mov	r5, ip
 8007318:	fbb3 f1f2 	udiv	r1, r3, r2
 800731c:	fb02 3311 	mls	r3, r2, r1, r3
 8007320:	5cc3      	ldrb	r3, [r0, r3]
 8007322:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007326:	460b      	mov	r3, r1
 8007328:	2900      	cmp	r1, #0
 800732a:	d1f5      	bne.n	8007318 <_printf_i+0x16c>
 800732c:	e7b9      	b.n	80072a2 <_printf_i+0xf6>
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	6825      	ldr	r5, [r4, #0]
 8007332:	6961      	ldr	r1, [r4, #20]
 8007334:	1d18      	adds	r0, r3, #4
 8007336:	6010      	str	r0, [r2, #0]
 8007338:	0628      	lsls	r0, r5, #24
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	d501      	bpl.n	8007342 <_printf_i+0x196>
 800733e:	6019      	str	r1, [r3, #0]
 8007340:	e002      	b.n	8007348 <_printf_i+0x19c>
 8007342:	066a      	lsls	r2, r5, #25
 8007344:	d5fb      	bpl.n	800733e <_printf_i+0x192>
 8007346:	8019      	strh	r1, [r3, #0]
 8007348:	2300      	movs	r3, #0
 800734a:	6123      	str	r3, [r4, #16]
 800734c:	4665      	mov	r5, ip
 800734e:	e7b9      	b.n	80072c4 <_printf_i+0x118>
 8007350:	6813      	ldr	r3, [r2, #0]
 8007352:	1d19      	adds	r1, r3, #4
 8007354:	6011      	str	r1, [r2, #0]
 8007356:	681d      	ldr	r5, [r3, #0]
 8007358:	6862      	ldr	r2, [r4, #4]
 800735a:	2100      	movs	r1, #0
 800735c:	4628      	mov	r0, r5
 800735e:	f7f8 ff6f 	bl	8000240 <memchr>
 8007362:	b108      	cbz	r0, 8007368 <_printf_i+0x1bc>
 8007364:	1b40      	subs	r0, r0, r5
 8007366:	6060      	str	r0, [r4, #4]
 8007368:	6863      	ldr	r3, [r4, #4]
 800736a:	6123      	str	r3, [r4, #16]
 800736c:	2300      	movs	r3, #0
 800736e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007372:	e7a7      	b.n	80072c4 <_printf_i+0x118>
 8007374:	6923      	ldr	r3, [r4, #16]
 8007376:	462a      	mov	r2, r5
 8007378:	4639      	mov	r1, r7
 800737a:	4630      	mov	r0, r6
 800737c:	47c0      	blx	r8
 800737e:	3001      	adds	r0, #1
 8007380:	d0aa      	beq.n	80072d8 <_printf_i+0x12c>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	079b      	lsls	r3, r3, #30
 8007386:	d413      	bmi.n	80073b0 <_printf_i+0x204>
 8007388:	68e0      	ldr	r0, [r4, #12]
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	4298      	cmp	r0, r3
 800738e:	bfb8      	it	lt
 8007390:	4618      	movlt	r0, r3
 8007392:	e7a3      	b.n	80072dc <_printf_i+0x130>
 8007394:	2301      	movs	r3, #1
 8007396:	464a      	mov	r2, r9
 8007398:	4639      	mov	r1, r7
 800739a:	4630      	mov	r0, r6
 800739c:	47c0      	blx	r8
 800739e:	3001      	adds	r0, #1
 80073a0:	d09a      	beq.n	80072d8 <_printf_i+0x12c>
 80073a2:	3501      	adds	r5, #1
 80073a4:	68e3      	ldr	r3, [r4, #12]
 80073a6:	9a03      	ldr	r2, [sp, #12]
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	42ab      	cmp	r3, r5
 80073ac:	dcf2      	bgt.n	8007394 <_printf_i+0x1e8>
 80073ae:	e7eb      	b.n	8007388 <_printf_i+0x1dc>
 80073b0:	2500      	movs	r5, #0
 80073b2:	f104 0919 	add.w	r9, r4, #25
 80073b6:	e7f5      	b.n	80073a4 <_printf_i+0x1f8>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1ac      	bne.n	8007316 <_printf_i+0x16a>
 80073bc:	7803      	ldrb	r3, [r0, #0]
 80073be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c6:	e76c      	b.n	80072a2 <_printf_i+0xf6>
 80073c8:	080075c9 	.word	0x080075c9
 80073cc:	080075da 	.word	0x080075da

080073d0 <memmove>:
 80073d0:	4288      	cmp	r0, r1
 80073d2:	b510      	push	{r4, lr}
 80073d4:	eb01 0302 	add.w	r3, r1, r2
 80073d8:	d807      	bhi.n	80073ea <memmove+0x1a>
 80073da:	1e42      	subs	r2, r0, #1
 80073dc:	4299      	cmp	r1, r3
 80073de:	d00a      	beq.n	80073f6 <memmove+0x26>
 80073e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073e8:	e7f8      	b.n	80073dc <memmove+0xc>
 80073ea:	4283      	cmp	r3, r0
 80073ec:	d9f5      	bls.n	80073da <memmove+0xa>
 80073ee:	1881      	adds	r1, r0, r2
 80073f0:	1ad2      	subs	r2, r2, r3
 80073f2:	42d3      	cmn	r3, r2
 80073f4:	d100      	bne.n	80073f8 <memmove+0x28>
 80073f6:	bd10      	pop	{r4, pc}
 80073f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007400:	e7f7      	b.n	80073f2 <memmove+0x22>

08007402 <_realloc_r>:
 8007402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007404:	4607      	mov	r7, r0
 8007406:	4614      	mov	r4, r2
 8007408:	460e      	mov	r6, r1
 800740a:	b921      	cbnz	r1, 8007416 <_realloc_r+0x14>
 800740c:	4611      	mov	r1, r2
 800740e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007412:	f7ff bc77 	b.w	8006d04 <_malloc_r>
 8007416:	b922      	cbnz	r2, 8007422 <_realloc_r+0x20>
 8007418:	f7ff fc26 	bl	8006c68 <_free_r>
 800741c:	4625      	mov	r5, r4
 800741e:	4628      	mov	r0, r5
 8007420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007422:	f000 f814 	bl	800744e <_malloc_usable_size_r>
 8007426:	42a0      	cmp	r0, r4
 8007428:	d20f      	bcs.n	800744a <_realloc_r+0x48>
 800742a:	4621      	mov	r1, r4
 800742c:	4638      	mov	r0, r7
 800742e:	f7ff fc69 	bl	8006d04 <_malloc_r>
 8007432:	4605      	mov	r5, r0
 8007434:	2800      	cmp	r0, #0
 8007436:	d0f2      	beq.n	800741e <_realloc_r+0x1c>
 8007438:	4631      	mov	r1, r6
 800743a:	4622      	mov	r2, r4
 800743c:	f7ff fc00 	bl	8006c40 <memcpy>
 8007440:	4631      	mov	r1, r6
 8007442:	4638      	mov	r0, r7
 8007444:	f7ff fc10 	bl	8006c68 <_free_r>
 8007448:	e7e9      	b.n	800741e <_realloc_r+0x1c>
 800744a:	4635      	mov	r5, r6
 800744c:	e7e7      	b.n	800741e <_realloc_r+0x1c>

0800744e <_malloc_usable_size_r>:
 800744e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007452:	1f18      	subs	r0, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	bfbc      	itt	lt
 8007458:	580b      	ldrlt	r3, [r1, r0]
 800745a:	18c0      	addlt	r0, r0, r3
 800745c:	4770      	bx	lr
	...

08007460 <_init>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	bf00      	nop
 8007464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007466:	bc08      	pop	{r3}
 8007468:	469e      	mov	lr, r3
 800746a:	4770      	bx	lr

0800746c <_fini>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	bf00      	nop
 8007470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007472:	bc08      	pop	{r3}
 8007474:	469e      	mov	lr, r3
 8007476:	4770      	bx	lr
