
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd28  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800bf28  0800bf28  0001bf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c234  0800c234  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c234  0800c234  0001c234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c23c  0800c23c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c23c  0800c23c  0001c23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c240  0800c240  0001c240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800c244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  200000a4  0800c2e8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  0800c2e8  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b21d  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053eb  00000000  00000000  0004b2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001aa0  00000000  00000000  000506e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001818  00000000  00000000  00052180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d766  00000000  00000000  00053998  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b152  00000000  00000000  000810fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108ece  00000000  00000000  0009c250  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a511e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb8  00000000  00000000  001a519c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bf10 	.word	0x0800bf10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800bf10 	.word	0x0800bf10

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <Parse_AMS_HeartbeatResponse>:

	return p;
}

void Parse_AMS_HeartbeatResponse(uint8_t *data, bool *initialised, bool* HVAn, bool* HVBn, bool* precharge, bool* HVAp, bool* HVBp, uint16_t* averageVoltage, uint16_t* runtime)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
	*HVAn = (bool)(data[0] & 0x1);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	701a      	strb	r2, [r3, #0]
	*HVBn = (bool)(data[0] & 0x2);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	701a      	strb	r2, [r3, #0]
	*precharge = (bool)(data[0] & 0x4);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf14      	ite	ne
 8000636:	2301      	movne	r3, #1
 8000638:	2300      	moveq	r3, #0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	701a      	strb	r2, [r3, #0]

	*HVAp = (bool)(data[0] & 0x10);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2da      	uxtb	r2, r3
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	701a      	strb	r2, [r3, #0]
	*HVBp = (bool)(data[0] & 0x20);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2da      	uxtb	r2, r3
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	701a      	strb	r2, [r3, #0]

	*initialised = (bool)(data[0] & 0x80);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	09db      	lsrs	r3, r3, #7
 8000676:	b2da      	uxtb	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	701a      	strb	r2, [r3, #0]

	*averageVoltage = (uint16_t)((data[1] & 0x3F) << 6 | (data[0]));
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b21b      	sxth	r3, r3
 8000686:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800068a:	b21a      	sxth	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29a      	uxth	r2, r3
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	801a      	strh	r2, [r3, #0]
	*runtime = (uint16_t)(data[3] << 8 | data[2]);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3303      	adds	r3, #3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3302      	adds	r3, #2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b6:	801a      	strh	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2200      	movs	r2, #0
 80006d6:	2116      	movs	r1, #22
 80006d8:	2002      	movs	r0, #2
 80006da:	f000 fad9 	bl	8000c90 <Compose_CANId>
 80006de:	4603      	mov	r3, r0
 80006e0:	607b      	str	r3, [r7, #4]
	return p;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x1, 0x0);
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2301      	movs	r3, #1
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	2200      	movs	r2, #0
 80006fe:	2116      	movs	r1, #22
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fac5 	bl	8000c90 <Compose_CANId>
 8000706:	4603      	mov	r3, r0
 8000708:	607b      	str	r3, [r7, #4]
	return p;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Parse_CC_RequestRPM>:
	p.data[7] = 0x00; // Data
	return p;
}

void Parse_CC_RequestRPM(uint8_t* data, int16_t* motorRPM)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	*motorRPM = data[5] << 8 | data[4];
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3305      	adds	r3, #5
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	b21a      	sxth	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3304      	adds	r3, #4
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b21a      	sxth	r2, r3
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	801a      	strh	r2, [r3, #0]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <Compose_CC_ShutdownInverter>:
{
	return;
}

CC_ShutdownInverter_t Compose_CC_ShutdownInverter(uint16_t nodeId)
{
 8000744:	b490      	push	{r4, r7}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
	CC_ShutdownInverter_t p;
	uint16_t index = 0x200C;
 8000750:	f242 030c 	movw	r3, #8204	; 0x200c
 8000754:	82fb      	strh	r3, [r7, #22]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 8000756:	887b      	ldrh	r3, [r7, #2]
 8000758:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800075c:	60bb      	str	r3, [r7, #8]
	p.data[0] = 0b00101100; // Client Command Specifier + Number of Bytes + xx
 800075e:	232c      	movs	r3, #44	; 0x2c
 8000760:	733b      	strb	r3, [r7, #12]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	737b      	strb	r3, [r7, #13]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 8000768:	8afb      	ldrh	r3, [r7, #22]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b29b      	uxth	r3, r3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	73bb      	strb	r3, [r7, #14]
	p.data[3] = 0x00; // Subindex
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
	p.data[4] = 0x00; // Data
 8000776:	2300      	movs	r3, #0
 8000778:	743b      	strb	r3, [r7, #16]
	p.data[5] = 0x00; // Data
 800077a:	2300      	movs	r3, #0
 800077c:	747b      	strb	r3, [r7, #17]
	p.data[6] = 0x00; // Data
 800077e:	2300      	movs	r3, #0
 8000780:	74bb      	strb	r3, [r7, #18]
	p.data[7] = 0x00; // Data
 8000782:	2300      	movs	r3, #0
 8000784:	74fb      	strb	r3, [r7, #19]
	return p;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	461c      	mov	r4, r3
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bc90      	pop	{r4, r7}
 800079e:	4770      	bx	lr

080007a0 <Compose_CC_SetVariable>:
void Parse_CC_ShutdownInverter(uint8_t* data){
	return;
}

CC_SetVariable_t Compose_CC_SetVariable(uint16_t nodeId, uint8_t userVariable, int32_t userCommand)
{
 80007a0:	b490      	push	{r4, r7}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	460b      	mov	r3, r1
 80007ac:	817b      	strh	r3, [r7, #10]
 80007ae:	4613      	mov	r3, r2
 80007b0:	727b      	strb	r3, [r7, #9]
	CC_SetVariable_t p;
	uint16_t index = 0x2005;
 80007b2:	f242 0305 	movw	r3, #8197	; 0x2005
 80007b6:	83fb      	strh	r3, [r7, #30]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 80007b8:	897b      	ldrh	r3, [r7, #10]
 80007ba:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80007be:	613b      	str	r3, [r7, #16]
	p.data[0] = 0b00100000; // Client Command Specifier + Number of Bytes + xx
 80007c0:	2320      	movs	r3, #32
 80007c2:	753b      	strb	r3, [r7, #20]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 80007c4:	8bfb      	ldrh	r3, [r7, #30]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	757b      	strb	r3, [r7, #21]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 80007ca:	8bfb      	ldrh	r3, [r7, #30]
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	75bb      	strb	r3, [r7, #22]
	p.data[3] = userVariable; // Subindex
 80007d4:	7a7b      	ldrb	r3, [r7, #9]
 80007d6:	75fb      	strb	r3, [r7, #23]
	p.data[4] = (uint8_t)userCommand & 0xFF; // Data
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	763b      	strb	r3, [r7, #24]
	p.data[5] = (uint8_t)(userCommand >> 8) & 0xFF; // Data
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	121b      	asrs	r3, r3, #8
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	767b      	strb	r3, [r7, #25]
	p.data[6] = (uint8_t)(userCommand >> 16) & 0xFF; // Data
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	141b      	asrs	r3, r3, #16
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	76bb      	strb	r3, [r7, #26]
	p.data[7] = (uint8_t)(userCommand >> 24) & 0xFF; // Data
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	161b      	asrs	r3, r3, #24
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	76fb      	strb	r3, [r7, #27]
	return p;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	461c      	mov	r4, r3
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bc90      	pop	{r4, r7}
 800080e:	4770      	bx	lr

08000810 <Compose_CC_SetBool>:
{
	return;
}

CC_SetBool_t Compose_CC_SetBool(uint16_t nodeId, uint8_t boolNum, uint32_t userBool)
{
 8000810:	b490      	push	{r4, r7}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	817b      	strh	r3, [r7, #10]
 800081e:	4613      	mov	r3, r2
 8000820:	727b      	strb	r3, [r7, #9]
	CC_SetBool_t p;
	uint16_t index = 0x2015;
 8000822:	f242 0315 	movw	r3, #8213	; 0x2015
 8000826:	83fb      	strh	r3, [r7, #30]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 8000828:	897b      	ldrh	r3, [r7, #10]
 800082a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800082e:	613b      	str	r3, [r7, #16]
	p.data[0] = 0b00100000; // Client Command Specifier + Number of Bytes + xx
 8000830:	2320      	movs	r3, #32
 8000832:	753b      	strb	r3, [r7, #20]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 8000834:	8bfb      	ldrh	r3, [r7, #30]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	757b      	strb	r3, [r7, #21]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 800083a:	8bfb      	ldrh	r3, [r7, #30]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	75bb      	strb	r3, [r7, #22]
	p.data[3] = boolNum; // Subindex
 8000844:	7a7b      	ldrb	r3, [r7, #9]
 8000846:	75fb      	strb	r3, [r7, #23]
	p.data[4] = (uint8_t)userBool & 0xFF; // Data
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	763b      	strb	r3, [r7, #24]
	p.data[5] = (uint8_t)(userBool >> 8) & 0xFF; // Data
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	b2db      	uxtb	r3, r3
 8000854:	767b      	strb	r3, [r7, #25]
	p.data[6] = (uint8_t)(userBool >> 16) & 0xFF; // Data
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	0c1b      	lsrs	r3, r3, #16
 800085a:	b2db      	uxtb	r3, r3
 800085c:	76bb      	strb	r3, [r7, #26]
	p.data[7] = (uint8_t)(userBool >> 24) & 0xFF; // Data
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	0e1b      	lsrs	r3, r3, #24
 8000862:	b2db      	uxtb	r3, r3
 8000864:	76fb      	strb	r3, [r7, #27]
	return p;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	461c      	mov	r4, r3
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bc90      	pop	{r4, r7}
 800087e:	4770      	bx	lr

08000880 <Send_CC_FatalShutdown>:

bool Send_CC_FatalShutdown(char* errorCause, bool echo,
		uint32_t* CAN1_Mailbox, uint32_t* CAN2_Mailbox, uint32_t* CAN3_Mailbox,
		CAN_HandleTypeDef* CanHandle, CAN_HandleTypeDef* CanHandle2, CAN_HandleTypeDef* CanHandle3,
		UART_HandleTypeDef* huartHandle, uint8_t INVERTER_1_NODE_ID, uint8_t INVERTER_2_NODE_ID)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09e      	sub	sp, #120	; 0x78
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	460b      	mov	r3, r1
 800088e:	72fb      	strb	r3, [r7, #11]
	if(echo)
 8000890:	7afb      	ldrb	r3, [r7, #11]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00b      	beq.n	80008ae <Send_CC_FatalShutdown+0x2e>
	{
		HAL_UART_Transmit(huartHandle, (uint8_t *)errorCause, (size_t)strlen(errorCause), HAL_MAX_DELAY);
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff fcd2 	bl	8000240 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008a4:	68f9      	ldr	r1, [r7, #12]
 80008a6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80008aa:	f006 fd53 	bl	8007354 <HAL_UART_Transmit>
	}
	CC_SetVariable_t accelLeftZero = Compose_CC_SetVariable(INVERTER_1_NODE_ID,
 80008ae:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80008b2:	b299      	uxth	r1, r3
 80008b4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80008b8:	2300      	movs	r3, #0
 80008ba:	2201      	movs	r2, #1
 80008bc:	f7ff ff70 	bl	80007a0 <Compose_CC_SetVariable>
			0x01,
			0);
	CAN_TxHeaderTypeDef accelLeftZeroHeader =
 80008c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]
	{
			.StdId = accelLeftZero.id,
 80008d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
	CAN_TxHeaderTypeDef accelLeftZeroHeader =
 80008d4:	657b      	str	r3, [r7, #84]	; 0x54
 80008d6:	2308      	movs	r3, #8
 80008d8:	667b      	str	r3, [r7, #100]	; 0x64
			.IDE = CAN_ID_STD,
			.RTR = CAN_RTR_DATA,
			.DLC = 8,
			.TransmitGlobalTime = DISABLE,
	};
	HAL_CAN_AddTxMessage(CanHandle, &accelLeftZeroHeader, accelLeftZero.data, CAN1_Mailbox);
 80008da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008de:	1d1a      	adds	r2, r3, #4
 80008e0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80008ea:	f004 f971 	bl	8004bd0 <HAL_CAN_AddTxMessage>

	CC_SetVariable_t accelRightZero = Compose_CC_SetVariable(INVERTER_2_NODE_ID,
 80008ee:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80008f2:	b299      	uxth	r1, r3
 80008f4:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80008f8:	2300      	movs	r3, #0
 80008fa:	2201      	movs	r2, #1
 80008fc:	f7ff ff50 	bl	80007a0 <Compose_CC_SetVariable>
			0x01,
			0);
	CAN_TxHeaderTypeDef accelRightZeroHeader =
 8000900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]
	{
			.StdId = accelRightZero.id,
 8000912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	CAN_TxHeaderTypeDef accelRightZeroHeader =
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
 8000916:	2308      	movs	r3, #8
 8000918:	643b      	str	r3, [r7, #64]	; 0x40
			.IDE = CAN_ID_STD,
			.RTR = CAN_RTR_DATA,
			.DLC = 8,
			.TransmitGlobalTime = DISABLE,
	};
	HAL_CAN_AddTxMessage(CanHandle, &accelRightZeroHeader, accelRightZero.data, CAN1_Mailbox);
 800091a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800091e:	1d1a      	adds	r2, r3, #4
 8000920:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800092a:	f004 f951 	bl	8004bd0 <HAL_CAN_AddTxMessage>

	CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 800092e:	f7ff fedd 	bl	80006ec <Compose_CC_FatalShutdown>
 8000932:	4603      	mov	r3, r0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	615a      	str	r2, [r3, #20]
	{
			.ExtId = fatalShutdown.id,
 8000948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	2304      	movs	r3, #4
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	2301      	movs	r3, #1
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000954:	230f      	movs	r3, #15
 8000956:	743b      	strb	r3, [r7, #16]
	HAL_CAN_AddTxMessage(CanHandle, &header, data, CAN1_Mailbox);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0114 	add.w	r1, r7, #20
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000966:	f004 f933 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle2, &header, data, CAN2_Mailbox);
 800096a:	f107 0210 	add.w	r2, r7, #16
 800096e:	f107 0114 	add.w	r1, r7, #20
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000978:	f004 f92a 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle3, &header, data, CAN3_Mailbox);
 800097c:	f107 0210 	add.w	r2, r7, #16
 8000980:	f107 0114 	add.w	r1, r7, #20
 8000984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000988:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800098c:	f004 f920 	bl	8004bd0 <HAL_CAN_AddTxMessage>

	return true;
 8000990:	2301      	movs	r3, #1
}
 8000992:	4618      	mov	r0, r3
 8000994:	3778      	adds	r7, #120	; 0x78
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <fsm_new>:
#ifdef QUTMS_FSM

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 80009a2:	2010      	movs	r0, #16
 80009a4:	f00a fe9c 	bl	800b6e0 <malloc>
 80009a8:	4603      	mov	r3, r0
 80009aa:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 80009ac:	2210      	movs	r2, #16
 80009ae:	2100      	movs	r1, #0
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f00a fea8 	bl	800b706 <memset>
	fsm->currentState = beginState;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 80009bc:	2200      	movs	r2, #0
 80009be:	2103      	movs	r1, #3
 80009c0:	2003      	movs	r0, #3
 80009c2:	f007 faab 	bl	8007f1c <osSemaphoreNew>
 80009c6:	4602      	mov	r2, r0
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2103      	movs	r1, #3
 80009d0:	2003      	movs	r0, #3
 80009d2:	f007 faa3 	bl	8007f1c <osSemaphoreNew>
 80009d6:	4602      	mov	r2, r0
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	2120      	movs	r1, #32
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 fb38 	bl	8008058 <osSemaphoreAcquire>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d109      	bne.n	8000a02 <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f007 fb91 	bl	8008124 <osSemaphoreRelease>
	}

	return fsm;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f007 fb1c 	bl	8008058 <osSemaphoreAcquire>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10a      	bne.n	8000a3c <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f007 fb75 	bl	8008124 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 8000a3a:	e004      	b.n	8000a46 <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 8000a3c:	2225      	movs	r2, #37	; 0x25
 8000a3e:	4904      	ldr	r1, [pc, #16]	; (8000a50 <fsm_iterate+0x44>)
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f8ab 	bl	8000b9c <fsm_log>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	0800bf28 	.word	0x0800bf28

08000a54 <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	; 0x70
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d036      	beq.n	8000ad8 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4618      	mov	r0, r3
 8000a72:	f007 faf1 	bl	8008058 <osSemaphoreAcquire>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d127      	bne.n	8000acc <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68da      	ldr	r2, [r3, #12]
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	68d9      	ldr	r1, [r3, #12]
 8000a86:	f107 0014 	add.w	r0, r7, #20
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	4913      	ldr	r1, [pc, #76]	; (8000ae0 <fsm_changeState+0x8c>)
 8000a92:	f00a fef9 	bl	800b888 <siprintf>
 8000a96:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 8000a98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f000 f87b 	bl	8000b9c <fsm_log>
		fsm->currentState->exit(fsm);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	4798      	blx	r3

		fsm->currentState = newState;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f007 fb2d 	bl	8008124 <osSemaphoreRelease>
 8000aca:	e006      	b.n	8000ada <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 8000acc:	2220      	movs	r2, #32
 8000ace:	4905      	ldr	r1, [pc, #20]	; (8000ae4 <fsm_changeState+0x90>)
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f000 f863 	bl	8000b9c <fsm_log>
 8000ad6:	e000      	b.n	8000ada <fsm_changeState+0x86>
		return;
 8000ad8:	bf00      	nop
	}
}
 8000ada:	3768      	adds	r7, #104	; 0x68
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	0800bf50 	.word	0x0800bf50
 8000ae4:	0800bf74 	.word	0x0800bf74

08000ae8 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b098      	sub	sp, #96	; 0x60
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	68da      	ldr	r2, [r3, #12]
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4920      	ldr	r1, [pc, #128]	; (8000b7c <fsm_reset+0x94>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f00a fec3 	bl	800b888 <siprintf>
 8000b02:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 8000b04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 f845 	bl	8000b9c <fsm_log>
	fsm_log_function f = fsm->log;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 8000b18:	2210      	movs	r2, #16
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f00a fdf2 	bl	800b706 <memset>
	fsm->log = f;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b26:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2103      	movs	r1, #3
 8000b32:	2003      	movs	r0, #3
 8000b34:	f007 f9f2 	bl	8007f1c <osSemaphoreNew>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2103      	movs	r1, #3
 8000b42:	2003      	movs	r0, #3
 8000b44:	f007 f9ea 	bl	8007f1c <osSemaphoreNew>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2120      	movs	r1, #32
 8000b54:	4618      	mov	r0, r3
 8000b56:	f007 fa7f 	bl	8008058 <osSemaphoreAcquire>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d109      	bne.n	8000b74 <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f007 fad8 	bl	8008124 <osSemaphoreRelease>
	}
}
 8000b74:	bf00      	nop
 8000b76:	3760      	adds	r7, #96	; 0x60
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	0800bf98 	.word	0x0800bf98

08000b80 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	68b8      	ldr	r0, [r7, #8]
 8000bb0:	4798      	blx	r3
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <Compose_PDM_InitiateStartup>:

#ifdef QUTMS_CAN_PDM

#include "PDM_CAN_Messages.h"

PDM_InitiateStartup_t Compose_PDM_InitiateStartup(void) {
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af02      	add	r7, sp, #8
	PDM_InitiateStartup_t p;
	p.id = Compose_CANId(CAN_PRIORITY_NORMAL, CAN_SRC_ID_PDM, 0x0,
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2302      	movs	r3, #2
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2114      	movs	r1, #20
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f85e 	bl	8000c90 <Compose_CANId>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	607b      	str	r3, [r7, #4]
	CAN_TYPE_RECEIVE, 0x00, 0x0);
	return p;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <Parse_PDM_StartupOk>:
	}

	return packet;
}

void Parse_PDM_StartupOk(uint8_t data[4], uint32_t *powerChannels) {
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
	*powerChannels = 0;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e010      	b.n	8000c1a <Parse_PDM_StartupOk+0x38>
		*powerChannels |= data[i] << (i * 8);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	440a      	add	r2, r1
 8000c02:	7812      	ldrb	r2, [r2, #0]
 8000c04:	4611      	mov	r1, r2
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	00d2      	lsls	r2, r2, #3
 8000c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	ddeb      	ble.n	8000bf8 <Parse_PDM_StartupOk+0x16>
	}
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <Compose_PDM_SetChannelStates>:
	for (int i = 0; i < 4; i++) {
		*powerChannels |= data[i] << (i * 8);
	}
}

PDM_SetChannelStates_t Compose_PDM_SetChannelStates(uint32_t powerChannels) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	PDM_SetChannelStates_t packet;
	packet.id = Compose_CANId(CAN_PRIORITY_NORMAL, CAN_SRC_ID_PDM, 0x0,
 8000c36:	2300      	movs	r3, #0
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2302      	movs	r3, #2
 8000c40:	2200      	movs	r2, #0
 8000c42:	2114      	movs	r1, #20
 8000c44:	2002      	movs	r0, #2
 8000c46:	f000 f823 	bl	8000c90 <Compose_CANId>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	60fb      	str	r3, [r7, #12]
	CAN_TYPE_RECEIVE, 0x02, 0x0);

	for (int i = 0; i < 4; i++) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e00e      	b.n	8000c72 <Compose_PDM_SetChannelStates+0x46>
		packet.data[i] = (powerChannels >> (i * 8)) & 0xFF;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5e:	b2d9      	uxtb	r1, r3
 8000c60:	f107 0210 	add.w	r2, r7, #16
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	4413      	add	r3, r2
 8000c68:	460a      	mov	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	dded      	ble.n	8000c54 <Compose_PDM_SetChannelStates+0x28>
	}

	return packet;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c84:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <Compose_CANId>:

/* USER CODE BEGIN 0 */

/* CANId */
uint32_t Compose_CANId(uint8_t priority, uint16_t sourceId, uint8_t autonomous, uint8_t type, uint16_t extra, uint8_t BMSId)
{
 8000c90:	b490      	push	{r4, r7}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4604      	mov	r4, r0
 8000c98:	4608      	mov	r0, r1
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80bb      	strh	r3, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	71bb      	strb	r3, [r7, #6]
 8000caa:	4613      	mov	r3, r2
 8000cac:	70fb      	strb	r3, [r7, #3]
	uint32_t id = (priority & 0x3) << 27
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	06db      	lsls	r3, r3, #27
 8000cb2:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
				| (sourceId & 0x1FF) << 18
 8000cb6:	88bb      	ldrh	r3, [r7, #4]
 8000cb8:	0499      	lsls	r1, r3, #18
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <Compose_CANId+0x68>)
 8000cbc:	400b      	ands	r3, r1
 8000cbe:	431a      	orrs	r2, r3
				| (autonomous & 0x1) << 17
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	045b      	lsls	r3, r3, #17
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	431a      	orrs	r2, r3
				| (type & 0x7) << 14
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	039b      	lsls	r3, r3, #14
 8000cce:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000cd2:	431a      	orrs	r2, r3
				| (extra & 0x3FF) << 4
 8000cd4:	8b3b      	ldrh	r3, [r7, #24]
 8000cd6:	0119      	lsls	r1, r3, #4
 8000cd8:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000cdc:	400b      	ands	r3, r1
 8000cde:	431a      	orrs	r2, r3
				| (BMSId & 0xF);
 8000ce0:	7f3b      	ldrb	r3, [r7, #28]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	4313      	orrs	r3, r2
	uint32_t id = (priority & 0x3) << 27
 8000ce8:	60fb      	str	r3, [r7, #12]
	return id;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc90      	pop	{r4, r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	07fc0000 	.word	0x07fc0000

08000cfc <Parse_SHDN_HeartbeatResponse>:
	p.data = segmentState;
	return p;
}

void Parse_SHDN_HeartbeatResponse(SHDN_HeartbeatResponse_t packet, uint8_t* segmentState)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d0a:	607a      	str	r2, [r7, #4]
	*segmentState = packet.data;
 8000d0c:	7b3a      	ldrb	r2, [r7, #12]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	701a      	strb	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <Parse_SHDN_IMD_HeartbeatResponse>:
	p.data = pwmState;
	return p;
}

void Parse_SHDN_IMD_HeartbeatResponse(SHDN_IMD_HeartbeatResponse_t packet, uint8_t* pwmState)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b085      	sub	sp, #20
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d2c:	607a      	str	r2, [r7, #4]
	*pwmState = packet.data;
 8000d2e:	7b3a      	ldrb	r2, [r7, #12]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	701a      	strb	r2, [r3, #0]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <map>:
#ifdef QUTMS_UTIL

#include "Util.h"

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (float)(in_max - in_min) + out_min;
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	69b9      	ldr	r1, [r7, #24]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	1a8a      	subs	r2, r1, r2
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	ee07 3a90 	vmov	s15, r3
 8000d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8a:	ee17 3a90 	vmov	r3, s15
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b08b      	sub	sp, #44	; 0x2c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000da4:	4b5c      	ldr	r3, [pc, #368]	; (8000f18 <state_start_enter+0x17c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 808c 	bne.w	8000ec6 <state_start_enter+0x12a>
	{
		/* Assign memory and nullify Global State */
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000dae:	f240 505c 	movw	r0, #1372	; 0x55c
 8000db2:	f00a fc95 	bl	800b6e0 <malloc>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <state_start_enter+0x17c>)
 8000dbc:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000dbe:	4b56      	ldr	r3, [pc, #344]	; (8000f18 <state_start_enter+0x17c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f240 525c 	movw	r2, #1372	; 0x55c
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00a fc9c 	bl	800b706 <memset>

		/* As CC_GlobalState is accessible across threads
		 * we need to use a semaphore to access and lock it
		 */
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000dce:	4b52      	ldr	r3, [pc, #328]	; (8000f18 <state_start_enter+0x17c>)
 8000dd0:	681c      	ldr	r4, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f007 f8a0 	bl	8007f1c <osSemaphoreNew>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c

		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000de2:	4b4d      	ldr	r3, [pc, #308]	; (8000f18 <state_start_enter+0x17c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8000dea:	2120      	movs	r1, #32
 8000dec:	4618      	mov	r0, r3
 8000dee:	f007 f933 	bl	8008058 <osSemaphoreAcquire>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d152      	bne.n	8000e9e <state_start_enter+0x102>
		{
			/* Bind and configure initial global states */

			/* Skip RTD Sequencing Requiring Brake Pressure */
			CC_GlobalState->RTD_Debug = true;
 8000df8:	4b47      	ldr	r3, [pc, #284]	; (8000f18 <state_start_enter+0x17c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	761a      	strb	r2, [r3, #24]

			/* Ignore ADC Errors */
			CC_GlobalState->ADC_Debug = false;
 8000e00:	4b45      	ldr	r3, [pc, #276]	; (8000f18 <state_start_enter+0x17c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2200      	movs	r2, #0
 8000e06:	765a      	strb	r2, [r3, #25]

			/* Boards w/ Heartbeats */
			CC_GlobalState->PDM_Debug = false;
 8000e08:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <state_start_enter+0x17c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->AMS_Debug = false;
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <state_start_enter+0x17c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->SHDN_1_Debug = false;
 8000e18:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <state_start_enter+0x17c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	779a      	strb	r2, [r3, #30]
			CC_GlobalState->SHDN_2_Debug = true;
 8000e20:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <state_start_enter+0x17c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2201      	movs	r2, #1
 8000e26:	77da      	strb	r2, [r3, #31]
			CC_GlobalState->SHDN_3_Debug = true;
 8000e28:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <state_start_enter+0x17c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2020 	strb.w	r2, [r3, #32]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000e32:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <state_start_enter+0x17c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2201      	movs	r2, #1
 8000e38:	775a      	strb	r2, [r3, #29]

			/* Inverters */
			CC_GlobalState->Inverter_Debug = true;
 8000e3a:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <state_start_enter+0x17c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	771a      	strb	r2, [r3, #28]

			/* Bound state for system operations */
			CC_GlobalState->tractiveActive = false;
 8000e42:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <state_start_enter+0x17c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534
			CC_GlobalState->pdmTrackState = LV_STARTUP | CC_MASK;
 8000e4c:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <state_start_enter+0x17c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a32      	ldr	r2, [pc, #200]	; (8000f1c <state_start_enter+0x180>)
 8000e52:	649a      	str	r2, [r3, #72]	; 0x48

			/* Allocate CAN Queues */
			CC_GlobalState->CAN1Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <state_start_enter+0x17c>)
 8000e56:	681c      	ldr	r4, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2128      	movs	r1, #40	; 0x28
 8000e5c:	200a      	movs	r0, #10
 8000e5e:	f007 f9b9 	bl	80081d4 <osMessageQueueNew>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
			CC_GlobalState->CAN2Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <state_start_enter+0x17c>)
 8000e6a:	681c      	ldr	r4, [r3, #0]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2128      	movs	r1, #40	; 0x28
 8000e70:	200a      	movs	r0, #10
 8000e72:	f007 f9af 	bl	80081d4 <osMessageQueueNew>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f8c4 353c 	str.w	r3, [r4, #1340]	; 0x53c
			CC_GlobalState->CAN3Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <state_start_enter+0x17c>)
 8000e7e:	681c      	ldr	r4, [r3, #0]
 8000e80:	2200      	movs	r2, #0
 8000e82:	2128      	movs	r1, #40	; 0x28
 8000e84:	200a      	movs	r0, #10
 8000e86:	f007 f9a5 	bl	80081d4 <osMessageQueueNew>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
			osSemaphoreRelease(CC_GlobalState->sem);
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <state_start_enter+0x17c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f007 f943 	bl	8008124 <osSemaphoreRelease>
		}

		/* Ensure CANQueue exists */
		if(CC_GlobalState->CAN1Queue == NULL || CC_GlobalState->CAN2Queue == NULL || CC_GlobalState->CAN3Queue == NULL)
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <state_start_enter+0x17c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f8d3 3538 	ldr.w	r3, [r3, #1336]	; 0x538
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00b      	beq.n	8000ec2 <state_start_enter+0x126>
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <state_start_enter+0x17c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <state_start_enter+0x126>
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <state_start_enter+0x17c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <state_start_enter+0x12a>
		{
			Error_Handler();
 8000ec2:	f002 fd7b 	bl	80039bc <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	4814      	ldr	r0, [pc, #80]	; (8000f20 <state_start_enter+0x184>)
 8000ece:	f004 feaf 	bl	8005c30 <HAL_GPIO_WritePin>

	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t initiateStartup = Compose_PDM_InitiateStartup();
 8000ed2:	f7ff fe72 	bl	8000bba <Compose_PDM_InitiateStartup>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	615a      	str	r2, [r3, #20]
	{
			.ExtId = initiateStartup.id,
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000ef8:	230f      	movs	r3, #15
 8000efa:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&CAN_2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <state_start_enter+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3308      	adds	r3, #8
 8000f02:	f107 0208 	add.w	r2, r7, #8
 8000f06:	f107 010c 	add.w	r1, r7, #12
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <state_start_enter+0x188>)
 8000f0c:	f003 fe60 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	return;
 8000f10:	bf00      	nop

	/* Debug Tracing */
	//CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
	return;
}
 8000f12:	372c      	adds	r7, #44	; 0x2c
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	200049e0 	.word	0x200049e0
 8000f1c:	b99d1f50 	.word	0xb99d1f50
 8000f20:	40021000 	.word	0x40021000
 8000f24:	20004ba4 	.word	0x20004ba4

08000f28 <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b099      	sub	sp, #100	; 0x64
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000f30:	4b55      	ldr	r3, [pc, #340]	; (8001088 <state_start_iterate+0x160>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	7e9b      	ldrb	r3, [r3, #26]
 8000f36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t getPowerChannels = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	653b      	str	r3, [r7, #80]	; 0x50

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000f3e:	e028      	b.n	8000f92 <state_start_iterate+0x6a>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8000f40:	4b51      	ldr	r3, [pc, #324]	; (8001088 <state_start_iterate+0x160>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f8d3 053c 	ldr.w	r0, [r3, #1340]	; 0x53c
 8000f48:	f107 0108 	add.w	r1, r7, #8
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f007 fa3a 	bl	80083c8 <osMessageQueueGet>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d11b      	bne.n	8000f92 <state_start_iterate+0x6a>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(CAN_PRIORITY_NORMAL, CAN_SRC_ID_PDM, 0x0,
 8000f5a:	68fc      	ldr	r4, [r7, #12]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	2300      	movs	r3, #0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2303      	movs	r3, #3
 8000f66:	2200      	movs	r2, #0
 8000f68:	2114      	movs	r1, #20
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f7ff fe90 	bl	8000c90 <Compose_CANId>
 8000f70:	4603      	mov	r3, r0
 8000f72:	429c      	cmp	r4, r3
 8000f74:	d10d      	bne.n	8000f92 <state_start_iterate+0x6a>
					CAN_TYPE_TRANSMIT, 0x00, 0x0))
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	653b      	str	r3, [r7, #80]	; 0x50
				Parse_PDM_StartupOk(msg.data, &getPowerChannels);
 8000f7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	331c      	adds	r3, #28
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fe2b 	bl	8000be2 <Parse_PDM_StartupOk>

				/* Initialise Boot */
				boot = true;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <state_start_iterate+0x160>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 fa86 	bl	80084ac <osMessageQueueGetCount>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1cc      	bne.n	8000f40 <state_start_iterate+0x18>
			}
		}
	}

	if(boot)
 8000fa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d068      	beq.n	8001080 <state_start_iterate+0x158>
	{
		/* Set Power Channel Values to Enable on Start */
		PDM_SetChannelStates_t pdmStartup = Compose_PDM_SetChannelStates(CC_GlobalState->pdmTrackState & (~HV_STARTUP));
 8000fae:	4b36      	ldr	r3, [pc, #216]	; (8001088 <state_start_iterate+0x160>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb4:	f023 0208 	bic.w	r2, r3, #8
 8000fb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fe34 	bl	8000c2c <Compose_PDM_SetChannelStates>
		CAN_TxHeaderTypeDef header =
 8000fc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
		CAN_TxHeaderTypeDef header =
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8000fda:	2304      	movs	r3, #4
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fde:	2304      	movs	r3, #4
 8000fe0:	643b      	str	r3, [r7, #64]	; 0x40
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <state_start_iterate+0x160>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f103 0008 	add.w	r0, r3, #8
 8000fea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fee:	1d1a      	adds	r2, r3, #4
 8000ff0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4825      	ldr	r0, [pc, #148]	; (800108c <state_start_iterate+0x164>)
 8000ff8:	f003 fdea 	bl	8004bd0 <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <state_start_iterate+0x160>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001004:	2120      	movs	r1, #32
 8001006:	4618      	mov	r0, r3
 8001008:	f007 f826 	bl	8008058 <osSemaphoreAcquire>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d130      	bne.n	8001074 <state_start_iterate+0x14c>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <state_start_iterate+0x160>)
 8001014:	681c      	ldr	r4, [r3, #0]
 8001016:	f002 febf 	bl	8003d98 <HAL_GetTick>
 800101a:	4603      	mov	r3, r0
 800101c:	6263      	str	r3, [r4, #36]	; 0x24
			CC_GlobalState->amsTicks = HAL_GetTick();
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <state_start_iterate+0x160>)
 8001020:	681c      	ldr	r4, [r3, #0]
 8001022:	f002 feb9 	bl	8003d98 <HAL_GetTick>
 8001026:	4603      	mov	r3, r0
 8001028:	6323      	str	r3, [r4, #48]	; 0x30
			CC_GlobalState->shutdownOneTicks = HAL_GetTick();
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <state_start_iterate+0x160>)
 800102c:	681c      	ldr	r4, [r3, #0]
 800102e:	f002 feb3 	bl	8003d98 <HAL_GetTick>
 8001032:	4603      	mov	r3, r0
 8001034:	63a3      	str	r3, [r4, #56]	; 0x38
			CC_GlobalState->shutdownTwoTicks = HAL_GetTick();
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <state_start_iterate+0x160>)
 8001038:	681c      	ldr	r4, [r3, #0]
 800103a:	f002 fead 	bl	8003d98 <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	63e3      	str	r3, [r4, #60]	; 0x3c
			CC_GlobalState->shutdownThreeTicks = HAL_GetTick();
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <state_start_iterate+0x160>)
 8001044:	681c      	ldr	r4, [r3, #0]
 8001046:	f002 fea7 	bl	8003d98 <HAL_GetTick>
 800104a:	4603      	mov	r3, r0
 800104c:	6423      	str	r3, [r4, #64]	; 0x40
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <state_start_iterate+0x160>)
 8001050:	681c      	ldr	r4, [r3, #0]
 8001052:	f002 fea1 	bl	8003d98 <HAL_GetTick>
 8001056:	4603      	mov	r3, r0
 8001058:	6463      	str	r3, [r4, #68]	; 0x44
			CC_GlobalState->inverterTicks = HAL_GetTick();
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <state_start_iterate+0x160>)
 800105c:	681c      	ldr	r4, [r3, #0]
 800105e:	f002 fe9b 	bl	8003d98 <HAL_GetTick>
 8001062:	4603      	mov	r3, r0
 8001064:	6363      	str	r3, [r4, #52]	; 0x34
			osSemaphoreRelease(CC_GlobalState->sem);
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <state_start_iterate+0x160>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800106e:	4618      	mov	r0, r3
 8001070:	f007 f858 	bl	8008124 <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <state_start_iterate+0x168>)
 8001076:	4907      	ldr	r1, [pc, #28]	; (8001094 <state_start_iterate+0x16c>)
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fceb 	bl	8000a54 <fsm_changeState>
	}
	return;
 800107e:	bf00      	nop
 8001080:	bf00      	nop
}
 8001082:	375c      	adds	r7, #92	; 0x5c
 8001084:	46bd      	mov	sp, r7
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	200049e0 	.word	0x200049e0
 800108c:	20004ba4 	.word	0x20004ba4
 8001090:	0800bfdc 	.word	0x0800bfdc
 8001094:	20000010 	.word	0x20000010

08001098 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	/* All CAN Wake or
	 * Confirmation to Idle
	 * Messages go here over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 80010a0:	bf00      	nop
}
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	0000      	movs	r0, r0
	...

080010b0 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	uint32_t brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 80010b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010bc:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <state_idle_enter+0x80>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80010c6:	2120      	movs	r1, #32
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 ffc5 	bl	8008058 <osSemaphoreAcquire>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d121      	bne.n	8001118 <state_idle_enter+0x68>
	{
		/* Assign Threshold to 20% of Brake Pressure */
		CC_GlobalState->brakePressureThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010de:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001120 <state_idle_enter+0x70>
 80010e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010e6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001128 <state_idle_enter+0x78>
 80010ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <state_idle_enter+0x80>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010f6:	ee17 2a90 	vmov	r2, s15
 80010fa:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

		/* Init Chassis Controller On */
		CC_GlobalState->ccInit = true;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <state_idle_enter+0x80>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		osSemaphoreRelease(CC_GlobalState->sem);
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <state_idle_enter+0x80>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001110:	4618      	mov	r0, r3
 8001112:	f007 f807 	bl	8008124 <osSemaphoreRelease>
	}
	return;
 8001116:	bf00      	nop
 8001118:	bf00      	nop
}
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	9999999a 	.word	0x9999999a
 8001124:	3fc99999 	.word	0x3fc99999
 8001128:	00000000 	.word	0x00000000
 800112c:	40790000 	.word	0x40790000
 8001130:	200049e0 	.word	0x200049e0
 8001134:	00000000 	.word	0x00000000

08001138 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b09b      	sub	sp, #108	; 0x6c
 800113c:	af08      	add	r7, sp, #32
 800113e:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001140:	4ba3      	ldr	r3, [pc, #652]	; (80013d0 <state_idle_iterate+0x298>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001148:	2120      	movs	r1, #32
 800114a:	4618      	mov	r0, r3
 800114c:	f006 ff84 	bl	8008058 <osSemaphoreAcquire>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 816d 	bne.w	8001432 <state_idle_iterate+0x2fa>
	{
		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8001158:	f002 fe1e 	bl	8003d98 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	4b9c      	ldr	r3, [pc, #624]	; (80013d0 <state_idle_iterate+0x298>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d929      	bls.n	80011be <state_idle_iterate+0x86>
 800116a:	4b99      	ldr	r3, [pc, #612]	; (80013d0 <state_idle_iterate+0x298>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	7edb      	ldrb	r3, [r3, #27]
 8001170:	f083 0301 	eor.w	r3, r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d021      	beq.n	80011be <state_idle_iterate+0x86>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800117a:	4b95      	ldr	r3, [pc, #596]	; (80013d0 <state_idle_iterate+0x298>)
 800117c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 800117e:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001180:	4b93      	ldr	r3, [pc, #588]	; (80013d0 <state_idle_iterate+0x298>)
 8001182:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8001184:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 8001188:	4b91      	ldr	r3, [pc, #580]	; (80013d0 <state_idle_iterate+0x298>)
 800118a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 800118c:	3310      	adds	r3, #16
 800118e:	4a90      	ldr	r2, [pc, #576]	; (80013d0 <state_idle_iterate+0x298>)
 8001190:	6814      	ldr	r4, [r2, #0]
 8001192:	2265      	movs	r2, #101	; 0x65
 8001194:	9206      	str	r2, [sp, #24]
 8001196:	2264      	movs	r2, #100	; 0x64
 8001198:	9205      	str	r2, [sp, #20]
 800119a:	4a8e      	ldr	r2, [pc, #568]	; (80013d4 <state_idle_iterate+0x29c>)
 800119c:	9204      	str	r2, [sp, #16]
 800119e:	4a8e      	ldr	r2, [pc, #568]	; (80013d8 <state_idle_iterate+0x2a0>)
 80011a0:	9203      	str	r2, [sp, #12]
 80011a2:	4a8e      	ldr	r2, [pc, #568]	; (80013dc <state_idle_iterate+0x2a4>)
 80011a4:	9202      	str	r2, [sp, #8]
 80011a6:	4a8e      	ldr	r2, [pc, #568]	; (80013e0 <state_idle_iterate+0x2a8>)
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	460b      	mov	r3, r1
 80011ae:	4602      	mov	r2, r0
 80011b0:	2101      	movs	r1, #1
 80011b2:	488c      	ldr	r0, [pc, #560]	; (80013e4 <state_idle_iterate+0x2ac>)
 80011b4:	f7ff fb64 	bl	8000880 <Send_CC_FatalShutdown>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		/* Shutdown 1 Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownOneTicks) > 100 && !CC_GlobalState->SHDN_1_Debug)
 80011be:	f002 fdeb 	bl	8003d98 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <state_idle_iterate+0x298>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b64      	cmp	r3, #100	; 0x64
 80011ce:	d929      	bls.n	8001224 <state_idle_iterate+0xec>
 80011d0:	4b7f      	ldr	r3, [pc, #508]	; (80013d0 <state_idle_iterate+0x298>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	7f9b      	ldrb	r3, [r3, #30]
 80011d6:	f083 0301 	eor.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d021      	beq.n	8001224 <state_idle_iterate+0xec>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN1\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80011e0:	4b7b      	ldr	r3, [pc, #492]	; (80013d0 <state_idle_iterate+0x298>)
 80011e2:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN1\r\n", true,
 80011e4:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80011e6:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <state_idle_iterate+0x298>)
 80011e8:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN1\r\n", true,
 80011ea:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 80011ee:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <state_idle_iterate+0x298>)
 80011f0:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN1\r\n", true,
 80011f2:	3310      	adds	r3, #16
 80011f4:	4a76      	ldr	r2, [pc, #472]	; (80013d0 <state_idle_iterate+0x298>)
 80011f6:	6814      	ldr	r4, [r2, #0]
 80011f8:	2265      	movs	r2, #101	; 0x65
 80011fa:	9206      	str	r2, [sp, #24]
 80011fc:	2264      	movs	r2, #100	; 0x64
 80011fe:	9205      	str	r2, [sp, #20]
 8001200:	4a74      	ldr	r2, [pc, #464]	; (80013d4 <state_idle_iterate+0x29c>)
 8001202:	9204      	str	r2, [sp, #16]
 8001204:	4a74      	ldr	r2, [pc, #464]	; (80013d8 <state_idle_iterate+0x2a0>)
 8001206:	9203      	str	r2, [sp, #12]
 8001208:	4a74      	ldr	r2, [pc, #464]	; (80013dc <state_idle_iterate+0x2a4>)
 800120a:	9202      	str	r2, [sp, #8]
 800120c:	4a74      	ldr	r2, [pc, #464]	; (80013e0 <state_idle_iterate+0x2a8>)
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	460b      	mov	r3, r1
 8001214:	4602      	mov	r2, r0
 8001216:	2101      	movs	r1, #1
 8001218:	4873      	ldr	r0, [pc, #460]	; (80013e8 <state_idle_iterate+0x2b0>)
 800121a:	f7ff fb31 	bl	8000880 <Send_CC_FatalShutdown>
 800121e:	4603      	mov	r3, r0
 8001220:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		/* Shutdown 2 Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTwoTicks) > 100 && !CC_GlobalState->SHDN_2_Debug)
 8001224:	f002 fdb8 	bl	8003d98 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	4b69      	ldr	r3, [pc, #420]	; (80013d0 <state_idle_iterate+0x298>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d929      	bls.n	800128a <state_idle_iterate+0x152>
 8001236:	4b66      	ldr	r3, [pc, #408]	; (80013d0 <state_idle_iterate+0x298>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	7fdb      	ldrb	r3, [r3, #31]
 800123c:	f083 0301 	eor.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d021      	beq.n	800128a <state_idle_iterate+0x152>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN2\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001246:	4b62      	ldr	r3, [pc, #392]	; (80013d0 <state_idle_iterate+0x298>)
 8001248:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN2\r\n", true,
 800124a:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800124c:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <state_idle_iterate+0x298>)
 800124e:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN2\r\n", true,
 8001250:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <state_idle_iterate+0x298>)
 8001256:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN2\r\n", true,
 8001258:	3310      	adds	r3, #16
 800125a:	4a5d      	ldr	r2, [pc, #372]	; (80013d0 <state_idle_iterate+0x298>)
 800125c:	6814      	ldr	r4, [r2, #0]
 800125e:	2265      	movs	r2, #101	; 0x65
 8001260:	9206      	str	r2, [sp, #24]
 8001262:	2264      	movs	r2, #100	; 0x64
 8001264:	9205      	str	r2, [sp, #20]
 8001266:	4a5b      	ldr	r2, [pc, #364]	; (80013d4 <state_idle_iterate+0x29c>)
 8001268:	9204      	str	r2, [sp, #16]
 800126a:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <state_idle_iterate+0x2a0>)
 800126c:	9203      	str	r2, [sp, #12]
 800126e:	4a5b      	ldr	r2, [pc, #364]	; (80013dc <state_idle_iterate+0x2a4>)
 8001270:	9202      	str	r2, [sp, #8]
 8001272:	4a5b      	ldr	r2, [pc, #364]	; (80013e0 <state_idle_iterate+0x2a8>)
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	460b      	mov	r3, r1
 800127a:	4602      	mov	r2, r0
 800127c:	2101      	movs	r1, #1
 800127e:	485b      	ldr	r0, [pc, #364]	; (80013ec <state_idle_iterate+0x2b4>)
 8001280:	f7ff fafe 	bl	8000880 <Send_CC_FatalShutdown>
 8001284:	4603      	mov	r3, r0
 8001286:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		/* Shutdown 3 Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownThreeTicks) > 100 && !CC_GlobalState->SHDN_3_Debug)
 800128a:	f002 fd85 	bl	8003d98 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <state_idle_iterate+0x298>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b64      	cmp	r3, #100	; 0x64
 800129a:	d92a      	bls.n	80012f2 <state_idle_iterate+0x1ba>
 800129c:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <state_idle_iterate+0x298>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a4:	f083 0301 	eor.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d021      	beq.n	80012f2 <state_idle_iterate+0x1ba>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN3\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80012ae:	4b48      	ldr	r3, [pc, #288]	; (80013d0 <state_idle_iterate+0x298>)
 80012b0:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN3\r\n", true,
 80012b2:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80012b4:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <state_idle_iterate+0x298>)
 80012b6:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN3\r\n", true,
 80012b8:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 80012bc:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <state_idle_iterate+0x298>)
 80012be:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN3\r\n", true,
 80012c0:	3310      	adds	r3, #16
 80012c2:	4a43      	ldr	r2, [pc, #268]	; (80013d0 <state_idle_iterate+0x298>)
 80012c4:	6814      	ldr	r4, [r2, #0]
 80012c6:	2265      	movs	r2, #101	; 0x65
 80012c8:	9206      	str	r2, [sp, #24]
 80012ca:	2264      	movs	r2, #100	; 0x64
 80012cc:	9205      	str	r2, [sp, #20]
 80012ce:	4a41      	ldr	r2, [pc, #260]	; (80013d4 <state_idle_iterate+0x29c>)
 80012d0:	9204      	str	r2, [sp, #16]
 80012d2:	4a41      	ldr	r2, [pc, #260]	; (80013d8 <state_idle_iterate+0x2a0>)
 80012d4:	9203      	str	r2, [sp, #12]
 80012d6:	4a41      	ldr	r2, [pc, #260]	; (80013dc <state_idle_iterate+0x2a4>)
 80012d8:	9202      	str	r2, [sp, #8]
 80012da:	4a41      	ldr	r2, [pc, #260]	; (80013e0 <state_idle_iterate+0x2a8>)
 80012dc:	9201      	str	r2, [sp, #4]
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	460b      	mov	r3, r1
 80012e2:	4602      	mov	r2, r0
 80012e4:	2101      	movs	r1, #1
 80012e6:	4842      	ldr	r0, [pc, #264]	; (80013f0 <state_idle_iterate+0x2b8>)
 80012e8:	f7ff faca 	bl	8000880 <Send_CC_FatalShutdown>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 80012f2:	f002 fd51 	bl	8003d98 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <state_idle_iterate+0x298>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b64      	cmp	r3, #100	; 0x64
 8001302:	d929      	bls.n	8001358 <state_idle_iterate+0x220>
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <state_idle_iterate+0x298>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	7f5b      	ldrb	r3, [r3, #29]
 800130a:	f083 0301 	eor.w	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d021      	beq.n	8001358 <state_idle_iterate+0x220>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <state_idle_iterate+0x298>)
 8001316:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001318:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <state_idle_iterate+0x298>)
 800131c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 800131e:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <state_idle_iterate+0x298>)
 8001324:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001326:	3310      	adds	r3, #16
 8001328:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <state_idle_iterate+0x298>)
 800132a:	6814      	ldr	r4, [r2, #0]
 800132c:	2265      	movs	r2, #101	; 0x65
 800132e:	9206      	str	r2, [sp, #24]
 8001330:	2264      	movs	r2, #100	; 0x64
 8001332:	9205      	str	r2, [sp, #20]
 8001334:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <state_idle_iterate+0x29c>)
 8001336:	9204      	str	r2, [sp, #16]
 8001338:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <state_idle_iterate+0x2a0>)
 800133a:	9203      	str	r2, [sp, #12]
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <state_idle_iterate+0x2a4>)
 800133e:	9202      	str	r2, [sp, #8]
 8001340:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <state_idle_iterate+0x2a8>)
 8001342:	9201      	str	r2, [sp, #4]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	460b      	mov	r3, r1
 8001348:	4602      	mov	r2, r0
 800134a:	2101      	movs	r1, #1
 800134c:	4829      	ldr	r0, [pc, #164]	; (80013f4 <state_idle_iterate+0x2bc>)
 800134e:	f7ff fa97 	bl	8000880 <Send_CC_FatalShutdown>
 8001352:	4603      	mov	r3, r0
 8001354:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 8001358:	f002 fd1e 	bl	8003d98 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <state_idle_iterate+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d929      	bls.n	80013be <state_idle_iterate+0x286>
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <state_idle_iterate+0x298>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	7f1b      	ldrb	r3, [r3, #28]
 8001370:	f083 0301 	eor.w	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d021      	beq.n	80013be <state_idle_iterate+0x286>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <state_idle_iterate+0x298>)
 800137c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 800137e:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <state_idle_iterate+0x298>)
 8001382:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001384:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <state_idle_iterate+0x298>)
 800138a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 800138c:	3310      	adds	r3, #16
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <state_idle_iterate+0x298>)
 8001390:	6814      	ldr	r4, [r2, #0]
 8001392:	2265      	movs	r2, #101	; 0x65
 8001394:	9206      	str	r2, [sp, #24]
 8001396:	2264      	movs	r2, #100	; 0x64
 8001398:	9205      	str	r2, [sp, #20]
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <state_idle_iterate+0x29c>)
 800139c:	9204      	str	r2, [sp, #16]
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <state_idle_iterate+0x2a0>)
 80013a0:	9203      	str	r2, [sp, #12]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <state_idle_iterate+0x2a4>)
 80013a4:	9202      	str	r2, [sp, #8]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <state_idle_iterate+0x2a8>)
 80013a8:	9201      	str	r2, [sp, #4]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	460b      	mov	r3, r1
 80013ae:	4602      	mov	r2, r0
 80013b0:	2101      	movs	r1, #1
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <state_idle_iterate+0x2c0>)
 80013b4:	f7ff fa64 	bl	8000880 <Send_CC_FatalShutdown>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <state_idle_iterate+0x298>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 feac 	bl	8008124 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets on CAN1 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 80013cc:	e031      	b.n	8001432 <state_idle_iterate+0x2fa>
 80013ce:	bf00      	nop
 80013d0:	200049e0 	.word	0x200049e0
 80013d4:	20004c38 	.word	0x20004c38
 80013d8:	20004b7c 	.word	0x20004b7c
 80013dc:	20004ba4 	.word	0x20004ba4
 80013e0:	20004bcc 	.word	0x20004bcc
 80013e4:	0800bff8 	.word	0x0800bff8
 80013e8:	0800c010 	.word	0x0800c010
 80013ec:	0800c028 	.word	0x0800c028
 80013f0:	0800c040 	.word	0x0800c040
 80013f4:	0800c058 	.word	0x0800c058
 80013f8:	0800c074 	.word	0x0800c074
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN1Queue, &msg, 0U, 0U) == osOK)
 80013fc:	4b9a      	ldr	r3, [pc, #616]	; (8001668 <state_idle_iterate+0x530>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8d3 0538 	ldr.w	r0, [r3, #1336]	; 0x538
 8001404:	f107 0108 	add.w	r1, r7, #8
 8001408:	2300      	movs	r3, #0
 800140a:	2200      	movs	r2, #0
 800140c:	f006 ffdc 	bl	80083c8 <osMessageQueueGet>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <state_idle_iterate+0x2fa>
		{
			if(msg.header.IDE == CAN_ID_STD) {
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10a      	bne.n	8001432 <state_idle_iterate+0x2fa>
				/* Inverter Heartbeat */
				if(msg.header.StdId == 0x700+INVERTER_LEFT_NODE_ID)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f240 7264 	movw	r2, #1892	; 0x764
 8001422:	4293      	cmp	r3, r2
 8001424:	d105      	bne.n	8001432 <state_idle_iterate+0x2fa>
				{
					CC_GlobalState->inverterTicks = HAL_GetTick();
 8001426:	4b90      	ldr	r3, [pc, #576]	; (8001668 <state_idle_iterate+0x530>)
 8001428:	681c      	ldr	r4, [r3, #0]
 800142a:	f002 fcb5 	bl	8003d98 <HAL_GetTick>
 800142e:	4603      	mov	r3, r0
 8001430:	6363      	str	r3, [r4, #52]	; 0x34
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 8001432:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <state_idle_iterate+0x530>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f8d3 3538 	ldr.w	r3, [r3, #1336]	; 0x538
 800143a:	4618      	mov	r0, r3
 800143c:	f007 f836 	bl	80084ac <osMessageQueueGetCount>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1da      	bne.n	80013fc <state_idle_iterate+0x2c4>
			}
		}
	}

	/* Check for Queued CAN Packets on CAN2 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001446:	e141      	b.n	80016cc <state_idle_iterate+0x594>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8001448:	4b87      	ldr	r3, [pc, #540]	; (8001668 <state_idle_iterate+0x530>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8d3 053c 	ldr.w	r0, [r3, #1340]	; 0x53c
 8001450:	f107 0108 	add.w	r1, r7, #8
 8001454:	2300      	movs	r3, #0
 8001456:	2200      	movs	r2, #0
 8001458:	f006 ffb6 	bl	80083c8 <osMessageQueueGet>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 8134 	bne.w	80016cc <state_idle_iterate+0x594>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.IDE == CAN_ID_EXT) {
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b04      	cmp	r3, #4
 8001468:	f040 8130 	bne.w	80016cc <state_idle_iterate+0x594>
				if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800146c:	68fc      	ldr	r4, [r7, #12]
 800146e:	2300      	movs	r3, #0
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	2301      	movs	r3, #1
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	2200      	movs	r2, #0
 800147a:	2110      	movs	r1, #16
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff fc07 	bl	8000c90 <Compose_CANId>
 8001482:	4603      	mov	r3, r0
 8001484:	429c      	cmp	r4, r3
 8001486:	d13e      	bne.n	8001506 <state_idle_iterate+0x3ce>
				{
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001488:	4b77      	ldr	r3, [pc, #476]	; (8001668 <state_idle_iterate+0x530>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001490:	2120      	movs	r1, #32
 8001492:	4618      	mov	r0, r3
 8001494:	f006 fde0 	bl	8008058 <osSemaphoreAcquire>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 8116 	bne.w	80016cc <state_idle_iterate+0x594>
					{
						bool initialised = false; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 80014a6:	f107 043d 	add.w	r4, r7, #61	; 0x3d
 80014aa:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 80014ae:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	f103 001c 	add.w	r0, r3, #28
 80014ba:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80014be:	9304      	str	r3, [sp, #16]
 80014c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014c4:	9303      	str	r3, [sp, #12]
 80014c6:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	4623      	mov	r3, r4
 80014da:	f7ff f889 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
						CC_GlobalState->amsTicks = HAL_GetTick();
 80014de:	4b62      	ldr	r3, [pc, #392]	; (8001668 <state_idle_iterate+0x530>)
 80014e0:	681c      	ldr	r4, [r3, #0]
 80014e2:	f002 fc59 	bl	8003d98 <HAL_GetTick>
 80014e6:	4603      	mov	r3, r0
 80014e8:	6323      	str	r3, [r4, #48]	; 0x30
						CC_GlobalState->amsInit = initialised;
 80014ea:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <state_idle_iterate+0x530>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80014f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
						osSemaphoreRelease(CC_GlobalState->sem);
 80014f6:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <state_idle_iterate+0x530>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 fe10 	bl	8008124 <osSemaphoreRelease>
 8001504:	e0e2      	b.n	80016cc <state_idle_iterate+0x594>
					}
				}
				/* Shutdown 1 Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 8001506:	68fc      	ldr	r4, [r7, #12]
 8001508:	2300      	movs	r3, #0
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	2301      	movs	r3, #1
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	2200      	movs	r2, #0
 8001514:	2106      	movs	r1, #6
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff fbba 	bl	8000c90 <Compose_CANId>
 800151c:	4603      	mov	r3, r0
 800151e:	429c      	cmp	r4, r3
 8001520:	d122      	bne.n	8001568 <state_idle_iterate+0x430>
				{
					//CC_LogInfo("SHDN1\r\n", strlen("SHDN1\r\n"));
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <state_idle_iterate+0x530>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800152a:	2120      	movs	r1, #32
 800152c:	4618      	mov	r0, r3
 800152e:	f006 fd93 	bl	8008058 <osSemaphoreAcquire>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	f040 80c9 	bne.w	80016cc <state_idle_iterate+0x594>
					{
						uint8_t segmentState;
						Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	331c      	adds	r3, #28
 8001540:	f107 0235 	add.w	r2, r7, #53	; 0x35
 8001544:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001548:	f7ff fbd8 	bl	8000cfc <Parse_SHDN_HeartbeatResponse>
						CC_GlobalState->shutdownOneTicks = HAL_GetTick();
 800154c:	4b46      	ldr	r3, [pc, #280]	; (8001668 <state_idle_iterate+0x530>)
 800154e:	681c      	ldr	r4, [r3, #0]
 8001550:	f002 fc22 	bl	8003d98 <HAL_GetTick>
 8001554:	4603      	mov	r3, r0
 8001556:	63a3      	str	r3, [r4, #56]	; 0x38
						osSemaphoreRelease(CC_GlobalState->sem);
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <state_idle_iterate+0x530>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001560:	4618      	mov	r0, r3
 8001562:	f006 fddf 	bl	8008124 <osSemaphoreRelease>
 8001566:	e0b1      	b.n	80016cc <state_idle_iterate+0x594>
					}
				}
				/* Shutdown 2 Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x02, 0x0))
 8001568:	68fc      	ldr	r4, [r7, #12]
 800156a:	2300      	movs	r3, #0
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	2302      	movs	r3, #2
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2301      	movs	r3, #1
 8001574:	2200      	movs	r2, #0
 8001576:	2106      	movs	r1, #6
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff fb89 	bl	8000c90 <Compose_CANId>
 800157e:	4603      	mov	r3, r0
 8001580:	429c      	cmp	r4, r3
 8001582:	d122      	bne.n	80015ca <state_idle_iterate+0x492>
				{
					//CC_LogInfo("SHDN2\r\n", strlen("SHDN2\r\n"));
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001584:	4b38      	ldr	r3, [pc, #224]	; (8001668 <state_idle_iterate+0x530>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800158c:	2120      	movs	r1, #32
 800158e:	4618      	mov	r0, r3
 8001590:	f006 fd62 	bl	8008058 <osSemaphoreAcquire>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 8098 	bne.w	80016cc <state_idle_iterate+0x594>
					{
						uint8_t segmentState;
						Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	331c      	adds	r3, #28
 80015a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80015a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015aa:	f7ff fba7 	bl	8000cfc <Parse_SHDN_HeartbeatResponse>
						CC_GlobalState->shutdownTwoTicks = HAL_GetTick();
 80015ae:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <state_idle_iterate+0x530>)
 80015b0:	681c      	ldr	r4, [r3, #0]
 80015b2:	f002 fbf1 	bl	8003d98 <HAL_GetTick>
 80015b6:	4603      	mov	r3, r0
 80015b8:	63e3      	str	r3, [r4, #60]	; 0x3c
						osSemaphoreRelease(CC_GlobalState->sem);
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <state_idle_iterate+0x530>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fdae 	bl	8008124 <osSemaphoreRelease>
 80015c8:	e080      	b.n	80016cc <state_idle_iterate+0x594>
					}
				}
				/* Shutdown 2 Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x03, 0x0))
 80015ca:	68fc      	ldr	r4, [r7, #12]
 80015cc:	2300      	movs	r3, #0
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	2303      	movs	r3, #3
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	2200      	movs	r2, #0
 80015d8:	2106      	movs	r1, #6
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff fb58 	bl	8000c90 <Compose_CANId>
 80015e0:	4603      	mov	r3, r0
 80015e2:	429c      	cmp	r4, r3
 80015e4:	d121      	bne.n	800162a <state_idle_iterate+0x4f2>
				{
					//CC_LogInfo("SHDN3\r\n", strlen("SHDN3\r\n"));
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <state_idle_iterate+0x530>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80015ee:	2120      	movs	r1, #32
 80015f0:	4618      	mov	r0, r3
 80015f2:	f006 fd31 	bl	8008058 <osSemaphoreAcquire>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d167      	bne.n	80016cc <state_idle_iterate+0x594>
					{
						uint8_t segmentState;
						Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	331c      	adds	r3, #28
 8001602:	f107 0233 	add.w	r2, r7, #51	; 0x33
 8001606:	e893 0003 	ldmia.w	r3, {r0, r1}
 800160a:	f7ff fb77 	bl	8000cfc <Parse_SHDN_HeartbeatResponse>
						CC_GlobalState->shutdownThreeTicks = HAL_GetTick();
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <state_idle_iterate+0x530>)
 8001610:	681c      	ldr	r4, [r3, #0]
 8001612:	f002 fbc1 	bl	8003d98 <HAL_GetTick>
 8001616:	4603      	mov	r3, r0
 8001618:	6423      	str	r3, [r4, #64]	; 0x40
						osSemaphoreRelease(CC_GlobalState->sem);
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <state_idle_iterate+0x530>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001622:	4618      	mov	r0, r3
 8001624:	f006 fd7e 	bl	8008124 <osSemaphoreRelease>
 8001628:	e050      	b.n	80016cc <state_idle_iterate+0x594>
					}
				}
				/* Shutdown IMD Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800162a:	68fc      	ldr	r4, [r7, #12]
 800162c:	2300      	movs	r3, #0
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	2301      	movs	r3, #1
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	2200      	movs	r2, #0
 8001638:	2110      	movs	r1, #16
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fb28 	bl	8000c90 <Compose_CANId>
 8001640:	4603      	mov	r3, r0
 8001642:	429c      	cmp	r4, r3
 8001644:	d112      	bne.n	800166c <state_idle_iterate+0x534>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	331c      	adds	r3, #28
 800164c:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8001650:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001654:	f7ff fb63 	bl	8000d1e <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <state_idle_iterate+0x530>)
 800165a:	681c      	ldr	r4, [r3, #0]
 800165c:	f002 fb9c 	bl	8003d98 <HAL_GetTick>
 8001660:	4603      	mov	r3, r0
 8001662:	6463      	str	r3, [r4, #68]	; 0x44
 8001664:	e032      	b.n	80016cc <state_idle_iterate+0x594>
 8001666:	bf00      	nop
 8001668:	200049e0 	.word	0x200049e0
				}
				/* Shutdown Triggered Fault */
				else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 800166c:	68fc      	ldr	r4, [r7, #12]
 800166e:	2300      	movs	r3, #0
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	2300      	movs	r3, #0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	2200      	movs	r2, #0
 800167a:	2106      	movs	r1, #6
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fb07 	bl	8000c90 <Compose_CANId>
 8001682:	4603      	mov	r3, r0
 8001684:	429c      	cmp	r4, r3
 8001686:	d121      	bne.n	80016cc <state_idle_iterate+0x594>
				{
					// TODO DEAL WITH INVERTERS HERE WITH SOFT INVERTER SHUTDOWN
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001688:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <state_idle_iterate+0x6b0>)
 800168a:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 800168c:	4618      	mov	r0, r3
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800168e:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <state_idle_iterate+0x6b0>)
 8001690:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001692:	f103 0108 	add.w	r1, r3, #8
							&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <state_idle_iterate+0x6b0>)
 8001698:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 800169a:	3310      	adds	r3, #16
 800169c:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <state_idle_iterate+0x6b0>)
 800169e:	6814      	ldr	r4, [r2, #0]
 80016a0:	2265      	movs	r2, #101	; 0x65
 80016a2:	9206      	str	r2, [sp, #24]
 80016a4:	2264      	movs	r2, #100	; 0x64
 80016a6:	9205      	str	r2, [sp, #20]
 80016a8:	4a50      	ldr	r2, [pc, #320]	; (80017ec <state_idle_iterate+0x6b4>)
 80016aa:	9204      	str	r2, [sp, #16]
 80016ac:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <state_idle_iterate+0x6b8>)
 80016ae:	9203      	str	r2, [sp, #12]
 80016b0:	4a50      	ldr	r2, [pc, #320]	; (80017f4 <state_idle_iterate+0x6bc>)
 80016b2:	9202      	str	r2, [sp, #8]
 80016b4:	4a50      	ldr	r2, [pc, #320]	; (80017f8 <state_idle_iterate+0x6c0>)
 80016b6:	9201      	str	r2, [sp, #4]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	460b      	mov	r3, r1
 80016bc:	4602      	mov	r2, r0
 80016be:	2101      	movs	r1, #1
 80016c0:	484e      	ldr	r0, [pc, #312]	; (80017fc <state_idle_iterate+0x6c4>)
 80016c2:	f7ff f8dd 	bl	8000880 <Send_CC_FatalShutdown>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 80016cc:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <state_idle_iterate+0x6b0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80016d4:	4618      	mov	r0, r3
 80016d6:	f006 fee9 	bl	80084ac <osMessageQueueGetCount>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f47f aeb3 	bne.w	8001448 <state_idle_iterate+0x310>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <state_idle_iterate+0x6b0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	7e1b      	ldrb	r3, [r3, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d016      	beq.n	800171a <state_idle_iterate+0x5e2>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 80016ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f0:	643b      	str	r3, [r7, #64]	; 0x40
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 80016f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016fc:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80017d8 <state_idle_iterate+0x6a0>
 8001700:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001704:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80017e0 <state_idle_iterate+0x6a8>
 8001708:	ee37 7b06 	vadd.f64	d7, d7, d6
 800170c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001710:	ee17 3a90 	vmov	r3, s15
 8001714:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001718:	e008      	b.n	800172c <state_idle_iterate+0x5f4>
	}
	else
	{
		HAL_ADC_Start(&hadc3);
 800171a:	4839      	ldr	r0, [pc, #228]	; (8001800 <state_idle_iterate+0x6c8>)
 800171c:	f002 fb8c 	bl	8003e38 <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc3);
 8001720:	4837      	ldr	r0, [pc, #220]	; (8001800 <state_idle_iterate+0x6c8>)
 8001722:	f002 fd37 	bl	8004194 <HAL_ADC_GetValue>
 8001726:	4603      	mov	r3, r0
 8001728:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	}
	if(raw > CC_GlobalState->brakePressureThreshold
 800172c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <state_idle_iterate+0x6b0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8001738:	429a      	cmp	r2, r3
 800173a:	d942      	bls.n	80017c2 <state_idle_iterate+0x68a>
			&& (CC_GlobalState->amsInit || CC_GlobalState->AMS_Debug)
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <state_idle_iterate+0x6b0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001744:	2b00      	cmp	r3, #0
 8001746:	d104      	bne.n	8001752 <state_idle_iterate+0x61a>
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <state_idle_iterate+0x6b0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	7edb      	ldrb	r3, [r3, #27]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d037      	beq.n	80017c2 <state_idle_iterate+0x68a>
			&& CC_GlobalState->ccInit)
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <state_idle_iterate+0x6b0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800175a:	2b00      	cmp	r3, #0
 800175c:	d031      	beq.n	80017c2 <state_idle_iterate+0x68a>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	4827      	ldr	r0, [pc, #156]	; (8001804 <state_idle_iterate+0x6cc>)
 8001766:	f004 fa63 	bl	8005c30 <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800176a:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <state_idle_iterate+0x6b0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001772:	2120      	movs	r1, #32
 8001774:	4618      	mov	r0, r3
 8001776:	f006 fc6f 	bl	8008058 <osSemaphoreAcquire>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d126      	bne.n	80017ce <state_idle_iterate+0x696>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 8001780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001784:	481f      	ldr	r0, [pc, #124]	; (8001804 <state_idle_iterate+0x6cc>)
 8001786:	f004 fa3b 	bl	8005c00 <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d010      	beq.n	80017b2 <state_idle_iterate+0x67a>
 8001790:	f002 fb02 	bl	8003d98 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <state_idle_iterate+0x6b0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3287 	movw	r2, #4999	; 0x1387
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d904      	bls.n	80017b2 <state_idle_iterate+0x67a>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <state_idle_iterate+0x6d0>)
 80017aa:	4918      	ldr	r1, [pc, #96]	; (800180c <state_idle_iterate+0x6d4>)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff f951 	bl	8000a54 <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <state_idle_iterate+0x6b0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80017ba:	4618      	mov	r0, r3
 80017bc:	f006 fcb2 	bl	8008124 <osSemaphoreRelease>
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80017c0:	e005      	b.n	80017ce <state_idle_iterate+0x696>
		}
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c8:	480e      	ldr	r0, [pc, #56]	; (8001804 <state_idle_iterate+0x6cc>)
 80017ca:	f004 fa31 	bl	8005c30 <HAL_GPIO_WritePin>
	}
}
 80017ce:	bf00      	nop
 80017d0:	374c      	adds	r7, #76	; 0x4c
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd90      	pop	{r4, r7, pc}
 80017d6:	bf00      	nop
 80017d8:	33333333 	.word	0x33333333
 80017dc:	3fd33333 	.word	0x3fd33333
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40790000 	.word	0x40790000
 80017e8:	200049e0 	.word	0x200049e0
 80017ec:	20004c38 	.word	0x20004c38
 80017f0:	20004b7c 	.word	0x20004b7c
 80017f4:	20004ba4 	.word	0x20004ba4
 80017f8:	20004bcc 	.word	0x20004bcc
 80017fc:	0800c090 	.word	0x0800c090
 8001800:	20004a74 	.word	0x20004a74
 8001804:	40021000 	.word	0x40021000
 8001808:	0800c0b0 	.word	0x0800c0b0
 800180c:	20000020 	.word	0x20000020

08001810 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b093      	sub	sp, #76	; 0x4c
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 8001818:	f7fe ff54 	bl	80006c4 <Compose_CC_ReadyToDrive>
 800181c:	4603      	mov	r3, r0
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
	CAN_TxHeaderTypeDef header =
 8001820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 8001832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	CAN_TxHeaderTypeDef header =
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
 8001836:	2304      	movs	r3, #4
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
 800183a:	2301      	movs	r3, #1
 800183c:	63fb      	str	r3, [r7, #60]	; 0x3c
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 800183e:	230f      	movs	r3, #15
 8001840:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <state_idle_exit+0x100>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800184c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001850:	4830      	ldr	r0, [pc, #192]	; (8001914 <state_idle_exit+0x104>)
 8001852:	f003 f9bd 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <state_idle_exit+0x100>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3308      	adds	r3, #8
 800185c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001860:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001864:	482c      	ldr	r0, [pc, #176]	; (8001918 <state_idle_exit+0x108>)
 8001866:	f003 f9b3 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 800186a:	4b29      	ldr	r3, [pc, #164]	; (8001910 <state_idle_exit+0x100>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3310      	adds	r3, #16
 8001870:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001874:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001878:	4828      	ldr	r0, [pc, #160]	; (800191c <state_idle_exit+0x10c>)
 800187a:	f003 f9a9 	bl	8004bd0 <HAL_CAN_AddTxMessage>

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <state_idle_exit+0x100>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001886:	2120      	movs	r1, #32
 8001888:	4618      	mov	r0, r3
 800188a:	f006 fbe5 	bl	8008058 <osSemaphoreAcquire>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <state_idle_exit+0x9e>
	{
		CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <state_idle_exit+0x100>)
 8001896:	681c      	ldr	r4, [r3, #0]
 8001898:	f002 fa7e 	bl	8003d98 <HAL_GetTick>
 800189c:	4603      	mov	r3, r0
 800189e:	62a3      	str	r3, [r4, #40]	; 0x28
		osSemaphoreRelease(CC_GlobalState->sem);
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <state_idle_exit+0x100>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80018a8:	4618      	mov	r0, r3
 80018aa:	f006 fc3b 	bl	8008124 <osSemaphoreRelease>
	}

	/* RTD Siren & HV Startup */
	CC_GlobalState->pdmTrackState = CC_GlobalState->pdmTrackState | RTD_SIREN_MASK | HV_STARTUP;
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <state_idle_exit+0x100>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <state_idle_exit+0x100>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <state_idle_exit+0x110>)
 80018ba:	430b      	orrs	r3, r1
 80018bc:	6493      	str	r3, [r2, #72]	; 0x48
	PDM_SetChannelStates_t rtdSiren = Compose_PDM_SetChannelStates(CC_GlobalState->pdmTrackState);
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <state_idle_exit+0x100>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f9ae 	bl	8000c2c <Compose_PDM_SetChannelStates>
	CAN_TxHeaderTypeDef sirenHeader =
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]
	{
			.ExtId = rtdSiren.id,
 80018e2:	6a3b      	ldr	r3, [r7, #32]
	CAN_TxHeaderTypeDef sirenHeader =
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	2304      	movs	r3, #4
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	2304      	movs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = sizeof(rtdSiren.data),
			.TransmitGlobalTime = DISABLE,
	};
	HAL_CAN_AddTxMessage(&hcan2, &sirenHeader, rtdSiren.data, &CC_GlobalState->CAN2_TxMailbox);
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <state_idle_exit+0x100>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f103 0008 	add.w	r0, r3, #8
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	1d1a      	adds	r2, r3, #4
 80018fc:	f107 0108 	add.w	r1, r7, #8
 8001900:	4603      	mov	r3, r0
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <state_idle_exit+0x108>)
 8001904:	f003 f964 	bl	8004bd0 <HAL_CAN_AddTxMessage>

	return;
 8001908:	bf00      	nop
}
 800190a:	374c      	adds	r7, #76	; 0x4c
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	200049e0 	.word	0x200049e0
 8001914:	20004bcc 	.word	0x20004bcc
 8001918:	20004ba4 	.word	0x20004ba4
 800191c:	20004b7c 	.word	0x20004b7c
 8001920:	0662a028 	.word	0x0662a028

08001924 <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	; 0x50
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	/* If AMS Contactors Closed & BMS' Healthy */

	/* Enable all channels on PDM */
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800192c:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <state_driving_enter+0x1cc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001934:	2120      	movs	r1, #32
 8001936:	4618      	mov	r0, r3
 8001938:	f006 fb8e 	bl	8008058 <osSemaphoreAcquire>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d17e      	bne.n	8001a40 <state_driving_enter+0x11c>
	{
		CC_GlobalState->tractiveActive = true;
 8001942:	4b6b      	ldr	r3, [pc, #428]	; (8001af0 <state_driving_enter+0x1cc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534
		CC_GlobalState->faultDetected = false;
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <state_driving_enter+0x1cc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2535 	strb.w	r2, [r3, #1333]	; 0x535
		CC_GlobalState->rtdLightActive = true;
 8001956:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <state_driving_enter+0x1cc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536

		memset(CC_GlobalState->rollingBrakeValues, 0, 10*sizeof(uint32_t));
 8001960:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <state_driving_enter+0x1cc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8001968:	2228      	movs	r2, #40	; 0x28
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f009 feca 	bl	800b706 <memset>
		memset(CC_GlobalState->secondaryRollingBrakeValues, 0, 10*sizeof(uint32_t));
 8001972:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <state_driving_enter+0x1cc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f203 4364 	addw	r3, r3, #1124	; 0x464
 800197a:	2228      	movs	r2, #40	; 0x28
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f009 fec1 	bl	800b706 <memset>
		memset(CC_GlobalState->rollingAccelValues, 0, 10*sizeof(uint32_t));
 8001984:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <state_driving_enter+0x1cc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800198c:	2228      	movs	r2, #40	; 0x28
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f009 feb8 	bl	800b706 <memset>
		memset(CC_GlobalState->secondaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <state_driving_enter+0x1cc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800199e:	2228      	movs	r2, #40	; 0x28
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f009 feaf 	bl	800b706 <memset>
		memset(CC_GlobalState->tertiaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 80019a8:	4b51      	ldr	r3, [pc, #324]	; (8001af0 <state_driving_enter+0x1cc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80019b0:	2228      	movs	r2, #40	; 0x28
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f009 fea6 	bl	800b706 <memset>

		CC_GlobalState->brakeMin[0] = BRAKE_PEDAL_ONE_MIN;
 80019ba:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <state_driving_enter+0x1cc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f640 1274 	movw	r2, #2420	; 0x974
 80019c2:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
		CC_GlobalState->brakeMin[1] = BRAKE_PEDAL_TWO_MIN;
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <state_driving_enter+0x1cc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f44f 6211 	mov.w	r2, #2320	; 0x910
 80019ce:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
		CC_GlobalState->brakeMax[0] = BRAKE_PEDAL_ONE_MAX;
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <state_driving_enter+0x1cc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80019da:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
		CC_GlobalState->brakeMax[1] = BRAKE_PEDAL_TWO_MAX;
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <state_driving_enter+0x1cc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f640 421c 	movw	r2, #3100	; 0xc1c
 80019e6:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

		CC_GlobalState->accelMin[0] = ACCEL_PEDAL_ONE_MIN;
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <state_driving_enter+0x1cc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f640 225a 	movw	r2, #2650	; 0xa5a
 80019f2:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
		CC_GlobalState->accelMax[0] = ACCEL_PEDAL_ONE_MAX;
 80019f6:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <state_driving_enter+0x1cc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f640 424e 	movw	r2, #3150	; 0xc4e
 80019fe:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
		CC_GlobalState->accelMin[1] = ACCEL_PEDAL_TWO_MIN;
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <state_driving_enter+0x1cc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001a0a:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
		CC_GlobalState->accelMax[1] = ACCEL_PEDAL_TWO_MAX;
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <state_driving_enter+0x1cc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001a16:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
		CC_GlobalState->accelMin[2] = ACCEL_PEDAL_THREE_MIN;
 8001a1a:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <state_driving_enter+0x1cc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001a22:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
		CC_GlobalState->accelMax[2] = ACCEL_PEDAL_THREE_MAX;
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <state_driving_enter+0x1cc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001a2e:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0

		osSemaphoreRelease(CC_GlobalState->sem);
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <state_driving_enter+0x1cc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f006 fb72 	bl	8008124 <osSemaphoreRelease>
	}
	/* Start Polling ADC */
	HAL_ADC_Start_DMA(&hadc2, CC_GlobalState->brakeAdcValues, 100);
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <state_driving_enter+0x1cc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3350      	adds	r3, #80	; 0x50
 8001a46:	2264      	movs	r2, #100	; 0x64
 8001a48:	4619      	mov	r1, r3
 8001a4a:	482a      	ldr	r0, [pc, #168]	; (8001af4 <state_driving_enter+0x1d0>)
 8001a4c:	f002 fab4 	bl	8003fb8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, CC_GlobalState->accelAdcValues, 150);
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <state_driving_enter+0x1cc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001a58:	2296      	movs	r2, #150	; 0x96
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4826      	ldr	r0, [pc, #152]	; (8001af8 <state_driving_enter+0x1d4>)
 8001a5e:	f002 faab 	bl	8003fb8 <HAL_ADC_Start_DMA>

	/* Run MicroBasic Script on Inverter */
	CC_SetBool_t runLeftScript = Compose_CC_SetBool(INVERTER_LEFT_NODE_ID, 0x01, 0xFFFFFFFF);
 8001a62:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2164      	movs	r1, #100	; 0x64
 8001a6e:	f7fe fecf 	bl	8000810 <Compose_CC_SetBool>
	CAN_TxHeaderTypeDef runLeftHeader =
 8001a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]
	{
			.StdId = runLeftScript.id,
 8001a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	CAN_TxHeaderTypeDef runLeftHeader =
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a88:	2308      	movs	r3, #8
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
			.IDE = CAN_ID_STD,
			.RTR = CAN_RTR_DATA,
			.DLC = sizeof(runLeftScript.data),
			.TransmitGlobalTime = DISABLE,
	};
	HAL_CAN_AddTxMessage(&CAN_1, &runLeftHeader, runLeftScript.data, &CC_GlobalState->CAN1_TxMailbox);
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <state_driving_enter+0x1cc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a96:	1d1a      	adds	r2, r3, #4
 8001a98:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4817      	ldr	r0, [pc, #92]	; (8001afc <state_driving_enter+0x1d8>)
 8001aa0:	f003 f896 	bl	8004bd0 <HAL_CAN_AddTxMessage>

	CC_SetBool_t runRightScript = Compose_CC_SetBool(INVERTER_RIGHT_NODE_ID, 0x01, 0xFFFFFFFF);
 8001aa4:	f107 0020 	add.w	r0, r7, #32
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aac:	2201      	movs	r2, #1
 8001aae:	2165      	movs	r1, #101	; 0x65
 8001ab0:	f7fe feae 	bl	8000810 <Compose_CC_SetBool>
	CAN_TxHeaderTypeDef runRightHeader =
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
 8001ac4:	615a      	str	r2, [r3, #20]
	{
			.StdId = runRightScript.id,
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
	CAN_TxHeaderTypeDef runRightHeader =
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	2308      	movs	r3, #8
 8001acc:	61bb      	str	r3, [r7, #24]
			.IDE = CAN_ID_STD,
			.RTR = CAN_RTR_DATA,
			.DLC = sizeof(runRightScript.data),
			.TransmitGlobalTime = DISABLE,
	};
	HAL_CAN_AddTxMessage(&CAN_1, &runRightHeader, runRightScript.data, &CC_GlobalState->CAN1_TxMailbox);
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <state_driving_enter+0x1cc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	1d1a      	adds	r2, r3, #4
 8001ada:	f107 0108 	add.w	r1, r7, #8
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4806      	ldr	r0, [pc, #24]	; (8001afc <state_driving_enter+0x1d8>)
 8001ae2:	f003 f875 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	return;
 8001ae6:	bf00      	nop
}
 8001ae8:	3750      	adds	r7, #80	; 0x50
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200049e0 	.word	0x200049e0
 8001af4:	200049e4 	.word	0x200049e4
 8001af8:	20004a2c 	.word	0x20004a2c
 8001afc:	20004bcc 	.word	0x20004bcc

08001b00 <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 8001b00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001b04:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8001b08:	af08      	add	r7, sp, #32
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	6018      	str	r0, [r3, #0]

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001b0e:	4ba1      	ldr	r3, [pc, #644]	; (8001d94 <state_driving_iterate+0x294>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001b16:	2120      	movs	r1, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f006 fa9d 	bl	8008058 <osSemaphoreAcquire>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 81b4 	bne.w	8001e8e <state_driving_iterate+0x38e>
	{
		/* Flash RTD */
		if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) > 1000)
 8001b26:	f002 f937 	bl	8003d98 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b99      	ldr	r3, [pc, #612]	; (8001d94 <state_driving_iterate+0x294>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b38:	d957      	bls.n	8001bea <state_driving_iterate+0xea>
		{
			HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, !CC_GlobalState->rtdLightActive);
 8001b3a:	4b96      	ldr	r3, [pc, #600]	; (8001d94 <state_driving_iterate+0x294>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f893 3536 	ldrb.w	r3, [r3, #1334]	; 0x536
 8001b42:	f083 0301 	eor.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b4e:	4892      	ldr	r0, [pc, #584]	; (8001d98 <state_driving_iterate+0x298>)
 8001b50:	f004 f86e 	bl	8005c30 <HAL_GPIO_WritePin>
			CC_GlobalState->rtdLightActive = !CC_GlobalState->rtdLightActive;
 8001b54:	4b8f      	ldr	r3, [pc, #572]	; (8001d94 <state_driving_iterate+0x294>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f893 3536 	ldrb.w	r3, [r3, #1334]	; 0x536
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf14      	ite	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	2300      	moveq	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f083 0301 	eor.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b89      	ldr	r3, [pc, #548]	; (8001d94 <state_driving_iterate+0x294>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f002 0201 	and.w	r2, r2, #1
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
			CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 8001b7c:	4b85      	ldr	r3, [pc, #532]	; (8001d94 <state_driving_iterate+0x294>)
 8001b7e:	681c      	ldr	r4, [r3, #0]
 8001b80:	f002 f90a 	bl	8003d98 <HAL_GetTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	62a3      	str	r3, [r4, #40]	; 0x28

			CC_GlobalState->pdmTrackState = CC_GlobalState->pdmTrackState & (~RTD_SIREN_MASK);
 8001b88:	4b82      	ldr	r3, [pc, #520]	; (8001d94 <state_driving_iterate+0x294>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b8e:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <state_driving_iterate+0x294>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b96:	649a      	str	r2, [r3, #72]	; 0x48
			PDM_SetChannelStates_t rtdSiren = Compose_PDM_SetChannelStates(CC_GlobalState->pdmTrackState);
 8001b98:	4b7e      	ldr	r3, [pc, #504]	; (8001d94 <state_driving_iterate+0x294>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b9e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f841 	bl	8000c2c <Compose_PDM_SetChannelStates>
			CAN_TxHeaderTypeDef sirenHeader =
 8001baa:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]
 8001bba:	615a      	str	r2, [r3, #20]
			{
					.ExtId = rtdSiren.id,
 8001bbc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
			CAN_TxHeaderTypeDef sirenHeader =
 8001bc0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001bca:	2304      	movs	r3, #4
 8001bcc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = sizeof(rtdSiren.data),
					.TransmitGlobalTime = DISABLE,
			};
			HAL_CAN_AddTxMessage(&hcan2, &sirenHeader, rtdSiren.data, &CC_GlobalState->CAN2_TxMailbox);
 8001bd0:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <state_driving_iterate+0x294>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f103 0008 	add.w	r0, r3, #8
 8001bd8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001bdc:	1d1a      	adds	r2, r3, #4
 8001bde:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8001be2:	4603      	mov	r3, r0
 8001be4:	486d      	ldr	r0, [pc, #436]	; (8001d9c <state_driving_iterate+0x29c>)
 8001be6:	f002 fff3 	bl	8004bd0 <HAL_CAN_AddTxMessage>
		}
		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8001bea:	f002 f8d5 	bl	8003d98 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <state_driving_iterate+0x294>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b64      	cmp	r3, #100	; 0x64
 8001bfa:	d929      	bls.n	8001c50 <state_driving_iterate+0x150>
 8001bfc:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <state_driving_iterate+0x294>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	7edb      	ldrb	r3, [r3, #27]
 8001c02:	f083 0301 	eor.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d021      	beq.n	8001c50 <state_driving_iterate+0x150>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001c0c:	4b61      	ldr	r3, [pc, #388]	; (8001d94 <state_driving_iterate+0x294>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8001c10:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001c12:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <state_driving_iterate+0x294>)
 8001c14:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8001c16:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 8001c1a:	4b5e      	ldr	r3, [pc, #376]	; (8001d94 <state_driving_iterate+0x294>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8001c1e:	3310      	adds	r3, #16
 8001c20:	4a5c      	ldr	r2, [pc, #368]	; (8001d94 <state_driving_iterate+0x294>)
 8001c22:	6814      	ldr	r4, [r2, #0]
 8001c24:	2265      	movs	r2, #101	; 0x65
 8001c26:	9206      	str	r2, [sp, #24]
 8001c28:	2264      	movs	r2, #100	; 0x64
 8001c2a:	9205      	str	r2, [sp, #20]
 8001c2c:	4a5c      	ldr	r2, [pc, #368]	; (8001da0 <state_driving_iterate+0x2a0>)
 8001c2e:	9204      	str	r2, [sp, #16]
 8001c30:	4a5c      	ldr	r2, [pc, #368]	; (8001da4 <state_driving_iterate+0x2a4>)
 8001c32:	9203      	str	r2, [sp, #12]
 8001c34:	4a59      	ldr	r2, [pc, #356]	; (8001d9c <state_driving_iterate+0x29c>)
 8001c36:	9202      	str	r2, [sp, #8]
 8001c38:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <state_driving_iterate+0x2a8>)
 8001c3a:	9201      	str	r2, [sp, #4]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4602      	mov	r2, r0
 8001c42:	2101      	movs	r1, #1
 8001c44:	4859      	ldr	r0, [pc, #356]	; (8001dac <state_driving_iterate+0x2ac>)
 8001c46:	f7fe fe1b 	bl	8000880 <Send_CC_FatalShutdown>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownOneTicks) > 100 && !CC_GlobalState->SHDN_1_Debug)
 8001c50:	f002 f8a2 	bl	8003d98 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <state_driving_iterate+0x294>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d929      	bls.n	8001cb6 <state_driving_iterate+0x1b6>
 8001c62:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <state_driving_iterate+0x294>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	7f9b      	ldrb	r3, [r3, #30]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d021      	beq.n	8001cb6 <state_driving_iterate+0x1b6>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN1\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001c72:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <state_driving_iterate+0x294>)
 8001c74:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN1\r\n", true,
 8001c76:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001c78:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <state_driving_iterate+0x294>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN1\r\n", true,
 8001c7c:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 8001c80:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <state_driving_iterate+0x294>)
 8001c82:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN1\r\n", true,
 8001c84:	3310      	adds	r3, #16
 8001c86:	4a43      	ldr	r2, [pc, #268]	; (8001d94 <state_driving_iterate+0x294>)
 8001c88:	6814      	ldr	r4, [r2, #0]
 8001c8a:	2265      	movs	r2, #101	; 0x65
 8001c8c:	9206      	str	r2, [sp, #24]
 8001c8e:	2264      	movs	r2, #100	; 0x64
 8001c90:	9205      	str	r2, [sp, #20]
 8001c92:	4a43      	ldr	r2, [pc, #268]	; (8001da0 <state_driving_iterate+0x2a0>)
 8001c94:	9204      	str	r2, [sp, #16]
 8001c96:	4a43      	ldr	r2, [pc, #268]	; (8001da4 <state_driving_iterate+0x2a4>)
 8001c98:	9203      	str	r2, [sp, #12]
 8001c9a:	4a40      	ldr	r2, [pc, #256]	; (8001d9c <state_driving_iterate+0x29c>)
 8001c9c:	9202      	str	r2, [sp, #8]
 8001c9e:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <state_driving_iterate+0x2a8>)
 8001ca0:	9201      	str	r2, [sp, #4]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4841      	ldr	r0, [pc, #260]	; (8001db0 <state_driving_iterate+0x2b0>)
 8001cac:	f7fe fde8 	bl	8000880 <Send_CC_FatalShutdown>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8001cb6:	f002 f86f 	bl	8003d98 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <state_driving_iterate+0x294>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b64      	cmp	r3, #100	; 0x64
 8001cc6:	d929      	bls.n	8001d1c <state_driving_iterate+0x21c>
 8001cc8:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <state_driving_iterate+0x294>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	7f5b      	ldrb	r3, [r3, #29]
 8001cce:	f083 0301 	eor.w	r3, r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d021      	beq.n	8001d1c <state_driving_iterate+0x21c>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <state_driving_iterate+0x294>)
 8001cda:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001cdc:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001cde:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <state_driving_iterate+0x294>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001ce2:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <state_driving_iterate+0x294>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001cea:	3310      	adds	r3, #16
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <state_driving_iterate+0x294>)
 8001cee:	6814      	ldr	r4, [r2, #0]
 8001cf0:	2265      	movs	r2, #101	; 0x65
 8001cf2:	9206      	str	r2, [sp, #24]
 8001cf4:	2264      	movs	r2, #100	; 0x64
 8001cf6:	9205      	str	r2, [sp, #20]
 8001cf8:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <state_driving_iterate+0x2a0>)
 8001cfa:	9204      	str	r2, [sp, #16]
 8001cfc:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <state_driving_iterate+0x2a4>)
 8001cfe:	9203      	str	r2, [sp, #12]
 8001d00:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <state_driving_iterate+0x29c>)
 8001d02:	9202      	str	r2, [sp, #8]
 8001d04:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <state_driving_iterate+0x2a8>)
 8001d06:	9201      	str	r2, [sp, #4]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4828      	ldr	r0, [pc, #160]	; (8001db4 <state_driving_iterate+0x2b4>)
 8001d12:	f7fe fdb5 	bl	8000880 <Send_CC_FatalShutdown>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 8001d1c:	f002 f83c 	bl	8003d98 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <state_driving_iterate+0x294>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d929      	bls.n	8001d82 <state_driving_iterate+0x282>
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <state_driving_iterate+0x294>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	7f1b      	ldrb	r3, [r3, #28]
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d021      	beq.n	8001d82 <state_driving_iterate+0x282>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <state_driving_iterate+0x294>)
 8001d40:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001d42:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <state_driving_iterate+0x294>)
 8001d46:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001d48:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <state_driving_iterate+0x294>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001d50:	3310      	adds	r3, #16
 8001d52:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <state_driving_iterate+0x294>)
 8001d54:	6814      	ldr	r4, [r2, #0]
 8001d56:	2265      	movs	r2, #101	; 0x65
 8001d58:	9206      	str	r2, [sp, #24]
 8001d5a:	2264      	movs	r2, #100	; 0x64
 8001d5c:	9205      	str	r2, [sp, #20]
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <state_driving_iterate+0x2a0>)
 8001d60:	9204      	str	r2, [sp, #16]
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <state_driving_iterate+0x2a4>)
 8001d64:	9203      	str	r2, [sp, #12]
 8001d66:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <state_driving_iterate+0x29c>)
 8001d68:	9202      	str	r2, [sp, #8]
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <state_driving_iterate+0x2a8>)
 8001d6c:	9201      	str	r2, [sp, #4]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	460b      	mov	r3, r1
 8001d72:	4602      	mov	r2, r0
 8001d74:	2101      	movs	r1, #1
 8001d76:	4810      	ldr	r0, [pc, #64]	; (8001db8 <state_driving_iterate+0x2b8>)
 8001d78:	f7fe fd82 	bl	8000880 <Send_CC_FatalShutdown>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <state_driving_iterate+0x294>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f006 f9ca 	bl	8008124 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets on CAN1 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 8001d90:	e07d      	b.n	8001e8e <state_driving_iterate+0x38e>
 8001d92:	bf00      	nop
 8001d94:	200049e0 	.word	0x200049e0
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	20004ba4 	.word	0x20004ba4
 8001da0:	20004c38 	.word	0x20004c38
 8001da4:	20004b7c 	.word	0x20004b7c
 8001da8:	20004bcc 	.word	0x20004bcc
 8001dac:	0800bff8 	.word	0x0800bff8
 8001db0:	0800c010 	.word	0x0800c010
 8001db4:	0800c058 	.word	0x0800c058
 8001db8:	0800c074 	.word	0x0800c074
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN1Queue, &msg, 0U, 0U) == osOK)
 8001dbc:	4b99      	ldr	r3, [pc, #612]	; (8002024 <state_driving_iterate+0x524>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 0538 	ldr.w	r0, [r3, #1336]	; 0x538
 8001dc4:	f107 010c 	add.w	r1, r7, #12
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f006 fafc 	bl	80083c8 <osMessageQueueGet>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d15b      	bne.n	8001e8e <state_driving_iterate+0x38e>
		{
			if(msg.header.IDE == CAN_ID_STD) {
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d156      	bne.n	8001e8e <state_driving_iterate+0x38e>
				/* Inverter Heartbeat */
				if(msg.header.StdId == 0x700+INVERTER_LEFT_NODE_ID)
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f240 7264 	movw	r2, #1892	; 0x764
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d106      	bne.n	8001dfc <state_driving_iterate+0x2fc>
				{
					CC_GlobalState->inverterTicks = HAL_GetTick();
 8001dee:	4b8d      	ldr	r3, [pc, #564]	; (8002024 <state_driving_iterate+0x524>)
 8001df0:	681c      	ldr	r4, [r3, #0]
 8001df2:	f001 ffd1 	bl	8003d98 <HAL_GetTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	6363      	str	r3, [r4, #52]	; 0x34
 8001dfa:	e048      	b.n	8001e8e <state_driving_iterate+0x38e>
				}
				/* Inverter Response Packet */
				else if(msg.header.StdId == 0x580+INVERTER_LEFT_NODE_ID)
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d141      	bne.n	8001e8e <state_driving_iterate+0x38e>
				{
					char x[80];
					int len;
					/* Motor RPM Response Packet */
					if((msg.data[2] << 8 | msg.data[1]) == 0x210A)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	7f9b      	ldrb	r3, [r3, #30]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	f107 020c 	add.w	r2, r7, #12
 8001e16:	7f52      	ldrb	r2, [r2, #29]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f242 120a 	movw	r2, #8458	; 0x210a
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d120      	bne.n	8001e64 <state_driving_iterate+0x364>
					{
						/* Parse Motor RPM */
						int16_t motorRPM = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
						Parse_CC_RequestRPM(msg.data, &motorRPM);
 8001e28:	f507 72e9 	add.w	r2, r7, #466	; 0x1d2
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	331c      	adds	r3, #28
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fc6d 	bl	8000714 <Parse_CC_RequestRPM>

						/* Echo Motor RPM */
						len = sprintf(x, "[%li] Got RPM from CAN1: %i\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, motorRPM);
 8001e3a:	f001 ffad 	bl	8003d98 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4b78      	ldr	r3, [pc, #480]	; (8002024 <state_driving_iterate+0x524>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4a77      	ldr	r2, [pc, #476]	; (8002028 <state_driving_iterate+0x528>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	099a      	lsrs	r2, r3, #6
 8001e50:	f9b7 31d2 	ldrsh.w	r3, [r7, #466]	; 0x1d2
 8001e54:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001e58:	4974      	ldr	r1, [pc, #464]	; (800202c <state_driving_iterate+0x52c>)
 8001e5a:	f009 fd15 	bl	800b888 <siprintf>
 8001e5e:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8001e62:	e014      	b.n	8001e8e <state_driving_iterate+0x38e>
						//CC_LogInfo(x, len);
					}
					else
					{
						/* Echo CAN Packet if index not recognised */
						len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.StdId);
 8001e64:	f001 ff98 	bl	8003d98 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b6e      	ldr	r3, [pc, #440]	; (8002024 <state_driving_iterate+0x524>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	4a6d      	ldr	r2, [pc, #436]	; (8002028 <state_driving_iterate+0x528>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	099a      	lsrs	r2, r3, #6
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001e84:	496a      	ldr	r1, [pc, #424]	; (8002030 <state_driving_iterate+0x530>)
 8001e86:	f009 fcff 	bl	800b888 <siprintf>
 8001e8a:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 8001e8e:	4b65      	ldr	r3, [pc, #404]	; (8002024 <state_driving_iterate+0x524>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8d3 3538 	ldr.w	r3, [r3, #1336]	; 0x538
 8001e96:	4618      	mov	r0, r3
 8001e98:	f006 fb08 	bl	80084ac <osMessageQueueGetCount>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d18c      	bne.n	8001dbc <state_driving_iterate+0x2bc>
			}
		}
	}

	/* Check for Queued CAN Packets on CAN2 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001ea2:	e14b      	b.n	800213c <state_driving_iterate+0x63c>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8001ea4:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <state_driving_iterate+0x524>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8d3 053c 	ldr.w	r0, [r3, #1340]	; 0x53c
 8001eac:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f006 fa88 	bl	80083c8 <osMessageQueueGet>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 813e 	bne.w	800213c <state_driving_iterate+0x63c>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ec4:	685c      	ldr	r4, [r3, #4]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7fe fedb 	bl	8000c90 <Compose_CANId>
 8001eda:	4603      	mov	r3, r0
 8001edc:	429c      	cmp	r4, r3
 8001ede:	d13b      	bne.n	8001f58 <state_driving_iterate+0x458>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <state_driving_iterate+0x524>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001ee8:	2120      	movs	r1, #32
 8001eea:	4618      	mov	r0, r3
 8001eec:	f006 f8b4 	bl	8008058 <osSemaphoreAcquire>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 8122 	bne.w	800213c <state_driving_iterate+0x63c>
				{
					bool initialised; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8001ef8:	f207 14cf 	addw	r4, r7, #463	; 0x1cf
 8001efc:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8001f00:	f207 11d1 	addw	r1, r7, #465	; 0x1d1
 8001f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f08:	f103 001c 	add.w	r0, r3, #28
 8001f0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001f10:	9304      	str	r3, [sp, #16]
 8001f12:	f507 73e5 	add.w	r3, r7, #458	; 0x1ca
 8001f16:	9303      	str	r3, [sp, #12]
 8001f18:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001f1c:	9302      	str	r3, [sp, #8]
 8001f1e:	f207 13cd 	addw	r3, r7, #461	; 0x1cd
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	f507 73e7 	add.w	r3, r7, #462	; 0x1ce
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	f7fe fb60 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 8001f30:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <state_driving_iterate+0x524>)
 8001f32:	681c      	ldr	r4, [r3, #0]
 8001f34:	f001 ff30 	bl	8003d98 <HAL_GetTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	6323      	str	r3, [r4, #48]	; 0x30
					CC_GlobalState->amsInit = initialised;
 8001f3c:	4b39      	ldr	r3, [pc, #228]	; (8002024 <state_driving_iterate+0x524>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f897 21d1 	ldrb.w	r2, [r7, #465]	; 0x1d1
 8001f44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					osSemaphoreRelease(CC_GlobalState->sem);
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <state_driving_iterate+0x524>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001f50:	4618      	mov	r0, r3
 8001f52:	f006 f8e7 	bl	8008124 <osSemaphoreRelease>
 8001f56:	e0f1      	b.n	800213c <state_driving_iterate+0x63c>
				}
			}
			/* Shutdown 1 Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 8001f58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f5c:	685c      	ldr	r4, [r3, #4]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	2301      	movs	r3, #1
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2301      	movs	r3, #1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2106      	movs	r1, #6
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f7fe fe8f 	bl	8000c90 <Compose_CANId>
 8001f72:	4603      	mov	r3, r0
 8001f74:	429c      	cmp	r4, r3
 8001f76:	d122      	bne.n	8001fbe <state_driving_iterate+0x4be>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <state_driving_iterate+0x524>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001f80:	2120      	movs	r1, #32
 8001f82:	4618      	mov	r0, r3
 8001f84:	f006 f868 	bl	8008058 <osSemaphoreAcquire>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 80d6 	bne.w	800213c <state_driving_iterate+0x63c>
				{
					uint8_t segmentState;
					Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 8001f90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f94:	331c      	adds	r3, #28
 8001f96:	f207 12c7 	addw	r2, r7, #455	; 0x1c7
 8001f9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f9e:	f7fe fead 	bl	8000cfc <Parse_SHDN_HeartbeatResponse>
					CC_GlobalState->shutdownOneTicks = HAL_GetTick();
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <state_driving_iterate+0x524>)
 8001fa4:	681c      	ldr	r4, [r3, #0]
 8001fa6:	f001 fef7 	bl	8003d98 <HAL_GetTick>
 8001faa:	4603      	mov	r3, r0
 8001fac:	63a3      	str	r3, [r4, #56]	; 0x38
					osSemaphoreRelease(CC_GlobalState->sem);
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <state_driving_iterate+0x524>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f006 f8b4 	bl	8008124 <osSemaphoreRelease>
 8001fbc:	e0be      	b.n	800213c <state_driving_iterate+0x63c>
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fc2:	685c      	ldr	r4, [r3, #4]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7fe fe5c 	bl	8000c90 <Compose_CANId>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	429c      	cmp	r4, r3
 8001fdc:	d12a      	bne.n	8002034 <state_driving_iterate+0x534>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <state_driving_iterate+0x524>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f006 f835 	bl	8008058 <osSemaphoreAcquire>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 80a3 	bne.w	800213c <state_driving_iterate+0x63c>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001ff6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	f507 72e3 	add.w	r2, r7, #454	; 0x1c6
 8002000:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002004:	f7fe fe8b 	bl	8000d1e <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <state_driving_iterate+0x524>)
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	f001 fec4 	bl	8003d98 <HAL_GetTick>
 8002010:	4603      	mov	r3, r0
 8002012:	6463      	str	r3, [r4, #68]	; 0x44
					osSemaphoreRelease(CC_GlobalState->sem);
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <state_driving_iterate+0x524>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800201c:	4618      	mov	r0, r3
 800201e:	f006 f881 	bl	8008124 <osSemaphoreRelease>
 8002022:	e08b      	b.n	800213c <state_driving_iterate+0x63c>
 8002024:	200049e0 	.word	0x200049e0
 8002028:	10624dd3 	.word	0x10624dd3
 800202c:	0800c0bc 	.word	0x0800c0bc
 8002030:	0800c0dc 	.word	0x0800c0dc
				}
			}
			/* Shutdown Triggered Fault */
			else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 8002034:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002038:	685c      	ldr	r4, [r3, #4]
 800203a:	2300      	movs	r3, #0
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	2300      	movs	r3, #0
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2300      	movs	r3, #0
 8002044:	2200      	movs	r2, #0
 8002046:	2106      	movs	r1, #6
 8002048:	2000      	movs	r0, #0
 800204a:	f7fe fe21 	bl	8000c90 <Compose_CANId>
 800204e:	4603      	mov	r3, r0
 8002050:	429c      	cmp	r4, r3
 8002052:	d173      	bne.n	800213c <state_driving_iterate+0x63c>
			{
				/* Reset Script to Default State */
				CC_SetVariable_t zeroCommand = Compose_CC_SetVariable(INVERTER_LEFT_NODE_ID,
 8002054:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 8002058:	2300      	movs	r3, #0
 800205a:	2201      	movs	r2, #1
 800205c:	2164      	movs	r1, #100	; 0x64
 800205e:	f7fe fb9f 	bl	80007a0 <Compose_CC_SetVariable>
						0x01,
						0x00);
				CAN_TxHeaderTypeDef zeroHeader =
 8002062:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002066:	461a      	mov	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	6053      	str	r3, [r2, #4]
 800206e:	6093      	str	r3, [r2, #8]
 8002070:	60d3      	str	r3, [r2, #12]
 8002072:	6113      	str	r3, [r2, #16]
 8002074:	6153      	str	r3, [r2, #20]
				{
						.StdId = zeroCommand.id,
 8002076:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
				CAN_TxHeaderTypeDef zeroHeader =
 800207a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002084:	2208      	movs	r2, #8
 8002086:	611a      	str	r2, [r3, #16]
						.IDE = CAN_ID_STD,
						.RTR = CAN_RTR_DATA,
						.DLC = 8,
						.TransmitGlobalTime = DISABLE,
				};
				HAL_CAN_AddTxMessage(&CAN_1, &zeroHeader, zeroCommand.data, &CC_GlobalState->CAN1_TxMailbox);
 8002088:	4ba5      	ldr	r3, [pc, #660]	; (8002320 <state_driving_iterate+0x820>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002092:	1d1a      	adds	r2, r3, #4
 8002094:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8002098:	4603      	mov	r3, r0
 800209a:	48a2      	ldr	r0, [pc, #648]	; (8002324 <state_driving_iterate+0x824>)
 800209c:	f002 fd98 	bl	8004bd0 <HAL_CAN_AddTxMessage>

				CC_ShutdownInverter_t shutdownInverter = Compose_CC_ShutdownInverter(INVERTER_LEFT_NODE_ID);
 80020a0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80020a4:	2164      	movs	r1, #100	; 0x64
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fb4c 	bl	8000744 <Compose_CC_ShutdownInverter>
				CAN_TxHeaderTypeDef header =
 80020ac:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80020b0:	461a      	mov	r2, r3
 80020b2:	2300      	movs	r3, #0
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	6053      	str	r3, [r2, #4]
 80020b8:	6093      	str	r3, [r2, #8]
 80020ba:	60d3      	str	r3, [r2, #12]
 80020bc:	6113      	str	r3, [r2, #16]
 80020be:	6153      	str	r3, [r2, #20]
				{
						.StdId = shutdownInverter.id,
 80020c0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80020c4:	681a      	ldr	r2, [r3, #0]
				CAN_TxHeaderTypeDef header =
 80020c6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80020d0:	2208      	movs	r2, #8
 80020d2:	611a      	str	r2, [r3, #16]
						.IDE = CAN_ID_STD,
						.RTR = CAN_RTR_DATA,
						.DLC = 8,
						.TransmitGlobalTime = DISABLE,
				};
				HAL_CAN_AddTxMessage(&CAN_1, &header, shutdownInverter.data, &CC_GlobalState->CAN1_TxMailbox);
 80020d4:	4b92      	ldr	r3, [pc, #584]	; (8002320 <state_driving_iterate+0x820>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80020e4:	4603      	mov	r3, r0
 80020e6:	488f      	ldr	r0, [pc, #572]	; (8002324 <state_driving_iterate+0x824>)
 80020e8:	f002 fd72 	bl	8004bd0 <HAL_CAN_AddTxMessage>

				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80020ec:	4b8c      	ldr	r3, [pc, #560]	; (8002320 <state_driving_iterate+0x820>)
 80020ee:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 80020f0:	4618      	mov	r0, r3
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80020f2:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <state_driving_iterate+0x820>)
 80020f4:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 80020f6:	f103 0108 	add.w	r1, r3, #8
						&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3,
 80020fa:	4b89      	ldr	r3, [pc, #548]	; (8002320 <state_driving_iterate+0x820>)
 80020fc:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 80020fe:	3310      	adds	r3, #16
 8002100:	4a87      	ldr	r2, [pc, #540]	; (8002320 <state_driving_iterate+0x820>)
 8002102:	6814      	ldr	r4, [r2, #0]
 8002104:	2265      	movs	r2, #101	; 0x65
 8002106:	9206      	str	r2, [sp, #24]
 8002108:	2264      	movs	r2, #100	; 0x64
 800210a:	9205      	str	r2, [sp, #20]
 800210c:	4a86      	ldr	r2, [pc, #536]	; (8002328 <state_driving_iterate+0x828>)
 800210e:	9204      	str	r2, [sp, #16]
 8002110:	4a86      	ldr	r2, [pc, #536]	; (800232c <state_driving_iterate+0x82c>)
 8002112:	9203      	str	r2, [sp, #12]
 8002114:	4a86      	ldr	r2, [pc, #536]	; (8002330 <state_driving_iterate+0x830>)
 8002116:	9202      	str	r2, [sp, #8]
 8002118:	4a82      	ldr	r2, [pc, #520]	; (8002324 <state_driving_iterate+0x824>)
 800211a:	9201      	str	r2, [sp, #4]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	460b      	mov	r3, r1
 8002120:	4602      	mov	r2, r0
 8002122:	2101      	movs	r1, #1
 8002124:	4883      	ldr	r0, [pc, #524]	; (8002334 <state_driving_iterate+0x834>)
 8002126:	f7fe fbab 	bl	8000880 <Send_CC_FatalShutdown>
 800212a:	4603      	mov	r3, r0
 800212c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
						INVERTER_LEFT_NODE_ID, INVERTER_RIGHT_NODE_ID);
				fsm_changeState(fsm, &idleState, "Resetting to Idle to Clean");
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4a81      	ldr	r2, [pc, #516]	; (8002338 <state_driving_iterate+0x838>)
 8002134:	4981      	ldr	r1, [pc, #516]	; (800233c <state_driving_iterate+0x83c>)
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	f7fe fc8c 	bl	8000a54 <fsm_changeState>
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 800213c:	4b78      	ldr	r3, [pc, #480]	; (8002320 <state_driving_iterate+0x820>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8002144:	4618      	mov	r0, r3
 8002146:	f006 f9b1 	bl	80084ac <osMessageQueueGetCount>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	f47f aea9 	bne.w	8001ea4 <state_driving_iterate+0x3a4>
	/* Echo ADC Failure for Debugging */
	if(CC_GlobalState->faultDetected)
	{
		//CC_LogInfo("ADC Fault Detected\r\n", strlen("ADC Fault Detected\r\n"));
	}
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <state_driving_iterate+0x820>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800215a:	2120      	movs	r1, #32
 800215c:	4618      	mov	r0, r3
 800215e:	f005 ff7b 	bl	8008058 <osSemaphoreAcquire>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 80b8 	bne.w	80022da <state_driving_iterate+0x7da>
	{
		/* Brake Travel Record & Sum 10 Values */
		for (int i=0; i < 10; i++)
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8002170:	e0a7      	b.n	80022c2 <state_driving_iterate+0x7c2>
		{
			if (i == 9)
 8002172:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002176:	2b09      	cmp	r3, #9
 8002178:	d13f      	bne.n	80021fa <state_driving_iterate+0x6fa>
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[0];
 800217a:	4b69      	ldr	r3, [pc, #420]	; (8002320 <state_driving_iterate+0x820>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a68      	ldr	r2, [pc, #416]	; (8002320 <state_driving_iterate+0x820>)
 8002180:	6811      	ldr	r1, [r2, #0]
 8002182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002184:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002188:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[1];
 8002192:	4b63      	ldr	r3, [pc, #396]	; (8002320 <state_driving_iterate+0x820>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a62      	ldr	r2, [pc, #392]	; (8002320 <state_driving_iterate+0x820>)
 8002198:	6811      	ldr	r1, [r2, #0]
 800219a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800219c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80021a0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	605a      	str	r2, [r3, #4]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->accelAdcValues[0];
 80021aa:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <state_driving_iterate+0x820>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5c      	ldr	r2, [pc, #368]	; (8002320 <state_driving_iterate+0x820>)
 80021b0:	6811      	ldr	r1, [r2, #0]
 80021b2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80021b6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80021ba:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[1];
 80021c4:	4b56      	ldr	r3, [pc, #344]	; (8002320 <state_driving_iterate+0x820>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a55      	ldr	r2, [pc, #340]	; (8002320 <state_driving_iterate+0x820>)
 80021ca:	6811      	ldr	r1, [r2, #0]
 80021cc:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 80021d0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80021d4:	f503 739b 	add.w	r3, r3, #310	; 0x136
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[2];
 80021de:	4b50      	ldr	r3, [pc, #320]	; (8002320 <state_driving_iterate+0x820>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a4f      	ldr	r2, [pc, #316]	; (8002320 <state_driving_iterate+0x820>)
 80021e4:	6811      	ldr	r1, [r2, #0]
 80021e6:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 80021ea:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80021ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	e05e      	b.n	80022b8 <state_driving_iterate+0x7b8>
			}
			else
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->rollingBrakeValues[i+1];
 80021fa:	4b49      	ldr	r3, [pc, #292]	; (8002320 <state_driving_iterate+0x820>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002202:	3301      	adds	r3, #1
 8002204:	4946      	ldr	r1, [pc, #280]	; (8002320 <state_driving_iterate+0x820>)
 8002206:	6809      	ldr	r1, [r1, #0]
 8002208:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002216:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->secondaryRollingBrakeValues[i+1];
 8002220:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <state_driving_iterate+0x820>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002228:	3301      	adds	r3, #1
 800222a:	493d      	ldr	r1, [pc, #244]	; (8002320 <state_driving_iterate+0x820>)
 800222c:	6809      	ldr	r1, [r1, #0]
 800222e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800223c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	605a      	str	r2, [r3, #4]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->rollingAccelValues[i+1];
 8002246:	4b36      	ldr	r3, [pc, #216]	; (8002320 <state_driving_iterate+0x820>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800224e:	3301      	adds	r3, #1
 8002250:	4933      	ldr	r1, [pc, #204]	; (8002320 <state_driving_iterate+0x820>)
 8002252:	6809      	ldr	r1, [r1, #0]
 8002254:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002262:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->secondaryRollingAccelValues[i+1];
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <state_driving_iterate+0x820>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002274:	3301      	adds	r3, #1
 8002276:	492a      	ldr	r1, [pc, #168]	; (8002320 <state_driving_iterate+0x820>)
 8002278:	6809      	ldr	r1, [r1, #0]
 800227a:	f503 739b 	add.w	r3, r3, #310	; 0x136
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002288:	f503 739b 	add.w	r3, r3, #310	; 0x136
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->tertiaryRollingAccelValues[i+1];
 8002292:	4b23      	ldr	r3, [pc, #140]	; (8002320 <state_driving_iterate+0x820>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800229a:	3301      	adds	r3, #1
 800229c:	4920      	ldr	r1, [pc, #128]	; (8002320 <state_driving_iterate+0x820>)
 800229e:	6809      	ldr	r1, [r1, #0]
 80022a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80022ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	605a      	str	r2, [r3, #4]
		for (int i=0; i < 10; i++)
 80022b8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80022bc:	3301      	adds	r3, #1
 80022be:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80022c2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	f77f af53 	ble.w	8002172 <state_driving_iterate+0x672>
			}
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <state_driving_iterate+0x820>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80022d4:	4618      	mov	r0, r3
 80022d6:	f005 ff25 	bl	8008124 <osSemaphoreRelease>
	}

	uint32_t brake_one_sum = 0; uint32_t brake_one_avg = 0;uint32_t brake_two_sum = 0;uint32_t brake_two_avg = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
	uint32_t accel_one_sum = 0; uint32_t accel_one_avg = 0; uint32_t accel_two_avg = 0; uint32_t accel_three_sum = 0; uint32_t accel_three_avg = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	uint32_t accel_two_sum = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

	for (int i=0; i < 10; i++)
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800231c:	e05b      	b.n	80023d6 <state_driving_iterate+0x8d6>
 800231e:	bf00      	nop
 8002320:	200049e0 	.word	0x200049e0
 8002324:	20004bcc 	.word	0x20004bcc
 8002328:	20004c38 	.word	0x20004c38
 800232c:	20004b7c 	.word	0x20004b7c
 8002330:	20004ba4 	.word	0x20004ba4
 8002334:	0800c090 	.word	0x0800c090
 8002338:	0800c104 	.word	0x0800c104
 800233c:	20000010 	.word	0x20000010
	{
		brake_one_sum += CC_GlobalState->rollingBrakeValues[i];
 8002340:	4bcd      	ldr	r3, [pc, #820]	; (8002678 <state_driving_iterate+0xb78>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002348:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002356:	4413      	add	r3, r2
 8002358:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
		brake_two_sum += CC_GlobalState->secondaryRollingBrakeValues[i];
 800235c:	4bc6      	ldr	r3, [pc, #792]	; (8002678 <state_driving_iterate+0xb78>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002364:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002372:	4413      	add	r3, r2
 8002374:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
		accel_one_sum += CC_GlobalState->rollingAccelValues[i];
 8002378:	4bbf      	ldr	r3, [pc, #764]	; (8002678 <state_driving_iterate+0xb78>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002380:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800238e:	4413      	add	r3, r2
 8002390:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
		accel_two_sum += CC_GlobalState->secondaryRollingAccelValues[i];
 8002394:	4bb8      	ldr	r3, [pc, #736]	; (8002678 <state_driving_iterate+0xb78>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800239c:	f503 739b 	add.w	r3, r3, #310	; 0x136
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80023aa:	4413      	add	r3, r2
 80023ac:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
		accel_three_sum += CC_GlobalState->tertiaryRollingAccelValues[i];
 80023b0:	4bb1      	ldr	r3, [pc, #708]	; (8002678 <state_driving_iterate+0xb78>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80023b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80023c6:	4413      	add	r3, r2
 80023c8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	for (int i=0; i < 10; i++)
 80023cc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80023d0:	3301      	adds	r3, #1
 80023d2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80023d6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80023da:	2b09      	cmp	r3, #9
 80023dc:	ddb0      	ble.n	8002340 <state_driving_iterate+0x840>
	}

	/* Average 10 Latest Brake Travel Values */
	brake_one_avg = brake_one_sum / 10;
 80023de:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80023e2:	4aa6      	ldr	r2, [pc, #664]	; (800267c <state_driving_iterate+0xb7c>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	brake_two_avg = brake_two_sum / 10;
 80023ee:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80023f2:	4aa2      	ldr	r2, [pc, #648]	; (800267c <state_driving_iterate+0xb7c>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270

	accel_one_avg = accel_one_sum / 10;
 80023fe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002402:	4a9e      	ldr	r2, [pc, #632]	; (800267c <state_driving_iterate+0xb7c>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	accel_two_avg = accel_two_sum / 10;
 800240e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002412:	4a9a      	ldr	r2, [pc, #616]	; (800267c <state_driving_iterate+0xb7c>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	08db      	lsrs	r3, r3, #3
 800241a:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
	accel_three_avg = accel_three_sum / 10;
 800241e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002422:	4a96      	ldr	r2, [pc, #600]	; (800267c <state_driving_iterate+0xb7c>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800242e:	4b92      	ldr	r3, [pc, #584]	; (8002678 <state_driving_iterate+0xb78>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8002436:	2120      	movs	r1, #32
 8002438:	4618      	mov	r0, r3
 800243a:	f005 fe0d 	bl	8008058 <osSemaphoreAcquire>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 8214 	bne.w	800286e <state_driving_iterate+0xd6e>
	{
		/* Map Travel to Pedal Pos */
		brake_travel[0] = map(brake_one_avg, CC_GlobalState->brakeMin[0], CC_GlobalState->brakeMax[0], 0, MAX_DUTY_CYCLE);
 8002446:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 800244a:	4b8b      	ldr	r3, [pc, #556]	; (8002678 <state_driving_iterate+0xb78>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8002452:	4619      	mov	r1, r3
 8002454:	4b88      	ldr	r3, [pc, #544]	; (8002678 <state_driving_iterate+0xb78>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800245c:	461a      	mov	r2, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	f7fe fc6b 	bl	8000d40 <map>
 800246a:	4603      	mov	r3, r0
 800246c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
		brake_travel[1] = map(brake_two_avg, CC_GlobalState->brakeMin[1], CC_GlobalState->brakeMax[1], 0, MAX_DUTY_CYCLE);
 8002470:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 8002474:	4b80      	ldr	r3, [pc, #512]	; (8002678 <state_driving_iterate+0xb78>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800247c:	4619      	mov	r1, r3
 800247e:	4b7e      	ldr	r3, [pc, #504]	; (8002678 <state_driving_iterate+0xb78>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8002486:	461a      	mov	r2, r3
 8002488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	f7fe fc56 	bl	8000d40 <map>
 8002494:	4603      	mov	r3, r0
 8002496:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

		accel_travel[0] = map(accel_one_avg, CC_GlobalState->accelMin[0], CC_GlobalState->accelMax[0], 0, MAX_DUTY_CYCLE);
 800249a:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <state_driving_iterate+0xb78>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80024a6:	4619      	mov	r1, r3
 80024a8:	4b73      	ldr	r3, [pc, #460]	; (8002678 <state_driving_iterate+0xb78>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80024b0:	461a      	mov	r2, r3
 80024b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2300      	movs	r3, #0
 80024ba:	f7fe fc41 	bl	8000d40 <map>
 80024be:	4603      	mov	r3, r0
 80024c0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
		accel_travel[1] = map(accel_two_avg, CC_GlobalState->accelMin[1], CC_GlobalState->accelMax[1], 0, MAX_DUTY_CYCLE);
 80024c4:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 80024c8:	4b6b      	ldr	r3, [pc, #428]	; (8002678 <state_driving_iterate+0xb78>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80024d0:	4619      	mov	r1, r3
 80024d2:	4b69      	ldr	r3, [pc, #420]	; (8002678 <state_driving_iterate+0xb78>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80024da:	461a      	mov	r2, r3
 80024dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2300      	movs	r3, #0
 80024e4:	f7fe fc2c 	bl	8000d40 <map>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
		accel_travel[2] = map(accel_three_avg, CC_GlobalState->accelMin[2], CC_GlobalState->accelMax[2], 0, MAX_DUTY_CYCLE);
 80024ee:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 80024f2:	4b61      	ldr	r3, [pc, #388]	; (8002678 <state_driving_iterate+0xb78>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4b5e      	ldr	r3, [pc, #376]	; (8002678 <state_driving_iterate+0xb78>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8002504:	461a      	mov	r2, r3
 8002506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2300      	movs	r3, #0
 800250e:	f7fe fc17 	bl	8000d40 <map>
 8002512:	4603      	mov	r3, r0
 8002514:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		/* Recover for noise */
		if(!CC_GlobalState->ADC_Debug && CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8002518:	4b57      	ldr	r3, [pc, #348]	; (8002678 <state_driving_iterate+0xb78>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	7e5b      	ldrb	r3, [r3, #25]
 800251e:	f083 0301 	eor.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 815b 	beq.w	80027e0 <state_driving_iterate+0xce0>
 800252a:	4b53      	ldr	r3, [pc, #332]	; (8002678 <state_driving_iterate+0xb78>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8154 	beq.w	80027e0 <state_driving_iterate+0xce0>
 8002538:	4b4f      	ldr	r3, [pc, #316]	; (8002678 <state_driving_iterate+0xb78>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 814d 	beq.w	80027e0 <state_driving_iterate+0xce0>
		{
			uint8_t brakeSensors = *(&brake_travel + 1) - brake_travel;
 8002546:	2302      	movs	r3, #2
 8002548:	f887 3263 	strb.w	r3, [r7, #611]	; 0x263
			uint8_t accelSensors = *(&accel_travel + 1) - accel_travel;
 800254c:	2303      	movs	r3, #3
 800254e:	f887 3262 	strb.w	r3, [r7, #610]	; 0x262
			bool currentFault = false;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
			for (int i = 0; i < brakeSensors; i++)
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800255e:	e07b      	b.n	8002658 <state_driving_iterate+0xb58>
			{
				for (int y = 0; y < brakeSensors; y++)
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8002566:	e043      	b.n	80025f0 <state_driving_iterate+0xaf0>
				{
					if(brake_travel[i] >= (int64_t)brake_travel[y]+POT_DESYNC || brake_travel[i] <= (int64_t)brake_travel[i]-POT_DESYNC)
 8002568:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8002572:	4413      	add	r3, r2
 8002574:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002578:	4619      	mov	r1, r3
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8002588:	4403      	add	r3, r0
 800258a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800258e:	469b      	mov	fp, r3
 8002590:	f04f 0c00 	mov.w	ip, #0
 8002594:	f11b 03fa 	adds.w	r3, fp, #250	; 0xfa
 8002598:	f14c 0400 	adc.w	r4, ip, #0
 800259c:	4299      	cmp	r1, r3
 800259e:	eb72 0304 	sbcs.w	r3, r2, r4
 80025a2:	da1d      	bge.n	80025e0 <state_driving_iterate+0xae0>
 80025a4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80025ae:	4413      	add	r3, r2
 80025b0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80025b4:	4619      	mov	r1, r3
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 80025c4:	4403      	add	r3, r0
 80025c6:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80025ca:	469b      	mov	fp, r3
 80025cc:	f04f 0c00 	mov.w	ip, #0
 80025d0:	f1bb 03fa 	subs.w	r3, fp, #250	; 0xfa
 80025d4:	f14c 34ff 	adc.w	r4, ip, #4294967295	; 0xffffffff
 80025d8:	428b      	cmp	r3, r1
 80025da:	eb74 0302 	sbcs.w	r3, r4, r2
 80025de:	db02      	blt.n	80025e6 <state_driving_iterate+0xae6>
					{
						currentFault = true;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
				for (int y = 0; y < brakeSensors; y++)
 80025e6:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80025ea:	3301      	adds	r3, #1
 80025ec:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80025f0:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 80025f4:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 80025f8:	429a      	cmp	r2, r3
 80025fa:	dbb5      	blt.n	8002568 <state_driving_iterate+0xa68>
					}
				}
				if (CC_GlobalState->brakeAdcValues[i] <= CC_GlobalState->brakeMin[i] - POT_DESYNC
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <state_driving_iterate+0xb78>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002604:	3214      	adds	r2, #20
 8002606:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <state_driving_iterate+0xb78>)
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002612:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	3bfa      	subs	r3, #250	; 0xfa
 800261e:	429a      	cmp	r2, r3
 8002620:	d912      	bls.n	8002648 <state_driving_iterate+0xb48>
						|| CC_GlobalState->brakeAdcValues[i] >= CC_GlobalState->brakeMax[i] + POT_DESYNC)
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <state_driving_iterate+0xb78>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800262a:	3214      	adds	r2, #20
 800262c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <state_driving_iterate+0xb78>)
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002638:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	33fa      	adds	r3, #250	; 0xfa
 8002644:	429a      	cmp	r2, r3
 8002646:	d302      	bcc.n	800264e <state_driving_iterate+0xb4e>
				{
					currentFault = true;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
			for (int i = 0; i < brakeSensors; i++)
 800264e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002652:	3301      	adds	r3, #1
 8002654:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002658:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 800265c:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002660:	429a      	cmp	r2, r3
 8002662:	f6ff af7d 	blt.w	8002560 <state_driving_iterate+0xa60>
				}
			}
			for (int i = 0; i < accelSensors; i++)
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800266c:	e07f      	b.n	800276e <state_driving_iterate+0xc6e>
			{
				for (int y = 0; y < accelSensors; y++)
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8002674:	e048      	b.n	8002708 <state_driving_iterate+0xc08>
 8002676:	bf00      	nop
 8002678:	200049e0 	.word	0x200049e0
 800267c:	cccccccd 	.word	0xcccccccd
				{
					if(accel_travel[i] >= (int64_t)accel_travel[y]+POT_DESYNC || accel_travel[i] <= (int64_t)accel_travel[i]-POT_DESYNC)
 8002680:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 800268a:	4413      	add	r3, r2
 800268c:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8002690:	4619      	mov	r1, r3
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 80026a0:	4403      	add	r3, r0
 80026a2:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80026a6:	469b      	mov	fp, r3
 80026a8:	f04f 0c00 	mov.w	ip, #0
 80026ac:	f11b 03fa 	adds.w	r3, fp, #250	; 0xfa
 80026b0:	f14c 0400 	adc.w	r4, ip, #0
 80026b4:	4299      	cmp	r1, r3
 80026b6:	eb72 0304 	sbcs.w	r3, r2, r4
 80026ba:	da1d      	bge.n	80026f8 <state_driving_iterate+0xbf8>
 80026bc:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80026c6:	4413      	add	r3, r2
 80026c8:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 80026dc:	4403      	add	r3, r0
 80026de:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80026e2:	469b      	mov	fp, r3
 80026e4:	f04f 0c00 	mov.w	ip, #0
 80026e8:	f1bb 03fa 	subs.w	r3, fp, #250	; 0xfa
 80026ec:	f14c 34ff 	adc.w	r4, ip, #4294967295	; 0xffffffff
 80026f0:	428b      	cmp	r3, r1
 80026f2:	eb74 0302 	sbcs.w	r3, r4, r2
 80026f6:	db02      	blt.n	80026fe <state_driving_iterate+0xbfe>
					{
						currentFault = true;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
				for (int y = 0; y < accelSensors; y++)
 80026fe:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002702:	3301      	adds	r3, #1
 8002704:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8002708:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 800270c:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8002710:	429a      	cmp	r2, r3
 8002712:	dbb5      	blt.n	8002680 <state_driving_iterate+0xb80>
						//CC_LogInfo("ADC Desync\r\n", strlen("ADC Desync\r\n"));
					}
				}
				if (CC_GlobalState->accelAdcValues[i] <= CC_GlobalState->accelMin[i] - POT_DESYNC
 8002714:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <state_driving_iterate+0xcb0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 800271c:	3278      	adds	r2, #120	; 0x78
 800271e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002722:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <state_driving_iterate+0xcb0>)
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800272a:	f503 7393 	add.w	r3, r3, #294	; 0x126
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	3bfa      	subs	r3, #250	; 0xfa
 8002736:	429a      	cmp	r2, r3
 8002738:	d911      	bls.n	800275e <state_driving_iterate+0xc5e>
						|| CC_GlobalState->accelAdcValues[i] >= CC_GlobalState->accelMax[i] + POT_DESYNC)
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <state_driving_iterate+0xcb0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8002742:	3278      	adds	r2, #120	; 0x78
 8002744:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <state_driving_iterate+0xcb0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8d7 127c 	ldr.w	r1, [r7, #636]	; 0x27c
 8002750:	f501 7195 	add.w	r1, r1, #298	; 0x12a
 8002754:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002758:	33fa      	adds	r3, #250	; 0xfa
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <state_driving_iterate+0xc64>
				{
					currentFault = true;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
			for (int i = 0; i < accelSensors; i++)
 8002764:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002768:	3301      	adds	r3, #1
 800276a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800276e:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 8002772:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8002776:	429a      	cmp	r2, r3
 8002778:	f6ff af79 	blt.w	800266e <state_driving_iterate+0xb6e>
					//CC_LogInfo("ADC Range Error\r\n", strlen("ADC Range Error\r\n"));
				}
			}
			if(currentFault)
 800277c:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8002780:	2b00      	cmp	r3, #0
 8002782:	d017      	beq.n	80027b4 <state_driving_iterate+0xcb4>
			{
				if(!CC_GlobalState->faultDetected)
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <state_driving_iterate+0xcb0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 800278c:	f083 0301 	eor.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <state_driving_iterate+0xca2>
				{
					CC_GlobalState->implausibleTicks = HAL_GetTick();
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <state_driving_iterate+0xcb0>)
 8002798:	681c      	ldr	r4, [r3, #0]
 800279a:	f001 fafd 	bl	8003d98 <HAL_GetTick>
 800279e:	4603      	mov	r3, r0
 80027a0:	62e3      	str	r3, [r4, #44]	; 0x2c
				}
				CC_GlobalState->faultDetected = true;
 80027a2:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <state_driving_iterate+0xcb0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2535 	strb.w	r2, [r3, #1333]	; 0x535
 80027ac:	e018      	b.n	80027e0 <state_driving_iterate+0xce0>
 80027ae:	bf00      	nop
 80027b0:	200049e0 	.word	0x200049e0
			}
			else if(!currentFault && CC_GlobalState->faultDetected)
 80027b4:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00e      	beq.n	80027e0 <state_driving_iterate+0xce0>
 80027c2:	4bbd      	ldr	r3, [pc, #756]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <state_driving_iterate+0xce0>
			{
				CC_GlobalState->faultDetected = false;
 80027ce:	4bba      	ldr	r3, [pc, #744]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2535 	strb.w	r2, [r3, #1333]	; 0x535
				CC_GlobalState->implausibleTicks = 0;
 80027d8:	4bb7      	ldr	r3, [pc, #732]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}

		/* Average 2 Brake Travel Positions */
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 80027e0:	4bb5      	ldr	r3, [pc, #724]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d039      	beq.n	8002860 <state_driving_iterate+0xd60>
 80027ec:	4bb2      	ldr	r3, [pc, #712]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d033      	beq.n	8002860 <state_driving_iterate+0xd60>
		{
			CC_GlobalState->brakeTravel = MAX_DUTY_CYCLE-((brake_travel[0]+brake_travel[1])/2);
 80027f8:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80027fc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002800:	4413      	add	r3, r2
 8002802:	085a      	lsrs	r2, r3, #1
 8002804:	4bac      	ldr	r3, [pc, #688]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f5c2 727a 	rsb	r2, r2, #1000	; 0x3e8
 800280c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
			CC_GlobalState->accelTravel = MAX_DUTY_CYCLE-((accel_travel[0]+accel_travel[1]+accel_travel[2])/3);
 8002810:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002814:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002818:	441a      	add	r2, r3
 800281a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800281e:	4413      	add	r3, r2
 8002820:	4aa6      	ldr	r2, [pc, #664]	; (8002abc <state_driving_iterate+0xfbc>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	085a      	lsrs	r2, r3, #1
 8002828:	4ba3      	ldr	r3, [pc, #652]	; (8002ab8 <state_driving_iterate+0xfb8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f5c2 727a 	rsb	r2, r2, #1000	; 0x3e8
 8002830:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c

			if((int32_t)CC_GlobalState->accelTravel < 0)
 8002834:	4ba0      	ldr	r3, [pc, #640]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 800283c:	2b00      	cmp	r3, #0
 800283e:	da04      	bge.n	800284a <state_driving_iterate+0xd4a>
			{
				CC_GlobalState->accelTravel = 0;
 8002840:	4b9d      	ldr	r3, [pc, #628]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2200      	movs	r2, #0
 8002846:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
			}
			if((int32_t)CC_GlobalState->brakeTravel < 0)
 800284a:	4b9b      	ldr	r3, [pc, #620]	; (8002ab8 <state_driving_iterate+0xfb8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8002852:	2b00      	cmp	r3, #0
 8002854:	da04      	bge.n	8002860 <state_driving_iterate+0xd60>
			{
				CC_GlobalState->brakeTravel = 0;
 8002856:	4b98      	ldr	r3, [pc, #608]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
			}
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8002860:	4b95      	ldr	r3, [pc, #596]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8002868:	4618      	mov	r0, r3
 800286a:	f005 fc5b 	bl	8008124 <osSemaphoreRelease>
	}

	/* Echo Pedal Positions */
	if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 800286e:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8002876:	2b00      	cmp	r3, #0

	/*
	 * If Throttle and Brake Implausibility State Clock < 100ms
	 * Suspend Tractive System Operations
	 */
	if(CC_GlobalState->faultDetected
 8002878:	4b8f      	ldr	r3, [pc, #572]	; (8002ab8 <state_driving_iterate+0xfb8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01f      	beq.n	80028c4 <state_driving_iterate+0xdc4>
			&& !CC_GlobalState->ADC_Debug
 8002884:	4b8c      	ldr	r3, [pc, #560]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	7e5b      	ldrb	r3, [r3, #25]
 800288a:	f083 0301 	eor.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d017      	beq.n	80028c4 <state_driving_iterate+0xdc4>
			&& CC_GlobalState->tractiveActive
 8002894:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800289c:	2b00      	cmp	r3, #0
 800289e:	d011      	beq.n	80028c4 <state_driving_iterate+0xdc4>
			&& (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 100)
 80028a0:	f001 fa7a 	bl	8003d98 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b63      	cmp	r3, #99	; 0x63
 80028b0:	d908      	bls.n	80028c4 <state_driving_iterate+0xdc4>
	{
		CC_GlobalState->tractiveActive = false;
 80028b2:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534
		CC_LogInfo("Disabling Tractive Operations\r\n", strlen("Disabling Tractive Operations\r\n"));
 80028bc:	211f      	movs	r1, #31
 80028be:	4880      	ldr	r0, [pc, #512]	; (8002ac0 <state_driving_iterate+0xfc0>)
 80028c0:	f000 ffe2 	bl	8003888 <CC_LogInfo>
	/*
	 * Motor Control Commands
	 */

	/* Enable Script to Execute on Inverters */
	if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) % 60 == 0
 80028c4:	f001 fa68 	bl	8003d98 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b7b      	ldr	r3, [pc, #492]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	1ad1      	subs	r1, r2, r3
 80028d2:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <state_driving_iterate+0xfc4>)
 80028d4:	fba3 2301 	umull	r2, r3, r3, r1
 80028d8:	095a      	lsrs	r2, r3, #5
 80028da:	4613      	mov	r3, r2
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	1aca      	subs	r2, r1, r3
 80028e4:	2a00      	cmp	r2, #0
 80028e6:	d15b      	bne.n	80029a0 <state_driving_iterate+0xea0>
			&& CC_GlobalState->rollingAccelValues[0] > 0
 80028e8:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d055      	beq.n	80029a0 <state_driving_iterate+0xea0>
			&& CC_GlobalState->rollingBrakeValues[0])
 80028f4:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d04f      	beq.n	80029a0 <state_driving_iterate+0xea0>
	{
		/* Run MicroBasic Script on Inverter */
		CC_SetBool_t runLeftScript = Compose_CC_SetBool(INVERTER_LEFT_NODE_ID, 0x01, 0xFFFFFFFF);
 8002900:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8002904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002908:	2201      	movs	r2, #1
 800290a:	2164      	movs	r1, #100	; 0x64
 800290c:	f7fd ff80 	bl	8000810 <Compose_CC_SetBool>
		CAN_TxHeaderTypeDef runLeftHeader =
 8002910:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002914:	461a      	mov	r2, r3
 8002916:	2300      	movs	r3, #0
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	6053      	str	r3, [r2, #4]
 800291c:	6093      	str	r3, [r2, #8]
 800291e:	60d3      	str	r3, [r2, #12]
 8002920:	6113      	str	r3, [r2, #16]
 8002922:	6153      	str	r3, [r2, #20]
		{
				.StdId = runLeftScript.id,
 8002924:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002928:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef runLeftHeader =
 800292a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002934:	2208      	movs	r2, #8
 8002936:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_STD,
				.RTR = CAN_RTR_DATA,
				.DLC = 8,
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&CAN_1, &runLeftHeader, runLeftScript.data, &CC_GlobalState->CAN1_TxMailbox);
 8002938:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <state_driving_iterate+0xfb8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002942:	1d1a      	adds	r2, r3, #4
 8002944:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002948:	4603      	mov	r3, r0
 800294a:	485f      	ldr	r0, [pc, #380]	; (8002ac8 <state_driving_iterate+0xfc8>)
 800294c:	f002 f940 	bl	8004bd0 <HAL_CAN_AddTxMessage>

		CC_SetBool_t runRightScript = Compose_CC_SetBool(INVERTER_RIGHT_NODE_ID, 0x01, 0xFFFFFFFF);
 8002950:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8002954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002958:	2201      	movs	r2, #1
 800295a:	2165      	movs	r1, #101	; 0x65
 800295c:	f7fd ff58 	bl	8000810 <Compose_CC_SetBool>
		CAN_TxHeaderTypeDef runRightHeader =
 8002960:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002964:	461a      	mov	r2, r3
 8002966:	2300      	movs	r3, #0
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	6053      	str	r3, [r2, #4]
 800296c:	6093      	str	r3, [r2, #8]
 800296e:	60d3      	str	r3, [r2, #12]
 8002970:	6113      	str	r3, [r2, #16]
 8002972:	6153      	str	r3, [r2, #20]
		{
				.StdId = runRightScript.id,
 8002974:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002978:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef runRightHeader =
 800297a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002984:	2208      	movs	r2, #8
 8002986:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_STD,
				.RTR = CAN_RTR_DATA,
				.DLC = 8,
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&CAN_1, &runRightHeader, runRightScript.data, &CC_GlobalState->CAN1_TxMailbox);
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <state_driving_iterate+0xfb8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002992:	1d1a      	adds	r2, r3, #4
 8002994:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002998:	4603      	mov	r3, r0
 800299a:	484b      	ldr	r0, [pc, #300]	; (8002ac8 <state_driving_iterate+0xfc8>)
 800299c:	f002 f918 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	}

	/* Send Accel Command */
	if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) % 36 == 0
 80029a0:	f001 f9fa 	bl	8003d98 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	1ad1      	subs	r1, r2, r3
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <state_driving_iterate+0xfcc>)
 80029b0:	fba3 2301 	umull	r2, r3, r3, r1
 80029b4:	08da      	lsrs	r2, r3, #3
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	1aca      	subs	r2, r1, r3
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	f040 808d 	bne.w	8002ae0 <state_driving_iterate+0xfe0>
			&& CC_GlobalState->faultDetected
 80029c6:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8086 	beq.w	8002ae0 <state_driving_iterate+0xfe0>
			&& CC_GlobalState->rollingAccelValues[0] > 0
 80029d4:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d07f      	beq.n	8002ae0 <state_driving_iterate+0xfe0>
			&& CC_GlobalState->rollingBrakeValues[0])
 80029e0:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d079      	beq.n	8002ae0 <state_driving_iterate+0xfe0>
	{
		/* Generate Desired Motor Command Value */
		len = sprintf(x, "Motor Command: %li %li\r\n", CC_GlobalState->accelTravel, CC_GlobalState->brakeTravel);
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <state_driving_iterate+0xfb8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80029fc:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 8002a00:	4933      	ldr	r1, [pc, #204]	; (8002ad0 <state_driving_iterate+0xfd0>)
 8002a02:	f008 ff41 	bl	800b888 <siprintf>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
		CC_LogInfo(x, len);
 8002a0c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8002a10:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 ff37 	bl	8003888 <CC_LogInfo>

		/* Send Left Accel Command */
		CC_SetVariable_t accelLeftCommand = Compose_CC_SetVariable(INVERTER_LEFT_NODE_ID,
				0x01,
				CC_GlobalState->accelTravel);
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
		CC_SetVariable_t accelLeftCommand = Compose_CC_SetVariable(INVERTER_LEFT_NODE_ID,
 8002a22:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8002a26:	2201      	movs	r2, #1
 8002a28:	2164      	movs	r1, #100	; 0x64
 8002a2a:	f7fd feb9 	bl	80007a0 <Compose_CC_SetVariable>
		CAN_TxHeaderTypeDef accelLeftHeader =
 8002a2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a32:	461a      	mov	r2, r3
 8002a34:	2300      	movs	r3, #0
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	6053      	str	r3, [r2, #4]
 8002a3a:	6093      	str	r3, [r2, #8]
 8002a3c:	60d3      	str	r3, [r2, #12]
 8002a3e:	6113      	str	r3, [r2, #16]
 8002a40:	6153      	str	r3, [r2, #20]
		{
				.StdId = accelLeftCommand.id,
 8002a42:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a46:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef accelLeftHeader =
 8002a48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a52:	2208      	movs	r2, #8
 8002a54:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_STD,
				.RTR = CAN_RTR_DATA,
				.DLC = 8,
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&CAN_1, &accelLeftHeader, accelLeftCommand.data, &CC_GlobalState->CAN1_TxMailbox);
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a60:	1d1a      	adds	r2, r3, #4
 8002a62:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002a66:	4603      	mov	r3, r0
 8002a68:	4817      	ldr	r0, [pc, #92]	; (8002ac8 <state_driving_iterate+0xfc8>)
 8002a6a:	f002 f8b1 	bl	8004bd0 <HAL_CAN_AddTxMessage>

		/* Send Right Accel Command */
		CC_SetVariable_t accelRightCommand = Compose_CC_SetVariable(INVERTER_RIGHT_NODE_ID,
				0x01,
				CC_GlobalState->accelTravel);
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
		CC_SetVariable_t accelRightCommand = Compose_CC_SetVariable(INVERTER_RIGHT_NODE_ID,
 8002a76:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	2165      	movs	r1, #101	; 0x65
 8002a7e:	f7fd fe8f 	bl	80007a0 <Compose_CC_SetVariable>
		CAN_TxHeaderTypeDef accelRightHeader =
 8002a82:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a86:	461a      	mov	r2, r3
 8002a88:	2300      	movs	r3, #0
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	6053      	str	r3, [r2, #4]
 8002a8e:	6093      	str	r3, [r2, #8]
 8002a90:	60d3      	str	r3, [r2, #12]
 8002a92:	6113      	str	r3, [r2, #16]
 8002a94:	6153      	str	r3, [r2, #20]
		{
				.StdId = accelRightCommand.id,
 8002a96:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002a9a:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef accelRightHeader =
 8002a9c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_STD,
				.RTR = CAN_RTR_DATA,
				.DLC = 8,
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&CAN_1, &accelRightHeader, accelRightCommand.data, &CC_GlobalState->CAN1_TxMailbox);
 8002aaa:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <state_driving_iterate+0xfb8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ab4:	1d1a      	adds	r2, r3, #4
 8002ab6:	e00d      	b.n	8002ad4 <state_driving_iterate+0xfd4>
 8002ab8:	200049e0 	.word	0x200049e0
 8002abc:	aaaaaaab 	.word	0xaaaaaaab
 8002ac0:	0800c120 	.word	0x0800c120
 8002ac4:	88888889 	.word	0x88888889
 8002ac8:	20004bcc 	.word	0x20004bcc
 8002acc:	38e38e39 	.word	0x38e38e39
 8002ad0:	0800c140 	.word	0x0800c140
 8002ad4:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002ad8:	4603      	mov	r3, r0
 8002ada:	487a      	ldr	r0, [pc, #488]	; (8002cc4 <state_driving_iterate+0x11c4>)
 8002adc:	f002 f878 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	}

	/* Send Brake Travel Command */
	if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) % 47 == 0
 8002ae0:	f001 f95a 	bl	8003d98 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b78      	ldr	r3, [pc, #480]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	1ad1      	subs	r1, r2, r3
 8002aee:	4b77      	ldr	r3, [pc, #476]	; (8002ccc <state_driving_iterate+0x11cc>)
 8002af0:	fba3 2301 	umull	r2, r3, r3, r1
 8002af4:	095a      	lsrs	r2, r3, #5
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	1aca      	subs	r2, r1, r3
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	d15f      	bne.n	8002bc6 <state_driving_iterate+0x10c6>
			&& CC_GlobalState->rollingAccelValues[0] > 0
 8002b06:	4b70      	ldr	r3, [pc, #448]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d059      	beq.n	8002bc6 <state_driving_iterate+0x10c6>
			&& CC_GlobalState->rollingBrakeValues[0])
 8002b12:	4b6d      	ldr	r3, [pc, #436]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d053      	beq.n	8002bc6 <state_driving_iterate+0x10c6>
	{
		/* Send Left Brake Command */
		CC_SetVariable_t brakeLeftCommand = Compose_CC_SetVariable(INVERTER_LEFT_NODE_ID,
				0x02,
				CC_GlobalState->brakeTravel);
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
		CC_SetVariable_t brakeLeftCommand = Compose_CC_SetVariable(INVERTER_LEFT_NODE_ID,
 8002b26:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	2164      	movs	r1, #100	; 0x64
 8002b2e:	f7fd fe37 	bl	80007a0 <Compose_CC_SetVariable>
		CAN_TxHeaderTypeDef brakeLeftHeader =
 8002b32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b36:	461a      	mov	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	6053      	str	r3, [r2, #4]
 8002b3e:	6093      	str	r3, [r2, #8]
 8002b40:	60d3      	str	r3, [r2, #12]
 8002b42:	6113      	str	r3, [r2, #16]
 8002b44:	6153      	str	r3, [r2, #20]
		{
				.StdId = brakeLeftCommand.id,
 8002b46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b4a:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef brakeLeftHeader =
 8002b4c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b56:	2208      	movs	r2, #8
 8002b58:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_STD,
				.RTR = CAN_RTR_DATA,
				.DLC = 8,
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&CAN_1, &brakeLeftHeader, brakeLeftCommand.data, &CC_GlobalState->CAN1_TxMailbox);
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b64:	1d1a      	adds	r2, r3, #4
 8002b66:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4855      	ldr	r0, [pc, #340]	; (8002cc4 <state_driving_iterate+0x11c4>)
 8002b6e:	f002 f82f 	bl	8004bd0 <HAL_CAN_AddTxMessage>

		/* Send Right Brake Command */
		CC_SetVariable_t brakeRightCommand = Compose_CC_SetVariable(INVERTER_RIGHT_NODE_ID,
				0x02,
				CC_GlobalState->brakeTravel);
 8002b72:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
		CC_SetVariable_t brakeRightCommand = Compose_CC_SetVariable(INVERTER_RIGHT_NODE_ID,
 8002b7a:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8002b7e:	2202      	movs	r2, #2
 8002b80:	2165      	movs	r1, #101	; 0x65
 8002b82:	f7fd fe0d 	bl	80007a0 <Compose_CC_SetVariable>
		CAN_TxHeaderTypeDef brakeRightHeader =
 8002b86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	6053      	str	r3, [r2, #4]
 8002b92:	6093      	str	r3, [r2, #8]
 8002b94:	60d3      	str	r3, [r2, #12]
 8002b96:	6113      	str	r3, [r2, #16]
 8002b98:	6153      	str	r3, [r2, #20]
		{
				.StdId = brakeRightCommand.id,
 8002b9a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b9e:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef brakeRightHeader =
 8002ba0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002baa:	2208      	movs	r2, #8
 8002bac:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_STD,
				.RTR = CAN_RTR_DATA,
				.DLC = 8,
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&CAN_1, &brakeRightHeader, brakeRightCommand.data, &CC_GlobalState->CAN1_TxMailbox);
 8002bae:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bb8:	1d1a      	adds	r2, r3, #4
 8002bba:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4840      	ldr	r0, [pc, #256]	; (8002cc4 <state_driving_iterate+0x11c4>)
 8002bc2:	f002 f805 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */

	if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) % 27 == 0
 8002bc6:	f001 f8e7 	bl	8003d98 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	1ad1      	subs	r1, r2, r3
 8002bd4:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <state_driving_iterate+0x11d0>)
 8002bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002bda:	1aca      	subs	r2, r1, r3
 8002bdc:	0852      	lsrs	r2, r2, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	091a      	lsrs	r2, r3, #4
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	00da      	lsls	r2, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	1aca      	subs	r2, r1, r3
 8002bee:	2a00      	cmp	r2, #0
 8002bf0:	d162      	bne.n	8002cb8 <state_driving_iterate+0x11b8>
			&& CC_GlobalState->rollingAccelValues[0] > 0
 8002bf2:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d05c      	beq.n	8002cb8 <state_driving_iterate+0x11b8>
			&& CC_GlobalState->rollingBrakeValues[0])
 8002bfe:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d056      	beq.n	8002cb8 <state_driving_iterate+0x11b8>
	{
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8002c12:	2120      	movs	r1, #32
 8002c14:	4618      	mov	r0, r3
 8002c16:	f005 fa1f 	bl	8008058 <osSemaphoreAcquire>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d11d      	bne.n	8002c5c <state_driving_iterate+0x115c>
		{
			if(CC_GlobalState->brakeTravel > 10)
 8002c20:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8002c28:	2b0a      	cmp	r3, #10
 8002c2a:	d908      	bls.n	8002c3e <state_driving_iterate+0x113e>
			{
				CC_GlobalState->pdmTrackState = CC_GlobalState->pdmTrackState | BRAKE_LIGHT_MASK;
 8002c2c:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c32:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c3a:	649a      	str	r2, [r3, #72]	; 0x48
 8002c3c:	e007      	b.n	8002c4e <state_driving_iterate+0x114e>

			}
			else
			{
				CC_GlobalState->pdmTrackState = CC_GlobalState->pdmTrackState & (~BRAKE_LIGHT_MASK);
 8002c3e:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c44:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4c:	649a      	str	r2, [r3, #72]	; 0x48
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8002c56:	4618      	mov	r0, r3
 8002c58:	f005 fa64 	bl	8008124 <osSemaphoreRelease>
		}
		PDM_SetChannelStates_t brakeLightState = Compose_PDM_SetChannelStates(CC_GlobalState->pdmTrackState);
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd ffdf 	bl	8000c2c <Compose_PDM_SetChannelStates>
		CAN_TxHeaderTypeDef brakeHeader =
 8002c6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c72:	461a      	mov	r2, r3
 8002c74:	2300      	movs	r3, #0
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	6053      	str	r3, [r2, #4]
 8002c7a:	6093      	str	r3, [r2, #8]
 8002c7c:	60d3      	str	r3, [r2, #12]
 8002c7e:	6113      	str	r3, [r2, #16]
 8002c80:	6153      	str	r3, [r2, #20]
		{
				.ExtId = brakeLightState.id,
 8002c82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c86:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef brakeHeader =
 8002c88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c92:	2204      	movs	r2, #4
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(brakeLightState.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &brakeHeader, brakeLightState.data, &CC_GlobalState->CAN2_TxMailbox);
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <state_driving_iterate+0x11c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f103 0008 	add.w	r0, r3, #8
 8002ca6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002caa:	1d1a      	adds	r2, r3, #4
 8002cac:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <state_driving_iterate+0x11d4>)
 8002cb4:	f001 ff8c 	bl	8004bd0 <HAL_CAN_AddTxMessage>
	}
}
 8002cb8:	bf00      	nop
 8002cba:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002cc4:	20004bcc 	.word	0x20004bcc
 8002cc8:	200049e0 	.word	0x200049e0
 8002ccc:	ae4c415d 	.word	0xae4c415d
 8002cd0:	2f684bdb 	.word	0x2f684bdb
 8002cd4:	20004ba4 	.word	0x20004ba4

08002cd8 <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 8002ce0:	bf00      	nop
}
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002cf2:	463b      	mov	r3, r7
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002cfe:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d00:	4a2f      	ldr	r2, [pc, #188]	; (8002dc0 <MX_ADC1_Init+0xd4>)
 8002d02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d16:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d2c:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <MX_ADC1_Init+0xd8>)
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d38:	2203      	movs	r2, #3
 8002d3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d4a:	481c      	ldr	r0, [pc, #112]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d4c:	f001 f830 	bl	8003db0 <HAL_ADC_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002d56:	f000 fe31 	bl	80039bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002d62:	2307      	movs	r3, #7
 8002d64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d66:	463b      	mov	r3, r7
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4814      	ldr	r0, [pc, #80]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d6c:	f001 fa3e 	bl	80041ec <HAL_ADC_ConfigChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002d76:	f000 fe21 	bl	80039bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d7a:	2306      	movs	r3, #6
 8002d7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	4619      	mov	r1, r3
 8002d86:	480d      	ldr	r0, [pc, #52]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002d88:	f001 fa30 	bl	80041ec <HAL_ADC_ConfigChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002d92:	f000 fe13 	bl	80039bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002d96:	230e      	movs	r3, #14
 8002d98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d9e:	463b      	mov	r3, r7
 8002da0:	4619      	mov	r1, r3
 8002da2:	4806      	ldr	r0, [pc, #24]	; (8002dbc <MX_ADC1_Init+0xd0>)
 8002da4:	f001 fa22 	bl	80041ec <HAL_ADC_ConfigChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002dae:	f000 fe05 	bl	80039bc <Error_Handler>
  }

}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20004a2c 	.word	0x20004a2c
 8002dc0:	40012000 	.word	0x40012000
 8002dc4:	0f000001 	.word	0x0f000001

08002dc8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002dce:	463b      	mov	r3, r7
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002ddc:	4a28      	ldr	r2, [pc, #160]	; (8002e80 <MX_ADC2_Init+0xb8>)
 8002dde:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002de0:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002de6:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002dec:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002df2:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <MX_ADC2_Init+0xbc>)
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002e14:	2202      	movs	r2, #2
 8002e16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002e26:	4815      	ldr	r0, [pc, #84]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002e28:	f000 ffc2 	bl	8003db0 <HAL_ADC_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8002e32:	f000 fdc3 	bl	80039bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002e36:	2303      	movs	r3, #3
 8002e38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002e3e:	2307      	movs	r3, #7
 8002e40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e42:	463b      	mov	r3, r7
 8002e44:	4619      	mov	r1, r3
 8002e46:	480d      	ldr	r0, [pc, #52]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002e48:	f001 f9d0 	bl	80041ec <HAL_ADC_ConfigChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8002e52:	f000 fdb3 	bl	80039bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002e56:	2305      	movs	r3, #5
 8002e58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e5e:	463b      	mov	r3, r7
 8002e60:	4619      	mov	r1, r3
 8002e62:	4806      	ldr	r0, [pc, #24]	; (8002e7c <MX_ADC2_Init+0xb4>)
 8002e64:	f001 f9c2 	bl	80041ec <HAL_ADC_ConfigChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8002e6e:	f000 fda5 	bl	80039bc <Error_Handler>
  }

}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200049e4 	.word	0x200049e4
 8002e80:	40012100 	.word	0x40012100
 8002e84:	0f000001 	.word	0x0f000001

08002e88 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e8e:	463b      	mov	r3, r7
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002e9c:	4a21      	ldr	r2, [pc, #132]	; (8002f24 <MX_ADC3_Init+0x9c>)
 8002e9e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002eac:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002ec8:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <MX_ADC3_Init+0xa0>)
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002ee6:	480e      	ldr	r0, [pc, #56]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002ee8:	f000 ff62 	bl	8003db0 <HAL_ADC_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002ef2:	f000 fd63 	bl	80039bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002f02:	463b      	mov	r3, r7
 8002f04:	4619      	mov	r1, r3
 8002f06:	4806      	ldr	r0, [pc, #24]	; (8002f20 <MX_ADC3_Init+0x98>)
 8002f08:	f001 f970 	bl	80041ec <HAL_ADC_ConfigChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002f12:	f000 fd53 	bl	80039bc <Error_Handler>
  }

}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20004a74 	.word	0x20004a74
 8002f24:	40012200 	.word	0x40012200
 8002f28:	0f000001 	.word	0x0f000001

08002f2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	; 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a7b      	ldr	r2, [pc, #492]	; (8003138 <HAL_ADC_MspInit+0x20c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d16c      	bne.n	8003028 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f4e:	4b7b      	ldr	r3, [pc, #492]	; (800313c <HAL_ADC_MspInit+0x210>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	4a7a      	ldr	r2, [pc, #488]	; (800313c <HAL_ADC_MspInit+0x210>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5a:	4b78      	ldr	r3, [pc, #480]	; (800313c <HAL_ADC_MspInit+0x210>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	623b      	str	r3, [r7, #32]
 8002f64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4b75      	ldr	r3, [pc, #468]	; (800313c <HAL_ADC_MspInit+0x210>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a74      	ldr	r2, [pc, #464]	; (800313c <HAL_ADC_MspInit+0x210>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b72      	ldr	r3, [pc, #456]	; (800313c <HAL_ADC_MspInit+0x210>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7e:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_ADC_MspInit+0x210>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_ADC_MspInit+0x210>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b6c      	ldr	r3, [pc, #432]	; (800313c <HAL_ADC_MspInit+0x210>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002f96:	2350      	movs	r3, #80	; 0x50
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4865      	ldr	r0, [pc, #404]	; (8003140 <HAL_ADC_MspInit+0x214>)
 8002faa:	f002 fc7f 	bl	80058ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fae:	2310      	movs	r3, #16
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4860      	ldr	r0, [pc, #384]	; (8003144 <HAL_ADC_MspInit+0x218>)
 8002fc2:	f002 fc73 	bl	80058ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002fc6:	4b60      	ldr	r3, [pc, #384]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8002fc8:	4a60      	ldr	r2, [pc, #384]	; (800314c <HAL_ADC_MspInit+0x220>)
 8002fca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002fcc:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd2:	4b5d      	ldr	r3, [pc, #372]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fde:	4b5a      	ldr	r3, [pc, #360]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8002fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fe4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fe6:	4b58      	ldr	r3, [pc, #352]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8002fe8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fee:	4b56      	ldr	r3, [pc, #344]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8002ff0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ff4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ff6:	4b54      	ldr	r3, [pc, #336]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8002ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ffc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ffe:	4b52      	ldr	r3, [pc, #328]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003004:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8003006:	2200      	movs	r2, #0
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800300a:	484f      	ldr	r0, [pc, #316]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 800300c:	f002 f8d8 	bl	80051c0 <HAL_DMA_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8003016:	f000 fcd1 	bl	80039bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
 8003020:	4a49      	ldr	r2, [pc, #292]	; (8003148 <HAL_ADC_MspInit+0x21c>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8003026:	e083      	b.n	8003130 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a48      	ldr	r2, [pc, #288]	; (8003150 <HAL_ADC_MspInit+0x224>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d155      	bne.n	80030de <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003032:	4b42      	ldr	r3, [pc, #264]	; (800313c <HAL_ADC_MspInit+0x210>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	4a41      	ldr	r2, [pc, #260]	; (800313c <HAL_ADC_MspInit+0x210>)
 8003038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303c:	6453      	str	r3, [r2, #68]	; 0x44
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_ADC_MspInit+0x210>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304a:	4b3c      	ldr	r3, [pc, #240]	; (800313c <HAL_ADC_MspInit+0x210>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a3b      	ldr	r2, [pc, #236]	; (800313c <HAL_ADC_MspInit+0x210>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_ADC_MspInit+0x210>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BRAKE_PEDAL_ONE_Pin|BRAKE_PEDAL_TWO_Pin;
 8003062:	2328      	movs	r3, #40	; 0x28
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003066:	2303      	movs	r3, #3
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003072:	4619      	mov	r1, r3
 8003074:	4832      	ldr	r0, [pc, #200]	; (8003140 <HAL_ADC_MspInit+0x214>)
 8003076:	f002 fc19 	bl	80058ac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_ADC_MspInit+0x228>)
 800307c:	4a36      	ldr	r2, [pc, #216]	; (8003158 <HAL_ADC_MspInit+0x22c>)
 800307e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003080:	4b34      	ldr	r3, [pc, #208]	; (8003154 <HAL_ADC_MspInit+0x228>)
 8003082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003086:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003088:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_ADC_MspInit+0x228>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_ADC_MspInit+0x228>)
 8003090:	2200      	movs	r2, #0
 8003092:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_ADC_MspInit+0x228>)
 8003096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_ADC_MspInit+0x228>)
 800309e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030a2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_ADC_MspInit+0x228>)
 80030a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030aa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80030ac:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_ADC_MspInit+0x228>)
 80030ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030b2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_ADC_MspInit+0x228>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_ADC_MspInit+0x228>)
 80030bc:	2200      	movs	r2, #0
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80030c0:	4824      	ldr	r0, [pc, #144]	; (8003154 <HAL_ADC_MspInit+0x228>)
 80030c2:	f002 f87d 	bl	80051c0 <HAL_DMA_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 80030cc:	f000 fc76 	bl	80039bc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a20      	ldr	r2, [pc, #128]	; (8003154 <HAL_ADC_MspInit+0x228>)
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_ADC_MspInit+0x228>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80030dc:	e028      	b.n	8003130 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_ADC_MspInit+0x230>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d123      	bne.n	8003130 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_ADC_MspInit+0x210>)
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	4a13      	ldr	r2, [pc, #76]	; (800313c <HAL_ADC_MspInit+0x210>)
 80030ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f2:	6453      	str	r3, [r2, #68]	; 0x44
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_ADC_MspInit+0x210>)
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_ADC_MspInit+0x210>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	4a0d      	ldr	r2, [pc, #52]	; (800313c <HAL_ADC_MspInit+0x210>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6313      	str	r3, [r2, #48]	; 0x30
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_ADC_MspInit+0x210>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BRAKE_PRESSURE_Pin;
 8003118:	2304      	movs	r3, #4
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800311c:	2303      	movs	r3, #3
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BRAKE_PRESSURE_GPIO_Port, &GPIO_InitStruct);
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	4619      	mov	r1, r3
 800312a:	4805      	ldr	r0, [pc, #20]	; (8003140 <HAL_ADC_MspInit+0x214>)
 800312c:	f002 fbbe 	bl	80058ac <HAL_GPIO_Init>
}
 8003130:	bf00      	nop
 8003132:	3738      	adds	r7, #56	; 0x38
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40012000 	.word	0x40012000
 800313c:	40023800 	.word	0x40023800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020800 	.word	0x40020800
 8003148:	20004abc 	.word	0x20004abc
 800314c:	40026410 	.word	0x40026410
 8003150:	40012100 	.word	0x40012100
 8003154:	20004b1c 	.word	0x20004b1c
 8003158:	40026440 	.word	0x40026440
 800315c:	40012200 	.word	0x40012200

08003160 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <MX_CAN1_Init+0x64>)
 8003166:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <MX_CAN1_Init+0x68>)
 8003168:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <MX_CAN1_Init+0x64>)
 800316c:	2202      	movs	r2, #2
 800316e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <MX_CAN1_Init+0x64>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <MX_CAN1_Init+0x64>)
 8003178:	2200      	movs	r2, #0
 800317a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_CAN1_Init+0x64>)
 800317e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003182:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <MX_CAN1_Init+0x64>)
 8003186:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800318a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <MX_CAN1_Init+0x64>)
 800318e:	2200      	movs	r2, #0
 8003190:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <MX_CAN1_Init+0x64>)
 8003194:	2200      	movs	r2, #0
 8003196:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <MX_CAN1_Init+0x64>)
 800319a:	2200      	movs	r2, #0
 800319c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <MX_CAN1_Init+0x64>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <MX_CAN1_Init+0x64>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_CAN1_Init+0x64>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <MX_CAN1_Init+0x64>)
 80031b2:	f001 fae1 	bl	8004778 <HAL_CAN_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80031bc:	f000 fbfe 	bl	80039bc <Error_Handler>
  }

}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20004bcc 	.word	0x20004bcc
 80031c8:	40006400 	.word	0x40006400

080031cc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <MX_CAN2_Init+0x64>)
 80031d2:	4a18      	ldr	r2, [pc, #96]	; (8003234 <MX_CAN2_Init+0x68>)
 80031d4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <MX_CAN2_Init+0x64>)
 80031d8:	2202      	movs	r2, #2
 80031da:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <MX_CAN2_Init+0x64>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <MX_CAN2_Init+0x64>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <MX_CAN2_Init+0x64>)
 80031ea:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80031ee:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <MX_CAN2_Init+0x64>)
 80031f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031f6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <MX_CAN2_Init+0x64>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <MX_CAN2_Init+0x64>)
 8003200:	2200      	movs	r2, #0
 8003202:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <MX_CAN2_Init+0x64>)
 8003206:	2200      	movs	r2, #0
 8003208:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <MX_CAN2_Init+0x64>)
 800320c:	2200      	movs	r2, #0
 800320e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <MX_CAN2_Init+0x64>)
 8003212:	2200      	movs	r2, #0
 8003214:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <MX_CAN2_Init+0x64>)
 8003218:	2200      	movs	r2, #0
 800321a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800321c:	4804      	ldr	r0, [pc, #16]	; (8003230 <MX_CAN2_Init+0x64>)
 800321e:	f001 faab 	bl	8004778 <HAL_CAN_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003228:	f000 fbc8 	bl	80039bc <Error_Handler>
  }

}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20004ba4 	.word	0x20004ba4
 8003234:	40006800 	.word	0x40006800

08003238 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 800323c:	4b17      	ldr	r3, [pc, #92]	; (800329c <MX_CAN3_Init+0x64>)
 800323e:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <MX_CAN3_Init+0x68>)
 8003240:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 2;
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <MX_CAN3_Init+0x64>)
 8003244:	2202      	movs	r2, #2
 8003246:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8003248:	4b14      	ldr	r3, [pc, #80]	; (800329c <MX_CAN3_Init+0x64>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <MX_CAN3_Init+0x64>)
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <MX_CAN3_Init+0x64>)
 8003256:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800325a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <MX_CAN3_Init+0x64>)
 800325e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003262:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8003264:	4b0d      	ldr	r3, [pc, #52]	; (800329c <MX_CAN3_Init+0x64>)
 8003266:	2200      	movs	r2, #0
 8003268:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <MX_CAN3_Init+0x64>)
 800326c:	2200      	movs	r2, #0
 800326e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <MX_CAN3_Init+0x64>)
 8003272:	2200      	movs	r2, #0
 8003274:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <MX_CAN3_Init+0x64>)
 8003278:	2200      	movs	r2, #0
 800327a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <MX_CAN3_Init+0x64>)
 800327e:	2200      	movs	r2, #0
 8003280:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <MX_CAN3_Init+0x64>)
 8003284:	2200      	movs	r2, #0
 8003286:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8003288:	4804      	ldr	r0, [pc, #16]	; (800329c <MX_CAN3_Init+0x64>)
 800328a:	f001 fa75 	bl	8004778 <HAL_CAN_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8003294:	f000 fb92 	bl	80039bc <Error_Handler>
  }

}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20004b7c 	.word	0x20004b7c
 80032a0:	40003400 	.word	0x40003400

080032a4 <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b092      	sub	sp, #72	; 0x48
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a7e      	ldr	r2, [pc, #504]	; (80034bc <HAL_CAN_MspInit+0x218>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d132      	bne.n	800332c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80032c6:	4b7e      	ldr	r3, [pc, #504]	; (80034c0 <HAL_CAN_MspInit+0x21c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	4a7c      	ldr	r2, [pc, #496]	; (80034c0 <HAL_CAN_MspInit+0x21c>)
 80032ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80032d0:	4b7b      	ldr	r3, [pc, #492]	; (80034c0 <HAL_CAN_MspInit+0x21c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d10b      	bne.n	80032f0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80032d8:	4b7a      	ldr	r3, [pc, #488]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4a79      	ldr	r2, [pc, #484]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80032de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032e2:	6413      	str	r3, [r2, #64]	; 0x40
 80032e4:	4b77      	ldr	r3, [pc, #476]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f0:	4b74      	ldr	r3, [pc, #464]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4a73      	ldr	r2, [pc, #460]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6313      	str	r3, [r2, #48]	; 0x30
 80032fc:	4b71      	ldr	r3, [pc, #452]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003308:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	2303      	movs	r3, #3
 8003318:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800331a:	2309      	movs	r3, #9
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003322:	4619      	mov	r1, r3
 8003324:	4868      	ldr	r0, [pc, #416]	; (80034c8 <HAL_CAN_MspInit+0x224>)
 8003326:	f002 fac1 	bl	80058ac <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 800332a:	e0c2      	b.n	80034b2 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a66      	ldr	r2, [pc, #408]	; (80034cc <HAL_CAN_MspInit+0x228>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d15c      	bne.n	80033f0 <HAL_CAN_MspInit+0x14c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8003336:	4b66      	ldr	r3, [pc, #408]	; (80034d0 <HAL_CAN_MspInit+0x22c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	4a64      	ldr	r2, [pc, #400]	; (80034d0 <HAL_CAN_MspInit+0x22c>)
 800333e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8003340:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_CAN_MspInit+0x22c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10b      	bne.n	8003360 <HAL_CAN_MspInit+0xbc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8003348:	4b5e      	ldr	r3, [pc, #376]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	4a5d      	ldr	r2, [pc, #372]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 800334e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003352:	6413      	str	r3, [r2, #64]	; 0x40
 8003354:	4b5b      	ldr	r3, [pc, #364]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 8003360:	4b5c      	ldr	r3, [pc, #368]	; (80034d4 <HAL_CAN_MspInit+0x230>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	4a5b      	ldr	r2, [pc, #364]	; (80034d4 <HAL_CAN_MspInit+0x230>)
 8003368:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 800336a:	4b5a      	ldr	r3, [pc, #360]	; (80034d4 <HAL_CAN_MspInit+0x230>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10b      	bne.n	800338a <HAL_CAN_MspInit+0xe6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8003372:	4b54      	ldr	r3, [pc, #336]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a53      	ldr	r2, [pc, #332]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003378:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b51      	ldr	r3, [pc, #324]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 800338a:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <HAL_CAN_MspInit+0x21c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	4a4b      	ldr	r2, [pc, #300]	; (80034c0 <HAL_CAN_MspInit+0x21c>)
 8003392:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_CAN_MspInit+0x21c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10b      	bne.n	80033b4 <HAL_CAN_MspInit+0x110>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800339c:	4b49      	ldr	r3, [pc, #292]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	4a48      	ldr	r2, [pc, #288]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80033a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a6:	6413      	str	r3, [r2, #64]	; 0x40
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b4:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	4a42      	ldr	r2, [pc, #264]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80033ba:	f043 0302 	orr.w	r3, r3, #2
 80033be:	6313      	str	r3, [r2, #48]	; 0x30
 80033c0:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80033cc:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80033de:	2309      	movs	r3, #9
 80033e0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033e6:	4619      	mov	r1, r3
 80033e8:	483b      	ldr	r0, [pc, #236]	; (80034d8 <HAL_CAN_MspInit+0x234>)
 80033ea:	f002 fa5f 	bl	80058ac <HAL_GPIO_Init>
}
 80033ee:	e060      	b.n	80034b2 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN3)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a39      	ldr	r2, [pc, #228]	; (80034dc <HAL_CAN_MspInit+0x238>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d15b      	bne.n	80034b2 <HAL_CAN_MspInit+0x20e>
    HAL_RCC_CAN3_CLK_ENABLED++;
 80033fa:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <HAL_CAN_MspInit+0x22c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	4a33      	ldr	r2, [pc, #204]	; (80034d0 <HAL_CAN_MspInit+0x22c>)
 8003402:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8003404:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <HAL_CAN_MspInit+0x22c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10b      	bne.n	8003424 <HAL_CAN_MspInit+0x180>
      __HAL_RCC_CAN3_CLK_ENABLE();
 800340c:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003416:	6413      	str	r3, [r2, #64]	; 0x40
 8003418:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 8003424:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_CAN_MspInit+0x230>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <HAL_CAN_MspInit+0x230>)
 800342c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <HAL_CAN_MspInit+0x230>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10b      	bne.n	800344e <HAL_CAN_MspInit+0x1aa>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 800343c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800344e:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_CAN_MspInit+0x21c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3301      	adds	r3, #1
 8003454:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_CAN_MspInit+0x21c>)
 8003456:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_CAN_MspInit+0x21c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10b      	bne.n	8003478 <HAL_CAN_MspInit+0x1d4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003460:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800346a:	6413      	str	r3, [r2, #64]	; 0x40
 800346c:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	4a11      	ldr	r2, [pc, #68]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6313      	str	r3, [r2, #48]	; 0x30
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <HAL_CAN_MspInit+0x220>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8003490:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349e:	2303      	movs	r3, #3
 80034a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80034a2:	230b      	movs	r3, #11
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034aa:	4619      	mov	r1, r3
 80034ac:	4806      	ldr	r0, [pc, #24]	; (80034c8 <HAL_CAN_MspInit+0x224>)
 80034ae:	f002 f9fd 	bl	80058ac <HAL_GPIO_Init>
}
 80034b2:	bf00      	nop
 80034b4:	3748      	adds	r7, #72	; 0x48
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40006400 	.word	0x40006400
 80034c0:	200000c0 	.word	0x200000c0
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40020000 	.word	0x40020000
 80034cc:	40006800 	.word	0x40006800
 80034d0:	200000c4 	.word	0x200000c4
 80034d4:	200000c8 	.word	0x200000c8
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40003400 	.word	0x40003400

080034e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <MX_DMA_Init+0x48>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <MX_DMA_Init+0x48>)
 80034ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <MX_DMA_Init+0x48>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	2038      	movs	r0, #56	; 0x38
 8003504:	f001 fe32 	bl	800516c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003508:	2038      	movs	r0, #56	; 0x38
 800350a:	f001 fe4b 	bl	80051a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	203a      	movs	r0, #58	; 0x3a
 8003514:	f001 fe2a 	bl	800516c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003518:	203a      	movs	r0, #58	; 0x3a
 800351a:	f001 fe43 	bl	80051a4 <HAL_NVIC_EnableIRQ>

}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800

0800352c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <MX_FREERTOS_Init+0x18>)
 8003532:	2100      	movs	r1, #0
 8003534:	4804      	ldr	r0, [pc, #16]	; (8003548 <MX_FREERTOS_Init+0x1c>)
 8003536:	f004 fc1d 	bl	8007d74 <osThreadNew>
 800353a:	4602      	mov	r2, r0
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <MX_FREERTOS_Init+0x20>)
 800353e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003540:	bf00      	nop
 8003542:	bd80      	pop	{r7, pc}
 8003544:	0800c198 	.word	0x0800c198
 8003548:	08003551 	.word	0x08003551
 800354c:	20004bf4 	.word	0x20004bf4

08003550 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003558:	2001      	movs	r0, #1
 800355a:	f004 fcb1 	bl	8007ec0 <osDelay>
 800355e:	e7fb      	b.n	8003558 <StartDefaultTask+0x8>

08003560 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003576:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <MX_GPIO_Init+0xd4>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <MX_GPIO_Init+0xd4>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <MX_GPIO_Init+0xd4>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <MX_GPIO_Init+0xd4>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a28      	ldr	r2, [pc, #160]	; (8003634 <MX_GPIO_Init+0xd4>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <MX_GPIO_Init+0xd4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <MX_GPIO_Init+0xd4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a22      	ldr	r2, [pc, #136]	; (8003634 <MX_GPIO_Init+0xd4>)
 80035ac:	f043 0310 	orr.w	r3, r3, #16
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <MX_GPIO_Init+0xd4>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035be:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <MX_GPIO_Init+0xd4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <MX_GPIO_Init+0xd4>)
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <MX_GPIO_Init+0xd4>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035dc:	4816      	ldr	r0, [pc, #88]	; (8003638 <MX_GPIO_Init+0xd8>)
 80035de:	f002 fb27 	bl	8005c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HSOUT_RTD_LED_Pin;
 80035e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e8:	2301      	movs	r3, #1
 80035ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f0:	2300      	movs	r3, #0
 80035f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HSOUT_RTD_LED_GPIO_Port, &GPIO_InitStruct);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4619      	mov	r1, r3
 80035fa:	480f      	ldr	r0, [pc, #60]	; (8003638 <MX_GPIO_Init+0xd8>)
 80035fc:	f002 f956 	bl	80058ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_INPUT_Pin;
 8003600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <MX_GPIO_Init+0xdc>)
 8003608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTD_INPUT_GPIO_Port, &GPIO_InitStruct);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	4619      	mov	r1, r3
 8003614:	4808      	ldr	r0, [pc, #32]	; (8003638 <MX_GPIO_Init+0xd8>)
 8003616:	f002 f949 	bl	80058ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	2103      	movs	r1, #3
 800361e:	2028      	movs	r0, #40	; 0x28
 8003620:	f001 fda4 	bl	800516c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003624:	2028      	movs	r0, #40	; 0x28
 8003626:	f001 fdbd 	bl	80051a4 <HAL_NVIC_EnableIRQ>

}
 800362a:	bf00      	nop
 800362c:	3728      	adds	r7, #40	; 0x28
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40021000 	.word	0x40021000
 800363c:	10110000 	.word	0x10110000

08003640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b0a0      	sub	sp, #128	; 0x80
 8003644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003646:	f000 fb86 	bl	8003d56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800364a:	f000 f8a3 	bl	8003794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800364e:	f7ff ff87 	bl	8003560 <MX_GPIO_Init>
  MX_DMA_Init();
 8003652:	f7ff ff45 	bl	80034e0 <MX_DMA_Init>
  MX_CAN1_Init();
 8003656:	f7ff fd83 	bl	8003160 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 800365a:	f000 fadf 	bl	8003c1c <MX_USART3_UART_Init>
  MX_CAN2_Init();
 800365e:	f7ff fdb5 	bl	80031cc <MX_CAN2_Init>
  MX_CAN3_Init();
 8003662:	f7ff fde9 	bl	8003238 <MX_CAN3_Init>
  MX_ADC2_Init();
 8003666:	f7ff fbaf 	bl	8002dc8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800366a:	f7ff fc0d 	bl	8002e88 <MX_ADC3_Init>
  MX_ADC1_Init();
 800366e:	f7ff fb3d 	bl	8002cec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8003672:	4842      	ldr	r0, [pc, #264]	; (800377c <main+0x13c>)
 8003674:	f001 fa68 	bl	8004b48 <HAL_CAN_Start>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <main+0x42>
	{
		Error_Handler();
 800367e:	f000 f99d 	bl	80039bc <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8003682:	483f      	ldr	r0, [pc, #252]	; (8003780 <main+0x140>)
 8003684:	f001 fa60 	bl	8004b48 <HAL_CAN_Start>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <main+0x52>
	{
		Error_Handler();
 800368e:	f000 f995 	bl	80039bc <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan3) != HAL_OK)
 8003692:	483c      	ldr	r0, [pc, #240]	; (8003784 <main+0x144>)
 8003694:	f001 fa58 	bl	8004b48 <HAL_CAN_Start>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <main+0x62>
	{
		Error_Handler();
 800369e:	f000 f98d 	bl	80039bc <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80036aa:	2301      	movs	r3, #1
 80036ac:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 80036ae:	2300      	movs	r3, #0
 80036b0:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 80036b2:	2301      	movs	r3, #1
 80036b4:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 80036b6:	2300      	movs	r3, #0
 80036b8:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 80036ba:	2300      	movs	r3, #0
 80036bc:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80036be:	2300      	movs	r3, #0
 80036c0:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 80036c2:	2301      	movs	r3, #1
 80036c4:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 80036c6:	230e      	movs	r3, #14
 80036c8:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 80036ca:	230e      	movs	r3, #14
 80036cc:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 80036d2:	2301      	movs	r3, #1
 80036d4:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 80036d6:	2300      	movs	r3, #0
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 80036da:	2301      	movs	r3, #1
 80036dc:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 80036de:	2300      	movs	r3, #0
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 80036e2:	2300      	movs	r3, #0
 80036e4:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 80036ea:	2301      	movs	r3, #1
 80036ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 80036ee:	230e      	movs	r3, #14
 80036f0:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 28;
 80036f2:	231c      	movs	r3, #28
 80036f4:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 80036fa:	2301      	movs	r3, #1
 80036fc:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 8003702:	2301      	movs	r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 8003712:	2301      	movs	r3, #1
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 8003716:	230e      	movs	r3, #14
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 800371a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800371e:	4619      	mov	r1, r3
 8003720:	4816      	ldr	r0, [pc, #88]	; (800377c <main+0x13c>)
 8003722:	f001 f925 	bl	8004970 <HAL_CAN_ConfigFilter>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <main+0xf0>
	{
		/* Filter configuration Error */
		Error_Handler();
 800372c:	f000 f946 	bl	80039bc <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8003730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003734:	4619      	mov	r1, r3
 8003736:	4812      	ldr	r0, [pc, #72]	; (8003780 <main+0x140>)
 8003738:	f001 f91a 	bl	8004970 <HAL_CAN_ConfigFilter>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <main+0x106>
	{
		/* Filter configuration Error */
		Error_Handler();
 8003742:	f000 f93b 	bl	80039bc <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	4619      	mov	r1, r3
 800374a:	480e      	ldr	r0, [pc, #56]	; (8003784 <main+0x144>)
 800374c:	f001 f910 	bl	8004970 <HAL_CAN_ConfigFilter>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <main+0x11a>
	{
		/* Filter configuration Error */
		Error_Handler();
 8003756:	f000 f931 	bl	80039bc <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 800375a:	480b      	ldr	r0, [pc, #44]	; (8003788 <main+0x148>)
 800375c:	f7fd f91d 	bl	800099a <fsm_new>
 8003760:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 8003762:	4a0a      	ldr	r2, [pc, #40]	; (800378c <main+0x14c>)
 8003764:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003766:	480a      	ldr	r0, [pc, #40]	; (8003790 <main+0x150>)
 8003768:	f004 fb04 	bl	8007d74 <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800376c:	f004 fa98 	bl	8007ca0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003770:	f7ff fedc 	bl	800352c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003774:	f004 fac8 	bl	8007d08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003778:	e7fe      	b.n	8003778 <main+0x138>
 800377a:	bf00      	nop
 800377c:	20004bcc 	.word	0x20004bcc
 8003780:	20004ba4 	.word	0x20004ba4
 8003784:	20004b7c 	.word	0x20004b7c
 8003788:	20000000 	.word	0x20000000
 800378c:	0800c1bc 	.word	0x0800c1bc
 8003790:	080038b1 	.word	0x080038b1

08003794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b0b8      	sub	sp, #224	; 0xe0
 8003798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800379a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800379e:	2234      	movs	r2, #52	; 0x34
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f007 ffaf 	bl	800b706 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037b8:	f107 0308 	add.w	r3, r7, #8
 80037bc:	2290      	movs	r2, #144	; 0x90
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f007 ffa0 	bl	800b706 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	4b2e      	ldr	r3, [pc, #184]	; (8003880 <SystemClock_Config+0xec>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	4a2d      	ldr	r2, [pc, #180]	; (8003880 <SystemClock_Config+0xec>)
 80037cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d0:	6413      	str	r3, [r2, #64]	; 0x40
 80037d2:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <SystemClock_Config+0xec>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037de:	4b29      	ldr	r3, [pc, #164]	; (8003884 <SystemClock_Config+0xf0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037e6:	4a27      	ldr	r2, [pc, #156]	; (8003884 <SystemClock_Config+0xf0>)
 80037e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b25      	ldr	r3, [pc, #148]	; (8003884 <SystemClock_Config+0xf0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037fa:	2302      	movs	r3, #2
 80037fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003800:	2301      	movs	r3, #1
 8003802:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003806:	2310      	movs	r3, #16
 8003808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003812:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003816:	4618      	mov	r0, r3
 8003818:	f002 fa48 	bl	8005cac <HAL_RCC_OscConfig>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003822:	f000 f8cb 	bl	80039bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003826:	230f      	movs	r3, #15
 8003828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003844:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f002 fcdc 	bl	8006208 <HAL_RCC_ClockConfig>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003856:	f000 f8b1 	bl	80039bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800385a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800385e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003860:	2300      	movs	r3, #0
 8003862:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003864:	f107 0308 	add.w	r3, r7, #8
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fed1 	bl	8006610 <HAL_RCCEx_PeriphCLKConfig>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8003874:	f000 f8a2 	bl	80039bc <Error_Handler>
  }
}
 8003878:	bf00      	nop
 800387a:	37e0      	adds	r7, #224	; 0xe0
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40023800 	.word	0x40023800
 8003884:	40007000 	.word	0x40007000

08003888 <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	b29a      	uxth	r2, r3
 8003896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <CC_LogInfo+0x24>)
 800389e:	f003 fd59 	bl	8007354 <HAL_UART_Transmit>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20004c38 	.word	0x20004c38

080038b0 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08c      	sub	sp, #48	; 0x30
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 80038b8:	2115      	movs	r1, #21
 80038ba:	4830      	ldr	r0, [pc, #192]	; (800397c <fsm_thread_mainLoop+0xcc>)
 80038bc:	f7ff ffe4 	bl	8003888 <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 80038c0:	492f      	ldr	r1, [pc, #188]	; (8003980 <fsm_thread_mainLoop+0xd0>)
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd f95c 	bl	8000b80 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 80038c8:	492e      	ldr	r1, [pc, #184]	; (8003984 <fsm_thread_mainLoop+0xd4>)
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd f90c 	bl	8000ae8 <fsm_reset>
	//fsm_changeState(fsm, &debugState, "Forcing debug state");
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80038d0:	e012      	b.n	80038f8 <fsm_thread_mainLoop+0x48>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 80038d2:	f107 0308 	add.w	r3, r7, #8
 80038d6:	331c      	adds	r3, #28
 80038d8:	f107 0208 	add.w	r2, r7, #8
 80038dc:	2100      	movs	r1, #0
 80038de:	482a      	ldr	r0, [pc, #168]	; (8003988 <fsm_thread_mainLoop+0xd8>)
 80038e0:	f001 fa51 	bl	8004d86 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN1Queue, &msg, 0U, 0U);
 80038e4:	4b29      	ldr	r3, [pc, #164]	; (800398c <fsm_thread_mainLoop+0xdc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8d3 0538 	ldr.w	r0, [r3, #1336]	; 0x538
 80038ec:	f107 0108 	add.w	r1, r7, #8
 80038f0:	2300      	movs	r3, #0
 80038f2:	2200      	movs	r2, #0
 80038f4:	f004 fcf4 	bl	80082e0 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80038f8:	2100      	movs	r1, #0
 80038fa:	4823      	ldr	r0, [pc, #140]	; (8003988 <fsm_thread_mainLoop+0xd8>)
 80038fc:	f001 fb55 	bl	8004faa <HAL_CAN_GetRxFifoFillLevel>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <fsm_thread_mainLoop+0x22>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.StdId);
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8003906:	e012      	b.n	800392e <fsm_thread_mainLoop+0x7e>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 8003908:	f107 0308 	add.w	r3, r7, #8
 800390c:	331c      	adds	r3, #28
 800390e:	f107 0208 	add.w	r2, r7, #8
 8003912:	2100      	movs	r1, #0
 8003914:	481e      	ldr	r0, [pc, #120]	; (8003990 <fsm_thread_mainLoop+0xe0>)
 8003916:	f001 fa36 	bl	8004d86 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN2Queue, &msg, 0U, 0U);
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <fsm_thread_mainLoop+0xdc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f8d3 053c 	ldr.w	r0, [r3, #1340]	; 0x53c
 8003922:	f107 0108 	add.w	r1, r7, #8
 8003926:	2300      	movs	r3, #0
 8003928:	2200      	movs	r2, #0
 800392a:	f004 fcd9 	bl	80082e0 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 800392e:	2100      	movs	r1, #0
 8003930:	4817      	ldr	r0, [pc, #92]	; (8003990 <fsm_thread_mainLoop+0xe0>)
 8003932:	f001 fb3a 	bl	8004faa <HAL_CAN_GetRxFifoFillLevel>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <fsm_thread_mainLoop+0x58>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 800393c:	e012      	b.n	8003964 <fsm_thread_mainLoop+0xb4>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 800393e:	f107 0308 	add.w	r3, r7, #8
 8003942:	331c      	adds	r3, #28
 8003944:	f107 0208 	add.w	r2, r7, #8
 8003948:	2100      	movs	r1, #0
 800394a:	4812      	ldr	r0, [pc, #72]	; (8003994 <fsm_thread_mainLoop+0xe4>)
 800394c:	f001 fa1b 	bl	8004d86 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN3Queue, &msg, 0U, 0U);
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <fsm_thread_mainLoop+0xdc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
 8003958:	f107 0108 	add.w	r1, r7, #8
 800395c:	2300      	movs	r3, #0
 800395e:	2200      	movs	r2, #0
 8003960:	f004 fcbe 	bl	80082e0 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8003964:	2100      	movs	r1, #0
 8003966:	480b      	ldr	r0, [pc, #44]	; (8003994 <fsm_thread_mainLoop+0xe4>)
 8003968:	f001 fb1f 	bl	8004faa <HAL_CAN_GetRxFifoFillLevel>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e5      	bne.n	800393e <fsm_thread_mainLoop+0x8e>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}
		fsm_iterate(fsm);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd f84a 	bl	8000a0c <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8003978:	e7be      	b.n	80038f8 <fsm_thread_mainLoop+0x48>
 800397a:	bf00      	nop
 800397c:	0800c168 	.word	0x0800c168
 8003980:	08003889 	.word	0x08003889
 8003984:	20000000 	.word	0x20000000
 8003988:	20004bcc 	.word	0x20004bcc
 800398c:	200049e0 	.word	0x200049e0
 8003990:	20004ba4 	.word	0x20004ba4
 8003994:	20004b7c 	.word	0x20004b7c

08003998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039aa:	f000 f9e1 	bl	8003d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40001400 	.word	0x40001400

080039bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <HAL_MspInit+0x44>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <HAL_MspInit+0x44>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <HAL_MspInit+0x44>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_MspInit+0x44>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <HAL_MspInit+0x44>)
 80039f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f4:	6453      	str	r3, [r2, #68]	; 0x44
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_MspInit+0x44>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800

08003a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08c      	sub	sp, #48	; 0x30
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003a24:	2200      	movs	r2, #0
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	2037      	movs	r0, #55	; 0x37
 8003a2a:	f001 fb9f 	bl	800516c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a2e:	2037      	movs	r0, #55	; 0x37
 8003a30:	f001 fbb8 	bl	80051a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <HAL_InitTick+0x9c>)
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <HAL_InitTick+0x9c>)
 8003a3a:	f043 0320 	orr.w	r3, r3, #32
 8003a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_InitTick+0x9c>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a4c:	f107 0210 	add.w	r2, r7, #16
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 fda8 	bl	80065ac <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f002 fd7e 	bl	800655c <HAL_RCC_GetPCLK1Freq>
 8003a60:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <HAL_InitTick+0xa0>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	0c9b      	lsrs	r3, r3, #18
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <HAL_InitTick+0xa4>)
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <HAL_InitTick+0xa8>)
 8003a74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_InitTick+0xa4>)
 8003a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a7c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <HAL_InitTick+0xa4>)
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <HAL_InitTick+0xa4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_InitTick+0xa4>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003a90:	4809      	ldr	r0, [pc, #36]	; (8003ab8 <HAL_InitTick+0xa4>)
 8003a92:	f003 f9ab 	bl	8006dec <HAL_TIM_Base_Init>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003a9c:	4806      	ldr	r0, [pc, #24]	; (8003ab8 <HAL_InitTick+0xa4>)
 8003a9e:	f003 f9db 	bl	8006e58 <HAL_TIM_Base_Start_IT>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	e000      	b.n	8003aa8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3730      	adds	r7, #48	; 0x30
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	431bde83 	.word	0x431bde83
 8003ab8:	20004bf8 	.word	0x20004bf8
 8003abc:	40001400 	.word	0x40001400

08003ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ad2:	e7fe      	b.n	8003ad2 <HardFault_Handler+0x4>

08003ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ad8:	e7fe      	b.n	8003ad8 <MemManage_Handler+0x4>

08003ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ade:	e7fe      	b.n	8003ade <BusFault_Handler+0x4>

08003ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ae4:	e7fe      	b.n	8003ae4 <UsageFault_Handler+0x4>

08003ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003af4:	b598      	push	{r3, r4, r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 8003af8:	f000 f94e 	bl	8003d98 <HAL_GetTick>
 8003afc:	4601      	mov	r1, r0
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <EXTI15_10_IRQHandler+0x50>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <EXTI15_10_IRQHandler+0x50>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1a8a      	subs	r2, r1, r2
 8003b0c:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
	CC_GlobalState->rtdTicks = HAL_GetTick();
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <EXTI15_10_IRQHandler+0x50>)
 8003b12:	681c      	ldr	r4, [r3, #0]
 8003b14:	f000 f940 	bl	8003d98 <HAL_GetTick>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
	if(CC_GlobalState->rtdTicksSpan > 10)
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <EXTI15_10_IRQHandler+0x50>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 8003b26:	2b0a      	cmp	r3, #10
 8003b28:	d906      	bls.n	8003b38 <EXTI15_10_IRQHandler+0x44>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <EXTI15_10_IRQHandler+0x50>)
 8003b2c:	681c      	ldr	r4, [r3, #0]
 8003b2e:	f000 f933 	bl	8003d98 <HAL_GetTick>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003b38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b3c:	f002 f892 	bl	8005c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b40:	bf00      	nop
 8003b42:	bd98      	pop	{r3, r4, r7, pc}
 8003b44:	200049e0 	.word	0x200049e0

08003b48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <TIM7_IRQHandler+0x10>)
 8003b4e:	f003 f9ad 	bl	8006eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20004bf8 	.word	0x20004bf8

08003b5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <DMA2_Stream0_IRQHandler+0x10>)
 8003b62:	f001 fc3b 	bl	80053dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20004abc 	.word	0x20004abc

08003b70 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <DMA2_Stream2_IRQHandler+0x10>)
 8003b76:	f001 fc31 	bl	80053dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20004b1c 	.word	0x20004b1c

08003b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <_sbrk+0x5c>)
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <_sbrk+0x60>)
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <_sbrk+0x64>)
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <_sbrk+0x68>)
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <_sbrk+0x64>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d207      	bcs.n	8003bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bb4:	f007 fd6a 	bl	800b68c <__errno>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	230c      	movs	r3, #12
 8003bbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bc2:	e009      	b.n	8003bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <_sbrk+0x64>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <_sbrk+0x64>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <_sbrk+0x64>)
 8003bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20080000 	.word	0x20080000
 8003be4:	00000400 	.word	0x00000400
 8003be8:	200000cc 	.word	0x200000cc
 8003bec:	20004d00 	.word	0x20004d00

08003bf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <SystemInit+0x28>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <SystemInit+0x28>)
 8003bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <SystemInit+0x28>)
 8003c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c22:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <MX_USART3_UART_Init+0x5c>)
 8003c24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c42:	220c      	movs	r2, #12
 8003c44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c5e:	4805      	ldr	r0, [pc, #20]	; (8003c74 <MX_USART3_UART_Init+0x58>)
 8003c60:	f003 fb2a 	bl	80072b8 <HAL_UART_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003c6a:	f7ff fea7 	bl	80039bc <Error_Handler>
  }

}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20004c38 	.word	0x20004c38
 8003c78:	40004800 	.word	0x40004800

08003c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_UART_MspInit+0x7c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d128      	bne.n	8003cf0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_UART_MspInit+0x80>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <HAL_UART_MspInit+0x80>)
 8003ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_UART_MspInit+0x80>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_UART_MspInit+0x80>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_UART_MspInit+0x80>)
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_UART_MspInit+0x80>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003cce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ce0:	2307      	movs	r3, #7
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce4:	f107 0314 	add.w	r3, r7, #20
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <HAL_UART_MspInit+0x84>)
 8003cec:	f001 fdde 	bl	80058ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3728      	adds	r7, #40	; 0x28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40004800 	.word	0x40004800
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40020400 	.word	0x40020400

08003d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d0a:	e003      	b.n	8003d14 <LoopCopyDataInit>

08003d0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d12:	3104      	adds	r1, #4

08003d14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d14:	480b      	ldr	r0, [pc, #44]	; (8003d44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d1c:	d3f6      	bcc.n	8003d0c <CopyDataInit>
  ldr  r2, =_sbss
 8003d1e:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d20:	e002      	b.n	8003d28 <LoopFillZerobss>

08003d22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d24:	f842 3b04 	str.w	r3, [r2], #4

08003d28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d2c:	d3f9      	bcc.n	8003d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d2e:	f7ff ff5f 	bl	8003bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d32:	f007 fcb1 	bl	800b698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d36:	f7ff fc83 	bl	8003640 <main>
  bx  lr    
 8003d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d3c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003d40:	0800c244 	.word	0x0800c244
  ldr  r0, =_sdata
 8003d44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d48:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8003d4c:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8003d50:	20004d00 	.word	0x20004d00

08003d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d54:	e7fe      	b.n	8003d54 <ADC_IRQHandler>

08003d56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	f001 f9fb 	bl	8005156 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7ff fe57 	bl	8003a14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003d66:	f7ff fe31 	bl	80039cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_IncTick+0x20>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_IncTick+0x24>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4413      	add	r3, r2
 8003d80:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <HAL_IncTick+0x24>)
 8003d82:	6013      	str	r3, [r2, #0]
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000038 	.word	0x20000038
 8003d94:	20004cb8 	.word	0x20004cb8

08003d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <HAL_GetTick+0x14>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20004cb8 	.word	0x20004cb8

08003db0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e031      	b.n	8003e2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff f8ac 	bl	8002f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d116      	bne.n	8003e1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_ADC_Init+0x84>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	f043 0202 	orr.w	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fb3e 	bl	8004480 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f023 0303 	bic.w	r3, r3, #3
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
 8003e1a:	e001      	b.n	8003e20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	ffffeefd 	.word	0xffffeefd

08003e38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_Start+0x1a>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e0a0      	b.n	8003f94 <HAL_ADC_Start+0x15c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d018      	beq.n	8003e9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003e78:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <HAL_ADC_Start+0x168>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a49      	ldr	r2, [pc, #292]	; (8003fa4 <HAL_ADC_Start+0x16c>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0c9a      	lsrs	r2, r3, #18
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003e8c:	e002      	b.n	8003e94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f9      	bne.n	8003e8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d174      	bne.n	8003f92 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eac:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_ADC_Start+0x170>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ece:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee2:	d106      	bne.n	8003ef2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	f023 0206 	bic.w	r2, r3, #6
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	645a      	str	r2, [r3, #68]	; 0x44
 8003ef0:	e002      	b.n	8003ef8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f08:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003f0a:	4b28      	ldr	r3, [pc, #160]	; (8003fac <HAL_ADC_Start+0x174>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d136      	bne.n	8003f92 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	e02d      	b.n	8003f92 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <HAL_ADC_Start+0x178>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10e      	bne.n	8003f5e <HAL_ADC_Start+0x126>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d107      	bne.n	8003f5e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f5c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003f5e:	4b13      	ldr	r3, [pc, #76]	; (8003fac <HAL_ADC_Start+0x174>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d113      	bne.n	8003f92 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a11      	ldr	r2, [pc, #68]	; (8003fb4 <HAL_ADC_Start+0x17c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10e      	bne.n	8003f92 <HAL_ADC_Start+0x15a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f90:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	20000030 	.word	0x20000030
 8003fa4:	431bde83 	.word	0x431bde83
 8003fa8:	fffff8fe 	.word	0xfffff8fe
 8003fac:	40012300 	.word	0x40012300
 8003fb0:	40012000 	.word	0x40012000
 8003fb4:	40012200 	.word	0x40012200

08003fb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_Start_DMA+0x1e>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0c7      	b.n	8004166 <HAL_ADC_Start_DMA+0x1ae>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d018      	beq.n	800401e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003ffc:	4b5c      	ldr	r3, [pc, #368]	; (8004170 <HAL_ADC_Start_DMA+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5c      	ldr	r2, [pc, #368]	; (8004174 <HAL_ADC_Start_DMA+0x1bc>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	0c9a      	lsrs	r2, r3, #18
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004010:	e002      	b.n	8004018 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3b01      	subs	r3, #1
 8004016:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f9      	bne.n	8004012 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	f040 809b 	bne.w	8004164 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004032:	4b51      	ldr	r3, [pc, #324]	; (8004178 <HAL_ADC_Start_DMA+0x1c0>)
 8004034:	4013      	ands	r3, r2
 8004036:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004054:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004068:	d106      	bne.n	8004078 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f023 0206 	bic.w	r2, r3, #6
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
 8004076:	e002      	b.n	800407e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	4a3c      	ldr	r2, [pc, #240]	; (800417c <HAL_ADC_Start_DMA+0x1c4>)
 800408c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	4a3b      	ldr	r2, [pc, #236]	; (8004180 <HAL_ADC_Start_DMA+0x1c8>)
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	4a3a      	ldr	r2, [pc, #232]	; (8004184 <HAL_ADC_Start_DMA+0x1cc>)
 800409c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80040b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	334c      	adds	r3, #76	; 0x4c
 80040d2:	4619      	mov	r1, r3
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f001 f920 	bl	800531c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80040dc:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <HAL_ADC_Start_DMA+0x1d0>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10f      	bne.n	8004108 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d136      	bne.n	8004164 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	e02d      	b.n	8004164 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1f      	ldr	r2, [pc, #124]	; (800418c <HAL_ADC_Start_DMA+0x1d4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d10e      	bne.n	8004130 <HAL_ADC_Start_DMA+0x178>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800412e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004130:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_ADC_Start_DMA+0x1d0>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d113      	bne.n	8004164 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a13      	ldr	r2, [pc, #76]	; (8004190 <HAL_ADC_Start_DMA+0x1d8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10e      	bne.n	8004164 <HAL_ADC_Start_DMA+0x1ac>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d107      	bne.n	8004164 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004162:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000030 	.word	0x20000030
 8004174:	431bde83 	.word	0x431bde83
 8004178:	fffff8fe 	.word	0xfffff8fe
 800417c:	08004675 	.word	0x08004675
 8004180:	0800472f 	.word	0x0800472f
 8004184:	0800474b 	.word	0x0800474b
 8004188:	40012300 	.word	0x40012300
 800418c:	40012000 	.word	0x40012000
 8004190:	40012200 	.word	0x40012200

08004194 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1c>
 8004204:	2302      	movs	r3, #2
 8004206:	e12a      	b.n	800445e <HAL_ADC_ConfigChannel+0x272>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b09      	cmp	r3, #9
 8004216:	d93a      	bls.n	800428e <HAL_ADC_ConfigChannel+0xa2>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004220:	d035      	beq.n	800428e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68d9      	ldr	r1, [r3, #12]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	4613      	mov	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4413      	add	r3, r2
 8004236:	3b1e      	subs	r3, #30
 8004238:	2207      	movs	r2, #7
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43da      	mvns	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	400a      	ands	r2, r1
 8004246:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a87      	ldr	r2, [pc, #540]	; (800446c <HAL_ADC_ConfigChannel+0x280>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d10a      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68d9      	ldr	r1, [r3, #12]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	061a      	lsls	r2, r3, #24
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004266:	e035      	b.n	80042d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68d9      	ldr	r1, [r3, #12]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	4618      	mov	r0, r3
 800427a:	4603      	mov	r3, r0
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4403      	add	r3, r0
 8004280:	3b1e      	subs	r3, #30
 8004282:	409a      	lsls	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800428c:	e022      	b.n	80042d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6919      	ldr	r1, [r3, #16]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	2207      	movs	r2, #7
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43da      	mvns	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	400a      	ands	r2, r1
 80042b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6919      	ldr	r1, [r3, #16]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	4618      	mov	r0, r3
 80042c4:	4603      	mov	r3, r0
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4403      	add	r3, r0
 80042ca:	409a      	lsls	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b06      	cmp	r3, #6
 80042da:	d824      	bhi.n	8004326 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	3b05      	subs	r3, #5
 80042ee:	221f      	movs	r2, #31
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43da      	mvns	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	400a      	ands	r2, r1
 80042fc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	4618      	mov	r0, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	3b05      	subs	r3, #5
 8004318:	fa00 f203 	lsl.w	r2, r0, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	635a      	str	r2, [r3, #52]	; 0x34
 8004324:	e04c      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b0c      	cmp	r3, #12
 800432c:	d824      	bhi.n	8004378 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	3b23      	subs	r3, #35	; 0x23
 8004340:	221f      	movs	r2, #31
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43da      	mvns	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	400a      	ands	r2, r1
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	4618      	mov	r0, r3
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	3b23      	subs	r3, #35	; 0x23
 800436a:	fa00 f203 	lsl.w	r2, r0, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
 8004376:	e023      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	3b41      	subs	r3, #65	; 0x41
 800438a:	221f      	movs	r2, #31
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43da      	mvns	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	400a      	ands	r2, r1
 8004398:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	4618      	mov	r0, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	3b41      	subs	r3, #65	; 0x41
 80043b4:	fa00 f203 	lsl.w	r2, r0, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a2a      	ldr	r2, [pc, #168]	; (8004470 <HAL_ADC_ConfigChannel+0x284>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10a      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x1f4>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d2:	d105      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80043d4:	4b27      	ldr	r3, [pc, #156]	; (8004474 <HAL_ADC_ConfigChannel+0x288>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4a26      	ldr	r2, [pc, #152]	; (8004474 <HAL_ADC_ConfigChannel+0x288>)
 80043da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80043de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a22      	ldr	r2, [pc, #136]	; (8004470 <HAL_ADC_ConfigChannel+0x284>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d109      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x212>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b12      	cmp	r3, #18
 80043f0:	d105      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80043f2:	4b20      	ldr	r3, [pc, #128]	; (8004474 <HAL_ADC_ConfigChannel+0x288>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <HAL_ADC_ConfigChannel+0x288>)
 80043f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <HAL_ADC_ConfigChannel+0x284>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d125      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x268>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_ADC_ConfigChannel+0x280>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <HAL_ADC_ConfigChannel+0x22e>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b11      	cmp	r3, #17
 8004418:	d11c      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800441a:	4b16      	ldr	r3, [pc, #88]	; (8004474 <HAL_ADC_ConfigChannel+0x288>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	4a15      	ldr	r2, [pc, #84]	; (8004474 <HAL_ADC_ConfigChannel+0x288>)
 8004420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004424:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a10      	ldr	r2, [pc, #64]	; (800446c <HAL_ADC_ConfigChannel+0x280>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d111      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004430:	4b11      	ldr	r3, [pc, #68]	; (8004478 <HAL_ADC_ConfigChannel+0x28c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a11      	ldr	r2, [pc, #68]	; (800447c <HAL_ADC_ConfigChannel+0x290>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0c9a      	lsrs	r2, r3, #18
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004446:	e002      	b.n	800444e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3b01      	subs	r3, #1
 800444c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f9      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	10000012 	.word	0x10000012
 8004470:	40012000 	.word	0x40012000
 8004474:	40012300 	.word	0x40012300
 8004478:	20000030 	.word	0x20000030
 800447c:	431bde83 	.word	0x431bde83

08004480 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004488:	4b78      	ldr	r3, [pc, #480]	; (800466c <ADC_Init+0x1ec>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a77      	ldr	r2, [pc, #476]	; (800466c <ADC_Init+0x1ec>)
 800448e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004492:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004494:	4b75      	ldr	r3, [pc, #468]	; (800466c <ADC_Init+0x1ec>)
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4973      	ldr	r1, [pc, #460]	; (800466c <ADC_Init+0x1ec>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	021a      	lsls	r2, r3, #8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6859      	ldr	r1, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6899      	ldr	r1, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	4a58      	ldr	r2, [pc, #352]	; (8004670 <ADC_Init+0x1f0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d022      	beq.n	800455a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004522:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6899      	ldr	r1, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	e00f      	b.n	800457a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004578:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0202 	bic.w	r2, r2, #2
 8004588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6899      	ldr	r1, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	005a      	lsls	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01b      	beq.n	80045e0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6859      	ldr	r1, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	3b01      	subs	r3, #1
 80045d4:	035a      	lsls	r2, r3, #13
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	e007      	b.n	80045f0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	3b01      	subs	r3, #1
 800460c:	051a      	lsls	r2, r3, #20
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004632:	025a      	lsls	r2, r3, #9
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6899      	ldr	r1, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	029a      	lsls	r2, r3, #10
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40012300 	.word	0x40012300
 8004670:	0f000001 	.word	0x0f000001

08004674 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800468a:	2b00      	cmp	r3, #0
 800468c:	d13c      	bne.n	8004708 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d12b      	bne.n	8004700 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d127      	bne.n	8004700 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d119      	bne.n	8004700 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0220 	bic.w	r2, r2, #32
 80046da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d105      	bne.n	8004700 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f043 0201 	orr.w	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff fd54 	bl	80041ae <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004706:	e00e      	b.n	8004726 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff fd5e 	bl	80041d6 <HAL_ADC_ErrorCallback>
}
 800471a:	e004      	b.n	8004726 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff fd40 	bl	80041c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2240      	movs	r2, #64	; 0x40
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	f043 0204 	orr.w	r2, r3, #4
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff fd33 	bl	80041d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e0ed      	b.n	8004966 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fe fd84 	bl	80032a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0202 	bic.w	r2, r2, #2
 80047aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047ac:	f7ff faf4 	bl	8003d98 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047b2:	e012      	b.n	80047da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047b4:	f7ff faf0 	bl	8003d98 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b0a      	cmp	r3, #10
 80047c0:	d90b      	bls.n	80047da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2205      	movs	r2, #5
 80047d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0c5      	b.n	8004966 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047f8:	f7ff face 	bl	8003d98 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047fe:	e012      	b.n	8004826 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004800:	f7ff faca 	bl	8003d98 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b0a      	cmp	r3, #10
 800480c:	d90b      	bls.n	8004826 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2205      	movs	r2, #5
 800481e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e09f      	b.n	8004966 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0e5      	beq.n	8004800 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7e1b      	ldrb	r3, [r3, #24]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d108      	bne.n	800484e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e007      	b.n	800485e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7e5b      	ldrb	r3, [r3, #25]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d108      	bne.n	8004878 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e007      	b.n	8004888 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004886:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	7e9b      	ldrb	r3, [r3, #26]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d108      	bne.n	80048a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0220 	orr.w	r2, r2, #32
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	e007      	b.n	80048b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0220 	bic.w	r2, r2, #32
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	7edb      	ldrb	r3, [r3, #27]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d108      	bne.n	80048cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0210 	bic.w	r2, r2, #16
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e007      	b.n	80048dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0210 	orr.w	r2, r2, #16
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	7f1b      	ldrb	r3, [r3, #28]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d108      	bne.n	80048f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0208 	orr.w	r2, r2, #8
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e007      	b.n	8004906 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0208 	bic.w	r2, r2, #8
 8004904:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	7f5b      	ldrb	r3, [r3, #29]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d108      	bne.n	8004920 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0204 	orr.w	r2, r2, #4
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e007      	b.n	8004930 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	1e5a      	subs	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004986:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004988:	7cfb      	ldrb	r3, [r7, #19]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d003      	beq.n	8004996 <HAL_CAN_ConfigFilter+0x26>
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	2b02      	cmp	r3, #2
 8004992:	f040 80c7 	bne.w	8004b24 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a69      	ldr	r2, [pc, #420]	; (8004b40 <HAL_CAN_ConfigFilter+0x1d0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d001      	beq.n	80049a4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80049a0:	4b68      	ldr	r3, [pc, #416]	; (8004b44 <HAL_CAN_ConfigFilter+0x1d4>)
 80049a2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049aa:	f043 0201 	orr.w	r2, r3, #1
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4a63      	ldr	r2, [pc, #396]	; (8004b44 <HAL_CAN_ConfigFilter+0x1d4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d111      	bne.n	80049e0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049c2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	431a      	orrs	r2, r3
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	2201      	movs	r2, #1
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d123      	bne.n	8004a52 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	401a      	ands	r2, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a2c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	3248      	adds	r2, #72	; 0x48
 8004a32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a46:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a48:	6979      	ldr	r1, [r7, #20]
 8004a4a:	3348      	adds	r3, #72	; 0x48
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	440b      	add	r3, r1
 8004a50:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d122      	bne.n	8004aa0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	3248      	adds	r2, #72	; 0x48
 8004a80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a96:	6979      	ldr	r1, [r7, #20]
 8004a98:	3348      	adds	r3, #72	; 0x48
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	440b      	add	r3, r1
 8004a9e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004aba:	e007      	b.n	8004acc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004ae6:	e007      	b.n	8004af8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e006      	b.n	8004b32 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40003400 	.word	0x40003400
 8004b44:	40006400 	.word	0x40006400

08004b48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d12e      	bne.n	8004bba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b74:	f7ff f910 	bl	8003d98 <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b7a:	e012      	b.n	8004ba2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b7c:	f7ff f90c 	bl	8003d98 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b0a      	cmp	r3, #10
 8004b88:	d90b      	bls.n	8004ba2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2205      	movs	r2, #5
 8004b9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e012      	b.n	8004bc8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e006      	b.n	8004bc8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
  }
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004be4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d003      	beq.n	8004bfc <HAL_CAN_AddTxMessage+0x2c>
 8004bf4:	7ffb      	ldrb	r3, [r7, #31]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	f040 80b8 	bne.w	8004d6c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80a0 	beq.w	8004d5c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	0e1b      	lsrs	r3, r3, #24
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d907      	bls.n	8004c3c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e09e      	b.n	8004d7a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	409a      	lsls	r2, r3
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10d      	bne.n	8004c6a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004c58:	68f9      	ldr	r1, [r7, #12]
 8004c5a:	6809      	ldr	r1, [r1, #0]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3318      	adds	r3, #24
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	440b      	add	r3, r1
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	e00f      	b.n	8004c8a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c74:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004c7e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3318      	adds	r3, #24
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	440b      	add	r3, r1
 8004c88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6819      	ldr	r1, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	3318      	adds	r3, #24
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	440b      	add	r3, r1
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	7d1b      	ldrb	r3, [r3, #20]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d111      	bne.n	8004cca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	3318      	adds	r3, #24
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	6811      	ldr	r1, [r2, #0]
 8004cba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	3318      	adds	r3, #24
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3307      	adds	r3, #7
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	061a      	lsls	r2, r3, #24
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3306      	adds	r3, #6
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3305      	adds	r3, #5
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	3204      	adds	r2, #4
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	4610      	mov	r0, r2
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	6811      	ldr	r1, [r2, #0]
 8004cf2:	ea43 0200 	orr.w	r2, r3, r0
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004d00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3303      	adds	r3, #3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	061a      	lsls	r2, r3, #24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3301      	adds	r3, #1
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	4610      	mov	r0, r2
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	6811      	ldr	r1, [r2, #0]
 8004d28:	ea43 0200 	orr.w	r2, r3, r0
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	440b      	add	r3, r1
 8004d32:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004d36:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3318      	adds	r3, #24
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	4413      	add	r3, r2
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	6811      	ldr	r1, [r2, #0]
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	3318      	adds	r3, #24
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	440b      	add	r3, r1
 8004d56:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e00e      	b.n	8004d7a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e006      	b.n	8004d7a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004d86:	b480      	push	{r7}
 8004d88:	b087      	sub	sp, #28
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d9a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d003      	beq.n	8004daa <HAL_CAN_GetRxMessage+0x24>
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	f040 80f3 	bne.w	8004f90 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10e      	bne.n	8004dce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d116      	bne.n	8004dec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e0e7      	b.n	8004f9e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d107      	bne.n	8004dec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0d8      	b.n	8004f9e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	331b      	adds	r3, #27
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	4413      	add	r3, r2
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0204 	and.w	r2, r3, #4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10c      	bne.n	8004e24 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	331b      	adds	r3, #27
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	4413      	add	r3, r2
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0d5b      	lsrs	r3, r3, #21
 8004e1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e00b      	b.n	8004e3c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	331b      	adds	r3, #27
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	4413      	add	r3, r2
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	08db      	lsrs	r3, r3, #3
 8004e34:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	331b      	adds	r3, #27
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	4413      	add	r3, r2
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0202 	and.w	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	331b      	adds	r3, #27
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3304      	adds	r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 020f 	and.w	r2, r3, #15
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	331b      	adds	r3, #27
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	331b      	adds	r3, #27
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3304      	adds	r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	0c1b      	lsrs	r3, r3, #16
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	0a1a      	lsrs	r2, r3, #8
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	0c1a      	lsrs	r2, r3, #16
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	3302      	adds	r3, #2
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	0e1a      	lsrs	r2, r3, #24
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	3303      	adds	r3, #3
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	0a1a      	lsrs	r2, r3, #8
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	3305      	adds	r3, #5
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	0c1a      	lsrs	r2, r3, #16
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	3306      	adds	r3, #6
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	0e1a      	lsrs	r2, r3, #24
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	3307      	adds	r3, #7
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d108      	bne.n	8004f7c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0220 	orr.w	r2, r2, #32
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	e007      	b.n	8004f8c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0220 	orr.w	r2, r2, #32
 8004f8a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e006      	b.n	8004f9e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fbe:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fc0:	7afb      	ldrb	r3, [r7, #11]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d002      	beq.n	8004fcc <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d10f      	bne.n	8004fec <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e005      	b.n	8004fec <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004fec:	68fb      	ldr	r3, [r7, #12]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <__NVIC_SetPriorityGrouping+0x40>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005018:	4013      	ands	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <__NVIC_SetPriorityGrouping+0x44>)
 8005026:	4313      	orrs	r3, r2
 8005028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800502a:	4a04      	ldr	r2, [pc, #16]	; (800503c <__NVIC_SetPriorityGrouping+0x40>)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	60d3      	str	r3, [r2, #12]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	e000ed00 	.word	0xe000ed00
 8005040:	05fa0000 	.word	0x05fa0000

08005044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <__NVIC_GetPriorityGrouping+0x18>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	0a1b      	lsrs	r3, r3, #8
 800504e:	f003 0307 	and.w	r3, r3, #7
}
 8005052:	4618      	mov	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	e000ed00 	.word	0xe000ed00

08005060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	2b00      	cmp	r3, #0
 8005070:	db0b      	blt.n	800508a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	f003 021f 	and.w	r2, r3, #31
 8005078:	4907      	ldr	r1, [pc, #28]	; (8005098 <__NVIC_EnableIRQ+0x38>)
 800507a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	2001      	movs	r0, #1
 8005082:	fa00 f202 	lsl.w	r2, r0, r2
 8005086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	e000e100 	.word	0xe000e100

0800509c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	6039      	str	r1, [r7, #0]
 80050a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	db0a      	blt.n	80050c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	490c      	ldr	r1, [pc, #48]	; (80050e8 <__NVIC_SetPriority+0x4c>)
 80050b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ba:	0112      	lsls	r2, r2, #4
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	440b      	add	r3, r1
 80050c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050c4:	e00a      	b.n	80050dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	4908      	ldr	r1, [pc, #32]	; (80050ec <__NVIC_SetPriority+0x50>)
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	3b04      	subs	r3, #4
 80050d4:	0112      	lsls	r2, r2, #4
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	440b      	add	r3, r1
 80050da:	761a      	strb	r2, [r3, #24]
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	e000e100 	.word	0xe000e100
 80050ec:	e000ed00 	.word	0xe000ed00

080050f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b089      	sub	sp, #36	; 0x24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f1c3 0307 	rsb	r3, r3, #7
 800510a:	2b04      	cmp	r3, #4
 800510c:	bf28      	it	cs
 800510e:	2304      	movcs	r3, #4
 8005110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	3304      	adds	r3, #4
 8005116:	2b06      	cmp	r3, #6
 8005118:	d902      	bls.n	8005120 <NVIC_EncodePriority+0x30>
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3b03      	subs	r3, #3
 800511e:	e000      	b.n	8005122 <NVIC_EncodePriority+0x32>
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43da      	mvns	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	401a      	ands	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005138:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	fa01 f303 	lsl.w	r3, r1, r3
 8005142:	43d9      	mvns	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005148:	4313      	orrs	r3, r2
         );
}
 800514a:	4618      	mov	r0, r3
 800514c:	3724      	adds	r7, #36	; 0x24
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff ff4c 	bl	8004ffc <__NVIC_SetPriorityGrouping>
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800517e:	f7ff ff61 	bl	8005044 <__NVIC_GetPriorityGrouping>
 8005182:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	6978      	ldr	r0, [r7, #20]
 800518a:	f7ff ffb1 	bl	80050f0 <NVIC_EncodePriority>
 800518e:	4602      	mov	r2, r0
 8005190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ff80 	bl	800509c <__NVIC_SetPriority>
}
 800519c:	bf00      	nop
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff54 	bl	8005060 <__NVIC_EnableIRQ>
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051cc:	f7fe fde4 	bl	8003d98 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e099      	b.n	8005310 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051fc:	e00f      	b.n	800521e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051fe:	f7fe fdcb 	bl	8003d98 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b05      	cmp	r3, #5
 800520a:	d908      	bls.n	800521e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2203      	movs	r2, #3
 8005216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e078      	b.n	8005310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e8      	bne.n	80051fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4b38      	ldr	r3, [pc, #224]	; (8005318 <HAL_DMA_Init+0x158>)
 8005238:	4013      	ands	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800524a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2b04      	cmp	r3, #4
 8005276:	d107      	bne.n	8005288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	4313      	orrs	r3, r2
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0307 	bic.w	r3, r3, #7
 800529e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d117      	bne.n	80052e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00e      	beq.n	80052e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa77 	bl	80057b8 <DMA_CheckFifoParam>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2240      	movs	r2, #64	; 0x40
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052de:	2301      	movs	r3, #1
 80052e0:	e016      	b.n	8005310 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fa2e 	bl	800574c <DMA_CalcBaseAndBitshift>
 80052f0:	4603      	mov	r3, r0
 80052f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f8:	223f      	movs	r2, #63	; 0x3f
 80052fa:	409a      	lsls	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e010803f 	.word	0xe010803f

0800531c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_DMA_Start_IT+0x26>
 800533e:	2302      	movs	r3, #2
 8005340:	e048      	b.n	80053d4 <HAL_DMA_Start_IT+0xb8>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	d137      	bne.n	80053c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f9c0 	bl	80056f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005374:	223f      	movs	r2, #63	; 0x3f
 8005376:	409a      	lsls	r2, r3
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0216 	orr.w	r2, r2, #22
 800538a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695a      	ldr	r2, [r3, #20]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800539a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0208 	orr.w	r2, r2, #8
 80053b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e005      	b.n	80053d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053ce:	2302      	movs	r3, #2
 80053d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80053e8:	4b92      	ldr	r3, [pc, #584]	; (8005634 <HAL_DMA_IRQHandler+0x258>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a92      	ldr	r2, [pc, #584]	; (8005638 <HAL_DMA_IRQHandler+0x25c>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	0a9b      	lsrs	r3, r3, #10
 80053f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	2208      	movs	r2, #8
 8005408:	409a      	lsls	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01a      	beq.n	8005448 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005434:	2208      	movs	r2, #8
 8005436:	409a      	lsls	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005440:	f043 0201 	orr.w	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	2201      	movs	r2, #1
 800544e:	409a      	lsls	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546a:	2201      	movs	r2, #1
 800546c:	409a      	lsls	r2, r3
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	f043 0202 	orr.w	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	2204      	movs	r2, #4
 8005484:	409a      	lsls	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d012      	beq.n	80054b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a0:	2204      	movs	r2, #4
 80054a2:	409a      	lsls	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	f043 0204 	orr.w	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	2210      	movs	r2, #16
 80054ba:	409a      	lsls	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d043      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d03c      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d6:	2210      	movs	r2, #16
 80054d8:	409a      	lsls	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d018      	beq.n	800551e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d024      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
 800550a:	e01f      	b.n	800554c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
 800551c:	e016      	b.n	800554c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d107      	bne.n	800553c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0208 	bic.w	r2, r2, #8
 800553a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005550:	2220      	movs	r2, #32
 8005552:	409a      	lsls	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 808e 	beq.w	800567a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8086 	beq.w	800567a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005572:	2220      	movs	r2, #32
 8005574:	409a      	lsls	r2, r3
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b05      	cmp	r3, #5
 8005584:	d136      	bne.n	80055f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0216 	bic.w	r2, r2, #22
 8005594:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <HAL_DMA_IRQHandler+0x1da>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0208 	bic.w	r2, r2, #8
 80055c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ca:	223f      	movs	r2, #63	; 0x3f
 80055cc:	409a      	lsls	r2, r3
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d07d      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
        }
        return;
 80055f2:	e078      	b.n	80056e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01c      	beq.n	800563c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d108      	bne.n	8005622 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	2b00      	cmp	r3, #0
 8005616:	d030      	beq.n	800567a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
 8005620:	e02b      	b.n	800567a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d027      	beq.n	800567a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
 8005632:	e022      	b.n	800567a <HAL_DMA_IRQHandler+0x29e>
 8005634:	20000030 	.word	0x20000030
 8005638:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10f      	bne.n	800566a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0210 	bic.w	r2, r2, #16
 8005658:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	2b00      	cmp	r3, #0
 8005680:	d032      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d022      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2205      	movs	r2, #5
 8005692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3301      	adds	r3, #1
 80056aa:	60bb      	str	r3, [r7, #8]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d307      	bcc.n	80056c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f2      	bne.n	80056a6 <HAL_DMA_IRQHandler+0x2ca>
 80056c0:	e000      	b.n	80056c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80056c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
 80056e4:	e000      	b.n	80056e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80056e6:	bf00      	nop
    }
  }
}
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop

080056f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800570c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d108      	bne.n	8005730 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800572e:	e007      	b.n	8005740 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	60da      	str	r2, [r3, #12]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	3b10      	subs	r3, #16
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <DMA_CalcBaseAndBitshift+0x60>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005766:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <DMA_CalcBaseAndBitshift+0x64>)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b03      	cmp	r3, #3
 8005778:	d908      	bls.n	800578c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <DMA_CalcBaseAndBitshift+0x68>)
 8005782:	4013      	ands	r3, r2
 8005784:	1d1a      	adds	r2, r3, #4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	659a      	str	r2, [r3, #88]	; 0x58
 800578a:	e006      	b.n	800579a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <DMA_CalcBaseAndBitshift+0x68>)
 8005794:	4013      	ands	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	aaaaaaab 	.word	0xaaaaaaab
 80057b0:	0800c1f8 	.word	0x0800c1f8
 80057b4:	fffffc00 	.word	0xfffffc00

080057b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11f      	bne.n	8005812 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d855      	bhi.n	8005884 <DMA_CheckFifoParam+0xcc>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <DMA_CheckFifoParam+0x28>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	08005803 	.word	0x08005803
 80057e8:	080057f1 	.word	0x080057f1
 80057ec:	08005885 	.word	0x08005885
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d045      	beq.n	8005888 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005800:	e042      	b.n	8005888 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800580a:	d13f      	bne.n	800588c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005810:	e03c      	b.n	800588c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581a:	d121      	bne.n	8005860 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b03      	cmp	r3, #3
 8005820:	d836      	bhi.n	8005890 <DMA_CheckFifoParam+0xd8>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <DMA_CheckFifoParam+0x70>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	08005839 	.word	0x08005839
 800582c:	0800583f 	.word	0x0800583f
 8005830:	08005839 	.word	0x08005839
 8005834:	08005851 	.word	0x08005851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e02f      	b.n	800589e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d024      	beq.n	8005894 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800584e:	e021      	b.n	8005894 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005858:	d11e      	bne.n	8005898 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800585e:	e01b      	b.n	8005898 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d902      	bls.n	800586c <DMA_CheckFifoParam+0xb4>
 8005866:	2b03      	cmp	r3, #3
 8005868:	d003      	beq.n	8005872 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800586a:	e018      	b.n	800589e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
      break;
 8005870:	e015      	b.n	800589e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
      break;
 8005882:	e00b      	b.n	800589c <DMA_CheckFifoParam+0xe4>
      break;
 8005884:	bf00      	nop
 8005886:	e00a      	b.n	800589e <DMA_CheckFifoParam+0xe6>
      break;
 8005888:	bf00      	nop
 800588a:	e008      	b.n	800589e <DMA_CheckFifoParam+0xe6>
      break;
 800588c:	bf00      	nop
 800588e:	e006      	b.n	800589e <DMA_CheckFifoParam+0xe6>
      break;
 8005890:	bf00      	nop
 8005892:	e004      	b.n	800589e <DMA_CheckFifoParam+0xe6>
      break;
 8005894:	bf00      	nop
 8005896:	e002      	b.n	800589e <DMA_CheckFifoParam+0xe6>
      break;   
 8005898:	bf00      	nop
 800589a:	e000      	b.n	800589e <DMA_CheckFifoParam+0xe6>
      break;
 800589c:	bf00      	nop
    }
  } 
  
  return status; 
 800589e:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b089      	sub	sp, #36	; 0x24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	e175      	b.n	8005bb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80058cc:	2201      	movs	r2, #1
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4013      	ands	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	f040 8164 	bne.w	8005bb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d00b      	beq.n	800590a <HAL_GPIO_Init+0x5e>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d007      	beq.n	800590a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058fe:	2b11      	cmp	r3, #17
 8005900:	d003      	beq.n	800590a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b12      	cmp	r3, #18
 8005908:	d130      	bne.n	800596c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	2203      	movs	r2, #3
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4313      	orrs	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005940:	2201      	movs	r2, #1
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 0201 	and.w	r2, r3, #1
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	2203      	movs	r2, #3
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4013      	ands	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d003      	beq.n	80059ac <HAL_GPIO_Init+0x100>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b12      	cmp	r3, #18
 80059aa:	d123      	bne.n	80059f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	08da      	lsrs	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3208      	adds	r2, #8
 80059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	220f      	movs	r2, #15
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	08da      	lsrs	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3208      	adds	r2, #8
 80059ee:	69b9      	ldr	r1, [r7, #24]
 80059f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	2203      	movs	r2, #3
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	43db      	mvns	r3, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 0203 	and.w	r2, r3, #3
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80be 	beq.w	8005bb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a36:	4b65      	ldr	r3, [pc, #404]	; (8005bcc <HAL_GPIO_Init+0x320>)
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	4a64      	ldr	r2, [pc, #400]	; (8005bcc <HAL_GPIO_Init+0x320>)
 8005a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a40:	6453      	str	r3, [r2, #68]	; 0x44
 8005a42:	4b62      	ldr	r3, [pc, #392]	; (8005bcc <HAL_GPIO_Init+0x320>)
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a4e:	4a60      	ldr	r2, [pc, #384]	; (8005bd0 <HAL_GPIO_Init+0x324>)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	089b      	lsrs	r3, r3, #2
 8005a54:	3302      	adds	r3, #2
 8005a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	220f      	movs	r2, #15
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a57      	ldr	r2, [pc, #348]	; (8005bd4 <HAL_GPIO_Init+0x328>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d037      	beq.n	8005aea <HAL_GPIO_Init+0x23e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a56      	ldr	r2, [pc, #344]	; (8005bd8 <HAL_GPIO_Init+0x32c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d031      	beq.n	8005ae6 <HAL_GPIO_Init+0x23a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a55      	ldr	r2, [pc, #340]	; (8005bdc <HAL_GPIO_Init+0x330>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d02b      	beq.n	8005ae2 <HAL_GPIO_Init+0x236>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a54      	ldr	r2, [pc, #336]	; (8005be0 <HAL_GPIO_Init+0x334>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d025      	beq.n	8005ade <HAL_GPIO_Init+0x232>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a53      	ldr	r2, [pc, #332]	; (8005be4 <HAL_GPIO_Init+0x338>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01f      	beq.n	8005ada <HAL_GPIO_Init+0x22e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a52      	ldr	r2, [pc, #328]	; (8005be8 <HAL_GPIO_Init+0x33c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d019      	beq.n	8005ad6 <HAL_GPIO_Init+0x22a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a51      	ldr	r2, [pc, #324]	; (8005bec <HAL_GPIO_Init+0x340>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_GPIO_Init+0x226>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a50      	ldr	r2, [pc, #320]	; (8005bf0 <HAL_GPIO_Init+0x344>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00d      	beq.n	8005ace <HAL_GPIO_Init+0x222>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a4f      	ldr	r2, [pc, #316]	; (8005bf4 <HAL_GPIO_Init+0x348>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d007      	beq.n	8005aca <HAL_GPIO_Init+0x21e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a4e      	ldr	r2, [pc, #312]	; (8005bf8 <HAL_GPIO_Init+0x34c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d101      	bne.n	8005ac6 <HAL_GPIO_Init+0x21a>
 8005ac2:	2309      	movs	r3, #9
 8005ac4:	e012      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005ac6:	230a      	movs	r3, #10
 8005ac8:	e010      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005aca:	2308      	movs	r3, #8
 8005acc:	e00e      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005ace:	2307      	movs	r3, #7
 8005ad0:	e00c      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005ad2:	2306      	movs	r3, #6
 8005ad4:	e00a      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005ad6:	2305      	movs	r3, #5
 8005ad8:	e008      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005ada:	2304      	movs	r3, #4
 8005adc:	e006      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e004      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e002      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <HAL_GPIO_Init+0x240>
 8005aea:	2300      	movs	r3, #0
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	f002 0203 	and.w	r2, r2, #3
 8005af2:	0092      	lsls	r2, r2, #2
 8005af4:	4093      	lsls	r3, r2
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005afc:	4934      	ldr	r1, [pc, #208]	; (8005bd0 <HAL_GPIO_Init+0x324>)
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	089b      	lsrs	r3, r3, #2
 8005b02:	3302      	adds	r3, #2
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b0a:	4b3c      	ldr	r3, [pc, #240]	; (8005bfc <HAL_GPIO_Init+0x350>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	43db      	mvns	r3, r3
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	4013      	ands	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b2e:	4a33      	ldr	r2, [pc, #204]	; (8005bfc <HAL_GPIO_Init+0x350>)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b34:	4b31      	ldr	r3, [pc, #196]	; (8005bfc <HAL_GPIO_Init+0x350>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b58:	4a28      	ldr	r2, [pc, #160]	; (8005bfc <HAL_GPIO_Init+0x350>)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b5e:	4b27      	ldr	r3, [pc, #156]	; (8005bfc <HAL_GPIO_Init+0x350>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	43db      	mvns	r3, r3
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b82:	4a1e      	ldr	r2, [pc, #120]	; (8005bfc <HAL_GPIO_Init+0x350>)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b88:	4b1c      	ldr	r3, [pc, #112]	; (8005bfc <HAL_GPIO_Init+0x350>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	43db      	mvns	r3, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	4013      	ands	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bac:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <HAL_GPIO_Init+0x350>)
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b0f      	cmp	r3, #15
 8005bbc:	f67f ae86 	bls.w	80058cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	3724      	adds	r7, #36	; 0x24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	40013800 	.word	0x40013800
 8005bd4:	40020000 	.word	0x40020000
 8005bd8:	40020400 	.word	0x40020400
 8005bdc:	40020800 	.word	0x40020800
 8005be0:	40020c00 	.word	0x40020c00
 8005be4:	40021000 	.word	0x40021000
 8005be8:	40021400 	.word	0x40021400
 8005bec:	40021800 	.word	0x40021800
 8005bf0:	40021c00 	.word	0x40021c00
 8005bf4:	40022000 	.word	0x40022000
 8005bf8:	40022400 	.word	0x40022400
 8005bfc:	40013c00 	.word	0x40013c00

08005c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	887b      	ldrh	r3, [r7, #2]
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
 8005c1c:	e001      	b.n	8005c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c40:	787b      	ldrb	r3, [r7, #1]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c4c:	e003      	b.n	8005c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c4e:	887b      	ldrh	r3, [r7, #2]
 8005c50:	041a      	lsls	r2, r3, #16
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	619a      	str	r2, [r3, #24]
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	4013      	ands	r3, r2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c7a:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c7c:	88fb      	ldrh	r3, [r7, #6]
 8005c7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f806 	bl	8005c94 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40013c00 	.word	0x40013c00

08005c94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e29b      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8087 	beq.w	8005dde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cd0:	4b96      	ldr	r3, [pc, #600]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 030c 	and.w	r3, r3, #12
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d00c      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cdc:	4b93      	ldr	r3, [pc, #588]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d112      	bne.n	8005d0e <HAL_RCC_OscConfig+0x62>
 8005ce8:	4b90      	ldr	r3, [pc, #576]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf4:	d10b      	bne.n	8005d0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf6:	4b8d      	ldr	r3, [pc, #564]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d06c      	beq.n	8005ddc <HAL_RCC_OscConfig+0x130>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d168      	bne.n	8005ddc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e275      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d16:	d106      	bne.n	8005d26 <HAL_RCC_OscConfig+0x7a>
 8005d18:	4b84      	ldr	r3, [pc, #528]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a83      	ldr	r2, [pc, #524]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e02e      	b.n	8005d84 <HAL_RCC_OscConfig+0xd8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x9c>
 8005d2e:	4b7f      	ldr	r3, [pc, #508]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a7e      	ldr	r2, [pc, #504]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	4b7c      	ldr	r3, [pc, #496]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a7b      	ldr	r2, [pc, #492]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e01d      	b.n	8005d84 <HAL_RCC_OscConfig+0xd8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d50:	d10c      	bne.n	8005d6c <HAL_RCC_OscConfig+0xc0>
 8005d52:	4b76      	ldr	r3, [pc, #472]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a75      	ldr	r2, [pc, #468]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	4b73      	ldr	r3, [pc, #460]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a72      	ldr	r2, [pc, #456]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e00b      	b.n	8005d84 <HAL_RCC_OscConfig+0xd8>
 8005d6c:	4b6f      	ldr	r3, [pc, #444]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a6e      	ldr	r2, [pc, #440]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	4b6c      	ldr	r3, [pc, #432]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a6b      	ldr	r2, [pc, #428]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d013      	beq.n	8005db4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fe f804 	bl	8003d98 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d94:	f7fe f800 	bl	8003d98 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b64      	cmp	r3, #100	; 0x64
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e229      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da6:	4b61      	ldr	r3, [pc, #388]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0xe8>
 8005db2:	e014      	b.n	8005dde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db4:	f7fd fff0 	bl	8003d98 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dbc:	f7fd ffec 	bl	8003d98 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b64      	cmp	r3, #100	; 0x64
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e215      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dce:	4b57      	ldr	r3, [pc, #348]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0x110>
 8005dda:	e000      	b.n	8005dde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d069      	beq.n	8005ebe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dea:	4b50      	ldr	r3, [pc, #320]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005df6:	4b4d      	ldr	r3, [pc, #308]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d11c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x190>
 8005e02:	4b4a      	ldr	r3, [pc, #296]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d116      	bne.n	8005e3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e0e:	4b47      	ldr	r3, [pc, #284]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_RCC_OscConfig+0x17a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d001      	beq.n	8005e26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e1e9      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e26:	4b41      	ldr	r3, [pc, #260]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	493d      	ldr	r1, [pc, #244]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e3a:	e040      	b.n	8005ebe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d023      	beq.n	8005e8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e44:	4b39      	ldr	r3, [pc, #228]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a38      	ldr	r2, [pc, #224]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fd ffa2 	bl	8003d98 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e58:	f7fd ff9e 	bl	8003d98 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e1c7      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6a:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e76:	4b2d      	ldr	r3, [pc, #180]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	4929      	ldr	r1, [pc, #164]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	600b      	str	r3, [r1, #0]
 8005e8a:	e018      	b.n	8005ebe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e8c:	4b27      	ldr	r3, [pc, #156]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a26      	ldr	r2, [pc, #152]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005e92:	f023 0301 	bic.w	r3, r3, #1
 8005e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fd ff7e 	bl	8003d98 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fd ff7a 	bl	8003d98 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e1a3      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb2:	4b1e      	ldr	r3, [pc, #120]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d038      	beq.n	8005f3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d019      	beq.n	8005f06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ed2:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ede:	f7fd ff5b 	bl	8003d98 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ee6:	f7fd ff57 	bl	8003d98 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e180      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x23a>
 8005f04:	e01a      	b.n	8005f3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0a:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <HAL_RCC_OscConfig+0x280>)
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f12:	f7fd ff41 	bl	8003d98 <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f18:	e00a      	b.n	8005f30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f1a:	f7fd ff3d 	bl	8003d98 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d903      	bls.n	8005f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e166      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
 8005f2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f30:	4b92      	ldr	r3, [pc, #584]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1ee      	bne.n	8005f1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80a4 	beq.w	8006092 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f4a:	4b8c      	ldr	r3, [pc, #560]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10d      	bne.n	8005f72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f56:	4b89      	ldr	r3, [pc, #548]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	4a88      	ldr	r2, [pc, #544]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6413      	str	r3, [r2, #64]	; 0x40
 8005f62:	4b86      	ldr	r3, [pc, #536]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f72:	4b83      	ldr	r3, [pc, #524]	; (8006180 <HAL_RCC_OscConfig+0x4d4>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d118      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f7e:	4b80      	ldr	r3, [pc, #512]	; (8006180 <HAL_RCC_OscConfig+0x4d4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a7f      	ldr	r2, [pc, #508]	; (8006180 <HAL_RCC_OscConfig+0x4d4>)
 8005f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f8a:	f7fd ff05 	bl	8003d98 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f90:	e008      	b.n	8005fa4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f92:	f7fd ff01 	bl	8003d98 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b64      	cmp	r3, #100	; 0x64
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e12a      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fa4:	4b76      	ldr	r3, [pc, #472]	; (8006180 <HAL_RCC_OscConfig+0x4d4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f0      	beq.n	8005f92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x31a>
 8005fb8:	4b70      	ldr	r3, [pc, #448]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbc:	4a6f      	ldr	r2, [pc, #444]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc4:	e02d      	b.n	8006022 <HAL_RCC_OscConfig+0x376>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x33c>
 8005fce:	4b6b      	ldr	r3, [pc, #428]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	4a6a      	ldr	r2, [pc, #424]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fda:	4b68      	ldr	r3, [pc, #416]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	4a67      	ldr	r2, [pc, #412]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005fe0:	f023 0304 	bic.w	r3, r3, #4
 8005fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe6:	e01c      	b.n	8006022 <HAL_RCC_OscConfig+0x376>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2b05      	cmp	r3, #5
 8005fee:	d10c      	bne.n	800600a <HAL_RCC_OscConfig+0x35e>
 8005ff0:	4b62      	ldr	r3, [pc, #392]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff4:	4a61      	ldr	r2, [pc, #388]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005ff6:	f043 0304 	orr.w	r3, r3, #4
 8005ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8005ffc:	4b5f      	ldr	r3, [pc, #380]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006000:	4a5e      	ldr	r2, [pc, #376]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	6713      	str	r3, [r2, #112]	; 0x70
 8006008:	e00b      	b.n	8006022 <HAL_RCC_OscConfig+0x376>
 800600a:	4b5c      	ldr	r3, [pc, #368]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	4a5b      	ldr	r2, [pc, #364]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8006010:	f023 0301 	bic.w	r3, r3, #1
 8006014:	6713      	str	r3, [r2, #112]	; 0x70
 8006016:	4b59      	ldr	r3, [pc, #356]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8006018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601a:	4a58      	ldr	r2, [pc, #352]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 800601c:	f023 0304 	bic.w	r3, r3, #4
 8006020:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d015      	beq.n	8006056 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602a:	f7fd feb5 	bl	8003d98 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006030:	e00a      	b.n	8006048 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006032:	f7fd feb1 	bl	8003d98 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006040:	4293      	cmp	r3, r2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e0d8      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006048:	4b4c      	ldr	r3, [pc, #304]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0ee      	beq.n	8006032 <HAL_RCC_OscConfig+0x386>
 8006054:	e014      	b.n	8006080 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006056:	f7fd fe9f 	bl	8003d98 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800605c:	e00a      	b.n	8006074 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605e:	f7fd fe9b 	bl	8003d98 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	f241 3288 	movw	r2, #5000	; 0x1388
 800606c:	4293      	cmp	r3, r2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e0c2      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006074:	4b41      	ldr	r3, [pc, #260]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1ee      	bne.n	800605e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d105      	bne.n	8006092 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006086:	4b3d      	ldr	r3, [pc, #244]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	4a3c      	ldr	r2, [pc, #240]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 800608c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006090:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 80ae 	beq.w	80061f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800609c:	4b37      	ldr	r3, [pc, #220]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d06d      	beq.n	8006184 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d14b      	bne.n	8006148 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b0:	4b32      	ldr	r3, [pc, #200]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a31      	ldr	r2, [pc, #196]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 80060b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fd fe6c 	bl	8003d98 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c4:	f7fd fe68 	bl	8003d98 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e091      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	4b29      	ldr	r3, [pc, #164]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69da      	ldr	r2, [r3, #28]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	019b      	lsls	r3, r3, #6
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	3b01      	subs	r3, #1
 80060fc:	041b      	lsls	r3, r3, #16
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	061b      	lsls	r3, r3, #24
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	071b      	lsls	r3, r3, #28
 800610e:	491b      	ldr	r1, [pc, #108]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8006110:	4313      	orrs	r3, r2
 8006112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006114:	4b19      	ldr	r3, [pc, #100]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a18      	ldr	r2, [pc, #96]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 800611a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800611e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fd fe3a 	bl	8003d98 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006128:	f7fd fe36 	bl	8003d98 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e05f      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800613a:	4b10      	ldr	r3, [pc, #64]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x47c>
 8006146:	e057      	b.n	80061f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a0b      	ldr	r2, [pc, #44]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 800614e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006154:	f7fd fe20 	bl	8003d98 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800615c:	f7fd fe1c 	bl	8003d98 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e045      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616e:	4b03      	ldr	r3, [pc, #12]	; (800617c <HAL_RCC_OscConfig+0x4d0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x4b0>
 800617a:	e03d      	b.n	80061f8 <HAL_RCC_OscConfig+0x54c>
 800617c:	40023800 	.word	0x40023800
 8006180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006184:	4b1f      	ldr	r3, [pc, #124]	; (8006204 <HAL_RCC_OscConfig+0x558>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d030      	beq.n	80061f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619c:	429a      	cmp	r2, r3
 800619e:	d129      	bne.n	80061f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d122      	bne.n	80061f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061bc:	4293      	cmp	r3, r2
 80061be:	d119      	bne.n	80061f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	3b01      	subs	r3, #1
 80061ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d10f      	bne.n	80061f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d107      	bne.n	80061f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d001      	beq.n	80061f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40023800 	.word	0x40023800

08006208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e0d0      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006220:	4b6a      	ldr	r3, [pc, #424]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d910      	bls.n	8006250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b67      	ldr	r3, [pc, #412]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 020f 	bic.w	r2, r3, #15
 8006236:	4965      	ldr	r1, [pc, #404]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623e:	4b63      	ldr	r3, [pc, #396]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0b8      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d020      	beq.n	800629e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006268:	4b59      	ldr	r3, [pc, #356]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4a58      	ldr	r2, [pc, #352]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800626e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006280:	4b53      	ldr	r3, [pc, #332]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4a52      	ldr	r2, [pc, #328]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800628a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800628c:	4b50      	ldr	r3, [pc, #320]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	494d      	ldr	r1, [pc, #308]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800629a:	4313      	orrs	r3, r2
 800629c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d040      	beq.n	800632c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d107      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	4b47      	ldr	r3, [pc, #284]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d115      	bne.n	80062ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e07f      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d107      	bne.n	80062da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ca:	4b41      	ldr	r3, [pc, #260]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e073      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062da:	4b3d      	ldr	r3, [pc, #244]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e06b      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ea:	4b39      	ldr	r3, [pc, #228]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f023 0203 	bic.w	r2, r3, #3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4936      	ldr	r1, [pc, #216]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fc:	f7fd fd4c 	bl	8003d98 <HAL_GetTick>
 8006300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006302:	e00a      	b.n	800631a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006304:	f7fd fd48 	bl	8003d98 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e053      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631a:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 020c 	and.w	r2, r3, #12
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	429a      	cmp	r2, r3
 800632a:	d1eb      	bne.n	8006304 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800632c:	4b27      	ldr	r3, [pc, #156]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d210      	bcs.n	800635c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b24      	ldr	r3, [pc, #144]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 020f 	bic.w	r2, r3, #15
 8006342:	4922      	ldr	r1, [pc, #136]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b20      	ldr	r3, [pc, #128]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e032      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006368:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4916      	ldr	r1, [pc, #88]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006386:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	490e      	ldr	r1, [pc, #56]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800639a:	f000 f821 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 800639e:	4601      	mov	r1, r0
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	4a0a      	ldr	r2, [pc, #40]	; (80063d4 <HAL_RCC_ClockConfig+0x1cc>)
 80063ac:	5cd3      	ldrb	r3, [r2, r3]
 80063ae:	fa21 f303 	lsr.w	r3, r1, r3
 80063b2:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <HAL_RCC_ClockConfig+0x1d0>)
 80063b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <HAL_RCC_ClockConfig+0x1d4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fd fb2a 	bl	8003a14 <HAL_InitTick>

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40023c00 	.word	0x40023c00
 80063d0:	40023800 	.word	0x40023800
 80063d4:	0800c1e0 	.word	0x0800c1e0
 80063d8:	20000030 	.word	0x20000030
 80063dc:	20000034 	.word	0x20000034

080063e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	2300      	movs	r3, #0
 80063f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f6:	4b50      	ldr	r3, [pc, #320]	; (8006538 <HAL_RCC_GetSysClockFreq+0x158>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d007      	beq.n	8006412 <HAL_RCC_GetSysClockFreq+0x32>
 8006402:	2b08      	cmp	r3, #8
 8006404:	d008      	beq.n	8006418 <HAL_RCC_GetSysClockFreq+0x38>
 8006406:	2b00      	cmp	r3, #0
 8006408:	f040 808d 	bne.w	8006526 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800640c:	4b4b      	ldr	r3, [pc, #300]	; (800653c <HAL_RCC_GetSysClockFreq+0x15c>)
 800640e:	60bb      	str	r3, [r7, #8]
      break;
 8006410:	e08c      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006412:	4b4b      	ldr	r3, [pc, #300]	; (8006540 <HAL_RCC_GetSysClockFreq+0x160>)
 8006414:	60bb      	str	r3, [r7, #8]
      break;
 8006416:	e089      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006418:	4b47      	ldr	r3, [pc, #284]	; (8006538 <HAL_RCC_GetSysClockFreq+0x158>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006420:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006422:	4b45      	ldr	r3, [pc, #276]	; (8006538 <HAL_RCC_GetSysClockFreq+0x158>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d023      	beq.n	8006476 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800642e:	4b42      	ldr	r3, [pc, #264]	; (8006538 <HAL_RCC_GetSysClockFreq+0x158>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	099b      	lsrs	r3, r3, #6
 8006434:	f04f 0400 	mov.w	r4, #0
 8006438:	f240 11ff 	movw	r1, #511	; 0x1ff
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	ea03 0501 	and.w	r5, r3, r1
 8006444:	ea04 0602 	and.w	r6, r4, r2
 8006448:	4a3d      	ldr	r2, [pc, #244]	; (8006540 <HAL_RCC_GetSysClockFreq+0x160>)
 800644a:	fb02 f106 	mul.w	r1, r2, r6
 800644e:	2200      	movs	r2, #0
 8006450:	fb02 f205 	mul.w	r2, r2, r5
 8006454:	440a      	add	r2, r1
 8006456:	493a      	ldr	r1, [pc, #232]	; (8006540 <HAL_RCC_GetSysClockFreq+0x160>)
 8006458:	fba5 0101 	umull	r0, r1, r5, r1
 800645c:	1853      	adds	r3, r2, r1
 800645e:	4619      	mov	r1, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f04f 0400 	mov.w	r4, #0
 8006466:	461a      	mov	r2, r3
 8006468:	4623      	mov	r3, r4
 800646a:	f7f9 ff41 	bl	80002f0 <__aeabi_uldivmod>
 800646e:	4603      	mov	r3, r0
 8006470:	460c      	mov	r4, r1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e049      	b.n	800650a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006476:	4b30      	ldr	r3, [pc, #192]	; (8006538 <HAL_RCC_GetSysClockFreq+0x158>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	099b      	lsrs	r3, r3, #6
 800647c:	f04f 0400 	mov.w	r4, #0
 8006480:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	ea03 0501 	and.w	r5, r3, r1
 800648c:	ea04 0602 	and.w	r6, r4, r2
 8006490:	4629      	mov	r1, r5
 8006492:	4632      	mov	r2, r6
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	f04f 0400 	mov.w	r4, #0
 800649c:	0154      	lsls	r4, r2, #5
 800649e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80064a2:	014b      	lsls	r3, r1, #5
 80064a4:	4619      	mov	r1, r3
 80064a6:	4622      	mov	r2, r4
 80064a8:	1b49      	subs	r1, r1, r5
 80064aa:	eb62 0206 	sbc.w	r2, r2, r6
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	f04f 0400 	mov.w	r4, #0
 80064b6:	0194      	lsls	r4, r2, #6
 80064b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80064bc:	018b      	lsls	r3, r1, #6
 80064be:	1a5b      	subs	r3, r3, r1
 80064c0:	eb64 0402 	sbc.w	r4, r4, r2
 80064c4:	f04f 0100 	mov.w	r1, #0
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	00e2      	lsls	r2, r4, #3
 80064ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80064d2:	00d9      	lsls	r1, r3, #3
 80064d4:	460b      	mov	r3, r1
 80064d6:	4614      	mov	r4, r2
 80064d8:	195b      	adds	r3, r3, r5
 80064da:	eb44 0406 	adc.w	r4, r4, r6
 80064de:	f04f 0100 	mov.w	r1, #0
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	02a2      	lsls	r2, r4, #10
 80064e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80064ec:	0299      	lsls	r1, r3, #10
 80064ee:	460b      	mov	r3, r1
 80064f0:	4614      	mov	r4, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	4621      	mov	r1, r4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f04f 0400 	mov.w	r4, #0
 80064fc:	461a      	mov	r2, r3
 80064fe:	4623      	mov	r3, r4
 8006500:	f7f9 fef6 	bl	80002f0 <__aeabi_uldivmod>
 8006504:	4603      	mov	r3, r0
 8006506:	460c      	mov	r4, r1
 8006508:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800650a:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <HAL_RCC_GetSysClockFreq+0x158>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	0c1b      	lsrs	r3, r3, #16
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	3301      	adds	r3, #1
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006522:	60bb      	str	r3, [r7, #8]
      break;
 8006524:	e002      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006528:	60bb      	str	r3, [r7, #8]
      break;
 800652a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800652c:	68bb      	ldr	r3, [r7, #8]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006536:	bf00      	nop
 8006538:	40023800 	.word	0x40023800
 800653c:	00f42400 	.word	0x00f42400
 8006540:	017d7840 	.word	0x017d7840

08006544 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <HAL_RCC_GetHCLKFreq+0x14>)
 800654a:	681b      	ldr	r3, [r3, #0]
}
 800654c:	4618      	mov	r0, r3
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	20000030 	.word	0x20000030

0800655c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006560:	f7ff fff0 	bl	8006544 <HAL_RCC_GetHCLKFreq>
 8006564:	4601      	mov	r1, r0
 8006566:	4b05      	ldr	r3, [pc, #20]	; (800657c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	0a9b      	lsrs	r3, r3, #10
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	4a03      	ldr	r2, [pc, #12]	; (8006580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006572:	5cd3      	ldrb	r3, [r2, r3]
 8006574:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40023800 	.word	0x40023800
 8006580:	0800c1f0 	.word	0x0800c1f0

08006584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006588:	f7ff ffdc 	bl	8006544 <HAL_RCC_GetHCLKFreq>
 800658c:	4601      	mov	r1, r0
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	0b5b      	lsrs	r3, r3, #13
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	4a03      	ldr	r2, [pc, #12]	; (80065a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800659a:	5cd3      	ldrb	r3, [r2, r3]
 800659c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40023800 	.word	0x40023800
 80065a8:	0800c1f0 	.word	0x0800c1f0

080065ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	220f      	movs	r2, #15
 80065ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065bc:	4b12      	ldr	r3, [pc, #72]	; (8006608 <HAL_RCC_GetClockConfig+0x5c>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0203 	and.w	r2, r3, #3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065c8:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <HAL_RCC_GetClockConfig+0x5c>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065d4:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <HAL_RCC_GetClockConfig+0x5c>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80065e0:	4b09      	ldr	r3, [pc, #36]	; (8006608 <HAL_RCC_GetClockConfig+0x5c>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	08db      	lsrs	r3, r3, #3
 80065e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065ee:	4b07      	ldr	r3, [pc, #28]	; (800660c <HAL_RCC_GetClockConfig+0x60>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 020f 	and.w	r2, r3, #15
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	601a      	str	r2, [r3, #0]
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40023800 	.word	0x40023800
 800660c:	40023c00 	.word	0x40023c00

08006610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d012      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006638:	4b69      	ldr	r3, [pc, #420]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	4a68      	ldr	r2, [pc, #416]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006642:	6093      	str	r3, [r2, #8]
 8006644:	4b66      	ldr	r3, [pc, #408]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664c:	4964      	ldr	r1, [pc, #400]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664e:	4313      	orrs	r3, r2
 8006650:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d017      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800666a:	4b5d      	ldr	r3, [pc, #372]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800666c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006678:	4959      	ldr	r1, [pc, #356]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006688:	d101      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800668a:	2301      	movs	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006696:	2301      	movs	r3, #1
 8006698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d017      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066a6:	4b4e      	ldr	r3, [pc, #312]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	494a      	ldr	r1, [pc, #296]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c4:	d101      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80066c6:	2301      	movs	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80066d2:	2301      	movs	r3, #1
 80066d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80066e2:	2301      	movs	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 808b 	beq.w	800680a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066f4:	4b3a      	ldr	r3, [pc, #232]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	4a39      	ldr	r2, [pc, #228]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fe:	6413      	str	r3, [r2, #64]	; 0x40
 8006700:	4b37      	ldr	r3, [pc, #220]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800670c:	4b35      	ldr	r3, [pc, #212]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a34      	ldr	r2, [pc, #208]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006718:	f7fd fb3e 	bl	8003d98 <HAL_GetTick>
 800671c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800671e:	e008      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006720:	f7fd fb3a 	bl	8003d98 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b64      	cmp	r3, #100	; 0x64
 800672c:	d901      	bls.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e356      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006732:	4b2c      	ldr	r3, [pc, #176]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800673e:	4b28      	ldr	r3, [pc, #160]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006746:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d035      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	429a      	cmp	r2, r3
 800675a:	d02e      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800675c:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006764:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006766:	4b1e      	ldr	r3, [pc, #120]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006770:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006772:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	4a1a      	ldr	r2, [pc, #104]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800677e:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006784:	4b16      	ldr	r3, [pc, #88]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b01      	cmp	r3, #1
 800678e:	d114      	bne.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006790:	f7fd fb02 	bl	8003d98 <HAL_GetTick>
 8006794:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006796:	e00a      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006798:	f7fd fafe 	bl	8003d98 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d901      	bls.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e318      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ae:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0ee      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c6:	d111      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067d4:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80067d6:	400b      	ands	r3, r1
 80067d8:	4901      	ldr	r1, [pc, #4]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	608b      	str	r3, [r1, #8]
 80067de:	e00b      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40007000 	.word	0x40007000
 80067e8:	0ffffcff 	.word	0x0ffffcff
 80067ec:	4bb1      	ldr	r3, [pc, #708]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4ab0      	ldr	r2, [pc, #704]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067f6:	6093      	str	r3, [r2, #8]
 80067f8:	4bae      	ldr	r3, [pc, #696]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006804:	49ab      	ldr	r1, [pc, #684]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006806:	4313      	orrs	r3, r2
 8006808:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0310 	and.w	r3, r3, #16
 8006812:	2b00      	cmp	r3, #0
 8006814:	d010      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006816:	4ba7      	ldr	r3, [pc, #668]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800681c:	4aa5      	ldr	r2, [pc, #660]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800681e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006822:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006826:	4ba3      	ldr	r3, [pc, #652]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006828:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	49a0      	ldr	r1, [pc, #640]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006844:	4b9b      	ldr	r3, [pc, #620]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006852:	4998      	ldr	r1, [pc, #608]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006866:	4b93      	ldr	r3, [pc, #588]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006874:	498f      	ldr	r1, [pc, #572]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006888:	4b8a      	ldr	r3, [pc, #552]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006896:	4987      	ldr	r1, [pc, #540]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068aa:	4b82      	ldr	r3, [pc, #520]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b8:	497e      	ldr	r1, [pc, #504]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068cc:	4b79      	ldr	r3, [pc, #484]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d2:	f023 0203 	bic.w	r2, r3, #3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	4976      	ldr	r1, [pc, #472]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068ee:	4b71      	ldr	r3, [pc, #452]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f4:	f023 020c 	bic.w	r2, r3, #12
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fc:	496d      	ldr	r1, [pc, #436]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006910:	4b68      	ldr	r3, [pc, #416]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006916:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691e:	4965      	ldr	r1, [pc, #404]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006932:	4b60      	ldr	r3, [pc, #384]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006938:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006940:	495c      	ldr	r1, [pc, #368]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006954:	4b57      	ldr	r3, [pc, #348]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	4954      	ldr	r1, [pc, #336]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006976:	4b4f      	ldr	r3, [pc, #316]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006984:	494b      	ldr	r1, [pc, #300]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006998:	4b46      	ldr	r3, [pc, #280]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a6:	4943      	ldr	r1, [pc, #268]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80069ba:	4b3e      	ldr	r3, [pc, #248]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c8:	493a      	ldr	r1, [pc, #232]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069dc:	4b35      	ldr	r3, [pc, #212]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ea:	4932      	ldr	r1, [pc, #200]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d011      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069fe:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0c:	4929      	ldr	r1, [pc, #164]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a1c:	d101      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a2e:	4b21      	ldr	r3, [pc, #132]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a3c:	491d      	ldr	r1, [pc, #116]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a50:	4b18      	ldr	r3, [pc, #96]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a60:	4914      	ldr	r1, [pc, #80]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006a74:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a84:	490b      	ldr	r1, [pc, #44]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00f      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	4902      	ldr	r1, [pc, #8]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8006ab0:	e002      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006ab2:	bf00      	nop
 8006ab4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006ac4:	4b80      	ldr	r3, [pc, #512]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ad4:	497c      	ldr	r1, [pc, #496]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d005      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aea:	f040 80d6 	bne.w	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aee:	4b76      	ldr	r3, [pc, #472]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a75      	ldr	r2, [pc, #468]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006af4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006afa:	f7fd f94d 	bl	8003d98 <HAL_GetTick>
 8006afe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b02:	f7fd f949 	bl	8003d98 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b64      	cmp	r3, #100	; 0x64
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e165      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b14:	4b6c      	ldr	r3, [pc, #432]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f0      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d021      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11d      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b34:	4b64      	ldr	r3, [pc, #400]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b42:	4b61      	ldr	r3, [pc, #388]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b48:	0e1b      	lsrs	r3, r3, #24
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	019a      	lsls	r2, r3, #6
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	041b      	lsls	r3, r3, #16
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	061b      	lsls	r3, r3, #24
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	071b      	lsls	r3, r3, #28
 8006b68:	4957      	ldr	r1, [pc, #348]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b84:	d00a      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d02e      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b9a:	d129      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b9c:	4b4a      	ldr	r3, [pc, #296]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba2:	0c1b      	lsrs	r3, r3, #16
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006baa:	4b47      	ldr	r3, [pc, #284]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bb0:	0f1b      	lsrs	r3, r3, #28
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	019a      	lsls	r2, r3, #6
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	041b      	lsls	r3, r3, #16
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	061b      	lsls	r3, r3, #24
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	071b      	lsls	r3, r3, #28
 8006bd0:	493d      	ldr	r1, [pc, #244]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bd8:	4b3b      	ldr	r3, [pc, #236]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bde:	f023 021f 	bic.w	r2, r3, #31
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	3b01      	subs	r3, #1
 8006be8:	4937      	ldr	r1, [pc, #220]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01d      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006bfc:	4b32      	ldr	r3, [pc, #200]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c02:	0e1b      	lsrs	r3, r3, #24
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c0a:	4b2f      	ldr	r3, [pc, #188]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c10:	0f1b      	lsrs	r3, r3, #28
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	019a      	lsls	r2, r3, #6
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	041b      	lsls	r3, r3, #16
 8006c24:	431a      	orrs	r2, r3
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	071b      	lsls	r3, r3, #28
 8006c30:	4925      	ldr	r1, [pc, #148]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d011      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	019a      	lsls	r2, r3, #6
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	041b      	lsls	r3, r3, #16
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	061b      	lsls	r3, r3, #24
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	071b      	lsls	r3, r3, #28
 8006c60:	4919      	ldr	r1, [pc, #100]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006c6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c74:	f7fd f890 	bl	8003d98 <HAL_GetTick>
 8006c78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c7c:	f7fd f88c 	bl	8003d98 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b64      	cmp	r3, #100	; 0x64
 8006c88:	d901      	bls.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e0a8      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f0      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	f040 809e 	bne.w	8006dde <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ca2:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cae:	f7fd f873 	bl	8003d98 <HAL_GetTick>
 8006cb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cb4:	e00a      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cb6:	f7fd f86f 	bl	8003d98 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b64      	cmp	r3, #100	; 0x64
 8006cc2:	d903      	bls.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e08b      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8006cc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ccc:	4b46      	ldr	r3, [pc, #280]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd8:	d0ed      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d02e      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d12a      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d02:	4b39      	ldr	r3, [pc, #228]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d08:	0c1b      	lsrs	r3, r3, #16
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d10:	4b35      	ldr	r3, [pc, #212]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d16:	0f1b      	lsrs	r3, r3, #28
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	019a      	lsls	r2, r3, #6
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	061b      	lsls	r3, r3, #24
 8006d30:	431a      	orrs	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	071b      	lsls	r3, r3, #28
 8006d36:	492c      	ldr	r1, [pc, #176]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d3e:	4b2a      	ldr	r3, [pc, #168]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	4925      	ldr	r1, [pc, #148]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d022      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d6c:	d11d      	bne.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d6e:	4b1e      	ldr	r3, [pc, #120]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d74:	0e1b      	lsrs	r3, r3, #24
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d7c:	4b1a      	ldr	r3, [pc, #104]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	0f1b      	lsrs	r3, r3, #28
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	019a      	lsls	r2, r3, #6
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	041b      	lsls	r3, r3, #16
 8006d96:	431a      	orrs	r2, r3
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	061b      	lsls	r3, r3, #24
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	071b      	lsls	r3, r3, #28
 8006da2:	4911      	ldr	r1, [pc, #68]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006daa:	4b0f      	ldr	r3, [pc, #60]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a0e      	ldr	r2, [pc, #56]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db6:	f7fc ffef 	bl	8003d98 <HAL_GetTick>
 8006dba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006dbe:	f7fc ffeb 	bl	8003d98 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b64      	cmp	r3, #100	; 0x64
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e007      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ddc:	d1ef      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3720      	adds	r7, #32
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40023800 	.word	0x40023800

08006dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e01d      	b.n	8006e3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f815 	bl	8006e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f000 f986 	bl	800713c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
	...

08006e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0201 	orr.w	r2, r2, #1
 8006e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <HAL_TIM_Base_Start_IT+0x50>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b06      	cmp	r3, #6
 8006e80:	d00b      	beq.n	8006e9a <HAL_TIM_Base_Start_IT+0x42>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e88:	d007      	beq.n	8006e9a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0201 	orr.w	r2, r2, #1
 8006e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	00010007 	.word	0x00010007

08006eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d122      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d11b      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0202 	mvn.w	r2, #2
 8006ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f905 	bl	80070fe <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f8f7 	bl	80070ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f908 	bl	8007112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0204 	mvn.w	r2, #4
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f8db 	bl	80070fe <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f8cd 	bl	80070ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f8de 	bl	8007112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0208 	mvn.w	r2, #8
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2204      	movs	r2, #4
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f8b1 	bl	80070fe <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f8a3 	bl	80070ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f8b4 	bl	8007112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0310 	and.w	r3, r3, #16
 8006fba:	2b10      	cmp	r3, #16
 8006fbc:	d122      	bne.n	8007004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b10      	cmp	r3, #16
 8006fca:	d11b      	bne.n	8007004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0210 	mvn.w	r2, #16
 8006fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2208      	movs	r2, #8
 8006fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f887 	bl	80070fe <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f879 	bl	80070ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f88a 	bl	8007112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b01      	cmp	r3, #1
 8007010:	d10e      	bne.n	8007030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b01      	cmp	r3, #1
 800701e:	d107      	bne.n	8007030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0201 	mvn.w	r2, #1
 8007028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fc fcb4 	bl	8003998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703a:	2b80      	cmp	r3, #128	; 0x80
 800703c:	d10e      	bne.n	800705c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007048:	2b80      	cmp	r3, #128	; 0x80
 800704a:	d107      	bne.n	800705c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f91a 	bl	8007290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706a:	d10e      	bne.n	800708a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b80      	cmp	r3, #128	; 0x80
 8007078:	d107      	bne.n	800708a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f90d 	bl	80072a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007094:	2b40      	cmp	r3, #64	; 0x40
 8007096:	d10e      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d107      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f838 	bl	8007126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d10e      	bne.n	80070e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d107      	bne.n	80070e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f06f 0220 	mvn.w	r2, #32
 80070da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8cd 	bl	800727c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a40      	ldr	r2, [pc, #256]	; (8007250 <TIM_Base_SetConfig+0x114>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d013      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715a:	d00f      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a3d      	ldr	r2, [pc, #244]	; (8007254 <TIM_Base_SetConfig+0x118>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00b      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a3c      	ldr	r2, [pc, #240]	; (8007258 <TIM_Base_SetConfig+0x11c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d007      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a3b      	ldr	r2, [pc, #236]	; (800725c <TIM_Base_SetConfig+0x120>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a3a      	ldr	r2, [pc, #232]	; (8007260 <TIM_Base_SetConfig+0x124>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d108      	bne.n	800718e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2f      	ldr	r2, [pc, #188]	; (8007250 <TIM_Base_SetConfig+0x114>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d02b      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719c:	d027      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2c      	ldr	r2, [pc, #176]	; (8007254 <TIM_Base_SetConfig+0x118>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d023      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2b      	ldr	r2, [pc, #172]	; (8007258 <TIM_Base_SetConfig+0x11c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d01f      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2a      	ldr	r2, [pc, #168]	; (800725c <TIM_Base_SetConfig+0x120>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d01b      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a29      	ldr	r2, [pc, #164]	; (8007260 <TIM_Base_SetConfig+0x124>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d017      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a28      	ldr	r2, [pc, #160]	; (8007264 <TIM_Base_SetConfig+0x128>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d013      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a27      	ldr	r2, [pc, #156]	; (8007268 <TIM_Base_SetConfig+0x12c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00f      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a26      	ldr	r2, [pc, #152]	; (800726c <TIM_Base_SetConfig+0x130>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00b      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a25      	ldr	r2, [pc, #148]	; (8007270 <TIM_Base_SetConfig+0x134>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d007      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a24      	ldr	r2, [pc, #144]	; (8007274 <TIM_Base_SetConfig+0x138>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d003      	beq.n	80071ee <TIM_Base_SetConfig+0xb2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a23      	ldr	r2, [pc, #140]	; (8007278 <TIM_Base_SetConfig+0x13c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d108      	bne.n	8007200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a0a      	ldr	r2, [pc, #40]	; (8007250 <TIM_Base_SetConfig+0x114>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_Base_SetConfig+0xf8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a0c      	ldr	r2, [pc, #48]	; (8007260 <TIM_Base_SetConfig+0x124>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d103      	bne.n	800723c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	615a      	str	r2, [r3, #20]
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40010000 	.word	0x40010000
 8007254:	40000400 	.word	0x40000400
 8007258:	40000800 	.word	0x40000800
 800725c:	40000c00 	.word	0x40000c00
 8007260:	40010400 	.word	0x40010400
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800
 8007270:	40001800 	.word	0x40001800
 8007274:	40001c00 	.word	0x40001c00
 8007278:	40002000 	.word	0x40002000

0800727c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e040      	b.n	800734c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fc fcce 	bl	8003c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2224      	movs	r2, #36	; 0x24
 80072e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0201 	bic.w	r2, r2, #1
 80072f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f8be 	bl	8007478 <UART_SetConfig>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e022      	b.n	800734c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fb5c 	bl	80079cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0201 	orr.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fbe3 	bl	8007b10 <UART_CheckIdleState>
 800734a:	4603      	mov	r3, r0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007368:	2b20      	cmp	r3, #32
 800736a:	d17f      	bne.n	800746c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <HAL_UART_Transmit+0x24>
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e078      	b.n	800746e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_UART_Transmit+0x36>
 8007386:	2302      	movs	r3, #2
 8007388:	e071      	b.n	800746e <HAL_UART_Transmit+0x11a>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2221      	movs	r2, #33	; 0x21
 800739c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800739e:	f7fc fcfb 	bl	8003d98 <HAL_GetTick>
 80073a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	88fa      	ldrh	r2, [r7, #6]
 80073a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	88fa      	ldrh	r2, [r7, #6]
 80073b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073bc:	d108      	bne.n	80073d0 <HAL_UART_Transmit+0x7c>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d104      	bne.n	80073d0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	e003      	b.n	80073d8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80073e0:	e02c      	b.n	800743c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2200      	movs	r2, #0
 80073ea:	2180      	movs	r1, #128	; 0x80
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fbd4 	bl	8007b9a <UART_WaitOnFlagUntilTimeout>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e038      	b.n	800746e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10b      	bne.n	800741a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007410:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	3302      	adds	r3, #2
 8007416:	61bb      	str	r3, [r7, #24]
 8007418:	e007      	b.n	800742a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	781a      	ldrb	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	3301      	adds	r3, #1
 8007428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1cc      	bne.n	80073e2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2200      	movs	r2, #0
 8007450:	2140      	movs	r1, #64	; 0x40
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fba1 	bl	8007b9a <UART_WaitOnFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e005      	b.n	800746e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2220      	movs	r2, #32
 8007466:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	e000      	b.n	800746e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800746c:	2302      	movs	r3, #2
  }
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007480:	2300      	movs	r3, #0
 8007482:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	4bb1      	ldr	r3, [pc, #708]	; (800776c <UART_SetConfig+0x2f4>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	6939      	ldr	r1, [r7, #16]
 80074b0:	430b      	orrs	r3, r1
 80074b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a9f      	ldr	r2, [pc, #636]	; (8007770 <UART_SetConfig+0x2f8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d121      	bne.n	800753c <UART_SetConfig+0xc4>
 80074f8:	4b9e      	ldr	r3, [pc, #632]	; (8007774 <UART_SetConfig+0x2fc>)
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	2b03      	cmp	r3, #3
 8007504:	d816      	bhi.n	8007534 <UART_SetConfig+0xbc>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <UART_SetConfig+0x94>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	0800751d 	.word	0x0800751d
 8007510:	08007529 	.word	0x08007529
 8007514:	08007523 	.word	0x08007523
 8007518:	0800752f 	.word	0x0800752f
 800751c:	2301      	movs	r3, #1
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e151      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007522:	2302      	movs	r3, #2
 8007524:	77fb      	strb	r3, [r7, #31]
 8007526:	e14e      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007528:	2304      	movs	r3, #4
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e14b      	b.n	80077c6 <UART_SetConfig+0x34e>
 800752e:	2308      	movs	r3, #8
 8007530:	77fb      	strb	r3, [r7, #31]
 8007532:	e148      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007534:	2310      	movs	r3, #16
 8007536:	77fb      	strb	r3, [r7, #31]
 8007538:	bf00      	nop
 800753a:	e144      	b.n	80077c6 <UART_SetConfig+0x34e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a8d      	ldr	r2, [pc, #564]	; (8007778 <UART_SetConfig+0x300>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d134      	bne.n	80075b0 <UART_SetConfig+0x138>
 8007546:	4b8b      	ldr	r3, [pc, #556]	; (8007774 <UART_SetConfig+0x2fc>)
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754c:	f003 030c 	and.w	r3, r3, #12
 8007550:	2b0c      	cmp	r3, #12
 8007552:	d829      	bhi.n	80075a8 <UART_SetConfig+0x130>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0xe4>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007591 	.word	0x08007591
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075a9 	.word	0x080075a9
 800756c:	0800759d 	.word	0x0800759d
 8007570:	080075a9 	.word	0x080075a9
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080075a9 	.word	0x080075a9
 800757c:	08007597 	.word	0x08007597
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075a9 	.word	0x080075a9
 800758c:	080075a3 	.word	0x080075a3
 8007590:	2300      	movs	r3, #0
 8007592:	77fb      	strb	r3, [r7, #31]
 8007594:	e117      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007596:	2302      	movs	r3, #2
 8007598:	77fb      	strb	r3, [r7, #31]
 800759a:	e114      	b.n	80077c6 <UART_SetConfig+0x34e>
 800759c:	2304      	movs	r3, #4
 800759e:	77fb      	strb	r3, [r7, #31]
 80075a0:	e111      	b.n	80077c6 <UART_SetConfig+0x34e>
 80075a2:	2308      	movs	r3, #8
 80075a4:	77fb      	strb	r3, [r7, #31]
 80075a6:	e10e      	b.n	80077c6 <UART_SetConfig+0x34e>
 80075a8:	2310      	movs	r3, #16
 80075aa:	77fb      	strb	r3, [r7, #31]
 80075ac:	bf00      	nop
 80075ae:	e10a      	b.n	80077c6 <UART_SetConfig+0x34e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a71      	ldr	r2, [pc, #452]	; (800777c <UART_SetConfig+0x304>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d120      	bne.n	80075fc <UART_SetConfig+0x184>
 80075ba:	4b6e      	ldr	r3, [pc, #440]	; (8007774 <UART_SetConfig+0x2fc>)
 80075bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d00f      	beq.n	80075e8 <UART_SetConfig+0x170>
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d802      	bhi.n	80075d2 <UART_SetConfig+0x15a>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d005      	beq.n	80075dc <UART_SetConfig+0x164>
 80075d0:	e010      	b.n	80075f4 <UART_SetConfig+0x17c>
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d005      	beq.n	80075e2 <UART_SetConfig+0x16a>
 80075d6:	2b30      	cmp	r3, #48	; 0x30
 80075d8:	d009      	beq.n	80075ee <UART_SetConfig+0x176>
 80075da:	e00b      	b.n	80075f4 <UART_SetConfig+0x17c>
 80075dc:	2300      	movs	r3, #0
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e0f1      	b.n	80077c6 <UART_SetConfig+0x34e>
 80075e2:	2302      	movs	r3, #2
 80075e4:	77fb      	strb	r3, [r7, #31]
 80075e6:	e0ee      	b.n	80077c6 <UART_SetConfig+0x34e>
 80075e8:	2304      	movs	r3, #4
 80075ea:	77fb      	strb	r3, [r7, #31]
 80075ec:	e0eb      	b.n	80077c6 <UART_SetConfig+0x34e>
 80075ee:	2308      	movs	r3, #8
 80075f0:	77fb      	strb	r3, [r7, #31]
 80075f2:	e0e8      	b.n	80077c6 <UART_SetConfig+0x34e>
 80075f4:	2310      	movs	r3, #16
 80075f6:	77fb      	strb	r3, [r7, #31]
 80075f8:	bf00      	nop
 80075fa:	e0e4      	b.n	80077c6 <UART_SetConfig+0x34e>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a5f      	ldr	r2, [pc, #380]	; (8007780 <UART_SetConfig+0x308>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d120      	bne.n	8007648 <UART_SetConfig+0x1d0>
 8007606:	4b5b      	ldr	r3, [pc, #364]	; (8007774 <UART_SetConfig+0x2fc>)
 8007608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007610:	2b40      	cmp	r3, #64	; 0x40
 8007612:	d00f      	beq.n	8007634 <UART_SetConfig+0x1bc>
 8007614:	2b40      	cmp	r3, #64	; 0x40
 8007616:	d802      	bhi.n	800761e <UART_SetConfig+0x1a6>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <UART_SetConfig+0x1b0>
 800761c:	e010      	b.n	8007640 <UART_SetConfig+0x1c8>
 800761e:	2b80      	cmp	r3, #128	; 0x80
 8007620:	d005      	beq.n	800762e <UART_SetConfig+0x1b6>
 8007622:	2bc0      	cmp	r3, #192	; 0xc0
 8007624:	d009      	beq.n	800763a <UART_SetConfig+0x1c2>
 8007626:	e00b      	b.n	8007640 <UART_SetConfig+0x1c8>
 8007628:	2300      	movs	r3, #0
 800762a:	77fb      	strb	r3, [r7, #31]
 800762c:	e0cb      	b.n	80077c6 <UART_SetConfig+0x34e>
 800762e:	2302      	movs	r3, #2
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e0c8      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007634:	2304      	movs	r3, #4
 8007636:	77fb      	strb	r3, [r7, #31]
 8007638:	e0c5      	b.n	80077c6 <UART_SetConfig+0x34e>
 800763a:	2308      	movs	r3, #8
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e0c2      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007640:	2310      	movs	r3, #16
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	bf00      	nop
 8007646:	e0be      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a4d      	ldr	r2, [pc, #308]	; (8007784 <UART_SetConfig+0x30c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d124      	bne.n	800769c <UART_SetConfig+0x224>
 8007652:	4b48      	ldr	r3, [pc, #288]	; (8007774 <UART_SetConfig+0x2fc>)
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800765c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007660:	d012      	beq.n	8007688 <UART_SetConfig+0x210>
 8007662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007666:	d802      	bhi.n	800766e <UART_SetConfig+0x1f6>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <UART_SetConfig+0x204>
 800766c:	e012      	b.n	8007694 <UART_SetConfig+0x21c>
 800766e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007672:	d006      	beq.n	8007682 <UART_SetConfig+0x20a>
 8007674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007678:	d009      	beq.n	800768e <UART_SetConfig+0x216>
 800767a:	e00b      	b.n	8007694 <UART_SetConfig+0x21c>
 800767c:	2300      	movs	r3, #0
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e0a1      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007682:	2302      	movs	r3, #2
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e09e      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007688:	2304      	movs	r3, #4
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e09b      	b.n	80077c6 <UART_SetConfig+0x34e>
 800768e:	2308      	movs	r3, #8
 8007690:	77fb      	strb	r3, [r7, #31]
 8007692:	e098      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007694:	2310      	movs	r3, #16
 8007696:	77fb      	strb	r3, [r7, #31]
 8007698:	bf00      	nop
 800769a:	e094      	b.n	80077c6 <UART_SetConfig+0x34e>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a39      	ldr	r2, [pc, #228]	; (8007788 <UART_SetConfig+0x310>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d124      	bne.n	80076f0 <UART_SetConfig+0x278>
 80076a6:	4b33      	ldr	r3, [pc, #204]	; (8007774 <UART_SetConfig+0x2fc>)
 80076a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b4:	d012      	beq.n	80076dc <UART_SetConfig+0x264>
 80076b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ba:	d802      	bhi.n	80076c2 <UART_SetConfig+0x24a>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <UART_SetConfig+0x258>
 80076c0:	e012      	b.n	80076e8 <UART_SetConfig+0x270>
 80076c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c6:	d006      	beq.n	80076d6 <UART_SetConfig+0x25e>
 80076c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076cc:	d009      	beq.n	80076e2 <UART_SetConfig+0x26a>
 80076ce:	e00b      	b.n	80076e8 <UART_SetConfig+0x270>
 80076d0:	2301      	movs	r3, #1
 80076d2:	77fb      	strb	r3, [r7, #31]
 80076d4:	e077      	b.n	80077c6 <UART_SetConfig+0x34e>
 80076d6:	2302      	movs	r3, #2
 80076d8:	77fb      	strb	r3, [r7, #31]
 80076da:	e074      	b.n	80077c6 <UART_SetConfig+0x34e>
 80076dc:	2304      	movs	r3, #4
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e071      	b.n	80077c6 <UART_SetConfig+0x34e>
 80076e2:	2308      	movs	r3, #8
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e06e      	b.n	80077c6 <UART_SetConfig+0x34e>
 80076e8:	2310      	movs	r3, #16
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	bf00      	nop
 80076ee:	e06a      	b.n	80077c6 <UART_SetConfig+0x34e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a25      	ldr	r2, [pc, #148]	; (800778c <UART_SetConfig+0x314>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d124      	bne.n	8007744 <UART_SetConfig+0x2cc>
 80076fa:	4b1e      	ldr	r3, [pc, #120]	; (8007774 <UART_SetConfig+0x2fc>)
 80076fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007700:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007708:	d012      	beq.n	8007730 <UART_SetConfig+0x2b8>
 800770a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770e:	d802      	bhi.n	8007716 <UART_SetConfig+0x29e>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <UART_SetConfig+0x2ac>
 8007714:	e012      	b.n	800773c <UART_SetConfig+0x2c4>
 8007716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800771a:	d006      	beq.n	800772a <UART_SetConfig+0x2b2>
 800771c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007720:	d009      	beq.n	8007736 <UART_SetConfig+0x2be>
 8007722:	e00b      	b.n	800773c <UART_SetConfig+0x2c4>
 8007724:	2300      	movs	r3, #0
 8007726:	77fb      	strb	r3, [r7, #31]
 8007728:	e04d      	b.n	80077c6 <UART_SetConfig+0x34e>
 800772a:	2302      	movs	r3, #2
 800772c:	77fb      	strb	r3, [r7, #31]
 800772e:	e04a      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007730:	2304      	movs	r3, #4
 8007732:	77fb      	strb	r3, [r7, #31]
 8007734:	e047      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007736:	2308      	movs	r3, #8
 8007738:	77fb      	strb	r3, [r7, #31]
 800773a:	e044      	b.n	80077c6 <UART_SetConfig+0x34e>
 800773c:	2310      	movs	r3, #16
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	bf00      	nop
 8007742:	e040      	b.n	80077c6 <UART_SetConfig+0x34e>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a11      	ldr	r2, [pc, #68]	; (8007790 <UART_SetConfig+0x318>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d139      	bne.n	80077c2 <UART_SetConfig+0x34a>
 800774e:	4b09      	ldr	r3, [pc, #36]	; (8007774 <UART_SetConfig+0x2fc>)
 8007750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800775c:	d027      	beq.n	80077ae <UART_SetConfig+0x336>
 800775e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007762:	d817      	bhi.n	8007794 <UART_SetConfig+0x31c>
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01c      	beq.n	80077a2 <UART_SetConfig+0x32a>
 8007768:	e027      	b.n	80077ba <UART_SetConfig+0x342>
 800776a:	bf00      	nop
 800776c:	efff69f3 	.word	0xefff69f3
 8007770:	40011000 	.word	0x40011000
 8007774:	40023800 	.word	0x40023800
 8007778:	40004400 	.word	0x40004400
 800777c:	40004800 	.word	0x40004800
 8007780:	40004c00 	.word	0x40004c00
 8007784:	40005000 	.word	0x40005000
 8007788:	40011400 	.word	0x40011400
 800778c:	40007800 	.word	0x40007800
 8007790:	40007c00 	.word	0x40007c00
 8007794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007798:	d006      	beq.n	80077a8 <UART_SetConfig+0x330>
 800779a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800779e:	d009      	beq.n	80077b4 <UART_SetConfig+0x33c>
 80077a0:	e00b      	b.n	80077ba <UART_SetConfig+0x342>
 80077a2:	2300      	movs	r3, #0
 80077a4:	77fb      	strb	r3, [r7, #31]
 80077a6:	e00e      	b.n	80077c6 <UART_SetConfig+0x34e>
 80077a8:	2302      	movs	r3, #2
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	e00b      	b.n	80077c6 <UART_SetConfig+0x34e>
 80077ae:	2304      	movs	r3, #4
 80077b0:	77fb      	strb	r3, [r7, #31]
 80077b2:	e008      	b.n	80077c6 <UART_SetConfig+0x34e>
 80077b4:	2308      	movs	r3, #8
 80077b6:	77fb      	strb	r3, [r7, #31]
 80077b8:	e005      	b.n	80077c6 <UART_SetConfig+0x34e>
 80077ba:	2310      	movs	r3, #16
 80077bc:	77fb      	strb	r3, [r7, #31]
 80077be:	bf00      	nop
 80077c0:	e001      	b.n	80077c6 <UART_SetConfig+0x34e>
 80077c2:	2310      	movs	r3, #16
 80077c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ce:	d17f      	bne.n	80078d0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80077d0:	7ffb      	ldrb	r3, [r7, #31]
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d85c      	bhi.n	8007890 <UART_SetConfig+0x418>
 80077d6:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <UART_SetConfig+0x364>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007821 	.word	0x08007821
 80077e4:	08007841 	.word	0x08007841
 80077e8:	08007891 	.word	0x08007891
 80077ec:	08007859 	.word	0x08007859
 80077f0:	08007891 	.word	0x08007891
 80077f4:	08007891 	.word	0x08007891
 80077f8:	08007891 	.word	0x08007891
 80077fc:	08007879 	.word	0x08007879
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007800:	f7fe feac 	bl	800655c <HAL_RCC_GetPCLK1Freq>
 8007804:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	005a      	lsls	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	085b      	lsrs	r3, r3, #1
 8007810:	441a      	add	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	fbb2 f3f3 	udiv	r3, r2, r3
 800781a:	b29b      	uxth	r3, r3
 800781c:	61bb      	str	r3, [r7, #24]
        break;
 800781e:	e03a      	b.n	8007896 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007820:	f7fe feb0 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 8007824:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	005a      	lsls	r2, r3, #1
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	441a      	add	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	fbb2 f3f3 	udiv	r3, r2, r3
 800783a:	b29b      	uxth	r3, r3
 800783c:	61bb      	str	r3, [r7, #24]
        break;
 800783e:	e02a      	b.n	8007896 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	085a      	lsrs	r2, r3, #1
 8007846:	4b5f      	ldr	r3, [pc, #380]	; (80079c4 <UART_SetConfig+0x54c>)
 8007848:	4413      	add	r3, r2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6852      	ldr	r2, [r2, #4]
 800784e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007852:	b29b      	uxth	r3, r3
 8007854:	61bb      	str	r3, [r7, #24]
        break;
 8007856:	e01e      	b.n	8007896 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007858:	f7fe fdc2 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 800785c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	005a      	lsls	r2, r3, #1
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	085b      	lsrs	r3, r3, #1
 8007868:	441a      	add	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007872:	b29b      	uxth	r3, r3
 8007874:	61bb      	str	r3, [r7, #24]
        break;
 8007876:	e00e      	b.n	8007896 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	fbb2 f3f3 	udiv	r3, r2, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	61bb      	str	r3, [r7, #24]
        break;
 800788e:	e002      	b.n	8007896 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	75fb      	strb	r3, [r7, #23]
        break;
 8007894:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b0f      	cmp	r3, #15
 800789a:	d916      	bls.n	80078ca <UART_SetConfig+0x452>
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a2:	d212      	bcs.n	80078ca <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f023 030f 	bic.w	r3, r3, #15
 80078ac:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	897b      	ldrh	r3, [r7, #10]
 80078bc:	4313      	orrs	r3, r2
 80078be:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	897a      	ldrh	r2, [r7, #10]
 80078c6:	60da      	str	r2, [r3, #12]
 80078c8:	e070      	b.n	80079ac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
 80078ce:	e06d      	b.n	80079ac <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80078d0:	7ffb      	ldrb	r3, [r7, #31]
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d859      	bhi.n	800798a <UART_SetConfig+0x512>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <UART_SetConfig+0x464>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	08007901 	.word	0x08007901
 80078e0:	0800791f 	.word	0x0800791f
 80078e4:	0800793d 	.word	0x0800793d
 80078e8:	0800798b 	.word	0x0800798b
 80078ec:	08007955 	.word	0x08007955
 80078f0:	0800798b 	.word	0x0800798b
 80078f4:	0800798b 	.word	0x0800798b
 80078f8:	0800798b 	.word	0x0800798b
 80078fc:	08007973 	.word	0x08007973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007900:	f7fe fe2c 	bl	800655c <HAL_RCC_GetPCLK1Freq>
 8007904:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	085a      	lsrs	r2, r3, #1
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	441a      	add	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	fbb2 f3f3 	udiv	r3, r2, r3
 8007918:	b29b      	uxth	r3, r3
 800791a:	61bb      	str	r3, [r7, #24]
        break;
 800791c:	e038      	b.n	8007990 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800791e:	f7fe fe31 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 8007922:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	085a      	lsrs	r2, r3, #1
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	441a      	add	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	fbb2 f3f3 	udiv	r3, r2, r3
 8007936:	b29b      	uxth	r3, r3
 8007938:	61bb      	str	r3, [r7, #24]
        break;
 800793a:	e029      	b.n	8007990 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	085a      	lsrs	r2, r3, #1
 8007942:	4b21      	ldr	r3, [pc, #132]	; (80079c8 <UART_SetConfig+0x550>)
 8007944:	4413      	add	r3, r2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6852      	ldr	r2, [r2, #4]
 800794a:	fbb3 f3f2 	udiv	r3, r3, r2
 800794e:	b29b      	uxth	r3, r3
 8007950:	61bb      	str	r3, [r7, #24]
        break;
 8007952:	e01d      	b.n	8007990 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007954:	f7fe fd44 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 8007958:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	085a      	lsrs	r2, r3, #1
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	441a      	add	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	b29b      	uxth	r3, r3
 800796e:	61bb      	str	r3, [r7, #24]
        break;
 8007970:	e00e      	b.n	8007990 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	fbb2 f3f3 	udiv	r3, r2, r3
 8007984:	b29b      	uxth	r3, r3
 8007986:	61bb      	str	r3, [r7, #24]
        break;
 8007988:	e002      	b.n	8007990 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	75fb      	strb	r3, [r7, #23]
        break;
 800798e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b0f      	cmp	r3, #15
 8007994:	d908      	bls.n	80079a8 <UART_SetConfig+0x530>
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799c:	d204      	bcs.n	80079a8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	60da      	str	r2, [r3, #12]
 80079a6:	e001      	b.n	80079ac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	01e84800 	.word	0x01e84800
 80079c8:	00f42400 	.word	0x00f42400

080079cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00a      	beq.n	80079f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00a      	beq.n	8007a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	f003 0310 	and.w	r3, r3, #16
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01a      	beq.n	8007ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aca:	d10a      	bne.n	8007ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00a      	beq.n	8007b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	605a      	str	r2, [r3, #4]
  }
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af02      	add	r7, sp, #8
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007b1e:	f7fc f93b 	bl	8003d98 <HAL_GetTick>
 8007b22:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d10e      	bne.n	8007b50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f82a 	bl	8007b9a <UART_WaitOnFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e020      	b.n	8007b92 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d10e      	bne.n	8007b7c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f814 	bl	8007b9a <UART_WaitOnFlagUntilTimeout>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e00a      	b.n	8007b92 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	603b      	str	r3, [r7, #0]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007baa:	e05d      	b.n	8007c68 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bb2:	d059      	beq.n	8007c68 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb4:	f7fc f8f0 	bl	8003d98 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d302      	bcc.n	8007bca <UART_WaitOnFlagUntilTimeout+0x30>
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d11b      	bne.n	8007c02 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007bd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 0201 	bic.w	r2, r2, #1
 8007be8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2220      	movs	r2, #32
 8007bee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e042      	b.n	8007c88 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d02b      	beq.n	8007c68 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c1e:	d123      	bne.n	8007c68 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c28:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0201 	bic.w	r2, r2, #1
 8007c48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2220      	movs	r2, #32
 8007c54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e00f      	b.n	8007c88 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	69da      	ldr	r2, [r3, #28]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	4013      	ands	r3, r2
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	bf0c      	ite	eq
 8007c78:	2301      	moveq	r3, #1
 8007c7a:	2300      	movne	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	461a      	mov	r2, r3
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d092      	beq.n	8007bac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007c94:	bf00      	nop
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
	...

08007ca0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca6:	f3ef 8305 	mrs	r3, IPSR
 8007caa:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10f      	bne.n	8007cd2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb6:	607b      	str	r3, [r7, #4]
  return(result);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8007cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <osKernelInitialize+0x3a>
 8007cca:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <osKernelInitialize+0x64>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d103      	bne.n	8007cda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007cd2:	f06f 0305 	mvn.w	r3, #5
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	e00c      	b.n	8007cf4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cda:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <osKernelInitialize+0x64>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d105      	bne.n	8007cee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ce2:	4b08      	ldr	r3, [pc, #32]	; (8007d04 <osKernelInitialize+0x64>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	e002      	b.n	8007cf4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	200000d0 	.word	0x200000d0

08007d08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d0e:	f3ef 8305 	mrs	r3, IPSR
 8007d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10f      	bne.n	8007d3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d1e:	607b      	str	r3, [r7, #4]
  return(result);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d105      	bne.n	8007d32 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d26:	f3ef 8311 	mrs	r3, BASEPRI
 8007d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <osKernelStart+0x3a>
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <osKernelStart+0x68>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d103      	bne.n	8007d42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007d3a:	f06f 0305 	mvn.w	r3, #5
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	e010      	b.n	8007d64 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <osKernelStart+0x68>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d109      	bne.n	8007d5e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d4a:	f7ff ffa1 	bl	8007c90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d4e:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <osKernelStart+0x68>)
 8007d50:	2202      	movs	r2, #2
 8007d52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d54:	f001 ff10 	bl	8009b78 <vTaskStartScheduler>
      stat = osOK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	e002      	b.n	8007d64 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d64:	68fb      	ldr	r3, [r7, #12]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	200000d0 	.word	0x200000d0

08007d74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b090      	sub	sp, #64	; 0x40
 8007d78:	af04      	add	r7, sp, #16
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d84:	f3ef 8305 	mrs	r3, IPSR
 8007d88:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d8a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 808f 	bne.w	8007eb0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d92:	f3ef 8310 	mrs	r3, PRIMASK
 8007d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d105      	bne.n	8007daa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8007da2:	617b      	str	r3, [r7, #20]
  return(result);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <osThreadNew+0x3e>
 8007daa:	4b44      	ldr	r3, [pc, #272]	; (8007ebc <osThreadNew+0x148>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d07e      	beq.n	8007eb0 <osThreadNew+0x13c>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d07b      	beq.n	8007eb0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007db8:	2380      	movs	r3, #128	; 0x80
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007dbc:	2318      	movs	r3, #24
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d045      	beq.n	8007e5c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <osThreadNew+0x6a>
        name = attr->name;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d008      	beq.n	8007e04 <osThreadNew+0x90>
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	2b38      	cmp	r3, #56	; 0x38
 8007df6:	d805      	bhi.n	8007e04 <osThreadNew+0x90>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <osThreadNew+0x94>
        return (NULL);
 8007e04:	2300      	movs	r3, #0
 8007e06:	e054      	b.n	8007eb2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	089b      	lsrs	r3, r3, #2
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00e      	beq.n	8007e3e <osThreadNew+0xca>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b5b      	cmp	r3, #91	; 0x5b
 8007e26:	d90a      	bls.n	8007e3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d006      	beq.n	8007e3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <osThreadNew+0xca>
        mem = 1;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	623b      	str	r3, [r7, #32]
 8007e3c:	e010      	b.n	8007e60 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10c      	bne.n	8007e60 <osThreadNew+0xec>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d108      	bne.n	8007e60 <osThreadNew+0xec>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d104      	bne.n	8007e60 <osThreadNew+0xec>
          mem = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	623b      	str	r3, [r7, #32]
 8007e5a:	e001      	b.n	8007e60 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d110      	bne.n	8007e88 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e6e:	9202      	str	r2, [sp, #8]
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f001 fc9f 	bl	80097c0 <xTaskCreateStatic>
 8007e82:	4603      	mov	r3, r0
 8007e84:	613b      	str	r3, [r7, #16]
 8007e86:	e013      	b.n	8007eb0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d110      	bne.n	8007eb0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	f107 0310 	add.w	r3, r7, #16
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f001 fced 	bl	8009880 <xTaskCreate>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d001      	beq.n	8007eb0 <osThreadNew+0x13c>
          hTask = NULL;
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007eb0:	693b      	ldr	r3, [r7, #16]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3730      	adds	r7, #48	; 0x30
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	200000d0 	.word	0x200000d0

08007ec0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ec8:	f3ef 8305 	mrs	r3, IPSR
 8007ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8007ece:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10f      	bne.n	8007ef4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d105      	bne.n	8007eec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ee0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d007      	beq.n	8007efc <osDelay+0x3c>
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <osDelay+0x58>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d103      	bne.n	8007efc <osDelay+0x3c>
    stat = osErrorISR;
 8007ef4:	f06f 0305 	mvn.w	r3, #5
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	e007      	b.n	8007f0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 fe00 	bl	8009b0c <vTaskDelay>
    }
  }

  return (stat);
 8007f0c:	697b      	ldr	r3, [r7, #20]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	200000d0 	.word	0x200000d0

08007f1c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08c      	sub	sp, #48	; 0x30
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f2c:	f3ef 8305 	mrs	r3, IPSR
 8007f30:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f040 8087 	bne.w	8008048 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f3e:	617b      	str	r3, [r7, #20]
  return(result);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f46:	f3ef 8311 	mrs	r3, BASEPRI
 8007f4a:	613b      	str	r3, [r7, #16]
  return(result);
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <osSemaphoreNew+0x3e>
 8007f52:	4b40      	ldr	r3, [pc, #256]	; (8008054 <osSemaphoreNew+0x138>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d076      	beq.n	8008048 <osSemaphoreNew+0x12c>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d073      	beq.n	8008048 <osSemaphoreNew+0x12c>
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d86f      	bhi.n	8008048 <osSemaphoreNew+0x12c>
    mem = -1;
 8007f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d015      	beq.n	8007fa0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d006      	beq.n	8007f8a <osSemaphoreNew+0x6e>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	2b4f      	cmp	r3, #79	; 0x4f
 8007f82:	d902      	bls.n	8007f8a <osSemaphoreNew+0x6e>
        mem = 1;
 8007f84:	2301      	movs	r3, #1
 8007f86:	623b      	str	r3, [r7, #32]
 8007f88:	e00c      	b.n	8007fa4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d108      	bne.n	8007fa4 <osSemaphoreNew+0x88>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d104      	bne.n	8007fa4 <osSemaphoreNew+0x88>
          mem = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	623b      	str	r3, [r7, #32]
 8007f9e:	e001      	b.n	8007fa4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007faa:	d04d      	beq.n	8008048 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d129      	bne.n	8008006 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d10b      	bne.n	8007fd0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	f000 fbf4 	bl	80087b4 <xQueueGenericCreateStatic>
 8007fcc:	6278      	str	r0, [r7, #36]	; 0x24
 8007fce:	e005      	b.n	8007fdc <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	f000 fc6a 	bl	80088ae <xQueueGenericCreate>
 8007fda:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d022      	beq.n	8008028 <osSemaphoreNew+0x10c>
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d01f      	beq.n	8008028 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2200      	movs	r2, #0
 8007fec:	2100      	movs	r1, #0
 8007fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ff0:	f000 fd30 	bl	8008a54 <xQueueGenericSend>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d016      	beq.n	8008028 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8007ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ffc:	f001 fa0d 	bl	800941a <vQueueDelete>
            hSemaphore = NULL;
 8008000:	2300      	movs	r3, #0
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
 8008004:	e010      	b.n	8008028 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d108      	bne.n	800801e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	461a      	mov	r2, r3
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 fcae 	bl	8008976 <xQueueCreateCountingSemaphoreStatic>
 800801a:	6278      	str	r0, [r7, #36]	; 0x24
 800801c:	e004      	b.n	8008028 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fce1 	bl	80089e8 <xQueueCreateCountingSemaphore>
 8008026:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00c      	beq.n	8008048 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <osSemaphoreNew+0x120>
          name = attr->name;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	e001      	b.n	8008040 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008040:	69f9      	ldr	r1, [r7, #28]
 8008042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008044:	f001 fb36 	bl	80096b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800804a:	4618      	mov	r0, r3
 800804c:	3728      	adds	r7, #40	; 0x28
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	200000d0 	.word	0x200000d0

08008058 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008066:	2300      	movs	r3, #0
 8008068:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008070:	f06f 0303 	mvn.w	r3, #3
 8008074:	61fb      	str	r3, [r7, #28]
 8008076:	e04b      	b.n	8008110 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008078:	f3ef 8305 	mrs	r3, IPSR
 800807c:	617b      	str	r3, [r7, #20]
  return(result);
 800807e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10f      	bne.n	80080a4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008084:	f3ef 8310 	mrs	r3, PRIMASK
 8008088:	613b      	str	r3, [r7, #16]
  return(result);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d105      	bne.n	800809c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008090:	f3ef 8311 	mrs	r3, BASEPRI
 8008094:	60fb      	str	r3, [r7, #12]
  return(result);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d026      	beq.n	80080ea <osSemaphoreAcquire+0x92>
 800809c:	4b1f      	ldr	r3, [pc, #124]	; (800811c <osSemaphoreAcquire+0xc4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d122      	bne.n	80080ea <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80080aa:	f06f 0303 	mvn.w	r3, #3
 80080ae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80080b0:	e02d      	b.n	800810e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80080b6:	f107 0308 	add.w	r3, r7, #8
 80080ba:	461a      	mov	r2, r3
 80080bc:	2100      	movs	r1, #0
 80080be:	69b8      	ldr	r0, [r7, #24]
 80080c0:	f001 f8ea 	bl	8009298 <xQueueReceiveFromISR>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d003      	beq.n	80080d2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80080ca:	f06f 0302 	mvn.w	r3, #2
 80080ce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80080d0:	e01d      	b.n	800810e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01a      	beq.n	800810e <osSemaphoreAcquire+0xb6>
 80080d8:	4b11      	ldr	r3, [pc, #68]	; (8008120 <osSemaphoreAcquire+0xc8>)
 80080da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80080e8:	e011      	b.n	800810e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	69b8      	ldr	r0, [r7, #24]
 80080ee:	f000 ffc3 	bl	8009078 <xQueueSemaphoreTake>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d00b      	beq.n	8008110 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80080fe:	f06f 0301 	mvn.w	r3, #1
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	e004      	b.n	8008110 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008106:	f06f 0302 	mvn.w	r3, #2
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	e000      	b.n	8008110 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800810e:	bf00      	nop
      }
    }
  }

  return (stat);
 8008110:	69fb      	ldr	r3, [r7, #28]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	200000d0 	.word	0x200000d0
 8008120:	e000ed04 	.word	0xe000ed04

08008124 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008130:	2300      	movs	r3, #0
 8008132:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800813a:	f06f 0303 	mvn.w	r3, #3
 800813e:	61fb      	str	r3, [r7, #28]
 8008140:	e03e      	b.n	80081c0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008142:	f3ef 8305 	mrs	r3, IPSR
 8008146:	617b      	str	r3, [r7, #20]
  return(result);
 8008148:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10f      	bne.n	800816e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800814e:	f3ef 8310 	mrs	r3, PRIMASK
 8008152:	613b      	str	r3, [r7, #16]
  return(result);
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800815a:	f3ef 8311 	mrs	r3, BASEPRI
 800815e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01e      	beq.n	80081a4 <osSemaphoreRelease+0x80>
 8008166:	4b19      	ldr	r3, [pc, #100]	; (80081cc <osSemaphoreRelease+0xa8>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b02      	cmp	r3, #2
 800816c:	d11a      	bne.n	80081a4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800816e:	2300      	movs	r3, #0
 8008170:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008172:	f107 0308 	add.w	r3, r7, #8
 8008176:	4619      	mov	r1, r3
 8008178:	69b8      	ldr	r0, [r7, #24]
 800817a:	f000 fe09 	bl	8008d90 <xQueueGiveFromISR>
 800817e:	4603      	mov	r3, r0
 8008180:	2b01      	cmp	r3, #1
 8008182:	d003      	beq.n	800818c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008184:	f06f 0302 	mvn.w	r3, #2
 8008188:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800818a:	e018      	b.n	80081be <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d015      	beq.n	80081be <osSemaphoreRelease+0x9a>
 8008192:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <osSemaphoreRelease+0xac>)
 8008194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081a2:	e00c      	b.n	80081be <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80081a4:	2300      	movs	r3, #0
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	69b8      	ldr	r0, [r7, #24]
 80081ac:	f000 fc52 	bl	8008a54 <xQueueGenericSend>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d004      	beq.n	80081c0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80081b6:	f06f 0302 	mvn.w	r3, #2
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	e000      	b.n	80081c0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081be:	bf00      	nop
    }
  }

  return (stat);
 80081c0:	69fb      	ldr	r3, [r7, #28]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3720      	adds	r7, #32
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	200000d0 	.word	0x200000d0
 80081d0:	e000ed04 	.word	0xe000ed04

080081d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08c      	sub	sp, #48	; 0x30
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80081e0:	2300      	movs	r3, #0
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081e4:	f3ef 8305 	mrs	r3, IPSR
 80081e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80081ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d170      	bne.n	80082d2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f0:	f3ef 8310 	mrs	r3, PRIMASK
 80081f4:	617b      	str	r3, [r7, #20]
  return(result);
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081fc:	f3ef 8311 	mrs	r3, BASEPRI
 8008200:	613b      	str	r3, [r7, #16]
  return(result);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <osMessageQueueNew+0x3c>
 8008208:	4b34      	ldr	r3, [pc, #208]	; (80082dc <osMessageQueueNew+0x108>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d060      	beq.n	80082d2 <osMessageQueueNew+0xfe>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d05d      	beq.n	80082d2 <osMessageQueueNew+0xfe>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d05a      	beq.n	80082d2 <osMessageQueueNew+0xfe>
    mem = -1;
 800821c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008220:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d029      	beq.n	800827c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d012      	beq.n	8008256 <osMessageQueueNew+0x82>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	2b4f      	cmp	r3, #79	; 0x4f
 8008236:	d90e      	bls.n	8008256 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	695a      	ldr	r2, [r3, #20]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	429a      	cmp	r2, r3
 800824e:	d302      	bcc.n	8008256 <osMessageQueueNew+0x82>
        mem = 1;
 8008250:	2301      	movs	r3, #1
 8008252:	623b      	str	r3, [r7, #32]
 8008254:	e014      	b.n	8008280 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d110      	bne.n	8008280 <osMessageQueueNew+0xac>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10c      	bne.n	8008280 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800826a:	2b00      	cmp	r3, #0
 800826c:	d108      	bne.n	8008280 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d104      	bne.n	8008280 <osMessageQueueNew+0xac>
          mem = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	623b      	str	r3, [r7, #32]
 800827a:	e001      	b.n	8008280 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d10c      	bne.n	80082a0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691a      	ldr	r2, [r3, #16]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6899      	ldr	r1, [r3, #8]
 800828e:	2300      	movs	r3, #0
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	460b      	mov	r3, r1
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fa8c 	bl	80087b4 <xQueueGenericCreateStatic>
 800829c:	6278      	str	r0, [r7, #36]	; 0x24
 800829e:	e008      	b.n	80082b2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d105      	bne.n	80082b2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80082a6:	2200      	movs	r2, #0
 80082a8:	68b9      	ldr	r1, [r7, #8]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 faff 	bl	80088ae <xQueueGenericCreate>
 80082b0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00c      	beq.n	80082d2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <osMessageQueueNew+0xf2>
        name = attr->name;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	61fb      	str	r3, [r7, #28]
 80082c4:	e001      	b.n	80082ca <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80082ca:	69f9      	ldr	r1, [r7, #28]
 80082cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082ce:	f001 f9f1 	bl	80096b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3728      	adds	r7, #40	; 0x28
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200000d0 	.word	0x200000d0

080082e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	; 0x28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	4613      	mov	r3, r2
 80082ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082f8:	f3ef 8305 	mrs	r3, IPSR
 80082fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80082fe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10f      	bne.n	8008324 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008304:	f3ef 8310 	mrs	r3, PRIMASK
 8008308:	61bb      	str	r3, [r7, #24]
  return(result);
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d105      	bne.n	800831c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008310:	f3ef 8311 	mrs	r3, BASEPRI
 8008314:	617b      	str	r3, [r7, #20]
  return(result);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d02c      	beq.n	8008376 <osMessageQueuePut+0x96>
 800831c:	4b28      	ldr	r3, [pc, #160]	; (80083c0 <osMessageQueuePut+0xe0>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d128      	bne.n	8008376 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <osMessageQueuePut+0x56>
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <osMessageQueuePut+0x56>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008336:	f06f 0303 	mvn.w	r3, #3
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800833c:	e039      	b.n	80083b2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800833e:	2300      	movs	r3, #0
 8008340:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008342:	f107 0210 	add.w	r2, r7, #16
 8008346:	2300      	movs	r3, #0
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	6a38      	ldr	r0, [r7, #32]
 800834c:	f000 fc84 	bl	8008c58 <xQueueGenericSendFromISR>
 8008350:	4603      	mov	r3, r0
 8008352:	2b01      	cmp	r3, #1
 8008354:	d003      	beq.n	800835e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008356:	f06f 0302 	mvn.w	r3, #2
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800835c:	e029      	b.n	80083b2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d026      	beq.n	80083b2 <osMessageQueuePut+0xd2>
 8008364:	4b17      	ldr	r3, [pc, #92]	; (80083c4 <osMessageQueuePut+0xe4>)
 8008366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008374:	e01d      	b.n	80083b2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <osMessageQueuePut+0xa2>
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d103      	bne.n	800838a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008382:	f06f 0303 	mvn.w	r3, #3
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
 8008388:	e014      	b.n	80083b4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800838a:	2300      	movs	r3, #0
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	6a38      	ldr	r0, [r7, #32]
 8008392:	f000 fb5f 	bl	8008a54 <xQueueGenericSend>
 8008396:	4603      	mov	r3, r0
 8008398:	2b01      	cmp	r3, #1
 800839a:	d00b      	beq.n	80083b4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80083a2:	f06f 0301 	mvn.w	r3, #1
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
 80083a8:	e004      	b.n	80083b4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80083aa:	f06f 0302 	mvn.w	r3, #2
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
 80083b0:	e000      	b.n	80083b4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3728      	adds	r7, #40	; 0x28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	200000d0 	.word	0x200000d0
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	; 0x28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80083da:	2300      	movs	r3, #0
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083de:	f3ef 8305 	mrs	r3, IPSR
 80083e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80083e4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10f      	bne.n	800840a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ea:	f3ef 8310 	mrs	r3, PRIMASK
 80083ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083f6:	f3ef 8311 	mrs	r3, BASEPRI
 80083fa:	617b      	str	r3, [r7, #20]
  return(result);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d02c      	beq.n	800845c <osMessageQueueGet+0x94>
 8008402:	4b28      	ldr	r3, [pc, #160]	; (80084a4 <osMessageQueueGet+0xdc>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b02      	cmp	r3, #2
 8008408:	d128      	bne.n	800845c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <osMessageQueueGet+0x54>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <osMessageQueueGet+0x54>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800841c:	f06f 0303 	mvn.w	r3, #3
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008422:	e038      	b.n	8008496 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008424:	2300      	movs	r3, #0
 8008426:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008428:	f107 0310 	add.w	r3, r7, #16
 800842c:	461a      	mov	r2, r3
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	6a38      	ldr	r0, [r7, #32]
 8008432:	f000 ff31 	bl	8009298 <xQueueReceiveFromISR>
 8008436:	4603      	mov	r3, r0
 8008438:	2b01      	cmp	r3, #1
 800843a:	d003      	beq.n	8008444 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800843c:	f06f 0302 	mvn.w	r3, #2
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008442:	e028      	b.n	8008496 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d025      	beq.n	8008496 <osMessageQueueGet+0xce>
 800844a:	4b17      	ldr	r3, [pc, #92]	; (80084a8 <osMessageQueueGet+0xe0>)
 800844c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800845a:	e01c      	b.n	8008496 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <osMessageQueueGet+0xa0>
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d103      	bne.n	8008470 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008468:	f06f 0303 	mvn.w	r3, #3
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
 800846e:	e013      	b.n	8008498 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	6a38      	ldr	r0, [r7, #32]
 8008476:	f000 fd1d 	bl	8008eb4 <xQueueReceive>
 800847a:	4603      	mov	r3, r0
 800847c:	2b01      	cmp	r3, #1
 800847e:	d00b      	beq.n	8008498 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008486:	f06f 0301 	mvn.w	r3, #1
 800848a:	627b      	str	r3, [r7, #36]	; 0x24
 800848c:	e004      	b.n	8008498 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800848e:	f06f 0302 	mvn.w	r3, #2
 8008492:	627b      	str	r3, [r7, #36]	; 0x24
 8008494:	e000      	b.n	8008498 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008496:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800849a:	4618      	mov	r0, r3
 800849c:	3728      	adds	r7, #40	; 0x28
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	200000d0 	.word	0x200000d0
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <osMessageQueueGetCount+0x18>
    count = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	e01e      	b.n	8008502 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c4:	f3ef 8305 	mrs	r3, IPSR
 80084c8:	617b      	str	r3, [r7, #20]
  return(result);
 80084ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10f      	bne.n	80084f0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084d0:	f3ef 8310 	mrs	r3, PRIMASK
 80084d4:	613b      	str	r3, [r7, #16]
  return(result);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d105      	bne.n	80084e8 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084dc:	f3ef 8311 	mrs	r3, BASEPRI
 80084e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d008      	beq.n	80084fa <osMessageQueueGetCount+0x4e>
 80084e8:	4b08      	ldr	r3, [pc, #32]	; (800850c <osMessageQueueGetCount+0x60>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d104      	bne.n	80084fa <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80084f0:	69b8      	ldr	r0, [r7, #24]
 80084f2:	f000 ff73 	bl	80093dc <uxQueueMessagesWaitingFromISR>
 80084f6:	61f8      	str	r0, [r7, #28]
 80084f8:	e003      	b.n	8008502 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80084fa:	69b8      	ldr	r0, [r7, #24]
 80084fc:	f000 ff4f 	bl	800939e <uxQueueMessagesWaiting>
 8008500:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8008502:	69fb      	ldr	r3, [r7, #28]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3720      	adds	r7, #32
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	200000d0 	.word	0x200000d0

08008510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4a07      	ldr	r2, [pc, #28]	; (800853c <vApplicationGetIdleTaskMemory+0x2c>)
 8008520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4a06      	ldr	r2, [pc, #24]	; (8008540 <vApplicationGetIdleTaskMemory+0x30>)
 8008526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2280      	movs	r2, #128	; 0x80
 800852c:	601a      	str	r2, [r3, #0]
}
 800852e:	bf00      	nop
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	200000d4 	.word	0x200000d4
 8008540:	20000130 	.word	0x20000130

08008544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a07      	ldr	r2, [pc, #28]	; (8008570 <vApplicationGetTimerTaskMemory+0x2c>)
 8008554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	4a06      	ldr	r2, [pc, #24]	; (8008574 <vApplicationGetTimerTaskMemory+0x30>)
 800855a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008562:	601a      	str	r2, [r3, #0]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	20000330 	.word	0x20000330
 8008574:	2000038c 	.word	0x2000038c

08008578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f103 0208 	add.w	r2, r3, #8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f103 0208 	add.w	r2, r3, #8
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f103 0208 	add.w	r2, r3, #8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085d2:	b480      	push	{r7}
 80085d4:	b085      	sub	sp, #20
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	601a      	str	r2, [r3, #0]
}
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800861a:	b480      	push	{r7}
 800861c:	b085      	sub	sp, #20
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008630:	d103      	bne.n	800863a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e00c      	b.n	8008654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3308      	adds	r3, #8
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	e002      	b.n	8008648 <vListInsert+0x2e>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	429a      	cmp	r2, r3
 8008652:	d2f6      	bcs.n	8008642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	601a      	str	r2, [r3, #0]
}
 8008680:	bf00      	nop
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6892      	ldr	r2, [r2, #8]
 80086a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6852      	ldr	r2, [r2, #4]
 80086ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d103      	bne.n	80086c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	1e5a      	subs	r2, r3, #1
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	b672      	cpsid	i
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	b662      	cpsie	i
 8008708:	60bb      	str	r3, [r7, #8]
 800870a:	e7fe      	b.n	800870a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800870c:	f002 fcbc 	bl	800b088 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800871c:	fb01 f303 	mul.w	r3, r1, r3
 8008720:	441a      	add	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873c:	3b01      	subs	r3, #1
 800873e:	68f9      	ldr	r1, [r7, #12]
 8008740:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008742:	fb01 f303 	mul.w	r3, r1, r3
 8008746:	441a      	add	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	22ff      	movs	r2, #255	; 0xff
 8008750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	22ff      	movs	r2, #255	; 0xff
 8008758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d114      	bne.n	800878c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01a      	beq.n	80087a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3310      	adds	r3, #16
 800876e:	4618      	mov	r0, r3
 8008770:	f001 fc90 	bl	800a094 <xTaskRemoveFromEventList>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d012      	beq.n	80087a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <xQueueGenericReset+0xd0>)
 800877c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	e009      	b.n	80087a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3310      	adds	r3, #16
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fef1 	bl	8008578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3324      	adds	r3, #36	; 0x24
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff feec 	bl	8008578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087a0:	f002 fca4 	bl	800b0ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087a4:	2301      	movs	r3, #1
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08e      	sub	sp, #56	; 0x38
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10b      	bne.n	80087e0 <xQueueGenericCreateStatic+0x2c>
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	b672      	cpsid	i
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	b662      	cpsie	i
 80087dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80087de:	e7fe      	b.n	80087de <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10b      	bne.n	80087fe <xQueueGenericCreateStatic+0x4a>
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	b672      	cpsid	i
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	b662      	cpsie	i
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24
 80087fc:	e7fe      	b.n	80087fc <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <xQueueGenericCreateStatic+0x56>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <xQueueGenericCreateStatic+0x5a>
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <xQueueGenericCreateStatic+0x5c>
 800880e:	2300      	movs	r3, #0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10b      	bne.n	800882c <xQueueGenericCreateStatic+0x78>
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	b672      	cpsid	i
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	b662      	cpsie	i
 8008828:	623b      	str	r3, [r7, #32]
 800882a:	e7fe      	b.n	800882a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <xQueueGenericCreateStatic+0x84>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <xQueueGenericCreateStatic+0x88>
 8008838:	2301      	movs	r3, #1
 800883a:	e000      	b.n	800883e <xQueueGenericCreateStatic+0x8a>
 800883c:	2300      	movs	r3, #0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <xQueueGenericCreateStatic+0xa6>
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	b672      	cpsid	i
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	b662      	cpsie	i
 8008856:	61fb      	str	r3, [r7, #28]
 8008858:	e7fe      	b.n	8008858 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800885a:	2350      	movs	r3, #80	; 0x50
 800885c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b50      	cmp	r3, #80	; 0x50
 8008862:	d00b      	beq.n	800887c <xQueueGenericCreateStatic+0xc8>
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	b672      	cpsid	i
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	b662      	cpsie	i
 8008878:	61bb      	str	r3, [r7, #24]
 800887a:	e7fe      	b.n	800887a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800887c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00d      	beq.n	80088a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008890:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	4613      	mov	r3, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 f846 	bl	8008930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3730      	adds	r7, #48	; 0x30
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b08a      	sub	sp, #40	; 0x28
 80088b2:	af02      	add	r7, sp, #8
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	4613      	mov	r3, r2
 80088ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10b      	bne.n	80088da <xQueueGenericCreate+0x2c>
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	b672      	cpsid	i
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	b662      	cpsie	i
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	e7fe      	b.n	80088d8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d102      	bne.n	80088e6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61fb      	str	r3, [r7, #28]
 80088e4:	e004      	b.n	80088f0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	fb02 f303 	mul.w	r3, r2, r3
 80088ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	3350      	adds	r3, #80	; 0x50
 80088f4:	4618      	mov	r0, r3
 80088f6:	f002 fce9 	bl	800b2cc <pvPortMalloc>
 80088fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d011      	beq.n	8008926 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	3350      	adds	r3, #80	; 0x50
 800890a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008914:	79fa      	ldrb	r2, [r7, #7]
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	4613      	mov	r3, r2
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 f805 	bl	8008930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008926:	69bb      	ldr	r3, [r7, #24]
	}
 8008928:	4618      	mov	r0, r3
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d103      	bne.n	800894c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	e002      	b.n	8008952 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800895e:	2101      	movs	r1, #1
 8008960:	69b8      	ldr	r0, [r7, #24]
 8008962:	f7ff febd 	bl	80086e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008976:	b580      	push	{r7, lr}
 8008978:	b08a      	sub	sp, #40	; 0x28
 800897a:	af02      	add	r7, sp, #8
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10b      	bne.n	80089a0 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	b672      	cpsid	i
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	b662      	cpsie	i
 800899c:	61bb      	str	r3, [r7, #24]
 800899e:	e7fe      	b.n	800899e <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d90b      	bls.n	80089c0 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	b672      	cpsid	i
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	b662      	cpsie	i
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	e7fe      	b.n	80089be <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80089c0:	2302      	movs	r3, #2
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f7ff fef2 	bl	80087b4 <xQueueGenericCreateStatic>
 80089d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80089de:	69fb      	ldr	r3, [r7, #28]
	}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3720      	adds	r7, #32
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <xQueueCreateCountingSemaphore+0x28>
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	b672      	cpsid	i
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	b662      	cpsie	i
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	e7fe      	b.n	8008a0e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d90b      	bls.n	8008a30 <xQueueCreateCountingSemaphore+0x48>
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	b672      	cpsid	i
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	b662      	cpsie	i
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	e7fe      	b.n	8008a2e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008a30:	2202      	movs	r2, #2
 8008a32:	2100      	movs	r1, #0
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff ff3a 	bl	80088ae <xQueueGenericCreate>
 8008a3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008a48:	697b      	ldr	r3, [r7, #20]
	}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	; 0x38
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a62:	2300      	movs	r3, #0
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10b      	bne.n	8008a88 <xQueueGenericSend+0x34>
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	b672      	cpsid	i
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	b662      	cpsie	i
 8008a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a86:	e7fe      	b.n	8008a86 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <xQueueGenericSend+0x42>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <xQueueGenericSend+0x46>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <xQueueGenericSend+0x48>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10b      	bne.n	8008ab8 <xQueueGenericSend+0x64>
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	b672      	cpsid	i
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	b662      	cpsie	i
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab6:	e7fe      	b.n	8008ab6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d103      	bne.n	8008ac6 <xQueueGenericSend+0x72>
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d101      	bne.n	8008aca <xQueueGenericSend+0x76>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <xQueueGenericSend+0x78>
 8008aca:	2300      	movs	r3, #0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10b      	bne.n	8008ae8 <xQueueGenericSend+0x94>
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	b672      	cpsid	i
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	b662      	cpsie	i
 8008ae4:	623b      	str	r3, [r7, #32]
 8008ae6:	e7fe      	b.n	8008ae6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ae8:	f001 fc92 	bl	800a410 <xTaskGetSchedulerState>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d102      	bne.n	8008af8 <xQueueGenericSend+0xa4>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <xQueueGenericSend+0xa8>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <xQueueGenericSend+0xaa>
 8008afc:	2300      	movs	r3, #0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10b      	bne.n	8008b1a <xQueueGenericSend+0xc6>
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	b672      	cpsid	i
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	b662      	cpsie	i
 8008b16:	61fb      	str	r3, [r7, #28]
 8008b18:	e7fe      	b.n	8008b18 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b1a:	f002 fab5 	bl	800b088 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d302      	bcc.n	8008b30 <xQueueGenericSend+0xdc>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d129      	bne.n	8008b84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	68b9      	ldr	r1, [r7, #8]
 8008b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b36:	f000 fcac 	bl	8009492 <prvCopyDataToQueue>
 8008b3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d010      	beq.n	8008b66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	3324      	adds	r3, #36	; 0x24
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f001 faa3 	bl	800a094 <xTaskRemoveFromEventList>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d013      	beq.n	8008b7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b54:	4b3f      	ldr	r3, [pc, #252]	; (8008c54 <xQueueGenericSend+0x200>)
 8008b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	e00a      	b.n	8008b7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b6c:	4b39      	ldr	r3, [pc, #228]	; (8008c54 <xQueueGenericSend+0x200>)
 8008b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b7c:	f002 fab6 	bl	800b0ec <vPortExitCritical>
				return pdPASS;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e063      	b.n	8008c4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d103      	bne.n	8008b92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b8a:	f002 faaf 	bl	800b0ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	e05c      	b.n	8008c4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b98:	f107 0314 	add.w	r3, r7, #20
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f001 fadd 	bl	800a15c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ba6:	f002 faa1 	bl	800b0ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008baa:	f001 f84d 	bl	8009c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bae:	f002 fa6b 	bl	800b088 <vPortEnterCritical>
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bb8:	b25b      	sxtb	r3, r3
 8008bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bbe:	d103      	bne.n	8008bc8 <xQueueGenericSend+0x174>
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bce:	b25b      	sxtb	r3, r3
 8008bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bd4:	d103      	bne.n	8008bde <xQueueGenericSend+0x18a>
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bde:	f002 fa85 	bl	800b0ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008be2:	1d3a      	adds	r2, r7, #4
 8008be4:	f107 0314 	add.w	r3, r7, #20
 8008be8:	4611      	mov	r1, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 facc 	bl	800a188 <xTaskCheckForTimeOut>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d124      	bne.n	8008c40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bf8:	f000 fd43 	bl	8009682 <prvIsQueueFull>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d018      	beq.n	8008c34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	3310      	adds	r3, #16
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f001 f9f0 	bl	8009ff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c12:	f000 fcce 	bl	80095b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c16:	f001 f825 	bl	8009c64 <xTaskResumeAll>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f47f af7c 	bne.w	8008b1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008c22:	4b0c      	ldr	r3, [pc, #48]	; (8008c54 <xQueueGenericSend+0x200>)
 8008c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	e772      	b.n	8008b1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c36:	f000 fcbc 	bl	80095b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c3a:	f001 f813 	bl	8009c64 <xTaskResumeAll>
 8008c3e:	e76c      	b.n	8008b1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c42:	f000 fcb6 	bl	80095b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c46:	f001 f80d 	bl	8009c64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3738      	adds	r7, #56	; 0x38
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	e000ed04 	.word	0xe000ed04

08008c58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b08e      	sub	sp, #56	; 0x38
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10b      	bne.n	8008c88 <xQueueGenericSendFromISR+0x30>
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	b672      	cpsid	i
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	b662      	cpsie	i
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
 8008c86:	e7fe      	b.n	8008c86 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d103      	bne.n	8008c96 <xQueueGenericSendFromISR+0x3e>
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <xQueueGenericSendFromISR+0x42>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e000      	b.n	8008c9c <xQueueGenericSendFromISR+0x44>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10b      	bne.n	8008cb8 <xQueueGenericSendFromISR+0x60>
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	b672      	cpsid	i
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	b662      	cpsie	i
 8008cb4:	623b      	str	r3, [r7, #32]
 8008cb6:	e7fe      	b.n	8008cb6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d103      	bne.n	8008cc6 <xQueueGenericSendFromISR+0x6e>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <xQueueGenericSendFromISR+0x72>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e000      	b.n	8008ccc <xQueueGenericSendFromISR+0x74>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10b      	bne.n	8008ce8 <xQueueGenericSendFromISR+0x90>
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	b672      	cpsid	i
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	b662      	cpsie	i
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	e7fe      	b.n	8008ce6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ce8:	f002 faae 	bl	800b248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008cec:	f3ef 8211 	mrs	r2, BASEPRI
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	b672      	cpsid	i
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	b662      	cpsie	i
 8008d04:	61ba      	str	r2, [r7, #24]
 8008d06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d302      	bcc.n	8008d1e <xQueueGenericSendFromISR+0xc6>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d12c      	bne.n	8008d78 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d28:	683a      	ldr	r2, [r7, #0]
 8008d2a:	68b9      	ldr	r1, [r7, #8]
 8008d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d2e:	f000 fbb0 	bl	8009492 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d3a:	d112      	bne.n	8008d62 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d016      	beq.n	8008d72 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	3324      	adds	r3, #36	; 0x24
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 f9a3 	bl	800a094 <xTaskRemoveFromEventList>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00e      	beq.n	8008d72 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00b      	beq.n	8008d72 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	e007      	b.n	8008d72 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d66:	3301      	adds	r3, #1
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	b25a      	sxtb	r2, r3
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d72:	2301      	movs	r3, #1
 8008d74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008d76:	e001      	b.n	8008d7c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3738      	adds	r7, #56	; 0x38
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10b      	bne.n	8008dbc <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da8:	b672      	cpsid	i
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	b662      	cpsie	i
 8008db8:	623b      	str	r3, [r7, #32]
 8008dba:	e7fe      	b.n	8008dba <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00b      	beq.n	8008ddc <xQueueGiveFromISR+0x4c>
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	b672      	cpsid	i
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	b662      	cpsie	i
 8008dd8:	61fb      	str	r3, [r7, #28]
 8008dda:	e7fe      	b.n	8008dda <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d103      	bne.n	8008dec <xQueueGiveFromISR+0x5c>
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <xQueueGiveFromISR+0x60>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e000      	b.n	8008df2 <xQueueGiveFromISR+0x62>
 8008df0:	2300      	movs	r3, #0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10b      	bne.n	8008e0e <xQueueGiveFromISR+0x7e>
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	b672      	cpsid	i
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	b662      	cpsie	i
 8008e0a:	61bb      	str	r3, [r7, #24]
 8008e0c:	e7fe      	b.n	8008e0c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e0e:	f002 fa1b 	bl	800b248 <vPortValidateInterruptPriority>
	__asm volatile
 8008e12:	f3ef 8211 	mrs	r2, BASEPRI
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	b672      	cpsid	i
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	b662      	cpsie	i
 8008e2a:	617a      	str	r2, [r7, #20]
 8008e2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008e2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d22b      	bcs.n	8008e9a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e5c:	d112      	bne.n	8008e84 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d016      	beq.n	8008e94 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	3324      	adds	r3, #36	; 0x24
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 f912 	bl	800a094 <xTaskRemoveFromEventList>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00e      	beq.n	8008e94 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	e007      	b.n	8008e94 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e88:	3301      	adds	r3, #1
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	b25a      	sxtb	r2, r3
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e94:	2301      	movs	r3, #1
 8008e96:	637b      	str	r3, [r7, #52]	; 0x34
 8008e98:	e001      	b.n	8008e9e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3738      	adds	r7, #56	; 0x38
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08c      	sub	sp, #48	; 0x30
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <xQueueReceive+0x32>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	b672      	cpsid	i
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	b662      	cpsie	i
 8008ee2:	623b      	str	r3, [r7, #32]
 8008ee4:	e7fe      	b.n	8008ee4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d103      	bne.n	8008ef4 <xQueueReceive+0x40>
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <xQueueReceive+0x44>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <xQueueReceive+0x46>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10b      	bne.n	8008f16 <xQueueReceive+0x62>
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	b672      	cpsid	i
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	b662      	cpsie	i
 8008f12:	61fb      	str	r3, [r7, #28]
 8008f14:	e7fe      	b.n	8008f14 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f16:	f001 fa7b 	bl	800a410 <xTaskGetSchedulerState>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d102      	bne.n	8008f26 <xQueueReceive+0x72>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <xQueueReceive+0x76>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <xQueueReceive+0x78>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10b      	bne.n	8008f48 <xQueueReceive+0x94>
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	b672      	cpsid	i
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	b662      	cpsie	i
 8008f44:	61bb      	str	r3, [r7, #24]
 8008f46:	e7fe      	b.n	8008f46 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f48:	f002 f89e 	bl	800b088 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01f      	beq.n	8008f98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f5c:	f000 fb03 	bl	8009566 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	1e5a      	subs	r2, r3, #1
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00f      	beq.n	8008f90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	3310      	adds	r3, #16
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 f88d 	bl	800a094 <xTaskRemoveFromEventList>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d007      	beq.n	8008f90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f80:	4b3c      	ldr	r3, [pc, #240]	; (8009074 <xQueueReceive+0x1c0>)
 8008f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f90:	f002 f8ac 	bl	800b0ec <vPortExitCritical>
				return pdPASS;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e069      	b.n	800906c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d103      	bne.n	8008fa6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f9e:	f002 f8a5 	bl	800b0ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e062      	b.n	800906c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fac:	f107 0310 	add.w	r3, r7, #16
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f001 f8d3 	bl	800a15c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fba:	f002 f897 	bl	800b0ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fbe:	f000 fe43 	bl	8009c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fc2:	f002 f861 	bl	800b088 <vPortEnterCritical>
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fcc:	b25b      	sxtb	r3, r3
 8008fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fd2:	d103      	bne.n	8008fdc <xQueueReceive+0x128>
 8008fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fe2:	b25b      	sxtb	r3, r3
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe8:	d103      	bne.n	8008ff2 <xQueueReceive+0x13e>
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ff2:	f002 f87b 	bl	800b0ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ff6:	1d3a      	adds	r2, r7, #4
 8008ff8:	f107 0310 	add.w	r3, r7, #16
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 f8c2 	bl	800a188 <xTaskCheckForTimeOut>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d123      	bne.n	8009052 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800900a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800900c:	f000 fb23 	bl	8009656 <prvIsQueueEmpty>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d017      	beq.n	8009046 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009018:	3324      	adds	r3, #36	; 0x24
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	4611      	mov	r1, r2
 800901e:	4618      	mov	r0, r3
 8009020:	f000 ffe6 	bl	8009ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009026:	f000 fac4 	bl	80095b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800902a:	f000 fe1b 	bl	8009c64 <xTaskResumeAll>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d189      	bne.n	8008f48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009034:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <xQueueReceive+0x1c0>)
 8009036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	e780      	b.n	8008f48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009048:	f000 fab3 	bl	80095b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800904c:	f000 fe0a 	bl	8009c64 <xTaskResumeAll>
 8009050:	e77a      	b.n	8008f48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009054:	f000 faad 	bl	80095b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009058:	f000 fe04 	bl	8009c64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800905c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905e:	f000 fafa 	bl	8009656 <prvIsQueueEmpty>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	f43f af6f 	beq.w	8008f48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800906a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800906c:	4618      	mov	r0, r3
 800906e:	3730      	adds	r7, #48	; 0x30
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	e000ed04 	.word	0xe000ed04

08009078 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08e      	sub	sp, #56	; 0x38
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009082:	2300      	movs	r3, #0
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10b      	bne.n	80090ac <xQueueSemaphoreTake+0x34>
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	b672      	cpsid	i
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	b662      	cpsie	i
 80090a8:	623b      	str	r3, [r7, #32]
 80090aa:	e7fe      	b.n	80090aa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80090ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <xQueueSemaphoreTake+0x54>
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	b672      	cpsid	i
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	b662      	cpsie	i
 80090c8:	61fb      	str	r3, [r7, #28]
 80090ca:	e7fe      	b.n	80090ca <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090cc:	f001 f9a0 	bl	800a410 <xTaskGetSchedulerState>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d102      	bne.n	80090dc <xQueueSemaphoreTake+0x64>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <xQueueSemaphoreTake+0x68>
 80090dc:	2301      	movs	r3, #1
 80090de:	e000      	b.n	80090e2 <xQueueSemaphoreTake+0x6a>
 80090e0:	2300      	movs	r3, #0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10b      	bne.n	80090fe <xQueueSemaphoreTake+0x86>
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	b672      	cpsid	i
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	b662      	cpsie	i
 80090fa:	61bb      	str	r3, [r7, #24]
 80090fc:	e7fe      	b.n	80090fc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090fe:	f001 ffc3 	bl	800b088 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d024      	beq.n	8009158 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	1e5a      	subs	r2, r3, #1
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d104      	bne.n	8009128 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800911e:	f001 faf1 	bl	800a704 <pvTaskIncrementMutexHeldCount>
 8009122:	4602      	mov	r2, r0
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00f      	beq.n	8009150 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	3310      	adds	r3, #16
 8009134:	4618      	mov	r0, r3
 8009136:	f000 ffad 	bl	800a094 <xTaskRemoveFromEventList>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009140:	4b54      	ldr	r3, [pc, #336]	; (8009294 <xQueueSemaphoreTake+0x21c>)
 8009142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009150:	f001 ffcc 	bl	800b0ec <vPortExitCritical>
				return pdPASS;
 8009154:	2301      	movs	r3, #1
 8009156:	e098      	b.n	800928a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d112      	bne.n	8009184 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <xQueueSemaphoreTake+0x104>
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	b672      	cpsid	i
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	b662      	cpsie	i
 8009178:	617b      	str	r3, [r7, #20]
 800917a:	e7fe      	b.n	800917a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800917c:	f001 ffb6 	bl	800b0ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009180:	2300      	movs	r3, #0
 8009182:	e082      	b.n	800928a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800918a:	f107 030c 	add.w	r3, r7, #12
 800918e:	4618      	mov	r0, r3
 8009190:	f000 ffe4 	bl	800a15c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009194:	2301      	movs	r3, #1
 8009196:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009198:	f001 ffa8 	bl	800b0ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800919c:	f000 fd54 	bl	8009c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091a0:	f001 ff72 	bl	800b088 <vPortEnterCritical>
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091b0:	d103      	bne.n	80091ba <xQueueSemaphoreTake+0x142>
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c6:	d103      	bne.n	80091d0 <xQueueSemaphoreTake+0x158>
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091d0:	f001 ff8c 	bl	800b0ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091d4:	463a      	mov	r2, r7
 80091d6:	f107 030c 	add.w	r3, r7, #12
 80091da:	4611      	mov	r1, r2
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 ffd3 	bl	800a188 <xTaskCheckForTimeOut>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d132      	bne.n	800924e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091ea:	f000 fa34 	bl	8009656 <prvIsQueueEmpty>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d026      	beq.n	8009242 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d109      	bne.n	8009210 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80091fc:	f001 ff44 	bl	800b088 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f921 	bl	800a44c <xTaskPriorityInherit>
 800920a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800920c:	f001 ff6e 	bl	800b0ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	3324      	adds	r3, #36	; 0x24
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	4611      	mov	r1, r2
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fee9 	bl	8009ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800921e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009220:	f000 f9c7 	bl	80095b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009224:	f000 fd1e 	bl	8009c64 <xTaskResumeAll>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	f47f af67 	bne.w	80090fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009230:	4b18      	ldr	r3, [pc, #96]	; (8009294 <xQueueSemaphoreTake+0x21c>)
 8009232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	e75d      	b.n	80090fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009244:	f000 f9b5 	bl	80095b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009248:	f000 fd0c 	bl	8009c64 <xTaskResumeAll>
 800924c:	e757      	b.n	80090fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800924e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009250:	f000 f9af 	bl	80095b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009254:	f000 fd06 	bl	8009c64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009258:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800925a:	f000 f9fc 	bl	8009656 <prvIsQueueEmpty>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	f43f af4c 	beq.w	80090fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00d      	beq.n	8009288 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800926c:	f001 ff0c 	bl	800b088 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009270:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009272:	f000 f8f6 	bl	8009462 <prvGetDisinheritPriorityAfterTimeout>
 8009276:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800927e:	4618      	mov	r0, r3
 8009280:	f001 f9bc 	bl	800a5fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009284:	f001 ff32 	bl	800b0ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009288:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800928a:	4618      	mov	r0, r3
 800928c:	3738      	adds	r7, #56	; 0x38
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	e000ed04 	.word	0xe000ed04

08009298 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08e      	sub	sp, #56	; 0x38
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10b      	bne.n	80092c6 <xQueueReceiveFromISR+0x2e>
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	b672      	cpsid	i
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	b662      	cpsie	i
 80092c2:	623b      	str	r3, [r7, #32]
 80092c4:	e7fe      	b.n	80092c4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d103      	bne.n	80092d4 <xQueueReceiveFromISR+0x3c>
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <xQueueReceiveFromISR+0x40>
 80092d4:	2301      	movs	r3, #1
 80092d6:	e000      	b.n	80092da <xQueueReceiveFromISR+0x42>
 80092d8:	2300      	movs	r3, #0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10b      	bne.n	80092f6 <xQueueReceiveFromISR+0x5e>
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	b672      	cpsid	i
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	b662      	cpsie	i
 80092f2:	61fb      	str	r3, [r7, #28]
 80092f4:	e7fe      	b.n	80092f4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092f6:	f001 ffa7 	bl	800b248 <vPortValidateInterruptPriority>
	__asm volatile
 80092fa:	f3ef 8211 	mrs	r2, BASEPRI
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	b672      	cpsid	i
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	b662      	cpsie	i
 8009312:	61ba      	str	r2, [r7, #24]
 8009314:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009316:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009318:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	2b00      	cmp	r3, #0
 8009324:	d02f      	beq.n	8009386 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800932c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009330:	68b9      	ldr	r1, [r7, #8]
 8009332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009334:	f000 f917 	bl	8009566 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	1e5a      	subs	r2, r3, #1
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009340:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009348:	d112      	bne.n	8009370 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d016      	beq.n	8009380 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	3310      	adds	r3, #16
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fe9c 	bl	800a094 <xTaskRemoveFromEventList>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00e      	beq.n	8009380 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	e007      	b.n	8009380 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009374:	3301      	adds	r3, #1
 8009376:	b2db      	uxtb	r3, r3
 8009378:	b25a      	sxtb	r2, r3
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009380:	2301      	movs	r3, #1
 8009382:	637b      	str	r3, [r7, #52]	; 0x34
 8009384:	e001      	b.n	800938a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8009386:	2300      	movs	r3, #0
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009396:	4618      	mov	r0, r3
 8009398:	3738      	adds	r7, #56	; 0x38
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10b      	bne.n	80093c4 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	b672      	cpsid	i
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	b662      	cpsie	i
 80093c0:	60bb      	str	r3, [r7, #8]
 80093c2:	e7fe      	b.n	80093c2 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 80093c4:	f001 fe60 	bl	800b088 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80093ce:	f001 fe8d 	bl	800b0ec <vPortExitCritical>

	return uxReturn;
 80093d2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10b      	bne.n	8009406 <uxQueueMessagesWaitingFromISR+0x2a>
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	b672      	cpsid	i
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	b662      	cpsie	i
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e7fe      	b.n	8009404 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800940c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800940e:	4618      	mov	r0, r3
 8009410:	371c      	adds	r7, #28
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10b      	bne.n	8009444 <vQueueDelete+0x2a>
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	b672      	cpsid	i
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	b662      	cpsie	i
 8009440:	60bb      	str	r3, [r7, #8]
 8009442:	e7fe      	b.n	8009442 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 f95d 	bl	8009704 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009450:	2b00      	cmp	r3, #0
 8009452:	d102      	bne.n	800945a <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f002 f801 	bl	800b45c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800945a:	bf00      	nop
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009462:	b480      	push	{r7}
 8009464:	b085      	sub	sp, #20
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	d006      	beq.n	8009480 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	e001      	b.n	8009484 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009484:	68fb      	ldr	r3, [r7, #12]
	}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b086      	sub	sp, #24
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800949e:	2300      	movs	r3, #0
 80094a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10d      	bne.n	80094cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d14d      	bne.n	8009554 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	4618      	mov	r0, r3
 80094be:	f001 f82d 	bl	800a51c <xTaskPriorityDisinherit>
 80094c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	609a      	str	r2, [r3, #8]
 80094ca:	e043      	b.n	8009554 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d119      	bne.n	8009506 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6858      	ldr	r0, [r3, #4]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	461a      	mov	r2, r3
 80094dc:	68b9      	ldr	r1, [r7, #8]
 80094de:	f002 f907 	bl	800b6f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	441a      	add	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d32b      	bcc.n	8009554 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	605a      	str	r2, [r3, #4]
 8009504:	e026      	b.n	8009554 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	68d8      	ldr	r0, [r3, #12]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	461a      	mov	r2, r3
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	f002 f8ed 	bl	800b6f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951e:	425b      	negs	r3, r3
 8009520:	441a      	add	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d207      	bcs.n	8009542 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	689a      	ldr	r2, [r3, #8]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953a:	425b      	negs	r3, r3
 800953c:	441a      	add	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b02      	cmp	r3, #2
 8009546:	d105      	bne.n	8009554 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	3b01      	subs	r3, #1
 8009552:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800955c:	697b      	ldr	r3, [r7, #20]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3718      	adds	r7, #24
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009574:	2b00      	cmp	r3, #0
 8009576:	d018      	beq.n	80095aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009580:	441a      	add	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	429a      	cmp	r2, r3
 8009590:	d303      	bcc.n	800959a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68d9      	ldr	r1, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	461a      	mov	r2, r3
 80095a4:	6838      	ldr	r0, [r7, #0]
 80095a6:	f002 f8a3 	bl	800b6f0 <memcpy>
	}
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095ba:	f001 fd65 	bl	800b088 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095c6:	e011      	b.n	80095ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d012      	beq.n	80095f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3324      	adds	r3, #36	; 0x24
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fd5d 	bl	800a094 <xTaskRemoveFromEventList>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095e0:	f000 fe36 	bl	800a250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dce9      	bgt.n	80095c8 <prvUnlockQueue+0x16>
 80095f4:	e000      	b.n	80095f8 <prvUnlockQueue+0x46>
					break;
 80095f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	22ff      	movs	r2, #255	; 0xff
 80095fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009600:	f001 fd74 	bl	800b0ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009604:	f001 fd40 	bl	800b088 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800960e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009610:	e011      	b.n	8009636 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d012      	beq.n	8009640 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3310      	adds	r3, #16
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fd38 	bl	800a094 <xTaskRemoveFromEventList>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800962a:	f000 fe11 	bl	800a250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	3b01      	subs	r3, #1
 8009632:	b2db      	uxtb	r3, r3
 8009634:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800963a:	2b00      	cmp	r3, #0
 800963c:	dce9      	bgt.n	8009612 <prvUnlockQueue+0x60>
 800963e:	e000      	b.n	8009642 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009640:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	22ff      	movs	r2, #255	; 0xff
 8009646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800964a:	f001 fd4f 	bl	800b0ec <vPortExitCritical>
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800965e:	f001 fd13 	bl	800b088 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	2b00      	cmp	r3, #0
 8009668:	d102      	bne.n	8009670 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800966a:	2301      	movs	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]
 800966e:	e001      	b.n	8009674 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009670:	2300      	movs	r3, #0
 8009672:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009674:	f001 fd3a 	bl	800b0ec <vPortExitCritical>

	return xReturn;
 8009678:	68fb      	ldr	r3, [r7, #12]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800968a:	f001 fcfd 	bl	800b088 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009696:	429a      	cmp	r2, r3
 8009698:	d102      	bne.n	80096a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800969a:	2301      	movs	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	e001      	b.n	80096a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096a4:	f001 fd22 	bl	800b0ec <vPortExitCritical>

	return xReturn;
 80096a8:	68fb      	ldr	r3, [r7, #12]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
	...

080096b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	e014      	b.n	80096ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096c4:	4a0e      	ldr	r2, [pc, #56]	; (8009700 <vQueueAddToRegistry+0x4c>)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10b      	bne.n	80096e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096d0:	490b      	ldr	r1, [pc, #44]	; (8009700 <vQueueAddToRegistry+0x4c>)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096da:	4a09      	ldr	r2, [pc, #36]	; (8009700 <vQueueAddToRegistry+0x4c>)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	4413      	add	r3, r2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096e6:	e005      	b.n	80096f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3301      	adds	r3, #1
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b07      	cmp	r3, #7
 80096f2:	d9e7      	bls.n	80096c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	20004cbc 	.word	0x20004cbc

08009704 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800970c:	2300      	movs	r3, #0
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	e016      	b.n	8009740 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009712:	4a10      	ldr	r2, [pc, #64]	; (8009754 <vQueueUnregisterQueue+0x50>)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	4413      	add	r3, r2
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	429a      	cmp	r2, r3
 8009720:	d10b      	bne.n	800973a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009722:	4a0c      	ldr	r2, [pc, #48]	; (8009754 <vQueueUnregisterQueue+0x50>)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2100      	movs	r1, #0
 8009728:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800972c:	4a09      	ldr	r2, [pc, #36]	; (8009754 <vQueueUnregisterQueue+0x50>)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	00db      	lsls	r3, r3, #3
 8009732:	4413      	add	r3, r2
 8009734:	2200      	movs	r2, #0
 8009736:	605a      	str	r2, [r3, #4]
				break;
 8009738:	e005      	b.n	8009746 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3301      	adds	r3, #1
 800973e:	60fb      	str	r3, [r7, #12]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b07      	cmp	r3, #7
 8009744:	d9e5      	bls.n	8009712 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20004cbc 	.word	0x20004cbc

08009758 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009768:	f001 fc8e 	bl	800b088 <vPortEnterCritical>
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009772:	b25b      	sxtb	r3, r3
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009778:	d103      	bne.n	8009782 <vQueueWaitForMessageRestricted+0x2a>
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009788:	b25b      	sxtb	r3, r3
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800978e:	d103      	bne.n	8009798 <vQueueWaitForMessageRestricted+0x40>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009798:	f001 fca8 	bl	800b0ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d106      	bne.n	80097b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	3324      	adds	r3, #36	; 0x24
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fc45 	bl	800a03c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097b2:	6978      	ldr	r0, [r7, #20]
 80097b4:	f7ff fefd 	bl	80095b2 <prvUnlockQueue>
	}
 80097b8:	bf00      	nop
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08e      	sub	sp, #56	; 0x38
 80097c4:	af04      	add	r7, sp, #16
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10b      	bne.n	80097ec <xTaskCreateStatic+0x2c>
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	b672      	cpsid	i
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	b662      	cpsie	i
 80097e8:	623b      	str	r3, [r7, #32]
 80097ea:	e7fe      	b.n	80097ea <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10b      	bne.n	800980a <xTaskCreateStatic+0x4a>
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	b672      	cpsid	i
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	b662      	cpsie	i
 8009806:	61fb      	str	r3, [r7, #28]
 8009808:	e7fe      	b.n	8009808 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800980a:	235c      	movs	r3, #92	; 0x5c
 800980c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b5c      	cmp	r3, #92	; 0x5c
 8009812:	d00b      	beq.n	800982c <xTaskCreateStatic+0x6c>
 8009814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009818:	b672      	cpsid	i
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	b662      	cpsie	i
 8009828:	61bb      	str	r3, [r7, #24]
 800982a:	e7fe      	b.n	800982a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800982c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	2b00      	cmp	r3, #0
 8009832:	d01e      	beq.n	8009872 <xTaskCreateStatic+0xb2>
 8009834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009836:	2b00      	cmp	r3, #0
 8009838:	d01b      	beq.n	8009872 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009842:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	2202      	movs	r2, #2
 8009848:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800984c:	2300      	movs	r3, #0
 800984e:	9303      	str	r3, [sp, #12]
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	9302      	str	r3, [sp, #8]
 8009854:	f107 0314 	add.w	r3, r7, #20
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	68b9      	ldr	r1, [r7, #8]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f850 	bl	800990a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800986a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800986c:	f000 f8de 	bl	8009a2c <prvAddNewTaskToReadyList>
 8009870:	e001      	b.n	8009876 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009876:	697b      	ldr	r3, [r7, #20]
	}
 8009878:	4618      	mov	r0, r3
 800987a:	3728      	adds	r7, #40	; 0x28
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08c      	sub	sp, #48	; 0x30
 8009884:	af04      	add	r7, sp, #16
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009890:	88fb      	ldrh	r3, [r7, #6]
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4618      	mov	r0, r3
 8009896:	f001 fd19 	bl	800b2cc <pvPortMalloc>
 800989a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00e      	beq.n	80098c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098a2:	205c      	movs	r0, #92	; 0x5c
 80098a4:	f001 fd12 	bl	800b2cc <pvPortMalloc>
 80098a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	631a      	str	r2, [r3, #48]	; 0x30
 80098b6:	e005      	b.n	80098c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098b8:	6978      	ldr	r0, [r7, #20]
 80098ba:	f001 fdcf 	bl	800b45c <vPortFree>
 80098be:	e001      	b.n	80098c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098c0:	2300      	movs	r3, #0
 80098c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d017      	beq.n	80098fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098d2:	88fa      	ldrh	r2, [r7, #6]
 80098d4:	2300      	movs	r3, #0
 80098d6:	9303      	str	r3, [sp, #12]
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	9302      	str	r3, [sp, #8]
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	68b9      	ldr	r1, [r7, #8]
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f80e 	bl	800990a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098ee:	69f8      	ldr	r0, [r7, #28]
 80098f0:	f000 f89c 	bl	8009a2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098f4:	2301      	movs	r3, #1
 80098f6:	61bb      	str	r3, [r7, #24]
 80098f8:	e002      	b.n	8009900 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009900:	69bb      	ldr	r3, [r7, #24]
	}
 8009902:	4618      	mov	r0, r3
 8009904:	3720      	adds	r7, #32
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b088      	sub	sp, #32
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
 8009916:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	461a      	mov	r2, r3
 8009922:	21a5      	movs	r1, #165	; 0xa5
 8009924:	f001 feef 	bl	800b706 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800992c:	6879      	ldr	r1, [r7, #4]
 800992e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009932:	440b      	add	r3, r1
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	f023 0307 	bic.w	r3, r3, #7
 8009940:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00b      	beq.n	8009964 <prvInitialiseNewTask+0x5a>
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	b672      	cpsid	i
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	b662      	cpsie	i
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	e7fe      	b.n	8009962 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d01f      	beq.n	80099aa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800996a:	2300      	movs	r3, #0
 800996c:	61fb      	str	r3, [r7, #28]
 800996e:	e012      	b.n	8009996 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	4413      	add	r3, r2
 8009976:	7819      	ldrb	r1, [r3, #0]
 8009978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	4413      	add	r3, r2
 800997e:	3334      	adds	r3, #52	; 0x34
 8009980:	460a      	mov	r2, r1
 8009982:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	4413      	add	r3, r2
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d006      	beq.n	800999e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	3301      	adds	r3, #1
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	2b0f      	cmp	r3, #15
 800999a:	d9e9      	bls.n	8009970 <prvInitialiseNewTask+0x66>
 800999c:	e000      	b.n	80099a0 <prvInitialiseNewTask+0x96>
			{
				break;
 800999e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099a8:	e003      	b.n	80099b2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	2b37      	cmp	r3, #55	; 0x37
 80099b6:	d901      	bls.n	80099bc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099b8:	2337      	movs	r3, #55	; 0x37
 80099ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	2200      	movs	r2, #0
 80099cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	3304      	adds	r3, #4
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fdf0 	bl	80085b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	3318      	adds	r3, #24
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fe fdeb 	bl	80085b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	2200      	movs	r2, #0
 80099fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	68f9      	ldr	r1, [r7, #12]
 8009a0a:	69b8      	ldr	r0, [r7, #24]
 8009a0c:	f001 fa36 	bl	800ae7c <pxPortInitialiseStack>
 8009a10:	4602      	mov	r2, r0
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a22:	bf00      	nop
 8009a24:	3720      	adds	r7, #32
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
	...

08009a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a34:	f001 fb28 	bl	800b088 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a38:	4b2d      	ldr	r3, [pc, #180]	; (8009af0 <prvAddNewTaskToReadyList+0xc4>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	4a2c      	ldr	r2, [pc, #176]	; (8009af0 <prvAddNewTaskToReadyList+0xc4>)
 8009a40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a42:	4b2c      	ldr	r3, [pc, #176]	; (8009af4 <prvAddNewTaskToReadyList+0xc8>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d109      	bne.n	8009a5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a4a:	4a2a      	ldr	r2, [pc, #168]	; (8009af4 <prvAddNewTaskToReadyList+0xc8>)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a50:	4b27      	ldr	r3, [pc, #156]	; (8009af0 <prvAddNewTaskToReadyList+0xc4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d110      	bne.n	8009a7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a58:	f000 fc1e 	bl	800a298 <prvInitialiseTaskLists>
 8009a5c:	e00d      	b.n	8009a7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a5e:	4b26      	ldr	r3, [pc, #152]	; (8009af8 <prvAddNewTaskToReadyList+0xcc>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a66:	4b23      	ldr	r3, [pc, #140]	; (8009af4 <prvAddNewTaskToReadyList+0xc8>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d802      	bhi.n	8009a7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a74:	4a1f      	ldr	r2, [pc, #124]	; (8009af4 <prvAddNewTaskToReadyList+0xc8>)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a7a:	4b20      	ldr	r3, [pc, #128]	; (8009afc <prvAddNewTaskToReadyList+0xd0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	4a1e      	ldr	r2, [pc, #120]	; (8009afc <prvAddNewTaskToReadyList+0xd0>)
 8009a82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a84:	4b1d      	ldr	r3, [pc, #116]	; (8009afc <prvAddNewTaskToReadyList+0xd0>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	4b1b      	ldr	r3, [pc, #108]	; (8009b00 <prvAddNewTaskToReadyList+0xd4>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d903      	bls.n	8009aa0 <prvAddNewTaskToReadyList+0x74>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	4a18      	ldr	r2, [pc, #96]	; (8009b00 <prvAddNewTaskToReadyList+0xd4>)
 8009a9e:	6013      	str	r3, [r2, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4a15      	ldr	r2, [pc, #84]	; (8009b04 <prvAddNewTaskToReadyList+0xd8>)
 8009aae:	441a      	add	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f7fe fd8b 	bl	80085d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009abc:	f001 fb16 	bl	800b0ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ac0:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <prvAddNewTaskToReadyList+0xcc>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00e      	beq.n	8009ae6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <prvAddNewTaskToReadyList+0xc8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d207      	bcs.n	8009ae6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ad6:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <prvAddNewTaskToReadyList+0xdc>)
 8009ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000c60 	.word	0x20000c60
 8009af4:	2000078c 	.word	0x2000078c
 8009af8:	20000c6c 	.word	0x20000c6c
 8009afc:	20000c7c 	.word	0x20000c7c
 8009b00:	20000c68 	.word	0x20000c68
 8009b04:	20000790 	.word	0x20000790
 8009b08:	e000ed04 	.word	0xe000ed04

08009b0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d018      	beq.n	8009b50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b1e:	4b14      	ldr	r3, [pc, #80]	; (8009b70 <vTaskDelay+0x64>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00b      	beq.n	8009b3e <vTaskDelay+0x32>
 8009b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2a:	b672      	cpsid	i
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	b662      	cpsie	i
 8009b3a:	60bb      	str	r3, [r7, #8]
 8009b3c:	e7fe      	b.n	8009b3c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8009b3e:	f000 f883 	bl	8009c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b42:	2100      	movs	r1, #0
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fdf1 	bl	800a72c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b4a:	f000 f88b 	bl	8009c64 <xTaskResumeAll>
 8009b4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d107      	bne.n	8009b66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009b56:	4b07      	ldr	r3, [pc, #28]	; (8009b74 <vTaskDelay+0x68>)
 8009b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b66:	bf00      	nop
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	20000c88 	.word	0x20000c88
 8009b74:	e000ed04 	.word	0xe000ed04

08009b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	; 0x28
 8009b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b86:	463a      	mov	r2, r7
 8009b88:	1d39      	adds	r1, r7, #4
 8009b8a:	f107 0308 	add.w	r3, r7, #8
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fcbe 	bl	8008510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	9202      	str	r2, [sp, #8]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	460a      	mov	r2, r1
 8009ba6:	4922      	ldr	r1, [pc, #136]	; (8009c30 <vTaskStartScheduler+0xb8>)
 8009ba8:	4822      	ldr	r0, [pc, #136]	; (8009c34 <vTaskStartScheduler+0xbc>)
 8009baa:	f7ff fe09 	bl	80097c0 <xTaskCreateStatic>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	4b21      	ldr	r3, [pc, #132]	; (8009c38 <vTaskStartScheduler+0xc0>)
 8009bb2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bb4:	4b20      	ldr	r3, [pc, #128]	; (8009c38 <vTaskStartScheduler+0xc0>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	e001      	b.n	8009bc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d102      	bne.n	8009bd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bcc:	f000 fe02 	bl	800a7d4 <xTimerCreateTimerTask>
 8009bd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d117      	bne.n	8009c08 <vTaskStartScheduler+0x90>
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	b672      	cpsid	i
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	b662      	cpsie	i
 8009bec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bee:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <vTaskStartScheduler+0xc4>)
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bf6:	4b12      	ldr	r3, [pc, #72]	; (8009c40 <vTaskStartScheduler+0xc8>)
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bfc:	4b11      	ldr	r3, [pc, #68]	; (8009c44 <vTaskStartScheduler+0xcc>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c02:	f001 f9c5 	bl	800af90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c06:	e00f      	b.n	8009c28 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c0e:	d10b      	bne.n	8009c28 <vTaskStartScheduler+0xb0>
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	b672      	cpsid	i
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	b662      	cpsie	i
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	e7fe      	b.n	8009c26 <vTaskStartScheduler+0xae>
}
 8009c28:	bf00      	nop
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	0800c180 	.word	0x0800c180
 8009c34:	0800a269 	.word	0x0800a269
 8009c38:	20000c84 	.word	0x20000c84
 8009c3c:	20000c80 	.word	0x20000c80
 8009c40:	20000c6c 	.word	0x20000c6c
 8009c44:	20000c64 	.word	0x20000c64

08009c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c4c:	4b04      	ldr	r3, [pc, #16]	; (8009c60 <vTaskSuspendAll+0x18>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3301      	adds	r3, #1
 8009c52:	4a03      	ldr	r2, [pc, #12]	; (8009c60 <vTaskSuspendAll+0x18>)
 8009c54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009c56:	bf00      	nop
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	20000c88 	.word	0x20000c88

08009c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c72:	4b42      	ldr	r3, [pc, #264]	; (8009d7c <xTaskResumeAll+0x118>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10b      	bne.n	8009c92 <xTaskResumeAll+0x2e>
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	b672      	cpsid	i
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	b662      	cpsie	i
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	e7fe      	b.n	8009c90 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c92:	f001 f9f9 	bl	800b088 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c96:	4b39      	ldr	r3, [pc, #228]	; (8009d7c <xTaskResumeAll+0x118>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	4a37      	ldr	r2, [pc, #220]	; (8009d7c <xTaskResumeAll+0x118>)
 8009c9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ca0:	4b36      	ldr	r3, [pc, #216]	; (8009d7c <xTaskResumeAll+0x118>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d162      	bne.n	8009d6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ca8:	4b35      	ldr	r3, [pc, #212]	; (8009d80 <xTaskResumeAll+0x11c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d05e      	beq.n	8009d6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cb0:	e02f      	b.n	8009d12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb2:	4b34      	ldr	r3, [pc, #208]	; (8009d84 <xTaskResumeAll+0x120>)
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3318      	adds	r3, #24
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe fce4 	bl	800868c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe fcdf 	bl	800868c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd2:	4b2d      	ldr	r3, [pc, #180]	; (8009d88 <xTaskResumeAll+0x124>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d903      	bls.n	8009ce2 <xTaskResumeAll+0x7e>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cde:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <xTaskResumeAll+0x124>)
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4a27      	ldr	r2, [pc, #156]	; (8009d8c <xTaskResumeAll+0x128>)
 8009cf0:	441a      	add	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	f7fe fc6a 	bl	80085d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d02:	4b23      	ldr	r3, [pc, #140]	; (8009d90 <xTaskResumeAll+0x12c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d302      	bcc.n	8009d12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009d0c:	4b21      	ldr	r3, [pc, #132]	; (8009d94 <xTaskResumeAll+0x130>)
 8009d0e:	2201      	movs	r2, #1
 8009d10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d12:	4b1c      	ldr	r3, [pc, #112]	; (8009d84 <xTaskResumeAll+0x120>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1cb      	bne.n	8009cb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d20:	f000 fb56 	bl	800a3d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009d24:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <xTaskResumeAll+0x134>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d010      	beq.n	8009d52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d30:	f000 f846 	bl	8009dc0 <xTaskIncrementTick>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009d3a:	4b16      	ldr	r3, [pc, #88]	; (8009d94 <xTaskResumeAll+0x130>)
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1f1      	bne.n	8009d30 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009d4c:	4b12      	ldr	r3, [pc, #72]	; (8009d98 <xTaskResumeAll+0x134>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d52:	4b10      	ldr	r3, [pc, #64]	; (8009d94 <xTaskResumeAll+0x130>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d009      	beq.n	8009d6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d5e:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <xTaskResumeAll+0x138>)
 8009d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d6e:	f001 f9bd 	bl	800b0ec <vPortExitCritical>

	return xAlreadyYielded;
 8009d72:	68bb      	ldr	r3, [r7, #8]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20000c88 	.word	0x20000c88
 8009d80:	20000c60 	.word	0x20000c60
 8009d84:	20000c20 	.word	0x20000c20
 8009d88:	20000c68 	.word	0x20000c68
 8009d8c:	20000790 	.word	0x20000790
 8009d90:	2000078c 	.word	0x2000078c
 8009d94:	20000c74 	.word	0x20000c74
 8009d98:	20000c70 	.word	0x20000c70
 8009d9c:	e000ed04 	.word	0xe000ed04

08009da0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009da6:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <xTaskGetTickCount+0x1c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dac:	687b      	ldr	r3, [r7, #4]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	20000c64 	.word	0x20000c64

08009dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dca:	4b4f      	ldr	r3, [pc, #316]	; (8009f08 <xTaskIncrementTick+0x148>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f040 808a 	bne.w	8009ee8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dd4:	4b4d      	ldr	r3, [pc, #308]	; (8009f0c <xTaskIncrementTick+0x14c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ddc:	4a4b      	ldr	r2, [pc, #300]	; (8009f0c <xTaskIncrementTick+0x14c>)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d121      	bne.n	8009e2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009de8:	4b49      	ldr	r3, [pc, #292]	; (8009f10 <xTaskIncrementTick+0x150>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00b      	beq.n	8009e0a <xTaskIncrementTick+0x4a>
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	b672      	cpsid	i
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	b662      	cpsie	i
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	e7fe      	b.n	8009e08 <xTaskIncrementTick+0x48>
 8009e0a:	4b41      	ldr	r3, [pc, #260]	; (8009f10 <xTaskIncrementTick+0x150>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	4b40      	ldr	r3, [pc, #256]	; (8009f14 <xTaskIncrementTick+0x154>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a3e      	ldr	r2, [pc, #248]	; (8009f10 <xTaskIncrementTick+0x150>)
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	4a3e      	ldr	r2, [pc, #248]	; (8009f14 <xTaskIncrementTick+0x154>)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	4b3e      	ldr	r3, [pc, #248]	; (8009f18 <xTaskIncrementTick+0x158>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	4a3c      	ldr	r2, [pc, #240]	; (8009f18 <xTaskIncrementTick+0x158>)
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	f000 fad2 	bl	800a3d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e2c:	4b3b      	ldr	r3, [pc, #236]	; (8009f1c <xTaskIncrementTick+0x15c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d349      	bcc.n	8009eca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e36:	4b36      	ldr	r3, [pc, #216]	; (8009f10 <xTaskIncrementTick+0x150>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d104      	bne.n	8009e4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e40:	4b36      	ldr	r3, [pc, #216]	; (8009f1c <xTaskIncrementTick+0x15c>)
 8009e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e46:	601a      	str	r2, [r3, #0]
					break;
 8009e48:	e03f      	b.n	8009eca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e4a:	4b31      	ldr	r3, [pc, #196]	; (8009f10 <xTaskIncrementTick+0x150>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d203      	bcs.n	8009e6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e62:	4a2e      	ldr	r2, [pc, #184]	; (8009f1c <xTaskIncrementTick+0x15c>)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e68:	e02f      	b.n	8009eca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe fc0c 	bl	800868c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d004      	beq.n	8009e86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	3318      	adds	r3, #24
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe fc03 	bl	800868c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8a:	4b25      	ldr	r3, [pc, #148]	; (8009f20 <xTaskIncrementTick+0x160>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d903      	bls.n	8009e9a <xTaskIncrementTick+0xda>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	4a22      	ldr	r2, [pc, #136]	; (8009f20 <xTaskIncrementTick+0x160>)
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4a1f      	ldr	r2, [pc, #124]	; (8009f24 <xTaskIncrementTick+0x164>)
 8009ea8:	441a      	add	r2, r3
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f7fe fb8e 	bl	80085d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eba:	4b1b      	ldr	r3, [pc, #108]	; (8009f28 <xTaskIncrementTick+0x168>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d3b8      	bcc.n	8009e36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec8:	e7b5      	b.n	8009e36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eca:	4b17      	ldr	r3, [pc, #92]	; (8009f28 <xTaskIncrementTick+0x168>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed0:	4914      	ldr	r1, [pc, #80]	; (8009f24 <xTaskIncrementTick+0x164>)
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	440b      	add	r3, r1
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d907      	bls.n	8009ef2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	e004      	b.n	8009ef2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009ee8:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <xTaskIncrementTick+0x16c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3301      	adds	r3, #1
 8009eee:	4a0f      	ldr	r2, [pc, #60]	; (8009f2c <xTaskIncrementTick+0x16c>)
 8009ef0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ef2:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <xTaskIncrementTick+0x170>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009efa:	2301      	movs	r3, #1
 8009efc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009efe:	697b      	ldr	r3, [r7, #20]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20000c88 	.word	0x20000c88
 8009f0c:	20000c64 	.word	0x20000c64
 8009f10:	20000c18 	.word	0x20000c18
 8009f14:	20000c1c 	.word	0x20000c1c
 8009f18:	20000c78 	.word	0x20000c78
 8009f1c:	20000c80 	.word	0x20000c80
 8009f20:	20000c68 	.word	0x20000c68
 8009f24:	20000790 	.word	0x20000790
 8009f28:	2000078c 	.word	0x2000078c
 8009f2c:	20000c70 	.word	0x20000c70
 8009f30:	20000c74 	.word	0x20000c74

08009f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f3a:	4b28      	ldr	r3, [pc, #160]	; (8009fdc <vTaskSwitchContext+0xa8>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f42:	4b27      	ldr	r3, [pc, #156]	; (8009fe0 <vTaskSwitchContext+0xac>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f48:	e042      	b.n	8009fd0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009f4a:	4b25      	ldr	r3, [pc, #148]	; (8009fe0 <vTaskSwitchContext+0xac>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f50:	4b24      	ldr	r3, [pc, #144]	; (8009fe4 <vTaskSwitchContext+0xb0>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	e011      	b.n	8009f7c <vTaskSwitchContext+0x48>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10b      	bne.n	8009f76 <vTaskSwitchContext+0x42>
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	b672      	cpsid	i
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	b662      	cpsie	i
 8009f72:	607b      	str	r3, [r7, #4]
 8009f74:	e7fe      	b.n	8009f74 <vTaskSwitchContext+0x40>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	491a      	ldr	r1, [pc, #104]	; (8009fe8 <vTaskSwitchContext+0xb4>)
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	440b      	add	r3, r1
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0e3      	beq.n	8009f58 <vTaskSwitchContext+0x24>
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4a13      	ldr	r2, [pc, #76]	; (8009fe8 <vTaskSwitchContext+0xb4>)
 8009f9c:	4413      	add	r3, r2
 8009f9e:	60bb      	str	r3, [r7, #8]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	605a      	str	r2, [r3, #4]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d104      	bne.n	8009fc0 <vTaskSwitchContext+0x8c>
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	4a09      	ldr	r2, [pc, #36]	; (8009fec <vTaskSwitchContext+0xb8>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	4a06      	ldr	r2, [pc, #24]	; (8009fe4 <vTaskSwitchContext+0xb0>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6013      	str	r3, [r2, #0]
}
 8009fd0:	bf00      	nop
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	20000c88 	.word	0x20000c88
 8009fe0:	20000c74 	.word	0x20000c74
 8009fe4:	20000c68 	.word	0x20000c68
 8009fe8:	20000790 	.word	0x20000790
 8009fec:	2000078c 	.word	0x2000078c

08009ff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10b      	bne.n	800a018 <vTaskPlaceOnEventList+0x28>
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	b672      	cpsid	i
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	b662      	cpsie	i
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	e7fe      	b.n	800a016 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a018:	4b07      	ldr	r3, [pc, #28]	; (800a038 <vTaskPlaceOnEventList+0x48>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3318      	adds	r3, #24
 800a01e:	4619      	mov	r1, r3
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7fe fafa 	bl	800861a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a026:	2101      	movs	r1, #1
 800a028:	6838      	ldr	r0, [r7, #0]
 800a02a:	f000 fb7f 	bl	800a72c <prvAddCurrentTaskToDelayedList>
}
 800a02e:	bf00      	nop
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	2000078c 	.word	0x2000078c

0800a03c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10b      	bne.n	800a066 <vTaskPlaceOnEventListRestricted+0x2a>
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	b672      	cpsid	i
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	b662      	cpsie	i
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	e7fe      	b.n	800a064 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a066:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <vTaskPlaceOnEventListRestricted+0x54>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3318      	adds	r3, #24
 800a06c:	4619      	mov	r1, r3
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7fe faaf 	bl	80085d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a07a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a07e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	68b8      	ldr	r0, [r7, #8]
 800a084:	f000 fb52 	bl	800a72c <prvAddCurrentTaskToDelayedList>
	}
 800a088:	bf00      	nop
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	2000078c 	.word	0x2000078c

0800a094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10b      	bne.n	800a0c2 <xTaskRemoveFromEventList+0x2e>
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	b672      	cpsid	i
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	b662      	cpsie	i
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e7fe      	b.n	800a0c0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	3318      	adds	r3, #24
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fae0 	bl	800868c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0cc:	4b1d      	ldr	r3, [pc, #116]	; (800a144 <xTaskRemoveFromEventList+0xb0>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d11d      	bne.n	800a110 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fad7 	bl	800868c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e2:	4b19      	ldr	r3, [pc, #100]	; (800a148 <xTaskRemoveFromEventList+0xb4>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d903      	bls.n	800a0f2 <xTaskRemoveFromEventList+0x5e>
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	4a16      	ldr	r2, [pc, #88]	; (800a148 <xTaskRemoveFromEventList+0xb4>)
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4a13      	ldr	r2, [pc, #76]	; (800a14c <xTaskRemoveFromEventList+0xb8>)
 800a100:	441a      	add	r2, r3
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	3304      	adds	r3, #4
 800a106:	4619      	mov	r1, r3
 800a108:	4610      	mov	r0, r2
 800a10a:	f7fe fa62 	bl	80085d2 <vListInsertEnd>
 800a10e:	e005      	b.n	800a11c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	3318      	adds	r3, #24
 800a114:	4619      	mov	r1, r3
 800a116:	480e      	ldr	r0, [pc, #56]	; (800a150 <xTaskRemoveFromEventList+0xbc>)
 800a118:	f7fe fa5b 	bl	80085d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a120:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <xTaskRemoveFromEventList+0xc0>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a126:	429a      	cmp	r2, r3
 800a128:	d905      	bls.n	800a136 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a12a:	2301      	movs	r3, #1
 800a12c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a12e:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <xTaskRemoveFromEventList+0xc4>)
 800a130:	2201      	movs	r2, #1
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	e001      	b.n	800a13a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a13a:	697b      	ldr	r3, [r7, #20]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20000c88 	.word	0x20000c88
 800a148:	20000c68 	.word	0x20000c68
 800a14c:	20000790 	.word	0x20000790
 800a150:	20000c20 	.word	0x20000c20
 800a154:	2000078c 	.word	0x2000078c
 800a158:	20000c74 	.word	0x20000c74

0800a15c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a164:	4b06      	ldr	r3, [pc, #24]	; (800a180 <vTaskInternalSetTimeOutState+0x24>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <vTaskInternalSetTimeOutState+0x28>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	605a      	str	r2, [r3, #4]
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	20000c78 	.word	0x20000c78
 800a184:	20000c64 	.word	0x20000c64

0800a188 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10b      	bne.n	800a1b0 <xTaskCheckForTimeOut+0x28>
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	b672      	cpsid	i
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	b662      	cpsie	i
 800a1ac:	613b      	str	r3, [r7, #16]
 800a1ae:	e7fe      	b.n	800a1ae <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10b      	bne.n	800a1ce <xTaskCheckForTimeOut+0x46>
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	b672      	cpsid	i
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	b662      	cpsie	i
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	e7fe      	b.n	800a1cc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800a1ce:	f000 ff5b 	bl	800b088 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1d2:	4b1d      	ldr	r3, [pc, #116]	; (800a248 <xTaskCheckForTimeOut+0xc0>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	69ba      	ldr	r2, [r7, #24]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ea:	d102      	bne.n	800a1f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	61fb      	str	r3, [r7, #28]
 800a1f0:	e023      	b.n	800a23a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	4b15      	ldr	r3, [pc, #84]	; (800a24c <xTaskCheckForTimeOut+0xc4>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d007      	beq.n	800a20e <xTaskCheckForTimeOut+0x86>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	429a      	cmp	r2, r3
 800a206:	d302      	bcc.n	800a20e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a208:	2301      	movs	r3, #1
 800a20a:	61fb      	str	r3, [r7, #28]
 800a20c:	e015      	b.n	800a23a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	429a      	cmp	r2, r3
 800a216:	d20b      	bcs.n	800a230 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff ff99 	bl	800a15c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	61fb      	str	r3, [r7, #28]
 800a22e:	e004      	b.n	800a23a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a236:	2301      	movs	r3, #1
 800a238:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a23a:	f000 ff57 	bl	800b0ec <vPortExitCritical>

	return xReturn;
 800a23e:	69fb      	ldr	r3, [r7, #28]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20000c64 	.word	0x20000c64
 800a24c:	20000c78 	.word	0x20000c78

0800a250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a254:	4b03      	ldr	r3, [pc, #12]	; (800a264 <vTaskMissedYield+0x14>)
 800a256:	2201      	movs	r2, #1
 800a258:	601a      	str	r2, [r3, #0]
}
 800a25a:	bf00      	nop
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	20000c74 	.word	0x20000c74

0800a268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a270:	f000 f852 	bl	800a318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a274:	4b06      	ldr	r3, [pc, #24]	; (800a290 <prvIdleTask+0x28>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d9f9      	bls.n	800a270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <prvIdleTask+0x2c>)
 800a27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a28c:	e7f0      	b.n	800a270 <prvIdleTask+0x8>
 800a28e:	bf00      	nop
 800a290:	20000790 	.word	0x20000790
 800a294:	e000ed04 	.word	0xe000ed04

0800a298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
 800a2a2:	e00c      	b.n	800a2be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4a12      	ldr	r2, [pc, #72]	; (800a2f8 <prvInitialiseTaskLists+0x60>)
 800a2b0:	4413      	add	r3, r2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe f960 	bl	8008578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	607b      	str	r3, [r7, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b37      	cmp	r3, #55	; 0x37
 800a2c2:	d9ef      	bls.n	800a2a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2c4:	480d      	ldr	r0, [pc, #52]	; (800a2fc <prvInitialiseTaskLists+0x64>)
 800a2c6:	f7fe f957 	bl	8008578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2ca:	480d      	ldr	r0, [pc, #52]	; (800a300 <prvInitialiseTaskLists+0x68>)
 800a2cc:	f7fe f954 	bl	8008578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2d0:	480c      	ldr	r0, [pc, #48]	; (800a304 <prvInitialiseTaskLists+0x6c>)
 800a2d2:	f7fe f951 	bl	8008578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2d6:	480c      	ldr	r0, [pc, #48]	; (800a308 <prvInitialiseTaskLists+0x70>)
 800a2d8:	f7fe f94e 	bl	8008578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2dc:	480b      	ldr	r0, [pc, #44]	; (800a30c <prvInitialiseTaskLists+0x74>)
 800a2de:	f7fe f94b 	bl	8008578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2e2:	4b0b      	ldr	r3, [pc, #44]	; (800a310 <prvInitialiseTaskLists+0x78>)
 800a2e4:	4a05      	ldr	r2, [pc, #20]	; (800a2fc <prvInitialiseTaskLists+0x64>)
 800a2e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <prvInitialiseTaskLists+0x7c>)
 800a2ea:	4a05      	ldr	r2, [pc, #20]	; (800a300 <prvInitialiseTaskLists+0x68>)
 800a2ec:	601a      	str	r2, [r3, #0]
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20000790 	.word	0x20000790
 800a2fc:	20000bf0 	.word	0x20000bf0
 800a300:	20000c04 	.word	0x20000c04
 800a304:	20000c20 	.word	0x20000c20
 800a308:	20000c34 	.word	0x20000c34
 800a30c:	20000c4c 	.word	0x20000c4c
 800a310:	20000c18 	.word	0x20000c18
 800a314:	20000c1c 	.word	0x20000c1c

0800a318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a31e:	e019      	b.n	800a354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a320:	f000 feb2 	bl	800b088 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a324:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <prvCheckTasksWaitingTermination+0x4c>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3304      	adds	r3, #4
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe f9ab 	bl	800868c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a336:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <prvCheckTasksWaitingTermination+0x50>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	4a0a      	ldr	r2, [pc, #40]	; (800a368 <prvCheckTasksWaitingTermination+0x50>)
 800a33e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a340:	4b0a      	ldr	r3, [pc, #40]	; (800a36c <prvCheckTasksWaitingTermination+0x54>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3b01      	subs	r3, #1
 800a346:	4a09      	ldr	r2, [pc, #36]	; (800a36c <prvCheckTasksWaitingTermination+0x54>)
 800a348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a34a:	f000 fecf 	bl	800b0ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f80e 	bl	800a370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <prvCheckTasksWaitingTermination+0x54>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e1      	bne.n	800a320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	20000c34 	.word	0x20000c34
 800a368:	20000c60 	.word	0x20000c60
 800a36c:	20000c48 	.word	0x20000c48

0800a370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d108      	bne.n	800a394 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a386:	4618      	mov	r0, r3
 800a388:	f001 f868 	bl	800b45c <vPortFree>
				vPortFree( pxTCB );
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 f865 	bl	800b45c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a392:	e019      	b.n	800a3c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d103      	bne.n	800a3a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f001 f85c 	bl	800b45c <vPortFree>
	}
 800a3a4:	e010      	b.n	800a3c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d00b      	beq.n	800a3c8 <prvDeleteTCB+0x58>
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	b672      	cpsid	i
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	b662      	cpsie	i
 800a3c4:	60fb      	str	r3, [r7, #12]
 800a3c6:	e7fe      	b.n	800a3c6 <prvDeleteTCB+0x56>
	}
 800a3c8:	bf00      	nop
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d6:	4b0c      	ldr	r3, [pc, #48]	; (800a408 <prvResetNextTaskUnblockTime+0x38>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d104      	bne.n	800a3ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	; (800a40c <prvResetNextTaskUnblockTime+0x3c>)
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3e8:	e008      	b.n	800a3fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ea:	4b07      	ldr	r3, [pc, #28]	; (800a408 <prvResetNextTaskUnblockTime+0x38>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	4a04      	ldr	r2, [pc, #16]	; (800a40c <prvResetNextTaskUnblockTime+0x3c>)
 800a3fa:	6013      	str	r3, [r2, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	20000c18 	.word	0x20000c18
 800a40c:	20000c80 	.word	0x20000c80

0800a410 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a416:	4b0b      	ldr	r3, [pc, #44]	; (800a444 <xTaskGetSchedulerState+0x34>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d102      	bne.n	800a424 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a41e:	2301      	movs	r3, #1
 800a420:	607b      	str	r3, [r7, #4]
 800a422:	e008      	b.n	800a436 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a424:	4b08      	ldr	r3, [pc, #32]	; (800a448 <xTaskGetSchedulerState+0x38>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d102      	bne.n	800a432 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a42c:	2302      	movs	r3, #2
 800a42e:	607b      	str	r3, [r7, #4]
 800a430:	e001      	b.n	800a436 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a432:	2300      	movs	r3, #0
 800a434:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a436:	687b      	ldr	r3, [r7, #4]
	}
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	20000c6c 	.word	0x20000c6c
 800a448:	20000c88 	.word	0x20000c88

0800a44c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a458:	2300      	movs	r3, #0
 800a45a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d051      	beq.n	800a506 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a466:	4b2a      	ldr	r3, [pc, #168]	; (800a510 <xTaskPriorityInherit+0xc4>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d241      	bcs.n	800a4f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	2b00      	cmp	r3, #0
 800a476:	db06      	blt.n	800a486 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a478:	4b25      	ldr	r3, [pc, #148]	; (800a510 <xTaskPriorityInherit+0xc4>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6959      	ldr	r1, [r3, #20]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48e:	4613      	mov	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4a1f      	ldr	r2, [pc, #124]	; (800a514 <xTaskPriorityInherit+0xc8>)
 800a498:	4413      	add	r3, r2
 800a49a:	4299      	cmp	r1, r3
 800a49c:	d122      	bne.n	800a4e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fe f8f2 	bl	800868c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4a8:	4b19      	ldr	r3, [pc, #100]	; (800a510 <xTaskPriorityInherit+0xc4>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b6:	4b18      	ldr	r3, [pc, #96]	; (800a518 <xTaskPriorityInherit+0xcc>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d903      	bls.n	800a4c6 <xTaskPriorityInherit+0x7a>
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c2:	4a15      	ldr	r2, [pc, #84]	; (800a518 <xTaskPriorityInherit+0xcc>)
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4a10      	ldr	r2, [pc, #64]	; (800a514 <xTaskPriorityInherit+0xc8>)
 800a4d4:	441a      	add	r2, r3
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4610      	mov	r0, r2
 800a4de:	f7fe f878 	bl	80085d2 <vListInsertEnd>
 800a4e2:	e004      	b.n	800a4ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4e4:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <xTaskPriorityInherit+0xc4>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	e008      	b.n	800a506 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4f8:	4b05      	ldr	r3, [pc, #20]	; (800a510 <xTaskPriorityInherit+0xc4>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d201      	bcs.n	800a506 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a502:	2301      	movs	r3, #1
 800a504:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a506:	68fb      	ldr	r3, [r7, #12]
	}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	2000078c 	.word	0x2000078c
 800a514:	20000790 	.word	0x20000790
 800a518:	20000c68 	.word	0x20000c68

0800a51c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a528:	2300      	movs	r3, #0
 800a52a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d058      	beq.n	800a5e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a532:	4b2f      	ldr	r3, [pc, #188]	; (800a5f0 <xTaskPriorityDisinherit+0xd4>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d00b      	beq.n	800a554 <xTaskPriorityDisinherit+0x38>
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	b672      	cpsid	i
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	b662      	cpsie	i
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	e7fe      	b.n	800a552 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10b      	bne.n	800a574 <xTaskPriorityDisinherit+0x58>
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	b672      	cpsid	i
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	b662      	cpsie	i
 800a570:	60bb      	str	r3, [r7, #8]
 800a572:	e7fe      	b.n	800a572 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a578:	1e5a      	subs	r2, r3, #1
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a586:	429a      	cmp	r2, r3
 800a588:	d02c      	beq.n	800a5e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d128      	bne.n	800a5e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	3304      	adds	r3, #4
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe f878 	bl	800868c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b4:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <xTaskPriorityDisinherit+0xd8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d903      	bls.n	800a5c4 <xTaskPriorityDisinherit+0xa8>
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c0:	4a0c      	ldr	r2, [pc, #48]	; (800a5f4 <xTaskPriorityDisinherit+0xd8>)
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4a09      	ldr	r2, [pc, #36]	; (800a5f8 <xTaskPriorityDisinherit+0xdc>)
 800a5d2:	441a      	add	r2, r3
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4610      	mov	r0, r2
 800a5dc:	f7fd fff9 	bl	80085d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5e4:	697b      	ldr	r3, [r7, #20]
	}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2000078c 	.word	0x2000078c
 800a5f4:	20000c68 	.word	0x20000c68
 800a5f8:	20000790 	.word	0x20000790

0800a5fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a60a:	2301      	movs	r3, #1
 800a60c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d06c      	beq.n	800a6ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10b      	bne.n	800a634 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	b672      	cpsid	i
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	b662      	cpsie	i
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	e7fe      	b.n	800a632 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d902      	bls.n	800a644 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	61fb      	str	r3, [r7, #28]
 800a642:	e002      	b.n	800a64a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a648:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64e:	69fa      	ldr	r2, [r7, #28]
 800a650:	429a      	cmp	r2, r3
 800a652:	d04c      	beq.n	800a6ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d147      	bne.n	800a6ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a65e:	4b26      	ldr	r3, [pc, #152]	; (800a6f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	429a      	cmp	r2, r3
 800a666:	d10b      	bne.n	800a680 <vTaskPriorityDisinheritAfterTimeout+0x84>
 800a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66c:	b672      	cpsid	i
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	b662      	cpsie	i
 800a67c:	60bb      	str	r3, [r7, #8]
 800a67e:	e7fe      	b.n	800a67e <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	69fa      	ldr	r2, [r7, #28]
 800a68a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	2b00      	cmp	r3, #0
 800a692:	db04      	blt.n	800a69e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	6959      	ldr	r1, [r3, #20]
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4a13      	ldr	r2, [pc, #76]	; (800a6fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a6ae:	4413      	add	r3, r2
 800a6b0:	4299      	cmp	r1, r3
 800a6b2:	d11c      	bne.n	800a6ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fd ffe7 	bl	800868c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c2:	4b0f      	ldr	r3, [pc, #60]	; (800a700 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d903      	bls.n	800a6d2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ce:	4a0c      	ldr	r2, [pc, #48]	; (800a700 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a6d0:	6013      	str	r3, [r2, #0]
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4a07      	ldr	r2, [pc, #28]	; (800a6fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a6e0:	441a      	add	r2, r3
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	f7fd ff72 	bl	80085d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6ee:	bf00      	nop
 800a6f0:	3720      	adds	r7, #32
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	2000078c 	.word	0x2000078c
 800a6fc:	20000790 	.word	0x20000790
 800a700:	20000c68 	.word	0x20000c68

0800a704 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a704:	b480      	push	{r7}
 800a706:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a708:	4b07      	ldr	r3, [pc, #28]	; (800a728 <pvTaskIncrementMutexHeldCount+0x24>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d004      	beq.n	800a71a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a710:	4b05      	ldr	r3, [pc, #20]	; (800a728 <pvTaskIncrementMutexHeldCount+0x24>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a716:	3201      	adds	r2, #1
 800a718:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a71a:	4b03      	ldr	r3, [pc, #12]	; (800a728 <pvTaskIncrementMutexHeldCount+0x24>)
 800a71c:	681b      	ldr	r3, [r3, #0]
	}
 800a71e:	4618      	mov	r0, r3
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	2000078c 	.word	0x2000078c

0800a72c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a736:	4b21      	ldr	r3, [pc, #132]	; (800a7bc <prvAddCurrentTaskToDelayedList+0x90>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a73c:	4b20      	ldr	r3, [pc, #128]	; (800a7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	3304      	adds	r3, #4
 800a742:	4618      	mov	r0, r3
 800a744:	f7fd ffa2 	bl	800868c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a74e:	d10a      	bne.n	800a766 <prvAddCurrentTaskToDelayedList+0x3a>
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d007      	beq.n	800a766 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a756:	4b1a      	ldr	r3, [pc, #104]	; (800a7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3304      	adds	r3, #4
 800a75c:	4619      	mov	r1, r3
 800a75e:	4819      	ldr	r0, [pc, #100]	; (800a7c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a760:	f7fd ff37 	bl	80085d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a764:	e026      	b.n	800a7b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4413      	add	r3, r2
 800a76c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a76e:	4b14      	ldr	r3, [pc, #80]	; (800a7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d209      	bcs.n	800a792 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a77e:	4b12      	ldr	r3, [pc, #72]	; (800a7c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3304      	adds	r3, #4
 800a788:	4619      	mov	r1, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	f7fd ff45 	bl	800861a <vListInsert>
}
 800a790:	e010      	b.n	800a7b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a792:	4b0e      	ldr	r3, [pc, #56]	; (800a7cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	4b0a      	ldr	r3, [pc, #40]	; (800a7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3304      	adds	r3, #4
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7fd ff3b 	bl	800861a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7a4:	4b0a      	ldr	r3, [pc, #40]	; (800a7d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d202      	bcs.n	800a7b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a7ae:	4a08      	ldr	r2, [pc, #32]	; (800a7d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	6013      	str	r3, [r2, #0]
}
 800a7b4:	bf00      	nop
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	20000c64 	.word	0x20000c64
 800a7c0:	2000078c 	.word	0x2000078c
 800a7c4:	20000c4c 	.word	0x20000c4c
 800a7c8:	20000c1c 	.word	0x20000c1c
 800a7cc:	20000c18 	.word	0x20000c18
 800a7d0:	20000c80 	.word	0x20000c80

0800a7d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7de:	f000 fb0d 	bl	800adfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7e2:	4b1d      	ldr	r3, [pc, #116]	; (800a858 <xTimerCreateTimerTask+0x84>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d021      	beq.n	800a82e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7f2:	1d3a      	adds	r2, r7, #4
 800a7f4:	f107 0108 	add.w	r1, r7, #8
 800a7f8:	f107 030c 	add.w	r3, r7, #12
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fd fea1 	bl	8008544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a802:	6879      	ldr	r1, [r7, #4]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	9202      	str	r2, [sp, #8]
 800a80a:	9301      	str	r3, [sp, #4]
 800a80c:	2332      	movs	r3, #50	; 0x32
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	2300      	movs	r3, #0
 800a812:	460a      	mov	r2, r1
 800a814:	4911      	ldr	r1, [pc, #68]	; (800a85c <xTimerCreateTimerTask+0x88>)
 800a816:	4812      	ldr	r0, [pc, #72]	; (800a860 <xTimerCreateTimerTask+0x8c>)
 800a818:	f7fe ffd2 	bl	80097c0 <xTaskCreateStatic>
 800a81c:	4602      	mov	r2, r0
 800a81e:	4b11      	ldr	r3, [pc, #68]	; (800a864 <xTimerCreateTimerTask+0x90>)
 800a820:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a822:	4b10      	ldr	r3, [pc, #64]	; (800a864 <xTimerCreateTimerTask+0x90>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a82a:	2301      	movs	r3, #1
 800a82c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10b      	bne.n	800a84c <xTimerCreateTimerTask+0x78>
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	b672      	cpsid	i
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	b662      	cpsie	i
 800a848:	613b      	str	r3, [r7, #16]
 800a84a:	e7fe      	b.n	800a84a <xTimerCreateTimerTask+0x76>
	return xReturn;
 800a84c:	697b      	ldr	r3, [r7, #20]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20000cbc 	.word	0x20000cbc
 800a85c:	0800c188 	.word	0x0800c188
 800a860:	0800a9a1 	.word	0x0800a9a1
 800a864:	20000cc0 	.word	0x20000cc0

0800a868 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	; 0x28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
 800a874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a876:	2300      	movs	r3, #0
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10b      	bne.n	800a898 <xTimerGenericCommand+0x30>
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	b672      	cpsid	i
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	b662      	cpsie	i
 800a894:	623b      	str	r3, [r7, #32]
 800a896:	e7fe      	b.n	800a896 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a898:	4b19      	ldr	r3, [pc, #100]	; (800a900 <xTimerGenericCommand+0x98>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d02a      	beq.n	800a8f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	dc18      	bgt.n	800a8e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8b2:	f7ff fdad 	bl	800a410 <xTaskGetSchedulerState>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d109      	bne.n	800a8d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8bc:	4b10      	ldr	r3, [pc, #64]	; (800a900 <xTimerGenericCommand+0x98>)
 800a8be:	6818      	ldr	r0, [r3, #0]
 800a8c0:	f107 0110 	add.w	r1, r7, #16
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c8:	f7fe f8c4 	bl	8008a54 <xQueueGenericSend>
 800a8cc:	6278      	str	r0, [r7, #36]	; 0x24
 800a8ce:	e012      	b.n	800a8f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8d0:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <xTimerGenericCommand+0x98>)
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	f107 0110 	add.w	r1, r7, #16
 800a8d8:	2300      	movs	r3, #0
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f7fe f8ba 	bl	8008a54 <xQueueGenericSend>
 800a8e0:	6278      	str	r0, [r7, #36]	; 0x24
 800a8e2:	e008      	b.n	800a8f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8e4:	4b06      	ldr	r3, [pc, #24]	; (800a900 <xTimerGenericCommand+0x98>)
 800a8e6:	6818      	ldr	r0, [r3, #0]
 800a8e8:	f107 0110 	add.w	r1, r7, #16
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	f7fe f9b2 	bl	8008c58 <xQueueGenericSendFromISR>
 800a8f4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3728      	adds	r7, #40	; 0x28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20000cbc 	.word	0x20000cbc

0800a904 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af02      	add	r7, sp, #8
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a90e:	4b23      	ldr	r3, [pc, #140]	; (800a99c <prvProcessExpiredTimer+0x98>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	3304      	adds	r3, #4
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fd feb5 	bl	800868c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d023      	beq.n	800a978 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	699a      	ldr	r2, [r3, #24]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	18d1      	adds	r1, r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	6978      	ldr	r0, [r7, #20]
 800a93e:	f000 f8d3 	bl	800aae8 <prvInsertTimerInActiveList>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d020      	beq.n	800a98a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a948:	2300      	movs	r3, #0
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	2300      	movs	r3, #0
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	2100      	movs	r1, #0
 800a952:	6978      	ldr	r0, [r7, #20]
 800a954:	f7ff ff88 	bl	800a868 <xTimerGenericCommand>
 800a958:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d114      	bne.n	800a98a <prvProcessExpiredTimer+0x86>
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	b672      	cpsid	i
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	b662      	cpsie	i
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	e7fe      	b.n	800a976 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a97e:	f023 0301 	bic.w	r3, r3, #1
 800a982:	b2da      	uxtb	r2, r3
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	6978      	ldr	r0, [r7, #20]
 800a990:	4798      	blx	r3
}
 800a992:	bf00      	nop
 800a994:	3718      	adds	r7, #24
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	20000cb4 	.word	0x20000cb4

0800a9a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9a8:	f107 0308 	add.w	r3, r7, #8
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 f857 	bl	800aa60 <prvGetNextExpireTime>
 800a9b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 f803 	bl	800a9c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9be:	f000 f8d5 	bl	800ab6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9c2:	e7f1      	b.n	800a9a8 <prvTimerTask+0x8>

0800a9c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9ce:	f7ff f93b 	bl	8009c48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9d2:	f107 0308 	add.w	r3, r7, #8
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 f866 	bl	800aaa8 <prvSampleTimeNow>
 800a9dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d130      	bne.n	800aa46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10a      	bne.n	800aa00 <prvProcessTimerOrBlockTask+0x3c>
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d806      	bhi.n	800aa00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9f2:	f7ff f937 	bl	8009c64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7ff ff83 	bl	800a904 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9fe:	e024      	b.n	800aa4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d008      	beq.n	800aa18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa06:	4b13      	ldr	r3, [pc, #76]	; (800aa54 <prvProcessTimerOrBlockTask+0x90>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <prvProcessTimerOrBlockTask+0x50>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e000      	b.n	800aa16 <prvProcessTimerOrBlockTask+0x52>
 800aa14:	2300      	movs	r3, #0
 800aa16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa18:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <prvProcessTimerOrBlockTask+0x94>)
 800aa1a:	6818      	ldr	r0, [r3, #0]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	4619      	mov	r1, r3
 800aa26:	f7fe fe97 	bl	8009758 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa2a:	f7ff f91b 	bl	8009c64 <xTaskResumeAll>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa34:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <prvProcessTimerOrBlockTask+0x98>)
 800aa36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	f3bf 8f6f 	isb	sy
}
 800aa44:	e001      	b.n	800aa4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa46:	f7ff f90d 	bl	8009c64 <xTaskResumeAll>
}
 800aa4a:	bf00      	nop
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20000cb8 	.word	0x20000cb8
 800aa58:	20000cbc 	.word	0x20000cbc
 800aa5c:	e000ed04 	.word	0xe000ed04

0800aa60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa68:	4b0e      	ldr	r3, [pc, #56]	; (800aaa4 <prvGetNextExpireTime+0x44>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <prvGetNextExpireTime+0x16>
 800aa72:	2201      	movs	r2, #1
 800aa74:	e000      	b.n	800aa78 <prvGetNextExpireTime+0x18>
 800aa76:	2200      	movs	r2, #0
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d105      	bne.n	800aa90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa84:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <prvGetNextExpireTime+0x44>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e001      	b.n	800aa94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa94:	68fb      	ldr	r3, [r7, #12]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20000cb4 	.word	0x20000cb4

0800aaa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aab0:	f7ff f976 	bl	8009da0 <xTaskGetTickCount>
 800aab4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aab6:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <prvSampleTimeNow+0x3c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d205      	bcs.n	800aacc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aac0:	f000 f936 	bl	800ad30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	601a      	str	r2, [r3, #0]
 800aaca:	e002      	b.n	800aad2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aad2:	4a04      	ldr	r2, [pc, #16]	; (800aae4 <prvSampleTimeNow+0x3c>)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aad8:	68fb      	ldr	r3, [r7, #12]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20000cc4 	.word	0x20000cc4

0800aae8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
 800aaf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d812      	bhi.n	800ab34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	1ad2      	subs	r2, r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d302      	bcc.n	800ab22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	e01b      	b.n	800ab5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab22:	4b10      	ldr	r3, [pc, #64]	; (800ab64 <prvInsertTimerInActiveList+0x7c>)
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	f7fd fd74 	bl	800861a <vListInsert>
 800ab32:	e012      	b.n	800ab5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d206      	bcs.n	800ab4a <prvInsertTimerInActiveList+0x62>
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d302      	bcc.n	800ab4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab44:	2301      	movs	r3, #1
 800ab46:	617b      	str	r3, [r7, #20]
 800ab48:	e007      	b.n	800ab5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab4a:	4b07      	ldr	r3, [pc, #28]	; (800ab68 <prvInsertTimerInActiveList+0x80>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3304      	adds	r3, #4
 800ab52:	4619      	mov	r1, r3
 800ab54:	4610      	mov	r0, r2
 800ab56:	f7fd fd60 	bl	800861a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab5a:	697b      	ldr	r3, [r7, #20]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20000cb8 	.word	0x20000cb8
 800ab68:	20000cb4 	.word	0x20000cb4

0800ab6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08e      	sub	sp, #56	; 0x38
 800ab70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab72:	e0cc      	b.n	800ad0e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	da19      	bge.n	800abae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab7a:	1d3b      	adds	r3, r7, #4
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10b      	bne.n	800ab9e <prvProcessReceivedCommands+0x32>
 800ab86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8a:	b672      	cpsid	i
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	b662      	cpsie	i
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	e7fe      	b.n	800ab9c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aba4:	6850      	ldr	r0, [r2, #4]
 800aba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aba8:	6892      	ldr	r2, [r2, #8]
 800abaa:	4611      	mov	r1, r2
 800abac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f2c0 80ab 	blt.w	800ad0c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d004      	beq.n	800abcc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc4:	3304      	adds	r3, #4
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fd fd60 	bl	800868c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abcc:	463b      	mov	r3, r7
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff ff6a 	bl	800aaa8 <prvSampleTimeNow>
 800abd4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b09      	cmp	r3, #9
 800abda:	f200 8098 	bhi.w	800ad0e <prvProcessReceivedCommands+0x1a2>
 800abde:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <prvProcessReceivedCommands+0x78>)
 800abe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe4:	0800ac0d 	.word	0x0800ac0d
 800abe8:	0800ac0d 	.word	0x0800ac0d
 800abec:	0800ac0d 	.word	0x0800ac0d
 800abf0:	0800ac83 	.word	0x0800ac83
 800abf4:	0800ac97 	.word	0x0800ac97
 800abf8:	0800ace3 	.word	0x0800ace3
 800abfc:	0800ac0d 	.word	0x0800ac0d
 800ac00:	0800ac0d 	.word	0x0800ac0d
 800ac04:	0800ac83 	.word	0x0800ac83
 800ac08:	0800ac97 	.word	0x0800ac97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	18d1      	adds	r1, r2, r3
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac2c:	f7ff ff5c 	bl	800aae8 <prvInsertTimerInActiveList>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d06b      	beq.n	800ad0e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d060      	beq.n	800ad0e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	441a      	add	r2, r3
 800ac54:	2300      	movs	r3, #0
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac5e:	f7ff fe03 	bl	800a868 <xTimerGenericCommand>
 800ac62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d151      	bne.n	800ad0e <prvProcessReceivedCommands+0x1a2>
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	b672      	cpsid	i
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	b662      	cpsie	i
 800ac7e:	61bb      	str	r3, [r7, #24]
 800ac80:	e7fe      	b.n	800ac80 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac88:	f023 0301 	bic.w	r3, r3, #1
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ac94:	e03b      	b.n	800ad0e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac9c:	f043 0301 	orr.w	r3, r3, #1
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10b      	bne.n	800acce <prvProcessReceivedCommands+0x162>
 800acb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acba:	b672      	cpsid	i
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	b662      	cpsie	i
 800acca:	617b      	str	r3, [r7, #20]
 800accc:	e7fe      	b.n	800accc <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd0:	699a      	ldr	r2, [r3, #24]
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	18d1      	adds	r1, r2, r3
 800acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acdc:	f7ff ff04 	bl	800aae8 <prvInsertTimerInActiveList>
					break;
 800ace0:	e015      	b.n	800ad0e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace8:	f003 0302 	and.w	r3, r3, #2
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800acf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acf2:	f000 fbb3 	bl	800b45c <vPortFree>
 800acf6:	e00a      	b.n	800ad0e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acfe:	f023 0301 	bic.w	r3, r3, #1
 800ad02:	b2da      	uxtb	r2, r3
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad0a:	e000      	b.n	800ad0e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad0e:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <prvProcessReceivedCommands+0x1c0>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	1d39      	adds	r1, r7, #4
 800ad14:	2200      	movs	r2, #0
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe f8cc 	bl	8008eb4 <xQueueReceive>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f47f af28 	bne.w	800ab74 <prvProcessReceivedCommands+0x8>
	}
}
 800ad24:	bf00      	nop
 800ad26:	3730      	adds	r7, #48	; 0x30
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	20000cbc 	.word	0x20000cbc

0800ad30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad36:	e049      	b.n	800adcc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad38:	4b2e      	ldr	r3, [pc, #184]	; (800adf4 <prvSwitchTimerLists+0xc4>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad42:	4b2c      	ldr	r3, [pc, #176]	; (800adf4 <prvSwitchTimerLists+0xc4>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	3304      	adds	r3, #4
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fd fc9b 	bl	800868c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad64:	f003 0304 	and.w	r3, r3, #4
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d02f      	beq.n	800adcc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	4413      	add	r3, r2
 800ad74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d90e      	bls.n	800ad9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad8a:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <prvSwitchTimerLists+0xc4>)
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3304      	adds	r3, #4
 800ad92:	4619      	mov	r1, r3
 800ad94:	4610      	mov	r0, r2
 800ad96:	f7fd fc40 	bl	800861a <vListInsert>
 800ad9a:	e017      	b.n	800adcc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	2300      	movs	r3, #0
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	2100      	movs	r1, #0
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7ff fd5e 	bl	800a868 <xTimerGenericCommand>
 800adac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10b      	bne.n	800adcc <prvSwitchTimerLists+0x9c>
 800adb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb8:	b672      	cpsid	i
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	b662      	cpsie	i
 800adc8:	603b      	str	r3, [r7, #0]
 800adca:	e7fe      	b.n	800adca <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <prvSwitchTimerLists+0xc4>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1b0      	bne.n	800ad38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800add6:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <prvSwitchTimerLists+0xc4>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800addc:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <prvSwitchTimerLists+0xc8>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a04      	ldr	r2, [pc, #16]	; (800adf4 <prvSwitchTimerLists+0xc4>)
 800ade2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ade4:	4a04      	ldr	r2, [pc, #16]	; (800adf8 <prvSwitchTimerLists+0xc8>)
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	6013      	str	r3, [r2, #0]
}
 800adea:	bf00      	nop
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20000cb4 	.word	0x20000cb4
 800adf8:	20000cb8 	.word	0x20000cb8

0800adfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae02:	f000 f941 	bl	800b088 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae06:	4b15      	ldr	r3, [pc, #84]	; (800ae5c <prvCheckForValidListAndQueue+0x60>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d120      	bne.n	800ae50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae0e:	4814      	ldr	r0, [pc, #80]	; (800ae60 <prvCheckForValidListAndQueue+0x64>)
 800ae10:	f7fd fbb2 	bl	8008578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae14:	4813      	ldr	r0, [pc, #76]	; (800ae64 <prvCheckForValidListAndQueue+0x68>)
 800ae16:	f7fd fbaf 	bl	8008578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae1a:	4b13      	ldr	r3, [pc, #76]	; (800ae68 <prvCheckForValidListAndQueue+0x6c>)
 800ae1c:	4a10      	ldr	r2, [pc, #64]	; (800ae60 <prvCheckForValidListAndQueue+0x64>)
 800ae1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae20:	4b12      	ldr	r3, [pc, #72]	; (800ae6c <prvCheckForValidListAndQueue+0x70>)
 800ae22:	4a10      	ldr	r2, [pc, #64]	; (800ae64 <prvCheckForValidListAndQueue+0x68>)
 800ae24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae26:	2300      	movs	r3, #0
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	4b11      	ldr	r3, [pc, #68]	; (800ae70 <prvCheckForValidListAndQueue+0x74>)
 800ae2c:	4a11      	ldr	r2, [pc, #68]	; (800ae74 <prvCheckForValidListAndQueue+0x78>)
 800ae2e:	2110      	movs	r1, #16
 800ae30:	200a      	movs	r0, #10
 800ae32:	f7fd fcbf 	bl	80087b4 <xQueueGenericCreateStatic>
 800ae36:	4602      	mov	r2, r0
 800ae38:	4b08      	ldr	r3, [pc, #32]	; (800ae5c <prvCheckForValidListAndQueue+0x60>)
 800ae3a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae3c:	4b07      	ldr	r3, [pc, #28]	; (800ae5c <prvCheckForValidListAndQueue+0x60>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d005      	beq.n	800ae50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae44:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <prvCheckForValidListAndQueue+0x60>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	490b      	ldr	r1, [pc, #44]	; (800ae78 <prvCheckForValidListAndQueue+0x7c>)
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe fc32 	bl	80096b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae50:	f000 f94c 	bl	800b0ec <vPortExitCritical>
}
 800ae54:	bf00      	nop
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20000cbc 	.word	0x20000cbc
 800ae60:	20000c8c 	.word	0x20000c8c
 800ae64:	20000ca0 	.word	0x20000ca0
 800ae68:	20000cb4 	.word	0x20000cb4
 800ae6c:	20000cb8 	.word	0x20000cb8
 800ae70:	20000d68 	.word	0x20000d68
 800ae74:	20000cc8 	.word	0x20000cc8
 800ae78:	0800c190 	.word	0x0800c190

0800ae7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3b04      	subs	r3, #4
 800ae8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3b04      	subs	r3, #4
 800ae9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	f023 0201 	bic.w	r2, r3, #1
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3b04      	subs	r3, #4
 800aeaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aeac:	4a0c      	ldr	r2, [pc, #48]	; (800aee0 <pxPortInitialiseStack+0x64>)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3b14      	subs	r3, #20
 800aeb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3b04      	subs	r3, #4
 800aec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f06f 0202 	mvn.w	r2, #2
 800aeca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	3b20      	subs	r3, #32
 800aed0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aed2:	68fb      	ldr	r3, [r7, #12]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	0800aee5 	.word	0x0800aee5

0800aee4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aeee:	4b13      	ldr	r3, [pc, #76]	; (800af3c <prvTaskExitError+0x58>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aef6:	d00b      	beq.n	800af10 <prvTaskExitError+0x2c>
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	b672      	cpsid	i
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	b662      	cpsie	i
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	e7fe      	b.n	800af0e <prvTaskExitError+0x2a>
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	b672      	cpsid	i
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	b662      	cpsie	i
 800af24:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af26:	bf00      	nop
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0fc      	beq.n	800af28 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af2e:	bf00      	nop
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	2000003c 	.word	0x2000003c

0800af40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af40:	4b07      	ldr	r3, [pc, #28]	; (800af60 <pxCurrentTCBConst2>)
 800af42:	6819      	ldr	r1, [r3, #0]
 800af44:	6808      	ldr	r0, [r1, #0]
 800af46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4a:	f380 8809 	msr	PSP, r0
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f04f 0000 	mov.w	r0, #0
 800af56:	f380 8811 	msr	BASEPRI, r0
 800af5a:	4770      	bx	lr
 800af5c:	f3af 8000 	nop.w

0800af60 <pxCurrentTCBConst2>:
 800af60:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop

0800af68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af68:	4808      	ldr	r0, [pc, #32]	; (800af8c <prvPortStartFirstTask+0x24>)
 800af6a:	6800      	ldr	r0, [r0, #0]
 800af6c:	6800      	ldr	r0, [r0, #0]
 800af6e:	f380 8808 	msr	MSP, r0
 800af72:	f04f 0000 	mov.w	r0, #0
 800af76:	f380 8814 	msr	CONTROL, r0
 800af7a:	b662      	cpsie	i
 800af7c:	b661      	cpsie	f
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	df00      	svc	0
 800af88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af8a:	bf00      	nop
 800af8c:	e000ed08 	.word	0xe000ed08

0800af90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af96:	4b36      	ldr	r3, [pc, #216]	; (800b070 <xPortStartScheduler+0xe0>)
 800af98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	22ff      	movs	r2, #255	; 0xff
 800afa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	b2db      	uxtb	r3, r3
 800afae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	4b2e      	ldr	r3, [pc, #184]	; (800b074 <xPortStartScheduler+0xe4>)
 800afbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afbe:	4b2e      	ldr	r3, [pc, #184]	; (800b078 <xPortStartScheduler+0xe8>)
 800afc0:	2207      	movs	r2, #7
 800afc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afc4:	e009      	b.n	800afda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800afc6:	4b2c      	ldr	r3, [pc, #176]	; (800b078 <xPortStartScheduler+0xe8>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3b01      	subs	r3, #1
 800afcc:	4a2a      	ldr	r2, [pc, #168]	; (800b078 <xPortStartScheduler+0xe8>)
 800afce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afd0:	78fb      	ldrb	r3, [r7, #3]
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afda:	78fb      	ldrb	r3, [r7, #3]
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afe2:	2b80      	cmp	r3, #128	; 0x80
 800afe4:	d0ef      	beq.n	800afc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afe6:	4b24      	ldr	r3, [pc, #144]	; (800b078 <xPortStartScheduler+0xe8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f1c3 0307 	rsb	r3, r3, #7
 800afee:	2b04      	cmp	r3, #4
 800aff0:	d00b      	beq.n	800b00a <xPortStartScheduler+0x7a>
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	b672      	cpsid	i
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	b662      	cpsie	i
 800b006:	60bb      	str	r3, [r7, #8]
 800b008:	e7fe      	b.n	800b008 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b00a:	4b1b      	ldr	r3, [pc, #108]	; (800b078 <xPortStartScheduler+0xe8>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	021b      	lsls	r3, r3, #8
 800b010:	4a19      	ldr	r2, [pc, #100]	; (800b078 <xPortStartScheduler+0xe8>)
 800b012:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b014:	4b18      	ldr	r3, [pc, #96]	; (800b078 <xPortStartScheduler+0xe8>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b01c:	4a16      	ldr	r2, [pc, #88]	; (800b078 <xPortStartScheduler+0xe8>)
 800b01e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	b2da      	uxtb	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b028:	4b14      	ldr	r3, [pc, #80]	; (800b07c <xPortStartScheduler+0xec>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a13      	ldr	r2, [pc, #76]	; (800b07c <xPortStartScheduler+0xec>)
 800b02e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b032:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b034:	4b11      	ldr	r3, [pc, #68]	; (800b07c <xPortStartScheduler+0xec>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a10      	ldr	r2, [pc, #64]	; (800b07c <xPortStartScheduler+0xec>)
 800b03a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b03e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b040:	f000 f8d4 	bl	800b1ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b044:	4b0e      	ldr	r3, [pc, #56]	; (800b080 <xPortStartScheduler+0xf0>)
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b04a:	f000 f8f3 	bl	800b234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b04e:	4b0d      	ldr	r3, [pc, #52]	; (800b084 <xPortStartScheduler+0xf4>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a0c      	ldr	r2, [pc, #48]	; (800b084 <xPortStartScheduler+0xf4>)
 800b054:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b058:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b05a:	f7ff ff85 	bl	800af68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b05e:	f7fe ff69 	bl	8009f34 <vTaskSwitchContext>
	prvTaskExitError();
 800b062:	f7ff ff3f 	bl	800aee4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	e000e400 	.word	0xe000e400
 800b074:	20000db8 	.word	0x20000db8
 800b078:	20000dbc 	.word	0x20000dbc
 800b07c:	e000ed20 	.word	0xe000ed20
 800b080:	2000003c 	.word	0x2000003c
 800b084:	e000ef34 	.word	0xe000ef34

0800b088 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	b672      	cpsid	i
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	b662      	cpsie	i
 800b0a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0a4:	4b0f      	ldr	r3, [pc, #60]	; (800b0e4 <vPortEnterCritical+0x5c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	4a0e      	ldr	r2, [pc, #56]	; (800b0e4 <vPortEnterCritical+0x5c>)
 800b0ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0ae:	4b0d      	ldr	r3, [pc, #52]	; (800b0e4 <vPortEnterCritical+0x5c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d110      	bne.n	800b0d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0b6:	4b0c      	ldr	r3, [pc, #48]	; (800b0e8 <vPortEnterCritical+0x60>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00b      	beq.n	800b0d8 <vPortEnterCritical+0x50>
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	b672      	cpsid	i
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	b662      	cpsie	i
 800b0d4:	603b      	str	r3, [r7, #0]
 800b0d6:	e7fe      	b.n	800b0d6 <vPortEnterCritical+0x4e>
	}
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	2000003c 	.word	0x2000003c
 800b0e8:	e000ed04 	.word	0xe000ed04

0800b0ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b0f2:	4b12      	ldr	r3, [pc, #72]	; (800b13c <vPortExitCritical+0x50>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10b      	bne.n	800b112 <vPortExitCritical+0x26>
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	b672      	cpsid	i
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	b662      	cpsie	i
 800b10e:	607b      	str	r3, [r7, #4]
 800b110:	e7fe      	b.n	800b110 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800b112:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <vPortExitCritical+0x50>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3b01      	subs	r3, #1
 800b118:	4a08      	ldr	r2, [pc, #32]	; (800b13c <vPortExitCritical+0x50>)
 800b11a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b11c:	4b07      	ldr	r3, [pc, #28]	; (800b13c <vPortExitCritical+0x50>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d104      	bne.n	800b12e <vPortExitCritical+0x42>
 800b124:	2300      	movs	r3, #0
 800b126:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b12e:	bf00      	nop
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	2000003c 	.word	0x2000003c

0800b140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b140:	f3ef 8009 	mrs	r0, PSP
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	4b15      	ldr	r3, [pc, #84]	; (800b1a0 <pxCurrentTCBConst>)
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	f01e 0f10 	tst.w	lr, #16
 800b150:	bf08      	it	eq
 800b152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15a:	6010      	str	r0, [r2, #0]
 800b15c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b160:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b164:	b672      	cpsid	i
 800b166:	f380 8811 	msr	BASEPRI, r0
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	b662      	cpsie	i
 800b174:	f7fe fede 	bl	8009f34 <vTaskSwitchContext>
 800b178:	f04f 0000 	mov.w	r0, #0
 800b17c:	f380 8811 	msr	BASEPRI, r0
 800b180:	bc09      	pop	{r0, r3}
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	6808      	ldr	r0, [r1, #0]
 800b186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18a:	f01e 0f10 	tst.w	lr, #16
 800b18e:	bf08      	it	eq
 800b190:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b194:	f380 8809 	msr	PSP, r0
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop

0800b1a0 <pxCurrentTCBConst>:
 800b1a0:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop

0800b1a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	b672      	cpsid	i
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	b662      	cpsie	i
 800b1c2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1c4:	f7fe fdfc 	bl	8009dc0 <xTaskIncrementTick>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1ce:	4b06      	ldr	r3, [pc, #24]	; (800b1e8 <SysTick_Handler+0x40>)
 800b1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b1e0:	bf00      	nop
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	e000ed04 	.word	0xe000ed04

0800b1ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1f0:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <vPortSetupTimerInterrupt+0x34>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1f6:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <vPortSetupTimerInterrupt+0x38>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <vPortSetupTimerInterrupt+0x3c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a0a      	ldr	r2, [pc, #40]	; (800b22c <vPortSetupTimerInterrupt+0x40>)
 800b202:	fba2 2303 	umull	r2, r3, r2, r3
 800b206:	099b      	lsrs	r3, r3, #6
 800b208:	4a09      	ldr	r2, [pc, #36]	; (800b230 <vPortSetupTimerInterrupt+0x44>)
 800b20a:	3b01      	subs	r3, #1
 800b20c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b20e:	4b04      	ldr	r3, [pc, #16]	; (800b220 <vPortSetupTimerInterrupt+0x34>)
 800b210:	2207      	movs	r2, #7
 800b212:	601a      	str	r2, [r3, #0]
}
 800b214:	bf00      	nop
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	e000e010 	.word	0xe000e010
 800b224:	e000e018 	.word	0xe000e018
 800b228:	20000030 	.word	0x20000030
 800b22c:	10624dd3 	.word	0x10624dd3
 800b230:	e000e014 	.word	0xe000e014

0800b234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b244 <vPortEnableVFP+0x10>
 800b238:	6801      	ldr	r1, [r0, #0]
 800b23a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b23e:	6001      	str	r1, [r0, #0]
 800b240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b242:	bf00      	nop
 800b244:	e000ed88 	.word	0xe000ed88

0800b248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b24e:	f3ef 8305 	mrs	r3, IPSR
 800b252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b0f      	cmp	r3, #15
 800b258:	d915      	bls.n	800b286 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b25a:	4a18      	ldr	r2, [pc, #96]	; (800b2bc <vPortValidateInterruptPriority+0x74>)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4413      	add	r3, r2
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b264:	4b16      	ldr	r3, [pc, #88]	; (800b2c0 <vPortValidateInterruptPriority+0x78>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	7afa      	ldrb	r2, [r7, #11]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d20b      	bcs.n	800b286 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b272:	b672      	cpsid	i
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	b662      	cpsie	i
 800b282:	607b      	str	r3, [r7, #4]
 800b284:	e7fe      	b.n	800b284 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b286:	4b0f      	ldr	r3, [pc, #60]	; (800b2c4 <vPortValidateInterruptPriority+0x7c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b28e:	4b0e      	ldr	r3, [pc, #56]	; (800b2c8 <vPortValidateInterruptPriority+0x80>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	429a      	cmp	r2, r3
 800b294:	d90b      	bls.n	800b2ae <vPortValidateInterruptPriority+0x66>
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	b672      	cpsid	i
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	b662      	cpsie	i
 800b2aa:	603b      	str	r3, [r7, #0]
 800b2ac:	e7fe      	b.n	800b2ac <vPortValidateInterruptPriority+0x64>
	}
 800b2ae:	bf00      	nop
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	e000e3f0 	.word	0xe000e3f0
 800b2c0:	20000db8 	.word	0x20000db8
 800b2c4:	e000ed0c 	.word	0xe000ed0c
 800b2c8:	20000dbc 	.word	0x20000dbc

0800b2cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08a      	sub	sp, #40	; 0x28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b2d8:	f7fe fcb6 	bl	8009c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2dc:	4b5a      	ldr	r3, [pc, #360]	; (800b448 <pvPortMalloc+0x17c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2e4:	f000 f916 	bl	800b514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2e8:	4b58      	ldr	r3, [pc, #352]	; (800b44c <pvPortMalloc+0x180>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f040 8090 	bne.w	800b416 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d01e      	beq.n	800b33a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b2fc:	2208      	movs	r2, #8
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4413      	add	r3, r2
 800b302:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f003 0307 	and.w	r3, r3, #7
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d015      	beq.n	800b33a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f023 0307 	bic.w	r3, r3, #7
 800b314:	3308      	adds	r3, #8
 800b316:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f003 0307 	and.w	r3, r3, #7
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00b      	beq.n	800b33a <pvPortMalloc+0x6e>
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	b672      	cpsid	i
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	b662      	cpsie	i
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e7fe      	b.n	800b338 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d06a      	beq.n	800b416 <pvPortMalloc+0x14a>
 800b340:	4b43      	ldr	r3, [pc, #268]	; (800b450 <pvPortMalloc+0x184>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	429a      	cmp	r2, r3
 800b348:	d865      	bhi.n	800b416 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b34a:	4b42      	ldr	r3, [pc, #264]	; (800b454 <pvPortMalloc+0x188>)
 800b34c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b34e:	4b41      	ldr	r3, [pc, #260]	; (800b454 <pvPortMalloc+0x188>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b354:	e004      	b.n	800b360 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	429a      	cmp	r2, r3
 800b368:	d903      	bls.n	800b372 <pvPortMalloc+0xa6>
 800b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1f1      	bne.n	800b356 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b372:	4b35      	ldr	r3, [pc, #212]	; (800b448 <pvPortMalloc+0x17c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b378:	429a      	cmp	r2, r3
 800b37a:	d04c      	beq.n	800b416 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b37c:	6a3b      	ldr	r3, [r7, #32]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2208      	movs	r2, #8
 800b382:	4413      	add	r3, r2
 800b384:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	1ad2      	subs	r2, r2, r3
 800b396:	2308      	movs	r3, #8
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d920      	bls.n	800b3e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	f003 0307 	and.w	r3, r3, #7
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00b      	beq.n	800b3c8 <pvPortMalloc+0xfc>
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	b672      	cpsid	i
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	b662      	cpsie	i
 800b3c4:	613b      	str	r3, [r7, #16]
 800b3c6:	e7fe      	b.n	800b3c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	1ad2      	subs	r2, r2, r3
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3da:	69b8      	ldr	r0, [r7, #24]
 800b3dc:	f000 f8fc 	bl	800b5d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3e0:	4b1b      	ldr	r3, [pc, #108]	; (800b450 <pvPortMalloc+0x184>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	4a19      	ldr	r2, [pc, #100]	; (800b450 <pvPortMalloc+0x184>)
 800b3ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3ee:	4b18      	ldr	r3, [pc, #96]	; (800b450 <pvPortMalloc+0x184>)
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	4b19      	ldr	r3, [pc, #100]	; (800b458 <pvPortMalloc+0x18c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d203      	bcs.n	800b402 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3fa:	4b15      	ldr	r3, [pc, #84]	; (800b450 <pvPortMalloc+0x184>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a16      	ldr	r2, [pc, #88]	; (800b458 <pvPortMalloc+0x18c>)
 800b400:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	685a      	ldr	r2, [r3, #4]
 800b406:	4b11      	ldr	r3, [pc, #68]	; (800b44c <pvPortMalloc+0x180>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b416:	f7fe fc25 	bl	8009c64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	f003 0307 	and.w	r3, r3, #7
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00b      	beq.n	800b43c <pvPortMalloc+0x170>
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	b672      	cpsid	i
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	b662      	cpsie	i
 800b438:	60fb      	str	r3, [r7, #12]
 800b43a:	e7fe      	b.n	800b43a <pvPortMalloc+0x16e>
	return pvReturn;
 800b43c:	69fb      	ldr	r3, [r7, #28]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3728      	adds	r7, #40	; 0x28
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	200049c8 	.word	0x200049c8
 800b44c:	200049d4 	.word	0x200049d4
 800b450:	200049cc 	.word	0x200049cc
 800b454:	200049c0 	.word	0x200049c0
 800b458:	200049d0 	.word	0x200049d0

0800b45c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d04a      	beq.n	800b504 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b46e:	2308      	movs	r3, #8
 800b470:	425b      	negs	r3, r3
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	4413      	add	r3, r2
 800b476:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	4b22      	ldr	r3, [pc, #136]	; (800b50c <vPortFree+0xb0>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4013      	ands	r3, r2
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <vPortFree+0x46>
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	b672      	cpsid	i
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	b662      	cpsie	i
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	e7fe      	b.n	800b4a0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00b      	beq.n	800b4c2 <vPortFree+0x66>
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	b672      	cpsid	i
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	b662      	cpsie	i
 800b4be:	60bb      	str	r3, [r7, #8]
 800b4c0:	e7fe      	b.n	800b4c0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	685a      	ldr	r2, [r3, #4]
 800b4c6:	4b11      	ldr	r3, [pc, #68]	; (800b50c <vPortFree+0xb0>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d019      	beq.n	800b504 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d115      	bne.n	800b504 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	4b0b      	ldr	r3, [pc, #44]	; (800b50c <vPortFree+0xb0>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	43db      	mvns	r3, r3
 800b4e2:	401a      	ands	r2, r3
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4e8:	f7fe fbae 	bl	8009c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	685a      	ldr	r2, [r3, #4]
 800b4f0:	4b07      	ldr	r3, [pc, #28]	; (800b510 <vPortFree+0xb4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	4a06      	ldr	r2, [pc, #24]	; (800b510 <vPortFree+0xb4>)
 800b4f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4fa:	6938      	ldr	r0, [r7, #16]
 800b4fc:	f000 f86c 	bl	800b5d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b500:	f7fe fbb0 	bl	8009c64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b504:	bf00      	nop
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	200049d4 	.word	0x200049d4
 800b510:	200049cc 	.word	0x200049cc

0800b514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b51a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b51e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b520:	4b27      	ldr	r3, [pc, #156]	; (800b5c0 <prvHeapInit+0xac>)
 800b522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00c      	beq.n	800b548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3307      	adds	r3, #7
 800b532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 0307 	bic.w	r3, r3, #7
 800b53a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	4a1f      	ldr	r2, [pc, #124]	; (800b5c0 <prvHeapInit+0xac>)
 800b544:	4413      	add	r3, r2
 800b546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b54c:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <prvHeapInit+0xb0>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b552:	4b1c      	ldr	r3, [pc, #112]	; (800b5c4 <prvHeapInit+0xb0>)
 800b554:	2200      	movs	r2, #0
 800b556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	4413      	add	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b560:	2208      	movs	r2, #8
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f023 0307 	bic.w	r3, r3, #7
 800b56e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4a15      	ldr	r2, [pc, #84]	; (800b5c8 <prvHeapInit+0xb4>)
 800b574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b576:	4b14      	ldr	r3, [pc, #80]	; (800b5c8 <prvHeapInit+0xb4>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2200      	movs	r2, #0
 800b57c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b57e:	4b12      	ldr	r3, [pc, #72]	; (800b5c8 <prvHeapInit+0xb4>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	1ad2      	subs	r2, r2, r3
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b594:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <prvHeapInit+0xb4>)
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	4a0a      	ldr	r2, [pc, #40]	; (800b5cc <prvHeapInit+0xb8>)
 800b5a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	4a09      	ldr	r2, [pc, #36]	; (800b5d0 <prvHeapInit+0xbc>)
 800b5aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5ac:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <prvHeapInit+0xc0>)
 800b5ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5b2:	601a      	str	r2, [r3, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	20000dc0 	.word	0x20000dc0
 800b5c4:	200049c0 	.word	0x200049c0
 800b5c8:	200049c8 	.word	0x200049c8
 800b5cc:	200049d0 	.word	0x200049d0
 800b5d0:	200049cc 	.word	0x200049cc
 800b5d4:	200049d4 	.word	0x200049d4

0800b5d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5e0:	4b28      	ldr	r3, [pc, #160]	; (800b684 <prvInsertBlockIntoFreeList+0xac>)
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	e002      	b.n	800b5ec <prvInsertBlockIntoFreeList+0x14>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d8f7      	bhi.n	800b5e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	4413      	add	r3, r2
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d108      	bne.n	800b61a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	441a      	add	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	441a      	add	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d118      	bne.n	800b660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	4b15      	ldr	r3, [pc, #84]	; (800b688 <prvInsertBlockIntoFreeList+0xb0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d00d      	beq.n	800b656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	441a      	add	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	e008      	b.n	800b668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b656:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <prvInsertBlockIntoFreeList+0xb0>)
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	e003      	b.n	800b668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d002      	beq.n	800b676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b676:	bf00      	nop
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	200049c0 	.word	0x200049c0
 800b688:	200049c8 	.word	0x200049c8

0800b68c <__errno>:
 800b68c:	4b01      	ldr	r3, [pc, #4]	; (800b694 <__errno+0x8>)
 800b68e:	6818      	ldr	r0, [r3, #0]
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20000040 	.word	0x20000040

0800b698 <__libc_init_array>:
 800b698:	b570      	push	{r4, r5, r6, lr}
 800b69a:	4e0d      	ldr	r6, [pc, #52]	; (800b6d0 <__libc_init_array+0x38>)
 800b69c:	4c0d      	ldr	r4, [pc, #52]	; (800b6d4 <__libc_init_array+0x3c>)
 800b69e:	1ba4      	subs	r4, r4, r6
 800b6a0:	10a4      	asrs	r4, r4, #2
 800b6a2:	2500      	movs	r5, #0
 800b6a4:	42a5      	cmp	r5, r4
 800b6a6:	d109      	bne.n	800b6bc <__libc_init_array+0x24>
 800b6a8:	4e0b      	ldr	r6, [pc, #44]	; (800b6d8 <__libc_init_array+0x40>)
 800b6aa:	4c0c      	ldr	r4, [pc, #48]	; (800b6dc <__libc_init_array+0x44>)
 800b6ac:	f000 fc30 	bl	800bf10 <_init>
 800b6b0:	1ba4      	subs	r4, r4, r6
 800b6b2:	10a4      	asrs	r4, r4, #2
 800b6b4:	2500      	movs	r5, #0
 800b6b6:	42a5      	cmp	r5, r4
 800b6b8:	d105      	bne.n	800b6c6 <__libc_init_array+0x2e>
 800b6ba:	bd70      	pop	{r4, r5, r6, pc}
 800b6bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6c0:	4798      	blx	r3
 800b6c2:	3501      	adds	r5, #1
 800b6c4:	e7ee      	b.n	800b6a4 <__libc_init_array+0xc>
 800b6c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6ca:	4798      	blx	r3
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	e7f2      	b.n	800b6b6 <__libc_init_array+0x1e>
 800b6d0:	0800c23c 	.word	0x0800c23c
 800b6d4:	0800c23c 	.word	0x0800c23c
 800b6d8:	0800c23c 	.word	0x0800c23c
 800b6dc:	0800c240 	.word	0x0800c240

0800b6e0 <malloc>:
 800b6e0:	4b02      	ldr	r3, [pc, #8]	; (800b6ec <malloc+0xc>)
 800b6e2:	4601      	mov	r1, r0
 800b6e4:	6818      	ldr	r0, [r3, #0]
 800b6e6:	f000 b865 	b.w	800b7b4 <_malloc_r>
 800b6ea:	bf00      	nop
 800b6ec:	20000040 	.word	0x20000040

0800b6f0 <memcpy>:
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	1e43      	subs	r3, r0, #1
 800b6f4:	440a      	add	r2, r1
 800b6f6:	4291      	cmp	r1, r2
 800b6f8:	d100      	bne.n	800b6fc <memcpy+0xc>
 800b6fa:	bd10      	pop	{r4, pc}
 800b6fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b700:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b704:	e7f7      	b.n	800b6f6 <memcpy+0x6>

0800b706 <memset>:
 800b706:	4402      	add	r2, r0
 800b708:	4603      	mov	r3, r0
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d100      	bne.n	800b710 <memset+0xa>
 800b70e:	4770      	bx	lr
 800b710:	f803 1b01 	strb.w	r1, [r3], #1
 800b714:	e7f9      	b.n	800b70a <memset+0x4>
	...

0800b718 <_free_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4605      	mov	r5, r0
 800b71c:	2900      	cmp	r1, #0
 800b71e:	d045      	beq.n	800b7ac <_free_r+0x94>
 800b720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b724:	1f0c      	subs	r4, r1, #4
 800b726:	2b00      	cmp	r3, #0
 800b728:	bfb8      	it	lt
 800b72a:	18e4      	addlt	r4, r4, r3
 800b72c:	f000 f8cc 	bl	800b8c8 <__malloc_lock>
 800b730:	4a1f      	ldr	r2, [pc, #124]	; (800b7b0 <_free_r+0x98>)
 800b732:	6813      	ldr	r3, [r2, #0]
 800b734:	4610      	mov	r0, r2
 800b736:	b933      	cbnz	r3, 800b746 <_free_r+0x2e>
 800b738:	6063      	str	r3, [r4, #4]
 800b73a:	6014      	str	r4, [r2, #0]
 800b73c:	4628      	mov	r0, r5
 800b73e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b742:	f000 b8c2 	b.w	800b8ca <__malloc_unlock>
 800b746:	42a3      	cmp	r3, r4
 800b748:	d90c      	bls.n	800b764 <_free_r+0x4c>
 800b74a:	6821      	ldr	r1, [r4, #0]
 800b74c:	1862      	adds	r2, r4, r1
 800b74e:	4293      	cmp	r3, r2
 800b750:	bf04      	itt	eq
 800b752:	681a      	ldreq	r2, [r3, #0]
 800b754:	685b      	ldreq	r3, [r3, #4]
 800b756:	6063      	str	r3, [r4, #4]
 800b758:	bf04      	itt	eq
 800b75a:	1852      	addeq	r2, r2, r1
 800b75c:	6022      	streq	r2, [r4, #0]
 800b75e:	6004      	str	r4, [r0, #0]
 800b760:	e7ec      	b.n	800b73c <_free_r+0x24>
 800b762:	4613      	mov	r3, r2
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	b10a      	cbz	r2, 800b76c <_free_r+0x54>
 800b768:	42a2      	cmp	r2, r4
 800b76a:	d9fa      	bls.n	800b762 <_free_r+0x4a>
 800b76c:	6819      	ldr	r1, [r3, #0]
 800b76e:	1858      	adds	r0, r3, r1
 800b770:	42a0      	cmp	r0, r4
 800b772:	d10b      	bne.n	800b78c <_free_r+0x74>
 800b774:	6820      	ldr	r0, [r4, #0]
 800b776:	4401      	add	r1, r0
 800b778:	1858      	adds	r0, r3, r1
 800b77a:	4282      	cmp	r2, r0
 800b77c:	6019      	str	r1, [r3, #0]
 800b77e:	d1dd      	bne.n	800b73c <_free_r+0x24>
 800b780:	6810      	ldr	r0, [r2, #0]
 800b782:	6852      	ldr	r2, [r2, #4]
 800b784:	605a      	str	r2, [r3, #4]
 800b786:	4401      	add	r1, r0
 800b788:	6019      	str	r1, [r3, #0]
 800b78a:	e7d7      	b.n	800b73c <_free_r+0x24>
 800b78c:	d902      	bls.n	800b794 <_free_r+0x7c>
 800b78e:	230c      	movs	r3, #12
 800b790:	602b      	str	r3, [r5, #0]
 800b792:	e7d3      	b.n	800b73c <_free_r+0x24>
 800b794:	6820      	ldr	r0, [r4, #0]
 800b796:	1821      	adds	r1, r4, r0
 800b798:	428a      	cmp	r2, r1
 800b79a:	bf04      	itt	eq
 800b79c:	6811      	ldreq	r1, [r2, #0]
 800b79e:	6852      	ldreq	r2, [r2, #4]
 800b7a0:	6062      	str	r2, [r4, #4]
 800b7a2:	bf04      	itt	eq
 800b7a4:	1809      	addeq	r1, r1, r0
 800b7a6:	6021      	streq	r1, [r4, #0]
 800b7a8:	605c      	str	r4, [r3, #4]
 800b7aa:	e7c7      	b.n	800b73c <_free_r+0x24>
 800b7ac:	bd38      	pop	{r3, r4, r5, pc}
 800b7ae:	bf00      	nop
 800b7b0:	200049d8 	.word	0x200049d8

0800b7b4 <_malloc_r>:
 800b7b4:	b570      	push	{r4, r5, r6, lr}
 800b7b6:	1ccd      	adds	r5, r1, #3
 800b7b8:	f025 0503 	bic.w	r5, r5, #3
 800b7bc:	3508      	adds	r5, #8
 800b7be:	2d0c      	cmp	r5, #12
 800b7c0:	bf38      	it	cc
 800b7c2:	250c      	movcc	r5, #12
 800b7c4:	2d00      	cmp	r5, #0
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	db01      	blt.n	800b7ce <_malloc_r+0x1a>
 800b7ca:	42a9      	cmp	r1, r5
 800b7cc:	d903      	bls.n	800b7d6 <_malloc_r+0x22>
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	6033      	str	r3, [r6, #0]
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	bd70      	pop	{r4, r5, r6, pc}
 800b7d6:	f000 f877 	bl	800b8c8 <__malloc_lock>
 800b7da:	4a21      	ldr	r2, [pc, #132]	; (800b860 <_malloc_r+0xac>)
 800b7dc:	6814      	ldr	r4, [r2, #0]
 800b7de:	4621      	mov	r1, r4
 800b7e0:	b991      	cbnz	r1, 800b808 <_malloc_r+0x54>
 800b7e2:	4c20      	ldr	r4, [pc, #128]	; (800b864 <_malloc_r+0xb0>)
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	b91b      	cbnz	r3, 800b7f0 <_malloc_r+0x3c>
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f000 f83d 	bl	800b868 <_sbrk_r>
 800b7ee:	6020      	str	r0, [r4, #0]
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f000 f838 	bl	800b868 <_sbrk_r>
 800b7f8:	1c43      	adds	r3, r0, #1
 800b7fa:	d124      	bne.n	800b846 <_malloc_r+0x92>
 800b7fc:	230c      	movs	r3, #12
 800b7fe:	6033      	str	r3, [r6, #0]
 800b800:	4630      	mov	r0, r6
 800b802:	f000 f862 	bl	800b8ca <__malloc_unlock>
 800b806:	e7e4      	b.n	800b7d2 <_malloc_r+0x1e>
 800b808:	680b      	ldr	r3, [r1, #0]
 800b80a:	1b5b      	subs	r3, r3, r5
 800b80c:	d418      	bmi.n	800b840 <_malloc_r+0x8c>
 800b80e:	2b0b      	cmp	r3, #11
 800b810:	d90f      	bls.n	800b832 <_malloc_r+0x7e>
 800b812:	600b      	str	r3, [r1, #0]
 800b814:	50cd      	str	r5, [r1, r3]
 800b816:	18cc      	adds	r4, r1, r3
 800b818:	4630      	mov	r0, r6
 800b81a:	f000 f856 	bl	800b8ca <__malloc_unlock>
 800b81e:	f104 000b 	add.w	r0, r4, #11
 800b822:	1d23      	adds	r3, r4, #4
 800b824:	f020 0007 	bic.w	r0, r0, #7
 800b828:	1ac3      	subs	r3, r0, r3
 800b82a:	d0d3      	beq.n	800b7d4 <_malloc_r+0x20>
 800b82c:	425a      	negs	r2, r3
 800b82e:	50e2      	str	r2, [r4, r3]
 800b830:	e7d0      	b.n	800b7d4 <_malloc_r+0x20>
 800b832:	428c      	cmp	r4, r1
 800b834:	684b      	ldr	r3, [r1, #4]
 800b836:	bf16      	itet	ne
 800b838:	6063      	strne	r3, [r4, #4]
 800b83a:	6013      	streq	r3, [r2, #0]
 800b83c:	460c      	movne	r4, r1
 800b83e:	e7eb      	b.n	800b818 <_malloc_r+0x64>
 800b840:	460c      	mov	r4, r1
 800b842:	6849      	ldr	r1, [r1, #4]
 800b844:	e7cc      	b.n	800b7e0 <_malloc_r+0x2c>
 800b846:	1cc4      	adds	r4, r0, #3
 800b848:	f024 0403 	bic.w	r4, r4, #3
 800b84c:	42a0      	cmp	r0, r4
 800b84e:	d005      	beq.n	800b85c <_malloc_r+0xa8>
 800b850:	1a21      	subs	r1, r4, r0
 800b852:	4630      	mov	r0, r6
 800b854:	f000 f808 	bl	800b868 <_sbrk_r>
 800b858:	3001      	adds	r0, #1
 800b85a:	d0cf      	beq.n	800b7fc <_malloc_r+0x48>
 800b85c:	6025      	str	r5, [r4, #0]
 800b85e:	e7db      	b.n	800b818 <_malloc_r+0x64>
 800b860:	200049d8 	.word	0x200049d8
 800b864:	200049dc 	.word	0x200049dc

0800b868 <_sbrk_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4c06      	ldr	r4, [pc, #24]	; (800b884 <_sbrk_r+0x1c>)
 800b86c:	2300      	movs	r3, #0
 800b86e:	4605      	mov	r5, r0
 800b870:	4608      	mov	r0, r1
 800b872:	6023      	str	r3, [r4, #0]
 800b874:	f7f8 f986 	bl	8003b84 <_sbrk>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d102      	bne.n	800b882 <_sbrk_r+0x1a>
 800b87c:	6823      	ldr	r3, [r4, #0]
 800b87e:	b103      	cbz	r3, 800b882 <_sbrk_r+0x1a>
 800b880:	602b      	str	r3, [r5, #0]
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	20004cfc 	.word	0x20004cfc

0800b888 <siprintf>:
 800b888:	b40e      	push	{r1, r2, r3}
 800b88a:	b500      	push	{lr}
 800b88c:	b09c      	sub	sp, #112	; 0x70
 800b88e:	ab1d      	add	r3, sp, #116	; 0x74
 800b890:	9002      	str	r0, [sp, #8]
 800b892:	9006      	str	r0, [sp, #24]
 800b894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b898:	4809      	ldr	r0, [pc, #36]	; (800b8c0 <siprintf+0x38>)
 800b89a:	9107      	str	r1, [sp, #28]
 800b89c:	9104      	str	r1, [sp, #16]
 800b89e:	4909      	ldr	r1, [pc, #36]	; (800b8c4 <siprintf+0x3c>)
 800b8a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a4:	9105      	str	r1, [sp, #20]
 800b8a6:	6800      	ldr	r0, [r0, #0]
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	a902      	add	r1, sp, #8
 800b8ac:	f000 f868 	bl	800b980 <_svfiprintf_r>
 800b8b0:	9b02      	ldr	r3, [sp, #8]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	701a      	strb	r2, [r3, #0]
 800b8b6:	b01c      	add	sp, #112	; 0x70
 800b8b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8bc:	b003      	add	sp, #12
 800b8be:	4770      	bx	lr
 800b8c0:	20000040 	.word	0x20000040
 800b8c4:	ffff0208 	.word	0xffff0208

0800b8c8 <__malloc_lock>:
 800b8c8:	4770      	bx	lr

0800b8ca <__malloc_unlock>:
 800b8ca:	4770      	bx	lr

0800b8cc <__ssputs_r>:
 800b8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d0:	688e      	ldr	r6, [r1, #8]
 800b8d2:	429e      	cmp	r6, r3
 800b8d4:	4682      	mov	sl, r0
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	4690      	mov	r8, r2
 800b8da:	4699      	mov	r9, r3
 800b8dc:	d837      	bhi.n	800b94e <__ssputs_r+0x82>
 800b8de:	898a      	ldrh	r2, [r1, #12]
 800b8e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8e4:	d031      	beq.n	800b94a <__ssputs_r+0x7e>
 800b8e6:	6825      	ldr	r5, [r4, #0]
 800b8e8:	6909      	ldr	r1, [r1, #16]
 800b8ea:	1a6f      	subs	r7, r5, r1
 800b8ec:	6965      	ldr	r5, [r4, #20]
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8f4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b8f8:	f109 0301 	add.w	r3, r9, #1
 800b8fc:	443b      	add	r3, r7
 800b8fe:	429d      	cmp	r5, r3
 800b900:	bf38      	it	cc
 800b902:	461d      	movcc	r5, r3
 800b904:	0553      	lsls	r3, r2, #21
 800b906:	d530      	bpl.n	800b96a <__ssputs_r+0x9e>
 800b908:	4629      	mov	r1, r5
 800b90a:	f7ff ff53 	bl	800b7b4 <_malloc_r>
 800b90e:	4606      	mov	r6, r0
 800b910:	b950      	cbnz	r0, 800b928 <__ssputs_r+0x5c>
 800b912:	230c      	movs	r3, #12
 800b914:	f8ca 3000 	str.w	r3, [sl]
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b91e:	81a3      	strh	r3, [r4, #12]
 800b920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b928:	463a      	mov	r2, r7
 800b92a:	6921      	ldr	r1, [r4, #16]
 800b92c:	f7ff fee0 	bl	800b6f0 <memcpy>
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	6126      	str	r6, [r4, #16]
 800b93e:	6165      	str	r5, [r4, #20]
 800b940:	443e      	add	r6, r7
 800b942:	1bed      	subs	r5, r5, r7
 800b944:	6026      	str	r6, [r4, #0]
 800b946:	60a5      	str	r5, [r4, #8]
 800b948:	464e      	mov	r6, r9
 800b94a:	454e      	cmp	r6, r9
 800b94c:	d900      	bls.n	800b950 <__ssputs_r+0x84>
 800b94e:	464e      	mov	r6, r9
 800b950:	4632      	mov	r2, r6
 800b952:	4641      	mov	r1, r8
 800b954:	6820      	ldr	r0, [r4, #0]
 800b956:	f000 fa93 	bl	800be80 <memmove>
 800b95a:	68a3      	ldr	r3, [r4, #8]
 800b95c:	1b9b      	subs	r3, r3, r6
 800b95e:	60a3      	str	r3, [r4, #8]
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	441e      	add	r6, r3
 800b964:	6026      	str	r6, [r4, #0]
 800b966:	2000      	movs	r0, #0
 800b968:	e7dc      	b.n	800b924 <__ssputs_r+0x58>
 800b96a:	462a      	mov	r2, r5
 800b96c:	f000 faa1 	bl	800beb2 <_realloc_r>
 800b970:	4606      	mov	r6, r0
 800b972:	2800      	cmp	r0, #0
 800b974:	d1e2      	bne.n	800b93c <__ssputs_r+0x70>
 800b976:	6921      	ldr	r1, [r4, #16]
 800b978:	4650      	mov	r0, sl
 800b97a:	f7ff fecd 	bl	800b718 <_free_r>
 800b97e:	e7c8      	b.n	800b912 <__ssputs_r+0x46>

0800b980 <_svfiprintf_r>:
 800b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	461d      	mov	r5, r3
 800b986:	898b      	ldrh	r3, [r1, #12]
 800b988:	061f      	lsls	r7, r3, #24
 800b98a:	b09d      	sub	sp, #116	; 0x74
 800b98c:	4680      	mov	r8, r0
 800b98e:	460c      	mov	r4, r1
 800b990:	4616      	mov	r6, r2
 800b992:	d50f      	bpl.n	800b9b4 <_svfiprintf_r+0x34>
 800b994:	690b      	ldr	r3, [r1, #16]
 800b996:	b96b      	cbnz	r3, 800b9b4 <_svfiprintf_r+0x34>
 800b998:	2140      	movs	r1, #64	; 0x40
 800b99a:	f7ff ff0b 	bl	800b7b4 <_malloc_r>
 800b99e:	6020      	str	r0, [r4, #0]
 800b9a0:	6120      	str	r0, [r4, #16]
 800b9a2:	b928      	cbnz	r0, 800b9b0 <_svfiprintf_r+0x30>
 800b9a4:	230c      	movs	r3, #12
 800b9a6:	f8c8 3000 	str.w	r3, [r8]
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9ae:	e0c8      	b.n	800bb42 <_svfiprintf_r+0x1c2>
 800b9b0:	2340      	movs	r3, #64	; 0x40
 800b9b2:	6163      	str	r3, [r4, #20]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b8:	2320      	movs	r3, #32
 800b9ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9be:	2330      	movs	r3, #48	; 0x30
 800b9c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9c4:	9503      	str	r5, [sp, #12]
 800b9c6:	f04f 0b01 	mov.w	fp, #1
 800b9ca:	4637      	mov	r7, r6
 800b9cc:	463d      	mov	r5, r7
 800b9ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b9d2:	b10b      	cbz	r3, 800b9d8 <_svfiprintf_r+0x58>
 800b9d4:	2b25      	cmp	r3, #37	; 0x25
 800b9d6:	d13e      	bne.n	800ba56 <_svfiprintf_r+0xd6>
 800b9d8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b9dc:	d00b      	beq.n	800b9f6 <_svfiprintf_r+0x76>
 800b9de:	4653      	mov	r3, sl
 800b9e0:	4632      	mov	r2, r6
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	f7ff ff71 	bl	800b8cc <__ssputs_r>
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	f000 80a4 	beq.w	800bb38 <_svfiprintf_r+0x1b8>
 800b9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f2:	4453      	add	r3, sl
 800b9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f6:	783b      	ldrb	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 809d 	beq.w	800bb38 <_svfiprintf_r+0x1b8>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	9307      	str	r3, [sp, #28]
 800ba0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba10:	931a      	str	r3, [sp, #104]	; 0x68
 800ba12:	462f      	mov	r7, r5
 800ba14:	2205      	movs	r2, #5
 800ba16:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ba1a:	4850      	ldr	r0, [pc, #320]	; (800bb5c <_svfiprintf_r+0x1dc>)
 800ba1c:	f7f4 fc18 	bl	8000250 <memchr>
 800ba20:	9b04      	ldr	r3, [sp, #16]
 800ba22:	b9d0      	cbnz	r0, 800ba5a <_svfiprintf_r+0xda>
 800ba24:	06d9      	lsls	r1, r3, #27
 800ba26:	bf44      	itt	mi
 800ba28:	2220      	movmi	r2, #32
 800ba2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ba2e:	071a      	lsls	r2, r3, #28
 800ba30:	bf44      	itt	mi
 800ba32:	222b      	movmi	r2, #43	; 0x2b
 800ba34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ba38:	782a      	ldrb	r2, [r5, #0]
 800ba3a:	2a2a      	cmp	r2, #42	; 0x2a
 800ba3c:	d015      	beq.n	800ba6a <_svfiprintf_r+0xea>
 800ba3e:	9a07      	ldr	r2, [sp, #28]
 800ba40:	462f      	mov	r7, r5
 800ba42:	2000      	movs	r0, #0
 800ba44:	250a      	movs	r5, #10
 800ba46:	4639      	mov	r1, r7
 800ba48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba4c:	3b30      	subs	r3, #48	; 0x30
 800ba4e:	2b09      	cmp	r3, #9
 800ba50:	d94d      	bls.n	800baee <_svfiprintf_r+0x16e>
 800ba52:	b1b8      	cbz	r0, 800ba84 <_svfiprintf_r+0x104>
 800ba54:	e00f      	b.n	800ba76 <_svfiprintf_r+0xf6>
 800ba56:	462f      	mov	r7, r5
 800ba58:	e7b8      	b.n	800b9cc <_svfiprintf_r+0x4c>
 800ba5a:	4a40      	ldr	r2, [pc, #256]	; (800bb5c <_svfiprintf_r+0x1dc>)
 800ba5c:	1a80      	subs	r0, r0, r2
 800ba5e:	fa0b f000 	lsl.w	r0, fp, r0
 800ba62:	4318      	orrs	r0, r3
 800ba64:	9004      	str	r0, [sp, #16]
 800ba66:	463d      	mov	r5, r7
 800ba68:	e7d3      	b.n	800ba12 <_svfiprintf_r+0x92>
 800ba6a:	9a03      	ldr	r2, [sp, #12]
 800ba6c:	1d11      	adds	r1, r2, #4
 800ba6e:	6812      	ldr	r2, [r2, #0]
 800ba70:	9103      	str	r1, [sp, #12]
 800ba72:	2a00      	cmp	r2, #0
 800ba74:	db01      	blt.n	800ba7a <_svfiprintf_r+0xfa>
 800ba76:	9207      	str	r2, [sp, #28]
 800ba78:	e004      	b.n	800ba84 <_svfiprintf_r+0x104>
 800ba7a:	4252      	negs	r2, r2
 800ba7c:	f043 0302 	orr.w	r3, r3, #2
 800ba80:	9207      	str	r2, [sp, #28]
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	783b      	ldrb	r3, [r7, #0]
 800ba86:	2b2e      	cmp	r3, #46	; 0x2e
 800ba88:	d10c      	bne.n	800baa4 <_svfiprintf_r+0x124>
 800ba8a:	787b      	ldrb	r3, [r7, #1]
 800ba8c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba8e:	d133      	bne.n	800baf8 <_svfiprintf_r+0x178>
 800ba90:	9b03      	ldr	r3, [sp, #12]
 800ba92:	1d1a      	adds	r2, r3, #4
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	9203      	str	r2, [sp, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	bfb8      	it	lt
 800ba9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800baa0:	3702      	adds	r7, #2
 800baa2:	9305      	str	r3, [sp, #20]
 800baa4:	4d2e      	ldr	r5, [pc, #184]	; (800bb60 <_svfiprintf_r+0x1e0>)
 800baa6:	7839      	ldrb	r1, [r7, #0]
 800baa8:	2203      	movs	r2, #3
 800baaa:	4628      	mov	r0, r5
 800baac:	f7f4 fbd0 	bl	8000250 <memchr>
 800bab0:	b138      	cbz	r0, 800bac2 <_svfiprintf_r+0x142>
 800bab2:	2340      	movs	r3, #64	; 0x40
 800bab4:	1b40      	subs	r0, r0, r5
 800bab6:	fa03 f000 	lsl.w	r0, r3, r0
 800baba:	9b04      	ldr	r3, [sp, #16]
 800babc:	4303      	orrs	r3, r0
 800babe:	3701      	adds	r7, #1
 800bac0:	9304      	str	r3, [sp, #16]
 800bac2:	7839      	ldrb	r1, [r7, #0]
 800bac4:	4827      	ldr	r0, [pc, #156]	; (800bb64 <_svfiprintf_r+0x1e4>)
 800bac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baca:	2206      	movs	r2, #6
 800bacc:	1c7e      	adds	r6, r7, #1
 800bace:	f7f4 fbbf 	bl	8000250 <memchr>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d038      	beq.n	800bb48 <_svfiprintf_r+0x1c8>
 800bad6:	4b24      	ldr	r3, [pc, #144]	; (800bb68 <_svfiprintf_r+0x1e8>)
 800bad8:	bb13      	cbnz	r3, 800bb20 <_svfiprintf_r+0x1a0>
 800bada:	9b03      	ldr	r3, [sp, #12]
 800badc:	3307      	adds	r3, #7
 800bade:	f023 0307 	bic.w	r3, r3, #7
 800bae2:	3308      	adds	r3, #8
 800bae4:	9303      	str	r3, [sp, #12]
 800bae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae8:	444b      	add	r3, r9
 800baea:	9309      	str	r3, [sp, #36]	; 0x24
 800baec:	e76d      	b.n	800b9ca <_svfiprintf_r+0x4a>
 800baee:	fb05 3202 	mla	r2, r5, r2, r3
 800baf2:	2001      	movs	r0, #1
 800baf4:	460f      	mov	r7, r1
 800baf6:	e7a6      	b.n	800ba46 <_svfiprintf_r+0xc6>
 800baf8:	2300      	movs	r3, #0
 800bafa:	3701      	adds	r7, #1
 800bafc:	9305      	str	r3, [sp, #20]
 800bafe:	4619      	mov	r1, r3
 800bb00:	250a      	movs	r5, #10
 800bb02:	4638      	mov	r0, r7
 800bb04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb08:	3a30      	subs	r2, #48	; 0x30
 800bb0a:	2a09      	cmp	r2, #9
 800bb0c:	d903      	bls.n	800bb16 <_svfiprintf_r+0x196>
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d0c8      	beq.n	800baa4 <_svfiprintf_r+0x124>
 800bb12:	9105      	str	r1, [sp, #20]
 800bb14:	e7c6      	b.n	800baa4 <_svfiprintf_r+0x124>
 800bb16:	fb05 2101 	mla	r1, r5, r1, r2
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	e7f0      	b.n	800bb02 <_svfiprintf_r+0x182>
 800bb20:	ab03      	add	r3, sp, #12
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	4622      	mov	r2, r4
 800bb26:	4b11      	ldr	r3, [pc, #68]	; (800bb6c <_svfiprintf_r+0x1ec>)
 800bb28:	a904      	add	r1, sp, #16
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	f3af 8000 	nop.w
 800bb30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bb34:	4681      	mov	r9, r0
 800bb36:	d1d6      	bne.n	800bae6 <_svfiprintf_r+0x166>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	065b      	lsls	r3, r3, #25
 800bb3c:	f53f af35 	bmi.w	800b9aa <_svfiprintf_r+0x2a>
 800bb40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb42:	b01d      	add	sp, #116	; 0x74
 800bb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb48:	ab03      	add	r3, sp, #12
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	4622      	mov	r2, r4
 800bb4e:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <_svfiprintf_r+0x1ec>)
 800bb50:	a904      	add	r1, sp, #16
 800bb52:	4640      	mov	r0, r8
 800bb54:	f000 f882 	bl	800bc5c <_printf_i>
 800bb58:	e7ea      	b.n	800bb30 <_svfiprintf_r+0x1b0>
 800bb5a:	bf00      	nop
 800bb5c:	0800c200 	.word	0x0800c200
 800bb60:	0800c206 	.word	0x0800c206
 800bb64:	0800c20a 	.word	0x0800c20a
 800bb68:	00000000 	.word	0x00000000
 800bb6c:	0800b8cd 	.word	0x0800b8cd

0800bb70 <_printf_common>:
 800bb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb74:	4691      	mov	r9, r2
 800bb76:	461f      	mov	r7, r3
 800bb78:	688a      	ldr	r2, [r1, #8]
 800bb7a:	690b      	ldr	r3, [r1, #16]
 800bb7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb80:	4293      	cmp	r3, r2
 800bb82:	bfb8      	it	lt
 800bb84:	4613      	movlt	r3, r2
 800bb86:	f8c9 3000 	str.w	r3, [r9]
 800bb8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460c      	mov	r4, r1
 800bb92:	b112      	cbz	r2, 800bb9a <_printf_common+0x2a>
 800bb94:	3301      	adds	r3, #1
 800bb96:	f8c9 3000 	str.w	r3, [r9]
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	0699      	lsls	r1, r3, #26
 800bb9e:	bf42      	ittt	mi
 800bba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bba4:	3302      	addmi	r3, #2
 800bba6:	f8c9 3000 	strmi.w	r3, [r9]
 800bbaa:	6825      	ldr	r5, [r4, #0]
 800bbac:	f015 0506 	ands.w	r5, r5, #6
 800bbb0:	d107      	bne.n	800bbc2 <_printf_common+0x52>
 800bbb2:	f104 0a19 	add.w	sl, r4, #25
 800bbb6:	68e3      	ldr	r3, [r4, #12]
 800bbb8:	f8d9 2000 	ldr.w	r2, [r9]
 800bbbc:	1a9b      	subs	r3, r3, r2
 800bbbe:	42ab      	cmp	r3, r5
 800bbc0:	dc28      	bgt.n	800bc14 <_printf_common+0xa4>
 800bbc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bbc6:	6822      	ldr	r2, [r4, #0]
 800bbc8:	3300      	adds	r3, #0
 800bbca:	bf18      	it	ne
 800bbcc:	2301      	movne	r3, #1
 800bbce:	0692      	lsls	r2, r2, #26
 800bbd0:	d42d      	bmi.n	800bc2e <_printf_common+0xbe>
 800bbd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	4630      	mov	r0, r6
 800bbda:	47c0      	blx	r8
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d020      	beq.n	800bc22 <_printf_common+0xb2>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	68e5      	ldr	r5, [r4, #12]
 800bbe4:	f8d9 2000 	ldr.w	r2, [r9]
 800bbe8:	f003 0306 	and.w	r3, r3, #6
 800bbec:	2b04      	cmp	r3, #4
 800bbee:	bf08      	it	eq
 800bbf0:	1aad      	subeq	r5, r5, r2
 800bbf2:	68a3      	ldr	r3, [r4, #8]
 800bbf4:	6922      	ldr	r2, [r4, #16]
 800bbf6:	bf0c      	ite	eq
 800bbf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbfc:	2500      	movne	r5, #0
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	bfc4      	itt	gt
 800bc02:	1a9b      	subgt	r3, r3, r2
 800bc04:	18ed      	addgt	r5, r5, r3
 800bc06:	f04f 0900 	mov.w	r9, #0
 800bc0a:	341a      	adds	r4, #26
 800bc0c:	454d      	cmp	r5, r9
 800bc0e:	d11a      	bne.n	800bc46 <_printf_common+0xd6>
 800bc10:	2000      	movs	r0, #0
 800bc12:	e008      	b.n	800bc26 <_printf_common+0xb6>
 800bc14:	2301      	movs	r3, #1
 800bc16:	4652      	mov	r2, sl
 800bc18:	4639      	mov	r1, r7
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	47c0      	blx	r8
 800bc1e:	3001      	adds	r0, #1
 800bc20:	d103      	bne.n	800bc2a <_printf_common+0xba>
 800bc22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc2a:	3501      	adds	r5, #1
 800bc2c:	e7c3      	b.n	800bbb6 <_printf_common+0x46>
 800bc2e:	18e1      	adds	r1, r4, r3
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	2030      	movs	r0, #48	; 0x30
 800bc34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc38:	4422      	add	r2, r4
 800bc3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc42:	3302      	adds	r3, #2
 800bc44:	e7c5      	b.n	800bbd2 <_printf_common+0x62>
 800bc46:	2301      	movs	r3, #1
 800bc48:	4622      	mov	r2, r4
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	47c0      	blx	r8
 800bc50:	3001      	adds	r0, #1
 800bc52:	d0e6      	beq.n	800bc22 <_printf_common+0xb2>
 800bc54:	f109 0901 	add.w	r9, r9, #1
 800bc58:	e7d8      	b.n	800bc0c <_printf_common+0x9c>
	...

0800bc5c <_printf_i>:
 800bc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bc64:	460c      	mov	r4, r1
 800bc66:	7e09      	ldrb	r1, [r1, #24]
 800bc68:	b085      	sub	sp, #20
 800bc6a:	296e      	cmp	r1, #110	; 0x6e
 800bc6c:	4617      	mov	r7, r2
 800bc6e:	4606      	mov	r6, r0
 800bc70:	4698      	mov	r8, r3
 800bc72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc74:	f000 80b3 	beq.w	800bdde <_printf_i+0x182>
 800bc78:	d822      	bhi.n	800bcc0 <_printf_i+0x64>
 800bc7a:	2963      	cmp	r1, #99	; 0x63
 800bc7c:	d036      	beq.n	800bcec <_printf_i+0x90>
 800bc7e:	d80a      	bhi.n	800bc96 <_printf_i+0x3a>
 800bc80:	2900      	cmp	r1, #0
 800bc82:	f000 80b9 	beq.w	800bdf8 <_printf_i+0x19c>
 800bc86:	2958      	cmp	r1, #88	; 0x58
 800bc88:	f000 8083 	beq.w	800bd92 <_printf_i+0x136>
 800bc8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bc94:	e032      	b.n	800bcfc <_printf_i+0xa0>
 800bc96:	2964      	cmp	r1, #100	; 0x64
 800bc98:	d001      	beq.n	800bc9e <_printf_i+0x42>
 800bc9a:	2969      	cmp	r1, #105	; 0x69
 800bc9c:	d1f6      	bne.n	800bc8c <_printf_i+0x30>
 800bc9e:	6820      	ldr	r0, [r4, #0]
 800bca0:	6813      	ldr	r3, [r2, #0]
 800bca2:	0605      	lsls	r5, r0, #24
 800bca4:	f103 0104 	add.w	r1, r3, #4
 800bca8:	d52a      	bpl.n	800bd00 <_printf_i+0xa4>
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6011      	str	r1, [r2, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	da03      	bge.n	800bcba <_printf_i+0x5e>
 800bcb2:	222d      	movs	r2, #45	; 0x2d
 800bcb4:	425b      	negs	r3, r3
 800bcb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bcba:	486f      	ldr	r0, [pc, #444]	; (800be78 <_printf_i+0x21c>)
 800bcbc:	220a      	movs	r2, #10
 800bcbe:	e039      	b.n	800bd34 <_printf_i+0xd8>
 800bcc0:	2973      	cmp	r1, #115	; 0x73
 800bcc2:	f000 809d 	beq.w	800be00 <_printf_i+0x1a4>
 800bcc6:	d808      	bhi.n	800bcda <_printf_i+0x7e>
 800bcc8:	296f      	cmp	r1, #111	; 0x6f
 800bcca:	d020      	beq.n	800bd0e <_printf_i+0xb2>
 800bccc:	2970      	cmp	r1, #112	; 0x70
 800bcce:	d1dd      	bne.n	800bc8c <_printf_i+0x30>
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	f043 0320 	orr.w	r3, r3, #32
 800bcd6:	6023      	str	r3, [r4, #0]
 800bcd8:	e003      	b.n	800bce2 <_printf_i+0x86>
 800bcda:	2975      	cmp	r1, #117	; 0x75
 800bcdc:	d017      	beq.n	800bd0e <_printf_i+0xb2>
 800bcde:	2978      	cmp	r1, #120	; 0x78
 800bce0:	d1d4      	bne.n	800bc8c <_printf_i+0x30>
 800bce2:	2378      	movs	r3, #120	; 0x78
 800bce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bce8:	4864      	ldr	r0, [pc, #400]	; (800be7c <_printf_i+0x220>)
 800bcea:	e055      	b.n	800bd98 <_printf_i+0x13c>
 800bcec:	6813      	ldr	r3, [r2, #0]
 800bcee:	1d19      	adds	r1, r3, #4
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6011      	str	r1, [r2, #0]
 800bcf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e08c      	b.n	800be1a <_printf_i+0x1be>
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	6011      	str	r1, [r2, #0]
 800bd04:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd08:	bf18      	it	ne
 800bd0a:	b21b      	sxthne	r3, r3
 800bd0c:	e7cf      	b.n	800bcae <_printf_i+0x52>
 800bd0e:	6813      	ldr	r3, [r2, #0]
 800bd10:	6825      	ldr	r5, [r4, #0]
 800bd12:	1d18      	adds	r0, r3, #4
 800bd14:	6010      	str	r0, [r2, #0]
 800bd16:	0628      	lsls	r0, r5, #24
 800bd18:	d501      	bpl.n	800bd1e <_printf_i+0xc2>
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	e002      	b.n	800bd24 <_printf_i+0xc8>
 800bd1e:	0668      	lsls	r0, r5, #25
 800bd20:	d5fb      	bpl.n	800bd1a <_printf_i+0xbe>
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	4854      	ldr	r0, [pc, #336]	; (800be78 <_printf_i+0x21c>)
 800bd26:	296f      	cmp	r1, #111	; 0x6f
 800bd28:	bf14      	ite	ne
 800bd2a:	220a      	movne	r2, #10
 800bd2c:	2208      	moveq	r2, #8
 800bd2e:	2100      	movs	r1, #0
 800bd30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd34:	6865      	ldr	r5, [r4, #4]
 800bd36:	60a5      	str	r5, [r4, #8]
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	f2c0 8095 	blt.w	800be68 <_printf_i+0x20c>
 800bd3e:	6821      	ldr	r1, [r4, #0]
 800bd40:	f021 0104 	bic.w	r1, r1, #4
 800bd44:	6021      	str	r1, [r4, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d13d      	bne.n	800bdc6 <_printf_i+0x16a>
 800bd4a:	2d00      	cmp	r5, #0
 800bd4c:	f040 808e 	bne.w	800be6c <_printf_i+0x210>
 800bd50:	4665      	mov	r5, ip
 800bd52:	2a08      	cmp	r2, #8
 800bd54:	d10b      	bne.n	800bd6e <_printf_i+0x112>
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	07db      	lsls	r3, r3, #31
 800bd5a:	d508      	bpl.n	800bd6e <_printf_i+0x112>
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	6862      	ldr	r2, [r4, #4]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	bfde      	ittt	le
 800bd64:	2330      	movle	r3, #48	; 0x30
 800bd66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bd6e:	ebac 0305 	sub.w	r3, ip, r5
 800bd72:	6123      	str	r3, [r4, #16]
 800bd74:	f8cd 8000 	str.w	r8, [sp]
 800bd78:	463b      	mov	r3, r7
 800bd7a:	aa03      	add	r2, sp, #12
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7ff fef6 	bl	800bb70 <_printf_common>
 800bd84:	3001      	adds	r0, #1
 800bd86:	d14d      	bne.n	800be24 <_printf_i+0x1c8>
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd8c:	b005      	add	sp, #20
 800bd8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd92:	4839      	ldr	r0, [pc, #228]	; (800be78 <_printf_i+0x21c>)
 800bd94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bd98:	6813      	ldr	r3, [r2, #0]
 800bd9a:	6821      	ldr	r1, [r4, #0]
 800bd9c:	1d1d      	adds	r5, r3, #4
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6015      	str	r5, [r2, #0]
 800bda2:	060a      	lsls	r2, r1, #24
 800bda4:	d50b      	bpl.n	800bdbe <_printf_i+0x162>
 800bda6:	07ca      	lsls	r2, r1, #31
 800bda8:	bf44      	itt	mi
 800bdaa:	f041 0120 	orrmi.w	r1, r1, #32
 800bdae:	6021      	strmi	r1, [r4, #0]
 800bdb0:	b91b      	cbnz	r3, 800bdba <_printf_i+0x15e>
 800bdb2:	6822      	ldr	r2, [r4, #0]
 800bdb4:	f022 0220 	bic.w	r2, r2, #32
 800bdb8:	6022      	str	r2, [r4, #0]
 800bdba:	2210      	movs	r2, #16
 800bdbc:	e7b7      	b.n	800bd2e <_printf_i+0xd2>
 800bdbe:	064d      	lsls	r5, r1, #25
 800bdc0:	bf48      	it	mi
 800bdc2:	b29b      	uxthmi	r3, r3
 800bdc4:	e7ef      	b.n	800bda6 <_printf_i+0x14a>
 800bdc6:	4665      	mov	r5, ip
 800bdc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdcc:	fb02 3311 	mls	r3, r2, r1, r3
 800bdd0:	5cc3      	ldrb	r3, [r0, r3]
 800bdd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	d1f5      	bne.n	800bdc8 <_printf_i+0x16c>
 800bddc:	e7b9      	b.n	800bd52 <_printf_i+0xf6>
 800bdde:	6813      	ldr	r3, [r2, #0]
 800bde0:	6825      	ldr	r5, [r4, #0]
 800bde2:	6961      	ldr	r1, [r4, #20]
 800bde4:	1d18      	adds	r0, r3, #4
 800bde6:	6010      	str	r0, [r2, #0]
 800bde8:	0628      	lsls	r0, r5, #24
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	d501      	bpl.n	800bdf2 <_printf_i+0x196>
 800bdee:	6019      	str	r1, [r3, #0]
 800bdf0:	e002      	b.n	800bdf8 <_printf_i+0x19c>
 800bdf2:	066a      	lsls	r2, r5, #25
 800bdf4:	d5fb      	bpl.n	800bdee <_printf_i+0x192>
 800bdf6:	8019      	strh	r1, [r3, #0]
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	6123      	str	r3, [r4, #16]
 800bdfc:	4665      	mov	r5, ip
 800bdfe:	e7b9      	b.n	800bd74 <_printf_i+0x118>
 800be00:	6813      	ldr	r3, [r2, #0]
 800be02:	1d19      	adds	r1, r3, #4
 800be04:	6011      	str	r1, [r2, #0]
 800be06:	681d      	ldr	r5, [r3, #0]
 800be08:	6862      	ldr	r2, [r4, #4]
 800be0a:	2100      	movs	r1, #0
 800be0c:	4628      	mov	r0, r5
 800be0e:	f7f4 fa1f 	bl	8000250 <memchr>
 800be12:	b108      	cbz	r0, 800be18 <_printf_i+0x1bc>
 800be14:	1b40      	subs	r0, r0, r5
 800be16:	6060      	str	r0, [r4, #4]
 800be18:	6863      	ldr	r3, [r4, #4]
 800be1a:	6123      	str	r3, [r4, #16]
 800be1c:	2300      	movs	r3, #0
 800be1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be22:	e7a7      	b.n	800bd74 <_printf_i+0x118>
 800be24:	6923      	ldr	r3, [r4, #16]
 800be26:	462a      	mov	r2, r5
 800be28:	4639      	mov	r1, r7
 800be2a:	4630      	mov	r0, r6
 800be2c:	47c0      	blx	r8
 800be2e:	3001      	adds	r0, #1
 800be30:	d0aa      	beq.n	800bd88 <_printf_i+0x12c>
 800be32:	6823      	ldr	r3, [r4, #0]
 800be34:	079b      	lsls	r3, r3, #30
 800be36:	d413      	bmi.n	800be60 <_printf_i+0x204>
 800be38:	68e0      	ldr	r0, [r4, #12]
 800be3a:	9b03      	ldr	r3, [sp, #12]
 800be3c:	4298      	cmp	r0, r3
 800be3e:	bfb8      	it	lt
 800be40:	4618      	movlt	r0, r3
 800be42:	e7a3      	b.n	800bd8c <_printf_i+0x130>
 800be44:	2301      	movs	r3, #1
 800be46:	464a      	mov	r2, r9
 800be48:	4639      	mov	r1, r7
 800be4a:	4630      	mov	r0, r6
 800be4c:	47c0      	blx	r8
 800be4e:	3001      	adds	r0, #1
 800be50:	d09a      	beq.n	800bd88 <_printf_i+0x12c>
 800be52:	3501      	adds	r5, #1
 800be54:	68e3      	ldr	r3, [r4, #12]
 800be56:	9a03      	ldr	r2, [sp, #12]
 800be58:	1a9b      	subs	r3, r3, r2
 800be5a:	42ab      	cmp	r3, r5
 800be5c:	dcf2      	bgt.n	800be44 <_printf_i+0x1e8>
 800be5e:	e7eb      	b.n	800be38 <_printf_i+0x1dc>
 800be60:	2500      	movs	r5, #0
 800be62:	f104 0919 	add.w	r9, r4, #25
 800be66:	e7f5      	b.n	800be54 <_printf_i+0x1f8>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1ac      	bne.n	800bdc6 <_printf_i+0x16a>
 800be6c:	7803      	ldrb	r3, [r0, #0]
 800be6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be76:	e76c      	b.n	800bd52 <_printf_i+0xf6>
 800be78:	0800c211 	.word	0x0800c211
 800be7c:	0800c222 	.word	0x0800c222

0800be80 <memmove>:
 800be80:	4288      	cmp	r0, r1
 800be82:	b510      	push	{r4, lr}
 800be84:	eb01 0302 	add.w	r3, r1, r2
 800be88:	d807      	bhi.n	800be9a <memmove+0x1a>
 800be8a:	1e42      	subs	r2, r0, #1
 800be8c:	4299      	cmp	r1, r3
 800be8e:	d00a      	beq.n	800bea6 <memmove+0x26>
 800be90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be94:	f802 4f01 	strb.w	r4, [r2, #1]!
 800be98:	e7f8      	b.n	800be8c <memmove+0xc>
 800be9a:	4283      	cmp	r3, r0
 800be9c:	d9f5      	bls.n	800be8a <memmove+0xa>
 800be9e:	1881      	adds	r1, r0, r2
 800bea0:	1ad2      	subs	r2, r2, r3
 800bea2:	42d3      	cmn	r3, r2
 800bea4:	d100      	bne.n	800bea8 <memmove+0x28>
 800bea6:	bd10      	pop	{r4, pc}
 800bea8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800beb0:	e7f7      	b.n	800bea2 <memmove+0x22>

0800beb2 <_realloc_r>:
 800beb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb4:	4607      	mov	r7, r0
 800beb6:	4614      	mov	r4, r2
 800beb8:	460e      	mov	r6, r1
 800beba:	b921      	cbnz	r1, 800bec6 <_realloc_r+0x14>
 800bebc:	4611      	mov	r1, r2
 800bebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bec2:	f7ff bc77 	b.w	800b7b4 <_malloc_r>
 800bec6:	b922      	cbnz	r2, 800bed2 <_realloc_r+0x20>
 800bec8:	f7ff fc26 	bl	800b718 <_free_r>
 800becc:	4625      	mov	r5, r4
 800bece:	4628      	mov	r0, r5
 800bed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bed2:	f000 f814 	bl	800befe <_malloc_usable_size_r>
 800bed6:	42a0      	cmp	r0, r4
 800bed8:	d20f      	bcs.n	800befa <_realloc_r+0x48>
 800beda:	4621      	mov	r1, r4
 800bedc:	4638      	mov	r0, r7
 800bede:	f7ff fc69 	bl	800b7b4 <_malloc_r>
 800bee2:	4605      	mov	r5, r0
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d0f2      	beq.n	800bece <_realloc_r+0x1c>
 800bee8:	4631      	mov	r1, r6
 800beea:	4622      	mov	r2, r4
 800beec:	f7ff fc00 	bl	800b6f0 <memcpy>
 800bef0:	4631      	mov	r1, r6
 800bef2:	4638      	mov	r0, r7
 800bef4:	f7ff fc10 	bl	800b718 <_free_r>
 800bef8:	e7e9      	b.n	800bece <_realloc_r+0x1c>
 800befa:	4635      	mov	r5, r6
 800befc:	e7e7      	b.n	800bece <_realloc_r+0x1c>

0800befe <_malloc_usable_size_r>:
 800befe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf02:	1f18      	subs	r0, r3, #4
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	bfbc      	itt	lt
 800bf08:	580b      	ldrlt	r3, [r1, r0]
 800bf0a:	18c0      	addlt	r0, r0, r3
 800bf0c:	4770      	bx	lr
	...

0800bf10 <_init>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	bf00      	nop
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr

0800bf1c <_fini>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	bf00      	nop
 800bf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf22:	bc08      	pop	{r3}
 800bf24:	469e      	mov	lr, r3
 800bf26:	4770      	bx	lr
