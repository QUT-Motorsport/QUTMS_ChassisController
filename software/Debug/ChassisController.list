
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b328  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800b528  0800b528  0001b528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b848  0800b848  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b848  0800b848  0001b848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b850  0800b850  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b850  0800b850  0001b850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b854  0800b854  0001b854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800b858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  200000a4  0800b8fc  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  0800b8fc  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000288d1  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fd0  00000000  00000000  000489a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f8  00000000  00000000  0004d978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001790  00000000  00000000  0004f370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ce8c  00000000  00000000  00050b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019cae  00000000  00000000  0007d98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108305  00000000  00000000  0009763a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019f93f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d54  00000000  00000000  0019f9bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b510 	.word	0x0800b510

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800b510 	.word	0x0800b510

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Parse_AMS_HeartbeatResponse>:

	return p;
}

void Parse_AMS_HeartbeatResponse(AMS_HeartbeatResponse_t packet, bool* HVAn, bool* HVBn, bool* precharge, bool* HVAp, bool* HVBp, uint16_t* averageVoltage, uint16_t* runtime)
{
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	1d3c      	adds	r4, r7, #4
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005ec:	603b      	str	r3, [r7, #0]
	*HVAn = (bool)(packet.data[0] & 0x1);
 80005ee:	7a3b      	ldrb	r3, [r7, #8]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	701a      	strb	r2, [r3, #0]
	*HVBn = (bool)(packet.data[0] & 0x2);
 8000602:	7a3b      	ldrb	r3, [r7, #8]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2da      	uxtb	r2, r3
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	701a      	strb	r2, [r3, #0]
	*precharge = (bool)(packet.data[0] & 0x4);
 8000616:	7a3b      	ldrb	r3, [r7, #8]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	701a      	strb	r2, [r3, #0]

	*HVAp = (bool)(packet.data[0] & 0x10);
 800062a:	7a3b      	ldrb	r3, [r7, #8]
 800062c:	f003 0310 	and.w	r3, r3, #16
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf14      	ite	ne
 8000634:	2301      	movne	r3, #1
 8000636:	2300      	moveq	r3, #0
 8000638:	b2da      	uxtb	r2, r3
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	701a      	strb	r2, [r3, #0]
	*HVBp = (bool)(packet.data[0] & 0x20);
 800063e:	7a3b      	ldrb	r3, [r7, #8]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2da      	uxtb	r2, r3
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	701a      	strb	r2, [r3, #0]

	*averageVoltage = (uint16_t)((packet.data[1] & 0x3F) << 6 | (packet.data[0]));
 8000652:	7a7b      	ldrb	r3, [r7, #9]
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	b21b      	sxth	r3, r3
 8000658:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800065c:	b21a      	sxth	r2, r3
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	b21b      	sxth	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29a      	uxth	r2, r3
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	801a      	strh	r2, [r3, #0]
	*runtime = (uint16_t)(packet.data[3] << 8 | packet.data[2]);
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21a      	sxth	r2, r3
 8000672:	7abb      	ldrb	r3, [r7, #10]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21b      	sxth	r3, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bc90      	pop	{r4, r7}
 8000688:	4770      	bx	lr

0800068a <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2200      	movs	r2, #0
 800069c:	2116      	movs	r1, #22
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f9b8 	bl	8000a14 <Compose_CANId>
 80006a4:	4603      	mov	r3, r0
 80006a6:	607b      	str	r3, [r7, #4]
	return p;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x17, 0x0, 0x0, 0x0, 0x0);
 80006b8:	2300      	movs	r3, #0
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2300      	movs	r3, #0
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2200      	movs	r2, #0
 80006c4:	2117      	movs	r1, #23
 80006c6:	2002      	movs	r0, #2
 80006c8:	f000 f9a4 	bl	8000a14 <Compose_CANId>
 80006cc:	4603      	mov	r3, r0
 80006ce:	607b      	str	r3, [r7, #4]
	return p;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <Compose_CC_SoftShutdown>:

CC_SoftShutdown_t Compose_CC_SoftShutdown(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af02      	add	r7, sp, #8
	CC_SoftShutdown_t p;
	p.id = Compose_CANId(0x2, 0x18, 0x0, 0x0, 0x0, 0x0);
 80006e0:	2300      	movs	r3, #0
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	2300      	movs	r3, #0
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2300      	movs	r3, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	2118      	movs	r1, #24
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 f990 	bl	8000a14 <Compose_CANId>
 80006f4:	4603      	mov	r3, r0
 80006f6:	607b      	str	r3, [r7, #4]
	return p;
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <fsm_new>:
#ifdef QUTMS_FSM

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 800070a:	2010      	movs	r0, #16
 800070c:	f00a fae8 	bl	800ace0 <malloc>
 8000710:	4603      	mov	r3, r0
 8000712:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 8000714:	2210      	movs	r2, #16
 8000716:	2100      	movs	r1, #0
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f00a faf4 	bl	800ad06 <memset>
	fsm->currentState = beginState;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000724:	2200      	movs	r2, #0
 8000726:	2103      	movs	r1, #3
 8000728:	2003      	movs	r0, #3
 800072a:	f006 fef7 	bl	800751c <osSemaphoreNew>
 800072e:	4602      	mov	r2, r0
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 8000734:	2200      	movs	r2, #0
 8000736:	2103      	movs	r1, #3
 8000738:	2003      	movs	r0, #3
 800073a:	f006 feef 	bl	800751c <osSemaphoreNew>
 800073e:	4602      	mov	r2, r0
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	2120      	movs	r1, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f006 ff84 	bl	8007658 <osSemaphoreAcquire>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d109      	bne.n	800076a <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	4618      	mov	r0, r3
 8000766:	f006 ffdd 	bl	8007724 <osSemaphoreRelease>
	}

	return fsm;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	2120      	movs	r1, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f006 ff68 	bl	8007658 <osSemaphoreAcquire>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10a      	bne.n	80007a4 <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	4618      	mov	r0, r3
 800079e:	f006 ffc1 	bl	8007724 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 80007a2:	e004      	b.n	80007ae <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 80007a4:	2225      	movs	r2, #37	; 0x25
 80007a6:	4904      	ldr	r1, [pc, #16]	; (80007b8 <fsm_iterate+0x44>)
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f8ab 	bl	8000904 <fsm_log>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	0800b528 	.word	0x0800b528

080007bc <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09c      	sub	sp, #112	; 0x70
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d036      	beq.n	8000840 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	2120      	movs	r1, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f006 ff3d 	bl	8007658 <osSemaphoreAcquire>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d127      	bne.n	8000834 <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	68d9      	ldr	r1, [r3, #12]
 80007ee:	f107 0014 	add.w	r0, r7, #20
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	460b      	mov	r3, r1
 80007f8:	4913      	ldr	r1, [pc, #76]	; (8000848 <fsm_changeState+0x8c>)
 80007fa:	f00a fb45 	bl	800ae88 <siprintf>
 80007fe:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 8000800:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 f87b 	bl	8000904 <fsm_log>
		fsm->currentState->exit(fsm);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	4798      	blx	r3

		fsm->currentState = newState;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	4618      	mov	r0, r3
 800082e:	f006 ff79 	bl	8007724 <osSemaphoreRelease>
 8000832:	e006      	b.n	8000842 <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 8000834:	2220      	movs	r2, #32
 8000836:	4905      	ldr	r1, [pc, #20]	; (800084c <fsm_changeState+0x90>)
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f863 	bl	8000904 <fsm_log>
 800083e:	e000      	b.n	8000842 <fsm_changeState+0x86>
		return;
 8000840:	bf00      	nop
	}
}
 8000842:	3768      	adds	r7, #104	; 0x68
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	0800b550 	.word	0x0800b550
 800084c:	0800b574 	.word	0x0800b574

08000850 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b098      	sub	sp, #96	; 0x60
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	68da      	ldr	r2, [r3, #12]
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4920      	ldr	r1, [pc, #128]	; (80008e4 <fsm_reset+0x94>)
 8000864:	4618      	mov	r0, r3
 8000866:	f00a fb0f 	bl	800ae88 <siprintf>
 800086a:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 800086c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f845 	bl	8000904 <fsm_log>
	fsm_log_function f = fsm->log;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 8000880:	2210      	movs	r2, #16
 8000882:	2100      	movs	r1, #0
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f00a fa3e 	bl	800ad06 <memset>
	fsm->log = f;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800088e:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000896:	2200      	movs	r2, #0
 8000898:	2103      	movs	r1, #3
 800089a:	2003      	movs	r0, #3
 800089c:	f006 fe3e 	bl	800751c <osSemaphoreNew>
 80008a0:	4602      	mov	r2, r0
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2103      	movs	r1, #3
 80008aa:	2003      	movs	r0, #3
 80008ac:	f006 fe36 	bl	800751c <osSemaphoreNew>
 80008b0:	4602      	mov	r2, r0
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	2120      	movs	r1, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f006 fecb 	bl	8007658 <osSemaphoreAcquire>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d109      	bne.n	80008dc <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f006 ff24 	bl	8007724 <osSemaphoreRelease>
	}
}
 80008dc:	bf00      	nop
 80008de:	3760      	adds	r7, #96	; 0x60
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800b598 	.word	0x0800b598

080008e8 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	605a      	str	r2, [r3, #4]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	68b8      	ldr	r0, [r7, #8]
 8000918:	4798      	blx	r3
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <Compose_PDM_InitiateStartup>:
#ifdef QUTMS_CAN_PDM

#include "PDM_CAN_Messages.h"

PDM_InitiateStartup_t Compose_PDM_InitiateStartup(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af02      	add	r7, sp, #8
	PDM_InitiateStartup_t p;
	p.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x00, 0x0);
 8000928:	2300      	movs	r3, #0
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	2300      	movs	r3, #0
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	2200      	movs	r2, #0
 8000934:	2114      	movs	r1, #20
 8000936:	2002      	movs	r0, #2
 8000938:	f000 f86c 	bl	8000a14 <Compose_CANId>
 800093c:	4603      	mov	r3, r0
 800093e:	607b      	str	r3, [r7, #4]
	return p;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <Parse_PDM_StartupOk>:

	return packet;
}

void Parse_PDM_StartupOk(PDM_StartupOk_t packet, uint32_t* powerChannels)
{
 800094a:	b480      	push	{r7}
 800094c:	b085      	sub	sp, #20
 800094e:	af00      	add	r7, sp, #0
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	e883 0003 	stmia.w	r3, {r0, r1}
 8000958:	607a      	str	r2, [r7, #4]
	*powerChannels = (packet.data[0] << 24) + (packet.data[1] << 16) + (packet.data[2] << 8) + packet.data[3];
 800095a:	7b3b      	ldrb	r3, [r7, #12]
 800095c:	061a      	lsls	r2, r3, #24
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	041b      	lsls	r3, r3, #16
 8000962:	441a      	add	r2, r3
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	4413      	add	r3, r2
 800096a:	7bfa      	ldrb	r2, [r7, #15]
 800096c:	4413      	add	r3, r2
 800096e:	461a      	mov	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <Compose_PDM_SelectStartup>:

PDM_SelectStartup_t Compose_PDM_SelectStartup(uint32_t powerChannels)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	PDM_SelectStartup_t packet;
	packet.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x01, 0x0);
 800098a:	2300      	movs	r3, #0
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	2301      	movs	r3, #1
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2302      	movs	r3, #2
 8000994:	2200      	movs	r2, #0
 8000996:	2114      	movs	r1, #20
 8000998:	2002      	movs	r0, #2
 800099a:	f000 f83b 	bl	8000a14 <Compose_CANId>
 800099e:	4603      	mov	r3, r0
 80009a0:	613b      	str	r3, [r7, #16]

	uint8_t d[4] = {0};
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<4 ;++i)
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	e00f      	b.n	80009cc <Compose_PDM_SelectStartup+0x4c>
		d[i] = ((uint8_t*)&powerChannels)[3-i];
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0303 	rsb	r3, r3, #3
 80009b2:	461a      	mov	r2, r3
 80009b4:	463b      	mov	r3, r7
 80009b6:	4413      	add	r3, r2
 80009b8:	7819      	ldrb	r1, [r3, #0]
 80009ba:	f107 020c 	add.w	r2, r7, #12
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	4413      	add	r3, r2
 80009c2:	460a      	mov	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3301      	adds	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	ddec      	ble.n	80009ac <Compose_PDM_SelectStartup+0x2c>

	for (int i=0; i<4 ;++i)
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	e00d      	b.n	80009f4 <Compose_PDM_SelectStartup+0x74>
		packet.data[i] = (uint8_t)(d[i] & 0xFF);
 80009d8:	f107 020c 	add.w	r2, r7, #12
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	4413      	add	r3, r2
 80009e0:	7819      	ldrb	r1, [r3, #0]
 80009e2:	f107 0214 	add.w	r2, r7, #20
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	4413      	add	r3, r2
 80009ea:	460a      	mov	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	3301      	adds	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	ddee      	ble.n	80009d8 <Compose_PDM_SelectStartup+0x58>

	return packet;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	461a      	mov	r2, r3
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a06:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <Compose_CANId>:

/* USER CODE BEGIN 0 */

/* CANId */
uint32_t Compose_CANId(uint8_t priority, uint16_t sourceId, uint8_t autonomous, uint8_t type, uint16_t extra, uint8_t BMSId)
{
 8000a14:	b490      	push	{r4, r7}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4623      	mov	r3, r4
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	4603      	mov	r3, r0
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	70fb      	strb	r3, [r7, #3]
	uint32_t id = (priority & 0x3) << 27
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	06db      	lsls	r3, r3, #27
 8000a36:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
				| (sourceId & 0x1FF) << 18
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	0499      	lsls	r1, r3, #18
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <Compose_CANId+0x68>)
 8000a40:	400b      	ands	r3, r1
 8000a42:	431a      	orrs	r2, r3
				| (autonomous & 0x1) << 17
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	045b      	lsls	r3, r3, #17
 8000a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4c:	431a      	orrs	r2, r3
				| (type & 0x7) << 14
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	039b      	lsls	r3, r3, #14
 8000a52:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000a56:	431a      	orrs	r2, r3
				| (extra & 0x3FF) << 4
 8000a58:	8b3b      	ldrh	r3, [r7, #24]
 8000a5a:	0119      	lsls	r1, r3, #4
 8000a5c:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000a60:	400b      	ands	r3, r1
 8000a62:	431a      	orrs	r2, r3
				| (BMSId & 0xF);
 8000a64:	7f3b      	ldrb	r3, [r7, #28]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	4313      	orrs	r3, r2
	uint32_t id = (priority & 0x3) << 27
 8000a6c:	60fb      	str	r3, [r7, #12]
	return id;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc90      	pop	{r4, r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	07fc0000 	.word	0x07fc0000

08000a80 <Parse_SHDN_HeartbeatResponse>:
	p.data = segmentState;
	return p;
}

void Parse_SHDN_HeartbeatResponse(SHDN_HeartbeatResponse_t packet, uint8_t* segmentState)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a8e:	607a      	str	r2, [r7, #4]
	*segmentState = packet.data;
 8000a90:	7b3a      	ldrb	r2, [r7, #12]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	701a      	strb	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <Parse_SHDN_IMD_HeartbeatResponse>:
	p.data = pwmState;
	return p;
}

void Parse_SHDN_IMD_HeartbeatResponse(SHDN_IMD_HeartbeatResponse_t packet, uint8_t* pwmState)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b085      	sub	sp, #20
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ab0:	607a      	str	r2, [r7, #4]
	*pwmState = packet.data;
 8000ab2:	7b3a      	ldrb	r2, [r7, #12]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	701a      	strb	r2, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <map>:
#define ACCEL_PEDAL_THREE_MIN 320
#define ACCEL_PEDAL_THREE_MAX 3380

/* Util Functions */
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (float)(in_max - in_min) + out_min;
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	69b9      	ldr	r1, [r7, #24]
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	ee07 3a90 	vmov	s15, r3
 8000af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b0e:	ee17 3a90 	vmov	r3, s15
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b08b      	sub	sp, #44	; 0x2c
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000b28:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <state_start_enter+0x118>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d156      	bne.n	8000bde <state_start_enter+0xbe>
	{
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000b30:	f240 40fc 	movw	r0, #1276	; 0x4fc
 8000b34:	f00a f8d4 	bl	800ace0 <malloc>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <state_start_enter+0x118>)
 8000b3e:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000b40:	4b3d      	ldr	r3, [pc, #244]	; (8000c38 <state_start_enter+0x118>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f240 42fc 	movw	r2, #1276	; 0x4fc
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f00a f8db 	bl	800ad06 <memset>

		// As CC_GlobalState is accessible across threads, we need to use a semaphore to access it
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000b50:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <state_start_enter+0x118>)
 8000b52:	681c      	ldr	r4, [r3, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	2103      	movs	r1, #3
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f006 fcdf 	bl	800751c <osSemaphoreNew>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000b64:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <state_start_enter+0x118>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f006 fd72 	bl	8007658 <osSemaphoreAcquire>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d11f      	bne.n	8000bba <state_start_enter+0x9a>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <state_start_enter+0x118>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->AMS_Debug = false;
 8000b82:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <state_start_enter+0x118>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2200      	movs	r2, #0
 8000b88:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->SHDN_Debug = false;
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <state_start_enter+0x118>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	771a      	strb	r2, [r3, #28]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <state_start_enter+0x118>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2201      	movs	r2, #1
 8000b98:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->RTD_Debug = true;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <state_start_enter+0x118>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	761a      	strb	r2, [r3, #24]

			CC_GlobalState->tractiveActive = false;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <state_start_enter+0x118>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da

			osSemaphoreRelease(CC_GlobalState->sem);
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <state_start_enter+0x118>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f006 fdb5 	bl	8007724 <osSemaphoreRelease>
		}

		CC_GlobalState->CANQueue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <state_start_enter+0x118>)
 8000bbc:	681c      	ldr	r4, [r3, #0]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2128      	movs	r1, #40	; 0x28
 8000bc2:	200a      	movs	r0, #10
 8000bc4:	f006 fe06 	bl	80077d4 <osMessageQueueNew>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
		if(CC_GlobalState->CANQueue == NULL)
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <state_start_enter+0x118>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <state_start_enter+0xbe>
		{
			Error_Handler();
 8000bda:	f002 f9ef 	bl	8002fbc <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	4815      	ldr	r0, [pc, #84]	; (8000c3c <state_start_enter+0x11c>)
 8000be6:	f004 fb23 	bl	8005230 <HAL_GPIO_WritePin>
	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t pdmStartup = Compose_PDM_InitiateStartup();
 8000bea:	f7ff fe9a 	bl	8000922 <Compose_PDM_InitiateStartup>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	615a      	str	r2, [r3, #20]
	{
			.ExtId = pdmStartup.id,
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	2304      	movs	r3, #4
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000c10:	230f      	movs	r3, #15
 8000c12:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <state_start_enter+0x118>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3308      	adds	r3, #8
 8000c1a:	f107 0208 	add.w	r2, r7, #8
 8000c1e:	f107 010c 	add.w	r1, r7, #12
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <state_start_enter+0x120>)
 8000c24:	f003 fad4 	bl	80041d0 <HAL_CAN_AddTxMessage>

	/* Debug Tracing */
	CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
 8000c28:	210d      	movs	r1, #13
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <state_start_enter+0x124>)
 8000c2c:	f002 f8e8 	bl	8002e00 <CC_LogInfo>
	return;
 8000c30:	bf00      	nop
}
 8000c32:	372c      	adds	r7, #44	; 0x2c
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	200049e0 	.word	0x200049e0
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	20004ba4 	.word	0x20004ba4
 8000c44:	0800b5dc 	.word	0x0800b5dc

08000c48 <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b09b      	sub	sp, #108	; 0x6c
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000c50:	4b4f      	ldr	r3, [pc, #316]	; (8000d90 <state_start_iterate+0x148>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	7e5b      	ldrb	r3, [r3, #25]
 8000c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8000c5e:	2300      	movs	r3, #0
 8000c60:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000c62:	e028      	b.n	8000cb6 <state_start_iterate+0x6e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000c64:	4b4a      	ldr	r3, [pc, #296]	; (8000d90 <state_start_iterate+0x148>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8000c6c:	f107 010c 	add.w	r1, r7, #12
 8000c70:	2300      	movs	r3, #0
 8000c72:	2200      	movs	r2, #0
 8000c74:	f006 fea8 	bl	80079c8 <osMessageQueueGet>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d11b      	bne.n	8000cb6 <state_start_iterate+0x6e>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(0x2, 0x14, 0x0, 0x3, 0x00, 0x0))
 8000c7e:	693c      	ldr	r4, [r7, #16]
 8000c80:	2300      	movs	r3, #0
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	2300      	movs	r3, #0
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2303      	movs	r3, #3
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2114      	movs	r1, #20
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f7ff fec0 	bl	8000a14 <Compose_CANId>
 8000c94:	4603      	mov	r3, r0
 8000c96:	429c      	cmp	r4, r3
 8000c98:	d10d      	bne.n	8000cb6 <state_start_iterate+0x6e>
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(*((PDM_StartupOk_t*)&(msg.data)), &getPowerChannels);
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	331c      	adds	r3, #28
 8000ca4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000ca8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cac:	f7ff fe4d 	bl	800094a <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <state_start_iterate+0x148>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 fef4 	bl	8007aac <osMessageQueueGetCount>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1cc      	bne.n	8000c64 <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d059      	beq.n	8000d86 <state_start_iterate+0x13e>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000ce2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ce6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fe49 	bl	8000980 <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000cee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d04:	2304      	movs	r3, #4
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d08:	2304      	movs	r3, #4
 8000d0a:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <state_start_iterate+0x148>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f103 0008 	add.w	r0, r3, #8
 8000d14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d18:	1d1a      	adds	r2, r3, #4
 8000d1a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000d1e:	4603      	mov	r3, r0
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <state_start_iterate+0x14c>)
 8000d22:	f003 fa55 	bl	80041d0 <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <state_start_iterate+0x148>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000d2e:	2120      	movs	r1, #32
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 fc91 	bl	8007658 <osSemaphoreAcquire>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d11e      	bne.n	8000d7a <state_start_iterate+0x132>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <state_start_iterate+0x148>)
 8000d3e:	681c      	ldr	r4, [r3, #0]
 8000d40:	f002 fb2a 	bl	8003398 <HAL_GetTick>
 8000d44:	4603      	mov	r3, r0
 8000d46:	6223      	str	r3, [r4, #32]
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <state_start_iterate+0x148>)
 8000d4a:	681c      	ldr	r4, [r3, #0]
 8000d4c:	f002 fb24 	bl	8003398 <HAL_GetTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	62e3      	str	r3, [r4, #44]	; 0x2c
			CC_GlobalState->shutdownTicks = HAL_GetTick();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <state_start_iterate+0x148>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	f002 fb1e 	bl	8003398 <HAL_GetTick>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	6323      	str	r3, [r4, #48]	; 0x30
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <state_start_iterate+0x148>)
 8000d62:	681c      	ldr	r4, [r3, #0]
 8000d64:	f002 fb18 	bl	8003398 <HAL_GetTick>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	6363      	str	r3, [r4, #52]	; 0x34
			osSemaphoreRelease(CC_GlobalState->sem);
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <state_start_iterate+0x148>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000d74:	4618      	mov	r0, r3
 8000d76:	f006 fcd5 	bl	8007724 <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <state_start_iterate+0x150>)
 8000d7c:	4907      	ldr	r1, [pc, #28]	; (8000d9c <state_start_iterate+0x154>)
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fd1c 	bl	80007bc <fsm_changeState>
	}
	return;
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
}
 8000d88:	3764      	adds	r7, #100	; 0x64
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd90      	pop	{r4, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200049e0 	.word	0x200049e0
 8000d94:	20004ba4 	.word	0x20004ba4
 8000d98:	0800b5ec 	.word	0x0800b5ec
 8000d9c:	20000010 	.word	0x20000010

08000da0 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	/* Wake/Ready to Idle over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8000da8:	bf00      	nop
}
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	0000      	movs	r0, r0
	...

08000db8 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8000dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc4:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <state_idle_enter+0x78>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000dce:	2120      	movs	r1, #32
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 fc41 	bl	8007658 <osSemaphoreAcquire>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d11c      	bne.n	8000e16 <state_idle_enter+0x5e>
	{
		CC_GlobalState->brakePressureThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000de6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000e20 <state_idle_enter+0x68>
 8000dea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dee:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000e28 <state_idle_enter+0x70>
 8000df2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <state_idle_enter+0x78>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dfe:	ee17 2a90 	vmov	r2, s15
 8000e02:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		osSemaphoreRelease(CC_GlobalState->sem);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <state_idle_enter+0x78>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 fc88 	bl	8007724 <osSemaphoreRelease>
	}
	return;
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
}
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	9999999a 	.word	0x9999999a
 8000e24:	3fc99999 	.word	0x3fc99999
 8000e28:	00000000 	.word	0x00000000
 8000e2c:	40790000 	.word	0x40790000
 8000e30:	200049e0 	.word	0x200049e0
 8000e34:	00000000 	.word	0x00000000

08000e38 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b0b1      	sub	sp, #196	; 0xc4
 8000e3c:	af06      	add	r7, sp, #24
 8000e3e:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000e40:	4bb5      	ldr	r3, [pc, #724]	; (8001118 <state_idle_iterate+0x2e0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 fc04 	bl	8007658 <osSemaphoreAcquire>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f040 8187 	bne.w	8001166 <state_idle_iterate+0x32e>
	{
		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8000e58:	f002 fa9e 	bl	8003398 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4bae      	ldr	r3, [pc, #696]	; (8001118 <state_idle_iterate+0x2e0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	; 0x64
 8000e68:	d943      	bls.n	8000ef2 <state_idle_iterate+0xba>
 8000e6a:	4bab      	ldr	r3, [pc, #684]	; (8001118 <state_idle_iterate+0x2e0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	7e9b      	ldrb	r3, [r3, #26]
 8000e70:	f083 0301 	eor.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d03b      	beq.n	8000ef2 <state_idle_iterate+0xba>
		{
			CC_LogInfo("Fatal Shutdown AMS\r\n", strlen("Fatal Shutdown AMS\r\n"));
 8000e7a:	2114      	movs	r1, #20
 8000e7c:	48a7      	ldr	r0, [pc, #668]	; (800111c <state_idle_iterate+0x2e4>)
 8000e7e:	f001 ffbf 	bl	8002e00 <CC_LogInfo>
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000e82:	f7ff fc16 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			CAN_TxHeaderTypeDef header =
 8000e8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 8000e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
			CAN_TxHeaderTypeDef header =
 8000ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000eac:	2301      	movs	r3, #1
 8000eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000eb8:	4b97      	ldr	r3, [pc, #604]	; (8001118 <state_idle_iterate+0x2e0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ec0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000ec4:	4896      	ldr	r0, [pc, #600]	; (8001120 <state_idle_iterate+0x2e8>)
 8000ec6:	f003 f983 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000eca:	4b93      	ldr	r3, [pc, #588]	; (8001118 <state_idle_iterate+0x2e0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3308      	adds	r3, #8
 8000ed0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ed4:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000ed8:	4892      	ldr	r0, [pc, #584]	; (8001124 <state_idle_iterate+0x2ec>)
 8000eda:	f003 f979 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000ede:	4b8e      	ldr	r3, [pc, #568]	; (8001118 <state_idle_iterate+0x2e0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3310      	adds	r3, #16
 8000ee4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ee8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000eec:	488e      	ldr	r0, [pc, #568]	; (8001128 <state_idle_iterate+0x2f0>)
 8000eee:	f003 f96f 	bl	80041d0 <HAL_CAN_AddTxMessage>
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 8000ef2:	f002 fa51 	bl	8003398 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	4b87      	ldr	r3, [pc, #540]	; (8001118 <state_idle_iterate+0x2e0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	d93a      	bls.n	8000f7a <state_idle_iterate+0x142>
 8000f04:	4b84      	ldr	r3, [pc, #528]	; (8001118 <state_idle_iterate+0x2e0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	7f1b      	ldrb	r3, [r3, #28]
 8000f0a:	f083 0301 	eor.w	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d032      	beq.n	8000f7a <state_idle_iterate+0x142>
		{
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000f14:	f7ff fbcd 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 8000f1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 8000f2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 8000f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f32:	2304      	movs	r3, #4
 8000f34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f36:	2301      	movs	r3, #1
 8000f38:	677b      	str	r3, [r7, #116]	; 0x74
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000f40:	4b75      	ldr	r3, [pc, #468]	; (8001118 <state_idle_iterate+0x2e0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f48:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000f4c:	4874      	ldr	r0, [pc, #464]	; (8001120 <state_idle_iterate+0x2e8>)
 8000f4e:	f003 f93f 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000f52:	4b71      	ldr	r3, [pc, #452]	; (8001118 <state_idle_iterate+0x2e0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3308      	adds	r3, #8
 8000f58:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f5c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000f60:	4870      	ldr	r0, [pc, #448]	; (8001124 <state_idle_iterate+0x2ec>)
 8000f62:	f003 f935 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000f66:	4b6c      	ldr	r3, [pc, #432]	; (8001118 <state_idle_iterate+0x2e0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3310      	adds	r3, #16
 8000f6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f70:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000f74:	486c      	ldr	r0, [pc, #432]	; (8001128 <state_idle_iterate+0x2f0>)
 8000f76:	f003 f92b 	bl	80041d0 <HAL_CAN_AddTxMessage>
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8000f7a:	f002 fa0d 	bl	8003398 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4b65      	ldr	r3, [pc, #404]	; (8001118 <state_idle_iterate+0x2e0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b64      	cmp	r3, #100	; 0x64
 8000f8a:	d93a      	bls.n	8001002 <state_idle_iterate+0x1ca>
 8000f8c:	4b62      	ldr	r3, [pc, #392]	; (8001118 <state_idle_iterate+0x2e0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	7edb      	ldrb	r3, [r3, #27]
 8000f92:	f083 0301 	eor.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d032      	beq.n	8001002 <state_idle_iterate+0x1ca>
		{
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000f9c:	f7ff fb89 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
			CAN_TxHeaderTypeDef header =
 8000fa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 8000fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
			CAN_TxHeaderTypeDef header =
 8000fb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000fba:	2304      	movs	r3, #4
 8000fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	657b      	str	r3, [r7, #84]	; 0x54
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000fc8:	4b53      	ldr	r3, [pc, #332]	; (8001118 <state_idle_iterate+0x2e0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000fd0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000fd4:	4852      	ldr	r0, [pc, #328]	; (8001120 <state_idle_iterate+0x2e8>)
 8000fd6:	f003 f8fb 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000fda:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <state_idle_iterate+0x2e0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000fe4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000fe8:	484e      	ldr	r0, [pc, #312]	; (8001124 <state_idle_iterate+0x2ec>)
 8000fea:	f003 f8f1 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000fee:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <state_idle_iterate+0x2e0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3310      	adds	r3, #16
 8000ff4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ff8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000ffc:	484a      	ldr	r0, [pc, #296]	; (8001128 <state_idle_iterate+0x2f0>)
 8000ffe:	f003 f8e7 	bl	80041d0 <HAL_CAN_AddTxMessage>
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8001002:	4b45      	ldr	r3, [pc, #276]	; (8001118 <state_idle_iterate+0x2e0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800100a:	4618      	mov	r0, r3
 800100c:	f006 fb8a 	bl	8007724 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8001010:	e0a9      	b.n	8001166 <state_idle_iterate+0x32e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <state_idle_iterate+0x2e0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800101a:	f107 010c 	add.w	r1, r7, #12
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	f006 fcd1 	bl	80079c8 <osMessageQueueGet>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 809c 	bne.w	8001166 <state_idle_iterate+0x32e>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800102e:	693c      	ldr	r4, [r7, #16]
 8001030:	2300      	movs	r3, #0
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	2301      	movs	r3, #1
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	2200      	movs	r2, #0
 800103c:	2110      	movs	r1, #16
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff fce8 	bl	8000a14 <Compose_CANId>
 8001044:	4603      	mov	r3, r0
 8001046:	429c      	cmp	r4, r3
 8001048:	d135      	bne.n	80010b6 <state_idle_iterate+0x27e>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800104a:	4b33      	ldr	r3, [pc, #204]	; (8001118 <state_idle_iterate+0x2e0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001052:	2120      	movs	r1, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f006 faff 	bl	8007658 <osSemaphoreAcquire>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 8082 	bne.w	8001166 <state_idle_iterate+0x32e>
				{
					bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(*((AMS_HeartbeatResponse_t*)&(msg.data)), &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	f103 021c 	add.w	r2, r3, #28
 800106a:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800106e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001072:	9305      	str	r3, [sp, #20]
 8001074:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001078:	9304      	str	r3, [sp, #16]
 800107a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 800107e:	9303      	str	r3, [sp, #12]
 8001080:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	460b      	mov	r3, r1
 8001094:	ca07      	ldmia	r2, {r0, r1, r2}
 8001096:	f7ff faa3 	bl	80005e0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <state_idle_iterate+0x2e0>)
 800109c:	681c      	ldr	r4, [r3, #0]
 800109e:	f002 f97b 	bl	8003398 <HAL_GetTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	62e3      	str	r3, [r4, #44]	; 0x2c
					osSemaphoreRelease(CC_GlobalState->sem);
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <state_idle_iterate+0x2e0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 fb38 	bl	8007724 <osSemaphoreRelease>
 80010b4:	e057      	b.n	8001166 <state_idle_iterate+0x32e>
				}
			}
			/* Shutdown Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 80010b6:	693c      	ldr	r4, [r7, #16]
 80010b8:	2300      	movs	r3, #0
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	2301      	movs	r3, #1
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	2200      	movs	r2, #0
 80010c4:	2106      	movs	r1, #6
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff fca4 	bl	8000a14 <Compose_CANId>
 80010cc:	4603      	mov	r3, r0
 80010ce:	429c      	cmp	r4, r3
 80010d0:	d12c      	bne.n	800112c <state_idle_iterate+0x2f4>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <state_idle_iterate+0x2e0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80010da:	2120      	movs	r1, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 fabb 	bl	8007658 <osSemaphoreAcquire>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d13e      	bne.n	8001166 <state_idle_iterate+0x32e>
				{
					uint8_t segmentState;
					Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	331c      	adds	r3, #28
 80010ee:	f107 0235 	add.w	r2, r7, #53	; 0x35
 80010f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010f6:	f7ff fcc3 	bl	8000a80 <Parse_SHDN_HeartbeatResponse>
					CC_GlobalState->shutdownTicks = HAL_GetTick();
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <state_idle_iterate+0x2e0>)
 80010fc:	681c      	ldr	r4, [r3, #0]
 80010fe:	f002 f94b 	bl	8003398 <HAL_GetTick>
 8001102:	4603      	mov	r3, r0
 8001104:	6323      	str	r3, [r4, #48]	; 0x30
					osSemaphoreRelease(CC_GlobalState->sem);
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <state_idle_iterate+0x2e0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800110e:	4618      	mov	r0, r3
 8001110:	f006 fb08 	bl	8007724 <osSemaphoreRelease>
 8001114:	e027      	b.n	8001166 <state_idle_iterate+0x32e>
 8001116:	bf00      	nop
 8001118:	200049e0 	.word	0x200049e0
 800111c:	0800b608 	.word	0x0800b608
 8001120:	20004bcc 	.word	0x20004bcc
 8001124:	20004ba4 	.word	0x20004ba4
 8001128:	20004b7c 	.word	0x20004b7c
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800112c:	693c      	ldr	r4, [r7, #16]
 800112e:	2300      	movs	r3, #0
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2301      	movs	r3, #1
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	2200      	movs	r2, #0
 800113a:	2110      	movs	r1, #16
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff fc69 	bl	8000a14 <Compose_CANId>
 8001142:	4603      	mov	r3, r0
 8001144:	429c      	cmp	r4, r3
 8001146:	d10e      	bne.n	8001166 <state_idle_iterate+0x32e>
			{
				uint8_t pwmState;
				Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	331c      	adds	r3, #28
 800114e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001152:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001156:	f7ff fca4 	bl	8000aa2 <Parse_SHDN_IMD_HeartbeatResponse>
				CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 800115a:	4b43      	ldr	r3, [pc, #268]	; (8001268 <state_idle_iterate+0x430>)
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	f002 f91b 	bl	8003398 <HAL_GetTick>
 8001162:	4603      	mov	r3, r0
 8001164:	6363      	str	r3, [r4, #52]	; 0x34
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8001166:	4b40      	ldr	r3, [pc, #256]	; (8001268 <state_idle_iterate+0x430>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800116e:	4618      	mov	r0, r3
 8001170:	f006 fc9c 	bl	8007aac <osMessageQueueGetCount>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	f47f af4b 	bne.w	8001012 <state_idle_iterate+0x1da>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <state_idle_iterate+0x430>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d018      	beq.n	80011b8 <state_idle_iterate+0x380>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 800118e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800119a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001258 <state_idle_iterate+0x420>
 800119e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011a2:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001260 <state_idle_iterate+0x428>
 80011a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011ae:	ee17 3a90 	vmov	r3, s15
 80011b2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80011b6:	e008      	b.n	80011ca <state_idle_iterate+0x392>
	}
	else
	{
		HAL_ADC_Start(&hadc3);
 80011b8:	482c      	ldr	r0, [pc, #176]	; (800126c <state_idle_iterate+0x434>)
 80011ba:	f002 f93d 	bl	8003438 <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc3);
 80011be:	482b      	ldr	r0, [pc, #172]	; (800126c <state_idle_iterate+0x434>)
 80011c0:	f002 fae8 	bl	8003794 <HAL_ADC_GetValue>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	}
	if(raw > CC_GlobalState->brakePressureThreshold)
 80011ca:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <state_idle_iterate+0x430>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d931      	bls.n	800123e <state_idle_iterate+0x406>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e0:	4823      	ldr	r0, [pc, #140]	; (8001270 <state_idle_iterate+0x438>)
 80011e2:	f004 f825 	bl	8005230 <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <state_idle_iterate+0x430>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80011ee:	2120      	movs	r1, #32
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fa31 	bl	8007658 <osSemaphoreAcquire>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d126      	bne.n	800124a <state_idle_iterate+0x412>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 80011fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001200:	481b      	ldr	r0, [pc, #108]	; (8001270 <state_idle_iterate+0x438>)
 8001202:	f003 fffd 	bl	8005200 <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d010      	beq.n	800122e <state_idle_iterate+0x3f6>
 800120c:	f002 f8c4 	bl	8003398 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <state_idle_iterate+0x430>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001220:	4293      	cmp	r3, r2
 8001222:	d904      	bls.n	800122e <state_idle_iterate+0x3f6>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <state_idle_iterate+0x43c>)
 8001226:	4914      	ldr	r1, [pc, #80]	; (8001278 <state_idle_iterate+0x440>)
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fac7 	bl	80007bc <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <state_idle_iterate+0x430>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001236:	4618      	mov	r0, r3
 8001238:	f006 fa74 	bl	8007724 <osSemaphoreRelease>
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
	}
}
 800123c:	e005      	b.n	800124a <state_idle_iterate+0x412>
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <state_idle_iterate+0x438>)
 8001246:	f003 fff3 	bl	8005230 <HAL_GPIO_WritePin>
}
 800124a:	bf00      	nop
 800124c:	37ac      	adds	r7, #172	; 0xac
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	bf00      	nop
 8001254:	f3af 8000 	nop.w
 8001258:	33333333 	.word	0x33333333
 800125c:	3fd33333 	.word	0x3fd33333
 8001260:	00000000 	.word	0x00000000
 8001264:	40790000 	.word	0x40790000
 8001268:	200049e0 	.word	0x200049e0
 800126c:	20004a74 	.word	0x20004a74
 8001270:	40021000 	.word	0x40021000
 8001274:	0800b620 	.word	0x0800b620
 8001278:	20000020 	.word	0x20000020

0800127c <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b08b      	sub	sp, #44	; 0x2c
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 8001284:	f7ff fa01 	bl	800068a <Compose_CC_ReadyToDrive>
 8001288:	4603      	mov	r3, r0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	2304      	movs	r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	2301      	movs	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 80012aa:	230f      	movs	r3, #15
 80012ac:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <state_idle_exit+0xa8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	f107 010c 	add.w	r1, r7, #12
 80012ba:	481b      	ldr	r0, [pc, #108]	; (8001328 <state_idle_exit+0xac>)
 80012bc:	f002 ff88 	bl	80041d0 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <state_idle_exit+0xa8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3308      	adds	r3, #8
 80012c6:	f107 0208 	add.w	r2, r7, #8
 80012ca:	f107 010c 	add.w	r1, r7, #12
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <state_idle_exit+0xb0>)
 80012d0:	f002 ff7e 	bl	80041d0 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <state_idle_exit+0xa8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3310      	adds	r3, #16
 80012da:	f107 0208 	add.w	r2, r7, #8
 80012de:	f107 010c 	add.w	r1, r7, #12
 80012e2:	4813      	ldr	r0, [pc, #76]	; (8001330 <state_idle_exit+0xb4>)
 80012e4:	f002 ff74 	bl	80041d0 <HAL_CAN_AddTxMessage>

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <state_idle_exit+0xa8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80012f0:	2120      	movs	r1, #32
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 f9b0 	bl	8007658 <osSemaphoreAcquire>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <state_idle_exit+0x9e>
	{
		CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <state_idle_exit+0xa8>)
 8001300:	681c      	ldr	r4, [r3, #0]
 8001302:	f002 f849 	bl	8003398 <HAL_GetTick>
 8001306:	4603      	mov	r3, r0
 8001308:	6263      	str	r3, [r4, #36]	; 0x24
		osSemaphoreRelease(CC_GlobalState->sem);
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <state_idle_exit+0xa8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001312:	4618      	mov	r0, r3
 8001314:	f006 fa06 	bl	8007724 <osSemaphoreRelease>
	}
	return;
 8001318:	bf00      	nop
 800131a:	bf00      	nop
}
 800131c:	372c      	adds	r7, #44	; 0x2c
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	200049e0 	.word	0x200049e0
 8001328:	20004bcc 	.word	0x20004bcc
 800132c:	20004ba4 	.word	0x20004ba4
 8001330:	20004b7c 	.word	0x20004b7c

08001334 <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	/* Play RTD Siren for 2 Seconds */

	/* Enable all channels on PDM */
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800133c:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <state_driving_enter+0x144>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001344:	2120      	movs	r1, #32
 8001346:	4618      	mov	r0, r3
 8001348:	f006 f986 	bl	8007658 <osSemaphoreAcquire>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d17d      	bne.n	800144e <state_driving_enter+0x11a>
	{
		CC_GlobalState->tractiveActive = true;
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <state_driving_enter+0x144>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
		CC_GlobalState->faultDetected = false;
 800135c:	4b46      	ldr	r3, [pc, #280]	; (8001478 <state_driving_enter+0x144>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
		CC_GlobalState->rtdLightActive = true;
 8001366:	4b44      	ldr	r3, [pc, #272]	; (8001478 <state_driving_enter+0x144>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc

		memset(CC_GlobalState->rollingBrakeValues, 0, 10*sizeof(uint32_t));
 8001370:	4b41      	ldr	r3, [pc, #260]	; (8001478 <state_driving_enter+0x144>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001378:	2228      	movs	r2, #40	; 0x28
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f009 fcc2 	bl	800ad06 <memset>
		memset(CC_GlobalState->secondaryRollingBrakeValues, 0, 10*sizeof(uint32_t));
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <state_driving_enter+0x144>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800138a:	2228      	movs	r2, #40	; 0x28
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f009 fcb9 	bl	800ad06 <memset>
		memset(CC_GlobalState->rollingAccelValues, 0, 10*sizeof(uint32_t));
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <state_driving_enter+0x144>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f203 4354 	addw	r3, r3, #1108	; 0x454
 800139c:	2228      	movs	r2, #40	; 0x28
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f009 fcb0 	bl	800ad06 <memset>
		memset(CC_GlobalState->secondaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <state_driving_enter+0x144>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80013ae:	2228      	movs	r2, #40	; 0x28
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f009 fca7 	bl	800ad06 <memset>
		memset(CC_GlobalState->tertiaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <state_driving_enter+0x144>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80013c0:	2228      	movs	r2, #40	; 0x28
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f009 fc9e 	bl	800ad06 <memset>

		CC_GlobalState->brakeOneMin = BRAKE_PEDAL_ONE_MIN;
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <state_driving_enter+0x144>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013d2:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
		CC_GlobalState->brakeOneMax = BRAKE_PEDAL_ONE_MAX;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <state_driving_enter+0x144>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f640 5248 	movw	r2, #3400	; 0xd48
 80013de:	f8a3 244e 	strh.w	r2, [r3, #1102]	; 0x44e
		CC_GlobalState->brakeTwoMin = BRAKE_PEDAL_TWO_MIN;
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <state_driving_enter+0x144>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	22f0      	movs	r2, #240	; 0xf0
 80013e8:	f8a3 2450 	strh.w	r2, [r3, #1104]	; 0x450
		CC_GlobalState->brakeTwoMax = BRAKE_PEDAL_TWO_MAX;
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <state_driving_enter+0x144>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f640 42f8 	movw	r2, #3320	; 0xcf8
 80013f4:	f8a3 2452 	strh.w	r2, [r3, #1106]	; 0x452

		CC_GlobalState->accelOneMin = ACCEL_PEDAL_ONE_MIN;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <state_driving_enter+0x144>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001400:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
		CC_GlobalState->accelOneMax = ACCEL_PEDAL_ONE_MAX;
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <state_driving_enter+0x144>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f640 5216 	movw	r2, #3350	; 0xd16
 800140c:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce
		CC_GlobalState->accelTwoMin = ACCEL_PEDAL_TWO_MIN;
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <state_driving_enter+0x144>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001418:	f8a3 24d0 	strh.w	r2, [r3, #1232]	; 0x4d0
		CC_GlobalState->accelTwoMax = ACCEL_PEDAL_TWO_MAX;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <state_driving_enter+0x144>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f640 5248 	movw	r2, #3400	; 0xd48
 8001424:	f8a3 24d2 	strh.w	r2, [r3, #1234]	; 0x4d2
		CC_GlobalState->accelThreeMin = ACCEL_PEDAL_THREE_MIN;
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <state_driving_enter+0x144>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001430:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
		CC_GlobalState->accelThreeMax = ACCEL_PEDAL_THREE_MAX;
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <state_driving_enter+0x144>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f640 5234 	movw	r2, #3380	; 0xd34
 800143c:	f8a3 24d6 	strh.w	r2, [r3, #1238]	; 0x4d6

		osSemaphoreRelease(CC_GlobalState->sem);
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <state_driving_enter+0x144>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001448:	4618      	mov	r0, r3
 800144a:	f006 f96b 	bl	8007724 <osSemaphoreRelease>
	}
	/* Start Polling ADC */
	HAL_ADC_Start_DMA(&hadc2, CC_GlobalState->brakeAdcValues, 100);
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <state_driving_enter+0x144>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3338      	adds	r3, #56	; 0x38
 8001454:	2264      	movs	r2, #100	; 0x64
 8001456:	4619      	mov	r1, r3
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <state_driving_enter+0x148>)
 800145a:	f002 f8ad 	bl	80035b8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, CC_GlobalState->accelAdcValues, 150);
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <state_driving_enter+0x144>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001466:	2296      	movs	r2, #150	; 0x96
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <state_driving_enter+0x14c>)
 800146c:	f002 f8a4 	bl	80035b8 <HAL_ADC_Start_DMA>
	/* Else */

	/* Hard Shutdown Power Off */
	return;
 8001470:	bf00      	nop
}
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200049e0 	.word	0x200049e0
 800147c:	200049e4 	.word	0x200049e4
 8001480:	20004a2c 	.word	0x20004a2c

08001484 <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b0db      	sub	sp, #364	; 0x16c
 8001488:	af06      	add	r7, sp, #24
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	6018      	str	r0, [r3, #0]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800148e:	4bb9      	ldr	r3, [pc, #740]	; (8001774 <state_driving_iterate+0x2f0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001496:	2120      	movs	r1, #32
 8001498:	4618      	mov	r0, r3
 800149a:	f006 f8dd 	bl	8007658 <osSemaphoreAcquire>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f040 81d6 	bne.w	8001852 <state_driving_iterate+0x3ce>
	{
		/* Flash RTD */
		if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) > 1000)
 80014a6:	f001 ff77 	bl	8003398 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4bb1      	ldr	r3, [pc, #708]	; (8001774 <state_driving_iterate+0x2f0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b8:	d925      	bls.n	8001506 <state_driving_iterate+0x82>
		{
			if(!CC_GlobalState->rtdLightActive)
 80014ba:	4bae      	ldr	r3, [pc, #696]	; (8001774 <state_driving_iterate+0x2f0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f893 34dc 	ldrb.w	r3, [r3, #1244]	; 0x4dc
 80014c2:	f083 0301 	eor.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00b      	beq.n	80014e4 <state_driving_iterate+0x60>
			{
				HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d2:	48a9      	ldr	r0, [pc, #676]	; (8001778 <state_driving_iterate+0x2f4>)
 80014d4:	f003 feac 	bl	8005230 <HAL_GPIO_WritePin>
				CC_GlobalState->rtdLightActive = true;
 80014d8:	4ba6      	ldr	r3, [pc, #664]	; (8001774 <state_driving_iterate+0x2f0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 80014e2:	e00a      	b.n	80014fa <state_driving_iterate+0x76>
			}
			else
			{
				HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	48a3      	ldr	r0, [pc, #652]	; (8001778 <state_driving_iterate+0x2f4>)
 80014ec:	f003 fea0 	bl	8005230 <HAL_GPIO_WritePin>
				CC_GlobalState->rtdLightActive = false;
 80014f0:	4ba0      	ldr	r3, [pc, #640]	; (8001774 <state_driving_iterate+0x2f0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			}
			CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 80014fa:	4b9e      	ldr	r3, [pc, #632]	; (8001774 <state_driving_iterate+0x2f0>)
 80014fc:	681c      	ldr	r4, [r3, #0]
 80014fe:	f001 ff4b 	bl	8003398 <HAL_GetTick>
 8001502:	4603      	mov	r3, r0
 8001504:	6263      	str	r3, [r4, #36]	; 0x24
		}

		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8001506:	f001 ff47 	bl	8003398 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	4b99      	ldr	r3, [pc, #612]	; (8001774 <state_driving_iterate+0x2f0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d943      	bls.n	80015a0 <state_driving_iterate+0x11c>
 8001518:	4b96      	ldr	r3, [pc, #600]	; (8001774 <state_driving_iterate+0x2f0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	7e9b      	ldrb	r3, [r3, #26]
 800151e:	f083 0301 	eor.w	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03b      	beq.n	80015a0 <state_driving_iterate+0x11c>
		{
			CC_LogInfo("Fatal Shutdown AMS Driving\r\n", strlen("Fatal Shutdown AMS Driving\r\n"));
 8001528:	211c      	movs	r1, #28
 800152a:	4894      	ldr	r0, [pc, #592]	; (800177c <state_driving_iterate+0x2f8>)
 800152c:	f001 fc68 	bl	8002e00 <CC_LogInfo>
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8001530:	f7ff f8bf 	bl	80006b2 <Compose_CC_FatalShutdown>
 8001534:	4603      	mov	r3, r0
 8001536:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			CAN_TxHeaderTypeDef header =
 800153a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 800154c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
			CAN_TxHeaderTypeDef header =
 8001550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001554:	2304      	movs	r3, #4
 8001556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800155a:	2301      	movs	r3, #1
 800155c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8001560:	230f      	movs	r3, #15
 8001562:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001566:	4b83      	ldr	r3, [pc, #524]	; (8001774 <state_driving_iterate+0x2f0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800156e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001572:	4883      	ldr	r0, [pc, #524]	; (8001780 <state_driving_iterate+0x2fc>)
 8001574:	f002 fe2c 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001578:	4b7e      	ldr	r3, [pc, #504]	; (8001774 <state_driving_iterate+0x2f0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3308      	adds	r3, #8
 800157e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001582:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001586:	487f      	ldr	r0, [pc, #508]	; (8001784 <state_driving_iterate+0x300>)
 8001588:	f002 fe22 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 800158c:	4b79      	ldr	r3, [pc, #484]	; (8001774 <state_driving_iterate+0x2f0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3310      	adds	r3, #16
 8001592:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001596:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800159a:	487b      	ldr	r0, [pc, #492]	; (8001788 <state_driving_iterate+0x304>)
 800159c:	f002 fe18 	bl	80041d0 <HAL_CAN_AddTxMessage>
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 80015a0:	f001 fefa 	bl	8003398 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b73      	ldr	r3, [pc, #460]	; (8001774 <state_driving_iterate+0x2f0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d93f      	bls.n	8001632 <state_driving_iterate+0x1ae>
 80015b2:	4b70      	ldr	r3, [pc, #448]	; (8001774 <state_driving_iterate+0x2f0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	7f1b      	ldrb	r3, [r3, #28]
 80015b8:	f083 0301 	eor.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d037      	beq.n	8001632 <state_driving_iterate+0x1ae>
		{
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 80015c2:	f7ff f876 	bl	80006b2 <Compose_CC_FatalShutdown>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			CAN_TxHeaderTypeDef header =
 80015cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 80015de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
			CAN_TxHeaderTypeDef header =
 80015e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015e6:	2304      	movs	r3, #4
 80015e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015ec:	2301      	movs	r3, #1
 80015ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 80015f2:	230f      	movs	r3, #15
 80015f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80015f8:	4b5e      	ldr	r3, [pc, #376]	; (8001774 <state_driving_iterate+0x2f0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001600:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001604:	485e      	ldr	r0, [pc, #376]	; (8001780 <state_driving_iterate+0x2fc>)
 8001606:	f002 fde3 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 800160a:	4b5a      	ldr	r3, [pc, #360]	; (8001774 <state_driving_iterate+0x2f0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3308      	adds	r3, #8
 8001610:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001614:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001618:	485a      	ldr	r0, [pc, #360]	; (8001784 <state_driving_iterate+0x300>)
 800161a:	f002 fdd9 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 800161e:	4b55      	ldr	r3, [pc, #340]	; (8001774 <state_driving_iterate+0x2f0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3310      	adds	r3, #16
 8001624:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001628:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800162c:	4856      	ldr	r0, [pc, #344]	; (8001788 <state_driving_iterate+0x304>)
 800162e:	f002 fdcf 	bl	80041d0 <HAL_CAN_AddTxMessage>
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8001632:	f001 feb1 	bl	8003398 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <state_driving_iterate+0x2f0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	; 0x64
 8001642:	d93a      	bls.n	80016ba <state_driving_iterate+0x236>
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <state_driving_iterate+0x2f0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	7edb      	ldrb	r3, [r3, #27]
 800164a:	f083 0301 	eor.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d032      	beq.n	80016ba <state_driving_iterate+0x236>
		{
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8001654:	f7ff f82d 	bl	80006b2 <Compose_CC_FatalShutdown>
 8001658:	4603      	mov	r3, r0
 800165a:	67fb      	str	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 800165c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 800166e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 8001670:	66bb      	str	r3, [r7, #104]	; 0x68
 8001672:	2304      	movs	r3, #4
 8001674:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001676:	2301      	movs	r3, #1
 8001678:	677b      	str	r3, [r7, #116]	; 0x74
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 800167a:	230f      	movs	r3, #15
 800167c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001680:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <state_driving_iterate+0x2f0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001688:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800168c:	483c      	ldr	r0, [pc, #240]	; (8001780 <state_driving_iterate+0x2fc>)
 800168e:	f002 fd9f 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001692:	4b38      	ldr	r3, [pc, #224]	; (8001774 <state_driving_iterate+0x2f0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3308      	adds	r3, #8
 8001698:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800169c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80016a0:	4838      	ldr	r0, [pc, #224]	; (8001784 <state_driving_iterate+0x300>)
 80016a2:	f002 fd95 	bl	80041d0 <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 80016a6:	4b33      	ldr	r3, [pc, #204]	; (8001774 <state_driving_iterate+0x2f0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3310      	adds	r3, #16
 80016ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016b0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80016b4:	4834      	ldr	r0, [pc, #208]	; (8001788 <state_driving_iterate+0x304>)
 80016b6:	f002 fd8b 	bl	80041d0 <HAL_CAN_AddTxMessage>
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <state_driving_iterate+0x2f0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80016c2:	4618      	mov	r0, r3
 80016c4:	f006 f82e 	bl	8007724 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 80016c8:	e0c3      	b.n	8001852 <state_driving_iterate+0x3ce>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <state_driving_iterate+0x2f0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80016d2:	f107 010c 	add.w	r1, r7, #12
 80016d6:	2300      	movs	r3, #0
 80016d8:	2200      	movs	r2, #0
 80016da:	f006 f975 	bl	80079c8 <osMessageQueueGet>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f040 80b6 	bne.w	8001852 <state_driving_iterate+0x3ce>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	685c      	ldr	r4, [r3, #4]
 80016ec:	2300      	movs	r3, #0
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2301      	movs	r3, #1
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	2200      	movs	r2, #0
 80016f8:	2110      	movs	r1, #16
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff f98a 	bl	8000a14 <Compose_CANId>
 8001700:	4603      	mov	r3, r0
 8001702:	429c      	cmp	r4, r3
 8001704:	d142      	bne.n	800178c <state_driving_iterate+0x308>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <state_driving_iterate+0x2f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800170e:	2120      	movs	r1, #32
 8001710:	4618      	mov	r0, r3
 8001712:	f005 ffa1 	bl	8007658 <osSemaphoreAcquire>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 809a 	bne.w	8001852 <state_driving_iterate+0x3ce>
				{
					bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(*((AMS_HeartbeatResponse_t*)&(msg.data)), &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	f103 021c 	add.w	r2, r3, #28
 8001726:	f107 015f 	add.w	r1, r7, #95	; 0x5f
 800172a:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800172e:	9305      	str	r3, [sp, #20]
 8001730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001734:	9304      	str	r3, [sp, #16]
 8001736:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 800173a:	9303      	str	r3, [sp, #12]
 800173c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	460b      	mov	r3, r1
 8001750:	ca07      	ldmia	r2, {r0, r1, r2}
 8001752:	f7fe ff45 	bl	80005e0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <state_driving_iterate+0x2f0>)
 8001758:	681c      	ldr	r4, [r3, #0]
 800175a:	f001 fe1d 	bl	8003398 <HAL_GetTick>
 800175e:	4603      	mov	r3, r0
 8001760:	62e3      	str	r3, [r4, #44]	; 0x2c
					osSemaphoreRelease(CC_GlobalState->sem);
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <state_driving_iterate+0x2f0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800176a:	4618      	mov	r0, r3
 800176c:	f005 ffda 	bl	8007724 <osSemaphoreRelease>
 8001770:	e06f      	b.n	8001852 <state_driving_iterate+0x3ce>
 8001772:	bf00      	nop
 8001774:	200049e0 	.word	0x200049e0
 8001778:	40021000 	.word	0x40021000
 800177c:	0800b62c 	.word	0x0800b62c
 8001780:	20004bcc 	.word	0x20004bcc
 8001784:	20004ba4 	.word	0x20004ba4
 8001788:	20004b7c 	.word	0x20004b7c
				}
			}
			/* Shutdown Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	685c      	ldr	r4, [r3, #4]
 8001792:	2300      	movs	r3, #0
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	2301      	movs	r3, #1
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2301      	movs	r3, #1
 800179c:	2200      	movs	r2, #0
 800179e:	2106      	movs	r1, #6
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff f937 	bl	8000a14 <Compose_CANId>
 80017a6:	4603      	mov	r3, r0
 80017a8:	429c      	cmp	r4, r3
 80017aa:	d121      	bne.n	80017f0 <state_driving_iterate+0x36c>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80017ac:	4bab      	ldr	r3, [pc, #684]	; (8001a5c <state_driving_iterate+0x5d8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80017b4:	2120      	movs	r1, #32
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 ff4e 	bl	8007658 <osSemaphoreAcquire>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d147      	bne.n	8001852 <state_driving_iterate+0x3ce>
				{
					uint8_t segmentState;
					Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	331c      	adds	r3, #28
 80017c8:	f107 0255 	add.w	r2, r7, #85	; 0x55
 80017cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017d0:	f7ff f956 	bl	8000a80 <Parse_SHDN_HeartbeatResponse>
					CC_GlobalState->shutdownTicks = HAL_GetTick();
 80017d4:	4ba1      	ldr	r3, [pc, #644]	; (8001a5c <state_driving_iterate+0x5d8>)
 80017d6:	681c      	ldr	r4, [r3, #0]
 80017d8:	f001 fdde 	bl	8003398 <HAL_GetTick>
 80017dc:	4603      	mov	r3, r0
 80017de:	6323      	str	r3, [r4, #48]	; 0x30
					osSemaphoreRelease(CC_GlobalState->sem);
 80017e0:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <state_driving_iterate+0x5d8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 ff9b 	bl	8007724 <osSemaphoreRelease>
 80017ee:	e030      	b.n	8001852 <state_driving_iterate+0x3ce>
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	685c      	ldr	r4, [r3, #4]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	2301      	movs	r3, #1
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	2200      	movs	r2, #0
 8001802:	2110      	movs	r1, #16
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff f905 	bl	8000a14 <Compose_CANId>
 800180a:	4603      	mov	r3, r0
 800180c:	429c      	cmp	r4, r3
 800180e:	d120      	bne.n	8001852 <state_driving_iterate+0x3ce>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001818:	2120      	movs	r1, #32
 800181a:	4618      	mov	r0, r3
 800181c:	f005 ff1c 	bl	8007658 <osSemaphoreAcquire>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d115      	bne.n	8001852 <state_driving_iterate+0x3ce>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	331c      	adds	r3, #28
 800182c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001830:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001834:	f7ff f935 	bl	8000aa2 <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001838:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <state_driving_iterate+0x5d8>)
 800183a:	681c      	ldr	r4, [r3, #0]
 800183c:	f001 fdac 	bl	8003398 <HAL_GetTick>
 8001840:	4603      	mov	r3, r0
 8001842:	6363      	str	r3, [r4, #52]	; 0x34
					osSemaphoreRelease(CC_GlobalState->sem);
 8001844:	4b85      	ldr	r3, [pc, #532]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800184c:	4618      	mov	r0, r3
 800184e:	f005 ff69 	bl	8007724 <osSemaphoreRelease>
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8001852:	4b82      	ldr	r3, [pc, #520]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800185a:	4618      	mov	r0, r3
 800185c:	f006 f926 	bl	8007aac <osMessageQueueGetCount>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	f47f af31 	bne.w	80016ca <state_driving_iterate+0x246>
	uint16_t brake_travel_one; uint16_t brake_travel_two;
	uint16_t accel_travel_one; uint16_t accel_travel_two; uint16_t accel_travel_three;
	char x[80]; uint32_t len;

	/* Echo ADC Failure for Debugging */
	if(CC_GlobalState->faultDetected)
 8001868:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <state_driving_iterate+0x5d8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <state_driving_iterate+0x3f8>
	{
		CC_LogInfo("ADC Fault Detected\r\n", strlen("ADC Fault Detected\r\n"));
 8001874:	2114      	movs	r1, #20
 8001876:	487a      	ldr	r0, [pc, #488]	; (8001a60 <state_driving_iterate+0x5dc>)
 8001878:	f001 fac2 	bl	8002e00 <CC_LogInfo>
	}
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800187c:	4b77      	ldr	r3, [pc, #476]	; (8001a5c <state_driving_iterate+0x5d8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001884:	2120      	movs	r1, #32
 8001886:	4618      	mov	r0, r3
 8001888:	f005 fee6 	bl	8007658 <osSemaphoreAcquire>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 8159 	bne.w	8001b46 <state_driving_iterate+0x6c2>
	{
		/* Check for non-expected ADC Values
		 * Trigger Fault outside expected range
		 * Power trip, surge to sensor etc.
		 */
		if(!CC_GlobalState->faultDetected
 8001894:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 800189c:	f083 0301 	eor.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d036      	beq.n	8001914 <state_driving_iterate+0x490>
				&& (CC_GlobalState->brakeAdcValues[0] <= CC_GlobalState->brakeOneMin - 100
 80018a6:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <state_driving_iterate+0x5d8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ac:	4a6b      	ldr	r2, [pc, #428]	; (8001a5c <state_driving_iterate+0x5d8>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	f8b2 244c 	ldrh.w	r2, [r2, #1100]	; 0x44c
 80018b4:	3a64      	subs	r2, #100	; 0x64
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d91d      	bls.n	80018f6 <state_driving_iterate+0x472>
						|| CC_GlobalState->brakeAdcValues[0] >= CC_GlobalState->brakeOneMax + 100
 80018ba:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <state_driving_iterate+0x5d8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	4a66      	ldr	r2, [pc, #408]	; (8001a5c <state_driving_iterate+0x5d8>)
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	f8b2 244e 	ldrh.w	r2, [r2, #1102]	; 0x44e
 80018c8:	3264      	adds	r2, #100	; 0x64
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d213      	bcs.n	80018f6 <state_driving_iterate+0x472>
						|| CC_GlobalState->brakeAdcValues[1] <= CC_GlobalState->brakeTwoMin - 100
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <state_driving_iterate+0x5d8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d4:	4a61      	ldr	r2, [pc, #388]	; (8001a5c <state_driving_iterate+0x5d8>)
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	f8b2 2450 	ldrh.w	r2, [r2, #1104]	; 0x450
 80018dc:	3a64      	subs	r2, #100	; 0x64
 80018de:	4293      	cmp	r3, r2
 80018e0:	d909      	bls.n	80018f6 <state_driving_iterate+0x472>
						|| CC_GlobalState->brakeAdcValues[1] >= CC_GlobalState->brakeTwoMax + 100))
 80018e2:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <state_driving_iterate+0x5d8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	4a5c      	ldr	r2, [pc, #368]	; (8001a5c <state_driving_iterate+0x5d8>)
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	f8b2 2452 	ldrh.w	r2, [r2, #1106]	; 0x452
 80018f0:	3264      	adds	r2, #100	; 0x64
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d30e      	bcc.n	8001914 <state_driving_iterate+0x490>
		{
			CC_GlobalState->faultDetected = true;
 80018f6:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <state_driving_iterate+0x5d8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001900:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001902:	681c      	ldr	r4, [r3, #0]
 8001904:	f001 fd48 	bl	8003398 <HAL_GetTick>
 8001908:	4603      	mov	r3, r0
 800190a:	62a3      	str	r3, [r4, #40]	; 0x28
			CC_LogInfo("Dumb Catch\r\n", strlen("Dumb Catch\r\n"));
 800190c:	210c      	movs	r1, #12
 800190e:	4855      	ldr	r0, [pc, #340]	; (8001a64 <state_driving_iterate+0x5e0>)
 8001910:	f001 fa76 	bl	8002e00 <CC_LogInfo>
		}
		if(!CC_GlobalState->faultDetected
 8001914:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 800191c:	f083 0301 	eor.w	r3, r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d050      	beq.n	80019c8 <state_driving_iterate+0x544>
				&& (CC_GlobalState->accelAdcValues[0] <= CC_GlobalState->accelOneMin - 100
 8001926:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800192e:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	f8b2 24cc 	ldrh.w	r2, [r2, #1228]	; 0x4cc
 8001936:	3a64      	subs	r2, #100	; 0x64
 8001938:	4293      	cmp	r3, r2
 800193a:	d936      	bls.n	80019aa <state_driving_iterate+0x526>
				|| CC_GlobalState->accelAdcValues[0] >= CC_GlobalState->accelOneMax + 100
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <state_driving_iterate+0x5d8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001944:	4a45      	ldr	r2, [pc, #276]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	f8b2 24ce 	ldrh.w	r2, [r2, #1230]	; 0x4ce
 800194c:	3264      	adds	r2, #100	; 0x64
 800194e:	4293      	cmp	r3, r2
 8001950:	d22b      	bcs.n	80019aa <state_driving_iterate+0x526>
				|| CC_GlobalState->accelAdcValues[1] <= CC_GlobalState->accelTwoMin - 100
 8001952:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800195a:	4a40      	ldr	r2, [pc, #256]	; (8001a5c <state_driving_iterate+0x5d8>)
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	f8b2 24d0 	ldrh.w	r2, [r2, #1232]	; 0x4d0
 8001962:	3a64      	subs	r2, #100	; 0x64
 8001964:	4293      	cmp	r3, r2
 8001966:	d920      	bls.n	80019aa <state_driving_iterate+0x526>
				|| CC_GlobalState->accelAdcValues[1] >= CC_GlobalState->accelTwoMax + 100
 8001968:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <state_driving_iterate+0x5d8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8001970:	4a3a      	ldr	r2, [pc, #232]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	f8b2 24d2 	ldrh.w	r2, [r2, #1234]	; 0x4d2
 8001978:	3264      	adds	r2, #100	; 0x64
 800197a:	4293      	cmp	r3, r2
 800197c:	d215      	bcs.n	80019aa <state_driving_iterate+0x526>
				|| CC_GlobalState->accelAdcValues[2] <= CC_GlobalState->accelThreeMin - 100
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001986:	4a35      	ldr	r2, [pc, #212]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	f8b2 24d4 	ldrh.w	r2, [r2, #1236]	; 0x4d4
 800198e:	3a64      	subs	r2, #100	; 0x64
 8001990:	4293      	cmp	r3, r2
 8001992:	d90a      	bls.n	80019aa <state_driving_iterate+0x526>
				|| CC_GlobalState->accelAdcValues[2] >= CC_GlobalState->accelThreeMax + 100))
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800199c:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <state_driving_iterate+0x5d8>)
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	f8b2 24d6 	ldrh.w	r2, [r2, #1238]	; 0x4d6
 80019a4:	3264      	adds	r2, #100	; 0x64
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d30e      	bcc.n	80019c8 <state_driving_iterate+0x544>
		{
			CC_GlobalState->faultDetected = true;
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <state_driving_iterate+0x5d8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <state_driving_iterate+0x5d8>)
 80019b6:	681c      	ldr	r4, [r3, #0]
 80019b8:	f001 fcee 	bl	8003398 <HAL_GetTick>
 80019bc:	4603      	mov	r3, r0
 80019be:	62a3      	str	r3, [r4, #40]	; 0x28
			CC_LogInfo("Dumb Catch\r\n", strlen("Dumb Catch\r\n"));
 80019c0:	210c      	movs	r1, #12
 80019c2:	4828      	ldr	r0, [pc, #160]	; (8001a64 <state_driving_iterate+0x5e0>)
 80019c4:	f001 fa1c 	bl	8002e00 <CC_LogInfo>
		}

		/* Brake Travel Record & Sum 10 Values */
		for (int i=0; i < 10; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019ce:	e0ae      	b.n	8001b2e <state_driving_iterate+0x6aa>
		{
			if (i == 9)
 80019d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80019d4:	2b09      	cmp	r3, #9
 80019d6:	d147      	bne.n	8001a68 <state_driving_iterate+0x5e4>
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[0];
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <state_driving_iterate+0x5d8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <state_driving_iterate+0x5d8>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	b289      	uxth	r1, r1
 80019e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80019e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	460a      	mov	r2, r1
 80019f2:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[1];
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <state_driving_iterate+0x5d8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <state_driving_iterate+0x5d8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b291      	uxth	r1, r2
 8001a00:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a04:	f502 7207 	add.w	r2, r2, #540	; 0x21c
 8001a08:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->accelAdcValues[0];
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001a12:	6811      	ldr	r1, [r2, #0]
 8001a14:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a1c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[1];
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001a2c:	6811      	ldr	r1, [r2, #0]
 8001a2e:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8001a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a36:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[2];
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <state_driving_iterate+0x5d8>)
 8001a46:	6811      	ldr	r1, [r2, #0]
 8001a48:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 8001a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	e063      	b.n	8001b24 <state_driving_iterate+0x6a0>
 8001a5c:	200049e0 	.word	0x200049e0
 8001a60:	0800b64c 	.word	0x0800b64c
 8001a64:	0800b664 	.word	0x0800b664
			}
			else
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->rollingBrakeValues[i+1];
 8001a68:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <state_driving_iterate+0x708>)
 8001a6a:	6819      	ldr	r1, [r3, #0]
 8001a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <state_driving_iterate+0x708>)
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	440b      	add	r3, r1
 8001a7e:	8899      	ldrh	r1, [r3, #4]
 8001a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	460a      	mov	r2, r1
 8001a8e:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->secondaryRollingBrakeValues[i+1];
 8001a90:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <state_driving_iterate+0x708>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a98:	1c59      	adds	r1, r3, #1
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <state_driving_iterate+0x708>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f501 7107 	add.w	r1, r1, #540	; 0x21c
 8001aa2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001aa6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001aaa:	f502 7207 	add.w	r2, r2, #540	; 0x21c
 8001aae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->rollingAccelValues[i+1];
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <state_driving_iterate+0x708>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001aba:	3301      	adds	r3, #1
 8001abc:	4933      	ldr	r1, [pc, #204]	; (8001b8c <state_driving_iterate+0x708>)
 8001abe:	6809      	ldr	r1, [r1, #0]
 8001ac0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ace:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->secondaryRollingAccelValues[i+1];
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <state_driving_iterate+0x708>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	492a      	ldr	r1, [pc, #168]	; (8001b8c <state_driving_iterate+0x708>)
 8001ae4:	6809      	ldr	r1, [r1, #0]
 8001ae6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001af4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->tertiaryRollingAccelValues[i+1];
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <state_driving_iterate+0x708>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001b06:	3301      	adds	r3, #1
 8001b08:	4920      	ldr	r1, [pc, #128]	; (8001b8c <state_driving_iterate+0x708>)
 8001b0a:	6809      	ldr	r1, [r1, #0]
 8001b0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001b1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	605a      	str	r2, [r3, #4]
		for (int i=0; i < 10; i++)
 8001b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001b32:	2b09      	cmp	r3, #9
 8001b34:	f77f af4c 	ble.w	80019d0 <state_driving_iterate+0x54c>
			}
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <state_driving_iterate+0x708>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 fdef 	bl	8007724 <osSemaphoreRelease>
	}

	uint32_t brake_one_sum = 0; uint32_t brake_one_avg = 0;uint32_t brake_two_sum = 0;uint32_t brake_two_avg = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint32_t accel_one_sum = 0; uint32_t accel_one_avg = 0; uint32_t accel_two_avg = 0; uint32_t accel_three_sum = 0; uint32_t accel_three_avg = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	uint32_t accel_two_sum = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	for (int i=0; i < 10; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001b88:	e04e      	b.n	8001c28 <state_driving_iterate+0x7a4>
 8001b8a:	bf00      	nop
 8001b8c:	200049e0 	.word	0x200049e0
	{
		brake_one_sum += CC_GlobalState->rollingBrakeValues[i];
 8001b90:	4bc0      	ldr	r3, [pc, #768]	; (8001e94 <state_driving_iterate+0xa10>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b98:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	889b      	ldrh	r3, [r3, #4]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001ba8:	4413      	add	r3, r2
 8001baa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		brake_two_sum += CC_GlobalState->secondaryRollingBrakeValues[i];
 8001bae:	4bb9      	ldr	r3, [pc, #740]	; (8001e94 <state_driving_iterate+0xa10>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001bb6:	f502 7207 	add.w	r2, r2, #540	; 0x21c
 8001bba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		accel_one_sum += CC_GlobalState->rollingAccelValues[i];
 8001bca:	4bb2      	ldr	r3, [pc, #712]	; (8001e94 <state_driving_iterate+0xa10>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bd2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001be0:	4413      	add	r3, r2
 8001be2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		accel_two_sum += CC_GlobalState->secondaryRollingAccelValues[i];
 8001be6:	4bab      	ldr	r3, [pc, #684]	; (8001e94 <state_driving_iterate+0xa10>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bee:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		accel_three_sum += CC_GlobalState->tertiaryRollingAccelValues[i];
 8001c02:	4ba4      	ldr	r3, [pc, #656]	; (8001e94 <state_driving_iterate+0xa10>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001c18:	4413      	add	r3, r2
 8001c1a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	for (int i=0; i < 10; i++)
 8001c1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c22:	3301      	adds	r3, #1
 8001c24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001c28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	ddaf      	ble.n	8001b90 <state_driving_iterate+0x70c>
	}

	/* Average 10 Latest Brake Travel Values */
	brake_one_avg = brake_one_sum / 10;
 8001c30:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001c34:	4a98      	ldr	r2, [pc, #608]	; (8001e98 <state_driving_iterate+0xa14>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	brake_two_avg = brake_two_sum / 10;
 8001c40:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001c44:	4a94      	ldr	r2, [pc, #592]	; (8001e98 <state_driving_iterate+0xa14>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	accel_one_avg = accel_one_sum / 10;
 8001c50:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001c54:	4a90      	ldr	r2, [pc, #576]	; (8001e98 <state_driving_iterate+0xa14>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	08db      	lsrs	r3, r3, #3
 8001c5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	accel_two_avg = accel_two_sum / 10;
 8001c60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c64:	4a8c      	ldr	r2, [pc, #560]	; (8001e98 <state_driving_iterate+0xa14>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	accel_three_avg = accel_three_sum / 10;
 8001c70:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c74:	4a88      	ldr	r2, [pc, #544]	; (8001e98 <state_driving_iterate+0xa14>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001c80:	4b84      	ldr	r3, [pc, #528]	; (8001e94 <state_driving_iterate+0xa10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001c88:	2120      	movs	r1, #32
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f005 fce4 	bl	8007658 <osSemaphoreAcquire>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 8218 	bne.w	80020c8 <state_driving_iterate+0xc44>
	{
		/* Check for New Min/Max Brake Values */
		if(CC_GlobalState->rollingBrakeValues[0] > 0 && CC_GlobalState->secondaryRollingBrakeValues[0] > 0)
 8001c98:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <state_driving_iterate+0xa10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d069      	beq.n	8001d78 <state_driving_iterate+0x8f4>
 8001ca4:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <state_driving_iterate+0xa10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d063      	beq.n	8001d78 <state_driving_iterate+0x8f4>
		{
			if(brake_one_avg <= CC_GlobalState->brakeOneMin && !CC_GlobalState->faultDetected)
 8001cb0:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <state_driving_iterate+0xa10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 344c 	ldrh.w	r3, [r3, #1100]	; 0x44c
 8001cb8:	461a      	mov	r2, r3
 8001cba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d80f      	bhi.n	8001ce2 <state_driving_iterate+0x85e>
 8001cc2:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <state_driving_iterate+0xa10>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001cca:	f083 0301 	eor.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <state_driving_iterate+0x85e>
			{
				CC_GlobalState->brakeOneMin = brake_one_avg;
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <state_driving_iterate+0xa10>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
			}
			if(brake_one_avg >= CC_GlobalState->brakeOneMax && !CC_GlobalState->faultDetected)
 8001ce2:	4b6c      	ldr	r3, [pc, #432]	; (8001e94 <state_driving_iterate+0xa10>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8b3 344e 	ldrh.w	r3, [r3, #1102]	; 0x44e
 8001cea:	461a      	mov	r2, r3
 8001cec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d30f      	bcc.n	8001d14 <state_driving_iterate+0x890>
 8001cf4:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <state_driving_iterate+0xa10>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <state_driving_iterate+0x890>
			{
				CC_GlobalState->brakeOneMax = brake_one_avg;
 8001d06:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	f8a3 244e 	strh.w	r2, [r3, #1102]	; 0x44e
			}
			if(brake_two_avg <= CC_GlobalState->brakeTwoMin && !CC_GlobalState->faultDetected)
 8001d14:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3450 	ldrh.w	r3, [r3, #1104]	; 0x450
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d80f      	bhi.n	8001d46 <state_driving_iterate+0x8c2>
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001d2e:	f083 0301 	eor.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <state_driving_iterate+0x8c2>
			{
				CC_GlobalState->brakeTwoMin = brake_two_avg;
 8001d38:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d40:	b292      	uxth	r2, r2
 8001d42:	f8a3 2450 	strh.w	r2, [r3, #1104]	; 0x450
			}
			if(brake_two_avg >= CC_GlobalState->brakeTwoMax && !CC_GlobalState->faultDetected)
 8001d46:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	; 0x452
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d30f      	bcc.n	8001d78 <state_driving_iterate+0x8f4>
 8001d58:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001d60:	f083 0301 	eor.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <state_driving_iterate+0x8f4>
			{
				CC_GlobalState->brakeTwoMax = brake_two_avg;
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d72:	b292      	uxth	r2, r2
 8001d74:	f8a3 2452 	strh.w	r2, [r3, #1106]	; 0x452
			}
		}
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->secondaryRollingAccelValues[0] > 0 && CC_GlobalState->tertiaryRollingAccelValues[0] > 0)
 8001d78:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a9 	beq.w	8001ed8 <state_driving_iterate+0xa54>
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 80a2 	beq.w	8001ed8 <state_driving_iterate+0xa54>
 8001d94:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <state_driving_iterate+0xa10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 809b 	beq.w	8001ed8 <state_driving_iterate+0xa54>
		{
			if(accel_one_avg <= CC_GlobalState->accelOneMin && !CC_GlobalState->faultDetected)
 8001da2:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <state_driving_iterate+0xa10>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8b3 34cc 	ldrh.w	r3, [r3, #1228]	; 0x4cc
 8001daa:	461a      	mov	r2, r3
 8001dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d80f      	bhi.n	8001dd4 <state_driving_iterate+0x950>
 8001db4:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <state_driving_iterate+0xa10>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001dbc:	f083 0301 	eor.w	r3, r3, #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <state_driving_iterate+0x950>
			{
				CC_GlobalState->accelOneMin = accel_one_avg;
 8001dc6:	4b33      	ldr	r3, [pc, #204]	; (8001e94 <state_driving_iterate+0xa10>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
			}
			if(accel_one_avg >= CC_GlobalState->accelOneMax && !CC_GlobalState->faultDetected)
 8001dd4:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <state_driving_iterate+0xa10>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 34ce 	ldrh.w	r3, [r3, #1230]	; 0x4ce
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d30f      	bcc.n	8001e06 <state_driving_iterate+0x982>
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <state_driving_iterate+0xa10>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001dee:	f083 0301 	eor.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <state_driving_iterate+0x982>
			{
				CC_GlobalState->accelOneMax = accel_one_avg;
 8001df8:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <state_driving_iterate+0xa10>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001e00:	b292      	uxth	r2, r2
 8001e02:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce
			}
			if(accel_two_avg <= CC_GlobalState->accelTwoMin && !CC_GlobalState->faultDetected)
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <state_driving_iterate+0xa10>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8b3 34d0 	ldrh.w	r3, [r3, #1232]	; 0x4d0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d80f      	bhi.n	8001e38 <state_driving_iterate+0x9b4>
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <state_driving_iterate+0xa10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001e20:	f083 0301 	eor.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <state_driving_iterate+0x9b4>
			{
				CC_GlobalState->accelTwoMin = accel_two_avg;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <state_driving_iterate+0xa10>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001e32:	b292      	uxth	r2, r2
 8001e34:	f8a3 24d0 	strh.w	r2, [r3, #1232]	; 0x4d0
			}
			if(accel_two_avg >= CC_GlobalState->accelTwoMax && !CC_GlobalState->faultDetected)
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <state_driving_iterate+0xa10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8b3 34d2 	ldrh.w	r3, [r3, #1234]	; 0x4d2
 8001e40:	461a      	mov	r2, r3
 8001e42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d30f      	bcc.n	8001e6a <state_driving_iterate+0x9e6>
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <state_driving_iterate+0xa10>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001e52:	f083 0301 	eor.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <state_driving_iterate+0x9e6>
			{
				CC_GlobalState->accelTwoMax = accel_two_avg;
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <state_driving_iterate+0xa10>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001e64:	b292      	uxth	r2, r2
 8001e66:	f8a3 24d2 	strh.w	r2, [r3, #1234]	; 0x4d2
			}
			if(accel_three_avg <= CC_GlobalState->accelThreeMin && !CC_GlobalState->faultDetected)
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <state_driving_iterate+0xa10>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001e72:	461a      	mov	r2, r3
 8001e74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d814      	bhi.n	8001ea6 <state_driving_iterate+0xa22>
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <state_driving_iterate+0xa10>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001e84:	f083 0301 	eor.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <state_driving_iterate+0xa22>
			{
				CC_GlobalState->accelThreeMin = accel_three_avg;
 8001e8e:	4b01      	ldr	r3, [pc, #4]	; (8001e94 <state_driving_iterate+0xa10>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	e003      	b.n	8001e9c <state_driving_iterate+0xa18>
 8001e94:	200049e0 	.word	0x200049e0
 8001e98:	cccccccd 	.word	0xcccccccd
 8001e9c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
			}
			if(accel_three_avg >= CC_GlobalState->accelThreeMax && !CC_GlobalState->faultDetected)
 8001ea6:	4bbb      	ldr	r3, [pc, #748]	; (8002194 <state_driving_iterate+0xd10>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8b3 34d6 	ldrh.w	r3, [r3, #1238]	; 0x4d6
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d30f      	bcc.n	8001ed8 <state_driving_iterate+0xa54>
 8001eb8:	4bb6      	ldr	r3, [pc, #728]	; (8002194 <state_driving_iterate+0xd10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001ec0:	f083 0301 	eor.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <state_driving_iterate+0xa54>
			{
				CC_GlobalState->accelThreeMax = accel_three_avg;
 8001eca:	4bb2      	ldr	r3, [pc, #712]	; (8002194 <state_driving_iterate+0xd10>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	f8a3 24d6 	strh.w	r2, [r3, #1238]	; 0x4d6
			}
		}

		/* Map Travel to Pedal Pos */
		brake_travel_one = map(brake_one_avg, CC_GlobalState->brakeOneMin+2, CC_GlobalState->brakeOneMax-5, 0, 100);
 8001ed8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001edc:	4bad      	ldr	r3, [pc, #692]	; (8002194 <state_driving_iterate+0xd10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 344c 	ldrh.w	r3, [r3, #1100]	; 0x44c
 8001ee4:	1c99      	adds	r1, r3, #2
 8001ee6:	4bab      	ldr	r3, [pc, #684]	; (8002194 <state_driving_iterate+0xd10>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 344e 	ldrh.w	r3, [r3, #1102]	; 0x44e
 8001eee:	1f5a      	subs	r2, r3, #5
 8001ef0:	2364      	movs	r3, #100	; 0x64
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f7fe fde5 	bl	8000ac4 <map>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
		brake_travel_two = map(brake_two_avg, CC_GlobalState->brakeTwoMin+2, CC_GlobalState->brakeTwoMax-5, 0, 100);
 8001f00:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001f04:	4ba3      	ldr	r3, [pc, #652]	; (8002194 <state_driving_iterate+0xd10>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3450 	ldrh.w	r3, [r3, #1104]	; 0x450
 8001f0c:	1c99      	adds	r1, r3, #2
 8001f0e:	4ba1      	ldr	r3, [pc, #644]	; (8002194 <state_driving_iterate+0xd10>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	; 0x452
 8001f16:	1f5a      	subs	r2, r3, #5
 8001f18:	2364      	movs	r3, #100	; 0x64
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f7fe fdd1 	bl	8000ac4 <map>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

		accel_travel_one = map(accel_one_avg, CC_GlobalState->accelOneMin, CC_GlobalState->accelOneMax-5, 0, 100);
 8001f28:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001f2c:	4b99      	ldr	r3, [pc, #612]	; (8002194 <state_driving_iterate+0xd10>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 34cc 	ldrh.w	r3, [r3, #1228]	; 0x4cc
 8001f34:	4619      	mov	r1, r3
 8001f36:	4b97      	ldr	r3, [pc, #604]	; (8002194 <state_driving_iterate+0xd10>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 34ce 	ldrh.w	r3, [r3, #1230]	; 0x4ce
 8001f3e:	1f5a      	subs	r2, r3, #5
 8001f40:	2364      	movs	r3, #100	; 0x64
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2300      	movs	r3, #0
 8001f46:	f7fe fdbd 	bl	8000ac4 <map>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
		accel_travel_two = map(accel_two_avg, CC_GlobalState->accelTwoMin, CC_GlobalState->accelTwoMax-5, 0, 100);
 8001f50:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001f54:	4b8f      	ldr	r3, [pc, #572]	; (8002194 <state_driving_iterate+0xd10>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 34d0 	ldrh.w	r3, [r3, #1232]	; 0x4d0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4b8d      	ldr	r3, [pc, #564]	; (8002194 <state_driving_iterate+0xd10>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8b3 34d2 	ldrh.w	r3, [r3, #1234]	; 0x4d2
 8001f66:	1f5a      	subs	r2, r3, #5
 8001f68:	2364      	movs	r3, #100	; 0x64
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f7fe fda9 	bl	8000ac4 <map>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
		accel_travel_three = map(accel_three_avg, CC_GlobalState->accelThreeMin, CC_GlobalState->accelThreeMax-5, 0, 100);
 8001f78:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001f7c:	4b85      	ldr	r3, [pc, #532]	; (8002194 <state_driving_iterate+0xd10>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4b83      	ldr	r3, [pc, #524]	; (8002194 <state_driving_iterate+0xd10>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8b3 34d6 	ldrh.w	r3, [r3, #1238]	; 0x4d6
 8001f8e:	1f5a      	subs	r2, r3, #5
 8001f90:	2364      	movs	r3, #100	; 0x64
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2300      	movs	r3, #0
 8001f96:	f7fe fd95 	bl	8000ac4 <map>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

		/* Ensure Brake & Accel Pots Synced */
		if(!CC_GlobalState->faultDetected
 8001fa0:	4b7c      	ldr	r3, [pc, #496]	; (8002194 <state_driving_iterate+0xd10>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d018      	beq.n	8001fe4 <state_driving_iterate+0xb60>
				&& (brake_travel_one >= brake_travel_two+10
 8001fb2:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8001fb6:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8001fba:	330a      	adds	r3, #10
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	da06      	bge.n	8001fce <state_driving_iterate+0xb4a>
				|| brake_travel_one <= brake_travel_two-10))
 8001fc0:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8001fc4:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8001fc8:	3b0a      	subs	r3, #10
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dc0a      	bgt.n	8001fe4 <state_driving_iterate+0xb60>
		{
			CC_GlobalState->faultDetected = true;
 8001fce:	4b71      	ldr	r3, [pc, #452]	; (8002194 <state_driving_iterate+0xd10>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001fd8:	4b6e      	ldr	r3, [pc, #440]	; (8002194 <state_driving_iterate+0xd10>)
 8001fda:	681c      	ldr	r4, [r3, #0]
 8001fdc:	f001 f9dc 	bl	8003398 <HAL_GetTick>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	62a3      	str	r3, [r4, #40]	; 0x28
		}
		if(!CC_GlobalState->faultDetected
 8001fe4:	4b6b      	ldr	r3, [pc, #428]	; (8002194 <state_driving_iterate+0xd10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8001fec:	f083 0301 	eor.w	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d034      	beq.n	8002060 <state_driving_iterate+0xbdc>
				&& (accel_travel_one >= accel_travel_two+10
 8001ff6:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8001ffa:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8001ffe:	330a      	adds	r3, #10
 8002000:	429a      	cmp	r2, r3
 8002002:	da22      	bge.n	800204a <state_driving_iterate+0xbc6>
				|| accel_travel_one <= accel_travel_two-10
 8002004:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8002008:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800200c:	3b0a      	subs	r3, #10
 800200e:	429a      	cmp	r2, r3
 8002010:	dd1b      	ble.n	800204a <state_driving_iterate+0xbc6>
				|| accel_travel_one >= accel_travel_three+10
 8002012:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8002016:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800201a:	330a      	adds	r3, #10
 800201c:	429a      	cmp	r2, r3
 800201e:	da14      	bge.n	800204a <state_driving_iterate+0xbc6>
				|| accel_travel_one <= accel_travel_three-10
 8002020:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8002024:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002028:	3b0a      	subs	r3, #10
 800202a:	429a      	cmp	r2, r3
 800202c:	dd0d      	ble.n	800204a <state_driving_iterate+0xbc6>
				|| accel_travel_two >= accel_travel_three+10
 800202e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002032:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002036:	330a      	adds	r3, #10
 8002038:	429a      	cmp	r2, r3
 800203a:	da06      	bge.n	800204a <state_driving_iterate+0xbc6>
				|| accel_travel_two <= accel_travel_three-10))
 800203c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002040:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002044:	3b0a      	subs	r3, #10
 8002046:	429a      	cmp	r2, r3
 8002048:	dc0a      	bgt.n	8002060 <state_driving_iterate+0xbdc>
		{
			CC_GlobalState->faultDetected = true;
 800204a:	4b52      	ldr	r3, [pc, #328]	; (8002194 <state_driving_iterate+0xd10>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 8002054:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <state_driving_iterate+0xd10>)
 8002056:	681c      	ldr	r4, [r3, #0]
 8002058:	f001 f99e 	bl	8003398 <HAL_GetTick>
 800205c:	4603      	mov	r3, r0
 800205e:	62a3      	str	r3, [r4, #40]	; 0x28
		}

		/* Average 2 Brake Travel Positions */
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8002060:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <state_driving_iterate+0xd10>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 8002068:	2b00      	cmp	r3, #0
 800206a:	d026      	beq.n	80020ba <state_driving_iterate+0xc36>
 800206c:	4b49      	ldr	r3, [pc, #292]	; (8002194 <state_driving_iterate+0xd10>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <state_driving_iterate+0xc36>
		{
			CC_GlobalState->brakeTravel = (brake_travel_one+brake_travel_two)/2;
 8002078:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 800207c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8002080:	4413      	add	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	da00      	bge.n	8002088 <state_driving_iterate+0xc04>
 8002086:	3301      	adds	r3, #1
 8002088:	105b      	asrs	r3, r3, #1
 800208a:	461a      	mov	r2, r3
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <state_driving_iterate+0xd10>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
			CC_GlobalState->accelTravel = (accel_travel_one+accel_travel_two+accel_travel_three)/3;
 8002096:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 800209a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800209e:	441a      	add	r2, r3
 80020a0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80020a4:	4413      	add	r3, r2
 80020a6:	4a3c      	ldr	r2, [pc, #240]	; (8002198 <state_driving_iterate+0xd14>)
 80020a8:	fb82 1203 	smull	r1, r2, r2, r3
 80020ac:	17db      	asrs	r3, r3, #31
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	4b38      	ldr	r3, [pc, #224]	; (8002194 <state_driving_iterate+0xd10>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
		}

		osSemaphoreRelease(CC_GlobalState->sem);
 80020ba:	4b36      	ldr	r3, [pc, #216]	; (8002194 <state_driving_iterate+0xd10>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 fb2e 	bl	8007724 <osSemaphoreRelease>
	}

	/* Echo Pedal Positions */
	if(!CC_GlobalState->faultDetected && CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 80020c8:	4b32      	ldr	r3, [pc, #200]	; (8002194 <state_driving_iterate+0xd10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 80020d0:	f083 0301 	eor.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d023      	beq.n	8002122 <state_driving_iterate+0xc9e>
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <state_driving_iterate+0xd10>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01d      	beq.n	8002122 <state_driving_iterate+0xc9e>
 80020e6:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <state_driving_iterate+0xd10>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d017      	beq.n	8002122 <state_driving_iterate+0xc9e>
	{
		len = sprintf(x, "Pedal Positions: %li %li\r\n", CC_GlobalState->brakeTravel, CC_GlobalState->accelTravel);
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <state_driving_iterate+0xd10>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f893 34d9 	ldrb.w	r3, [r3, #1241]	; 0x4d9
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <state_driving_iterate+0xd10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f893 34d8 	ldrb.w	r3, [r3, #1240]	; 0x4d8
 8002104:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8002108:	4924      	ldr	r1, [pc, #144]	; (800219c <state_driving_iterate+0xd18>)
 800210a:	f008 febd 	bl	800ae88 <siprintf>
 800210e:	4603      	mov	r3, r0
 8002110:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		CC_LogInfo(x, len);
 8002114:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002118:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fe6f 	bl	8002e00 <CC_LogInfo>

	/*
	 * If Throttle and Brake Implausibility State Clock < 100ms
	 * Suspend Tractive System Operations
	 */
	if(CC_GlobalState->faultDetected && CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 100)
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <state_driving_iterate+0xd10>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 800212a:	2b00      	cmp	r3, #0
 800212c:	d017      	beq.n	800215e <state_driving_iterate+0xcda>
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <state_driving_iterate+0xd10>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f893 34da 	ldrb.w	r3, [r3, #1242]	; 0x4da
 8002136:	2b00      	cmp	r3, #0
 8002138:	d011      	beq.n	800215e <state_driving_iterate+0xcda>
 800213a:	f001 f92d 	bl	8003398 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <state_driving_iterate+0xd10>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b63      	cmp	r3, #99	; 0x63
 800214a:	d908      	bls.n	800215e <state_driving_iterate+0xcda>
	{
		CC_GlobalState->tractiveActive = false;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <state_driving_iterate+0xd10>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
		CC_LogInfo("Disabling Tractive Operations\r\n", strlen("Disabling Tractive Operations\r\n"));
 8002156:	211f      	movs	r1, #31
 8002158:	4811      	ldr	r0, [pc, #68]	; (80021a0 <state_driving_iterate+0xd1c>)
 800215a:	f000 fe51 	bl	8002e00 <CC_LogInfo>

	/*
	 * If Throttle or Brake Implausibility State Clock > 1000ms
	 * Engage Soft Shutdown (Reset to Idle)
	 */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 1000)
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <state_driving_iterate+0xd10>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f893 34db 	ldrb.w	r3, [r3, #1243]	; 0x4db
 8002166:	2b00      	cmp	r3, #0
 8002168:	d061      	beq.n	800222e <state_driving_iterate+0xdaa>
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <state_driving_iterate+0xd10>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f893 34da 	ldrb.w	r3, [r3, #1242]	; 0x4da
 8002172:	f083 0301 	eor.w	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d058      	beq.n	800222e <state_driving_iterate+0xdaa>
 800217c:	f001 f90c 	bl	8003398 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <state_driving_iterate+0xd10>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800218e:	d34e      	bcc.n	800222e <state_driving_iterate+0xdaa>
 8002190:	e008      	b.n	80021a4 <state_driving_iterate+0xd20>
 8002192:	bf00      	nop
 8002194:	200049e0 	.word	0x200049e0
 8002198:	55555556 	.word	0x55555556
 800219c:	0800b674 	.word	0x0800b674
 80021a0:	0800b690 	.word	0x0800b690
	{
		/* Broadcast Soft Shutdown on all CAN lines */
		CC_SoftShutdown_t softShutdown = Compose_CC_SoftShutdown();
 80021a4:	f7fe fa99 	bl	80006da <Compose_CC_SoftShutdown>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021ae:	601a      	str	r2, [r3, #0]
		CAN_TxHeaderTypeDef header =
 80021b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021b4:	461a      	mov	r2, r3
 80021b6:	2300      	movs	r3, #0
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	6053      	str	r3, [r2, #4]
 80021bc:	6093      	str	r3, [r2, #8]
 80021be:	60d3      	str	r3, [r2, #12]
 80021c0:	6113      	str	r3, [r2, #16]
 80021c2:	6153      	str	r3, [r2, #20]
		{
				.ExtId = softShutdown.id,
 80021c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021c8:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef header =
 80021ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021d4:	2204      	movs	r2, #4
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021dc:	2201      	movs	r2, #1
 80021de:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 80021e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021e4:	220f      	movs	r2, #15
 80021e6:	701a      	strb	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <state_driving_iterate+0xdb4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80021f4:	4811      	ldr	r0, [pc, #68]	; (800223c <state_driving_iterate+0xdb8>)
 80021f6:	f001 ffeb 	bl	80041d0 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <state_driving_iterate+0xdb4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3308      	adds	r3, #8
 8002200:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002204:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <state_driving_iterate+0xdbc>)
 800220a:	f001 ffe1 	bl	80041d0 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <state_driving_iterate+0xdb4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3310      	adds	r3, #16
 8002214:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002218:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <state_driving_iterate+0xdc0>)
 800221e:	f001 ffd7 	bl	80041d0 <HAL_CAN_AddTxMessage>
		fsm_changeState(fsm, &idleState, "Soft Shutdown Requested (CAN)");
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4a08      	ldr	r2, [pc, #32]	; (8002248 <state_driving_iterate+0xdc4>)
 8002226:	4909      	ldr	r1, [pc, #36]	; (800224c <state_driving_iterate+0xdc8>)
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	f7fe fac7 	bl	80007bc <fsm_changeState>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 800222e:	bf00      	nop
 8002230:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}
 8002238:	200049e0 	.word	0x200049e0
 800223c:	20004bcc 	.word	0x20004bcc
 8002240:	20004ba4 	.word	0x20004ba4
 8002244:	20004b7c 	.word	0x20004b7c
 8002248:	0800b6b0 	.word	0x0800b6b0
 800224c:	20000010 	.word	0x20000010

08002250 <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 8002258:	bf00      	nop
}
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800226a:	463b      	mov	r3, r7
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002276:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <MX_ADC1_Init+0xd0>)
 8002278:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <MX_ADC1_Init+0xd4>)
 800227a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <MX_ADC1_Init+0xd0>)
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002282:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <MX_ADC1_Init+0xd0>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <MX_ADC1_Init+0xd0>)
 800228a:	2201      	movs	r2, #1
 800228c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <MX_ADC1_Init+0xd0>)
 8002290:	2201      	movs	r2, #1
 8002292:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <MX_ADC1_Init+0xd0>)
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <MX_ADC1_Init+0xd0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <MX_ADC1_Init+0xd0>)
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <MX_ADC1_Init+0xd8>)
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <MX_ADC1_Init+0xd0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <MX_ADC1_Init+0xd0>)
 80022b0:	2203      	movs	r2, #3
 80022b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <MX_ADC1_Init+0xd0>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <MX_ADC1_Init+0xd0>)
 80022be:	2201      	movs	r2, #1
 80022c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022c2:	481c      	ldr	r0, [pc, #112]	; (8002334 <MX_ADC1_Init+0xd0>)
 80022c4:	f001 f874 	bl	80033b0 <HAL_ADC_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80022ce:	f000 fe75 	bl	8002fbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80022d2:	2304      	movs	r3, #4
 80022d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80022da:	2307      	movs	r3, #7
 80022dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022de:	463b      	mov	r3, r7
 80022e0:	4619      	mov	r1, r3
 80022e2:	4814      	ldr	r0, [pc, #80]	; (8002334 <MX_ADC1_Init+0xd0>)
 80022e4:	f001 fa82 	bl	80037ec <HAL_ADC_ConfigChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80022ee:	f000 fe65 	bl	8002fbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80022f2:	2306      	movs	r3, #6
 80022f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80022f6:	2302      	movs	r3, #2
 80022f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022fa:	463b      	mov	r3, r7
 80022fc:	4619      	mov	r1, r3
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <MX_ADC1_Init+0xd0>)
 8002300:	f001 fa74 	bl	80037ec <HAL_ADC_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800230a:	f000 fe57 	bl	8002fbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800230e:	230e      	movs	r3, #14
 8002310:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002312:	2303      	movs	r3, #3
 8002314:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002316:	463b      	mov	r3, r7
 8002318:	4619      	mov	r1, r3
 800231a:	4806      	ldr	r0, [pc, #24]	; (8002334 <MX_ADC1_Init+0xd0>)
 800231c:	f001 fa66 	bl	80037ec <HAL_ADC_ConfigChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002326:	f000 fe49 	bl	8002fbc <Error_Handler>
  }

}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20004a2c 	.word	0x20004a2c
 8002338:	40012000 	.word	0x40012000
 800233c:	0f000001 	.word	0x0f000001

08002340 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002346:	463b      	mov	r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <MX_ADC2_Init+0xb4>)
 8002354:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <MX_ADC2_Init+0xb8>)
 8002356:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <MX_ADC2_Init+0xb4>)
 800235a:	2200      	movs	r2, #0
 800235c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <MX_ADC2_Init+0xb4>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <MX_ADC2_Init+0xb4>)
 8002366:	2201      	movs	r2, #1
 8002368:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <MX_ADC2_Init+0xb4>)
 800236c:	2201      	movs	r2, #1
 800236e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <MX_ADC2_Init+0xb4>)
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <MX_ADC2_Init+0xb4>)
 800237a:	2200      	movs	r2, #0
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <MX_ADC2_Init+0xb4>)
 8002380:	4a1e      	ldr	r2, [pc, #120]	; (80023fc <MX_ADC2_Init+0xbc>)
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MX_ADC2_Init+0xb4>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <MX_ADC2_Init+0xb4>)
 800238c:	2202      	movs	r2, #2
 800238e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <MX_ADC2_Init+0xb4>)
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <MX_ADC2_Init+0xb4>)
 800239a:	2201      	movs	r2, #1
 800239c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800239e:	4815      	ldr	r0, [pc, #84]	; (80023f4 <MX_ADC2_Init+0xb4>)
 80023a0:	f001 f806 	bl	80033b0 <HAL_ADC_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80023aa:	f000 fe07 	bl	8002fbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80023ae:	2303      	movs	r3, #3
 80023b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023b2:	2301      	movs	r3, #1
 80023b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80023b6:	2307      	movs	r3, #7
 80023b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023ba:	463b      	mov	r3, r7
 80023bc:	4619      	mov	r1, r3
 80023be:	480d      	ldr	r0, [pc, #52]	; (80023f4 <MX_ADC2_Init+0xb4>)
 80023c0:	f001 fa14 	bl	80037ec <HAL_ADC_ConfigChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80023ca:	f000 fdf7 	bl	8002fbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80023ce:	2305      	movs	r3, #5
 80023d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80023d2:	2302      	movs	r3, #2
 80023d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023d6:	463b      	mov	r3, r7
 80023d8:	4619      	mov	r1, r3
 80023da:	4806      	ldr	r0, [pc, #24]	; (80023f4 <MX_ADC2_Init+0xb4>)
 80023dc:	f001 fa06 	bl	80037ec <HAL_ADC_ConfigChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80023e6:	f000 fde9 	bl	8002fbc <Error_Handler>
  }

}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200049e4 	.word	0x200049e4
 80023f8:	40012100 	.word	0x40012100
 80023fc:	0f000001 	.word	0x0f000001

08002400 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002406:	463b      	mov	r3, r7
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <MX_ADC3_Init+0x98>)
 8002414:	4a21      	ldr	r2, [pc, #132]	; (800249c <MX_ADC3_Init+0x9c>)
 8002416:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <MX_ADC3_Init+0x98>)
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <MX_ADC3_Init+0x98>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <MX_ADC3_Init+0x98>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <MX_ADC3_Init+0x98>)
 800242c:	2201      	movs	r2, #1
 800242e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <MX_ADC3_Init+0x98>)
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <MX_ADC3_Init+0x98>)
 800243a:	2200      	movs	r2, #0
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <MX_ADC3_Init+0x98>)
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <MX_ADC3_Init+0xa0>)
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <MX_ADC3_Init+0x98>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <MX_ADC3_Init+0x98>)
 800244c:	2201      	movs	r2, #1
 800244e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <MX_ADC3_Init+0x98>)
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <MX_ADC3_Init+0x98>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <MX_ADC3_Init+0x98>)
 8002460:	f000 ffa6 	bl	80033b0 <HAL_ADC_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800246a:	f000 fda7 	bl	8002fbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800246e:	2302      	movs	r3, #2
 8002470:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002472:	2301      	movs	r3, #1
 8002474:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800247a:	463b      	mov	r3, r7
 800247c:	4619      	mov	r1, r3
 800247e:	4806      	ldr	r0, [pc, #24]	; (8002498 <MX_ADC3_Init+0x98>)
 8002480:	f001 f9b4 	bl	80037ec <HAL_ADC_ConfigChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800248a:	f000 fd97 	bl	8002fbc <Error_Handler>
  }

}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20004a74 	.word	0x20004a74
 800249c:	40012200 	.word	0x40012200
 80024a0:	0f000001 	.word	0x0f000001

080024a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08e      	sub	sp, #56	; 0x38
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a7b      	ldr	r2, [pc, #492]	; (80026b0 <HAL_ADC_MspInit+0x20c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d16c      	bne.n	80025a0 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024c6:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a7a      	ldr	r2, [pc, #488]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	4b75      	ldr	r3, [pc, #468]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a74      	ldr	r2, [pc, #464]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800250e:	2350      	movs	r3, #80	; 0x50
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002512:	2303      	movs	r3, #3
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800251e:	4619      	mov	r1, r3
 8002520:	4865      	ldr	r0, [pc, #404]	; (80026b8 <HAL_ADC_MspInit+0x214>)
 8002522:	f002 fcc3 	bl	8004eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002526:	2310      	movs	r3, #16
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800252a:	2303      	movs	r3, #3
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002536:	4619      	mov	r1, r3
 8002538:	4860      	ldr	r0, [pc, #384]	; (80026bc <HAL_ADC_MspInit+0x218>)
 800253a:	f002 fcb7 	bl	8004eac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800253e:	4b60      	ldr	r3, [pc, #384]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002540:	4a60      	ldr	r2, [pc, #384]	; (80026c4 <HAL_ADC_MspInit+0x220>)
 8002542:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002544:	4b5e      	ldr	r3, [pc, #376]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002546:	2200      	movs	r2, #0
 8002548:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002550:	4b5b      	ldr	r3, [pc, #364]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002556:	4b5a      	ldr	r3, [pc, #360]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800255c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800255e:	4b58      	ldr	r3, [pc, #352]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002564:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002566:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002568:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800256c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800256e:	4b54      	ldr	r3, [pc, #336]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002574:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002576:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002578:	2200      	movs	r2, #0
 800257a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 800257e:	2200      	movs	r2, #0
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002582:	484f      	ldr	r0, [pc, #316]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002584:	f002 f91c 	bl	80047c0 <HAL_DMA_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800258e:	f000 fd15 	bl	8002fbc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
 8002598:	4a49      	ldr	r2, [pc, #292]	; (80026c0 <HAL_ADC_MspInit+0x21c>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800259e:	e083      	b.n	80026a8 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a48      	ldr	r2, [pc, #288]	; (80026c8 <HAL_ADC_MspInit+0x224>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d155      	bne.n	8002656 <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a41      	ldr	r2, [pc, #260]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80025b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BRAKE_PEDAL_ONE_Pin|BRAKE_PEDAL_TWO_Pin;
 80025da:	2328      	movs	r3, #40	; 0x28
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025de:	2303      	movs	r3, #3
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ea:	4619      	mov	r1, r3
 80025ec:	4832      	ldr	r0, [pc, #200]	; (80026b8 <HAL_ADC_MspInit+0x214>)
 80025ee:	f002 fc5d 	bl	8004eac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_ADC_MspInit+0x228>)
 80025f4:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <HAL_ADC_MspInit+0x22c>)
 80025f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80025f8:	4b34      	ldr	r3, [pc, #208]	; (80026cc <HAL_ADC_MspInit+0x228>)
 80025fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002600:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_ADC_MspInit+0x228>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_ADC_MspInit+0x228>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_ADC_MspInit+0x228>)
 800260e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002612:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002614:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_ADC_MspInit+0x228>)
 8002616:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800261a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_ADC_MspInit+0x228>)
 800261e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002622:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002624:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_ADC_MspInit+0x228>)
 8002626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_ADC_MspInit+0x228>)
 800262e:	2200      	movs	r2, #0
 8002630:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_ADC_MspInit+0x228>)
 8002634:	2200      	movs	r2, #0
 8002636:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002638:	4824      	ldr	r0, [pc, #144]	; (80026cc <HAL_ADC_MspInit+0x228>)
 800263a:	f002 f8c1 	bl	80047c0 <HAL_DMA_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8002644:	f000 fcba 	bl	8002fbc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a20      	ldr	r2, [pc, #128]	; (80026cc <HAL_ADC_MspInit+0x228>)
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
 800264e:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_ADC_MspInit+0x228>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002654:	e028      	b.n	80026a8 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_ADC_MspInit+0x230>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d123      	bne.n	80026a8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 8002666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266a:	6453      	str	r3, [r2, #68]	; 0x44
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6313      	str	r3, [r2, #48]	; 0x30
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_ADC_MspInit+0x210>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BRAKE_PRESSURE_Pin;
 8002690:	2304      	movs	r3, #4
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002694:	2303      	movs	r3, #3
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BRAKE_PRESSURE_GPIO_Port, &GPIO_InitStruct);
 800269c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a0:	4619      	mov	r1, r3
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <HAL_ADC_MspInit+0x214>)
 80026a4:	f002 fc02 	bl	8004eac <HAL_GPIO_Init>
}
 80026a8:	bf00      	nop
 80026aa:	3738      	adds	r7, #56	; 0x38
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40012000 	.word	0x40012000
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020800 	.word	0x40020800
 80026c0:	20004abc 	.word	0x20004abc
 80026c4:	40026410 	.word	0x40026410
 80026c8:	40012100 	.word	0x40012100
 80026cc:	20004b1c 	.word	0x20004b1c
 80026d0:	40026440 	.word	0x40026440
 80026d4:	40012200 	.word	0x40012200

080026d8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80026dc:	4b17      	ldr	r3, [pc, #92]	; (800273c <MX_CAN1_Init+0x64>)
 80026de:	4a18      	ldr	r2, [pc, #96]	; (8002740 <MX_CAN1_Init+0x68>)
 80026e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <MX_CAN1_Init+0x64>)
 80026e4:	2202      	movs	r2, #2
 80026e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <MX_CAN1_Init+0x64>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <MX_CAN1_Init+0x64>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <MX_CAN1_Init+0x64>)
 80026f6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80026fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <MX_CAN1_Init+0x64>)
 80026fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002702:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <MX_CAN1_Init+0x64>)
 8002706:	2200      	movs	r2, #0
 8002708:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <MX_CAN1_Init+0x64>)
 800270c:	2200      	movs	r2, #0
 800270e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <MX_CAN1_Init+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <MX_CAN1_Init+0x64>)
 8002718:	2200      	movs	r2, #0
 800271a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <MX_CAN1_Init+0x64>)
 800271e:	2200      	movs	r2, #0
 8002720:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <MX_CAN1_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002728:	4804      	ldr	r0, [pc, #16]	; (800273c <MX_CAN1_Init+0x64>)
 800272a:	f001 fb25 	bl	8003d78 <HAL_CAN_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002734:	f000 fc42 	bl	8002fbc <Error_Handler>
  }

}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20004bcc 	.word	0x20004bcc
 8002740:	40006400 	.word	0x40006400

08002744 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <MX_CAN2_Init+0x64>)
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <MX_CAN2_Init+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <MX_CAN2_Init+0x64>)
 8002750:	2202      	movs	r2, #2
 8002752:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_CAN2_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <MX_CAN2_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_CAN2_Init+0x64>)
 8002762:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002766:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_CAN2_Init+0x64>)
 800276a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800276e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <MX_CAN2_Init+0x64>)
 8002772:	2200      	movs	r2, #0
 8002774:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_CAN2_Init+0x64>)
 8002778:	2200      	movs	r2, #0
 800277a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <MX_CAN2_Init+0x64>)
 800277e:	2200      	movs	r2, #0
 8002780:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_CAN2_Init+0x64>)
 8002784:	2200      	movs	r2, #0
 8002786:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <MX_CAN2_Init+0x64>)
 800278a:	2200      	movs	r2, #0
 800278c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_CAN2_Init+0x64>)
 8002790:	2200      	movs	r2, #0
 8002792:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002794:	4804      	ldr	r0, [pc, #16]	; (80027a8 <MX_CAN2_Init+0x64>)
 8002796:	f001 faef 	bl	8003d78 <HAL_CAN_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80027a0:	f000 fc0c 	bl	8002fbc <Error_Handler>
  }

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20004ba4 	.word	0x20004ba4
 80027ac:	40006800 	.word	0x40006800

080027b0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <MX_CAN3_Init+0x64>)
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <MX_CAN3_Init+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 2;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <MX_CAN3_Init+0x64>)
 80027bc:	2202      	movs	r2, #2
 80027be:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <MX_CAN3_Init+0x64>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <MX_CAN3_Init+0x64>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <MX_CAN3_Init+0x64>)
 80027ce:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80027d2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <MX_CAN3_Init+0x64>)
 80027d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027da:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <MX_CAN3_Init+0x64>)
 80027de:	2200      	movs	r2, #0
 80027e0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <MX_CAN3_Init+0x64>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <MX_CAN3_Init+0x64>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <MX_CAN3_Init+0x64>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <MX_CAN3_Init+0x64>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MX_CAN3_Init+0x64>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8002800:	4804      	ldr	r0, [pc, #16]	; (8002814 <MX_CAN3_Init+0x64>)
 8002802:	f001 fab9 	bl	8003d78 <HAL_CAN_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 800280c:	f000 fbd6 	bl	8002fbc <Error_Handler>
  }

}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20004b7c 	.word	0x20004b7c
 8002818:	40003400 	.word	0x40003400

0800281c <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b092      	sub	sp, #72	; 0x48
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a7e      	ldr	r2, [pc, #504]	; (8002a34 <HAL_CAN_MspInit+0x218>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d132      	bne.n	80028a4 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800283e:	4b7e      	ldr	r3, [pc, #504]	; (8002a38 <HAL_CAN_MspInit+0x21c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	4a7c      	ldr	r2, [pc, #496]	; (8002a38 <HAL_CAN_MspInit+0x21c>)
 8002846:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002848:	4b7b      	ldr	r3, [pc, #492]	; (8002a38 <HAL_CAN_MspInit+0x21c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d10b      	bne.n	8002868 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002850:	4b7a      	ldr	r3, [pc, #488]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	4a79      	ldr	r2, [pc, #484]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 8002856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
 800285c:	4b77      	ldr	r3, [pc, #476]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002868:	4b74      	ldr	r3, [pc, #464]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a73      	ldr	r2, [pc, #460]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b71      	ldr	r3, [pc, #452]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002880:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002892:	2309      	movs	r3, #9
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800289a:	4619      	mov	r1, r3
 800289c:	4868      	ldr	r0, [pc, #416]	; (8002a40 <HAL_CAN_MspInit+0x224>)
 800289e:	f002 fb05 	bl	8004eac <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80028a2:	e0c2      	b.n	8002a2a <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a66      	ldr	r2, [pc, #408]	; (8002a44 <HAL_CAN_MspInit+0x228>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d15c      	bne.n	8002968 <HAL_CAN_MspInit+0x14c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 80028ae:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_CAN_MspInit+0x22c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a64      	ldr	r2, [pc, #400]	; (8002a48 <HAL_CAN_MspInit+0x22c>)
 80028b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 80028b8:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_CAN_MspInit+0x22c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d10b      	bne.n	80028d8 <HAL_CAN_MspInit+0xbc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 80028c0:	4b5e      	ldr	r3, [pc, #376]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	4a5d      	ldr	r2, [pc, #372]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80028c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ca:	6413      	str	r3, [r2, #64]	; 0x40
 80028cc:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 80028d8:	4b5c      	ldr	r3, [pc, #368]	; (8002a4c <HAL_CAN_MspInit+0x230>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	4a5b      	ldr	r2, [pc, #364]	; (8002a4c <HAL_CAN_MspInit+0x230>)
 80028e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 80028e2:	4b5a      	ldr	r3, [pc, #360]	; (8002a4c <HAL_CAN_MspInit+0x230>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10b      	bne.n	8002902 <HAL_CAN_MspInit+0xe6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a53      	ldr	r2, [pc, #332]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80028f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002902:	4b4d      	ldr	r3, [pc, #308]	; (8002a38 <HAL_CAN_MspInit+0x21c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <HAL_CAN_MspInit+0x21c>)
 800290a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800290c:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_CAN_MspInit+0x21c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d10b      	bne.n	800292c <HAL_CAN_MspInit+0x110>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002914:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a48      	ldr	r2, [pc, #288]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 800291a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292c:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a42      	ldr	r2, [pc, #264]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002944:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002952:	2303      	movs	r3, #3
 8002954:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002956:	2309      	movs	r3, #9
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800295e:	4619      	mov	r1, r3
 8002960:	483b      	ldr	r0, [pc, #236]	; (8002a50 <HAL_CAN_MspInit+0x234>)
 8002962:	f002 faa3 	bl	8004eac <HAL_GPIO_Init>
}
 8002966:	e060      	b.n	8002a2a <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a39      	ldr	r2, [pc, #228]	; (8002a54 <HAL_CAN_MspInit+0x238>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d15b      	bne.n	8002a2a <HAL_CAN_MspInit+0x20e>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002972:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <HAL_CAN_MspInit+0x22c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	4a33      	ldr	r2, [pc, #204]	; (8002a48 <HAL_CAN_MspInit+0x22c>)
 800297a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 800297c:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <HAL_CAN_MspInit+0x22c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d10b      	bne.n	800299c <HAL_CAN_MspInit+0x180>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 800298a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800298e:	6413      	str	r3, [r2, #64]	; 0x40
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_CAN_MspInit+0x230>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <HAL_CAN_MspInit+0x230>)
 80029a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 80029a6:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <HAL_CAN_MspInit+0x230>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10b      	bne.n	80029c6 <HAL_CAN_MspInit+0x1aa>
      __HAL_RCC_CAN2_CLK_ENABLE();
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80029b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_CAN_MspInit+0x21c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_CAN_MspInit+0x21c>)
 80029ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_CAN_MspInit+0x21c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10b      	bne.n	80029f0 <HAL_CAN_MspInit+0x1d4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80029de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_CAN_MspInit+0x220>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8002a08:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8002a1a:	230b      	movs	r3, #11
 8002a1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a22:	4619      	mov	r1, r3
 8002a24:	4806      	ldr	r0, [pc, #24]	; (8002a40 <HAL_CAN_MspInit+0x224>)
 8002a26:	f002 fa41 	bl	8004eac <HAL_GPIO_Init>
}
 8002a2a:	bf00      	nop
 8002a2c:	3748      	adds	r7, #72	; 0x48
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40006400 	.word	0x40006400
 8002a38:	200000c0 	.word	0x200000c0
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40006800 	.word	0x40006800
 8002a48:	200000c4 	.word	0x200000c4
 8002a4c:	200000c8 	.word	0x200000c8
 8002a50:	40020400 	.word	0x40020400
 8002a54:	40003400 	.word	0x40003400

08002a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <MX_DMA_Init+0x48>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <MX_DMA_Init+0x48>)
 8002a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <MX_DMA_Init+0x48>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2038      	movs	r0, #56	; 0x38
 8002a7c:	f001 fe76 	bl	800476c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a80:	2038      	movs	r0, #56	; 0x38
 8002a82:	f001 fe8f 	bl	80047a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	203a      	movs	r0, #58	; 0x3a
 8002a8c:	f001 fe6e 	bl	800476c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002a90:	203a      	movs	r0, #58	; 0x3a
 8002a92:	f001 fe87 	bl	80047a4 <HAL_NVIC_EnableIRQ>

}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <MX_FREERTOS_Init+0x18>)
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <MX_FREERTOS_Init+0x1c>)
 8002aae:	f004 fc61 	bl	8007374 <osThreadNew>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <MX_FREERTOS_Init+0x20>)
 8002ab6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	0800b7ac 	.word	0x0800b7ac
 8002ac0:	08002ac9 	.word	0x08002ac9
 8002ac4:	20004bf4 	.word	0x20004bf4

08002ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f004 fcf5 	bl	80074c0 <osDelay>
 8002ad6:	e7fb      	b.n	8002ad0 <StartDefaultTask+0x8>

08002ad8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b06:	4b29      	ldr	r3, [pc, #164]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a28      	ldr	r2, [pc, #160]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b24:	f043 0310 	orr.w	r3, r3, #16
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b54:	4816      	ldr	r0, [pc, #88]	; (8002bb0 <MX_GPIO_Init+0xd8>)
 8002b56:	f002 fb6b 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HSOUT_RTD_LED_Pin;
 8002b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HSOUT_RTD_LED_GPIO_Port, &GPIO_InitStruct);
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4619      	mov	r1, r3
 8002b72:	480f      	ldr	r0, [pc, #60]	; (8002bb0 <MX_GPIO_Init+0xd8>)
 8002b74:	f002 f99a 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_INPUT_Pin;
 8002b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <MX_GPIO_Init+0xdc>)
 8002b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTD_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <MX_GPIO_Init+0xd8>)
 8002b8e:	f002 f98d 	bl	8004eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2103      	movs	r1, #3
 8002b96:	2028      	movs	r0, #40	; 0x28
 8002b98:	f001 fde8 	bl	800476c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b9c:	2028      	movs	r0, #40	; 0x28
 8002b9e:	f001 fe01 	bl	80047a4 <HAL_NVIC_EnableIRQ>

}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	10110000 	.word	0x10110000

08002bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b0a0      	sub	sp, #128	; 0x80
 8002bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bbe:	f000 fbca 	bl	8003356 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bc2:	f000 f8a3 	bl	8002d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bc6:	f7ff ff87 	bl	8002ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bca:	f7ff ff45 	bl	8002a58 <MX_DMA_Init>
  MX_CAN1_Init();
 8002bce:	f7ff fd83 	bl	80026d8 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8002bd2:	f000 fb23 	bl	800321c <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8002bd6:	f7ff fdb5 	bl	8002744 <MX_CAN2_Init>
  MX_CAN3_Init();
 8002bda:	f7ff fde9 	bl	80027b0 <MX_CAN3_Init>
  MX_ADC2_Init();
 8002bde:	f7ff fbaf 	bl	8002340 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002be2:	f7ff fc0d 	bl	8002400 <MX_ADC3_Init>
  MX_ADC1_Init();
 8002be6:	f7ff fb3d 	bl	8002264 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8002bea:	4842      	ldr	r0, [pc, #264]	; (8002cf4 <main+0x13c>)
 8002bec:	f001 faac 	bl	8004148 <HAL_CAN_Start>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <main+0x42>
	{
		Error_Handler();
 8002bf6:	f000 f9e1 	bl	8002fbc <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8002bfa:	483f      	ldr	r0, [pc, #252]	; (8002cf8 <main+0x140>)
 8002bfc:	f001 faa4 	bl	8004148 <HAL_CAN_Start>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <main+0x52>
	{
		Error_Handler();
 8002c06:	f000 f9d9 	bl	8002fbc <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan3) != HAL_OK)
 8002c0a:	483c      	ldr	r0, [pc, #240]	; (8002cfc <main+0x144>)
 8002c0c:	f001 fa9c 	bl	8004148 <HAL_CAN_Start>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <main+0x62>
	{
		Error_Handler();
 8002c16:	f000 f9d1 	bl	8002fbc <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c22:	2301      	movs	r3, #1
 8002c24:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 8002c26:	2300      	movs	r3, #0
 8002c28:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 8002c32:	2300      	movs	r3, #0
 8002c34:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 8002c3e:	230e      	movs	r3, #14
 8002c40:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 8002c42:	230e      	movs	r3, #14
 8002c44:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 8002c52:	2301      	movs	r3, #1
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8002c56:	2300      	movs	r3, #0
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 8002c62:	2301      	movs	r3, #1
 8002c64:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 8002c66:	230e      	movs	r3, #14
 8002c68:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 28;
 8002c6a:	231c      	movs	r3, #28
 8002c6c:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c72:	2301      	movs	r3, #1
 8002c74:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 8002c8e:	230e      	movs	r3, #14
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 8002c92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c96:	4619      	mov	r1, r3
 8002c98:	4816      	ldr	r0, [pc, #88]	; (8002cf4 <main+0x13c>)
 8002c9a:	f001 f969 	bl	8003f70 <HAL_CAN_ConfigFilter>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <main+0xf0>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002ca4:	f000 f98a 	bl	8002fbc <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8002ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cac:	4619      	mov	r1, r3
 8002cae:	4812      	ldr	r0, [pc, #72]	; (8002cf8 <main+0x140>)
 8002cb0:	f001 f95e 	bl	8003f70 <HAL_CAN_ConfigFilter>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <main+0x106>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002cba:	f000 f97f 	bl	8002fbc <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	480e      	ldr	r0, [pc, #56]	; (8002cfc <main+0x144>)
 8002cc4:	f001 f954 	bl	8003f70 <HAL_CAN_ConfigFilter>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <main+0x11a>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002cce:	f000 f975 	bl	8002fbc <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 8002cd2:	480b      	ldr	r0, [pc, #44]	; (8002d00 <main+0x148>)
 8002cd4:	f7fd fd15 	bl	8000702 <fsm_new>
 8002cd8:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 8002cda:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <main+0x14c>)
 8002cdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cde:	480a      	ldr	r0, [pc, #40]	; (8002d08 <main+0x150>)
 8002ce0:	f004 fb48 	bl	8007374 <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002ce4:	f004 fadc 	bl	80072a0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002ce8:	f7ff fedc 	bl	8002aa4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002cec:	f004 fb0c 	bl	8007308 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <main+0x138>
 8002cf2:	bf00      	nop
 8002cf4:	20004bcc 	.word	0x20004bcc
 8002cf8:	20004ba4 	.word	0x20004ba4
 8002cfc:	20004b7c 	.word	0x20004b7c
 8002d00:	20000000 	.word	0x20000000
 8002d04:	0800b7d0 	.word	0x0800b7d0
 8002d08:	08002e29 	.word	0x08002e29

08002d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b0b8      	sub	sp, #224	; 0xe0
 8002d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d16:	2234      	movs	r2, #52	; 0x34
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f007 fff3 	bl	800ad06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d30:	f107 0308 	add.w	r3, r7, #8
 8002d34:	2290      	movs	r2, #144	; 0x90
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f007 ffe4 	bl	800ad06 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <SystemClock_Config+0xec>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	4a2d      	ldr	r2, [pc, #180]	; (8002df8 <SystemClock_Config+0xec>)
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d48:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <SystemClock_Config+0xec>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d56:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <SystemClock_Config+0xf0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d5e:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <SystemClock_Config+0xf0>)
 8002d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <SystemClock_Config+0xf0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d72:	2302      	movs	r3, #2
 8002d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d7e:	2310      	movs	r3, #16
 8002d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 fa8c 	bl	80052ac <HAL_RCC_OscConfig>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002d9a:	f000 f90f 	bl	8002fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d9e:	230f      	movs	r3, #15
 8002da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dbc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f002 fd20 	bl	8005808 <HAL_RCC_ClockConfig>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002dce:	f000 f8f5 	bl	8002fbc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dd6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ddc:	f107 0308 	add.w	r3, r7, #8
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 ff15 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002dec:	f000 f8e6 	bl	8002fbc <Error_Handler>
  }
}
 8002df0:	bf00      	nop
 8002df2:	37e0      	adds	r7, #224	; 0xe0
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000

08002e00 <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4803      	ldr	r0, [pc, #12]	; (8002e24 <CC_LogInfo+0x24>)
 8002e16:	f003 fd9d 	bl	8006954 <HAL_UART_Transmit>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20004c38 	.word	0x20004c38

08002e28 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b0a4      	sub	sp, #144	; 0x90
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 8002e30:	2115      	movs	r1, #21
 8002e32:	484e      	ldr	r0, [pc, #312]	; (8002f6c <fsm_thread_mainLoop+0x144>)
 8002e34:	f7ff ffe4 	bl	8002e00 <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 8002e38:	494d      	ldr	r1, [pc, #308]	; (8002f70 <fsm_thread_mainLoop+0x148>)
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fd fd54 	bl	80008e8 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 8002e40:	494c      	ldr	r1, [pc, #304]	; (8002f74 <fsm_thread_mainLoop+0x14c>)
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fd fd04 	bl	8000850 <fsm_reset>
//	fsm_changeState(fsm, &debugState, "Forcing debug state");
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8002e48:	e025      	b.n	8002e96 <fsm_thread_mainLoop+0x6e>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	331c      	adds	r3, #28
 8002e50:	f107 020c 	add.w	r2, r7, #12
 8002e54:	2100      	movs	r1, #0
 8002e56:	4848      	ldr	r0, [pc, #288]	; (8002f78 <fsm_thread_mainLoop+0x150>)
 8002e58:	f001 fa95 	bl	8004386 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002e5c:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <fsm_thread_mainLoop+0x154>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8002e64:	f107 010c 	add.w	r1, r7, #12
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f004 fd38 	bl	80078e0 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002e70:	f000 fa92 	bl	8003398 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <fsm_thread_mainLoop+0x154>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	4a40      	ldr	r2, [pc, #256]	; (8002f80 <fsm_thread_mainLoop+0x158>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	099a      	lsrs	r2, r3, #6
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002e8c:	493d      	ldr	r1, [pc, #244]	; (8002f84 <fsm_thread_mainLoop+0x15c>)
 8002e8e:	f007 fffb 	bl	800ae88 <siprintf>
 8002e92:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8002e96:	2100      	movs	r1, #0
 8002e98:	4837      	ldr	r0, [pc, #220]	; (8002f78 <fsm_thread_mainLoop+0x150>)
 8002e9a:	f001 fb86 	bl	80045aa <HAL_CAN_GetRxFifoFillLevel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1d2      	bne.n	8002e4a <fsm_thread_mainLoop+0x22>
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8002ea4:	e025      	b.n	8002ef2 <fsm_thread_mainLoop+0xca>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	331c      	adds	r3, #28
 8002eac:	f107 020c 	add.w	r2, r7, #12
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4835      	ldr	r0, [pc, #212]	; (8002f88 <fsm_thread_mainLoop+0x160>)
 8002eb4:	f001 fa67 	bl	8004386 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <fsm_thread_mainLoop+0x154>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8002ec0:	f107 010c 	add.w	r1, r7, #12
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f004 fd0a 	bl	80078e0 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002ecc:	f000 fa64 	bl	8003398 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <fsm_thread_mainLoop+0x154>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	4a29      	ldr	r2, [pc, #164]	; (8002f80 <fsm_thread_mainLoop+0x158>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099a      	lsrs	r2, r3, #6
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002ee8:	4928      	ldr	r1, [pc, #160]	; (8002f8c <fsm_thread_mainLoop+0x164>)
 8002eea:	f007 ffcd 	bl	800ae88 <siprintf>
 8002eee:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4824      	ldr	r0, [pc, #144]	; (8002f88 <fsm_thread_mainLoop+0x160>)
 8002ef6:	f001 fb58 	bl	80045aa <HAL_CAN_GetRxFifoFillLevel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1d2      	bne.n	8002ea6 <fsm_thread_mainLoop+0x7e>
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8002f00:	e025      	b.n	8002f4e <fsm_thread_mainLoop+0x126>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 8002f02:	f107 030c 	add.w	r3, r7, #12
 8002f06:	331c      	adds	r3, #28
 8002f08:	f107 020c 	add.w	r2, r7, #12
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4820      	ldr	r0, [pc, #128]	; (8002f90 <fsm_thread_mainLoop+0x168>)
 8002f10:	f001 fa39 	bl	8004386 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <fsm_thread_mainLoop+0x154>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8002f1c:	f107 010c 	add.w	r1, r7, #12
 8002f20:	2300      	movs	r3, #0
 8002f22:	2200      	movs	r2, #0
 8002f24:	f004 fcdc 	bl	80078e0 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002f28:	f000 fa36 	bl	8003398 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <fsm_thread_mainLoop+0x154>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <fsm_thread_mainLoop+0x158>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	099a      	lsrs	r2, r3, #6
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002f44:	4913      	ldr	r1, [pc, #76]	; (8002f94 <fsm_thread_mainLoop+0x16c>)
 8002f46:	f007 ff9f 	bl	800ae88 <siprintf>
 8002f4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8002f4e:	2100      	movs	r1, #0
 8002f50:	480f      	ldr	r0, [pc, #60]	; (8002f90 <fsm_thread_mainLoop+0x168>)
 8002f52:	f001 fb2a 	bl	80045aa <HAL_CAN_GetRxFifoFillLevel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1d2      	bne.n	8002f02 <fsm_thread_mainLoop+0xda>
			//CC_LogInfo(x, len);
		}

		osDelay(20);
 8002f5c:	2014      	movs	r0, #20
 8002f5e:	f004 faaf 	bl	80074c0 <osDelay>
		fsm_iterate(fsm);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd fc06 	bl	8000774 <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8002f68:	e795      	b.n	8002e96 <fsm_thread_mainLoop+0x6e>
 8002f6a:	bf00      	nop
 8002f6c:	0800b704 	.word	0x0800b704
 8002f70:	08002e01 	.word	0x08002e01
 8002f74:	20000000 	.word	0x20000000
 8002f78:	20004bcc 	.word	0x20004bcc
 8002f7c:	200049e0 	.word	0x200049e0
 8002f80:	10624dd3 	.word	0x10624dd3
 8002f84:	0800b71c 	.word	0x0800b71c
 8002f88:	20004ba4 	.word	0x20004ba4
 8002f8c:	0800b744 	.word	0x0800b744
 8002f90:	20004b7c 	.word	0x20004b7c
 8002f94:	0800b76c 	.word	0x0800b76c

08002f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002faa:	f000 f9e1 	bl	8003370 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40001400 	.word	0x40001400

08002fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_MspInit+0x44>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_MspInit+0x44>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_MspInit+0x44>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_MspInit+0x44>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_MspInit+0x44>)
 8002ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_MspInit+0x44>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	; 0x30
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	2037      	movs	r0, #55	; 0x37
 800302a:	f001 fb9f 	bl	800476c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800302e:	2037      	movs	r0, #55	; 0x37
 8003030:	f001 fbb8 	bl	80047a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003034:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <HAL_InitTick+0x9c>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_InitTick+0x9c>)
 800303a:	f043 0320 	orr.w	r3, r3, #32
 800303e:	6413      	str	r3, [r2, #64]	; 0x40
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_InitTick+0x9c>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800304c:	f107 0210 	add.w	r2, r7, #16
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f002 fda8 	bl	8005bac <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800305c:	f002 fd7e 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 8003060:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <HAL_InitTick+0xa0>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0c9b      	lsrs	r3, r3, #18
 800306c:	3b01      	subs	r3, #1
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_InitTick+0xa4>)
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_InitTick+0xa8>)
 8003074:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_InitTick+0xa4>)
 8003078:	f240 32e7 	movw	r2, #999	; 0x3e7
 800307c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_InitTick+0xa4>)
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_InitTick+0xa4>)
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_InitTick+0xa4>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003090:	4809      	ldr	r0, [pc, #36]	; (80030b8 <HAL_InitTick+0xa4>)
 8003092:	f003 f9ab 	bl	80063ec <HAL_TIM_Base_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800309c:	4806      	ldr	r0, [pc, #24]	; (80030b8 <HAL_InitTick+0xa4>)
 800309e:	f003 f9db 	bl	8006458 <HAL_TIM_Base_Start_IT>
 80030a2:	4603      	mov	r3, r0
 80030a4:	e000      	b.n	80030a8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3730      	adds	r7, #48	; 0x30
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	20004bf8 	.word	0x20004bf8
 80030bc:	40001400 	.word	0x40001400

080030c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d2:	e7fe      	b.n	80030d2 <HardFault_Handler+0x4>

080030d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d8:	e7fe      	b.n	80030d8 <MemManage_Handler+0x4>

080030da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030de:	e7fe      	b.n	80030de <BusFault_Handler+0x4>

080030e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <UsageFault_Handler+0x4>

080030e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030f4:	b598      	push	{r3, r4, r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 80030f8:	f000 f94e 	bl	8003398 <HAL_GetTick>
 80030fc:	4601      	mov	r1, r0
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <EXTI15_10_IRQHandler+0x50>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <EXTI15_10_IRQHandler+0x50>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	1a8a      	subs	r2, r1, r2
 800310c:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
	CC_GlobalState->rtdTicks = HAL_GetTick();
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <EXTI15_10_IRQHandler+0x50>)
 8003112:	681c      	ldr	r4, [r3, #0]
 8003114:	f000 f940 	bl	8003398 <HAL_GetTick>
 8003118:	4603      	mov	r3, r0
 800311a:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
	if(CC_GlobalState->rtdTicksSpan > 10)
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <EXTI15_10_IRQHandler+0x50>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003126:	2b0a      	cmp	r3, #10
 8003128:	d906      	bls.n	8003138 <EXTI15_10_IRQHandler+0x44>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <EXTI15_10_IRQHandler+0x50>)
 800312c:	681c      	ldr	r4, [r3, #0]
 800312e:	f000 f933 	bl	8003398 <HAL_GetTick>
 8003132:	4603      	mov	r3, r0
 8003134:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003138:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800313c:	f002 f892 	bl	8005264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	bd98      	pop	{r3, r4, r7, pc}
 8003144:	200049e0 	.word	0x200049e0

08003148 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800314c:	4802      	ldr	r0, [pc, #8]	; (8003158 <TIM7_IRQHandler+0x10>)
 800314e:	f003 f9ad 	bl	80064ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20004bf8 	.word	0x20004bf8

0800315c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <DMA2_Stream0_IRQHandler+0x10>)
 8003162:	f001 fc3b 	bl	80049dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20004abc 	.word	0x20004abc

08003170 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <DMA2_Stream2_IRQHandler+0x10>)
 8003176:	f001 fc31 	bl	80049dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20004b1c 	.word	0x20004b1c

08003184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <_sbrk+0x5c>)
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <_sbrk+0x60>)
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <_sbrk+0x64>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <_sbrk+0x64>)
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <_sbrk+0x68>)
 80031a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <_sbrk+0x64>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d207      	bcs.n	80031c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031b4:	f007 fd6a 	bl	800ac8c <__errno>
 80031b8:	4602      	mov	r2, r0
 80031ba:	230c      	movs	r3, #12
 80031bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031c2:	e009      	b.n	80031d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <_sbrk+0x64>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <_sbrk+0x64>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <_sbrk+0x64>)
 80031d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031d6:	68fb      	ldr	r3, [r7, #12]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20080000 	.word	0x20080000
 80031e4:	00000400 	.word	0x00000400
 80031e8:	200000cc 	.word	0x200000cc
 80031ec:	20004d00 	.word	0x20004d00

080031f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <SystemInit+0x28>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <SystemInit+0x28>)
 80031fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <SystemInit+0x28>)
 8003206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800320a:	609a      	str	r2, [r3, #8]
#endif
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <MX_USART3_UART_Init+0x58>)
 8003222:	4a15      	ldr	r2, [pc, #84]	; (8003278 <MX_USART3_UART_Init+0x5c>)
 8003224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <MX_USART3_UART_Init+0x58>)
 8003228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800322c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <MX_USART3_UART_Init+0x58>)
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <MX_USART3_UART_Init+0x58>)
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <MX_USART3_UART_Init+0x58>)
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <MX_USART3_UART_Init+0x58>)
 8003242:	220c      	movs	r2, #12
 8003244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <MX_USART3_UART_Init+0x58>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <MX_USART3_UART_Init+0x58>)
 800324e:	2200      	movs	r2, #0
 8003250:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <MX_USART3_UART_Init+0x58>)
 8003254:	2200      	movs	r2, #0
 8003256:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <MX_USART3_UART_Init+0x58>)
 800325a:	2200      	movs	r2, #0
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800325e:	4805      	ldr	r0, [pc, #20]	; (8003274 <MX_USART3_UART_Init+0x58>)
 8003260:	f003 fb2a 	bl	80068b8 <HAL_UART_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800326a:	f7ff fea7 	bl	8002fbc <Error_Handler>
  }

}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20004c38 	.word	0x20004c38
 8003278:	40004800 	.word	0x40004800

0800327c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_UART_MspInit+0x7c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d128      	bne.n	80032f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_UART_MspInit+0x80>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_UART_MspInit+0x80>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_UART_MspInit+0x80>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_UART_MspInit+0x80>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a10      	ldr	r2, [pc, #64]	; (80032fc <HAL_UART_MspInit+0x80>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_UART_MspInit+0x80>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032dc:	2303      	movs	r3, #3
 80032de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032e0:	2307      	movs	r3, #7
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4619      	mov	r1, r3
 80032ea:	4805      	ldr	r0, [pc, #20]	; (8003300 <HAL_UART_MspInit+0x84>)
 80032ec:	f001 fdde 	bl	8004eac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80032f0:	bf00      	nop
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40004800 	.word	0x40004800
 80032fc:	40023800 	.word	0x40023800
 8003300:	40020400 	.word	0x40020400

08003304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800333c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003308:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800330a:	e003      	b.n	8003314 <LoopCopyDataInit>

0800330c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800330e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003310:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003312:	3104      	adds	r1, #4

08003314 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003314:	480b      	ldr	r0, [pc, #44]	; (8003344 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003318:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800331a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800331c:	d3f6      	bcc.n	800330c <CopyDataInit>
  ldr  r2, =_sbss
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003320:	e002      	b.n	8003328 <LoopFillZerobss>

08003322 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003322:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003324:	f842 3b04 	str.w	r3, [r2], #4

08003328 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800332a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800332c:	d3f9      	bcc.n	8003322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800332e:	f7ff ff5f 	bl	80031f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003332:	f007 fcb1 	bl	800ac98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003336:	f7ff fc3f 	bl	8002bb8 <main>
  bx  lr    
 800333a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800333c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003340:	0800b858 	.word	0x0800b858
  ldr  r0, =_sdata
 8003344:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003348:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 800334c:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8003350:	20004d00 	.word	0x20004d00

08003354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003354:	e7fe      	b.n	8003354 <ADC_IRQHandler>

08003356 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800335a:	2003      	movs	r0, #3
 800335c:	f001 f9fb 	bl	8004756 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003360:	2000      	movs	r0, #0
 8003362:	f7ff fe57 	bl	8003014 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003366:	f7ff fe31 	bl	8002fcc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_IncTick+0x20>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x24>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4413      	add	r3, r2
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_IncTick+0x24>)
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000038 	.word	0x20000038
 8003394:	20004cb8 	.word	0x20004cb8

08003398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return uwTick;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_GetTick+0x14>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20004cb8 	.word	0x20004cb8

080033b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e031      	b.n	800342a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff f868 	bl	80024a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d116      	bne.n	800341c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_ADC_Init+0x84>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	f043 0202 	orr.w	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fb3e 	bl	8003a80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
 800341a:	e001      	b.n	8003420 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	ffffeefd 	.word	0xffffeefd

08003438 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_ADC_Start+0x1a>
 800344e:	2302      	movs	r3, #2
 8003450:	e0a0      	b.n	8003594 <HAL_ADC_Start+0x15c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d018      	beq.n	800349a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003478:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <HAL_ADC_Start+0x168>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a49      	ldr	r2, [pc, #292]	; (80035a4 <HAL_ADC_Start+0x16c>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0c9a      	lsrs	r2, r3, #18
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800348c:	e002      	b.n	8003494 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b01      	subs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f9      	bne.n	800348e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d174      	bne.n	8003592 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ac:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <HAL_ADC_Start+0x170>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e2:	d106      	bne.n	80034f2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	f023 0206 	bic.w	r2, r3, #6
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44
 80034f0:	e002      	b.n	80034f8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003508:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800350a:	4b28      	ldr	r3, [pc, #160]	; (80035ac <HAL_ADC_Start+0x174>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d136      	bne.n	8003592 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	e02d      	b.n	8003592 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1d      	ldr	r2, [pc, #116]	; (80035b0 <HAL_ADC_Start+0x178>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10e      	bne.n	800355e <HAL_ADC_Start+0x126>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800355c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_ADC_Start+0x174>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b00      	cmp	r3, #0
 8003568:	d113      	bne.n	8003592 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a11      	ldr	r2, [pc, #68]	; (80035b4 <HAL_ADC_Start+0x17c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10e      	bne.n	8003592 <HAL_ADC_Start+0x15a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003590:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20000030 	.word	0x20000030
 80035a4:	431bde83 	.word	0x431bde83
 80035a8:	fffff8fe 	.word	0xfffff8fe
 80035ac:	40012300 	.word	0x40012300
 80035b0:	40012000 	.word	0x40012000
 80035b4:	40012200 	.word	0x40012200

080035b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_Start_DMA+0x1e>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0c7      	b.n	8003766 <HAL_ADC_Start_DMA+0x1ae>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d018      	beq.n	800361e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80035fc:	4b5c      	ldr	r3, [pc, #368]	; (8003770 <HAL_ADC_Start_DMA+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5c      	ldr	r2, [pc, #368]	; (8003774 <HAL_ADC_Start_DMA+0x1bc>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0c9a      	lsrs	r2, r3, #18
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003610:	e002      	b.n	8003618 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	3b01      	subs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f9      	bne.n	8003612 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	f040 809b 	bne.w	8003764 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003632:	4b51      	ldr	r3, [pc, #324]	; (8003778 <HAL_ADC_Start_DMA+0x1c0>)
 8003634:	4013      	ands	r3, r2
 8003636:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003654:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003668:	d106      	bne.n	8003678 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f023 0206 	bic.w	r2, r3, #6
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
 8003676:	e002      	b.n	800367e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	4a3c      	ldr	r2, [pc, #240]	; (800377c <HAL_ADC_Start_DMA+0x1c4>)
 800368c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	4a3b      	ldr	r2, [pc, #236]	; (8003780 <HAL_ADC_Start_DMA+0x1c8>)
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	4a3a      	ldr	r2, [pc, #232]	; (8003784 <HAL_ADC_Start_DMA+0x1cc>)
 800369c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	334c      	adds	r3, #76	; 0x4c
 80036d2:	4619      	mov	r1, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f001 f920 	bl	800491c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_ADC_Start_DMA+0x1d0>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10f      	bne.n	8003708 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d136      	bne.n	8003764 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	e02d      	b.n	8003764 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1f      	ldr	r2, [pc, #124]	; (800378c <HAL_ADC_Start_DMA+0x1d4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10e      	bne.n	8003730 <HAL_ADC_Start_DMA+0x178>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800372e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_ADC_Start_DMA+0x1d0>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d113      	bne.n	8003764 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <HAL_ADC_Start_DMA+0x1d8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d10e      	bne.n	8003764 <HAL_ADC_Start_DMA+0x1ac>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003762:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000030 	.word	0x20000030
 8003774:	431bde83 	.word	0x431bde83
 8003778:	fffff8fe 	.word	0xfffff8fe
 800377c:	08003c75 	.word	0x08003c75
 8003780:	08003d2f 	.word	0x08003d2f
 8003784:	08003d4b 	.word	0x08003d4b
 8003788:	40012300 	.word	0x40012300
 800378c:	40012000 	.word	0x40012000
 8003790:	40012200 	.word	0x40012200

08003794 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x1c>
 8003804:	2302      	movs	r3, #2
 8003806:	e12a      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x272>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b09      	cmp	r3, #9
 8003816:	d93a      	bls.n	800388e <HAL_ADC_ConfigChannel+0xa2>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003820:	d035      	beq.n	800388e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68d9      	ldr	r1, [r3, #12]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	3b1e      	subs	r3, #30
 8003838:	2207      	movs	r2, #7
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	400a      	ands	r2, r1
 8003846:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a87      	ldr	r2, [pc, #540]	; (8003a6c <HAL_ADC_ConfigChannel+0x280>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10a      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68d9      	ldr	r1, [r3, #12]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	061a      	lsls	r2, r3, #24
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003866:	e035      	b.n	80038d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68d9      	ldr	r1, [r3, #12]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	4618      	mov	r0, r3
 800387a:	4603      	mov	r3, r0
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4403      	add	r3, r0
 8003880:	3b1e      	subs	r3, #30
 8003882:	409a      	lsls	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800388c:	e022      	b.n	80038d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6919      	ldr	r1, [r3, #16]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	2207      	movs	r2, #7
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43da      	mvns	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	400a      	ands	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6919      	ldr	r1, [r3, #16]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	4603      	mov	r3, r0
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4403      	add	r3, r0
 80038ca:	409a      	lsls	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b06      	cmp	r3, #6
 80038da:	d824      	bhi.n	8003926 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	3b05      	subs	r3, #5
 80038ee:	221f      	movs	r2, #31
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43da      	mvns	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	400a      	ands	r2, r1
 80038fc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b29b      	uxth	r3, r3
 800390a:	4618      	mov	r0, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	3b05      	subs	r3, #5
 8003918:	fa00 f203 	lsl.w	r2, r0, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	635a      	str	r2, [r3, #52]	; 0x34
 8003924:	e04c      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b0c      	cmp	r3, #12
 800392c:	d824      	bhi.n	8003978 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	3b23      	subs	r3, #35	; 0x23
 8003940:	221f      	movs	r2, #31
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	400a      	ands	r2, r1
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	4618      	mov	r0, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	3b23      	subs	r3, #35	; 0x23
 800396a:	fa00 f203 	lsl.w	r2, r0, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
 8003976:	e023      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	3b41      	subs	r3, #65	; 0x41
 800398a:	221f      	movs	r2, #31
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43da      	mvns	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	400a      	ands	r2, r1
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4618      	mov	r0, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	3b41      	subs	r3, #65	; 0x41
 80039b4:	fa00 f203 	lsl.w	r2, r0, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <HAL_ADC_ConfigChannel+0x284>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10a      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x1f4>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039d2:	d105      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <HAL_ADC_ConfigChannel+0x288>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a26      	ldr	r2, [pc, #152]	; (8003a74 <HAL_ADC_ConfigChannel+0x288>)
 80039da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80039de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <HAL_ADC_ConfigChannel+0x284>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d109      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x212>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b12      	cmp	r3, #18
 80039f0:	d105      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_ADC_ConfigChannel+0x288>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_ADC_ConfigChannel+0x288>)
 80039f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_ADC_ConfigChannel+0x284>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d125      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x268>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <HAL_ADC_ConfigChannel+0x280>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <HAL_ADC_ConfigChannel+0x22e>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b11      	cmp	r3, #17
 8003a18:	d11c      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <HAL_ADC_ConfigChannel+0x288>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <HAL_ADC_ConfigChannel+0x288>)
 8003a20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a24:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <HAL_ADC_ConfigChannel+0x280>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d111      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_ADC_ConfigChannel+0x28c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a11      	ldr	r2, [pc, #68]	; (8003a7c <HAL_ADC_ConfigChannel+0x290>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0c9a      	lsrs	r2, r3, #18
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a46:	e002      	b.n	8003a4e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f9      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	10000012 	.word	0x10000012
 8003a70:	40012000 	.word	0x40012000
 8003a74:	40012300 	.word	0x40012300
 8003a78:	20000030 	.word	0x20000030
 8003a7c:	431bde83 	.word	0x431bde83

08003a80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a88:	4b78      	ldr	r3, [pc, #480]	; (8003c6c <ADC_Init+0x1ec>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a77      	ldr	r2, [pc, #476]	; (8003c6c <ADC_Init+0x1ec>)
 8003a8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a94:	4b75      	ldr	r3, [pc, #468]	; (8003c6c <ADC_Init+0x1ec>)
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4973      	ldr	r1, [pc, #460]	; (8003c6c <ADC_Init+0x1ec>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	021a      	lsls	r2, r3, #8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6899      	ldr	r1, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	4a58      	ldr	r2, [pc, #352]	; (8003c70 <ADC_Init+0x1f0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6899      	ldr	r1, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	e00f      	b.n	8003b7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0202 	bic.w	r2, r2, #2
 8003b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6899      	ldr	r1, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	005a      	lsls	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01b      	beq.n	8003be0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	035a      	lsls	r2, r3, #13
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	e007      	b.n	8003bf0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	051a      	lsls	r2, r3, #20
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c32:	025a      	lsls	r2, r3, #9
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	029a      	lsls	r2, r3, #10
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40012300 	.word	0x40012300
 8003c70:	0f000001 	.word	0x0f000001

08003c74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d13c      	bne.n	8003d08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d12b      	bne.n	8003d00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d127      	bne.n	8003d00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d119      	bne.n	8003d00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0220 	bic.w	r2, r2, #32
 8003cda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff fd54 	bl	80037ae <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d06:	e00e      	b.n	8003d26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fd5e 	bl	80037d6 <HAL_ADC_ErrorCallback>
}
 8003d1a:	e004      	b.n	8003d26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff fd40 	bl	80037c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2240      	movs	r2, #64	; 0x40
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff fd33 	bl	80037d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0ed      	b.n	8003f66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fe fd40 	bl	800281c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0202 	bic.w	r2, r2, #2
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dac:	f7ff faf4 	bl	8003398 <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003db2:	e012      	b.n	8003dda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003db4:	f7ff faf0 	bl	8003398 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b0a      	cmp	r3, #10
 8003dc0:	d90b      	bls.n	8003dda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0c5      	b.n	8003f66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e5      	bne.n	8003db4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df8:	f7ff face 	bl	8003398 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dfe:	e012      	b.n	8003e26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e00:	f7ff faca 	bl	8003398 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b0a      	cmp	r3, #10
 8003e0c:	d90b      	bls.n	8003e26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e09f      	b.n	8003f66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0e5      	beq.n	8003e00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7e1b      	ldrb	r3, [r3, #24]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d108      	bne.n	8003e4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e007      	b.n	8003e5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7e5b      	ldrb	r3, [r3, #25]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d108      	bne.n	8003e78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e007      	b.n	8003e88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7e9b      	ldrb	r3, [r3, #26]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d108      	bne.n	8003ea2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0220 	orr.w	r2, r2, #32
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e007      	b.n	8003eb2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0220 	bic.w	r2, r2, #32
 8003eb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7edb      	ldrb	r3, [r3, #27]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d108      	bne.n	8003ecc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0210 	bic.w	r2, r2, #16
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e007      	b.n	8003edc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0210 	orr.w	r2, r2, #16
 8003eda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	7f1b      	ldrb	r3, [r3, #28]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d108      	bne.n	8003ef6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0208 	orr.w	r2, r2, #8
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e007      	b.n	8003f06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0208 	bic.w	r2, r2, #8
 8003f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7f5b      	ldrb	r3, [r3, #29]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d108      	bne.n	8003f20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0204 	orr.w	r2, r2, #4
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e007      	b.n	8003f30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0204 	bic.w	r2, r2, #4
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	ea42 0103 	orr.w	r1, r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f86:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d003      	beq.n	8003f96 <HAL_CAN_ConfigFilter+0x26>
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	f040 80c7 	bne.w	8004124 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a69      	ldr	r2, [pc, #420]	; (8004140 <HAL_CAN_ConfigFilter+0x1d0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d001      	beq.n	8003fa4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_CAN_ConfigFilter+0x1d4>)
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4a63      	ldr	r2, [pc, #396]	; (8004144 <HAL_CAN_ConfigFilter+0x1d4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d111      	bne.n	8003fe0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fc2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2201      	movs	r2, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d123      	bne.n	8004052 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	43db      	mvns	r3, r3
 8004014:	401a      	ands	r2, r3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800402c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	3248      	adds	r2, #72	; 0x48
 8004032:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004046:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004048:	6979      	ldr	r1, [r7, #20]
 800404a:	3348      	adds	r3, #72	; 0x48
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d122      	bne.n	80040a0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	431a      	orrs	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800407a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3248      	adds	r2, #72	; 0x48
 8004080:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004094:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004096:	6979      	ldr	r1, [r7, #20]
 8004098:	3348      	adds	r3, #72	; 0x48
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	440b      	add	r3, r1
 800409e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040ba:	e007      	b.n	80040cc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	43db      	mvns	r3, r3
 80040de:	401a      	ands	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040e6:	e007      	b.n	80040f8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	431a      	orrs	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e006      	b.n	8004132 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
  }
}
 8004132:	4618      	mov	r0, r3
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40003400 	.word	0x40003400
 8004144:	40006400 	.word	0x40006400

08004148 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d12e      	bne.n	80041ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004174:	f7ff f910 	bl	8003398 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800417a:	e012      	b.n	80041a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800417c:	f7ff f90c 	bl	8003398 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b0a      	cmp	r3, #10
 8004188:	d90b      	bls.n	80041a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2205      	movs	r2, #5
 800419a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e012      	b.n	80041c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e5      	bne.n	800417c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e006      	b.n	80041c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	; 0x24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80041ee:	7ffb      	ldrb	r3, [r7, #31]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d003      	beq.n	80041fc <HAL_CAN_AddTxMessage+0x2c>
 80041f4:	7ffb      	ldrb	r3, [r7, #31]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	f040 80b8 	bne.w	800436c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80a0 	beq.w	800435c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	0e1b      	lsrs	r3, r3, #24
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d907      	bls.n	800423c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e09e      	b.n	800437a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800423c:	2201      	movs	r2, #1
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	409a      	lsls	r2, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10d      	bne.n	800426a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004258:	68f9      	ldr	r1, [r7, #12]
 800425a:	6809      	ldr	r1, [r1, #0]
 800425c:	431a      	orrs	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	3318      	adds	r3, #24
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	440b      	add	r3, r1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e00f      	b.n	800428a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004274:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800427e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	3318      	adds	r3, #24
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	440b      	add	r3, r1
 8004288:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6819      	ldr	r1, [r3, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	3318      	adds	r3, #24
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	440b      	add	r3, r1
 800429a:	3304      	adds	r3, #4
 800429c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	7d1b      	ldrb	r3, [r3, #20]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d111      	bne.n	80042ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	3318      	adds	r3, #24
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	4413      	add	r3, r2
 80042b2:	3304      	adds	r3, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	6811      	ldr	r1, [r2, #0]
 80042ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	3318      	adds	r3, #24
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	440b      	add	r3, r1
 80042c6:	3304      	adds	r3, #4
 80042c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3307      	adds	r3, #7
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	061a      	lsls	r2, r3, #24
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3306      	adds	r3, #6
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3305      	adds	r3, #5
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	4313      	orrs	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	3204      	adds	r2, #4
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	4610      	mov	r0, r2
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	6811      	ldr	r1, [r2, #0]
 80042f2:	ea43 0200 	orr.w	r2, r3, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	440b      	add	r3, r1
 80042fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004300:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3303      	adds	r3, #3
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	061a      	lsls	r2, r3, #24
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3302      	adds	r3, #2
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3301      	adds	r3, #1
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	4313      	orrs	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	4610      	mov	r0, r2
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	6811      	ldr	r1, [r2, #0]
 8004328:	ea43 0200 	orr.w	r2, r3, r0
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	440b      	add	r3, r1
 8004332:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004336:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3318      	adds	r3, #24
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	4413      	add	r3, r2
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6811      	ldr	r1, [r2, #0]
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3318      	adds	r3, #24
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	440b      	add	r3, r1
 8004356:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e00e      	b.n	800437a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e006      	b.n	800437a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004386:	b480      	push	{r7}
 8004388:	b087      	sub	sp, #28
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800439a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d003      	beq.n	80043aa <HAL_CAN_GetRxMessage+0x24>
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	f040 80f3 	bne.w	8004590 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10e      	bne.n	80043ce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d116      	bne.n	80043ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e0e7      	b.n	800459e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d107      	bne.n	80043ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0d8      	b.n	800459e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	331b      	adds	r3, #27
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	4413      	add	r3, r2
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0204 	and.w	r2, r3, #4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10c      	bne.n	8004424 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	331b      	adds	r3, #27
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	4413      	add	r3, r2
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0d5b      	lsrs	r3, r3, #21
 800441a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e00b      	b.n	800443c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	331b      	adds	r3, #27
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	4413      	add	r3, r2
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	08db      	lsrs	r3, r3, #3
 8004434:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	331b      	adds	r3, #27
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	4413      	add	r3, r2
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0202 	and.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	331b      	adds	r3, #27
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	4413      	add	r3, r2
 800445e:	3304      	adds	r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 020f 	and.w	r2, r3, #15
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	331b      	adds	r3, #27
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	4413      	add	r3, r2
 8004476:	3304      	adds	r3, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	b2da      	uxtb	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	331b      	adds	r3, #27
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	4413      	add	r3, r2
 800448e:	3304      	adds	r3, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	0c1b      	lsrs	r3, r3, #16
 8004494:	b29a      	uxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	0a1a      	lsrs	r2, r3, #8
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	0c1a      	lsrs	r2, r3, #16
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	3302      	adds	r3, #2
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0e1a      	lsrs	r2, r3, #24
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	3303      	adds	r3, #3
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	4413      	add	r3, r2
 8004508:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	3304      	adds	r3, #4
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	4413      	add	r3, r2
 8004520:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0a1a      	lsrs	r2, r3, #8
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	3305      	adds	r3, #5
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	0c1a      	lsrs	r2, r3, #16
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	3306      	adds	r3, #6
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	4413      	add	r3, r2
 8004554:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	0e1a      	lsrs	r2, r3, #24
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	3307      	adds	r3, #7
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0220 	orr.w	r2, r2, #32
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	e007      	b.n	800458c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0220 	orr.w	r2, r2, #32
 800458a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	e006      	b.n	800459e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
  }
}
 800459e:	4618      	mov	r0, r3
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045be:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80045c0:	7afb      	ldrb	r3, [r7, #11]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d002      	beq.n	80045cc <HAL_CAN_GetRxFifoFillLevel+0x22>
 80045c6:	7afb      	ldrb	r3, [r7, #11]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d10f      	bne.n	80045ec <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e005      	b.n	80045ec <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80045ec:	68fb      	ldr	r3, [r7, #12]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <__NVIC_SetPriorityGrouping+0x40>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004618:	4013      	ands	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <__NVIC_SetPriorityGrouping+0x44>)
 8004626:	4313      	orrs	r3, r2
 8004628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800462a:	4a04      	ldr	r2, [pc, #16]	; (800463c <__NVIC_SetPriorityGrouping+0x40>)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	60d3      	str	r3, [r2, #12]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00
 8004640:	05fa0000 	.word	0x05fa0000

08004644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <__NVIC_GetPriorityGrouping+0x18>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	0a1b      	lsrs	r3, r3, #8
 800464e:	f003 0307 	and.w	r3, r3, #7
}
 8004652:	4618      	mov	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466e:	2b00      	cmp	r3, #0
 8004670:	db0b      	blt.n	800468a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	f003 021f 	and.w	r2, r3, #31
 8004678:	4907      	ldr	r1, [pc, #28]	; (8004698 <__NVIC_EnableIRQ+0x38>)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	2001      	movs	r0, #1
 8004682:	fa00 f202 	lsl.w	r2, r0, r2
 8004686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	e000e100 	.word	0xe000e100

0800469c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	db0a      	blt.n	80046c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	490c      	ldr	r1, [pc, #48]	; (80046e8 <__NVIC_SetPriority+0x4c>)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	0112      	lsls	r2, r2, #4
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	440b      	add	r3, r1
 80046c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c4:	e00a      	b.n	80046dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4908      	ldr	r1, [pc, #32]	; (80046ec <__NVIC_SetPriority+0x50>)
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	3b04      	subs	r3, #4
 80046d4:	0112      	lsls	r2, r2, #4
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	440b      	add	r3, r1
 80046da:	761a      	strb	r2, [r3, #24]
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	e000e100 	.word	0xe000e100
 80046ec:	e000ed00 	.word	0xe000ed00

080046f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f1c3 0307 	rsb	r3, r3, #7
 800470a:	2b04      	cmp	r3, #4
 800470c:	bf28      	it	cs
 800470e:	2304      	movcs	r3, #4
 8004710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3304      	adds	r3, #4
 8004716:	2b06      	cmp	r3, #6
 8004718:	d902      	bls.n	8004720 <NVIC_EncodePriority+0x30>
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3b03      	subs	r3, #3
 800471e:	e000      	b.n	8004722 <NVIC_EncodePriority+0x32>
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43da      	mvns	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	401a      	ands	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	fa01 f303 	lsl.w	r3, r1, r3
 8004742:	43d9      	mvns	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004748:	4313      	orrs	r3, r2
         );
}
 800474a:	4618      	mov	r0, r3
 800474c:	3724      	adds	r7, #36	; 0x24
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff ff4c 	bl	80045fc <__NVIC_SetPriorityGrouping>
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800477e:	f7ff ff61 	bl	8004644 <__NVIC_GetPriorityGrouping>
 8004782:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	6978      	ldr	r0, [r7, #20]
 800478a:	f7ff ffb1 	bl	80046f0 <NVIC_EncodePriority>
 800478e:	4602      	mov	r2, r0
 8004790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004794:	4611      	mov	r1, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ff80 	bl	800469c <__NVIC_SetPriority>
}
 800479c:	bf00      	nop
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff ff54 	bl	8004660 <__NVIC_EnableIRQ>
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047cc:	f7fe fde4 	bl	8003398 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e099      	b.n	8004910 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047fc:	e00f      	b.n	800481e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047fe:	f7fe fdcb 	bl	8003398 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b05      	cmp	r3, #5
 800480a:	d908      	bls.n	800481e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2203      	movs	r2, #3
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e078      	b.n	8004910 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e8      	bne.n	80047fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4b38      	ldr	r3, [pc, #224]	; (8004918 <HAL_DMA_Init+0x158>)
 8004838:	4013      	ands	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800484a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	2b04      	cmp	r3, #4
 8004876:	d107      	bne.n	8004888 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	4313      	orrs	r3, r2
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0307 	bic.w	r3, r3, #7
 800489e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d117      	bne.n	80048e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00e      	beq.n	80048e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa77 	bl	8004db8 <DMA_CheckFifoParam>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2240      	movs	r2, #64	; 0x40
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048de:	2301      	movs	r3, #1
 80048e0:	e016      	b.n	8004910 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa2e 	bl	8004d4c <DMA_CalcBaseAndBitshift>
 80048f0:	4603      	mov	r3, r0
 80048f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	223f      	movs	r2, #63	; 0x3f
 80048fa:	409a      	lsls	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e010803f 	.word	0xe010803f

0800491c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_DMA_Start_IT+0x26>
 800493e:	2302      	movs	r3, #2
 8004940:	e048      	b.n	80049d4 <HAL_DMA_Start_IT+0xb8>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d137      	bne.n	80049c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f9c0 	bl	8004cf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	223f      	movs	r2, #63	; 0x3f
 8004976:	409a      	lsls	r2, r3
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0216 	orr.w	r2, r2, #22
 800498a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800499a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0208 	orr.w	r2, r2, #8
 80049b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e005      	b.n	80049d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
 80049d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80049e8:	4b92      	ldr	r3, [pc, #584]	; (8004c34 <HAL_DMA_IRQHandler+0x258>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a92      	ldr	r2, [pc, #584]	; (8004c38 <HAL_DMA_IRQHandler+0x25c>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	0a9b      	lsrs	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	2208      	movs	r2, #8
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01a      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d013      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0204 	bic.w	r2, r2, #4
 8004a2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	2208      	movs	r2, #8
 8004a36:	409a      	lsls	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f043 0201 	orr.w	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d012      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	f043 0202 	orr.w	r2, r3, #2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	2204      	movs	r2, #4
 8004a84:	409a      	lsls	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d012      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aac:	f043 0204 	orr.w	r2, r3, #4
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	2210      	movs	r2, #16
 8004aba:	409a      	lsls	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d043      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d03c      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d018      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d024      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
 8004b0a:	e01f      	b.n	8004b4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
 8004b1c:	e016      	b.n	8004b4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d107      	bne.n	8004b3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0208 	bic.w	r2, r2, #8
 8004b3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	2220      	movs	r2, #32
 8004b52:	409a      	lsls	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 808e 	beq.w	8004c7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8086 	beq.w	8004c7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b72:	2220      	movs	r2, #32
 8004b74:	409a      	lsls	r2, r3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	d136      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0216 	bic.w	r2, r2, #22
 8004b94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ba4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <HAL_DMA_IRQHandler+0x1da>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0208 	bic.w	r2, r2, #8
 8004bc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bca:	223f      	movs	r2, #63	; 0x3f
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d07d      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
        }
        return;
 8004bf2:	e078      	b.n	8004ce6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01c      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d108      	bne.n	8004c22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d030      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
 8004c20:	e02b      	b.n	8004c7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d027      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
 8004c32:	e022      	b.n	8004c7a <HAL_DMA_IRQHandler+0x29e>
 8004c34:	20000030 	.word	0x20000030
 8004c38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0210 	bic.w	r2, r2, #16
 8004c58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d032      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d022      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2205      	movs	r2, #5
 8004c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d307      	bcc.n	8004cc2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f2      	bne.n	8004ca6 <HAL_DMA_IRQHandler+0x2ca>
 8004cc0:	e000      	b.n	8004cc4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004cc2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
 8004ce4:	e000      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004ce6:	bf00      	nop
    }
  }
}
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop

08004cf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d108      	bne.n	8004d30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d2e:	e007      	b.n	8004d40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	3b10      	subs	r3, #16
 8004d5c:	4a13      	ldr	r2, [pc, #76]	; (8004dac <DMA_CalcBaseAndBitshift+0x60>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d66:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <DMA_CalcBaseAndBitshift+0x64>)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d908      	bls.n	8004d8c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <DMA_CalcBaseAndBitshift+0x68>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	1d1a      	adds	r2, r3, #4
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	659a      	str	r2, [r3, #88]	; 0x58
 8004d8a:	e006      	b.n	8004d9a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <DMA_CalcBaseAndBitshift+0x68>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	aaaaaaab 	.word	0xaaaaaaab
 8004db0:	0800b80c 	.word	0x0800b80c
 8004db4:	fffffc00 	.word	0xfffffc00

08004db8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d11f      	bne.n	8004e12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d855      	bhi.n	8004e84 <DMA_CheckFifoParam+0xcc>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <DMA_CheckFifoParam+0x28>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004df1 	.word	0x08004df1
 8004de4:	08004e03 	.word	0x08004e03
 8004de8:	08004df1 	.word	0x08004df1
 8004dec:	08004e85 	.word	0x08004e85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d045      	beq.n	8004e88 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e00:	e042      	b.n	8004e88 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e0a:	d13f      	bne.n	8004e8c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e10:	e03c      	b.n	8004e8c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1a:	d121      	bne.n	8004e60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d836      	bhi.n	8004e90 <DMA_CheckFifoParam+0xd8>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <DMA_CheckFifoParam+0x70>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e3f 	.word	0x08004e3f
 8004e30:	08004e39 	.word	0x08004e39
 8004e34:	08004e51 	.word	0x08004e51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3c:	e02f      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d024      	beq.n	8004e94 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4e:	e021      	b.n	8004e94 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e58:	d11e      	bne.n	8004e98 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e5e:	e01b      	b.n	8004e98 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d902      	bls.n	8004e6c <DMA_CheckFifoParam+0xb4>
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d003      	beq.n	8004e72 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e6a:	e018      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e015      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00e      	beq.n	8004e9c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]
      break;
 8004e82:	e00b      	b.n	8004e9c <DMA_CheckFifoParam+0xe4>
      break;
 8004e84:	bf00      	nop
 8004e86:	e00a      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
      break;
 8004e88:	bf00      	nop
 8004e8a:	e008      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
      break;
 8004e8c:	bf00      	nop
 8004e8e:	e006      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
      break;
 8004e90:	bf00      	nop
 8004e92:	e004      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
      break;
 8004e94:	bf00      	nop
 8004e96:	e002      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
      break;   
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
      break;
 8004e9c:	bf00      	nop
    }
  } 
  
  return status; 
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	; 0x24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	e175      	b.n	80051b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ecc:	2201      	movs	r2, #1
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4013      	ands	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	f040 8164 	bne.w	80051b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d00b      	beq.n	8004f0a <HAL_GPIO_Init+0x5e>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d007      	beq.n	8004f0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004efe:	2b11      	cmp	r3, #17
 8004f00:	d003      	beq.n	8004f0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b12      	cmp	r3, #18
 8004f08:	d130      	bne.n	8004f6c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	2203      	movs	r2, #3
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f40:	2201      	movs	r2, #1
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 0201 	and.w	r2, r3, #1
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	2203      	movs	r2, #3
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d003      	beq.n	8004fac <HAL_GPIO_Init+0x100>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b12      	cmp	r3, #18
 8004faa:	d123      	bne.n	8004ff4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	08da      	lsrs	r2, r3, #3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3208      	adds	r2, #8
 8004fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	220f      	movs	r2, #15
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	08da      	lsrs	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3208      	adds	r2, #8
 8004fee:	69b9      	ldr	r1, [r7, #24]
 8004ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	2203      	movs	r2, #3
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 0203 	and.w	r2, r3, #3
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80be 	beq.w	80051b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005036:	4b65      	ldr	r3, [pc, #404]	; (80051cc <HAL_GPIO_Init+0x320>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	4a64      	ldr	r2, [pc, #400]	; (80051cc <HAL_GPIO_Init+0x320>)
 800503c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005040:	6453      	str	r3, [r2, #68]	; 0x44
 8005042:	4b62      	ldr	r3, [pc, #392]	; (80051cc <HAL_GPIO_Init+0x320>)
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800504e:	4a60      	ldr	r2, [pc, #384]	; (80051d0 <HAL_GPIO_Init+0x324>)
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	089b      	lsrs	r3, r3, #2
 8005054:	3302      	adds	r3, #2
 8005056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	220f      	movs	r2, #15
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4013      	ands	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a57      	ldr	r2, [pc, #348]	; (80051d4 <HAL_GPIO_Init+0x328>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d037      	beq.n	80050ea <HAL_GPIO_Init+0x23e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a56      	ldr	r2, [pc, #344]	; (80051d8 <HAL_GPIO_Init+0x32c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d031      	beq.n	80050e6 <HAL_GPIO_Init+0x23a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a55      	ldr	r2, [pc, #340]	; (80051dc <HAL_GPIO_Init+0x330>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d02b      	beq.n	80050e2 <HAL_GPIO_Init+0x236>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a54      	ldr	r2, [pc, #336]	; (80051e0 <HAL_GPIO_Init+0x334>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d025      	beq.n	80050de <HAL_GPIO_Init+0x232>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a53      	ldr	r2, [pc, #332]	; (80051e4 <HAL_GPIO_Init+0x338>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01f      	beq.n	80050da <HAL_GPIO_Init+0x22e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a52      	ldr	r2, [pc, #328]	; (80051e8 <HAL_GPIO_Init+0x33c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d019      	beq.n	80050d6 <HAL_GPIO_Init+0x22a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a51      	ldr	r2, [pc, #324]	; (80051ec <HAL_GPIO_Init+0x340>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_GPIO_Init+0x226>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a50      	ldr	r2, [pc, #320]	; (80051f0 <HAL_GPIO_Init+0x344>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00d      	beq.n	80050ce <HAL_GPIO_Init+0x222>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a4f      	ldr	r2, [pc, #316]	; (80051f4 <HAL_GPIO_Init+0x348>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d007      	beq.n	80050ca <HAL_GPIO_Init+0x21e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a4e      	ldr	r2, [pc, #312]	; (80051f8 <HAL_GPIO_Init+0x34c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <HAL_GPIO_Init+0x21a>
 80050c2:	2309      	movs	r3, #9
 80050c4:	e012      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050c6:	230a      	movs	r3, #10
 80050c8:	e010      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050ca:	2308      	movs	r3, #8
 80050cc:	e00e      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050ce:	2307      	movs	r3, #7
 80050d0:	e00c      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050d2:	2306      	movs	r3, #6
 80050d4:	e00a      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050d6:	2305      	movs	r3, #5
 80050d8:	e008      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050da:	2304      	movs	r3, #4
 80050dc:	e006      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050de:	2303      	movs	r3, #3
 80050e0:	e004      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e002      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_GPIO_Init+0x240>
 80050ea:	2300      	movs	r3, #0
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	f002 0203 	and.w	r2, r2, #3
 80050f2:	0092      	lsls	r2, r2, #2
 80050f4:	4093      	lsls	r3, r2
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80050fc:	4934      	ldr	r1, [pc, #208]	; (80051d0 <HAL_GPIO_Init+0x324>)
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	089b      	lsrs	r3, r3, #2
 8005102:	3302      	adds	r3, #2
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800510a:	4b3c      	ldr	r3, [pc, #240]	; (80051fc <HAL_GPIO_Init+0x350>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800512e:	4a33      	ldr	r2, [pc, #204]	; (80051fc <HAL_GPIO_Init+0x350>)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005134:	4b31      	ldr	r3, [pc, #196]	; (80051fc <HAL_GPIO_Init+0x350>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005158:	4a28      	ldr	r2, [pc, #160]	; (80051fc <HAL_GPIO_Init+0x350>)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800515e:	4b27      	ldr	r3, [pc, #156]	; (80051fc <HAL_GPIO_Init+0x350>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_GPIO_Init+0x350>)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005188:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <HAL_GPIO_Init+0x350>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051ac:	4a13      	ldr	r2, [pc, #76]	; (80051fc <HAL_GPIO_Init+0x350>)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3301      	adds	r3, #1
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b0f      	cmp	r3, #15
 80051bc:	f67f ae86 	bls.w	8004ecc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80051c0:	bf00      	nop
 80051c2:	3724      	adds	r7, #36	; 0x24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40013800 	.word	0x40013800
 80051d4:	40020000 	.word	0x40020000
 80051d8:	40020400 	.word	0x40020400
 80051dc:	40020800 	.word	0x40020800
 80051e0:	40020c00 	.word	0x40020c00
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40021400 	.word	0x40021400
 80051ec:	40021800 	.word	0x40021800
 80051f0:	40021c00 	.word	0x40021c00
 80051f4:	40022000 	.word	0x40022000
 80051f8:	40022400 	.word	0x40022400
 80051fc:	40013c00 	.word	0x40013c00

08005200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	887b      	ldrh	r3, [r7, #2]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
 800521c:	e001      	b.n	8005222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
 800523c:	4613      	mov	r3, r2
 800523e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005240:	787b      	ldrb	r3, [r7, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800524c:	e003      	b.n	8005256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800524e:	887b      	ldrh	r3, [r7, #2]
 8005250:	041a      	lsls	r2, r3, #16
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	619a      	str	r2, [r3, #24]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800526e:	4b08      	ldr	r3, [pc, #32]	; (8005290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800527a:	4a05      	ldr	r2, [pc, #20]	; (8005290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f806 	bl	8005294 <HAL_GPIO_EXTI_Callback>
  }
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40013c00 	.word	0x40013c00

08005294 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80052b4:	2300      	movs	r3, #0
 80052b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e29b      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8087 	beq.w	80053de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052d0:	4b96      	ldr	r3, [pc, #600]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d00c      	beq.n	80052f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052dc:	4b93      	ldr	r3, [pc, #588]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 030c 	and.w	r3, r3, #12
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d112      	bne.n	800530e <HAL_RCC_OscConfig+0x62>
 80052e8:	4b90      	ldr	r3, [pc, #576]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f4:	d10b      	bne.n	800530e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f6:	4b8d      	ldr	r3, [pc, #564]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d06c      	beq.n	80053dc <HAL_RCC_OscConfig+0x130>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d168      	bne.n	80053dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e275      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x7a>
 8005318:	4b84      	ldr	r3, [pc, #528]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a83      	ldr	r2, [pc, #524]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e02e      	b.n	8005384 <HAL_RCC_OscConfig+0xd8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x9c>
 800532e:	4b7f      	ldr	r3, [pc, #508]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a7e      	ldr	r2, [pc, #504]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b7c      	ldr	r3, [pc, #496]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a7b      	ldr	r2, [pc, #492]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e01d      	b.n	8005384 <HAL_RCC_OscConfig+0xd8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0xc0>
 8005352:	4b76      	ldr	r3, [pc, #472]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a75      	ldr	r2, [pc, #468]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4b73      	ldr	r3, [pc, #460]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a72      	ldr	r2, [pc, #456]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e00b      	b.n	8005384 <HAL_RCC_OscConfig+0xd8>
 800536c:	4b6f      	ldr	r3, [pc, #444]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a6e      	ldr	r2, [pc, #440]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b6c      	ldr	r3, [pc, #432]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a6b      	ldr	r2, [pc, #428]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800537e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d013      	beq.n	80053b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fe f804 	bl	8003398 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005394:	f7fe f800 	bl	8003398 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	; 0x64
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e229      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a6:	4b61      	ldr	r3, [pc, #388]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0xe8>
 80053b2:	e014      	b.n	80053de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fd fff0 	bl	8003398 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fd ffec 	bl	8003398 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e215      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ce:	4b57      	ldr	r3, [pc, #348]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x110>
 80053da:	e000      	b.n	80053de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d069      	beq.n	80054be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053ea:	4b50      	ldr	r3, [pc, #320]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f6:	4b4d      	ldr	r3, [pc, #308]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d11c      	bne.n	800543c <HAL_RCC_OscConfig+0x190>
 8005402:	4b4a      	ldr	r3, [pc, #296]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d116      	bne.n	800543c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540e:	4b47      	ldr	r3, [pc, #284]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_RCC_OscConfig+0x17a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d001      	beq.n	8005426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e1e9      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005426:	4b41      	ldr	r3, [pc, #260]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	493d      	ldr	r1, [pc, #244]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543a:	e040      	b.n	80054be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d023      	beq.n	800548c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005444:	4b39      	ldr	r3, [pc, #228]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a38      	ldr	r2, [pc, #224]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fd ffa2 	bl	8003398 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005458:	f7fd ff9e 	bl	8003398 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e1c7      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546a:	4b30      	ldr	r3, [pc, #192]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005476:	4b2d      	ldr	r3, [pc, #180]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4929      	ldr	r1, [pc, #164]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]
 800548a:	e018      	b.n	80054be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548c:	4b27      	ldr	r3, [pc, #156]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a26      	ldr	r2, [pc, #152]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fd ff7e 	bl	8003398 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a0:	f7fd ff7a 	bl	8003398 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e1a3      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b2:	4b1e      	ldr	r3, [pc, #120]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d038      	beq.n	800553c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d019      	beq.n	8005506 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d2:	4b16      	ldr	r3, [pc, #88]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80054d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054de:	f7fd ff5b 	bl	8003398 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e6:	f7fd ff57 	bl	8003398 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e180      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <HAL_RCC_OscConfig+0x280>)
 80054fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x23a>
 8005504:	e01a      	b.n	800553c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <HAL_RCC_OscConfig+0x280>)
 8005508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550a:	4a08      	ldr	r2, [pc, #32]	; (800552c <HAL_RCC_OscConfig+0x280>)
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005512:	f7fd ff41 	bl	8003398 <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005518:	e00a      	b.n	8005530 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800551a:	f7fd ff3d 	bl	8003398 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d903      	bls.n	8005530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e166      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
 800552c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005530:	4b92      	ldr	r3, [pc, #584]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ee      	bne.n	800551a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a4 	beq.w	8005692 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554a:	4b8c      	ldr	r3, [pc, #560]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10d      	bne.n	8005572 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005556:	4b89      	ldr	r3, [pc, #548]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	4a88      	ldr	r2, [pc, #544]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800555c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005560:	6413      	str	r3, [r2, #64]	; 0x40
 8005562:	4b86      	ldr	r3, [pc, #536]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005572:	4b83      	ldr	r3, [pc, #524]	; (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d118      	bne.n	80055b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800557e:	4b80      	ldr	r3, [pc, #512]	; (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a7f      	ldr	r2, [pc, #508]	; (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558a:	f7fd ff05 	bl	8003398 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005592:	f7fd ff01 	bl	8003398 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b64      	cmp	r3, #100	; 0x64
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e12a      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a4:	4b76      	ldr	r3, [pc, #472]	; (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f0      	beq.n	8005592 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d106      	bne.n	80055c6 <HAL_RCC_OscConfig+0x31a>
 80055b8:	4b70      	ldr	r3, [pc, #448]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055bc:	4a6f      	ldr	r2, [pc, #444]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	6713      	str	r3, [r2, #112]	; 0x70
 80055c4:	e02d      	b.n	8005622 <HAL_RCC_OscConfig+0x376>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x33c>
 80055ce:	4b6b      	ldr	r3, [pc, #428]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	4a6a      	ldr	r2, [pc, #424]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	6713      	str	r3, [r2, #112]	; 0x70
 80055da:	4b68      	ldr	r3, [pc, #416]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	4a67      	ldr	r2, [pc, #412]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055e0:	f023 0304 	bic.w	r3, r3, #4
 80055e4:	6713      	str	r3, [r2, #112]	; 0x70
 80055e6:	e01c      	b.n	8005622 <HAL_RCC_OscConfig+0x376>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	d10c      	bne.n	800560a <HAL_RCC_OscConfig+0x35e>
 80055f0:	4b62      	ldr	r3, [pc, #392]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f4:	4a61      	ldr	r2, [pc, #388]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	6713      	str	r3, [r2, #112]	; 0x70
 80055fc:	4b5f      	ldr	r3, [pc, #380]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	4a5e      	ldr	r2, [pc, #376]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6713      	str	r3, [r2, #112]	; 0x70
 8005608:	e00b      	b.n	8005622 <HAL_RCC_OscConfig+0x376>
 800560a:	4b5c      	ldr	r3, [pc, #368]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	4a5b      	ldr	r2, [pc, #364]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	6713      	str	r3, [r2, #112]	; 0x70
 8005616:	4b59      	ldr	r3, [pc, #356]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561a:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800561c:	f023 0304 	bic.w	r3, r3, #4
 8005620:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d015      	beq.n	8005656 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562a:	f7fd feb5 	bl	8003398 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005630:	e00a      	b.n	8005648 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005632:	f7fd feb1 	bl	8003398 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e0d8      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005648:	4b4c      	ldr	r3, [pc, #304]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ee      	beq.n	8005632 <HAL_RCC_OscConfig+0x386>
 8005654:	e014      	b.n	8005680 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005656:	f7fd fe9f 	bl	8003398 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800565c:	e00a      	b.n	8005674 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565e:	f7fd fe9b 	bl	8003398 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f241 3288 	movw	r2, #5000	; 0x1388
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e0c2      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005674:	4b41      	ldr	r3, [pc, #260]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1ee      	bne.n	800565e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d105      	bne.n	8005692 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005686:	4b3d      	ldr	r3, [pc, #244]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	4a3c      	ldr	r2, [pc, #240]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800568c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005690:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80ae 	beq.w	80057f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 030c 	and.w	r3, r3, #12
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d06d      	beq.n	8005784 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d14b      	bne.n	8005748 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b0:	4b32      	ldr	r3, [pc, #200]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a31      	ldr	r2, [pc, #196]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80056b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fd fe6c 	bl	8003398 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fd fe68 	bl	8003398 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e091      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d6:	4b29      	ldr	r3, [pc, #164]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f0      	bne.n	80056c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	019b      	lsls	r3, r3, #6
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	3b01      	subs	r3, #1
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	061b      	lsls	r3, r3, #24
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	071b      	lsls	r3, r3, #28
 800570e:	491b      	ldr	r1, [pc, #108]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005710:	4313      	orrs	r3, r2
 8005712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005714:	4b19      	ldr	r3, [pc, #100]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a18      	ldr	r2, [pc, #96]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800571a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800571e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7fd fe3a 	bl	8003398 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005728:	f7fd fe36 	bl	8003398 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e05f      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x47c>
 8005746:	e057      	b.n	80057f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a0b      	ldr	r2, [pc, #44]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 800574e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fd fe20 	bl	8003398 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fd fe1c 	bl	8003398 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e045      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576e:	4b03      	ldr	r3, [pc, #12]	; (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x4b0>
 800577a:	e03d      	b.n	80057f8 <HAL_RCC_OscConfig+0x54c>
 800577c:	40023800 	.word	0x40023800
 8005780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005784:	4b1f      	ldr	r3, [pc, #124]	; (8005804 <HAL_RCC_OscConfig+0x558>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d030      	beq.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800579c:	429a      	cmp	r2, r3
 800579e:	d129      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d122      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057b4:	4013      	ands	r3, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057bc:	4293      	cmp	r3, r2
 80057be:	d119      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	3b01      	subs	r3, #1
 80057ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d10f      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d107      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d001      	beq.n	80057f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800

08005808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0d0      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b6a      	ldr	r3, [pc, #424]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d910      	bls.n	8005850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b67      	ldr	r3, [pc, #412]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 020f 	bic.w	r2, r3, #15
 8005836:	4965      	ldr	r1, [pc, #404]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b63      	ldr	r3, [pc, #396]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0b8      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d020      	beq.n	800589e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005868:	4b59      	ldr	r3, [pc, #356]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a58      	ldr	r2, [pc, #352]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800586e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005880:	4b53      	ldr	r3, [pc, #332]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4a52      	ldr	r2, [pc, #328]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800588a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800588c:	4b50      	ldr	r3, [pc, #320]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	494d      	ldr	r1, [pc, #308]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800589a:	4313      	orrs	r3, r2
 800589c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d040      	beq.n	800592c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d107      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b2:	4b47      	ldr	r3, [pc, #284]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d115      	bne.n	80058ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e07f      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d107      	bne.n	80058da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ca:	4b41      	ldr	r3, [pc, #260]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e073      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058da:	4b3d      	ldr	r3, [pc, #244]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e06b      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ea:	4b39      	ldr	r3, [pc, #228]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 0203 	bic.w	r2, r3, #3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4936      	ldr	r1, [pc, #216]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fc:	f7fd fd4c 	bl	8003398 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	e00a      	b.n	800591a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005904:	f7fd fd48 	bl	8003398 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e053      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	4b2d      	ldr	r3, [pc, #180]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 020c 	and.w	r2, r3, #12
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	429a      	cmp	r2, r3
 800592a:	d1eb      	bne.n	8005904 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d210      	bcs.n	800595c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 020f 	bic.w	r2, r3, #15
 8005942:	4922      	ldr	r1, [pc, #136]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	4b20      	ldr	r3, [pc, #128]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e032      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4916      	ldr	r1, [pc, #88]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	490e      	ldr	r1, [pc, #56]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005996:	4313      	orrs	r3, r2
 8005998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800599a:	f000 f821 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 800599e:	4601      	mov	r1, r0
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	4a0a      	ldr	r2, [pc, #40]	; (80059d4 <HAL_RCC_ClockConfig+0x1cc>)
 80059ac:	5cd3      	ldrb	r3, [r2, r3]
 80059ae:	fa21 f303 	lsr.w	r3, r1, r3
 80059b2:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <HAL_RCC_ClockConfig+0x1d0>)
 80059b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <HAL_RCC_ClockConfig+0x1d4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd fb2a 	bl	8003014 <HAL_InitTick>

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40023c00 	.word	0x40023c00
 80059d0:	40023800 	.word	0x40023800
 80059d4:	0800b7f4 	.word	0x0800b7f4
 80059d8:	20000030 	.word	0x20000030
 80059dc:	20000034 	.word	0x20000034

080059e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	607b      	str	r3, [r7, #4]
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	2300      	movs	r3, #0
 80059f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f6:	4b50      	ldr	r3, [pc, #320]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x158>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d007      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0x32>
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d008      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x38>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f040 808d 	bne.w	8005b26 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a0c:	4b4b      	ldr	r3, [pc, #300]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005a0e:	60bb      	str	r3, [r7, #8]
      break;
 8005a10:	e08c      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a12:	4b4b      	ldr	r3, [pc, #300]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a14:	60bb      	str	r3, [r7, #8]
      break;
 8005a16:	e089      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a18:	4b47      	ldr	r3, [pc, #284]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a20:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a22:	4b45      	ldr	r3, [pc, #276]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d023      	beq.n	8005a76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2e:	4b42      	ldr	r3, [pc, #264]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	099b      	lsrs	r3, r3, #6
 8005a34:	f04f 0400 	mov.w	r4, #0
 8005a38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	ea03 0501 	and.w	r5, r3, r1
 8005a44:	ea04 0602 	and.w	r6, r4, r2
 8005a48:	4a3d      	ldr	r2, [pc, #244]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a4a:	fb02 f106 	mul.w	r1, r2, r6
 8005a4e:	2200      	movs	r2, #0
 8005a50:	fb02 f205 	mul.w	r2, r2, r5
 8005a54:	440a      	add	r2, r1
 8005a56:	493a      	ldr	r1, [pc, #232]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a58:	fba5 0101 	umull	r0, r1, r5, r1
 8005a5c:	1853      	adds	r3, r2, r1
 8005a5e:	4619      	mov	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f04f 0400 	mov.w	r4, #0
 8005a66:	461a      	mov	r2, r3
 8005a68:	4623      	mov	r3, r4
 8005a6a:	f7fa fc39 	bl	80002e0 <__aeabi_uldivmod>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	460c      	mov	r4, r1
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e049      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a76:	4b30      	ldr	r3, [pc, #192]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	099b      	lsrs	r3, r3, #6
 8005a7c:	f04f 0400 	mov.w	r4, #0
 8005a80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	ea03 0501 	and.w	r5, r3, r1
 8005a8c:	ea04 0602 	and.w	r6, r4, r2
 8005a90:	4629      	mov	r1, r5
 8005a92:	4632      	mov	r2, r6
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	f04f 0400 	mov.w	r4, #0
 8005a9c:	0154      	lsls	r4, r2, #5
 8005a9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005aa2:	014b      	lsls	r3, r1, #5
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	1b49      	subs	r1, r1, r5
 8005aaa:	eb62 0206 	sbc.w	r2, r2, r6
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	f04f 0400 	mov.w	r4, #0
 8005ab6:	0194      	lsls	r4, r2, #6
 8005ab8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005abc:	018b      	lsls	r3, r1, #6
 8005abe:	1a5b      	subs	r3, r3, r1
 8005ac0:	eb64 0402 	sbc.w	r4, r4, r2
 8005ac4:	f04f 0100 	mov.w	r1, #0
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	00e2      	lsls	r2, r4, #3
 8005ace:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ad2:	00d9      	lsls	r1, r3, #3
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4614      	mov	r4, r2
 8005ad8:	195b      	adds	r3, r3, r5
 8005ada:	eb44 0406 	adc.w	r4, r4, r6
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	02a2      	lsls	r2, r4, #10
 8005ae8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005aec:	0299      	lsls	r1, r3, #10
 8005aee:	460b      	mov	r3, r1
 8005af0:	4614      	mov	r4, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	4621      	mov	r1, r4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f04f 0400 	mov.w	r4, #0
 8005afc:	461a      	mov	r2, r3
 8005afe:	4623      	mov	r3, r4
 8005b00:	f7fa fbee 	bl	80002e0 <__aeabi_uldivmod>
 8005b04:	4603      	mov	r3, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	3301      	adds	r3, #1
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	60bb      	str	r3, [r7, #8]
      break;
 8005b24:	e002      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005b28:	60bb      	str	r3, [r7, #8]
      break;
 8005b2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	00f42400 	.word	0x00f42400
 8005b40:	017d7840 	.word	0x017d7840

08005b44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000030 	.word	0x20000030

08005b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b60:	f7ff fff0 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005b64:	4601      	mov	r1, r0
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	0a9b      	lsrs	r3, r3, #10
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	4a03      	ldr	r2, [pc, #12]	; (8005b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b72:	5cd3      	ldrb	r3, [r2, r3]
 8005b74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	0800b804 	.word	0x0800b804

08005b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b88:	f7ff ffdc 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005b8c:	4601      	mov	r1, r0
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	0b5b      	lsrs	r3, r3, #13
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	4a03      	ldr	r2, [pc, #12]	; (8005ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b9a:	5cd3      	ldrb	r3, [r2, r3]
 8005b9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	0800b804 	.word	0x0800b804

08005bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	220f      	movs	r2, #15
 8005bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005bbc:	4b12      	ldr	r3, [pc, #72]	; (8005c08 <HAL_RCC_GetClockConfig+0x5c>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0203 	and.w	r2, r3, #3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <HAL_RCC_GetClockConfig+0x5c>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <HAL_RCC_GetClockConfig+0x5c>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <HAL_RCC_GetClockConfig+0x5c>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	08db      	lsrs	r3, r3, #3
 8005be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bee:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <HAL_RCC_GetClockConfig+0x60>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 020f 	and.w	r2, r3, #15
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	601a      	str	r2, [r3, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	40023c00 	.word	0x40023c00

08005c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d012      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c38:	4b69      	ldr	r3, [pc, #420]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4a68      	ldr	r2, [pc, #416]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c42:	6093      	str	r3, [r2, #8]
 8005c44:	4b66      	ldr	r3, [pc, #408]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4c:	4964      	ldr	r1, [pc, #400]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d017      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c6a:	4b5d      	ldr	r3, [pc, #372]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	4959      	ldr	r1, [pc, #356]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c88:	d101      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005c96:	2301      	movs	r3, #1
 8005c98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d017      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ca6:	4b4e      	ldr	r3, [pc, #312]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	494a      	ldr	r1, [pc, #296]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc4:	d101      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 808b 	beq.w	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cf4:	4b3a      	ldr	r3, [pc, #232]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	4a39      	ldr	r2, [pc, #228]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8005d00:	4b37      	ldr	r3, [pc, #220]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d0c:	4b35      	ldr	r3, [pc, #212]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a34      	ldr	r2, [pc, #208]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d18:	f7fd fb3e 	bl	8003398 <HAL_GetTick>
 8005d1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d20:	f7fd fb3a 	bl	8003398 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	; 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e356      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d32:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f0      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d3e:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d035      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d02e      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d5c:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d66:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d72:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d76:	4a1a      	ldr	r2, [pc, #104]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005d7e:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d84:	4b16      	ldr	r3, [pc, #88]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d114      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fd fb02 	bl	8003398 <HAL_GetTick>
 8005d94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d96:	e00a      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d98:	f7fd fafe 	bl	8003398 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e318      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dae:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0ee      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc6:	d111      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dd6:	400b      	ands	r3, r1
 8005dd8:	4901      	ldr	r1, [pc, #4]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	608b      	str	r3, [r1, #8]
 8005dde:	e00b      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005de0:	40023800 	.word	0x40023800
 8005de4:	40007000 	.word	0x40007000
 8005de8:	0ffffcff 	.word	0x0ffffcff
 8005dec:	4bb1      	ldr	r3, [pc, #708]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	4ab0      	ldr	r2, [pc, #704]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005df2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005df6:	6093      	str	r3, [r2, #8]
 8005df8:	4bae      	ldr	r3, [pc, #696]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e04:	49ab      	ldr	r1, [pc, #684]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d010      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e16:	4ba7      	ldr	r3, [pc, #668]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e1c:	4aa5      	ldr	r2, [pc, #660]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e26:	4ba3      	ldr	r3, [pc, #652]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	49a0      	ldr	r1, [pc, #640]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e44:	4b9b      	ldr	r3, [pc, #620]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e52:	4998      	ldr	r1, [pc, #608]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e66:	4b93      	ldr	r3, [pc, #588]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e74:	498f      	ldr	r1, [pc, #572]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e88:	4b8a      	ldr	r3, [pc, #552]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e96:	4987      	ldr	r1, [pc, #540]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005eaa:	4b82      	ldr	r3, [pc, #520]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	497e      	ldr	r1, [pc, #504]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ecc:	4b79      	ldr	r3, [pc, #484]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f023 0203 	bic.w	r2, r3, #3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	4976      	ldr	r1, [pc, #472]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005eee:	4b71      	ldr	r3, [pc, #452]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef4:	f023 020c 	bic.w	r2, r3, #12
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efc:	496d      	ldr	r1, [pc, #436]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f10:	4b68      	ldr	r3, [pc, #416]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	4965      	ldr	r1, [pc, #404]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f32:	4b60      	ldr	r3, [pc, #384]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f40:	495c      	ldr	r1, [pc, #368]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f54:	4b57      	ldr	r3, [pc, #348]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	4954      	ldr	r1, [pc, #336]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005f76:	4b4f      	ldr	r3, [pc, #316]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f84:	494b      	ldr	r1, [pc, #300]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005f98:	4b46      	ldr	r3, [pc, #280]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa6:	4943      	ldr	r1, [pc, #268]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005fba:	4b3e      	ldr	r3, [pc, #248]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc8:	493a      	ldr	r1, [pc, #232]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fdc:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fea:	4932      	ldr	r1, [pc, #200]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d011      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ffe:	4b2d      	ldr	r3, [pc, #180]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006004:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600c:	4929      	ldr	r1, [pc, #164]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800601c:	d101      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800601e:	2301      	movs	r3, #1
 8006020:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800602e:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006034:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800603c:	491d      	ldr	r1, [pc, #116]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006050:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006056:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006060:	4914      	ldr	r1, [pc, #80]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00b      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006074:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006084:	490b      	ldr	r1, [pc, #44]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00f      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800609a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800609e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a8:	4902      	ldr	r1, [pc, #8]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80060b0:	e002      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80060b2:	bf00      	nop
 80060b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00b      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80060c4:	4b80      	ldr	r3, [pc, #512]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80060c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060d4:	497c      	ldr	r1, [pc, #496]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d005      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060ea:	f040 80d6 	bne.w	800629a <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060ee:	4b76      	ldr	r3, [pc, #472]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a75      	ldr	r2, [pc, #468]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80060f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060fa:	f7fd f94d 	bl	8003398 <HAL_GetTick>
 80060fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006100:	e008      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006102:	f7fd f949 	bl	8003398 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b64      	cmp	r3, #100	; 0x64
 800610e:	d901      	bls.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e165      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006114:	4b6c      	ldr	r3, [pc, #432]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1f0      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d021      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11d      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006134:	4b64      	ldr	r3, [pc, #400]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613a:	0c1b      	lsrs	r3, r3, #16
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006142:	4b61      	ldr	r3, [pc, #388]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006148:	0e1b      	lsrs	r3, r3, #24
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	019a      	lsls	r2, r3, #6
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	041b      	lsls	r3, r3, #16
 800615a:	431a      	orrs	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	061b      	lsls	r3, r3, #24
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	071b      	lsls	r3, r3, #28
 8006168:	4957      	ldr	r1, [pc, #348]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x576>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800618e:	2b00      	cmp	r3, #0
 8006190:	d02e      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800619a:	d129      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800619c:	4b4a      	ldr	r3, [pc, #296]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800619e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a2:	0c1b      	lsrs	r3, r3, #16
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061aa:	4b47      	ldr	r3, [pc, #284]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80061ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b0:	0f1b      	lsrs	r3, r3, #28
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	019a      	lsls	r2, r3, #6
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	041b      	lsls	r3, r3, #16
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	061b      	lsls	r3, r3, #24
 80061ca:	431a      	orrs	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	071b      	lsls	r3, r3, #28
 80061d0:	493d      	ldr	r1, [pc, #244]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061d8:	4b3b      	ldr	r3, [pc, #236]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80061da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061de:	f023 021f 	bic.w	r2, r3, #31
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	3b01      	subs	r3, #1
 80061e8:	4937      	ldr	r1, [pc, #220]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01d      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061fc:	4b32      	ldr	r3, [pc, #200]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80061fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006202:	0e1b      	lsrs	r3, r3, #24
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800620a:	4b2f      	ldr	r3, [pc, #188]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800620c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006210:	0f1b      	lsrs	r3, r3, #28
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	019a      	lsls	r2, r3, #6
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	041b      	lsls	r3, r3, #16
 8006224:	431a      	orrs	r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	061b      	lsls	r3, r3, #24
 800622a:	431a      	orrs	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	071b      	lsls	r3, r3, #28
 8006230:	4925      	ldr	r1, [pc, #148]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d011      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	019a      	lsls	r2, r3, #6
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	061b      	lsls	r3, r3, #24
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	071b      	lsls	r3, r3, #28
 8006260:	4919      	ldr	r1, [pc, #100]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006268:	4b17      	ldr	r3, [pc, #92]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800626e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006274:	f7fd f890 	bl	8003398 <HAL_GetTick>
 8006278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800627a:	e008      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800627c:	f7fd f88c 	bl	8003398 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b64      	cmp	r3, #100	; 0x64
 8006288:	d901      	bls.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e0a8      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800628e:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b01      	cmp	r3, #1
 800629e:	f040 809e 	bne.w	80063de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80062a2:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a08      	ldr	r2, [pc, #32]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80062a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ae:	f7fd f873 	bl	8003398 <HAL_GetTick>
 80062b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062b4:	e00a      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062b6:	f7fd f86f 	bl	8003398 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b64      	cmp	r3, #100	; 0x64
 80062c2:	d903      	bls.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e08b      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80062c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062cc:	4b46      	ldr	r3, [pc, #280]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d8:	d0ed      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d02e      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d12a      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006302:	4b39      	ldr	r3, [pc, #228]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006310:	4b35      	ldr	r3, [pc, #212]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006316:	0f1b      	lsrs	r3, r3, #28
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	019a      	lsls	r2, r3, #6
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	061b      	lsls	r3, r3, #24
 8006330:	431a      	orrs	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	071b      	lsls	r3, r3, #28
 8006336:	492c      	ldr	r1, [pc, #176]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800633e:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006344:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	3b01      	subs	r3, #1
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	4925      	ldr	r1, [pc, #148]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d022      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800636c:	d11d      	bne.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800636e:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006374:	0e1b      	lsrs	r3, r3, #24
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800637c:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	0f1b      	lsrs	r3, r3, #28
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	019a      	lsls	r2, r3, #6
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	041b      	lsls	r3, r3, #16
 8006396:	431a      	orrs	r2, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	061b      	lsls	r3, r3, #24
 800639c:	431a      	orrs	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	071b      	lsls	r3, r3, #28
 80063a2:	4911      	ldr	r1, [pc, #68]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063aa:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a0e      	ldr	r2, [pc, #56]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80063b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b6:	f7fc ffef 	bl	8003398 <HAL_GetTick>
 80063ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80063be:	f7fc ffeb 	bl	8003398 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b64      	cmp	r3, #100	; 0x64
 80063ca:	d901      	bls.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e007      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063d0:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063dc:	d1ef      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40023800 	.word	0x40023800

080063ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e01d      	b.n	800643a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f815 	bl	8006442 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f000 f986 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <HAL_TIM_Base_Start_IT+0x50>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b06      	cmp	r3, #6
 8006480:	d00b      	beq.n	800649a <HAL_TIM_Base_Start_IT+0x42>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006488:	d007      	beq.n	800649a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	00010007 	.word	0x00010007

080064ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d122      	bne.n	8006508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d11b      	bne.n	8006508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0202 	mvn.w	r2, #2
 80064d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f905 	bl	80066fe <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f8f7 	bl	80066ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f908 	bl	8006712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b04      	cmp	r3, #4
 8006514:	d122      	bne.n	800655c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b04      	cmp	r3, #4
 8006522:	d11b      	bne.n	800655c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0204 	mvn.w	r2, #4
 800652c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2202      	movs	r2, #2
 8006532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f8db 	bl	80066fe <HAL_TIM_IC_CaptureCallback>
 8006548:	e005      	b.n	8006556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f8cd 	bl	80066ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f8de 	bl	8006712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b08      	cmp	r3, #8
 8006568:	d122      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b08      	cmp	r3, #8
 8006576:	d11b      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0208 	mvn.w	r2, #8
 8006580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2204      	movs	r2, #4
 8006586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f8b1 	bl	80066fe <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f8a3 	bl	80066ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f8b4 	bl	8006712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d122      	bne.n	8006604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	d11b      	bne.n	8006604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0210 	mvn.w	r2, #16
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2208      	movs	r2, #8
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f887 	bl	80066fe <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f879 	bl	80066ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f88a 	bl	8006712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10e      	bne.n	8006630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b01      	cmp	r3, #1
 800661e:	d107      	bne.n	8006630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0201 	mvn.w	r2, #1
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fc fcb4 	bl	8002f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	2b80      	cmp	r3, #128	; 0x80
 800663c:	d10e      	bne.n	800665c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006648:	2b80      	cmp	r3, #128	; 0x80
 800664a:	d107      	bne.n	800665c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f91a 	bl	8006890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666a:	d10e      	bne.n	800668a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006676:	2b80      	cmp	r3, #128	; 0x80
 8006678:	d107      	bne.n	800668a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f90d 	bl	80068a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d10e      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d107      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f838 	bl	8006726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d10e      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d107      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f06f 0220 	mvn.w	r2, #32
 80066da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f8cd 	bl	800687c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a40      	ldr	r2, [pc, #256]	; (8006850 <TIM_Base_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d013      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675a:	d00f      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a3d      	ldr	r2, [pc, #244]	; (8006854 <TIM_Base_SetConfig+0x118>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00b      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a3c      	ldr	r2, [pc, #240]	; (8006858 <TIM_Base_SetConfig+0x11c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d007      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a3b      	ldr	r2, [pc, #236]	; (800685c <TIM_Base_SetConfig+0x120>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d003      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a3a      	ldr	r2, [pc, #232]	; (8006860 <TIM_Base_SetConfig+0x124>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d108      	bne.n	800678e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2f      	ldr	r2, [pc, #188]	; (8006850 <TIM_Base_SetConfig+0x114>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d02b      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679c:	d027      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2c      	ldr	r2, [pc, #176]	; (8006854 <TIM_Base_SetConfig+0x118>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d023      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a2b      	ldr	r2, [pc, #172]	; (8006858 <TIM_Base_SetConfig+0x11c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01f      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2a      	ldr	r2, [pc, #168]	; (800685c <TIM_Base_SetConfig+0x120>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d01b      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a29      	ldr	r2, [pc, #164]	; (8006860 <TIM_Base_SetConfig+0x124>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d017      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a28      	ldr	r2, [pc, #160]	; (8006864 <TIM_Base_SetConfig+0x128>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d013      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a27      	ldr	r2, [pc, #156]	; (8006868 <TIM_Base_SetConfig+0x12c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00f      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a26      	ldr	r2, [pc, #152]	; (800686c <TIM_Base_SetConfig+0x130>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00b      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a25      	ldr	r2, [pc, #148]	; (8006870 <TIM_Base_SetConfig+0x134>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d007      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a24      	ldr	r2, [pc, #144]	; (8006874 <TIM_Base_SetConfig+0x138>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a23      	ldr	r2, [pc, #140]	; (8006878 <TIM_Base_SetConfig+0x13c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d108      	bne.n	8006800 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a0a      	ldr	r2, [pc, #40]	; (8006850 <TIM_Base_SetConfig+0x114>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d003      	beq.n	8006834 <TIM_Base_SetConfig+0xf8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a0c      	ldr	r2, [pc, #48]	; (8006860 <TIM_Base_SetConfig+0x124>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d103      	bne.n	800683c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	615a      	str	r2, [r3, #20]
}
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40010400 	.word	0x40010400
 8006864:	40014000 	.word	0x40014000
 8006868:	40014400 	.word	0x40014400
 800686c:	40014800 	.word	0x40014800
 8006870:	40001800 	.word	0x40001800
 8006874:	40001c00 	.word	0x40001c00
 8006878:	40002000 	.word	0x40002000

0800687c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e040      	b.n	800694c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fc fcce 	bl	800327c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2224      	movs	r2, #36	; 0x24
 80068e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8be 	bl	8006a78 <UART_SetConfig>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e022      	b.n	800694c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb5c 	bl	8006fcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fbe3 	bl	8007110 <UART_CheckIdleState>
 800694a:	4603      	mov	r3, r0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08a      	sub	sp, #40	; 0x28
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	4613      	mov	r3, r2
 8006962:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006968:	2b20      	cmp	r3, #32
 800696a:	d17f      	bne.n	8006a6c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_UART_Transmit+0x24>
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e078      	b.n	8006a6e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_UART_Transmit+0x36>
 8006986:	2302      	movs	r3, #2
 8006988:	e071      	b.n	8006a6e <HAL_UART_Transmit+0x11a>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2221      	movs	r2, #33	; 0x21
 800699c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800699e:	f7fc fcfb 	bl	8003398 <HAL_GetTick>
 80069a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	88fa      	ldrh	r2, [r7, #6]
 80069a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069bc:	d108      	bne.n	80069d0 <HAL_UART_Transmit+0x7c>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	e003      	b.n	80069d8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80069e0:	e02c      	b.n	8006a3c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2200      	movs	r2, #0
 80069ea:	2180      	movs	r1, #128	; 0x80
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 fbd4 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e038      	b.n	8006a6e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	3302      	adds	r3, #2
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	e007      	b.n	8006a2a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	3301      	adds	r3, #1
 8006a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1cc      	bne.n	80069e2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2140      	movs	r1, #64	; 0x40
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fba1 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e005      	b.n	8006a6e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e000      	b.n	8006a6e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006a6c:	2302      	movs	r3, #2
  }
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4bb1      	ldr	r3, [pc, #708]	; (8006d6c <UART_SetConfig+0x2f4>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	6939      	ldr	r1, [r7, #16]
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a9f      	ldr	r2, [pc, #636]	; (8006d70 <UART_SetConfig+0x2f8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d121      	bne.n	8006b3c <UART_SetConfig+0xc4>
 8006af8:	4b9e      	ldr	r3, [pc, #632]	; (8006d74 <UART_SetConfig+0x2fc>)
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d816      	bhi.n	8006b34 <UART_SetConfig+0xbc>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <UART_SetConfig+0x94>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b29 	.word	0x08006b29
 8006b14:	08006b23 	.word	0x08006b23
 8006b18:	08006b2f 	.word	0x08006b2f
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e151      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006b22:	2302      	movs	r3, #2
 8006b24:	77fb      	strb	r3, [r7, #31]
 8006b26:	e14e      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	77fb      	strb	r3, [r7, #31]
 8006b2c:	e14b      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006b2e:	2308      	movs	r3, #8
 8006b30:	77fb      	strb	r3, [r7, #31]
 8006b32:	e148      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006b34:	2310      	movs	r3, #16
 8006b36:	77fb      	strb	r3, [r7, #31]
 8006b38:	bf00      	nop
 8006b3a:	e144      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a8d      	ldr	r2, [pc, #564]	; (8006d78 <UART_SetConfig+0x300>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d134      	bne.n	8006bb0 <UART_SetConfig+0x138>
 8006b46:	4b8b      	ldr	r3, [pc, #556]	; (8006d74 <UART_SetConfig+0x2fc>)
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4c:	f003 030c 	and.w	r3, r3, #12
 8006b50:	2b0c      	cmp	r3, #12
 8006b52:	d829      	bhi.n	8006ba8 <UART_SetConfig+0x130>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <UART_SetConfig+0xe4>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b91 	.word	0x08006b91
 8006b60:	08006ba9 	.word	0x08006ba9
 8006b64:	08006ba9 	.word	0x08006ba9
 8006b68:	08006ba9 	.word	0x08006ba9
 8006b6c:	08006b9d 	.word	0x08006b9d
 8006b70:	08006ba9 	.word	0x08006ba9
 8006b74:	08006ba9 	.word	0x08006ba9
 8006b78:	08006ba9 	.word	0x08006ba9
 8006b7c:	08006b97 	.word	0x08006b97
 8006b80:	08006ba9 	.word	0x08006ba9
 8006b84:	08006ba9 	.word	0x08006ba9
 8006b88:	08006ba9 	.word	0x08006ba9
 8006b8c:	08006ba3 	.word	0x08006ba3
 8006b90:	2300      	movs	r3, #0
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e117      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006b96:	2302      	movs	r3, #2
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e114      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e111      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	77fb      	strb	r3, [r7, #31]
 8006ba6:	e10e      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	bf00      	nop
 8006bae:	e10a      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a71      	ldr	r2, [pc, #452]	; (8006d7c <UART_SetConfig+0x304>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d120      	bne.n	8006bfc <UART_SetConfig+0x184>
 8006bba:	4b6e      	ldr	r3, [pc, #440]	; (8006d74 <UART_SetConfig+0x2fc>)
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d00f      	beq.n	8006be8 <UART_SetConfig+0x170>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d802      	bhi.n	8006bd2 <UART_SetConfig+0x15a>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <UART_SetConfig+0x164>
 8006bd0:	e010      	b.n	8006bf4 <UART_SetConfig+0x17c>
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d005      	beq.n	8006be2 <UART_SetConfig+0x16a>
 8006bd6:	2b30      	cmp	r3, #48	; 0x30
 8006bd8:	d009      	beq.n	8006bee <UART_SetConfig+0x176>
 8006bda:	e00b      	b.n	8006bf4 <UART_SetConfig+0x17c>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	77fb      	strb	r3, [r7, #31]
 8006be0:	e0f1      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006be2:	2302      	movs	r3, #2
 8006be4:	77fb      	strb	r3, [r7, #31]
 8006be6:	e0ee      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006be8:	2304      	movs	r3, #4
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e0eb      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006bee:	2308      	movs	r3, #8
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e0e8      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	bf00      	nop
 8006bfa:	e0e4      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a5f      	ldr	r2, [pc, #380]	; (8006d80 <UART_SetConfig+0x308>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d120      	bne.n	8006c48 <UART_SetConfig+0x1d0>
 8006c06:	4b5b      	ldr	r3, [pc, #364]	; (8006d74 <UART_SetConfig+0x2fc>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d00f      	beq.n	8006c34 <UART_SetConfig+0x1bc>
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d802      	bhi.n	8006c1e <UART_SetConfig+0x1a6>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <UART_SetConfig+0x1b0>
 8006c1c:	e010      	b.n	8006c40 <UART_SetConfig+0x1c8>
 8006c1e:	2b80      	cmp	r3, #128	; 0x80
 8006c20:	d005      	beq.n	8006c2e <UART_SetConfig+0x1b6>
 8006c22:	2bc0      	cmp	r3, #192	; 0xc0
 8006c24:	d009      	beq.n	8006c3a <UART_SetConfig+0x1c2>
 8006c26:	e00b      	b.n	8006c40 <UART_SetConfig+0x1c8>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	77fb      	strb	r3, [r7, #31]
 8006c2c:	e0cb      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	77fb      	strb	r3, [r7, #31]
 8006c32:	e0c8      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c34:	2304      	movs	r3, #4
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e0c5      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c3a:	2308      	movs	r3, #8
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e0c2      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c40:	2310      	movs	r3, #16
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	bf00      	nop
 8006c46:	e0be      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a4d      	ldr	r2, [pc, #308]	; (8006d84 <UART_SetConfig+0x30c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d124      	bne.n	8006c9c <UART_SetConfig+0x224>
 8006c52:	4b48      	ldr	r3, [pc, #288]	; (8006d74 <UART_SetConfig+0x2fc>)
 8006c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c60:	d012      	beq.n	8006c88 <UART_SetConfig+0x210>
 8006c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c66:	d802      	bhi.n	8006c6e <UART_SetConfig+0x1f6>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <UART_SetConfig+0x204>
 8006c6c:	e012      	b.n	8006c94 <UART_SetConfig+0x21c>
 8006c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c72:	d006      	beq.n	8006c82 <UART_SetConfig+0x20a>
 8006c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c78:	d009      	beq.n	8006c8e <UART_SetConfig+0x216>
 8006c7a:	e00b      	b.n	8006c94 <UART_SetConfig+0x21c>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	77fb      	strb	r3, [r7, #31]
 8006c80:	e0a1      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c82:	2302      	movs	r3, #2
 8006c84:	77fb      	strb	r3, [r7, #31]
 8006c86:	e09e      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e09b      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c8e:	2308      	movs	r3, #8
 8006c90:	77fb      	strb	r3, [r7, #31]
 8006c92:	e098      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c94:	2310      	movs	r3, #16
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	bf00      	nop
 8006c9a:	e094      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a39      	ldr	r2, [pc, #228]	; (8006d88 <UART_SetConfig+0x310>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d124      	bne.n	8006cf0 <UART_SetConfig+0x278>
 8006ca6:	4b33      	ldr	r3, [pc, #204]	; (8006d74 <UART_SetConfig+0x2fc>)
 8006ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d012      	beq.n	8006cdc <UART_SetConfig+0x264>
 8006cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cba:	d802      	bhi.n	8006cc2 <UART_SetConfig+0x24a>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <UART_SetConfig+0x258>
 8006cc0:	e012      	b.n	8006ce8 <UART_SetConfig+0x270>
 8006cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc6:	d006      	beq.n	8006cd6 <UART_SetConfig+0x25e>
 8006cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ccc:	d009      	beq.n	8006ce2 <UART_SetConfig+0x26a>
 8006cce:	e00b      	b.n	8006ce8 <UART_SetConfig+0x270>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e077      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	77fb      	strb	r3, [r7, #31]
 8006cda:	e074      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006cdc:	2304      	movs	r3, #4
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e071      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006ce2:	2308      	movs	r3, #8
 8006ce4:	77fb      	strb	r3, [r7, #31]
 8006ce6:	e06e      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	77fb      	strb	r3, [r7, #31]
 8006cec:	bf00      	nop
 8006cee:	e06a      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a25      	ldr	r2, [pc, #148]	; (8006d8c <UART_SetConfig+0x314>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d124      	bne.n	8006d44 <UART_SetConfig+0x2cc>
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <UART_SetConfig+0x2fc>)
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d00:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d08:	d012      	beq.n	8006d30 <UART_SetConfig+0x2b8>
 8006d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0e:	d802      	bhi.n	8006d16 <UART_SetConfig+0x29e>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <UART_SetConfig+0x2ac>
 8006d14:	e012      	b.n	8006d3c <UART_SetConfig+0x2c4>
 8006d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d1a:	d006      	beq.n	8006d2a <UART_SetConfig+0x2b2>
 8006d1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d20:	d009      	beq.n	8006d36 <UART_SetConfig+0x2be>
 8006d22:	e00b      	b.n	8006d3c <UART_SetConfig+0x2c4>
 8006d24:	2300      	movs	r3, #0
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e04d      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	77fb      	strb	r3, [r7, #31]
 8006d2e:	e04a      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006d30:	2304      	movs	r3, #4
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e047      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006d36:	2308      	movs	r3, #8
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e044      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	bf00      	nop
 8006d42:	e040      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a11      	ldr	r2, [pc, #68]	; (8006d90 <UART_SetConfig+0x318>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d139      	bne.n	8006dc2 <UART_SetConfig+0x34a>
 8006d4e:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <UART_SetConfig+0x2fc>)
 8006d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d5c:	d027      	beq.n	8006dae <UART_SetConfig+0x336>
 8006d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d62:	d817      	bhi.n	8006d94 <UART_SetConfig+0x31c>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01c      	beq.n	8006da2 <UART_SetConfig+0x32a>
 8006d68:	e027      	b.n	8006dba <UART_SetConfig+0x342>
 8006d6a:	bf00      	nop
 8006d6c:	efff69f3 	.word	0xefff69f3
 8006d70:	40011000 	.word	0x40011000
 8006d74:	40023800 	.word	0x40023800
 8006d78:	40004400 	.word	0x40004400
 8006d7c:	40004800 	.word	0x40004800
 8006d80:	40004c00 	.word	0x40004c00
 8006d84:	40005000 	.word	0x40005000
 8006d88:	40011400 	.word	0x40011400
 8006d8c:	40007800 	.word	0x40007800
 8006d90:	40007c00 	.word	0x40007c00
 8006d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d98:	d006      	beq.n	8006da8 <UART_SetConfig+0x330>
 8006d9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d9e:	d009      	beq.n	8006db4 <UART_SetConfig+0x33c>
 8006da0:	e00b      	b.n	8006dba <UART_SetConfig+0x342>
 8006da2:	2300      	movs	r3, #0
 8006da4:	77fb      	strb	r3, [r7, #31]
 8006da6:	e00e      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006da8:	2302      	movs	r3, #2
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e00b      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006dae:	2304      	movs	r3, #4
 8006db0:	77fb      	strb	r3, [r7, #31]
 8006db2:	e008      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006db4:	2308      	movs	r3, #8
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e005      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006dba:	2310      	movs	r3, #16
 8006dbc:	77fb      	strb	r3, [r7, #31]
 8006dbe:	bf00      	nop
 8006dc0:	e001      	b.n	8006dc6 <UART_SetConfig+0x34e>
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dce:	d17f      	bne.n	8006ed0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006dd0:	7ffb      	ldrb	r3, [r7, #31]
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d85c      	bhi.n	8006e90 <UART_SetConfig+0x418>
 8006dd6:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <UART_SetConfig+0x364>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006e01 	.word	0x08006e01
 8006de0:	08006e21 	.word	0x08006e21
 8006de4:	08006e41 	.word	0x08006e41
 8006de8:	08006e91 	.word	0x08006e91
 8006dec:	08006e59 	.word	0x08006e59
 8006df0:	08006e91 	.word	0x08006e91
 8006df4:	08006e91 	.word	0x08006e91
 8006df8:	08006e91 	.word	0x08006e91
 8006dfc:	08006e79 	.word	0x08006e79
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e00:	f7fe feac 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 8006e04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	005a      	lsls	r2, r3, #1
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	441a      	add	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	61bb      	str	r3, [r7, #24]
        break;
 8006e1e:	e03a      	b.n	8006e96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e20:	f7fe feb0 	bl	8005b84 <HAL_RCC_GetPCLK2Freq>
 8006e24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	005a      	lsls	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	441a      	add	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	61bb      	str	r3, [r7, #24]
        break;
 8006e3e:	e02a      	b.n	8006e96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	085a      	lsrs	r2, r3, #1
 8006e46:	4b5f      	ldr	r3, [pc, #380]	; (8006fc4 <UART_SetConfig+0x54c>)
 8006e48:	4413      	add	r3, r2
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6852      	ldr	r2, [r2, #4]
 8006e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	61bb      	str	r3, [r7, #24]
        break;
 8006e56:	e01e      	b.n	8006e96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e58:	f7fe fdc2 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 8006e5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	005a      	lsls	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	441a      	add	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	61bb      	str	r3, [r7, #24]
        break;
 8006e76:	e00e      	b.n	8006e96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	61bb      	str	r3, [r7, #24]
        break;
 8006e8e:	e002      	b.n	8006e96 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	75fb      	strb	r3, [r7, #23]
        break;
 8006e94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b0f      	cmp	r3, #15
 8006e9a:	d916      	bls.n	8006eca <UART_SetConfig+0x452>
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea2:	d212      	bcs.n	8006eca <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f023 030f 	bic.w	r3, r3, #15
 8006eac:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	897b      	ldrh	r3, [r7, #10]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	897a      	ldrh	r2, [r7, #10]
 8006ec6:	60da      	str	r2, [r3, #12]
 8006ec8:	e070      	b.n	8006fac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
 8006ece:	e06d      	b.n	8006fac <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006ed0:	7ffb      	ldrb	r3, [r7, #31]
 8006ed2:	2b08      	cmp	r3, #8
 8006ed4:	d859      	bhi.n	8006f8a <UART_SetConfig+0x512>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <UART_SetConfig+0x464>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f1f 	.word	0x08006f1f
 8006ee4:	08006f3d 	.word	0x08006f3d
 8006ee8:	08006f8b 	.word	0x08006f8b
 8006eec:	08006f55 	.word	0x08006f55
 8006ef0:	08006f8b 	.word	0x08006f8b
 8006ef4:	08006f8b 	.word	0x08006f8b
 8006ef8:	08006f8b 	.word	0x08006f8b
 8006efc:	08006f73 	.word	0x08006f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f00:	f7fe fe2c 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 8006f04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	085a      	lsrs	r2, r3, #1
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	441a      	add	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	61bb      	str	r3, [r7, #24]
        break;
 8006f1c:	e038      	b.n	8006f90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f1e:	f7fe fe31 	bl	8005b84 <HAL_RCC_GetPCLK2Freq>
 8006f22:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	085a      	lsrs	r2, r3, #1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	441a      	add	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	61bb      	str	r3, [r7, #24]
        break;
 8006f3a:	e029      	b.n	8006f90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	085a      	lsrs	r2, r3, #1
 8006f42:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <UART_SetConfig+0x550>)
 8006f44:	4413      	add	r3, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6852      	ldr	r2, [r2, #4]
 8006f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	61bb      	str	r3, [r7, #24]
        break;
 8006f52:	e01d      	b.n	8006f90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f54:	f7fe fd44 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 8006f58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	085a      	lsrs	r2, r3, #1
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	441a      	add	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	61bb      	str	r3, [r7, #24]
        break;
 8006f70:	e00e      	b.n	8006f90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	61bb      	str	r3, [r7, #24]
        break;
 8006f88:	e002      	b.n	8006f90 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	75fb      	strb	r3, [r7, #23]
        break;
 8006f8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	2b0f      	cmp	r3, #15
 8006f94:	d908      	bls.n	8006fa8 <UART_SetConfig+0x530>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9c:	d204      	bcs.n	8006fa8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	60da      	str	r2, [r3, #12]
 8006fa6:	e001      	b.n	8006fac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	01e84800 	.word	0x01e84800
 8006fc8:	00f42400 	.word	0x00f42400

08006fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ca:	d10a      	bne.n	80070e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af02      	add	r7, sp, #8
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800711e:	f7fc f93b 	bl	8003398 <HAL_GetTick>
 8007122:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b08      	cmp	r3, #8
 8007130:	d10e      	bne.n	8007150 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007132:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f82a 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e020      	b.n	8007192 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b04      	cmp	r3, #4
 800715c:	d10e      	bne.n	800717c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800715e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f814 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e00a      	b.n	8007192 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	4613      	mov	r3, r2
 80071a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071aa:	e05d      	b.n	8007268 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071b2:	d059      	beq.n	8007268 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b4:	f7fc f8f0 	bl	8003398 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <UART_WaitOnFlagUntilTimeout+0x30>
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d11b      	bne.n	8007202 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e042      	b.n	8007288 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b00      	cmp	r3, #0
 800720e:	d02b      	beq.n	8007268 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800721a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800721e:	d123      	bne.n	8007268 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007228:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007238:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0201 	bic.w	r2, r2, #1
 8007248:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e00f      	b.n	8007288 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69da      	ldr	r2, [r3, #28]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	4013      	ands	r3, r2
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	429a      	cmp	r2, r3
 8007276:	bf0c      	ite	eq
 8007278:	2301      	moveq	r3, #1
 800727a:	2300      	movne	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	429a      	cmp	r2, r3
 8007284:	d092      	beq.n	80071ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a6:	f3ef 8305 	mrs	r3, IPSR
 80072aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80072ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10f      	bne.n	80072d2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b2:	f3ef 8310 	mrs	r3, PRIMASK
 80072b6:	607b      	str	r3, [r7, #4]
  return(result);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d105      	bne.n	80072ca <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072be:	f3ef 8311 	mrs	r3, BASEPRI
 80072c2:	603b      	str	r3, [r7, #0]
  return(result);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d007      	beq.n	80072da <osKernelInitialize+0x3a>
 80072ca:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <osKernelInitialize+0x64>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d103      	bne.n	80072da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80072d2:	f06f 0305 	mvn.w	r3, #5
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	e00c      	b.n	80072f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072da:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <osKernelInitialize+0x64>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072e2:	4b08      	ldr	r3, [pc, #32]	; (8007304 <osKernelInitialize+0x64>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	e002      	b.n	80072f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80072ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80072f4:	68fb      	ldr	r3, [r7, #12]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	200000d0 	.word	0x200000d0

08007308 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800730e:	f3ef 8305 	mrs	r3, IPSR
 8007312:	60bb      	str	r3, [r7, #8]
  return(result);
 8007314:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10f      	bne.n	800733a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800731a:	f3ef 8310 	mrs	r3, PRIMASK
 800731e:	607b      	str	r3, [r7, #4]
  return(result);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d105      	bne.n	8007332 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007326:	f3ef 8311 	mrs	r3, BASEPRI
 800732a:	603b      	str	r3, [r7, #0]
  return(result);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <osKernelStart+0x3a>
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <osKernelStart+0x68>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d103      	bne.n	8007342 <osKernelStart+0x3a>
    stat = osErrorISR;
 800733a:	f06f 0305 	mvn.w	r3, #5
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e010      	b.n	8007364 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <osKernelStart+0x68>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d109      	bne.n	800735e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800734a:	f7ff ffa1 	bl	8007290 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800734e:	4b08      	ldr	r3, [pc, #32]	; (8007370 <osKernelStart+0x68>)
 8007350:	2202      	movs	r2, #2
 8007352:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007354:	f001 ff10 	bl	8009178 <vTaskStartScheduler>
      stat = osOK;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e002      	b.n	8007364 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800735e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007362:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007364:	68fb      	ldr	r3, [r7, #12]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	200000d0 	.word	0x200000d0

08007374 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007374:	b580      	push	{r7, lr}
 8007376:	b090      	sub	sp, #64	; 0x40
 8007378:	af04      	add	r7, sp, #16
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007380:	2300      	movs	r3, #0
 8007382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007384:	f3ef 8305 	mrs	r3, IPSR
 8007388:	61fb      	str	r3, [r7, #28]
  return(result);
 800738a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800738c:	2b00      	cmp	r3, #0
 800738e:	f040 808f 	bne.w	80074b0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007392:	f3ef 8310 	mrs	r3, PRIMASK
 8007396:	61bb      	str	r3, [r7, #24]
  return(result);
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800739e:	f3ef 8311 	mrs	r3, BASEPRI
 80073a2:	617b      	str	r3, [r7, #20]
  return(result);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <osThreadNew+0x3e>
 80073aa:	4b44      	ldr	r3, [pc, #272]	; (80074bc <osThreadNew+0x148>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d07e      	beq.n	80074b0 <osThreadNew+0x13c>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d07b      	beq.n	80074b0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80073b8:	2380      	movs	r3, #128	; 0x80
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80073bc:	2318      	movs	r3, #24
 80073be:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80073c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d045      	beq.n	800745c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <osThreadNew+0x6a>
        name = attr->name;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d008      	beq.n	8007404 <osThreadNew+0x90>
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	2b38      	cmp	r3, #56	; 0x38
 80073f6:	d805      	bhi.n	8007404 <osThreadNew+0x90>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <osThreadNew+0x94>
        return (NULL);
 8007404:	2300      	movs	r3, #0
 8007406:	e054      	b.n	80074b2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	089b      	lsrs	r3, r3, #2
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00e      	beq.n	800743e <osThreadNew+0xca>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b5b      	cmp	r3, #91	; 0x5b
 8007426:	d90a      	bls.n	800743e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <osThreadNew+0xca>
        mem = 1;
 8007438:	2301      	movs	r3, #1
 800743a:	623b      	str	r3, [r7, #32]
 800743c:	e010      	b.n	8007460 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10c      	bne.n	8007460 <osThreadNew+0xec>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <osThreadNew+0xec>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d104      	bne.n	8007460 <osThreadNew+0xec>
          mem = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	623b      	str	r3, [r7, #32]
 800745a:	e001      	b.n	8007460 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d110      	bne.n	8007488 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800746e:	9202      	str	r2, [sp, #8]
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800747a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f001 fc9f 	bl	8008dc0 <xTaskCreateStatic>
 8007482:	4603      	mov	r3, r0
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	e013      	b.n	80074b0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d110      	bne.n	80074b0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	b29a      	uxth	r2, r3
 8007492:	f107 0310 	add.w	r3, r7, #16
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f001 fced 	bl	8008e80 <xTaskCreate>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d001      	beq.n	80074b0 <osThreadNew+0x13c>
          hTask = NULL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074b0:	693b      	ldr	r3, [r7, #16]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3730      	adds	r7, #48	; 0x30
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	200000d0 	.word	0x200000d0

080074c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c8:	f3ef 8305 	mrs	r3, IPSR
 80074cc:	613b      	str	r3, [r7, #16]
  return(result);
 80074ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10f      	bne.n	80074f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074d4:	f3ef 8310 	mrs	r3, PRIMASK
 80074d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d105      	bne.n	80074ec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074e0:	f3ef 8311 	mrs	r3, BASEPRI
 80074e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <osDelay+0x3c>
 80074ec:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <osDelay+0x58>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d103      	bne.n	80074fc <osDelay+0x3c>
    stat = osErrorISR;
 80074f4:	f06f 0305 	mvn.w	r3, #5
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	e007      	b.n	800750c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fe00 	bl	800910c <vTaskDelay>
    }
  }

  return (stat);
 800750c:	697b      	ldr	r3, [r7, #20]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	200000d0 	.word	0x200000d0

0800751c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800751c:	b580      	push	{r7, lr}
 800751e:	b08c      	sub	sp, #48	; 0x30
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007528:	2300      	movs	r3, #0
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800752c:	f3ef 8305 	mrs	r3, IPSR
 8007530:	61bb      	str	r3, [r7, #24]
  return(result);
 8007532:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 8087 	bne.w	8007648 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800753a:	f3ef 8310 	mrs	r3, PRIMASK
 800753e:	617b      	str	r3, [r7, #20]
  return(result);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007546:	f3ef 8311 	mrs	r3, BASEPRI
 800754a:	613b      	str	r3, [r7, #16]
  return(result);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <osSemaphoreNew+0x3e>
 8007552:	4b40      	ldr	r3, [pc, #256]	; (8007654 <osSemaphoreNew+0x138>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d076      	beq.n	8007648 <osSemaphoreNew+0x12c>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d073      	beq.n	8007648 <osSemaphoreNew+0x12c>
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	429a      	cmp	r2, r3
 8007566:	d86f      	bhi.n	8007648 <osSemaphoreNew+0x12c>
    mem = -1;
 8007568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800756c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d015      	beq.n	80075a0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d006      	beq.n	800758a <osSemaphoreNew+0x6e>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2b4f      	cmp	r3, #79	; 0x4f
 8007582:	d902      	bls.n	800758a <osSemaphoreNew+0x6e>
        mem = 1;
 8007584:	2301      	movs	r3, #1
 8007586:	623b      	str	r3, [r7, #32]
 8007588:	e00c      	b.n	80075a4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d108      	bne.n	80075a4 <osSemaphoreNew+0x88>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <osSemaphoreNew+0x88>
          mem = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	623b      	str	r3, [r7, #32]
 800759e:	e001      	b.n	80075a4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075aa:	d04d      	beq.n	8007648 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d129      	bne.n	8007606 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d10b      	bne.n	80075d0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	2303      	movs	r3, #3
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	2100      	movs	r1, #0
 80075c6:	2001      	movs	r0, #1
 80075c8:	f000 fbf4 	bl	8007db4 <xQueueGenericCreateStatic>
 80075cc:	6278      	str	r0, [r7, #36]	; 0x24
 80075ce:	e005      	b.n	80075dc <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80075d0:	2203      	movs	r2, #3
 80075d2:	2100      	movs	r1, #0
 80075d4:	2001      	movs	r0, #1
 80075d6:	f000 fc6a 	bl	8007eae <xQueueGenericCreate>
 80075da:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d022      	beq.n	8007628 <osSemaphoreNew+0x10c>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01f      	beq.n	8007628 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80075e8:	2300      	movs	r3, #0
 80075ea:	2200      	movs	r2, #0
 80075ec:	2100      	movs	r1, #0
 80075ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075f0:	f000 fd30 	bl	8008054 <xQueueGenericSend>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d016      	beq.n	8007628 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80075fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075fc:	f001 fa0d 	bl	8008a1a <vQueueDelete>
            hSemaphore = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	627b      	str	r3, [r7, #36]	; 0x24
 8007604:	e010      	b.n	8007628 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d108      	bne.n	800761e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	461a      	mov	r2, r3
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fcae 	bl	8007f76 <xQueueCreateCountingSemaphoreStatic>
 800761a:	6278      	str	r0, [r7, #36]	; 0x24
 800761c:	e004      	b.n	8007628 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fce1 	bl	8007fe8 <xQueueCreateCountingSemaphore>
 8007626:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00c      	beq.n	8007648 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <osSemaphoreNew+0x120>
          name = attr->name;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	61fb      	str	r3, [r7, #28]
 800763a:	e001      	b.n	8007640 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007640:	69f9      	ldr	r1, [r7, #28]
 8007642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007644:	f001 fb36 	bl	8008cb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800764a:	4618      	mov	r0, r3
 800764c:	3728      	adds	r7, #40	; 0x28
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	200000d0 	.word	0x200000d0

08007658 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007666:	2300      	movs	r3, #0
 8007668:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007670:	f06f 0303 	mvn.w	r3, #3
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	e04b      	b.n	8007710 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007678:	f3ef 8305 	mrs	r3, IPSR
 800767c:	617b      	str	r3, [r7, #20]
  return(result);
 800767e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10f      	bne.n	80076a4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007684:	f3ef 8310 	mrs	r3, PRIMASK
 8007688:	613b      	str	r3, [r7, #16]
  return(result);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007690:	f3ef 8311 	mrs	r3, BASEPRI
 8007694:	60fb      	str	r3, [r7, #12]
  return(result);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d026      	beq.n	80076ea <osSemaphoreAcquire+0x92>
 800769c:	4b1f      	ldr	r3, [pc, #124]	; (800771c <osSemaphoreAcquire+0xc4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d122      	bne.n	80076ea <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80076aa:	f06f 0303 	mvn.w	r3, #3
 80076ae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80076b0:	e02d      	b.n	800770e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80076b6:	f107 0308 	add.w	r3, r7, #8
 80076ba:	461a      	mov	r2, r3
 80076bc:	2100      	movs	r1, #0
 80076be:	69b8      	ldr	r0, [r7, #24]
 80076c0:	f001 f8ea 	bl	8008898 <xQueueReceiveFromISR>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d003      	beq.n	80076d2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80076ca:	f06f 0302 	mvn.w	r3, #2
 80076ce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80076d0:	e01d      	b.n	800770e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01a      	beq.n	800770e <osSemaphoreAcquire+0xb6>
 80076d8:	4b11      	ldr	r3, [pc, #68]	; (8007720 <osSemaphoreAcquire+0xc8>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80076e8:	e011      	b.n	800770e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	69b8      	ldr	r0, [r7, #24]
 80076ee:	f000 ffc3 	bl	8008678 <xQueueSemaphoreTake>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d00b      	beq.n	8007710 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80076fe:	f06f 0301 	mvn.w	r3, #1
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	e004      	b.n	8007710 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007706:	f06f 0302 	mvn.w	r3, #2
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	e000      	b.n	8007710 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800770e:	bf00      	nop
      }
    }
  }

  return (stat);
 8007710:	69fb      	ldr	r3, [r7, #28]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	200000d0 	.word	0x200000d0
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007730:	2300      	movs	r3, #0
 8007732:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d103      	bne.n	8007742 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800773a:	f06f 0303 	mvn.w	r3, #3
 800773e:	61fb      	str	r3, [r7, #28]
 8007740:	e03e      	b.n	80077c0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007742:	f3ef 8305 	mrs	r3, IPSR
 8007746:	617b      	str	r3, [r7, #20]
  return(result);
 8007748:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10f      	bne.n	800776e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800774e:	f3ef 8310 	mrs	r3, PRIMASK
 8007752:	613b      	str	r3, [r7, #16]
  return(result);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800775a:	f3ef 8311 	mrs	r3, BASEPRI
 800775e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01e      	beq.n	80077a4 <osSemaphoreRelease+0x80>
 8007766:	4b19      	ldr	r3, [pc, #100]	; (80077cc <osSemaphoreRelease+0xa8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d11a      	bne.n	80077a4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007772:	f107 0308 	add.w	r3, r7, #8
 8007776:	4619      	mov	r1, r3
 8007778:	69b8      	ldr	r0, [r7, #24]
 800777a:	f000 fe09 	bl	8008390 <xQueueGiveFromISR>
 800777e:	4603      	mov	r3, r0
 8007780:	2b01      	cmp	r3, #1
 8007782:	d003      	beq.n	800778c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007784:	f06f 0302 	mvn.w	r3, #2
 8007788:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800778a:	e018      	b.n	80077be <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d015      	beq.n	80077be <osSemaphoreRelease+0x9a>
 8007792:	4b0f      	ldr	r3, [pc, #60]	; (80077d0 <osSemaphoreRelease+0xac>)
 8007794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80077a2:	e00c      	b.n	80077be <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80077a4:	2300      	movs	r3, #0
 80077a6:	2200      	movs	r2, #0
 80077a8:	2100      	movs	r1, #0
 80077aa:	69b8      	ldr	r0, [r7, #24]
 80077ac:	f000 fc52 	bl	8008054 <xQueueGenericSend>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d004      	beq.n	80077c0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80077b6:	f06f 0302 	mvn.w	r3, #2
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	e000      	b.n	80077c0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80077be:	bf00      	nop
    }
  }

  return (stat);
 80077c0:	69fb      	ldr	r3, [r7, #28]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3720      	adds	r7, #32
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	200000d0 	.word	0x200000d0
 80077d0:	e000ed04 	.word	0xe000ed04

080077d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08c      	sub	sp, #48	; 0x30
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e4:	f3ef 8305 	mrs	r3, IPSR
 80077e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80077ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d170      	bne.n	80078d2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f0:	f3ef 8310 	mrs	r3, PRIMASK
 80077f4:	617b      	str	r3, [r7, #20]
  return(result);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d105      	bne.n	8007808 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007800:	613b      	str	r3, [r7, #16]
  return(result);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <osMessageQueueNew+0x3c>
 8007808:	4b34      	ldr	r3, [pc, #208]	; (80078dc <osMessageQueueNew+0x108>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d060      	beq.n	80078d2 <osMessageQueueNew+0xfe>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d05d      	beq.n	80078d2 <osMessageQueueNew+0xfe>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d05a      	beq.n	80078d2 <osMessageQueueNew+0xfe>
    mem = -1;
 800781c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007820:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d029      	beq.n	800787c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d012      	beq.n	8007856 <osMessageQueueNew+0x82>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	2b4f      	cmp	r3, #79	; 0x4f
 8007836:	d90e      	bls.n	8007856 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	695a      	ldr	r2, [r3, #20]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68b9      	ldr	r1, [r7, #8]
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	429a      	cmp	r2, r3
 800784e:	d302      	bcc.n	8007856 <osMessageQueueNew+0x82>
        mem = 1;
 8007850:	2301      	movs	r3, #1
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	e014      	b.n	8007880 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d110      	bne.n	8007880 <osMessageQueueNew+0xac>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10c      	bne.n	8007880 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800786a:	2b00      	cmp	r3, #0
 800786c:	d108      	bne.n	8007880 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <osMessageQueueNew+0xac>
          mem = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	623b      	str	r3, [r7, #32]
 800787a:	e001      	b.n	8007880 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d10c      	bne.n	80078a0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6899      	ldr	r1, [r3, #8]
 800788e:	2300      	movs	r3, #0
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	460b      	mov	r3, r1
 8007894:	68b9      	ldr	r1, [r7, #8]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fa8c 	bl	8007db4 <xQueueGenericCreateStatic>
 800789c:	6278      	str	r0, [r7, #36]	; 0x24
 800789e:	e008      	b.n	80078b2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d105      	bne.n	80078b2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80078a6:	2200      	movs	r2, #0
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 faff 	bl	8007eae <xQueueGenericCreate>
 80078b0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00c      	beq.n	80078d2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <osMessageQueueNew+0xf2>
        name = attr->name;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	e001      	b.n	80078ca <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80078ca:	69f9      	ldr	r1, [r7, #28]
 80078cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ce:	f001 f9f1 	bl	8008cb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3728      	adds	r7, #40	; 0x28
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	200000d0 	.word	0x200000d0

080078e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078f8:	f3ef 8305 	mrs	r3, IPSR
 80078fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80078fe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10f      	bne.n	8007924 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007904:	f3ef 8310 	mrs	r3, PRIMASK
 8007908:	61bb      	str	r3, [r7, #24]
  return(result);
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007910:	f3ef 8311 	mrs	r3, BASEPRI
 8007914:	617b      	str	r3, [r7, #20]
  return(result);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d02c      	beq.n	8007976 <osMessageQueuePut+0x96>
 800791c:	4b28      	ldr	r3, [pc, #160]	; (80079c0 <osMessageQueuePut+0xe0>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d128      	bne.n	8007976 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <osMessageQueuePut+0x56>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <osMessageQueuePut+0x56>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007936:	f06f 0303 	mvn.w	r3, #3
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800793c:	e039      	b.n	80079b2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800793e:	2300      	movs	r3, #0
 8007940:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007942:	f107 0210 	add.w	r2, r7, #16
 8007946:	2300      	movs	r3, #0
 8007948:	68b9      	ldr	r1, [r7, #8]
 800794a:	6a38      	ldr	r0, [r7, #32]
 800794c:	f000 fc84 	bl	8008258 <xQueueGenericSendFromISR>
 8007950:	4603      	mov	r3, r0
 8007952:	2b01      	cmp	r3, #1
 8007954:	d003      	beq.n	800795e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007956:	f06f 0302 	mvn.w	r3, #2
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800795c:	e029      	b.n	80079b2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d026      	beq.n	80079b2 <osMessageQueuePut+0xd2>
 8007964:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <osMessageQueuePut+0xe4>)
 8007966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007974:	e01d      	b.n	80079b2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <osMessageQueuePut+0xa2>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d103      	bne.n	800798a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007982:	f06f 0303 	mvn.w	r3, #3
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
 8007988:	e014      	b.n	80079b4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800798a:	2300      	movs	r3, #0
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	6a38      	ldr	r0, [r7, #32]
 8007992:	f000 fb5f 	bl	8008054 <xQueueGenericSend>
 8007996:	4603      	mov	r3, r0
 8007998:	2b01      	cmp	r3, #1
 800799a:	d00b      	beq.n	80079b4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80079a2:	f06f 0301 	mvn.w	r3, #1
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
 80079a8:	e004      	b.n	80079b4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80079aa:	f06f 0302 	mvn.w	r3, #2
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24
 80079b0:	e000      	b.n	80079b4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3728      	adds	r7, #40	; 0x28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200000d0 	.word	0x200000d0
 80079c4:	e000ed04 	.word	0xe000ed04

080079c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	; 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079da:	2300      	movs	r3, #0
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079de:	f3ef 8305 	mrs	r3, IPSR
 80079e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80079e4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10f      	bne.n	8007a0a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ea:	f3ef 8310 	mrs	r3, PRIMASK
 80079ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d105      	bne.n	8007a02 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079f6:	f3ef 8311 	mrs	r3, BASEPRI
 80079fa:	617b      	str	r3, [r7, #20]
  return(result);
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d02c      	beq.n	8007a5c <osMessageQueueGet+0x94>
 8007a02:	4b28      	ldr	r3, [pc, #160]	; (8007aa4 <osMessageQueueGet+0xdc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d128      	bne.n	8007a5c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <osMessageQueueGet+0x54>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <osMessageQueueGet+0x54>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007a1c:	f06f 0303 	mvn.w	r3, #3
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a22:	e038      	b.n	8007a96 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a28:	f107 0310 	add.w	r3, r7, #16
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	68b9      	ldr	r1, [r7, #8]
 8007a30:	6a38      	ldr	r0, [r7, #32]
 8007a32:	f000 ff31 	bl	8008898 <xQueueReceiveFromISR>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d003      	beq.n	8007a44 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007a3c:	f06f 0302 	mvn.w	r3, #2
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a42:	e028      	b.n	8007a96 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d025      	beq.n	8007a96 <osMessageQueueGet+0xce>
 8007a4a:	4b17      	ldr	r3, [pc, #92]	; (8007aa8 <osMessageQueueGet+0xe0>)
 8007a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a5a:	e01c      	b.n	8007a96 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <osMessageQueueGet+0xa0>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d103      	bne.n	8007a70 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007a68:	f06f 0303 	mvn.w	r3, #3
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6e:	e013      	b.n	8007a98 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	68b9      	ldr	r1, [r7, #8]
 8007a74:	6a38      	ldr	r0, [r7, #32]
 8007a76:	f000 fd1d 	bl	80084b4 <xQueueReceive>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d00b      	beq.n	8007a98 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007a86:	f06f 0301 	mvn.w	r3, #1
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a8c:	e004      	b.n	8007a98 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007a8e:	f06f 0302 	mvn.w	r3, #2
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
 8007a94:	e000      	b.n	8007a98 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a96:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3728      	adds	r7, #40	; 0x28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	200000d0 	.word	0x200000d0
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d102      	bne.n	8007ac4 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
 8007ac2:	e01e      	b.n	8007b02 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ac4:	f3ef 8305 	mrs	r3, IPSR
 8007ac8:	617b      	str	r3, [r7, #20]
  return(result);
 8007aca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10f      	bne.n	8007af0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d105      	bne.n	8007ae8 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007adc:	f3ef 8311 	mrs	r3, BASEPRI
 8007ae0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d008      	beq.n	8007afa <osMessageQueueGetCount+0x4e>
 8007ae8:	4b08      	ldr	r3, [pc, #32]	; (8007b0c <osMessageQueueGetCount+0x60>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d104      	bne.n	8007afa <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007af0:	69b8      	ldr	r0, [r7, #24]
 8007af2:	f000 ff73 	bl	80089dc <uxQueueMessagesWaitingFromISR>
 8007af6:	61f8      	str	r0, [r7, #28]
 8007af8:	e003      	b.n	8007b02 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007afa:	69b8      	ldr	r0, [r7, #24]
 8007afc:	f000 ff4f 	bl	800899e <uxQueueMessagesWaiting>
 8007b00:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007b02:	69fb      	ldr	r3, [r7, #28]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3720      	adds	r7, #32
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	200000d0 	.word	0x200000d0

08007b10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4a07      	ldr	r2, [pc, #28]	; (8007b3c <vApplicationGetIdleTaskMemory+0x2c>)
 8007b20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	4a06      	ldr	r2, [pc, #24]	; (8007b40 <vApplicationGetIdleTaskMemory+0x30>)
 8007b26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2280      	movs	r2, #128	; 0x80
 8007b2c:	601a      	str	r2, [r3, #0]
}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	200000d4 	.word	0x200000d4
 8007b40:	20000130 	.word	0x20000130

08007b44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a07      	ldr	r2, [pc, #28]	; (8007b70 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	4a06      	ldr	r2, [pc, #24]	; (8007b74 <vApplicationGetTimerTaskMemory+0x30>)
 8007b5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	20000330 	.word	0x20000330
 8007b74:	2000038c 	.word	0x2000038c

08007b78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f103 0208 	add.w	r2, r3, #8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f103 0208 	add.w	r2, r3, #8
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f103 0208 	add.w	r2, r3, #8
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c30:	d103      	bne.n	8007c3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	e00c      	b.n	8007c54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e002      	b.n	8007c48 <vListInsert+0x2e>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d2f6      	bcs.n	8007c42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	601a      	str	r2, [r3, #0]
}
 8007c80:	bf00      	nop
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6892      	ldr	r2, [r2, #8]
 8007ca2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6852      	ldr	r2, [r2, #4]
 8007cac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d103      	bne.n	8007cc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	1e5a      	subs	r2, r3, #1
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10b      	bne.n	8007d0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	b672      	cpsid	i
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	b662      	cpsie	i
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	e7fe      	b.n	8007d0a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8007d0c:	f002 fcbc 	bl	800a688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d18:	68f9      	ldr	r1, [r7, #12]
 8007d1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	441a      	add	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d42:	fb01 f303 	mul.w	r3, r1, r3
 8007d46:	441a      	add	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	22ff      	movs	r2, #255	; 0xff
 8007d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	22ff      	movs	r2, #255	; 0xff
 8007d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d114      	bne.n	8007d8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01a      	beq.n	8007da0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3310      	adds	r3, #16
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 fc90 	bl	8009694 <xTaskRemoveFromEventList>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d012      	beq.n	8007da0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <xQueueGenericReset+0xd0>)
 8007d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	e009      	b.n	8007da0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3310      	adds	r3, #16
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff fef1 	bl	8007b78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3324      	adds	r3, #36	; 0x24
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff feec 	bl	8007b78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007da0:	f002 fca4 	bl	800a6ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007da4:	2301      	movs	r3, #1
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08e      	sub	sp, #56	; 0x38
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10b      	bne.n	8007de0 <xQueueGenericCreateStatic+0x2c>
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	b672      	cpsid	i
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	b662      	cpsie	i
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dde:	e7fe      	b.n	8007dde <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10b      	bne.n	8007dfe <xQueueGenericCreateStatic+0x4a>
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	b672      	cpsid	i
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	b662      	cpsie	i
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8007dfc:	e7fe      	b.n	8007dfc <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <xQueueGenericCreateStatic+0x56>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <xQueueGenericCreateStatic+0x5a>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <xQueueGenericCreateStatic+0x5c>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10b      	bne.n	8007e2c <xQueueGenericCreateStatic+0x78>
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	b672      	cpsid	i
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	b662      	cpsie	i
 8007e28:	623b      	str	r3, [r7, #32]
 8007e2a:	e7fe      	b.n	8007e2a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d102      	bne.n	8007e38 <xQueueGenericCreateStatic+0x84>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <xQueueGenericCreateStatic+0x88>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e000      	b.n	8007e3e <xQueueGenericCreateStatic+0x8a>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10b      	bne.n	8007e5a <xQueueGenericCreateStatic+0xa6>
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	b672      	cpsid	i
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	b662      	cpsie	i
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	e7fe      	b.n	8007e58 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e5a:	2350      	movs	r3, #80	; 0x50
 8007e5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b50      	cmp	r3, #80	; 0x50
 8007e62:	d00b      	beq.n	8007e7c <xQueueGenericCreateStatic+0xc8>
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	b672      	cpsid	i
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	b662      	cpsie	i
 8007e78:	61bb      	str	r3, [r7, #24]
 8007e7a:	e7fe      	b.n	8007e7a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00d      	beq.n	8007ea4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	68b9      	ldr	r1, [r7, #8]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 f846 	bl	8007f30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3730      	adds	r7, #48	; 0x30
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b08a      	sub	sp, #40	; 0x28
 8007eb2:	af02      	add	r7, sp, #8
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10b      	bne.n	8007eda <xQueueGenericCreate+0x2c>
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	b672      	cpsid	i
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	b662      	cpsie	i
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	e7fe      	b.n	8007ed8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]
 8007ee4:	e004      	b.n	8007ef0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	fb02 f303 	mul.w	r3, r2, r3
 8007eee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3350      	adds	r3, #80	; 0x50
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f002 fce9 	bl	800a8cc <pvPortMalloc>
 8007efa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d011      	beq.n	8007f26 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	3350      	adds	r3, #80	; 0x50
 8007f0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f14:	79fa      	ldrb	r2, [r7, #7]
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	68b9      	ldr	r1, [r7, #8]
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f805 	bl	8007f30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f26:	69bb      	ldr	r3, [r7, #24]
	}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3720      	adds	r7, #32
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d103      	bne.n	8007f4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	e002      	b.n	8007f52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f5e:	2101      	movs	r1, #1
 8007f60:	69b8      	ldr	r0, [r7, #24]
 8007f62:	f7ff febd 	bl	8007ce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b08a      	sub	sp, #40	; 0x28
 8007f7a:	af02      	add	r7, sp, #8
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10b      	bne.n	8007fa0 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	61bb      	str	r3, [r7, #24]
 8007f9e:	e7fe      	b.n	8007f9e <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d90b      	bls.n	8007fc0 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	b672      	cpsid	i
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	b662      	cpsie	i
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e7fe      	b.n	8007fbe <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2100      	movs	r1, #0
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f7ff fef2 	bl	8007db4 <xQueueGenericCreateStatic>
 8007fd0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007fde:	69fb      	ldr	r3, [r7, #28]
	}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3720      	adds	r7, #32
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10b      	bne.n	8008010 <xQueueCreateCountingSemaphore+0x28>
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	b672      	cpsid	i
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	b662      	cpsie	i
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	e7fe      	b.n	800800e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d90b      	bls.n	8008030 <xQueueCreateCountingSemaphore+0x48>
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	b672      	cpsid	i
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	b662      	cpsie	i
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	e7fe      	b.n	800802e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008030:	2202      	movs	r2, #2
 8008032:	2100      	movs	r1, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff ff3a 	bl	8007eae <xQueueGenericCreate>
 800803a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008048:	697b      	ldr	r3, [r7, #20]
	}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08e      	sub	sp, #56	; 0x38
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008062:	2300      	movs	r3, #0
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10b      	bne.n	8008088 <xQueueGenericSend+0x34>
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	b672      	cpsid	i
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	b662      	cpsie	i
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
 8008086:	e7fe      	b.n	8008086 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d103      	bne.n	8008096 <xQueueGenericSend+0x42>
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <xQueueGenericSend+0x46>
 8008096:	2301      	movs	r3, #1
 8008098:	e000      	b.n	800809c <xQueueGenericSend+0x48>
 800809a:	2300      	movs	r3, #0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <xQueueGenericSend+0x64>
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	b672      	cpsid	i
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	b662      	cpsie	i
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
 80080b6:	e7fe      	b.n	80080b6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d103      	bne.n	80080c6 <xQueueGenericSend+0x72>
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <xQueueGenericSend+0x76>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <xQueueGenericSend+0x78>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10b      	bne.n	80080e8 <xQueueGenericSend+0x94>
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	b672      	cpsid	i
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	b662      	cpsie	i
 80080e4:	623b      	str	r3, [r7, #32]
 80080e6:	e7fe      	b.n	80080e6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080e8:	f001 fc92 	bl	8009a10 <xTaskGetSchedulerState>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d102      	bne.n	80080f8 <xQueueGenericSend+0xa4>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <xQueueGenericSend+0xa8>
 80080f8:	2301      	movs	r3, #1
 80080fa:	e000      	b.n	80080fe <xQueueGenericSend+0xaa>
 80080fc:	2300      	movs	r3, #0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10b      	bne.n	800811a <xQueueGenericSend+0xc6>
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	b672      	cpsid	i
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	b662      	cpsie	i
 8008116:	61fb      	str	r3, [r7, #28]
 8008118:	e7fe      	b.n	8008118 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800811a:	f002 fab5 	bl	800a688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	429a      	cmp	r2, r3
 8008128:	d302      	bcc.n	8008130 <xQueueGenericSend+0xdc>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d129      	bne.n	8008184 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008136:	f000 fcac 	bl	8008a92 <prvCopyDataToQueue>
 800813a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	2b00      	cmp	r3, #0
 8008142:	d010      	beq.n	8008166 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	3324      	adds	r3, #36	; 0x24
 8008148:	4618      	mov	r0, r3
 800814a:	f001 faa3 	bl	8009694 <xTaskRemoveFromEventList>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d013      	beq.n	800817c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008154:	4b3f      	ldr	r3, [pc, #252]	; (8008254 <xQueueGenericSend+0x200>)
 8008156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	e00a      	b.n	800817c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	2b00      	cmp	r3, #0
 800816a:	d007      	beq.n	800817c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800816c:	4b39      	ldr	r3, [pc, #228]	; (8008254 <xQueueGenericSend+0x200>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800817c:	f002 fab6 	bl	800a6ec <vPortExitCritical>
				return pdPASS;
 8008180:	2301      	movs	r3, #1
 8008182:	e063      	b.n	800824c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d103      	bne.n	8008192 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800818a:	f002 faaf 	bl	800a6ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800818e:	2300      	movs	r3, #0
 8008190:	e05c      	b.n	800824c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008194:	2b00      	cmp	r3, #0
 8008196:	d106      	bne.n	80081a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008198:	f107 0314 	add.w	r3, r7, #20
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fadd 	bl	800975c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081a2:	2301      	movs	r3, #1
 80081a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081a6:	f002 faa1 	bl	800a6ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081aa:	f001 f84d 	bl	8009248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081ae:	f002 fa6b 	bl	800a688 <vPortEnterCritical>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b8:	b25b      	sxtb	r3, r3
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081be:	d103      	bne.n	80081c8 <xQueueGenericSend+0x174>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ce:	b25b      	sxtb	r3, r3
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d4:	d103      	bne.n	80081de <xQueueGenericSend+0x18a>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081de:	f002 fa85 	bl	800a6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081e2:	1d3a      	adds	r2, r7, #4
 80081e4:	f107 0314 	add.w	r3, r7, #20
 80081e8:	4611      	mov	r1, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f001 facc 	bl	8009788 <xTaskCheckForTimeOut>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d124      	bne.n	8008240 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081f8:	f000 fd43 	bl	8008c82 <prvIsQueueFull>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d018      	beq.n	8008234 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	3310      	adds	r3, #16
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f001 f9f0 	bl	80095f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008212:	f000 fcce 	bl	8008bb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008216:	f001 f825 	bl	8009264 <xTaskResumeAll>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	f47f af7c 	bne.w	800811a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <xQueueGenericSend+0x200>)
 8008224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	e772      	b.n	800811a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008236:	f000 fcbc 	bl	8008bb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800823a:	f001 f813 	bl	8009264 <xTaskResumeAll>
 800823e:	e76c      	b.n	800811a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008242:	f000 fcb6 	bl	8008bb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008246:	f001 f80d 	bl	8009264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800824a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800824c:	4618      	mov	r0, r3
 800824e:	3738      	adds	r7, #56	; 0x38
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	e000ed04 	.word	0xe000ed04

08008258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08e      	sub	sp, #56	; 0x38
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10b      	bne.n	8008288 <xQueueGenericSendFromISR+0x30>
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	b672      	cpsid	i
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	b662      	cpsie	i
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
 8008286:	e7fe      	b.n	8008286 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <xQueueGenericSendFromISR+0x3e>
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <xQueueGenericSendFromISR+0x42>
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <xQueueGenericSendFromISR+0x44>
 800829a:	2300      	movs	r3, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10b      	bne.n	80082b8 <xQueueGenericSendFromISR+0x60>
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	b672      	cpsid	i
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	b662      	cpsie	i
 80082b4:	623b      	str	r3, [r7, #32]
 80082b6:	e7fe      	b.n	80082b6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d103      	bne.n	80082c6 <xQueueGenericSendFromISR+0x6e>
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <xQueueGenericSendFromISR+0x72>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <xQueueGenericSendFromISR+0x74>
 80082ca:	2300      	movs	r3, #0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10b      	bne.n	80082e8 <xQueueGenericSendFromISR+0x90>
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	b672      	cpsid	i
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	b662      	cpsie	i
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	e7fe      	b.n	80082e6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082e8:	f002 faae 	bl	800a848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082ec:	f3ef 8211 	mrs	r2, BASEPRI
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	b672      	cpsid	i
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	b662      	cpsie	i
 8008304:	61ba      	str	r2, [r7, #24]
 8008306:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008308:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800830a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008314:	429a      	cmp	r2, r3
 8008316:	d302      	bcc.n	800831e <xQueueGenericSendFromISR+0xc6>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d12c      	bne.n	8008378 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	68b9      	ldr	r1, [r7, #8]
 800832c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800832e:	f000 fbb0 	bl	8008a92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008332:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800833a:	d112      	bne.n	8008362 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	d016      	beq.n	8008372 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	3324      	adds	r3, #36	; 0x24
 8008348:	4618      	mov	r0, r3
 800834a:	f001 f9a3 	bl	8009694 <xTaskRemoveFromEventList>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00e      	beq.n	8008372 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00b      	beq.n	8008372 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	e007      	b.n	8008372 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008362:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008366:	3301      	adds	r3, #1
 8008368:	b2db      	uxtb	r3, r3
 800836a:	b25a      	sxtb	r2, r3
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008372:	2301      	movs	r3, #1
 8008374:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008376:	e001      	b.n	800837c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008378:	2300      	movs	r3, #0
 800837a:	637b      	str	r3, [r7, #52]	; 0x34
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008388:	4618      	mov	r0, r3
 800838a:	3738      	adds	r7, #56	; 0x38
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08e      	sub	sp, #56	; 0x38
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	b672      	cpsid	i
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	b662      	cpsie	i
 80083b8:	623b      	str	r3, [r7, #32]
 80083ba:	e7fe      	b.n	80083ba <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <xQueueGiveFromISR+0x4c>
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	b672      	cpsid	i
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	b662      	cpsie	i
 80083d8:	61fb      	str	r3, [r7, #28]
 80083da:	e7fe      	b.n	80083da <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <xQueueGiveFromISR+0x5c>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <xQueueGiveFromISR+0x60>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <xQueueGiveFromISR+0x62>
 80083f0:	2300      	movs	r3, #0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <xQueueGiveFromISR+0x7e>
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	b672      	cpsid	i
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	b662      	cpsie	i
 800840a:	61bb      	str	r3, [r7, #24]
 800840c:	e7fe      	b.n	800840c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800840e:	f002 fa1b 	bl	800a848 <vPortValidateInterruptPriority>
	__asm volatile
 8008412:	f3ef 8211 	mrs	r2, BASEPRI
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	b672      	cpsid	i
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	b662      	cpsie	i
 800842a:	617a      	str	r2, [r7, #20]
 800842c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800842e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800843e:	429a      	cmp	r2, r3
 8008440:	d22b      	bcs.n	800849a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008454:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800845c:	d112      	bne.n	8008484 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800845e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	2b00      	cmp	r3, #0
 8008464:	d016      	beq.n	8008494 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	3324      	adds	r3, #36	; 0x24
 800846a:	4618      	mov	r0, r3
 800846c:	f001 f912 	bl	8009694 <xTaskRemoveFromEventList>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00e      	beq.n	8008494 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	e007      	b.n	8008494 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008488:	3301      	adds	r3, #1
 800848a:	b2db      	uxtb	r3, r3
 800848c:	b25a      	sxtb	r2, r3
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008494:	2301      	movs	r3, #1
 8008496:	637b      	str	r3, [r7, #52]	; 0x34
 8008498:	e001      	b.n	800849e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800849a:	2300      	movs	r3, #0
 800849c:	637b      	str	r3, [r7, #52]	; 0x34
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3738      	adds	r7, #56	; 0x38
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08c      	sub	sp, #48	; 0x30
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80084c0:	2300      	movs	r3, #0
 80084c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10b      	bne.n	80084e6 <xQueueReceive+0x32>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	b672      	cpsid	i
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	b662      	cpsie	i
 80084e2:	623b      	str	r3, [r7, #32]
 80084e4:	e7fe      	b.n	80084e4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <xQueueReceive+0x40>
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <xQueueReceive+0x44>
 80084f4:	2301      	movs	r3, #1
 80084f6:	e000      	b.n	80084fa <xQueueReceive+0x46>
 80084f8:	2300      	movs	r3, #0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10b      	bne.n	8008516 <xQueueReceive+0x62>
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	b672      	cpsid	i
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	b662      	cpsie	i
 8008512:	61fb      	str	r3, [r7, #28]
 8008514:	e7fe      	b.n	8008514 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008516:	f001 fa7b 	bl	8009a10 <xTaskGetSchedulerState>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d102      	bne.n	8008526 <xQueueReceive+0x72>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <xQueueReceive+0x76>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <xQueueReceive+0x78>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10b      	bne.n	8008548 <xQueueReceive+0x94>
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	b672      	cpsid	i
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	b662      	cpsie	i
 8008544:	61bb      	str	r3, [r7, #24]
 8008546:	e7fe      	b.n	8008546 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008548:	f002 f89e 	bl	800a688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01f      	beq.n	8008598 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855c:	f000 fb03 	bl	8008b66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	1e5a      	subs	r2, r3, #1
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00f      	beq.n	8008590 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	3310      	adds	r3, #16
 8008574:	4618      	mov	r0, r3
 8008576:	f001 f88d 	bl	8009694 <xTaskRemoveFromEventList>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d007      	beq.n	8008590 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008580:	4b3c      	ldr	r3, [pc, #240]	; (8008674 <xQueueReceive+0x1c0>)
 8008582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008590:	f002 f8ac 	bl	800a6ec <vPortExitCritical>
				return pdPASS;
 8008594:	2301      	movs	r3, #1
 8008596:	e069      	b.n	800866c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d103      	bne.n	80085a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800859e:	f002 f8a5 	bl	800a6ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085a2:	2300      	movs	r3, #0
 80085a4:	e062      	b.n	800866c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d106      	bne.n	80085ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085ac:	f107 0310 	add.w	r3, r7, #16
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 f8d3 	bl	800975c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085b6:	2301      	movs	r3, #1
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085ba:	f002 f897 	bl	800a6ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085be:	f000 fe43 	bl	8009248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085c2:	f002 f861 	bl	800a688 <vPortEnterCritical>
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085cc:	b25b      	sxtb	r3, r3
 80085ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085d2:	d103      	bne.n	80085dc <xQueueReceive+0x128>
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085e2:	b25b      	sxtb	r3, r3
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085e8:	d103      	bne.n	80085f2 <xQueueReceive+0x13e>
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085f2:	f002 f87b 	bl	800a6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085f6:	1d3a      	adds	r2, r7, #4
 80085f8:	f107 0310 	add.w	r3, r7, #16
 80085fc:	4611      	mov	r1, r2
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 f8c2 	bl	8009788 <xTaskCheckForTimeOut>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d123      	bne.n	8008652 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800860a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800860c:	f000 fb23 	bl	8008c56 <prvIsQueueEmpty>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d017      	beq.n	8008646 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	3324      	adds	r3, #36	; 0x24
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f000 ffe6 	bl	80095f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008626:	f000 fac4 	bl	8008bb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800862a:	f000 fe1b 	bl	8009264 <xTaskResumeAll>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d189      	bne.n	8008548 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008634:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <xQueueReceive+0x1c0>)
 8008636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	e780      	b.n	8008548 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008648:	f000 fab3 	bl	8008bb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800864c:	f000 fe0a 	bl	8009264 <xTaskResumeAll>
 8008650:	e77a      	b.n	8008548 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008654:	f000 faad 	bl	8008bb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008658:	f000 fe04 	bl	8009264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800865c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800865e:	f000 fafa 	bl	8008c56 <prvIsQueueEmpty>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	f43f af6f 	beq.w	8008548 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800866a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800866c:	4618      	mov	r0, r3
 800866e:	3730      	adds	r7, #48	; 0x30
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	e000ed04 	.word	0xe000ed04

08008678 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08e      	sub	sp, #56	; 0x38
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008682:	2300      	movs	r3, #0
 8008684:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <xQueueSemaphoreTake+0x34>
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	b672      	cpsid	i
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	b662      	cpsie	i
 80086a8:	623b      	str	r3, [r7, #32]
 80086aa:	e7fe      	b.n	80086aa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <xQueueSemaphoreTake+0x54>
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	b672      	cpsid	i
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	b662      	cpsie	i
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	e7fe      	b.n	80086ca <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086cc:	f001 f9a0 	bl	8009a10 <xTaskGetSchedulerState>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d102      	bne.n	80086dc <xQueueSemaphoreTake+0x64>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <xQueueSemaphoreTake+0x68>
 80086dc:	2301      	movs	r3, #1
 80086de:	e000      	b.n	80086e2 <xQueueSemaphoreTake+0x6a>
 80086e0:	2300      	movs	r3, #0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10b      	bne.n	80086fe <xQueueSemaphoreTake+0x86>
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	b672      	cpsid	i
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	b662      	cpsie	i
 80086fa:	61bb      	str	r3, [r7, #24]
 80086fc:	e7fe      	b.n	80086fc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086fe:	f001 ffc3 	bl	800a688 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008706:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	2b00      	cmp	r3, #0
 800870c:	d024      	beq.n	8008758 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	1e5a      	subs	r2, r3, #1
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d104      	bne.n	8008728 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800871e:	f001 faf1 	bl	8009d04 <pvTaskIncrementMutexHeldCount>
 8008722:	4602      	mov	r2, r0
 8008724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008726:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00f      	beq.n	8008750 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008732:	3310      	adds	r3, #16
 8008734:	4618      	mov	r0, r3
 8008736:	f000 ffad 	bl	8009694 <xTaskRemoveFromEventList>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008740:	4b54      	ldr	r3, [pc, #336]	; (8008894 <xQueueSemaphoreTake+0x21c>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008750:	f001 ffcc 	bl	800a6ec <vPortExitCritical>
				return pdPASS;
 8008754:	2301      	movs	r3, #1
 8008756:	e098      	b.n	800888a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d112      	bne.n	8008784 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <xQueueSemaphoreTake+0x104>
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	b672      	cpsid	i
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	b662      	cpsie	i
 8008778:	617b      	str	r3, [r7, #20]
 800877a:	e7fe      	b.n	800877a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800877c:	f001 ffb6 	bl	800a6ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008780:	2300      	movs	r3, #0
 8008782:	e082      	b.n	800888a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008786:	2b00      	cmp	r3, #0
 8008788:	d106      	bne.n	8008798 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800878a:	f107 030c 	add.w	r3, r7, #12
 800878e:	4618      	mov	r0, r3
 8008790:	f000 ffe4 	bl	800975c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008794:	2301      	movs	r3, #1
 8008796:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008798:	f001 ffa8 	bl	800a6ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800879c:	f000 fd54 	bl	8009248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087a0:	f001 ff72 	bl	800a688 <vPortEnterCritical>
 80087a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087aa:	b25b      	sxtb	r3, r3
 80087ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087b0:	d103      	bne.n	80087ba <xQueueSemaphoreTake+0x142>
 80087b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087c0:	b25b      	sxtb	r3, r3
 80087c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087c6:	d103      	bne.n	80087d0 <xQueueSemaphoreTake+0x158>
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087d0:	f001 ff8c 	bl	800a6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087d4:	463a      	mov	r2, r7
 80087d6:	f107 030c 	add.w	r3, r7, #12
 80087da:	4611      	mov	r1, r2
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 ffd3 	bl	8009788 <xTaskCheckForTimeOut>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d132      	bne.n	800884e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087ea:	f000 fa34 	bl	8008c56 <prvIsQueueEmpty>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d026      	beq.n	8008842 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d109      	bne.n	8008810 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80087fc:	f001 ff44 	bl	800a688 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	4618      	mov	r0, r3
 8008806:	f001 f921 	bl	8009a4c <xTaskPriorityInherit>
 800880a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800880c:	f001 ff6e 	bl	800a6ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	3324      	adds	r3, #36	; 0x24
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	4611      	mov	r1, r2
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fee9 	bl	80095f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800881e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008820:	f000 f9c7 	bl	8008bb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008824:	f000 fd1e 	bl	8009264 <xTaskResumeAll>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	f47f af67 	bne.w	80086fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008830:	4b18      	ldr	r3, [pc, #96]	; (8008894 <xQueueSemaphoreTake+0x21c>)
 8008832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	e75d      	b.n	80086fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008844:	f000 f9b5 	bl	8008bb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008848:	f000 fd0c 	bl	8009264 <xTaskResumeAll>
 800884c:	e757      	b.n	80086fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800884e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008850:	f000 f9af 	bl	8008bb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008854:	f000 fd06 	bl	8009264 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800885a:	f000 f9fc 	bl	8008c56 <prvIsQueueEmpty>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	f43f af4c 	beq.w	80086fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00d      	beq.n	8008888 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800886c:	f001 ff0c 	bl	800a688 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008872:	f000 f8f6 	bl	8008a62 <prvGetDisinheritPriorityAfterTimeout>
 8008876:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800887e:	4618      	mov	r0, r3
 8008880:	f001 f9bc 	bl	8009bfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008884:	f001 ff32 	bl	800a6ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008888:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800888a:	4618      	mov	r0, r3
 800888c:	3738      	adds	r7, #56	; 0x38
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08e      	sub	sp, #56	; 0x38
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10b      	bne.n	80088c6 <xQueueReceiveFromISR+0x2e>
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	b672      	cpsid	i
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	b662      	cpsie	i
 80088c2:	623b      	str	r3, [r7, #32]
 80088c4:	e7fe      	b.n	80088c4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <xQueueReceiveFromISR+0x3c>
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <xQueueReceiveFromISR+0x40>
 80088d4:	2301      	movs	r3, #1
 80088d6:	e000      	b.n	80088da <xQueueReceiveFromISR+0x42>
 80088d8:	2300      	movs	r3, #0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10b      	bne.n	80088f6 <xQueueReceiveFromISR+0x5e>
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	b672      	cpsid	i
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	b662      	cpsie	i
 80088f2:	61fb      	str	r3, [r7, #28]
 80088f4:	e7fe      	b.n	80088f4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088f6:	f001 ffa7 	bl	800a848 <vPortValidateInterruptPriority>
	__asm volatile
 80088fa:	f3ef 8211 	mrs	r2, BASEPRI
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	b672      	cpsid	i
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	b662      	cpsie	i
 8008912:	61ba      	str	r2, [r7, #24]
 8008914:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008916:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008918:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	d02f      	beq.n	8008986 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800892c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008934:	f000 f917 	bl	8008b66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	1e5a      	subs	r2, r3, #1
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008940:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008948:	d112      	bne.n	8008970 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d016      	beq.n	8008980 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	3310      	adds	r3, #16
 8008956:	4618      	mov	r0, r3
 8008958:	f000 fe9c 	bl	8009694 <xTaskRemoveFromEventList>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00e      	beq.n	8008980 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	e007      	b.n	8008980 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008974:	3301      	adds	r3, #1
 8008976:	b2db      	uxtb	r3, r3
 8008978:	b25a      	sxtb	r2, r3
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008980:	2301      	movs	r3, #1
 8008982:	637b      	str	r3, [r7, #52]	; 0x34
 8008984:	e001      	b.n	800898a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8008986:	2300      	movs	r3, #0
 8008988:	637b      	str	r3, [r7, #52]	; 0x34
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008996:	4618      	mov	r0, r3
 8008998:	3738      	adds	r7, #56	; 0x38
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10b      	bne.n	80089c4 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	b672      	cpsid	i
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	b662      	cpsie	i
 80089c0:	60bb      	str	r3, [r7, #8]
 80089c2:	e7fe      	b.n	80089c2 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 80089c4:	f001 fe60 	bl	800a688 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80089ce:	f001 fe8d 	bl	800a6ec <vPortExitCritical>

	return uxReturn;
 80089d2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10b      	bne.n	8008a06 <uxQueueMessagesWaitingFromISR+0x2a>
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	b672      	cpsid	i
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	b662      	cpsie	i
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e7fe      	b.n	8008a04 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008a0c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008a0e:	4618      	mov	r0, r3
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10b      	bne.n	8008a44 <vQueueDelete+0x2a>
 8008a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a30:	b672      	cpsid	i
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	b662      	cpsie	i
 8008a40:	60bb      	str	r3, [r7, #8]
 8008a42:	e7fe      	b.n	8008a42 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 f95d 	bl	8008d04 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f002 f801 	bl	800aa5c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008a5a:	bf00      	nop
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d006      	beq.n	8008a80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	e001      	b.n	8008a84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a84:	68fb      	ldr	r3, [r7, #12]
	}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b086      	sub	sp, #24
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10d      	bne.n	8008acc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d14d      	bne.n	8008b54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f001 f82d 	bl	8009b1c <xTaskPriorityDisinherit>
 8008ac2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	609a      	str	r2, [r3, #8]
 8008aca:	e043      	b.n	8008b54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d119      	bne.n	8008b06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6858      	ldr	r0, [r3, #4]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	461a      	mov	r2, r3
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	f002 f907 	bl	800acf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	441a      	add	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d32b      	bcc.n	8008b54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	605a      	str	r2, [r3, #4]
 8008b04:	e026      	b.n	8008b54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	68d8      	ldr	r0, [r3, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	461a      	mov	r2, r3
 8008b10:	68b9      	ldr	r1, [r7, #8]
 8008b12:	f002 f8ed 	bl	800acf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	425b      	negs	r3, r3
 8008b20:	441a      	add	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68da      	ldr	r2, [r3, #12]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d207      	bcs.n	8008b42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	425b      	negs	r3, r3
 8008b3c:	441a      	add	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d105      	bne.n	8008b54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b5c:	697b      	ldr	r3, [r7, #20]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b082      	sub	sp, #8
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d018      	beq.n	8008baa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68da      	ldr	r2, [r3, #12]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b80:	441a      	add	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d303      	bcc.n	8008b9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68d9      	ldr	r1, [r3, #12]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	6838      	ldr	r0, [r7, #0]
 8008ba6:	f002 f8a3 	bl	800acf0 <memcpy>
	}
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bba:	f001 fd65 	bl	800a688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bc6:	e011      	b.n	8008bec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d012      	beq.n	8008bf6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3324      	adds	r3, #36	; 0x24
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fd5d 	bl	8009694 <xTaskRemoveFromEventList>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008be0:	f000 fe36 	bl	8009850 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dce9      	bgt.n	8008bc8 <prvUnlockQueue+0x16>
 8008bf4:	e000      	b.n	8008bf8 <prvUnlockQueue+0x46>
					break;
 8008bf6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	22ff      	movs	r2, #255	; 0xff
 8008bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c00:	f001 fd74 	bl	800a6ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c04:	f001 fd40 	bl	800a688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c10:	e011      	b.n	8008c36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d012      	beq.n	8008c40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	3310      	adds	r3, #16
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fd38 	bl	8009694 <xTaskRemoveFromEventList>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c2a:	f000 fe11 	bl	8009850 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	dce9      	bgt.n	8008c12 <prvUnlockQueue+0x60>
 8008c3e:	e000      	b.n	8008c42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	22ff      	movs	r2, #255	; 0xff
 8008c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c4a:	f001 fd4f 	bl	800a6ec <vPortExitCritical>
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c5e:	f001 fd13 	bl	800a688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	e001      	b.n	8008c74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c74:	f001 fd3a 	bl	800a6ec <vPortExitCritical>

	return xReturn;
 8008c78:	68fb      	ldr	r3, [r7, #12]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c8a:	f001 fcfd 	bl	800a688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d102      	bne.n	8008ca0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	e001      	b.n	8008ca4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ca4:	f001 fd22 	bl	800a6ec <vPortExitCritical>

	return xReturn;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	e014      	b.n	8008cee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cc4:	4a0e      	ldr	r2, [pc, #56]	; (8008d00 <vQueueAddToRegistry+0x4c>)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10b      	bne.n	8008ce8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008cd0:	490b      	ldr	r1, [pc, #44]	; (8008d00 <vQueueAddToRegistry+0x4c>)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cda:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <vQueueAddToRegistry+0x4c>)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	4413      	add	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ce6:	e005      	b.n	8008cf4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b07      	cmp	r3, #7
 8008cf2:	d9e7      	bls.n	8008cc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	20004cbc 	.word	0x20004cbc

08008d04 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	e016      	b.n	8008d40 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d12:	4a10      	ldr	r2, [pc, #64]	; (8008d54 <vQueueUnregisterQueue+0x50>)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	4413      	add	r3, r2
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d10b      	bne.n	8008d3a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d22:	4a0c      	ldr	r2, [pc, #48]	; (8008d54 <vQueueUnregisterQueue+0x50>)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2100      	movs	r1, #0
 8008d28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008d2c:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <vQueueUnregisterQueue+0x50>)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	4413      	add	r3, r2
 8008d34:	2200      	movs	r2, #0
 8008d36:	605a      	str	r2, [r3, #4]
				break;
 8008d38:	e005      	b.n	8008d46 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2b07      	cmp	r3, #7
 8008d44:	d9e5      	bls.n	8008d12 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20004cbc 	.word	0x20004cbc

08008d58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d68:	f001 fc8e 	bl	800a688 <vPortEnterCritical>
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d72:	b25b      	sxtb	r3, r3
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d78:	d103      	bne.n	8008d82 <vQueueWaitForMessageRestricted+0x2a>
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d88:	b25b      	sxtb	r3, r3
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d8e:	d103      	bne.n	8008d98 <vQueueWaitForMessageRestricted+0x40>
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d98:	f001 fca8 	bl	800a6ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d106      	bne.n	8008db2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	3324      	adds	r3, #36	; 0x24
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	68b9      	ldr	r1, [r7, #8]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 fc45 	bl	800963c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008db2:	6978      	ldr	r0, [r7, #20]
 8008db4:	f7ff fefd 	bl	8008bb2 <prvUnlockQueue>
	}
 8008db8:	bf00      	nop
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08e      	sub	sp, #56	; 0x38
 8008dc4:	af04      	add	r7, sp, #16
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10b      	bne.n	8008dec <xTaskCreateStatic+0x2c>
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	b672      	cpsid	i
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	b662      	cpsie	i
 8008de8:	623b      	str	r3, [r7, #32]
 8008dea:	e7fe      	b.n	8008dea <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10b      	bne.n	8008e0a <xTaskCreateStatic+0x4a>
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	b672      	cpsid	i
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	b662      	cpsie	i
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e7fe      	b.n	8008e08 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e0a:	235c      	movs	r3, #92	; 0x5c
 8008e0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	2b5c      	cmp	r3, #92	; 0x5c
 8008e12:	d00b      	beq.n	8008e2c <xTaskCreateStatic+0x6c>
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	b672      	cpsid	i
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	b662      	cpsie	i
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	e7fe      	b.n	8008e2a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d01e      	beq.n	8008e72 <xTaskCreateStatic+0xb2>
 8008e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d01b      	beq.n	8008e72 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9303      	str	r3, [sp, #12]
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	9302      	str	r3, [sp, #8]
 8008e54:	f107 0314 	add.w	r3, r7, #20
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	68b9      	ldr	r1, [r7, #8]
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 f850 	bl	8008f0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e6c:	f000 f8de 	bl	800902c <prvAddNewTaskToReadyList>
 8008e70:	e001      	b.n	8008e76 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e76:	697b      	ldr	r3, [r7, #20]
	}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3728      	adds	r7, #40	; 0x28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08c      	sub	sp, #48	; 0x30
 8008e84:	af04      	add	r7, sp, #16
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e90:	88fb      	ldrh	r3, [r7, #6]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 fd19 	bl	800a8cc <pvPortMalloc>
 8008e9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00e      	beq.n	8008ec0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ea2:	205c      	movs	r0, #92	; 0x5c
 8008ea4:	f001 fd12 	bl	800a8cc <pvPortMalloc>
 8008ea8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8008eb6:	e005      	b.n	8008ec4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008eb8:	6978      	ldr	r0, [r7, #20]
 8008eba:	f001 fdcf 	bl	800aa5c <vPortFree>
 8008ebe:	e001      	b.n	8008ec4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d017      	beq.n	8008efa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ed2:	88fa      	ldrh	r2, [r7, #6]
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9303      	str	r3, [sp, #12]
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	9302      	str	r3, [sp, #8]
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	68b9      	ldr	r1, [r7, #8]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 f80e 	bl	8008f0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eee:	69f8      	ldr	r0, [r7, #28]
 8008ef0:	f000 f89c 	bl	800902c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	61bb      	str	r3, [r7, #24]
 8008ef8:	e002      	b.n	8008f00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008efe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f00:	69bb      	ldr	r3, [r7, #24]
	}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3720      	adds	r7, #32
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b088      	sub	sp, #32
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	607a      	str	r2, [r7, #4]
 8008f16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	461a      	mov	r2, r3
 8008f22:	21a5      	movs	r1, #165	; 0xa5
 8008f24:	f001 feef 	bl	800ad06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008f32:	440b      	add	r3, r1
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	f023 0307 	bic.w	r3, r3, #7
 8008f40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	f003 0307 	and.w	r3, r3, #7
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00b      	beq.n	8008f64 <prvInitialiseNewTask+0x5a>
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	b672      	cpsid	i
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	b662      	cpsie	i
 8008f60:	617b      	str	r3, [r7, #20]
 8008f62:	e7fe      	b.n	8008f62 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d01f      	beq.n	8008faa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	e012      	b.n	8008f96 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	7819      	ldrb	r1, [r3, #0]
 8008f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	3334      	adds	r3, #52	; 0x34
 8008f80:	460a      	mov	r2, r1
 8008f82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	4413      	add	r3, r2
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d006      	beq.n	8008f9e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	3301      	adds	r3, #1
 8008f94:	61fb      	str	r3, [r7, #28]
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	2b0f      	cmp	r3, #15
 8008f9a:	d9e9      	bls.n	8008f70 <prvInitialiseNewTask+0x66>
 8008f9c:	e000      	b.n	8008fa0 <prvInitialiseNewTask+0x96>
			{
				break;
 8008f9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fa8:	e003      	b.n	8008fb2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	2b37      	cmp	r3, #55	; 0x37
 8008fb6:	d901      	bls.n	8008fbc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fb8:	2337      	movs	r3, #55	; 0x37
 8008fba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	2200      	movs	r2, #0
 8008fcc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fdf0 	bl	8007bb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	3318      	adds	r3, #24
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fdeb 	bl	8007bb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	68f9      	ldr	r1, [r7, #12]
 800900a:	69b8      	ldr	r0, [r7, #24]
 800900c:	f001 fa36 	bl	800a47c <pxPortInitialiseStack>
 8009010:	4602      	mov	r2, r0
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009022:	bf00      	nop
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009034:	f001 fb28 	bl	800a688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009038:	4b2d      	ldr	r3, [pc, #180]	; (80090f0 <prvAddNewTaskToReadyList+0xc4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3301      	adds	r3, #1
 800903e:	4a2c      	ldr	r2, [pc, #176]	; (80090f0 <prvAddNewTaskToReadyList+0xc4>)
 8009040:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009042:	4b2c      	ldr	r3, [pc, #176]	; (80090f4 <prvAddNewTaskToReadyList+0xc8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d109      	bne.n	800905e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800904a:	4a2a      	ldr	r2, [pc, #168]	; (80090f4 <prvAddNewTaskToReadyList+0xc8>)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009050:	4b27      	ldr	r3, [pc, #156]	; (80090f0 <prvAddNewTaskToReadyList+0xc4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d110      	bne.n	800907a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009058:	f000 fc1e 	bl	8009898 <prvInitialiseTaskLists>
 800905c:	e00d      	b.n	800907a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800905e:	4b26      	ldr	r3, [pc, #152]	; (80090f8 <prvAddNewTaskToReadyList+0xcc>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d109      	bne.n	800907a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009066:	4b23      	ldr	r3, [pc, #140]	; (80090f4 <prvAddNewTaskToReadyList+0xc8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	429a      	cmp	r2, r3
 8009072:	d802      	bhi.n	800907a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009074:	4a1f      	ldr	r2, [pc, #124]	; (80090f4 <prvAddNewTaskToReadyList+0xc8>)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800907a:	4b20      	ldr	r3, [pc, #128]	; (80090fc <prvAddNewTaskToReadyList+0xd0>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3301      	adds	r3, #1
 8009080:	4a1e      	ldr	r2, [pc, #120]	; (80090fc <prvAddNewTaskToReadyList+0xd0>)
 8009082:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009084:	4b1d      	ldr	r3, [pc, #116]	; (80090fc <prvAddNewTaskToReadyList+0xd0>)
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009090:	4b1b      	ldr	r3, [pc, #108]	; (8009100 <prvAddNewTaskToReadyList+0xd4>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d903      	bls.n	80090a0 <prvAddNewTaskToReadyList+0x74>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	4a18      	ldr	r2, [pc, #96]	; (8009100 <prvAddNewTaskToReadyList+0xd4>)
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4a15      	ldr	r2, [pc, #84]	; (8009104 <prvAddNewTaskToReadyList+0xd8>)
 80090ae:	441a      	add	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4619      	mov	r1, r3
 80090b6:	4610      	mov	r0, r2
 80090b8:	f7fe fd8b 	bl	8007bd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090bc:	f001 fb16 	bl	800a6ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090c0:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <prvAddNewTaskToReadyList+0xcc>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00e      	beq.n	80090e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <prvAddNewTaskToReadyList+0xc8>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d207      	bcs.n	80090e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090d6:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <prvAddNewTaskToReadyList+0xdc>)
 80090d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20000c60 	.word	0x20000c60
 80090f4:	2000078c 	.word	0x2000078c
 80090f8:	20000c6c 	.word	0x20000c6c
 80090fc:	20000c7c 	.word	0x20000c7c
 8009100:	20000c68 	.word	0x20000c68
 8009104:	20000790 	.word	0x20000790
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d018      	beq.n	8009150 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800911e:	4b14      	ldr	r3, [pc, #80]	; (8009170 <vTaskDelay+0x64>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00b      	beq.n	800913e <vTaskDelay+0x32>
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	b672      	cpsid	i
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	b662      	cpsie	i
 800913a:	60bb      	str	r3, [r7, #8]
 800913c:	e7fe      	b.n	800913c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800913e:	f000 f883 	bl	8009248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009142:	2100      	movs	r1, #0
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fdf1 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800914a:	f000 f88b 	bl	8009264 <xTaskResumeAll>
 800914e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d107      	bne.n	8009166 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009156:	4b07      	ldr	r3, [pc, #28]	; (8009174 <vTaskDelay+0x68>)
 8009158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000c88 	.word	0x20000c88
 8009174:	e000ed04 	.word	0xe000ed04

08009178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08a      	sub	sp, #40	; 0x28
 800917c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009186:	463a      	mov	r2, r7
 8009188:	1d39      	adds	r1, r7, #4
 800918a:	f107 0308 	add.w	r3, r7, #8
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fcbe 	bl	8007b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	9202      	str	r2, [sp, #8]
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	2300      	movs	r3, #0
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	460a      	mov	r2, r1
 80091a6:	4922      	ldr	r1, [pc, #136]	; (8009230 <vTaskStartScheduler+0xb8>)
 80091a8:	4822      	ldr	r0, [pc, #136]	; (8009234 <vTaskStartScheduler+0xbc>)
 80091aa:	f7ff fe09 	bl	8008dc0 <xTaskCreateStatic>
 80091ae:	4602      	mov	r2, r0
 80091b0:	4b21      	ldr	r3, [pc, #132]	; (8009238 <vTaskStartScheduler+0xc0>)
 80091b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091b4:	4b20      	ldr	r3, [pc, #128]	; (8009238 <vTaskStartScheduler+0xc0>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091bc:	2301      	movs	r3, #1
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	e001      	b.n	80091c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d102      	bne.n	80091d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091cc:	f000 fe02 	bl	8009dd4 <xTimerCreateTimerTask>
 80091d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d117      	bne.n	8009208 <vTaskStartScheduler+0x90>
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	b672      	cpsid	i
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	b662      	cpsie	i
 80091ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091ee:	4b13      	ldr	r3, [pc, #76]	; (800923c <vTaskStartScheduler+0xc4>)
 80091f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091f6:	4b12      	ldr	r3, [pc, #72]	; (8009240 <vTaskStartScheduler+0xc8>)
 80091f8:	2201      	movs	r2, #1
 80091fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091fc:	4b11      	ldr	r3, [pc, #68]	; (8009244 <vTaskStartScheduler+0xcc>)
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009202:	f001 f9c5 	bl	800a590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009206:	e00f      	b.n	8009228 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800920e:	d10b      	bne.n	8009228 <vTaskStartScheduler+0xb0>
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	b672      	cpsid	i
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	b662      	cpsie	i
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e7fe      	b.n	8009226 <vTaskStartScheduler+0xae>
}
 8009228:	bf00      	nop
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	0800b794 	.word	0x0800b794
 8009234:	08009869 	.word	0x08009869
 8009238:	20000c84 	.word	0x20000c84
 800923c:	20000c80 	.word	0x20000c80
 8009240:	20000c6c 	.word	0x20000c6c
 8009244:	20000c64 	.word	0x20000c64

08009248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800924c:	4b04      	ldr	r3, [pc, #16]	; (8009260 <vTaskSuspendAll+0x18>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3301      	adds	r3, #1
 8009252:	4a03      	ldr	r2, [pc, #12]	; (8009260 <vTaskSuspendAll+0x18>)
 8009254:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009256:	bf00      	nop
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20000c88 	.word	0x20000c88

08009264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009272:	4b42      	ldr	r3, [pc, #264]	; (800937c <xTaskResumeAll+0x118>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <xTaskResumeAll+0x2e>
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	b672      	cpsid	i
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	b662      	cpsie	i
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	e7fe      	b.n	8009290 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009292:	f001 f9f9 	bl	800a688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009296:	4b39      	ldr	r3, [pc, #228]	; (800937c <xTaskResumeAll+0x118>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3b01      	subs	r3, #1
 800929c:	4a37      	ldr	r2, [pc, #220]	; (800937c <xTaskResumeAll+0x118>)
 800929e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092a0:	4b36      	ldr	r3, [pc, #216]	; (800937c <xTaskResumeAll+0x118>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d162      	bne.n	800936e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092a8:	4b35      	ldr	r3, [pc, #212]	; (8009380 <xTaskResumeAll+0x11c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d05e      	beq.n	800936e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092b0:	e02f      	b.n	8009312 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b2:	4b34      	ldr	r3, [pc, #208]	; (8009384 <xTaskResumeAll+0x120>)
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3318      	adds	r3, #24
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe fce4 	bl	8007c8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fe fcdf 	bl	8007c8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d2:	4b2d      	ldr	r3, [pc, #180]	; (8009388 <xTaskResumeAll+0x124>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d903      	bls.n	80092e2 <xTaskResumeAll+0x7e>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092de:	4a2a      	ldr	r2, [pc, #168]	; (8009388 <xTaskResumeAll+0x124>)
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4a27      	ldr	r2, [pc, #156]	; (800938c <xTaskResumeAll+0x128>)
 80092f0:	441a      	add	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f7fe fc6a 	bl	8007bd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009302:	4b23      	ldr	r3, [pc, #140]	; (8009390 <xTaskResumeAll+0x12c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	429a      	cmp	r2, r3
 800930a:	d302      	bcc.n	8009312 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800930c:	4b21      	ldr	r3, [pc, #132]	; (8009394 <xTaskResumeAll+0x130>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009312:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <xTaskResumeAll+0x120>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1cb      	bne.n	80092b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009320:	f000 fb56 	bl	80099d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009324:	4b1c      	ldr	r3, [pc, #112]	; (8009398 <xTaskResumeAll+0x134>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d010      	beq.n	8009352 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009330:	f000 f846 	bl	80093c0 <xTaskIncrementTick>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800933a:	4b16      	ldr	r3, [pc, #88]	; (8009394 <xTaskResumeAll+0x130>)
 800933c:	2201      	movs	r2, #1
 800933e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3b01      	subs	r3, #1
 8009344:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f1      	bne.n	8009330 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800934c:	4b12      	ldr	r3, [pc, #72]	; (8009398 <xTaskResumeAll+0x134>)
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009352:	4b10      	ldr	r3, [pc, #64]	; (8009394 <xTaskResumeAll+0x130>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800935a:	2301      	movs	r3, #1
 800935c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <xTaskResumeAll+0x138>)
 8009360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800936e:	f001 f9bd 	bl	800a6ec <vPortExitCritical>

	return xAlreadyYielded;
 8009372:	68bb      	ldr	r3, [r7, #8]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20000c88 	.word	0x20000c88
 8009380:	20000c60 	.word	0x20000c60
 8009384:	20000c20 	.word	0x20000c20
 8009388:	20000c68 	.word	0x20000c68
 800938c:	20000790 	.word	0x20000790
 8009390:	2000078c 	.word	0x2000078c
 8009394:	20000c74 	.word	0x20000c74
 8009398:	20000c70 	.word	0x20000c70
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093a6:	4b05      	ldr	r3, [pc, #20]	; (80093bc <xTaskGetTickCount+0x1c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093ac:	687b      	ldr	r3, [r7, #4]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000c64 	.word	0x20000c64

080093c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ca:	4b4f      	ldr	r3, [pc, #316]	; (8009508 <xTaskIncrementTick+0x148>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f040 808a 	bne.w	80094e8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093d4:	4b4d      	ldr	r3, [pc, #308]	; (800950c <xTaskIncrementTick+0x14c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093dc:	4a4b      	ldr	r2, [pc, #300]	; (800950c <xTaskIncrementTick+0x14c>)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d121      	bne.n	800942c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80093e8:	4b49      	ldr	r3, [pc, #292]	; (8009510 <xTaskIncrementTick+0x150>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <xTaskIncrementTick+0x4a>
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	b672      	cpsid	i
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	b662      	cpsie	i
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	e7fe      	b.n	8009408 <xTaskIncrementTick+0x48>
 800940a:	4b41      	ldr	r3, [pc, #260]	; (8009510 <xTaskIncrementTick+0x150>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	4b40      	ldr	r3, [pc, #256]	; (8009514 <xTaskIncrementTick+0x154>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a3e      	ldr	r2, [pc, #248]	; (8009510 <xTaskIncrementTick+0x150>)
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	4a3e      	ldr	r2, [pc, #248]	; (8009514 <xTaskIncrementTick+0x154>)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	4b3e      	ldr	r3, [pc, #248]	; (8009518 <xTaskIncrementTick+0x158>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3301      	adds	r3, #1
 8009424:	4a3c      	ldr	r2, [pc, #240]	; (8009518 <xTaskIncrementTick+0x158>)
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	f000 fad2 	bl	80099d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800942c:	4b3b      	ldr	r3, [pc, #236]	; (800951c <xTaskIncrementTick+0x15c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	429a      	cmp	r2, r3
 8009434:	d349      	bcc.n	80094ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009436:	4b36      	ldr	r3, [pc, #216]	; (8009510 <xTaskIncrementTick+0x150>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009440:	4b36      	ldr	r3, [pc, #216]	; (800951c <xTaskIncrementTick+0x15c>)
 8009442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009446:	601a      	str	r2, [r3, #0]
					break;
 8009448:	e03f      	b.n	80094ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800944a:	4b31      	ldr	r3, [pc, #196]	; (8009510 <xTaskIncrementTick+0x150>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	429a      	cmp	r2, r3
 8009460:	d203      	bcs.n	800946a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009462:	4a2e      	ldr	r2, [pc, #184]	; (800951c <xTaskIncrementTick+0x15c>)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009468:	e02f      	b.n	80094ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	3304      	adds	r3, #4
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fc0c 	bl	8007c8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	3318      	adds	r3, #24
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fc03 	bl	8007c8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948a:	4b25      	ldr	r3, [pc, #148]	; (8009520 <xTaskIncrementTick+0x160>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d903      	bls.n	800949a <xTaskIncrementTick+0xda>
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009496:	4a22      	ldr	r2, [pc, #136]	; (8009520 <xTaskIncrementTick+0x160>)
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4a1f      	ldr	r2, [pc, #124]	; (8009524 <xTaskIncrementTick+0x164>)
 80094a8:	441a      	add	r2, r3
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	3304      	adds	r3, #4
 80094ae:	4619      	mov	r1, r3
 80094b0:	4610      	mov	r0, r2
 80094b2:	f7fe fb8e 	bl	8007bd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ba:	4b1b      	ldr	r3, [pc, #108]	; (8009528 <xTaskIncrementTick+0x168>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d3b8      	bcc.n	8009436 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80094c4:	2301      	movs	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094c8:	e7b5      	b.n	8009436 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094ca:	4b17      	ldr	r3, [pc, #92]	; (8009528 <xTaskIncrementTick+0x168>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d0:	4914      	ldr	r1, [pc, #80]	; (8009524 <xTaskIncrementTick+0x164>)
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d907      	bls.n	80094f2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80094e2:	2301      	movs	r3, #1
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	e004      	b.n	80094f2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80094e8:	4b10      	ldr	r3, [pc, #64]	; (800952c <xTaskIncrementTick+0x16c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3301      	adds	r3, #1
 80094ee:	4a0f      	ldr	r2, [pc, #60]	; (800952c <xTaskIncrementTick+0x16c>)
 80094f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80094f2:	4b0f      	ldr	r3, [pc, #60]	; (8009530 <xTaskIncrementTick+0x170>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80094fa:	2301      	movs	r3, #1
 80094fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80094fe:	697b      	ldr	r3, [r7, #20]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20000c88 	.word	0x20000c88
 800950c:	20000c64 	.word	0x20000c64
 8009510:	20000c18 	.word	0x20000c18
 8009514:	20000c1c 	.word	0x20000c1c
 8009518:	20000c78 	.word	0x20000c78
 800951c:	20000c80 	.word	0x20000c80
 8009520:	20000c68 	.word	0x20000c68
 8009524:	20000790 	.word	0x20000790
 8009528:	2000078c 	.word	0x2000078c
 800952c:	20000c70 	.word	0x20000c70
 8009530:	20000c74 	.word	0x20000c74

08009534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800953a:	4b28      	ldr	r3, [pc, #160]	; (80095dc <vTaskSwitchContext+0xa8>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009542:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <vTaskSwitchContext+0xac>)
 8009544:	2201      	movs	r2, #1
 8009546:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009548:	e042      	b.n	80095d0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800954a:	4b25      	ldr	r3, [pc, #148]	; (80095e0 <vTaskSwitchContext+0xac>)
 800954c:	2200      	movs	r2, #0
 800954e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009550:	4b24      	ldr	r3, [pc, #144]	; (80095e4 <vTaskSwitchContext+0xb0>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	e011      	b.n	800957c <vTaskSwitchContext+0x48>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10b      	bne.n	8009576 <vTaskSwitchContext+0x42>
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	b672      	cpsid	i
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	b662      	cpsie	i
 8009572:	607b      	str	r3, [r7, #4]
 8009574:	e7fe      	b.n	8009574 <vTaskSwitchContext+0x40>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3b01      	subs	r3, #1
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	491a      	ldr	r1, [pc, #104]	; (80095e8 <vTaskSwitchContext+0xb4>)
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0e3      	beq.n	8009558 <vTaskSwitchContext+0x24>
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4a13      	ldr	r2, [pc, #76]	; (80095e8 <vTaskSwitchContext+0xb4>)
 800959c:	4413      	add	r3, r2
 800959e:	60bb      	str	r3, [r7, #8]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	605a      	str	r2, [r3, #4]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	3308      	adds	r3, #8
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d104      	bne.n	80095c0 <vTaskSwitchContext+0x8c>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	605a      	str	r2, [r3, #4]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	4a09      	ldr	r2, [pc, #36]	; (80095ec <vTaskSwitchContext+0xb8>)
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	4a06      	ldr	r2, [pc, #24]	; (80095e4 <vTaskSwitchContext+0xb0>)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6013      	str	r3, [r2, #0]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	20000c88 	.word	0x20000c88
 80095e0:	20000c74 	.word	0x20000c74
 80095e4:	20000c68 	.word	0x20000c68
 80095e8:	20000790 	.word	0x20000790
 80095ec:	2000078c 	.word	0x2000078c

080095f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10b      	bne.n	8009618 <vTaskPlaceOnEventList+0x28>
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	b672      	cpsid	i
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	b662      	cpsie	i
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	e7fe      	b.n	8009616 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <vTaskPlaceOnEventList+0x48>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3318      	adds	r3, #24
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7fe fafa 	bl	8007c1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009626:	2101      	movs	r1, #1
 8009628:	6838      	ldr	r0, [r7, #0]
 800962a:	f000 fb7f 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	2000078c 	.word	0x2000078c

0800963c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10b      	bne.n	8009666 <vTaskPlaceOnEventListRestricted+0x2a>
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	b672      	cpsid	i
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	b662      	cpsie	i
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	e7fe      	b.n	8009664 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009666:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <vTaskPlaceOnEventListRestricted+0x54>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3318      	adds	r3, #24
 800966c:	4619      	mov	r1, r3
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7fe faaf 	bl	8007bd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800967a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800967e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	68b8      	ldr	r0, [r7, #8]
 8009684:	f000 fb52 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
	}
 8009688:	bf00      	nop
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	2000078c 	.word	0x2000078c

08009694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10b      	bne.n	80096c2 <xTaskRemoveFromEventList+0x2e>
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	b672      	cpsid	i
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	b662      	cpsie	i
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e7fe      	b.n	80096c0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	3318      	adds	r3, #24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe fae0 	bl	8007c8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096cc:	4b1d      	ldr	r3, [pc, #116]	; (8009744 <xTaskRemoveFromEventList+0xb0>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d11d      	bne.n	8009710 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe fad7 	bl	8007c8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e2:	4b19      	ldr	r3, [pc, #100]	; (8009748 <xTaskRemoveFromEventList+0xb4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d903      	bls.n	80096f2 <xTaskRemoveFromEventList+0x5e>
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ee:	4a16      	ldr	r2, [pc, #88]	; (8009748 <xTaskRemoveFromEventList+0xb4>)
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4a13      	ldr	r2, [pc, #76]	; (800974c <xTaskRemoveFromEventList+0xb8>)
 8009700:	441a      	add	r2, r3
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	3304      	adds	r3, #4
 8009706:	4619      	mov	r1, r3
 8009708:	4610      	mov	r0, r2
 800970a:	f7fe fa62 	bl	8007bd2 <vListInsertEnd>
 800970e:	e005      	b.n	800971c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	3318      	adds	r3, #24
 8009714:	4619      	mov	r1, r3
 8009716:	480e      	ldr	r0, [pc, #56]	; (8009750 <xTaskRemoveFromEventList+0xbc>)
 8009718:	f7fe fa5b 	bl	8007bd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009720:	4b0c      	ldr	r3, [pc, #48]	; (8009754 <xTaskRemoveFromEventList+0xc0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009726:	429a      	cmp	r2, r3
 8009728:	d905      	bls.n	8009736 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800972a:	2301      	movs	r3, #1
 800972c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800972e:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <xTaskRemoveFromEventList+0xc4>)
 8009730:	2201      	movs	r2, #1
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	e001      	b.n	800973a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800973a:	697b      	ldr	r3, [r7, #20]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000c88 	.word	0x20000c88
 8009748:	20000c68 	.word	0x20000c68
 800974c:	20000790 	.word	0x20000790
 8009750:	20000c20 	.word	0x20000c20
 8009754:	2000078c 	.word	0x2000078c
 8009758:	20000c74 	.word	0x20000c74

0800975c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009764:	4b06      	ldr	r3, [pc, #24]	; (8009780 <vTaskInternalSetTimeOutState+0x24>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <vTaskInternalSetTimeOutState+0x28>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	605a      	str	r2, [r3, #4]
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	20000c78 	.word	0x20000c78
 8009784:	20000c64 	.word	0x20000c64

08009788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <xTaskCheckForTimeOut+0x28>
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	b672      	cpsid	i
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	b662      	cpsie	i
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	e7fe      	b.n	80097ae <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <xTaskCheckForTimeOut+0x46>
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	b672      	cpsid	i
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	b662      	cpsie	i
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	e7fe      	b.n	80097cc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80097ce:	f000 ff5b 	bl	800a688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097d2:	4b1d      	ldr	r3, [pc, #116]	; (8009848 <xTaskCheckForTimeOut+0xc0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097ea:	d102      	bne.n	80097f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61fb      	str	r3, [r7, #28]
 80097f0:	e023      	b.n	800983a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4b15      	ldr	r3, [pc, #84]	; (800984c <xTaskCheckForTimeOut+0xc4>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d007      	beq.n	800980e <xTaskCheckForTimeOut+0x86>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	429a      	cmp	r2, r3
 8009806:	d302      	bcc.n	800980e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009808:	2301      	movs	r3, #1
 800980a:	61fb      	str	r3, [r7, #28]
 800980c:	e015      	b.n	800983a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	429a      	cmp	r2, r3
 8009816:	d20b      	bcs.n	8009830 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	1ad2      	subs	r2, r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff ff99 	bl	800975c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800982a:	2300      	movs	r3, #0
 800982c:	61fb      	str	r3, [r7, #28]
 800982e:	e004      	b.n	800983a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009836:	2301      	movs	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800983a:	f000 ff57 	bl	800a6ec <vPortExitCritical>

	return xReturn;
 800983e:	69fb      	ldr	r3, [r7, #28]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3720      	adds	r7, #32
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000c64 	.word	0x20000c64
 800984c:	20000c78 	.word	0x20000c78

08009850 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009854:	4b03      	ldr	r3, [pc, #12]	; (8009864 <vTaskMissedYield+0x14>)
 8009856:	2201      	movs	r2, #1
 8009858:	601a      	str	r2, [r3, #0]
}
 800985a:	bf00      	nop
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	20000c74 	.word	0x20000c74

08009868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009870:	f000 f852 	bl	8009918 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009874:	4b06      	ldr	r3, [pc, #24]	; (8009890 <prvIdleTask+0x28>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d9f9      	bls.n	8009870 <prvIdleTask+0x8>
			{
				taskYIELD();
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <prvIdleTask+0x2c>)
 800987e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800988c:	e7f0      	b.n	8009870 <prvIdleTask+0x8>
 800988e:	bf00      	nop
 8009890:	20000790 	.word	0x20000790
 8009894:	e000ed04 	.word	0xe000ed04

08009898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800989e:	2300      	movs	r3, #0
 80098a0:	607b      	str	r3, [r7, #4]
 80098a2:	e00c      	b.n	80098be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4a12      	ldr	r2, [pc, #72]	; (80098f8 <prvInitialiseTaskLists+0x60>)
 80098b0:	4413      	add	r3, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe f960 	bl	8007b78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3301      	adds	r3, #1
 80098bc:	607b      	str	r3, [r7, #4]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b37      	cmp	r3, #55	; 0x37
 80098c2:	d9ef      	bls.n	80098a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098c4:	480d      	ldr	r0, [pc, #52]	; (80098fc <prvInitialiseTaskLists+0x64>)
 80098c6:	f7fe f957 	bl	8007b78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098ca:	480d      	ldr	r0, [pc, #52]	; (8009900 <prvInitialiseTaskLists+0x68>)
 80098cc:	f7fe f954 	bl	8007b78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098d0:	480c      	ldr	r0, [pc, #48]	; (8009904 <prvInitialiseTaskLists+0x6c>)
 80098d2:	f7fe f951 	bl	8007b78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098d6:	480c      	ldr	r0, [pc, #48]	; (8009908 <prvInitialiseTaskLists+0x70>)
 80098d8:	f7fe f94e 	bl	8007b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098dc:	480b      	ldr	r0, [pc, #44]	; (800990c <prvInitialiseTaskLists+0x74>)
 80098de:	f7fe f94b 	bl	8007b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098e2:	4b0b      	ldr	r3, [pc, #44]	; (8009910 <prvInitialiseTaskLists+0x78>)
 80098e4:	4a05      	ldr	r2, [pc, #20]	; (80098fc <prvInitialiseTaskLists+0x64>)
 80098e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <prvInitialiseTaskLists+0x7c>)
 80098ea:	4a05      	ldr	r2, [pc, #20]	; (8009900 <prvInitialiseTaskLists+0x68>)
 80098ec:	601a      	str	r2, [r3, #0]
}
 80098ee:	bf00      	nop
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20000790 	.word	0x20000790
 80098fc:	20000bf0 	.word	0x20000bf0
 8009900:	20000c04 	.word	0x20000c04
 8009904:	20000c20 	.word	0x20000c20
 8009908:	20000c34 	.word	0x20000c34
 800990c:	20000c4c 	.word	0x20000c4c
 8009910:	20000c18 	.word	0x20000c18
 8009914:	20000c1c 	.word	0x20000c1c

08009918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800991e:	e019      	b.n	8009954 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009920:	f000 feb2 	bl	800a688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009924:	4b0f      	ldr	r3, [pc, #60]	; (8009964 <prvCheckTasksWaitingTermination+0x4c>)
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3304      	adds	r3, #4
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe f9ab 	bl	8007c8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009936:	4b0c      	ldr	r3, [pc, #48]	; (8009968 <prvCheckTasksWaitingTermination+0x50>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3b01      	subs	r3, #1
 800993c:	4a0a      	ldr	r2, [pc, #40]	; (8009968 <prvCheckTasksWaitingTermination+0x50>)
 800993e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <prvCheckTasksWaitingTermination+0x54>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3b01      	subs	r3, #1
 8009946:	4a09      	ldr	r2, [pc, #36]	; (800996c <prvCheckTasksWaitingTermination+0x54>)
 8009948:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800994a:	f000 fecf 	bl	800a6ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f80e 	bl	8009970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <prvCheckTasksWaitingTermination+0x54>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e1      	bne.n	8009920 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20000c34 	.word	0x20000c34
 8009968:	20000c60 	.word	0x20000c60
 800996c:	20000c48 	.word	0x20000c48

08009970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800997e:	2b00      	cmp	r3, #0
 8009980:	d108      	bne.n	8009994 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009986:	4618      	mov	r0, r3
 8009988:	f001 f868 	bl	800aa5c <vPortFree>
				vPortFree( pxTCB );
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 f865 	bl	800aa5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009992:	e019      	b.n	80099c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800999a:	2b01      	cmp	r3, #1
 800999c:	d103      	bne.n	80099a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 f85c 	bl	800aa5c <vPortFree>
	}
 80099a4:	e010      	b.n	80099c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d00b      	beq.n	80099c8 <prvDeleteTCB+0x58>
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	b672      	cpsid	i
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	b662      	cpsie	i
 80099c4:	60fb      	str	r3, [r7, #12]
 80099c6:	e7fe      	b.n	80099c6 <prvDeleteTCB+0x56>
	}
 80099c8:	bf00      	nop
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099d6:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <prvResetNextTaskUnblockTime+0x38>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <prvResetNextTaskUnblockTime+0x3c>)
 80099e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099e8:	e008      	b.n	80099fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ea:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <prvResetNextTaskUnblockTime+0x38>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	4a04      	ldr	r2, [pc, #16]	; (8009a0c <prvResetNextTaskUnblockTime+0x3c>)
 80099fa:	6013      	str	r3, [r2, #0]
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	20000c18 	.word	0x20000c18
 8009a0c:	20000c80 	.word	0x20000c80

08009a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a16:	4b0b      	ldr	r3, [pc, #44]	; (8009a44 <xTaskGetSchedulerState+0x34>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d102      	bne.n	8009a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	607b      	str	r3, [r7, #4]
 8009a22:	e008      	b.n	8009a36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a24:	4b08      	ldr	r3, [pc, #32]	; (8009a48 <xTaskGetSchedulerState+0x38>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	607b      	str	r3, [r7, #4]
 8009a30:	e001      	b.n	8009a36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a32:	2300      	movs	r3, #0
 8009a34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a36:	687b      	ldr	r3, [r7, #4]
	}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	20000c6c 	.word	0x20000c6c
 8009a48:	20000c88 	.word	0x20000c88

08009a4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d051      	beq.n	8009b06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a66:	4b2a      	ldr	r3, [pc, #168]	; (8009b10 <xTaskPriorityInherit+0xc4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d241      	bcs.n	8009af4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	db06      	blt.n	8009a86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a78:	4b25      	ldr	r3, [pc, #148]	; (8009b10 <xTaskPriorityInherit+0xc4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	6959      	ldr	r1, [r3, #20]
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4a1f      	ldr	r2, [pc, #124]	; (8009b14 <xTaskPriorityInherit+0xc8>)
 8009a98:	4413      	add	r3, r2
 8009a9a:	4299      	cmp	r1, r3
 8009a9c:	d122      	bne.n	8009ae4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe f8f2 	bl	8007c8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009aa8:	4b19      	ldr	r3, [pc, #100]	; (8009b10 <xTaskPriorityInherit+0xc4>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab6:	4b18      	ldr	r3, [pc, #96]	; (8009b18 <xTaskPriorityInherit+0xcc>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d903      	bls.n	8009ac6 <xTaskPriorityInherit+0x7a>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	4a15      	ldr	r2, [pc, #84]	; (8009b18 <xTaskPriorityInherit+0xcc>)
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4a10      	ldr	r2, [pc, #64]	; (8009b14 <xTaskPriorityInherit+0xc8>)
 8009ad4:	441a      	add	r2, r3
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4619      	mov	r1, r3
 8009adc:	4610      	mov	r0, r2
 8009ade:	f7fe f878 	bl	8007bd2 <vListInsertEnd>
 8009ae2:	e004      	b.n	8009aee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <xTaskPriorityInherit+0xc4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009aee:	2301      	movs	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	e008      	b.n	8009b06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009af8:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <xTaskPriorityInherit+0xc4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d201      	bcs.n	8009b06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b02:	2301      	movs	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b06:	68fb      	ldr	r3, [r7, #12]
	}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	2000078c 	.word	0x2000078c
 8009b14:	20000790 	.word	0x20000790
 8009b18:	20000c68 	.word	0x20000c68

08009b1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d058      	beq.n	8009be4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b32:	4b2f      	ldr	r3, [pc, #188]	; (8009bf0 <xTaskPriorityDisinherit+0xd4>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d00b      	beq.n	8009b54 <xTaskPriorityDisinherit+0x38>
 8009b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b40:	b672      	cpsid	i
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	b662      	cpsie	i
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e7fe      	b.n	8009b52 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10b      	bne.n	8009b74 <xTaskPriorityDisinherit+0x58>
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	b672      	cpsid	i
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	b662      	cpsie	i
 8009b70:	60bb      	str	r3, [r7, #8]
 8009b72:	e7fe      	b.n	8009b72 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b78:	1e5a      	subs	r2, r3, #1
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d02c      	beq.n	8009be4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d128      	bne.n	8009be4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	3304      	adds	r3, #4
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe f878 	bl	8007c8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb4:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <xTaskPriorityDisinherit+0xd8>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d903      	bls.n	8009bc4 <xTaskPriorityDisinherit+0xa8>
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	4a0c      	ldr	r2, [pc, #48]	; (8009bf4 <xTaskPriorityDisinherit+0xd8>)
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4a09      	ldr	r2, [pc, #36]	; (8009bf8 <xTaskPriorityDisinherit+0xdc>)
 8009bd2:	441a      	add	r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4610      	mov	r0, r2
 8009bdc:	f7fd fff9 	bl	8007bd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009be4:	697b      	ldr	r3, [r7, #20]
	}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	2000078c 	.word	0x2000078c
 8009bf4:	20000c68 	.word	0x20000c68
 8009bf8:	20000790 	.word	0x20000790

08009bfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d06c      	beq.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	b672      	cpsid	i
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	b662      	cpsie	i
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	e7fe      	b.n	8009c32 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d902      	bls.n	8009c44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	61fb      	str	r3, [r7, #28]
 8009c42:	e002      	b.n	8009c4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	69fa      	ldr	r2, [r7, #28]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d04c      	beq.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d147      	bne.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c5e:	4b26      	ldr	r3, [pc, #152]	; (8009cf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d10b      	bne.n	8009c80 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8009c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6c:	b672      	cpsid	i
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	b662      	cpsie	i
 8009c7c:	60bb      	str	r3, [r7, #8]
 8009c7e:	e7fe      	b.n	8009c7e <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	69fa      	ldr	r2, [r7, #28]
 8009c8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	db04      	blt.n	8009c9e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	6959      	ldr	r1, [r3, #20]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4a13      	ldr	r2, [pc, #76]	; (8009cfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009cae:	4413      	add	r3, r2
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	d11c      	bne.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fd ffe7 	bl	8007c8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc2:	4b0f      	ldr	r3, [pc, #60]	; (8009d00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d903      	bls.n	8009cd2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cce:	4a0c      	ldr	r2, [pc, #48]	; (8009d00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4a07      	ldr	r2, [pc, #28]	; (8009cfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009ce0:	441a      	add	r2, r3
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4610      	mov	r0, r2
 8009cea:	f7fd ff72 	bl	8007bd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cee:	bf00      	nop
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	2000078c 	.word	0x2000078c
 8009cfc:	20000790 	.word	0x20000790
 8009d00:	20000c68 	.word	0x20000c68

08009d04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d08:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d10:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d16:	3201      	adds	r2, #1
 8009d18:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009d1a:	4b03      	ldr	r3, [pc, #12]	; (8009d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
	}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	2000078c 	.word	0x2000078c

08009d2c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d36:	4b21      	ldr	r3, [pc, #132]	; (8009dbc <prvAddCurrentTaskToDelayedList+0x90>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d3c:	4b20      	ldr	r3, [pc, #128]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3304      	adds	r3, #4
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fd ffa2 	bl	8007c8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d4e:	d10a      	bne.n	8009d66 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d56:	4b1a      	ldr	r3, [pc, #104]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4819      	ldr	r0, [pc, #100]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d60:	f7fd ff37 	bl	8007bd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d64:	e026      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d6e:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d209      	bcs.n	8009d92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d7e:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f7fd ff45 	bl	8007c1a <vListInsert>
}
 8009d90:	e010      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d92:	4b0e      	ldr	r3, [pc, #56]	; (8009dcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7fd ff3b 	bl	8007c1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009da4:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d202      	bcs.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009dae:	4a08      	ldr	r2, [pc, #32]	; (8009dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	6013      	str	r3, [r2, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20000c64 	.word	0x20000c64
 8009dc0:	2000078c 	.word	0x2000078c
 8009dc4:	20000c4c 	.word	0x20000c4c
 8009dc8:	20000c1c 	.word	0x20000c1c
 8009dcc:	20000c18 	.word	0x20000c18
 8009dd0:	20000c80 	.word	0x20000c80

08009dd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	; 0x28
 8009dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009dde:	f000 fb0d 	bl	800a3fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009de2:	4b1d      	ldr	r3, [pc, #116]	; (8009e58 <xTimerCreateTimerTask+0x84>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d021      	beq.n	8009e2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009df2:	1d3a      	adds	r2, r7, #4
 8009df4:	f107 0108 	add.w	r1, r7, #8
 8009df8:	f107 030c 	add.w	r3, r7, #12
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fd fea1 	bl	8007b44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	9202      	str	r2, [sp, #8]
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	2332      	movs	r3, #50	; 0x32
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	2300      	movs	r3, #0
 8009e12:	460a      	mov	r2, r1
 8009e14:	4911      	ldr	r1, [pc, #68]	; (8009e5c <xTimerCreateTimerTask+0x88>)
 8009e16:	4812      	ldr	r0, [pc, #72]	; (8009e60 <xTimerCreateTimerTask+0x8c>)
 8009e18:	f7fe ffd2 	bl	8008dc0 <xTaskCreateStatic>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <xTimerCreateTimerTask+0x90>)
 8009e20:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e22:	4b10      	ldr	r3, [pc, #64]	; (8009e64 <xTimerCreateTimerTask+0x90>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10b      	bne.n	8009e4c <xTimerCreateTimerTask+0x78>
 8009e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e38:	b672      	cpsid	i
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	b662      	cpsie	i
 8009e48:	613b      	str	r3, [r7, #16]
 8009e4a:	e7fe      	b.n	8009e4a <xTimerCreateTimerTask+0x76>
	return xReturn;
 8009e4c:	697b      	ldr	r3, [r7, #20]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20000cbc 	.word	0x20000cbc
 8009e5c:	0800b79c 	.word	0x0800b79c
 8009e60:	08009fa1 	.word	0x08009fa1
 8009e64:	20000cc0 	.word	0x20000cc0

08009e68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08a      	sub	sp, #40	; 0x28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10b      	bne.n	8009e98 <xTimerGenericCommand+0x30>
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	b672      	cpsid	i
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	b662      	cpsie	i
 8009e94:	623b      	str	r3, [r7, #32]
 8009e96:	e7fe      	b.n	8009e96 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e98:	4b19      	ldr	r3, [pc, #100]	; (8009f00 <xTimerGenericCommand+0x98>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d02a      	beq.n	8009ef6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b05      	cmp	r3, #5
 8009eb0:	dc18      	bgt.n	8009ee4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009eb2:	f7ff fdad 	bl	8009a10 <xTaskGetSchedulerState>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d109      	bne.n	8009ed0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ebc:	4b10      	ldr	r3, [pc, #64]	; (8009f00 <xTimerGenericCommand+0x98>)
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	f107 0110 	add.w	r1, r7, #16
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec8:	f7fe f8c4 	bl	8008054 <xQueueGenericSend>
 8009ecc:	6278      	str	r0, [r7, #36]	; 0x24
 8009ece:	e012      	b.n	8009ef6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <xTimerGenericCommand+0x98>)
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	f107 0110 	add.w	r1, r7, #16
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2200      	movs	r2, #0
 8009edc:	f7fe f8ba 	bl	8008054 <xQueueGenericSend>
 8009ee0:	6278      	str	r0, [r7, #36]	; 0x24
 8009ee2:	e008      	b.n	8009ef6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ee4:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <xTimerGenericCommand+0x98>)
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	f107 0110 	add.w	r1, r7, #16
 8009eec:	2300      	movs	r3, #0
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	f7fe f9b2 	bl	8008258 <xQueueGenericSendFromISR>
 8009ef4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3728      	adds	r7, #40	; 0x28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20000cbc 	.word	0x20000cbc

08009f04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f0e:	4b23      	ldr	r3, [pc, #140]	; (8009f9c <prvProcessExpiredTimer+0x98>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fd feb5 	bl	8007c8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d023      	beq.n	8009f78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	18d1      	adds	r1, r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	6978      	ldr	r0, [r7, #20]
 8009f3e:	f000 f8d3 	bl	800a0e8 <prvInsertTimerInActiveList>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d020      	beq.n	8009f8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f48:	2300      	movs	r3, #0
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	2100      	movs	r1, #0
 8009f52:	6978      	ldr	r0, [r7, #20]
 8009f54:	f7ff ff88 	bl	8009e68 <xTimerGenericCommand>
 8009f58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d114      	bne.n	8009f8a <prvProcessExpiredTimer+0x86>
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	b672      	cpsid	i
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	b662      	cpsie	i
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	e7fe      	b.n	8009f76 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f7e:	f023 0301 	bic.w	r3, r3, #1
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	6978      	ldr	r0, [r7, #20]
 8009f90:	4798      	blx	r3
}
 8009f92:	bf00      	nop
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20000cb4 	.word	0x20000cb4

08009fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fa8:	f107 0308 	add.w	r3, r7, #8
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 f857 	bl	800a060 <prvGetNextExpireTime>
 8009fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f803 	bl	8009fc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fbe:	f000 f8d5 	bl	800a16c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fc2:	e7f1      	b.n	8009fa8 <prvTimerTask+0x8>

08009fc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fce:	f7ff f93b 	bl	8009248 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fd2:	f107 0308 	add.w	r3, r7, #8
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f866 	bl	800a0a8 <prvSampleTimeNow>
 8009fdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d130      	bne.n	800a046 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <prvProcessTimerOrBlockTask+0x3c>
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d806      	bhi.n	800a000 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ff2:	f7ff f937 	bl	8009264 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ff6:	68f9      	ldr	r1, [r7, #12]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff ff83 	bl	8009f04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ffe:	e024      	b.n	800a04a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a006:	4b13      	ldr	r3, [pc, #76]	; (800a054 <prvProcessTimerOrBlockTask+0x90>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <prvProcessTimerOrBlockTask+0x50>
 800a010:	2301      	movs	r3, #1
 800a012:	e000      	b.n	800a016 <prvProcessTimerOrBlockTask+0x52>
 800a014:	2300      	movs	r3, #0
 800a016:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a018:	4b0f      	ldr	r3, [pc, #60]	; (800a058 <prvProcessTimerOrBlockTask+0x94>)
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	4619      	mov	r1, r3
 800a026:	f7fe fe97 	bl	8008d58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a02a:	f7ff f91b 	bl	8009264 <xTaskResumeAll>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a034:	4b09      	ldr	r3, [pc, #36]	; (800a05c <prvProcessTimerOrBlockTask+0x98>)
 800a036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	f3bf 8f6f 	isb	sy
}
 800a044:	e001      	b.n	800a04a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a046:	f7ff f90d 	bl	8009264 <xTaskResumeAll>
}
 800a04a:	bf00      	nop
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20000cb8 	.word	0x20000cb8
 800a058:	20000cbc 	.word	0x20000cbc
 800a05c:	e000ed04 	.word	0xe000ed04

0800a060 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a068:	4b0e      	ldr	r3, [pc, #56]	; (800a0a4 <prvGetNextExpireTime+0x44>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <prvGetNextExpireTime+0x16>
 800a072:	2201      	movs	r2, #1
 800a074:	e000      	b.n	800a078 <prvGetNextExpireTime+0x18>
 800a076:	2200      	movs	r2, #0
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d105      	bne.n	800a090 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a084:	4b07      	ldr	r3, [pc, #28]	; (800a0a4 <prvGetNextExpireTime+0x44>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	e001      	b.n	800a094 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a090:	2300      	movs	r3, #0
 800a092:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a094:	68fb      	ldr	r3, [r7, #12]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	20000cb4 	.word	0x20000cb4

0800a0a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0b0:	f7ff f976 	bl	80093a0 <xTaskGetTickCount>
 800a0b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0b6:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <prvSampleTimeNow+0x3c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d205      	bcs.n	800a0cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0c0:	f000 f936 	bl	800a330 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	e002      	b.n	800a0d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0d2:	4a04      	ldr	r2, [pc, #16]	; (800a0e4 <prvSampleTimeNow+0x3c>)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20000cc4 	.word	0x20000cc4

0800a0e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d812      	bhi.n	800a134 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	1ad2      	subs	r2, r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d302      	bcc.n	800a122 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e01b      	b.n	800a15a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a122:	4b10      	ldr	r3, [pc, #64]	; (800a164 <prvInsertTimerInActiveList+0x7c>)
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3304      	adds	r3, #4
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f7fd fd74 	bl	8007c1a <vListInsert>
 800a132:	e012      	b.n	800a15a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d206      	bcs.n	800a14a <prvInsertTimerInActiveList+0x62>
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d302      	bcc.n	800a14a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a144:	2301      	movs	r3, #1
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	e007      	b.n	800a15a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a14a:	4b07      	ldr	r3, [pc, #28]	; (800a168 <prvInsertTimerInActiveList+0x80>)
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3304      	adds	r3, #4
 800a152:	4619      	mov	r1, r3
 800a154:	4610      	mov	r0, r2
 800a156:	f7fd fd60 	bl	8007c1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a15a:	697b      	ldr	r3, [r7, #20]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20000cb8 	.word	0x20000cb8
 800a168:	20000cb4 	.word	0x20000cb4

0800a16c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08e      	sub	sp, #56	; 0x38
 800a170:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a172:	e0cc      	b.n	800a30e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	da19      	bge.n	800a1ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a17a:	1d3b      	adds	r3, r7, #4
 800a17c:	3304      	adds	r3, #4
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10b      	bne.n	800a19e <prvProcessReceivedCommands+0x32>
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	b672      	cpsid	i
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	b662      	cpsie	i
 800a19a:	61fb      	str	r3, [r7, #28]
 800a19c:	e7fe      	b.n	800a19c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a4:	6850      	ldr	r0, [r2, #4]
 800a1a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a8:	6892      	ldr	r2, [r2, #8]
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f2c0 80ab 	blt.w	800a30c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fd fd60 	bl	8007c8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1cc:	463b      	mov	r3, r7
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7ff ff6a 	bl	800a0a8 <prvSampleTimeNow>
 800a1d4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b09      	cmp	r3, #9
 800a1da:	f200 8098 	bhi.w	800a30e <prvProcessReceivedCommands+0x1a2>
 800a1de:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <prvProcessReceivedCommands+0x78>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a20d 	.word	0x0800a20d
 800a1e8:	0800a20d 	.word	0x0800a20d
 800a1ec:	0800a20d 	.word	0x0800a20d
 800a1f0:	0800a283 	.word	0x0800a283
 800a1f4:	0800a297 	.word	0x0800a297
 800a1f8:	0800a2e3 	.word	0x0800a2e3
 800a1fc:	0800a20d 	.word	0x0800a20d
 800a200:	0800a20d 	.word	0x0800a20d
 800a204:	0800a283 	.word	0x0800a283
 800a208:	0800a297 	.word	0x0800a297
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a212:	f043 0301 	orr.w	r3, r3, #1
 800a216:	b2da      	uxtb	r2, r3
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	18d1      	adds	r1, r2, r3
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a22c:	f7ff ff5c 	bl	800a0e8 <prvInsertTimerInActiveList>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d06b      	beq.n	800a30e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a23c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a244:	f003 0304 	and.w	r3, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d060      	beq.n	800a30e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	441a      	add	r2, r3
 800a254:	2300      	movs	r3, #0
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	2300      	movs	r3, #0
 800a25a:	2100      	movs	r1, #0
 800a25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a25e:	f7ff fe03 	bl	8009e68 <xTimerGenericCommand>
 800a262:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d151      	bne.n	800a30e <prvProcessReceivedCommands+0x1a2>
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	b672      	cpsid	i
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	b662      	cpsie	i
 800a27e:	61bb      	str	r3, [r7, #24]
 800a280:	e7fe      	b.n	800a280 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a288:	f023 0301 	bic.w	r3, r3, #1
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a294:	e03b      	b.n	800a30e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a29c:	f043 0301 	orr.w	r3, r3, #1
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10b      	bne.n	800a2ce <prvProcessReceivedCommands+0x162>
 800a2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ba:	b672      	cpsid	i
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	b662      	cpsie	i
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	e7fe      	b.n	800a2cc <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	699a      	ldr	r2, [r3, #24]
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	18d1      	adds	r1, r2, r3
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2dc:	f7ff ff04 	bl	800a0e8 <prvInsertTimerInActiveList>
					break;
 800a2e0:	e015      	b.n	800a30e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d103      	bne.n	800a2f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2f2:	f000 fbb3 	bl	800aa5c <vPortFree>
 800a2f6:	e00a      	b.n	800a30e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2fe:	f023 0301 	bic.w	r3, r3, #1
 800a302:	b2da      	uxtb	r2, r3
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a30a:	e000      	b.n	800a30e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a30c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a30e:	4b07      	ldr	r3, [pc, #28]	; (800a32c <prvProcessReceivedCommands+0x1c0>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	1d39      	adds	r1, r7, #4
 800a314:	2200      	movs	r2, #0
 800a316:	4618      	mov	r0, r3
 800a318:	f7fe f8cc 	bl	80084b4 <xQueueReceive>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f47f af28 	bne.w	800a174 <prvProcessReceivedCommands+0x8>
	}
}
 800a324:	bf00      	nop
 800a326:	3730      	adds	r7, #48	; 0x30
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20000cbc 	.word	0x20000cbc

0800a330 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a336:	e049      	b.n	800a3cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a338:	4b2e      	ldr	r3, [pc, #184]	; (800a3f4 <prvSwitchTimerLists+0xc4>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a342:	4b2c      	ldr	r3, [pc, #176]	; (800a3f4 <prvSwitchTimerLists+0xc4>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3304      	adds	r3, #4
 800a350:	4618      	mov	r0, r3
 800a352:	f7fd fc9b 	bl	8007c8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a364:	f003 0304 	and.w	r3, r3, #4
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d02f      	beq.n	800a3cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	4413      	add	r3, r2
 800a374:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d90e      	bls.n	800a39c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a38a:	4b1a      	ldr	r3, [pc, #104]	; (800a3f4 <prvSwitchTimerLists+0xc4>)
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3304      	adds	r3, #4
 800a392:	4619      	mov	r1, r3
 800a394:	4610      	mov	r0, r2
 800a396:	f7fd fc40 	bl	8007c1a <vListInsert>
 800a39a:	e017      	b.n	800a3cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a39c:	2300      	movs	r3, #0
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f7ff fd5e 	bl	8009e68 <xTimerGenericCommand>
 800a3ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10b      	bne.n	800a3cc <prvSwitchTimerLists+0x9c>
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	b672      	cpsid	i
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	b662      	cpsie	i
 800a3c8:	603b      	str	r3, [r7, #0]
 800a3ca:	e7fe      	b.n	800a3ca <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3cc:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <prvSwitchTimerLists+0xc4>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1b0      	bne.n	800a338 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3d6:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <prvSwitchTimerLists+0xc4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3dc:	4b06      	ldr	r3, [pc, #24]	; (800a3f8 <prvSwitchTimerLists+0xc8>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a04      	ldr	r2, [pc, #16]	; (800a3f4 <prvSwitchTimerLists+0xc4>)
 800a3e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3e4:	4a04      	ldr	r2, [pc, #16]	; (800a3f8 <prvSwitchTimerLists+0xc8>)
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	6013      	str	r3, [r2, #0]
}
 800a3ea:	bf00      	nop
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20000cb4 	.word	0x20000cb4
 800a3f8:	20000cb8 	.word	0x20000cb8

0800a3fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a402:	f000 f941 	bl	800a688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a406:	4b15      	ldr	r3, [pc, #84]	; (800a45c <prvCheckForValidListAndQueue+0x60>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d120      	bne.n	800a450 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a40e:	4814      	ldr	r0, [pc, #80]	; (800a460 <prvCheckForValidListAndQueue+0x64>)
 800a410:	f7fd fbb2 	bl	8007b78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a414:	4813      	ldr	r0, [pc, #76]	; (800a464 <prvCheckForValidListAndQueue+0x68>)
 800a416:	f7fd fbaf 	bl	8007b78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a41a:	4b13      	ldr	r3, [pc, #76]	; (800a468 <prvCheckForValidListAndQueue+0x6c>)
 800a41c:	4a10      	ldr	r2, [pc, #64]	; (800a460 <prvCheckForValidListAndQueue+0x64>)
 800a41e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a420:	4b12      	ldr	r3, [pc, #72]	; (800a46c <prvCheckForValidListAndQueue+0x70>)
 800a422:	4a10      	ldr	r2, [pc, #64]	; (800a464 <prvCheckForValidListAndQueue+0x68>)
 800a424:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a426:	2300      	movs	r3, #0
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	4b11      	ldr	r3, [pc, #68]	; (800a470 <prvCheckForValidListAndQueue+0x74>)
 800a42c:	4a11      	ldr	r2, [pc, #68]	; (800a474 <prvCheckForValidListAndQueue+0x78>)
 800a42e:	2110      	movs	r1, #16
 800a430:	200a      	movs	r0, #10
 800a432:	f7fd fcbf 	bl	8007db4 <xQueueGenericCreateStatic>
 800a436:	4602      	mov	r2, r0
 800a438:	4b08      	ldr	r3, [pc, #32]	; (800a45c <prvCheckForValidListAndQueue+0x60>)
 800a43a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a43c:	4b07      	ldr	r3, [pc, #28]	; (800a45c <prvCheckForValidListAndQueue+0x60>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d005      	beq.n	800a450 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a444:	4b05      	ldr	r3, [pc, #20]	; (800a45c <prvCheckForValidListAndQueue+0x60>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	490b      	ldr	r1, [pc, #44]	; (800a478 <prvCheckForValidListAndQueue+0x7c>)
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fc32 	bl	8008cb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a450:	f000 f94c 	bl	800a6ec <vPortExitCritical>
}
 800a454:	bf00      	nop
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20000cbc 	.word	0x20000cbc
 800a460:	20000c8c 	.word	0x20000c8c
 800a464:	20000ca0 	.word	0x20000ca0
 800a468:	20000cb4 	.word	0x20000cb4
 800a46c:	20000cb8 	.word	0x20000cb8
 800a470:	20000d68 	.word	0x20000d68
 800a474:	20000cc8 	.word	0x20000cc8
 800a478:	0800b7a4 	.word	0x0800b7a4

0800a47c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3b04      	subs	r3, #4
 800a48c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3b04      	subs	r3, #4
 800a49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f023 0201 	bic.w	r2, r3, #1
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3b04      	subs	r3, #4
 800a4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4ac:	4a0c      	ldr	r2, [pc, #48]	; (800a4e0 <pxPortInitialiseStack+0x64>)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3b14      	subs	r3, #20
 800a4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3b04      	subs	r3, #4
 800a4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f06f 0202 	mvn.w	r2, #2
 800a4ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	3b20      	subs	r3, #32
 800a4d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	0800a4e5 	.word	0x0800a4e5

0800a4e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <prvTaskExitError+0x58>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f6:	d00b      	beq.n	800a510 <prvTaskExitError+0x2c>
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	b672      	cpsid	i
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	b662      	cpsie	i
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	e7fe      	b.n	800a50e <prvTaskExitError+0x2a>
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	b672      	cpsid	i
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	b662      	cpsie	i
 800a524:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a526:	bf00      	nop
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d0fc      	beq.n	800a528 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a52e:	bf00      	nop
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	2000003c 	.word	0x2000003c

0800a540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a540:	4b07      	ldr	r3, [pc, #28]	; (800a560 <pxCurrentTCBConst2>)
 800a542:	6819      	ldr	r1, [r3, #0]
 800a544:	6808      	ldr	r0, [r1, #0]
 800a546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54a:	f380 8809 	msr	PSP, r0
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f04f 0000 	mov.w	r0, #0
 800a556:	f380 8811 	msr	BASEPRI, r0
 800a55a:	4770      	bx	lr
 800a55c:	f3af 8000 	nop.w

0800a560 <pxCurrentTCBConst2>:
 800a560:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop

0800a568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a568:	4808      	ldr	r0, [pc, #32]	; (800a58c <prvPortStartFirstTask+0x24>)
 800a56a:	6800      	ldr	r0, [r0, #0]
 800a56c:	6800      	ldr	r0, [r0, #0]
 800a56e:	f380 8808 	msr	MSP, r0
 800a572:	f04f 0000 	mov.w	r0, #0
 800a576:	f380 8814 	msr	CONTROL, r0
 800a57a:	b662      	cpsie	i
 800a57c:	b661      	cpsie	f
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	df00      	svc	0
 800a588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a58a:	bf00      	nop
 800a58c:	e000ed08 	.word	0xe000ed08

0800a590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a596:	4b36      	ldr	r3, [pc, #216]	; (800a670 <xPortStartScheduler+0xe0>)
 800a598:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	22ff      	movs	r2, #255	; 0xff
 800a5a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	4b2e      	ldr	r3, [pc, #184]	; (800a674 <xPortStartScheduler+0xe4>)
 800a5bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5be:	4b2e      	ldr	r3, [pc, #184]	; (800a678 <xPortStartScheduler+0xe8>)
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5c4:	e009      	b.n	800a5da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a5c6:	4b2c      	ldr	r3, [pc, #176]	; (800a678 <xPortStartScheduler+0xe8>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	4a2a      	ldr	r2, [pc, #168]	; (800a678 <xPortStartScheduler+0xe8>)
 800a5ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5d0:	78fb      	ldrb	r3, [r7, #3]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	005b      	lsls	r3, r3, #1
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5da:	78fb      	ldrb	r3, [r7, #3]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5e2:	2b80      	cmp	r3, #128	; 0x80
 800a5e4:	d0ef      	beq.n	800a5c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5e6:	4b24      	ldr	r3, [pc, #144]	; (800a678 <xPortStartScheduler+0xe8>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f1c3 0307 	rsb	r3, r3, #7
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	d00b      	beq.n	800a60a <xPortStartScheduler+0x7a>
 800a5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f6:	b672      	cpsid	i
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	b662      	cpsie	i
 800a606:	60bb      	str	r3, [r7, #8]
 800a608:	e7fe      	b.n	800a608 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a60a:	4b1b      	ldr	r3, [pc, #108]	; (800a678 <xPortStartScheduler+0xe8>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	021b      	lsls	r3, r3, #8
 800a610:	4a19      	ldr	r2, [pc, #100]	; (800a678 <xPortStartScheduler+0xe8>)
 800a612:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a614:	4b18      	ldr	r3, [pc, #96]	; (800a678 <xPortStartScheduler+0xe8>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a61c:	4a16      	ldr	r2, [pc, #88]	; (800a678 <xPortStartScheduler+0xe8>)
 800a61e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	b2da      	uxtb	r2, r3
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a628:	4b14      	ldr	r3, [pc, #80]	; (800a67c <xPortStartScheduler+0xec>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a13      	ldr	r2, [pc, #76]	; (800a67c <xPortStartScheduler+0xec>)
 800a62e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a632:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a634:	4b11      	ldr	r3, [pc, #68]	; (800a67c <xPortStartScheduler+0xec>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a10      	ldr	r2, [pc, #64]	; (800a67c <xPortStartScheduler+0xec>)
 800a63a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a63e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a640:	f000 f8d4 	bl	800a7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a644:	4b0e      	ldr	r3, [pc, #56]	; (800a680 <xPortStartScheduler+0xf0>)
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a64a:	f000 f8f3 	bl	800a834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a64e:	4b0d      	ldr	r3, [pc, #52]	; (800a684 <xPortStartScheduler+0xf4>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a0c      	ldr	r2, [pc, #48]	; (800a684 <xPortStartScheduler+0xf4>)
 800a654:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a658:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a65a:	f7ff ff85 	bl	800a568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a65e:	f7fe ff69 	bl	8009534 <vTaskSwitchContext>
	prvTaskExitError();
 800a662:	f7ff ff3f 	bl	800a4e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	e000e400 	.word	0xe000e400
 800a674:	20000db8 	.word	0x20000db8
 800a678:	20000dbc 	.word	0x20000dbc
 800a67c:	e000ed20 	.word	0xe000ed20
 800a680:	2000003c 	.word	0x2000003c
 800a684:	e000ef34 	.word	0xe000ef34

0800a688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	b672      	cpsid	i
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	b662      	cpsie	i
 800a6a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6a4:	4b0f      	ldr	r3, [pc, #60]	; (800a6e4 <vPortEnterCritical+0x5c>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	4a0e      	ldr	r2, [pc, #56]	; (800a6e4 <vPortEnterCritical+0x5c>)
 800a6ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <vPortEnterCritical+0x5c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d110      	bne.n	800a6d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6b6:	4b0c      	ldr	r3, [pc, #48]	; (800a6e8 <vPortEnterCritical+0x60>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00b      	beq.n	800a6d8 <vPortEnterCritical+0x50>
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	b672      	cpsid	i
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	b662      	cpsie	i
 800a6d4:	603b      	str	r3, [r7, #0]
 800a6d6:	e7fe      	b.n	800a6d6 <vPortEnterCritical+0x4e>
	}
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	2000003c 	.word	0x2000003c
 800a6e8:	e000ed04 	.word	0xe000ed04

0800a6ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6f2:	4b12      	ldr	r3, [pc, #72]	; (800a73c <vPortExitCritical+0x50>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10b      	bne.n	800a712 <vPortExitCritical+0x26>
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	b672      	cpsid	i
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	b662      	cpsie	i
 800a70e:	607b      	str	r3, [r7, #4]
 800a710:	e7fe      	b.n	800a710 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800a712:	4b0a      	ldr	r3, [pc, #40]	; (800a73c <vPortExitCritical+0x50>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3b01      	subs	r3, #1
 800a718:	4a08      	ldr	r2, [pc, #32]	; (800a73c <vPortExitCritical+0x50>)
 800a71a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a71c:	4b07      	ldr	r3, [pc, #28]	; (800a73c <vPortExitCritical+0x50>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <vPortExitCritical+0x42>
 800a724:	2300      	movs	r3, #0
 800a726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	2000003c 	.word	0x2000003c

0800a740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a740:	f3ef 8009 	mrs	r0, PSP
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <pxCurrentTCBConst>)
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	f01e 0f10 	tst.w	lr, #16
 800a750:	bf08      	it	eq
 800a752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75a:	6010      	str	r0, [r2, #0]
 800a75c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a760:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a764:	b672      	cpsid	i
 800a766:	f380 8811 	msr	BASEPRI, r0
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	b662      	cpsie	i
 800a774:	f7fe fede 	bl	8009534 <vTaskSwitchContext>
 800a778:	f04f 0000 	mov.w	r0, #0
 800a77c:	f380 8811 	msr	BASEPRI, r0
 800a780:	bc09      	pop	{r0, r3}
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	6808      	ldr	r0, [r1, #0]
 800a786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78a:	f01e 0f10 	tst.w	lr, #16
 800a78e:	bf08      	it	eq
 800a790:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a794:	f380 8809 	msr	PSP, r0
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop

0800a7a0 <pxCurrentTCBConst>:
 800a7a0:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	b672      	cpsid	i
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	b662      	cpsie	i
 800a7c2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7c4:	f7fe fdfc 	bl	80093c0 <xTaskIncrementTick>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7ce:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <SysTick_Handler+0x40>)
 800a7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <vPortSetupTimerInterrupt+0x34>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <vPortSetupTimerInterrupt+0x38>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	; (800a828 <vPortSetupTimerInterrupt+0x3c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a0a      	ldr	r2, [pc, #40]	; (800a82c <vPortSetupTimerInterrupt+0x40>)
 800a802:	fba2 2303 	umull	r2, r3, r2, r3
 800a806:	099b      	lsrs	r3, r3, #6
 800a808:	4a09      	ldr	r2, [pc, #36]	; (800a830 <vPortSetupTimerInterrupt+0x44>)
 800a80a:	3b01      	subs	r3, #1
 800a80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a80e:	4b04      	ldr	r3, [pc, #16]	; (800a820 <vPortSetupTimerInterrupt+0x34>)
 800a810:	2207      	movs	r2, #7
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	bf00      	nop
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	e000e010 	.word	0xe000e010
 800a824:	e000e018 	.word	0xe000e018
 800a828:	20000030 	.word	0x20000030
 800a82c:	10624dd3 	.word	0x10624dd3
 800a830:	e000e014 	.word	0xe000e014

0800a834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a844 <vPortEnableVFP+0x10>
 800a838:	6801      	ldr	r1, [r0, #0]
 800a83a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a83e:	6001      	str	r1, [r0, #0]
 800a840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a842:	bf00      	nop
 800a844:	e000ed88 	.word	0xe000ed88

0800a848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a84e:	f3ef 8305 	mrs	r3, IPSR
 800a852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b0f      	cmp	r3, #15
 800a858:	d915      	bls.n	800a886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a85a:	4a18      	ldr	r2, [pc, #96]	; (800a8bc <vPortValidateInterruptPriority+0x74>)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a864:	4b16      	ldr	r3, [pc, #88]	; (800a8c0 <vPortValidateInterruptPriority+0x78>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	7afa      	ldrb	r2, [r7, #11]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d20b      	bcs.n	800a886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	b672      	cpsid	i
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	b662      	cpsie	i
 800a882:	607b      	str	r3, [r7, #4]
 800a884:	e7fe      	b.n	800a884 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a886:	4b0f      	ldr	r3, [pc, #60]	; (800a8c4 <vPortValidateInterruptPriority+0x7c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a88e:	4b0e      	ldr	r3, [pc, #56]	; (800a8c8 <vPortValidateInterruptPriority+0x80>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	429a      	cmp	r2, r3
 800a894:	d90b      	bls.n	800a8ae <vPortValidateInterruptPriority+0x66>
 800a896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89a:	b672      	cpsid	i
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	b662      	cpsie	i
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	e7fe      	b.n	800a8ac <vPortValidateInterruptPriority+0x64>
	}
 800a8ae:	bf00      	nop
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	e000e3f0 	.word	0xe000e3f0
 800a8c0:	20000db8 	.word	0x20000db8
 800a8c4:	e000ed0c 	.word	0xe000ed0c
 800a8c8:	20000dbc 	.word	0x20000dbc

0800a8cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08a      	sub	sp, #40	; 0x28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8d8:	f7fe fcb6 	bl	8009248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8dc:	4b5a      	ldr	r3, [pc, #360]	; (800aa48 <pvPortMalloc+0x17c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8e4:	f000 f916 	bl	800ab14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8e8:	4b58      	ldr	r3, [pc, #352]	; (800aa4c <pvPortMalloc+0x180>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f040 8090 	bne.w	800aa16 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d01e      	beq.n	800a93a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a8fc:	2208      	movs	r2, #8
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4413      	add	r3, r2
 800a902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f003 0307 	and.w	r3, r3, #7
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d015      	beq.n	800a93a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f023 0307 	bic.w	r3, r3, #7
 800a914:	3308      	adds	r3, #8
 800a916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f003 0307 	and.w	r3, r3, #7
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00b      	beq.n	800a93a <pvPortMalloc+0x6e>
 800a922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a926:	b672      	cpsid	i
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	b662      	cpsie	i
 800a936:	617b      	str	r3, [r7, #20]
 800a938:	e7fe      	b.n	800a938 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d06a      	beq.n	800aa16 <pvPortMalloc+0x14a>
 800a940:	4b43      	ldr	r3, [pc, #268]	; (800aa50 <pvPortMalloc+0x184>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	429a      	cmp	r2, r3
 800a948:	d865      	bhi.n	800aa16 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a94a:	4b42      	ldr	r3, [pc, #264]	; (800aa54 <pvPortMalloc+0x188>)
 800a94c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a94e:	4b41      	ldr	r3, [pc, #260]	; (800aa54 <pvPortMalloc+0x188>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a954:	e004      	b.n	800a960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	429a      	cmp	r2, r3
 800a968:	d903      	bls.n	800a972 <pvPortMalloc+0xa6>
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1f1      	bne.n	800a956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a972:	4b35      	ldr	r3, [pc, #212]	; (800aa48 <pvPortMalloc+0x17c>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a978:	429a      	cmp	r2, r3
 800a97a:	d04c      	beq.n	800aa16 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2208      	movs	r2, #8
 800a982:	4413      	add	r3, r2
 800a984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	1ad2      	subs	r2, r2, r3
 800a996:	2308      	movs	r3, #8
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d920      	bls.n	800a9e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	f003 0307 	and.w	r3, r3, #7
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <pvPortMalloc+0xfc>
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	b672      	cpsid	i
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	b662      	cpsie	i
 800a9c4:	613b      	str	r3, [r7, #16]
 800a9c6:	e7fe      	b.n	800a9c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9da:	69b8      	ldr	r0, [r7, #24]
 800a9dc:	f000 f8fc 	bl	800abd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9e0:	4b1b      	ldr	r3, [pc, #108]	; (800aa50 <pvPortMalloc+0x184>)
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	4a19      	ldr	r2, [pc, #100]	; (800aa50 <pvPortMalloc+0x184>)
 800a9ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9ee:	4b18      	ldr	r3, [pc, #96]	; (800aa50 <pvPortMalloc+0x184>)
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	4b19      	ldr	r3, [pc, #100]	; (800aa58 <pvPortMalloc+0x18c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d203      	bcs.n	800aa02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <pvPortMalloc+0x184>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a16      	ldr	r2, [pc, #88]	; (800aa58 <pvPortMalloc+0x18c>)
 800aa00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	4b11      	ldr	r3, [pc, #68]	; (800aa4c <pvPortMalloc+0x180>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	431a      	orrs	r2, r3
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	2200      	movs	r2, #0
 800aa14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa16:	f7fe fc25 	bl	8009264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	f003 0307 	and.w	r3, r3, #7
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <pvPortMalloc+0x170>
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	b672      	cpsid	i
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	b662      	cpsie	i
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e7fe      	b.n	800aa3a <pvPortMalloc+0x16e>
	return pvReturn;
 800aa3c:	69fb      	ldr	r3, [r7, #28]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3728      	adds	r7, #40	; 0x28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	200049c8 	.word	0x200049c8
 800aa4c:	200049d4 	.word	0x200049d4
 800aa50:	200049cc 	.word	0x200049cc
 800aa54:	200049c0 	.word	0x200049c0
 800aa58:	200049d0 	.word	0x200049d0

0800aa5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d04a      	beq.n	800ab04 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa6e:	2308      	movs	r3, #8
 800aa70:	425b      	negs	r3, r3
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	4413      	add	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	685a      	ldr	r2, [r3, #4]
 800aa80:	4b22      	ldr	r3, [pc, #136]	; (800ab0c <vPortFree+0xb0>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4013      	ands	r3, r2
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10b      	bne.n	800aaa2 <vPortFree+0x46>
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	b672      	cpsid	i
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	b662      	cpsie	i
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	e7fe      	b.n	800aaa0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00b      	beq.n	800aac2 <vPortFree+0x66>
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	b672      	cpsid	i
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	b662      	cpsie	i
 800aabe:	60bb      	str	r3, [r7, #8]
 800aac0:	e7fe      	b.n	800aac0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	4b11      	ldr	r3, [pc, #68]	; (800ab0c <vPortFree+0xb0>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4013      	ands	r3, r2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d019      	beq.n	800ab04 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d115      	bne.n	800ab04 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <vPortFree+0xb0>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	43db      	mvns	r3, r3
 800aae2:	401a      	ands	r2, r3
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aae8:	f7fe fbae 	bl	8009248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <vPortFree+0xb4>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	4a06      	ldr	r2, [pc, #24]	; (800ab10 <vPortFree+0xb4>)
 800aaf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aafa:	6938      	ldr	r0, [r7, #16]
 800aafc:	f000 f86c 	bl	800abd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ab00:	f7fe fbb0 	bl	8009264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab04:	bf00      	nop
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	200049d4 	.word	0x200049d4
 800ab10:	200049cc 	.word	0x200049cc

0800ab14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ab1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab20:	4b27      	ldr	r3, [pc, #156]	; (800abc0 <prvHeapInit+0xac>)
 800ab22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f003 0307 	and.w	r3, r3, #7
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00c      	beq.n	800ab48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3307      	adds	r3, #7
 800ab32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f023 0307 	bic.w	r3, r3, #7
 800ab3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	4a1f      	ldr	r2, [pc, #124]	; (800abc0 <prvHeapInit+0xac>)
 800ab44:	4413      	add	r3, r2
 800ab46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab4c:	4a1d      	ldr	r2, [pc, #116]	; (800abc4 <prvHeapInit+0xb0>)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab52:	4b1c      	ldr	r3, [pc, #112]	; (800abc4 <prvHeapInit+0xb0>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab60:	2208      	movs	r2, #8
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	1a9b      	subs	r3, r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f023 0307 	bic.w	r3, r3, #7
 800ab6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4a15      	ldr	r2, [pc, #84]	; (800abc8 <prvHeapInit+0xb4>)
 800ab74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab76:	4b14      	ldr	r3, [pc, #80]	; (800abc8 <prvHeapInit+0xb4>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab7e:	4b12      	ldr	r3, [pc, #72]	; (800abc8 <prvHeapInit+0xb4>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	1ad2      	subs	r2, r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab94:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <prvHeapInit+0xb4>)
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	4a0a      	ldr	r2, [pc, #40]	; (800abcc <prvHeapInit+0xb8>)
 800aba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	4a09      	ldr	r2, [pc, #36]	; (800abd0 <prvHeapInit+0xbc>)
 800abaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abac:	4b09      	ldr	r3, [pc, #36]	; (800abd4 <prvHeapInit+0xc0>)
 800abae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800abb2:	601a      	str	r2, [r3, #0]
}
 800abb4:	bf00      	nop
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	20000dc0 	.word	0x20000dc0
 800abc4:	200049c0 	.word	0x200049c0
 800abc8:	200049c8 	.word	0x200049c8
 800abcc:	200049d0 	.word	0x200049d0
 800abd0:	200049cc 	.word	0x200049cc
 800abd4:	200049d4 	.word	0x200049d4

0800abd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abe0:	4b28      	ldr	r3, [pc, #160]	; (800ac84 <prvInsertBlockIntoFreeList+0xac>)
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	e002      	b.n	800abec <prvInsertBlockIntoFreeList+0x14>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d8f7      	bhi.n	800abe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	4413      	add	r3, r2
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d108      	bne.n	800ac1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	441a      	add	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	441a      	add	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d118      	bne.n	800ac60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	4b15      	ldr	r3, [pc, #84]	; (800ac88 <prvInsertBlockIntoFreeList+0xb0>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d00d      	beq.n	800ac56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	441a      	add	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	e008      	b.n	800ac68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac56:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <prvInsertBlockIntoFreeList+0xb0>)
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	e003      	b.n	800ac68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d002      	beq.n	800ac76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac76:	bf00      	nop
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	200049c0 	.word	0x200049c0
 800ac88:	200049c8 	.word	0x200049c8

0800ac8c <__errno>:
 800ac8c:	4b01      	ldr	r3, [pc, #4]	; (800ac94 <__errno+0x8>)
 800ac8e:	6818      	ldr	r0, [r3, #0]
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20000040 	.word	0x20000040

0800ac98 <__libc_init_array>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	4e0d      	ldr	r6, [pc, #52]	; (800acd0 <__libc_init_array+0x38>)
 800ac9c:	4c0d      	ldr	r4, [pc, #52]	; (800acd4 <__libc_init_array+0x3c>)
 800ac9e:	1ba4      	subs	r4, r4, r6
 800aca0:	10a4      	asrs	r4, r4, #2
 800aca2:	2500      	movs	r5, #0
 800aca4:	42a5      	cmp	r5, r4
 800aca6:	d109      	bne.n	800acbc <__libc_init_array+0x24>
 800aca8:	4e0b      	ldr	r6, [pc, #44]	; (800acd8 <__libc_init_array+0x40>)
 800acaa:	4c0c      	ldr	r4, [pc, #48]	; (800acdc <__libc_init_array+0x44>)
 800acac:	f000 fc30 	bl	800b510 <_init>
 800acb0:	1ba4      	subs	r4, r4, r6
 800acb2:	10a4      	asrs	r4, r4, #2
 800acb4:	2500      	movs	r5, #0
 800acb6:	42a5      	cmp	r5, r4
 800acb8:	d105      	bne.n	800acc6 <__libc_init_array+0x2e>
 800acba:	bd70      	pop	{r4, r5, r6, pc}
 800acbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acc0:	4798      	blx	r3
 800acc2:	3501      	adds	r5, #1
 800acc4:	e7ee      	b.n	800aca4 <__libc_init_array+0xc>
 800acc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acca:	4798      	blx	r3
 800accc:	3501      	adds	r5, #1
 800acce:	e7f2      	b.n	800acb6 <__libc_init_array+0x1e>
 800acd0:	0800b850 	.word	0x0800b850
 800acd4:	0800b850 	.word	0x0800b850
 800acd8:	0800b850 	.word	0x0800b850
 800acdc:	0800b854 	.word	0x0800b854

0800ace0 <malloc>:
 800ace0:	4b02      	ldr	r3, [pc, #8]	; (800acec <malloc+0xc>)
 800ace2:	4601      	mov	r1, r0
 800ace4:	6818      	ldr	r0, [r3, #0]
 800ace6:	f000 b865 	b.w	800adb4 <_malloc_r>
 800acea:	bf00      	nop
 800acec:	20000040 	.word	0x20000040

0800acf0 <memcpy>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	1e43      	subs	r3, r0, #1
 800acf4:	440a      	add	r2, r1
 800acf6:	4291      	cmp	r1, r2
 800acf8:	d100      	bne.n	800acfc <memcpy+0xc>
 800acfa:	bd10      	pop	{r4, pc}
 800acfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad04:	e7f7      	b.n	800acf6 <memcpy+0x6>

0800ad06 <memset>:
 800ad06:	4402      	add	r2, r0
 800ad08:	4603      	mov	r3, r0
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d100      	bne.n	800ad10 <memset+0xa>
 800ad0e:	4770      	bx	lr
 800ad10:	f803 1b01 	strb.w	r1, [r3], #1
 800ad14:	e7f9      	b.n	800ad0a <memset+0x4>
	...

0800ad18 <_free_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	2900      	cmp	r1, #0
 800ad1e:	d045      	beq.n	800adac <_free_r+0x94>
 800ad20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad24:	1f0c      	subs	r4, r1, #4
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bfb8      	it	lt
 800ad2a:	18e4      	addlt	r4, r4, r3
 800ad2c:	f000 f8cc 	bl	800aec8 <__malloc_lock>
 800ad30:	4a1f      	ldr	r2, [pc, #124]	; (800adb0 <_free_r+0x98>)
 800ad32:	6813      	ldr	r3, [r2, #0]
 800ad34:	4610      	mov	r0, r2
 800ad36:	b933      	cbnz	r3, 800ad46 <_free_r+0x2e>
 800ad38:	6063      	str	r3, [r4, #4]
 800ad3a:	6014      	str	r4, [r2, #0]
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad42:	f000 b8c2 	b.w	800aeca <__malloc_unlock>
 800ad46:	42a3      	cmp	r3, r4
 800ad48:	d90c      	bls.n	800ad64 <_free_r+0x4c>
 800ad4a:	6821      	ldr	r1, [r4, #0]
 800ad4c:	1862      	adds	r2, r4, r1
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	bf04      	itt	eq
 800ad52:	681a      	ldreq	r2, [r3, #0]
 800ad54:	685b      	ldreq	r3, [r3, #4]
 800ad56:	6063      	str	r3, [r4, #4]
 800ad58:	bf04      	itt	eq
 800ad5a:	1852      	addeq	r2, r2, r1
 800ad5c:	6022      	streq	r2, [r4, #0]
 800ad5e:	6004      	str	r4, [r0, #0]
 800ad60:	e7ec      	b.n	800ad3c <_free_r+0x24>
 800ad62:	4613      	mov	r3, r2
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	b10a      	cbz	r2, 800ad6c <_free_r+0x54>
 800ad68:	42a2      	cmp	r2, r4
 800ad6a:	d9fa      	bls.n	800ad62 <_free_r+0x4a>
 800ad6c:	6819      	ldr	r1, [r3, #0]
 800ad6e:	1858      	adds	r0, r3, r1
 800ad70:	42a0      	cmp	r0, r4
 800ad72:	d10b      	bne.n	800ad8c <_free_r+0x74>
 800ad74:	6820      	ldr	r0, [r4, #0]
 800ad76:	4401      	add	r1, r0
 800ad78:	1858      	adds	r0, r3, r1
 800ad7a:	4282      	cmp	r2, r0
 800ad7c:	6019      	str	r1, [r3, #0]
 800ad7e:	d1dd      	bne.n	800ad3c <_free_r+0x24>
 800ad80:	6810      	ldr	r0, [r2, #0]
 800ad82:	6852      	ldr	r2, [r2, #4]
 800ad84:	605a      	str	r2, [r3, #4]
 800ad86:	4401      	add	r1, r0
 800ad88:	6019      	str	r1, [r3, #0]
 800ad8a:	e7d7      	b.n	800ad3c <_free_r+0x24>
 800ad8c:	d902      	bls.n	800ad94 <_free_r+0x7c>
 800ad8e:	230c      	movs	r3, #12
 800ad90:	602b      	str	r3, [r5, #0]
 800ad92:	e7d3      	b.n	800ad3c <_free_r+0x24>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	1821      	adds	r1, r4, r0
 800ad98:	428a      	cmp	r2, r1
 800ad9a:	bf04      	itt	eq
 800ad9c:	6811      	ldreq	r1, [r2, #0]
 800ad9e:	6852      	ldreq	r2, [r2, #4]
 800ada0:	6062      	str	r2, [r4, #4]
 800ada2:	bf04      	itt	eq
 800ada4:	1809      	addeq	r1, r1, r0
 800ada6:	6021      	streq	r1, [r4, #0]
 800ada8:	605c      	str	r4, [r3, #4]
 800adaa:	e7c7      	b.n	800ad3c <_free_r+0x24>
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	bf00      	nop
 800adb0:	200049d8 	.word	0x200049d8

0800adb4 <_malloc_r>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	1ccd      	adds	r5, r1, #3
 800adb8:	f025 0503 	bic.w	r5, r5, #3
 800adbc:	3508      	adds	r5, #8
 800adbe:	2d0c      	cmp	r5, #12
 800adc0:	bf38      	it	cc
 800adc2:	250c      	movcc	r5, #12
 800adc4:	2d00      	cmp	r5, #0
 800adc6:	4606      	mov	r6, r0
 800adc8:	db01      	blt.n	800adce <_malloc_r+0x1a>
 800adca:	42a9      	cmp	r1, r5
 800adcc:	d903      	bls.n	800add6 <_malloc_r+0x22>
 800adce:	230c      	movs	r3, #12
 800add0:	6033      	str	r3, [r6, #0]
 800add2:	2000      	movs	r0, #0
 800add4:	bd70      	pop	{r4, r5, r6, pc}
 800add6:	f000 f877 	bl	800aec8 <__malloc_lock>
 800adda:	4a21      	ldr	r2, [pc, #132]	; (800ae60 <_malloc_r+0xac>)
 800addc:	6814      	ldr	r4, [r2, #0]
 800adde:	4621      	mov	r1, r4
 800ade0:	b991      	cbnz	r1, 800ae08 <_malloc_r+0x54>
 800ade2:	4c20      	ldr	r4, [pc, #128]	; (800ae64 <_malloc_r+0xb0>)
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	b91b      	cbnz	r3, 800adf0 <_malloc_r+0x3c>
 800ade8:	4630      	mov	r0, r6
 800adea:	f000 f83d 	bl	800ae68 <_sbrk_r>
 800adee:	6020      	str	r0, [r4, #0]
 800adf0:	4629      	mov	r1, r5
 800adf2:	4630      	mov	r0, r6
 800adf4:	f000 f838 	bl	800ae68 <_sbrk_r>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d124      	bne.n	800ae46 <_malloc_r+0x92>
 800adfc:	230c      	movs	r3, #12
 800adfe:	6033      	str	r3, [r6, #0]
 800ae00:	4630      	mov	r0, r6
 800ae02:	f000 f862 	bl	800aeca <__malloc_unlock>
 800ae06:	e7e4      	b.n	800add2 <_malloc_r+0x1e>
 800ae08:	680b      	ldr	r3, [r1, #0]
 800ae0a:	1b5b      	subs	r3, r3, r5
 800ae0c:	d418      	bmi.n	800ae40 <_malloc_r+0x8c>
 800ae0e:	2b0b      	cmp	r3, #11
 800ae10:	d90f      	bls.n	800ae32 <_malloc_r+0x7e>
 800ae12:	600b      	str	r3, [r1, #0]
 800ae14:	50cd      	str	r5, [r1, r3]
 800ae16:	18cc      	adds	r4, r1, r3
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f000 f856 	bl	800aeca <__malloc_unlock>
 800ae1e:	f104 000b 	add.w	r0, r4, #11
 800ae22:	1d23      	adds	r3, r4, #4
 800ae24:	f020 0007 	bic.w	r0, r0, #7
 800ae28:	1ac3      	subs	r3, r0, r3
 800ae2a:	d0d3      	beq.n	800add4 <_malloc_r+0x20>
 800ae2c:	425a      	negs	r2, r3
 800ae2e:	50e2      	str	r2, [r4, r3]
 800ae30:	e7d0      	b.n	800add4 <_malloc_r+0x20>
 800ae32:	428c      	cmp	r4, r1
 800ae34:	684b      	ldr	r3, [r1, #4]
 800ae36:	bf16      	itet	ne
 800ae38:	6063      	strne	r3, [r4, #4]
 800ae3a:	6013      	streq	r3, [r2, #0]
 800ae3c:	460c      	movne	r4, r1
 800ae3e:	e7eb      	b.n	800ae18 <_malloc_r+0x64>
 800ae40:	460c      	mov	r4, r1
 800ae42:	6849      	ldr	r1, [r1, #4]
 800ae44:	e7cc      	b.n	800ade0 <_malloc_r+0x2c>
 800ae46:	1cc4      	adds	r4, r0, #3
 800ae48:	f024 0403 	bic.w	r4, r4, #3
 800ae4c:	42a0      	cmp	r0, r4
 800ae4e:	d005      	beq.n	800ae5c <_malloc_r+0xa8>
 800ae50:	1a21      	subs	r1, r4, r0
 800ae52:	4630      	mov	r0, r6
 800ae54:	f000 f808 	bl	800ae68 <_sbrk_r>
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d0cf      	beq.n	800adfc <_malloc_r+0x48>
 800ae5c:	6025      	str	r5, [r4, #0]
 800ae5e:	e7db      	b.n	800ae18 <_malloc_r+0x64>
 800ae60:	200049d8 	.word	0x200049d8
 800ae64:	200049dc 	.word	0x200049dc

0800ae68 <_sbrk_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4c06      	ldr	r4, [pc, #24]	; (800ae84 <_sbrk_r+0x1c>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4605      	mov	r5, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	f7f8 f986 	bl	8003184 <_sbrk>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_sbrk_r+0x1a>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_sbrk_r+0x1a>
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	20004cfc 	.word	0x20004cfc

0800ae88 <siprintf>:
 800ae88:	b40e      	push	{r1, r2, r3}
 800ae8a:	b500      	push	{lr}
 800ae8c:	b09c      	sub	sp, #112	; 0x70
 800ae8e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae90:	9002      	str	r0, [sp, #8]
 800ae92:	9006      	str	r0, [sp, #24]
 800ae94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae98:	4809      	ldr	r0, [pc, #36]	; (800aec0 <siprintf+0x38>)
 800ae9a:	9107      	str	r1, [sp, #28]
 800ae9c:	9104      	str	r1, [sp, #16]
 800ae9e:	4909      	ldr	r1, [pc, #36]	; (800aec4 <siprintf+0x3c>)
 800aea0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea4:	9105      	str	r1, [sp, #20]
 800aea6:	6800      	ldr	r0, [r0, #0]
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	a902      	add	r1, sp, #8
 800aeac:	f000 f868 	bl	800af80 <_svfiprintf_r>
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	b01c      	add	sp, #112	; 0x70
 800aeb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aebc:	b003      	add	sp, #12
 800aebe:	4770      	bx	lr
 800aec0:	20000040 	.word	0x20000040
 800aec4:	ffff0208 	.word	0xffff0208

0800aec8 <__malloc_lock>:
 800aec8:	4770      	bx	lr

0800aeca <__malloc_unlock>:
 800aeca:	4770      	bx	lr

0800aecc <__ssputs_r>:
 800aecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed0:	688e      	ldr	r6, [r1, #8]
 800aed2:	429e      	cmp	r6, r3
 800aed4:	4682      	mov	sl, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	4690      	mov	r8, r2
 800aeda:	4699      	mov	r9, r3
 800aedc:	d837      	bhi.n	800af4e <__ssputs_r+0x82>
 800aede:	898a      	ldrh	r2, [r1, #12]
 800aee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aee4:	d031      	beq.n	800af4a <__ssputs_r+0x7e>
 800aee6:	6825      	ldr	r5, [r4, #0]
 800aee8:	6909      	ldr	r1, [r1, #16]
 800aeea:	1a6f      	subs	r7, r5, r1
 800aeec:	6965      	ldr	r5, [r4, #20]
 800aeee:	2302      	movs	r3, #2
 800aef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aef4:	fb95 f5f3 	sdiv	r5, r5, r3
 800aef8:	f109 0301 	add.w	r3, r9, #1
 800aefc:	443b      	add	r3, r7
 800aefe:	429d      	cmp	r5, r3
 800af00:	bf38      	it	cc
 800af02:	461d      	movcc	r5, r3
 800af04:	0553      	lsls	r3, r2, #21
 800af06:	d530      	bpl.n	800af6a <__ssputs_r+0x9e>
 800af08:	4629      	mov	r1, r5
 800af0a:	f7ff ff53 	bl	800adb4 <_malloc_r>
 800af0e:	4606      	mov	r6, r0
 800af10:	b950      	cbnz	r0, 800af28 <__ssputs_r+0x5c>
 800af12:	230c      	movs	r3, #12
 800af14:	f8ca 3000 	str.w	r3, [sl]
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af1e:	81a3      	strh	r3, [r4, #12]
 800af20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af28:	463a      	mov	r2, r7
 800af2a:	6921      	ldr	r1, [r4, #16]
 800af2c:	f7ff fee0 	bl	800acf0 <memcpy>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	6126      	str	r6, [r4, #16]
 800af3e:	6165      	str	r5, [r4, #20]
 800af40:	443e      	add	r6, r7
 800af42:	1bed      	subs	r5, r5, r7
 800af44:	6026      	str	r6, [r4, #0]
 800af46:	60a5      	str	r5, [r4, #8]
 800af48:	464e      	mov	r6, r9
 800af4a:	454e      	cmp	r6, r9
 800af4c:	d900      	bls.n	800af50 <__ssputs_r+0x84>
 800af4e:	464e      	mov	r6, r9
 800af50:	4632      	mov	r2, r6
 800af52:	4641      	mov	r1, r8
 800af54:	6820      	ldr	r0, [r4, #0]
 800af56:	f000 fa93 	bl	800b480 <memmove>
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	1b9b      	subs	r3, r3, r6
 800af5e:	60a3      	str	r3, [r4, #8]
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	441e      	add	r6, r3
 800af64:	6026      	str	r6, [r4, #0]
 800af66:	2000      	movs	r0, #0
 800af68:	e7dc      	b.n	800af24 <__ssputs_r+0x58>
 800af6a:	462a      	mov	r2, r5
 800af6c:	f000 faa1 	bl	800b4b2 <_realloc_r>
 800af70:	4606      	mov	r6, r0
 800af72:	2800      	cmp	r0, #0
 800af74:	d1e2      	bne.n	800af3c <__ssputs_r+0x70>
 800af76:	6921      	ldr	r1, [r4, #16]
 800af78:	4650      	mov	r0, sl
 800af7a:	f7ff fecd 	bl	800ad18 <_free_r>
 800af7e:	e7c8      	b.n	800af12 <__ssputs_r+0x46>

0800af80 <_svfiprintf_r>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	461d      	mov	r5, r3
 800af86:	898b      	ldrh	r3, [r1, #12]
 800af88:	061f      	lsls	r7, r3, #24
 800af8a:	b09d      	sub	sp, #116	; 0x74
 800af8c:	4680      	mov	r8, r0
 800af8e:	460c      	mov	r4, r1
 800af90:	4616      	mov	r6, r2
 800af92:	d50f      	bpl.n	800afb4 <_svfiprintf_r+0x34>
 800af94:	690b      	ldr	r3, [r1, #16]
 800af96:	b96b      	cbnz	r3, 800afb4 <_svfiprintf_r+0x34>
 800af98:	2140      	movs	r1, #64	; 0x40
 800af9a:	f7ff ff0b 	bl	800adb4 <_malloc_r>
 800af9e:	6020      	str	r0, [r4, #0]
 800afa0:	6120      	str	r0, [r4, #16]
 800afa2:	b928      	cbnz	r0, 800afb0 <_svfiprintf_r+0x30>
 800afa4:	230c      	movs	r3, #12
 800afa6:	f8c8 3000 	str.w	r3, [r8]
 800afaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afae:	e0c8      	b.n	800b142 <_svfiprintf_r+0x1c2>
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	6163      	str	r3, [r4, #20]
 800afb4:	2300      	movs	r3, #0
 800afb6:	9309      	str	r3, [sp, #36]	; 0x24
 800afb8:	2320      	movs	r3, #32
 800afba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afbe:	2330      	movs	r3, #48	; 0x30
 800afc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afc4:	9503      	str	r5, [sp, #12]
 800afc6:	f04f 0b01 	mov.w	fp, #1
 800afca:	4637      	mov	r7, r6
 800afcc:	463d      	mov	r5, r7
 800afce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800afd2:	b10b      	cbz	r3, 800afd8 <_svfiprintf_r+0x58>
 800afd4:	2b25      	cmp	r3, #37	; 0x25
 800afd6:	d13e      	bne.n	800b056 <_svfiprintf_r+0xd6>
 800afd8:	ebb7 0a06 	subs.w	sl, r7, r6
 800afdc:	d00b      	beq.n	800aff6 <_svfiprintf_r+0x76>
 800afde:	4653      	mov	r3, sl
 800afe0:	4632      	mov	r2, r6
 800afe2:	4621      	mov	r1, r4
 800afe4:	4640      	mov	r0, r8
 800afe6:	f7ff ff71 	bl	800aecc <__ssputs_r>
 800afea:	3001      	adds	r0, #1
 800afec:	f000 80a4 	beq.w	800b138 <_svfiprintf_r+0x1b8>
 800aff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff2:	4453      	add	r3, sl
 800aff4:	9309      	str	r3, [sp, #36]	; 0x24
 800aff6:	783b      	ldrb	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 809d 	beq.w	800b138 <_svfiprintf_r+0x1b8>
 800affe:	2300      	movs	r3, #0
 800b000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	9307      	str	r3, [sp, #28]
 800b00c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b010:	931a      	str	r3, [sp, #104]	; 0x68
 800b012:	462f      	mov	r7, r5
 800b014:	2205      	movs	r2, #5
 800b016:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b01a:	4850      	ldr	r0, [pc, #320]	; (800b15c <_svfiprintf_r+0x1dc>)
 800b01c:	f7f5 f910 	bl	8000240 <memchr>
 800b020:	9b04      	ldr	r3, [sp, #16]
 800b022:	b9d0      	cbnz	r0, 800b05a <_svfiprintf_r+0xda>
 800b024:	06d9      	lsls	r1, r3, #27
 800b026:	bf44      	itt	mi
 800b028:	2220      	movmi	r2, #32
 800b02a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b02e:	071a      	lsls	r2, r3, #28
 800b030:	bf44      	itt	mi
 800b032:	222b      	movmi	r2, #43	; 0x2b
 800b034:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b038:	782a      	ldrb	r2, [r5, #0]
 800b03a:	2a2a      	cmp	r2, #42	; 0x2a
 800b03c:	d015      	beq.n	800b06a <_svfiprintf_r+0xea>
 800b03e:	9a07      	ldr	r2, [sp, #28]
 800b040:	462f      	mov	r7, r5
 800b042:	2000      	movs	r0, #0
 800b044:	250a      	movs	r5, #10
 800b046:	4639      	mov	r1, r7
 800b048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b04c:	3b30      	subs	r3, #48	; 0x30
 800b04e:	2b09      	cmp	r3, #9
 800b050:	d94d      	bls.n	800b0ee <_svfiprintf_r+0x16e>
 800b052:	b1b8      	cbz	r0, 800b084 <_svfiprintf_r+0x104>
 800b054:	e00f      	b.n	800b076 <_svfiprintf_r+0xf6>
 800b056:	462f      	mov	r7, r5
 800b058:	e7b8      	b.n	800afcc <_svfiprintf_r+0x4c>
 800b05a:	4a40      	ldr	r2, [pc, #256]	; (800b15c <_svfiprintf_r+0x1dc>)
 800b05c:	1a80      	subs	r0, r0, r2
 800b05e:	fa0b f000 	lsl.w	r0, fp, r0
 800b062:	4318      	orrs	r0, r3
 800b064:	9004      	str	r0, [sp, #16]
 800b066:	463d      	mov	r5, r7
 800b068:	e7d3      	b.n	800b012 <_svfiprintf_r+0x92>
 800b06a:	9a03      	ldr	r2, [sp, #12]
 800b06c:	1d11      	adds	r1, r2, #4
 800b06e:	6812      	ldr	r2, [r2, #0]
 800b070:	9103      	str	r1, [sp, #12]
 800b072:	2a00      	cmp	r2, #0
 800b074:	db01      	blt.n	800b07a <_svfiprintf_r+0xfa>
 800b076:	9207      	str	r2, [sp, #28]
 800b078:	e004      	b.n	800b084 <_svfiprintf_r+0x104>
 800b07a:	4252      	negs	r2, r2
 800b07c:	f043 0302 	orr.w	r3, r3, #2
 800b080:	9207      	str	r2, [sp, #28]
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	783b      	ldrb	r3, [r7, #0]
 800b086:	2b2e      	cmp	r3, #46	; 0x2e
 800b088:	d10c      	bne.n	800b0a4 <_svfiprintf_r+0x124>
 800b08a:	787b      	ldrb	r3, [r7, #1]
 800b08c:	2b2a      	cmp	r3, #42	; 0x2a
 800b08e:	d133      	bne.n	800b0f8 <_svfiprintf_r+0x178>
 800b090:	9b03      	ldr	r3, [sp, #12]
 800b092:	1d1a      	adds	r2, r3, #4
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	9203      	str	r2, [sp, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	bfb8      	it	lt
 800b09c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b0a0:	3702      	adds	r7, #2
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	4d2e      	ldr	r5, [pc, #184]	; (800b160 <_svfiprintf_r+0x1e0>)
 800b0a6:	7839      	ldrb	r1, [r7, #0]
 800b0a8:	2203      	movs	r2, #3
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f7f5 f8c8 	bl	8000240 <memchr>
 800b0b0:	b138      	cbz	r0, 800b0c2 <_svfiprintf_r+0x142>
 800b0b2:	2340      	movs	r3, #64	; 0x40
 800b0b4:	1b40      	subs	r0, r0, r5
 800b0b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b0ba:	9b04      	ldr	r3, [sp, #16]
 800b0bc:	4303      	orrs	r3, r0
 800b0be:	3701      	adds	r7, #1
 800b0c0:	9304      	str	r3, [sp, #16]
 800b0c2:	7839      	ldrb	r1, [r7, #0]
 800b0c4:	4827      	ldr	r0, [pc, #156]	; (800b164 <_svfiprintf_r+0x1e4>)
 800b0c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0ca:	2206      	movs	r2, #6
 800b0cc:	1c7e      	adds	r6, r7, #1
 800b0ce:	f7f5 f8b7 	bl	8000240 <memchr>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d038      	beq.n	800b148 <_svfiprintf_r+0x1c8>
 800b0d6:	4b24      	ldr	r3, [pc, #144]	; (800b168 <_svfiprintf_r+0x1e8>)
 800b0d8:	bb13      	cbnz	r3, 800b120 <_svfiprintf_r+0x1a0>
 800b0da:	9b03      	ldr	r3, [sp, #12]
 800b0dc:	3307      	adds	r3, #7
 800b0de:	f023 0307 	bic.w	r3, r3, #7
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	9303      	str	r3, [sp, #12]
 800b0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e8:	444b      	add	r3, r9
 800b0ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ec:	e76d      	b.n	800afca <_svfiprintf_r+0x4a>
 800b0ee:	fb05 3202 	mla	r2, r5, r2, r3
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	460f      	mov	r7, r1
 800b0f6:	e7a6      	b.n	800b046 <_svfiprintf_r+0xc6>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	3701      	adds	r7, #1
 800b0fc:	9305      	str	r3, [sp, #20]
 800b0fe:	4619      	mov	r1, r3
 800b100:	250a      	movs	r5, #10
 800b102:	4638      	mov	r0, r7
 800b104:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b108:	3a30      	subs	r2, #48	; 0x30
 800b10a:	2a09      	cmp	r2, #9
 800b10c:	d903      	bls.n	800b116 <_svfiprintf_r+0x196>
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d0c8      	beq.n	800b0a4 <_svfiprintf_r+0x124>
 800b112:	9105      	str	r1, [sp, #20]
 800b114:	e7c6      	b.n	800b0a4 <_svfiprintf_r+0x124>
 800b116:	fb05 2101 	mla	r1, r5, r1, r2
 800b11a:	2301      	movs	r3, #1
 800b11c:	4607      	mov	r7, r0
 800b11e:	e7f0      	b.n	800b102 <_svfiprintf_r+0x182>
 800b120:	ab03      	add	r3, sp, #12
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	4622      	mov	r2, r4
 800b126:	4b11      	ldr	r3, [pc, #68]	; (800b16c <_svfiprintf_r+0x1ec>)
 800b128:	a904      	add	r1, sp, #16
 800b12a:	4640      	mov	r0, r8
 800b12c:	f3af 8000 	nop.w
 800b130:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b134:	4681      	mov	r9, r0
 800b136:	d1d6      	bne.n	800b0e6 <_svfiprintf_r+0x166>
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	065b      	lsls	r3, r3, #25
 800b13c:	f53f af35 	bmi.w	800afaa <_svfiprintf_r+0x2a>
 800b140:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b142:	b01d      	add	sp, #116	; 0x74
 800b144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b148:	ab03      	add	r3, sp, #12
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	4622      	mov	r2, r4
 800b14e:	4b07      	ldr	r3, [pc, #28]	; (800b16c <_svfiprintf_r+0x1ec>)
 800b150:	a904      	add	r1, sp, #16
 800b152:	4640      	mov	r0, r8
 800b154:	f000 f882 	bl	800b25c <_printf_i>
 800b158:	e7ea      	b.n	800b130 <_svfiprintf_r+0x1b0>
 800b15a:	bf00      	nop
 800b15c:	0800b814 	.word	0x0800b814
 800b160:	0800b81a 	.word	0x0800b81a
 800b164:	0800b81e 	.word	0x0800b81e
 800b168:	00000000 	.word	0x00000000
 800b16c:	0800aecd 	.word	0x0800aecd

0800b170 <_printf_common>:
 800b170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b174:	4691      	mov	r9, r2
 800b176:	461f      	mov	r7, r3
 800b178:	688a      	ldr	r2, [r1, #8]
 800b17a:	690b      	ldr	r3, [r1, #16]
 800b17c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b180:	4293      	cmp	r3, r2
 800b182:	bfb8      	it	lt
 800b184:	4613      	movlt	r3, r2
 800b186:	f8c9 3000 	str.w	r3, [r9]
 800b18a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b18e:	4606      	mov	r6, r0
 800b190:	460c      	mov	r4, r1
 800b192:	b112      	cbz	r2, 800b19a <_printf_common+0x2a>
 800b194:	3301      	adds	r3, #1
 800b196:	f8c9 3000 	str.w	r3, [r9]
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	0699      	lsls	r1, r3, #26
 800b19e:	bf42      	ittt	mi
 800b1a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b1a4:	3302      	addmi	r3, #2
 800b1a6:	f8c9 3000 	strmi.w	r3, [r9]
 800b1aa:	6825      	ldr	r5, [r4, #0]
 800b1ac:	f015 0506 	ands.w	r5, r5, #6
 800b1b0:	d107      	bne.n	800b1c2 <_printf_common+0x52>
 800b1b2:	f104 0a19 	add.w	sl, r4, #25
 800b1b6:	68e3      	ldr	r3, [r4, #12]
 800b1b8:	f8d9 2000 	ldr.w	r2, [r9]
 800b1bc:	1a9b      	subs	r3, r3, r2
 800b1be:	42ab      	cmp	r3, r5
 800b1c0:	dc28      	bgt.n	800b214 <_printf_common+0xa4>
 800b1c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b1c6:	6822      	ldr	r2, [r4, #0]
 800b1c8:	3300      	adds	r3, #0
 800b1ca:	bf18      	it	ne
 800b1cc:	2301      	movne	r3, #1
 800b1ce:	0692      	lsls	r2, r2, #26
 800b1d0:	d42d      	bmi.n	800b22e <_printf_common+0xbe>
 800b1d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	4630      	mov	r0, r6
 800b1da:	47c0      	blx	r8
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d020      	beq.n	800b222 <_printf_common+0xb2>
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	68e5      	ldr	r5, [r4, #12]
 800b1e4:	f8d9 2000 	ldr.w	r2, [r9]
 800b1e8:	f003 0306 	and.w	r3, r3, #6
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	bf08      	it	eq
 800b1f0:	1aad      	subeq	r5, r5, r2
 800b1f2:	68a3      	ldr	r3, [r4, #8]
 800b1f4:	6922      	ldr	r2, [r4, #16]
 800b1f6:	bf0c      	ite	eq
 800b1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1fc:	2500      	movne	r5, #0
 800b1fe:	4293      	cmp	r3, r2
 800b200:	bfc4      	itt	gt
 800b202:	1a9b      	subgt	r3, r3, r2
 800b204:	18ed      	addgt	r5, r5, r3
 800b206:	f04f 0900 	mov.w	r9, #0
 800b20a:	341a      	adds	r4, #26
 800b20c:	454d      	cmp	r5, r9
 800b20e:	d11a      	bne.n	800b246 <_printf_common+0xd6>
 800b210:	2000      	movs	r0, #0
 800b212:	e008      	b.n	800b226 <_printf_common+0xb6>
 800b214:	2301      	movs	r3, #1
 800b216:	4652      	mov	r2, sl
 800b218:	4639      	mov	r1, r7
 800b21a:	4630      	mov	r0, r6
 800b21c:	47c0      	blx	r8
 800b21e:	3001      	adds	r0, #1
 800b220:	d103      	bne.n	800b22a <_printf_common+0xba>
 800b222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b22a:	3501      	adds	r5, #1
 800b22c:	e7c3      	b.n	800b1b6 <_printf_common+0x46>
 800b22e:	18e1      	adds	r1, r4, r3
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	2030      	movs	r0, #48	; 0x30
 800b234:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b238:	4422      	add	r2, r4
 800b23a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b23e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b242:	3302      	adds	r3, #2
 800b244:	e7c5      	b.n	800b1d2 <_printf_common+0x62>
 800b246:	2301      	movs	r3, #1
 800b248:	4622      	mov	r2, r4
 800b24a:	4639      	mov	r1, r7
 800b24c:	4630      	mov	r0, r6
 800b24e:	47c0      	blx	r8
 800b250:	3001      	adds	r0, #1
 800b252:	d0e6      	beq.n	800b222 <_printf_common+0xb2>
 800b254:	f109 0901 	add.w	r9, r9, #1
 800b258:	e7d8      	b.n	800b20c <_printf_common+0x9c>
	...

0800b25c <_printf_i>:
 800b25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b260:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b264:	460c      	mov	r4, r1
 800b266:	7e09      	ldrb	r1, [r1, #24]
 800b268:	b085      	sub	sp, #20
 800b26a:	296e      	cmp	r1, #110	; 0x6e
 800b26c:	4617      	mov	r7, r2
 800b26e:	4606      	mov	r6, r0
 800b270:	4698      	mov	r8, r3
 800b272:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b274:	f000 80b3 	beq.w	800b3de <_printf_i+0x182>
 800b278:	d822      	bhi.n	800b2c0 <_printf_i+0x64>
 800b27a:	2963      	cmp	r1, #99	; 0x63
 800b27c:	d036      	beq.n	800b2ec <_printf_i+0x90>
 800b27e:	d80a      	bhi.n	800b296 <_printf_i+0x3a>
 800b280:	2900      	cmp	r1, #0
 800b282:	f000 80b9 	beq.w	800b3f8 <_printf_i+0x19c>
 800b286:	2958      	cmp	r1, #88	; 0x58
 800b288:	f000 8083 	beq.w	800b392 <_printf_i+0x136>
 800b28c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b290:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b294:	e032      	b.n	800b2fc <_printf_i+0xa0>
 800b296:	2964      	cmp	r1, #100	; 0x64
 800b298:	d001      	beq.n	800b29e <_printf_i+0x42>
 800b29a:	2969      	cmp	r1, #105	; 0x69
 800b29c:	d1f6      	bne.n	800b28c <_printf_i+0x30>
 800b29e:	6820      	ldr	r0, [r4, #0]
 800b2a0:	6813      	ldr	r3, [r2, #0]
 800b2a2:	0605      	lsls	r5, r0, #24
 800b2a4:	f103 0104 	add.w	r1, r3, #4
 800b2a8:	d52a      	bpl.n	800b300 <_printf_i+0xa4>
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6011      	str	r1, [r2, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	da03      	bge.n	800b2ba <_printf_i+0x5e>
 800b2b2:	222d      	movs	r2, #45	; 0x2d
 800b2b4:	425b      	negs	r3, r3
 800b2b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b2ba:	486f      	ldr	r0, [pc, #444]	; (800b478 <_printf_i+0x21c>)
 800b2bc:	220a      	movs	r2, #10
 800b2be:	e039      	b.n	800b334 <_printf_i+0xd8>
 800b2c0:	2973      	cmp	r1, #115	; 0x73
 800b2c2:	f000 809d 	beq.w	800b400 <_printf_i+0x1a4>
 800b2c6:	d808      	bhi.n	800b2da <_printf_i+0x7e>
 800b2c8:	296f      	cmp	r1, #111	; 0x6f
 800b2ca:	d020      	beq.n	800b30e <_printf_i+0xb2>
 800b2cc:	2970      	cmp	r1, #112	; 0x70
 800b2ce:	d1dd      	bne.n	800b28c <_printf_i+0x30>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	f043 0320 	orr.w	r3, r3, #32
 800b2d6:	6023      	str	r3, [r4, #0]
 800b2d8:	e003      	b.n	800b2e2 <_printf_i+0x86>
 800b2da:	2975      	cmp	r1, #117	; 0x75
 800b2dc:	d017      	beq.n	800b30e <_printf_i+0xb2>
 800b2de:	2978      	cmp	r1, #120	; 0x78
 800b2e0:	d1d4      	bne.n	800b28c <_printf_i+0x30>
 800b2e2:	2378      	movs	r3, #120	; 0x78
 800b2e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2e8:	4864      	ldr	r0, [pc, #400]	; (800b47c <_printf_i+0x220>)
 800b2ea:	e055      	b.n	800b398 <_printf_i+0x13c>
 800b2ec:	6813      	ldr	r3, [r2, #0]
 800b2ee:	1d19      	adds	r1, r3, #4
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6011      	str	r1, [r2, #0]
 800b2f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e08c      	b.n	800b41a <_printf_i+0x1be>
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6011      	str	r1, [r2, #0]
 800b304:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b308:	bf18      	it	ne
 800b30a:	b21b      	sxthne	r3, r3
 800b30c:	e7cf      	b.n	800b2ae <_printf_i+0x52>
 800b30e:	6813      	ldr	r3, [r2, #0]
 800b310:	6825      	ldr	r5, [r4, #0]
 800b312:	1d18      	adds	r0, r3, #4
 800b314:	6010      	str	r0, [r2, #0]
 800b316:	0628      	lsls	r0, r5, #24
 800b318:	d501      	bpl.n	800b31e <_printf_i+0xc2>
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	e002      	b.n	800b324 <_printf_i+0xc8>
 800b31e:	0668      	lsls	r0, r5, #25
 800b320:	d5fb      	bpl.n	800b31a <_printf_i+0xbe>
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	4854      	ldr	r0, [pc, #336]	; (800b478 <_printf_i+0x21c>)
 800b326:	296f      	cmp	r1, #111	; 0x6f
 800b328:	bf14      	ite	ne
 800b32a:	220a      	movne	r2, #10
 800b32c:	2208      	moveq	r2, #8
 800b32e:	2100      	movs	r1, #0
 800b330:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b334:	6865      	ldr	r5, [r4, #4]
 800b336:	60a5      	str	r5, [r4, #8]
 800b338:	2d00      	cmp	r5, #0
 800b33a:	f2c0 8095 	blt.w	800b468 <_printf_i+0x20c>
 800b33e:	6821      	ldr	r1, [r4, #0]
 800b340:	f021 0104 	bic.w	r1, r1, #4
 800b344:	6021      	str	r1, [r4, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d13d      	bne.n	800b3c6 <_printf_i+0x16a>
 800b34a:	2d00      	cmp	r5, #0
 800b34c:	f040 808e 	bne.w	800b46c <_printf_i+0x210>
 800b350:	4665      	mov	r5, ip
 800b352:	2a08      	cmp	r2, #8
 800b354:	d10b      	bne.n	800b36e <_printf_i+0x112>
 800b356:	6823      	ldr	r3, [r4, #0]
 800b358:	07db      	lsls	r3, r3, #31
 800b35a:	d508      	bpl.n	800b36e <_printf_i+0x112>
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	6862      	ldr	r2, [r4, #4]
 800b360:	429a      	cmp	r2, r3
 800b362:	bfde      	ittt	le
 800b364:	2330      	movle	r3, #48	; 0x30
 800b366:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b36a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b36e:	ebac 0305 	sub.w	r3, ip, r5
 800b372:	6123      	str	r3, [r4, #16]
 800b374:	f8cd 8000 	str.w	r8, [sp]
 800b378:	463b      	mov	r3, r7
 800b37a:	aa03      	add	r2, sp, #12
 800b37c:	4621      	mov	r1, r4
 800b37e:	4630      	mov	r0, r6
 800b380:	f7ff fef6 	bl	800b170 <_printf_common>
 800b384:	3001      	adds	r0, #1
 800b386:	d14d      	bne.n	800b424 <_printf_i+0x1c8>
 800b388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b38c:	b005      	add	sp, #20
 800b38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b392:	4839      	ldr	r0, [pc, #228]	; (800b478 <_printf_i+0x21c>)
 800b394:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b398:	6813      	ldr	r3, [r2, #0]
 800b39a:	6821      	ldr	r1, [r4, #0]
 800b39c:	1d1d      	adds	r5, r3, #4
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6015      	str	r5, [r2, #0]
 800b3a2:	060a      	lsls	r2, r1, #24
 800b3a4:	d50b      	bpl.n	800b3be <_printf_i+0x162>
 800b3a6:	07ca      	lsls	r2, r1, #31
 800b3a8:	bf44      	itt	mi
 800b3aa:	f041 0120 	orrmi.w	r1, r1, #32
 800b3ae:	6021      	strmi	r1, [r4, #0]
 800b3b0:	b91b      	cbnz	r3, 800b3ba <_printf_i+0x15e>
 800b3b2:	6822      	ldr	r2, [r4, #0]
 800b3b4:	f022 0220 	bic.w	r2, r2, #32
 800b3b8:	6022      	str	r2, [r4, #0]
 800b3ba:	2210      	movs	r2, #16
 800b3bc:	e7b7      	b.n	800b32e <_printf_i+0xd2>
 800b3be:	064d      	lsls	r5, r1, #25
 800b3c0:	bf48      	it	mi
 800b3c2:	b29b      	uxthmi	r3, r3
 800b3c4:	e7ef      	b.n	800b3a6 <_printf_i+0x14a>
 800b3c6:	4665      	mov	r5, ip
 800b3c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3cc:	fb02 3311 	mls	r3, r2, r1, r3
 800b3d0:	5cc3      	ldrb	r3, [r0, r3]
 800b3d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	2900      	cmp	r1, #0
 800b3da:	d1f5      	bne.n	800b3c8 <_printf_i+0x16c>
 800b3dc:	e7b9      	b.n	800b352 <_printf_i+0xf6>
 800b3de:	6813      	ldr	r3, [r2, #0]
 800b3e0:	6825      	ldr	r5, [r4, #0]
 800b3e2:	6961      	ldr	r1, [r4, #20]
 800b3e4:	1d18      	adds	r0, r3, #4
 800b3e6:	6010      	str	r0, [r2, #0]
 800b3e8:	0628      	lsls	r0, r5, #24
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	d501      	bpl.n	800b3f2 <_printf_i+0x196>
 800b3ee:	6019      	str	r1, [r3, #0]
 800b3f0:	e002      	b.n	800b3f8 <_printf_i+0x19c>
 800b3f2:	066a      	lsls	r2, r5, #25
 800b3f4:	d5fb      	bpl.n	800b3ee <_printf_i+0x192>
 800b3f6:	8019      	strh	r1, [r3, #0]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	6123      	str	r3, [r4, #16]
 800b3fc:	4665      	mov	r5, ip
 800b3fe:	e7b9      	b.n	800b374 <_printf_i+0x118>
 800b400:	6813      	ldr	r3, [r2, #0]
 800b402:	1d19      	adds	r1, r3, #4
 800b404:	6011      	str	r1, [r2, #0]
 800b406:	681d      	ldr	r5, [r3, #0]
 800b408:	6862      	ldr	r2, [r4, #4]
 800b40a:	2100      	movs	r1, #0
 800b40c:	4628      	mov	r0, r5
 800b40e:	f7f4 ff17 	bl	8000240 <memchr>
 800b412:	b108      	cbz	r0, 800b418 <_printf_i+0x1bc>
 800b414:	1b40      	subs	r0, r0, r5
 800b416:	6060      	str	r0, [r4, #4]
 800b418:	6863      	ldr	r3, [r4, #4]
 800b41a:	6123      	str	r3, [r4, #16]
 800b41c:	2300      	movs	r3, #0
 800b41e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b422:	e7a7      	b.n	800b374 <_printf_i+0x118>
 800b424:	6923      	ldr	r3, [r4, #16]
 800b426:	462a      	mov	r2, r5
 800b428:	4639      	mov	r1, r7
 800b42a:	4630      	mov	r0, r6
 800b42c:	47c0      	blx	r8
 800b42e:	3001      	adds	r0, #1
 800b430:	d0aa      	beq.n	800b388 <_printf_i+0x12c>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	079b      	lsls	r3, r3, #30
 800b436:	d413      	bmi.n	800b460 <_printf_i+0x204>
 800b438:	68e0      	ldr	r0, [r4, #12]
 800b43a:	9b03      	ldr	r3, [sp, #12]
 800b43c:	4298      	cmp	r0, r3
 800b43e:	bfb8      	it	lt
 800b440:	4618      	movlt	r0, r3
 800b442:	e7a3      	b.n	800b38c <_printf_i+0x130>
 800b444:	2301      	movs	r3, #1
 800b446:	464a      	mov	r2, r9
 800b448:	4639      	mov	r1, r7
 800b44a:	4630      	mov	r0, r6
 800b44c:	47c0      	blx	r8
 800b44e:	3001      	adds	r0, #1
 800b450:	d09a      	beq.n	800b388 <_printf_i+0x12c>
 800b452:	3501      	adds	r5, #1
 800b454:	68e3      	ldr	r3, [r4, #12]
 800b456:	9a03      	ldr	r2, [sp, #12]
 800b458:	1a9b      	subs	r3, r3, r2
 800b45a:	42ab      	cmp	r3, r5
 800b45c:	dcf2      	bgt.n	800b444 <_printf_i+0x1e8>
 800b45e:	e7eb      	b.n	800b438 <_printf_i+0x1dc>
 800b460:	2500      	movs	r5, #0
 800b462:	f104 0919 	add.w	r9, r4, #25
 800b466:	e7f5      	b.n	800b454 <_printf_i+0x1f8>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1ac      	bne.n	800b3c6 <_printf_i+0x16a>
 800b46c:	7803      	ldrb	r3, [r0, #0]
 800b46e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b472:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b476:	e76c      	b.n	800b352 <_printf_i+0xf6>
 800b478:	0800b825 	.word	0x0800b825
 800b47c:	0800b836 	.word	0x0800b836

0800b480 <memmove>:
 800b480:	4288      	cmp	r0, r1
 800b482:	b510      	push	{r4, lr}
 800b484:	eb01 0302 	add.w	r3, r1, r2
 800b488:	d807      	bhi.n	800b49a <memmove+0x1a>
 800b48a:	1e42      	subs	r2, r0, #1
 800b48c:	4299      	cmp	r1, r3
 800b48e:	d00a      	beq.n	800b4a6 <memmove+0x26>
 800b490:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b494:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b498:	e7f8      	b.n	800b48c <memmove+0xc>
 800b49a:	4283      	cmp	r3, r0
 800b49c:	d9f5      	bls.n	800b48a <memmove+0xa>
 800b49e:	1881      	adds	r1, r0, r2
 800b4a0:	1ad2      	subs	r2, r2, r3
 800b4a2:	42d3      	cmn	r3, r2
 800b4a4:	d100      	bne.n	800b4a8 <memmove+0x28>
 800b4a6:	bd10      	pop	{r4, pc}
 800b4a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b4b0:	e7f7      	b.n	800b4a2 <memmove+0x22>

0800b4b2 <_realloc_r>:
 800b4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b4:	4607      	mov	r7, r0
 800b4b6:	4614      	mov	r4, r2
 800b4b8:	460e      	mov	r6, r1
 800b4ba:	b921      	cbnz	r1, 800b4c6 <_realloc_r+0x14>
 800b4bc:	4611      	mov	r1, r2
 800b4be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4c2:	f7ff bc77 	b.w	800adb4 <_malloc_r>
 800b4c6:	b922      	cbnz	r2, 800b4d2 <_realloc_r+0x20>
 800b4c8:	f7ff fc26 	bl	800ad18 <_free_r>
 800b4cc:	4625      	mov	r5, r4
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d2:	f000 f814 	bl	800b4fe <_malloc_usable_size_r>
 800b4d6:	42a0      	cmp	r0, r4
 800b4d8:	d20f      	bcs.n	800b4fa <_realloc_r+0x48>
 800b4da:	4621      	mov	r1, r4
 800b4dc:	4638      	mov	r0, r7
 800b4de:	f7ff fc69 	bl	800adb4 <_malloc_r>
 800b4e2:	4605      	mov	r5, r0
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d0f2      	beq.n	800b4ce <_realloc_r+0x1c>
 800b4e8:	4631      	mov	r1, r6
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	f7ff fc00 	bl	800acf0 <memcpy>
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4638      	mov	r0, r7
 800b4f4:	f7ff fc10 	bl	800ad18 <_free_r>
 800b4f8:	e7e9      	b.n	800b4ce <_realloc_r+0x1c>
 800b4fa:	4635      	mov	r5, r6
 800b4fc:	e7e7      	b.n	800b4ce <_realloc_r+0x1c>

0800b4fe <_malloc_usable_size_r>:
 800b4fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b502:	1f18      	subs	r0, r3, #4
 800b504:	2b00      	cmp	r3, #0
 800b506:	bfbc      	itt	lt
 800b508:	580b      	ldrlt	r3, [r1, r0]
 800b50a:	18c0      	addlt	r0, r0, r3
 800b50c:	4770      	bx	lr
	...

0800b510 <_init>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	bf00      	nop
 800b514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b516:	bc08      	pop	{r3}
 800b518:	469e      	mov	lr, r3
 800b51a:	4770      	bx	lr

0800b51c <_fini>:
 800b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51e:	bf00      	nop
 800b520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b522:	bc08      	pop	{r3}
 800b524:	469e      	mov	lr, r3
 800b526:	4770      	bx	lr
